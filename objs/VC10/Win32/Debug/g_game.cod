; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\g_game.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_gamestate
PUBLIC	_ultimatemode
PUBLIC	_oncontinuescreen
PUBLIC	_runemeraldmanager
PUBLIC	_gamemap
PUBLIC	_globalweather
PUBLIC	_curWeather
PUBLIC	_cursaveslot
PUBLIC	_lastmapsaved
PUBLIC	_gamecomplete
PUBLIC	_mainwads
PUBLIC	_savemoddata
PUBLIC	_timeattacking
PUBLIC	_disableSpeedAdjust
PUBLIC	_imcontinuing
PUBLIC	_gamedataloaded
PUBLIC	_looptitle
PUBLIC	_useNightsSS
PUBLIC	_countdowntimer
PUBLIC	_countdowntimeup
PUBLIC	_numemblems
PUBLIC	_nummaprings
PUBLIC	_emblemlocations
PUBLIC	_invulntics
PUBLIC	_sneakertics
PUBLIC	_flashingtics
PUBLIC	_tailsflytics
PUBLIC	_underwatertics
PUBLIC	_spacetimetics
PUBLIC	_extralifetics
PUBLIC	_gravbootstics
PUBLIC	_paralooptics
PUBLIC	_helpertics
PUBLIC	_precache
PUBLIC	_cv_invertmouse2
PUBLIC	_cv_alwaysfreelook2
PUBLIC	_cv_mousemove2
PUBLIC	_cv_useranalog
PUBLIC	_cv_useranalog2
PUBLIC	_cv_analog
PUBLIC	_cv_analog2
PUBLIC	_gamedatafilename
PUBLIC	_timeattackfolder
PUBLIC	_customversionstring
PUBLIC	_player_names
PUBLIC	_gameovertics
PUBLIC	_cv_crosshair
PUBLIC	_cv_crosshair2
PUBLIC	_cv_invertmouse
PUBLIC	_cv_alwaysfreelook
PUBLIC	_cv_mousemove
PUBLIC	_cv_sideaxis
PUBLIC	_cv_turnaxis
PUBLIC	_cv_moveaxis
PUBLIC	_cv_lookaxis
PUBLIC	_cv_fireaxis
PUBLIC	_cv_firenaxis
PUBLIC	_cv_sideaxis2
PUBLIC	_cv_turnaxis2
PUBLIC	_cv_moveaxis2
PUBLIC	_cv_lookaxis2
PUBLIC	_cv_fireaxis2
PUBLIC	_cv_firenaxis2
PUBLIC	??_C@_03GCDBBDDL@Off@				; `string'
PUBLIC	??_C@_05HFADIOFI@Cross@				; `string'
PUBLIC	??_C@_05FDINCMKF@Angle@				; `string'
PUBLIC	??_C@_05BGOFFEGG@Point@				; `string'
PUBLIC	??_C@_04OHJIHAFH@None@				; `string'
PUBLIC	??_C@_06EBJHLCKJ@X?9Axis@			; `string'
PUBLIC	??_C@_06OHOALJBN@Y?9Axis@			; `string'
PUBLIC	??_C@_07IPGBNGBB@X?9Axis?9@			; `string'
PUBLIC	??_C@_07EDMLNGIP@Y?9Axis?9@			; `string'
PUBLIC	??_C@_06NGAIKDIA@Z?9Axis@			; `string'
PUBLIC	??_C@_08NGEJLIDC@X?9Rudder@			; `string'
PUBLIC	??_C@_07MNEENBGM@Z?9Axis?9@			; `string'
PUBLIC	??_C@_09OICLECNH@X?9Rudder?9@			; `string'
PUBLIC	??_C@_08MBDCKMHB@Y?9Rudder@			; `string'
PUBLIC	??_C@_08PILPJALE@Z?9Rudder@			; `string'
PUBLIC	??_C@_09HOJCJOJ@Y?9Rudder?9@			; `string'
PUBLIC	??_C@_09OMNOJCOK@Z?9Rudder?9@			; `string'
PUBLIC	??_C@_06CAEANDGJ@U?9Axis@			; `string'
PUBLIC	??_C@_06BBKIMJPE@V?9Axis@			; `string'
PUBLIC	??_C@_07BEGEMDMA@U?9Axis?9@			; `string'
PUBLIC	??_C@_07JKOLMECD@V?9Axis?9@			; `string'
PUBLIC	??_C@_09NBNKIDFG@crosshair@			; `string'
PUBLIC	??_C@_0L@GPKJHKDD@crosshair2@			; `string'
PUBLIC	??_C@_0M@JFFGGEIL@invertmouse@			; `string'
PUBLIC	??_C@_0M@BCGOAJOP@alwaysmlook@			; `string'
PUBLIC	??_C@_02IAAGKKDJ@On@				; `string'
PUBLIC	??_C@_0N@JHIPFILN@invertmouse2@			; `string'
PUBLIC	??_C@_0N@NNNHMFJB@alwaysmlook2@			; `string'
PUBLIC	??_C@_09JAKOECDO@mousemove@			; `string'
PUBLIC	??_C@_0L@CMIBOHJI@mousemove2@			; `string'
PUBLIC	??_C@_06MBDJGOMB@analog@			; `string'
PUBLIC	??_C@_07BNCJPDJ@analog2@			; `string'
PUBLIC	??_C@_0L@FNFIJCHP@useranalog@			; `string'
PUBLIC	??_C@_0M@CNJHGAEO@useranalog2@			; `string'
PUBLIC	??_C@_0N@HNJELDDL@joyaxis_turn@			; `string'
PUBLIC	??_C@_0N@MLDNIACE@joyaxis_move@			; `string'
PUBLIC	??_C@_0N@COCEIBAF@joyaxis_side@			; `string'
PUBLIC	??_C@_0N@HLCJBMOF@joyaxis_look@			; `string'
PUBLIC	??_C@_0N@JOIPEGDF@joyaxis_fire@			; `string'
PUBLIC	??_C@_0BD@CJJLJLJK@joyaxis_firenormal@		; `string'
PUBLIC	??_C@_0O@HIIJKIHD@joyaxis2_turn@		; `string'
PUBLIC	??_C@_0O@MOCAJLGM@joyaxis2_move@		; `string'
PUBLIC	??_C@_0O@CLDJJKEN@joyaxis2_side@		; `string'
PUBLIC	??_C@_0O@HODEAHKN@joyaxis2_look@		; `string'
PUBLIC	??_C@_0O@JLJCFNHN@joyaxis2_fire@		; `string'
PUBLIC	??_C@_0BE@HJBIPIKB@joyaxis2_firenormal@		; `string'
EXTRN	_CV_OnOff:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
_BSS	SEGMENT
_gamestate DD	01H DUP (?)
_ultimatemode DB 01H DUP (?)
	ALIGN	4

_oncontinuescreen DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_gameaction:DWORD
_DATA	ENDS
_BSS	SEGMENT
_runemeraldmanager DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_mapmusic:DWORD
COMM	_maptol:WORD
_DATA	ENDS
_BSS	SEGMENT
_globalweather DB 01H DUP (?)
	ALIGN	4

_curWeather DD	01H DUP (?)
_lastmapsaved DW 01H DUP (?)
	ALIGN	4

_gamecomplete DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_modifiedgame:DWORD
_DATA	ENDS
_BSS	SEGMENT
_mainwads DW	01H DUP (?)
	ALIGN	4

_savemoddata DD	01H DUP (?)
_timeattacking DD 01H DUP (?)
_disableSpeedAdjust DD 01H DUP (?)
_imcontinuing DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_netgame:DWORD
COMM	_addedtogame:DWORD
COMM	_multiplayer:DWORD
COMM	_paused:BYTE
COMM	_nodrawers:DWORD
COMM	_noblit:DWORD
_DATA	ENDS
_BSS	SEGMENT
_gamedataloaded DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_consoleplayer:DWORD
COMM	_displayplayer:DWORD
COMM	_secondarydisplayplayer:DWORD
COMM	_spstage_start:WORD
COMM	_spstage_end:WORD
COMM	_sstage_start:WORD
COMM	_sstage_end:WORD
COMM	_nsstage_start:WORD
COMM	_nsstage_end:WORD
COMM	_racestage_start:WORD
_DATA	ENDS
_BSS	SEGMENT
_looptitle DD	01H DUP (?)
_useNightsSS DD	01H DUP (?)
_countdowntimer DD 01H DUP (?)
_countdowntimeup DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_cutscenes:BYTE:0290200H
COMM	_nextmapoverride:WORD
COMM	_nextmapgametype:DWORD
COMM	_skipstats:DWORD
COMM	_totalrings:DWORD
COMM	_lastmap:WORD
COMM	_redflag:DWORD
COMM	_blueflag:DWORD
COMM	_rflagpoint:DWORD
COMM	_bflagpoint:DWORD
COMM	_lvltable:BYTE:010400H
COMM	_mapheaderinfo:BYTE:0620acH
COMM	_emeralds:WORD
COMM	_totalplaytime:DWORD
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	4

_nummaprings DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_timedata:DWORD:040bH
COMM	_mapvisited:BYTE:040bH
COMM	_token:DWORD
COMM	_tokenlist:DWORD
COMM	_tokenbits:DWORD
COMM	_sstimer:DWORD
COMM	_bluescore:DWORD
COMM	_redscore:DWORD
COMM	_CheckForBustableBlocks:DWORD
COMM	_CheckForBouncySector:DWORD
COMM	_CheckForQuicksand:DWORD
COMM	_CheckForMarioBlocks:DWORD
COMM	_CheckForFloatBob:DWORD
COMM	_CheckForReverseGravity:DWORD
COMM	_introtoplay:BYTE
COMM	_creditscutscene:BYTE
COMM	_hunt1:DWORD
COMM	_hunt2:DWORD
COMM	_hunt3:DWORD
COMM	_countdown:DWORD
COMM	_countdown2:DWORD
COMM	_gravity:DWORD
COMM	_autobalance:WORD
COMM	_teamscramble:WORD
COMM	_scrambleplayers:WORD:020H
COMM	_scrambleteams:WORD:020H
COMM	_scrambletotal:WORD
COMM	_scramblecount:WORD
COMM	_cheats:DWORD
COMM	_matchtype:DWORD
COMM	_tagtype:DWORD
COMM	_hidetime:DWORD
COMM	_grade:DWORD
COMM	_timesbeaten:DWORD
COMM	_gametic:DWORD
_DATA	ENDS
_BSS	SEGMENT
_customversionstring DB 020H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_seenplayer:DWORD
COMM	_players:BYTE:03f80H
COMM	_playeringame:DWORD:020H
COMM	_demoplayback:DWORD
COMM	_demorecording:DWORD
COMM	_timingdemo:DWORD
COMM	_singledemo:DWORD
COMM	_levelstarttic:DWORD
COMM	_prevmap:WORD
COMM	_nextmap:WORD
COMM	_timeinmap:DWORD
COMM	_localangle:DWORD
COMM	_localangle2:DWORD
COMM	_localaiming:DWORD
COMM	_localaiming2:DWORD
COMM	_Joystick:QWORD
COMM	_Joystick2:QWORD
_DATA	ENDS
;	COMDAT ??_C@_0BE@HJBIPIKB@joyaxis2_firenormal@
CONST	SEGMENT
??_C@_0BE@HJBIPIKB@joyaxis2_firenormal@ DB 'joyaxis2_firenormal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JLJCFNHN@joyaxis2_fire@
CONST	SEGMENT
??_C@_0O@JLJCFNHN@joyaxis2_fire@ DB 'joyaxis2_fire', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HODEAHKN@joyaxis2_look@
CONST	SEGMENT
??_C@_0O@HODEAHKN@joyaxis2_look@ DB 'joyaxis2_look', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLDJJKEN@joyaxis2_side@
CONST	SEGMENT
??_C@_0O@CLDJJKEN@joyaxis2_side@ DB 'joyaxis2_side', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MOCAJLGM@joyaxis2_move@
CONST	SEGMENT
??_C@_0O@MOCAJLGM@joyaxis2_move@ DB 'joyaxis2_move', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HIIJKIHD@joyaxis2_turn@
CONST	SEGMENT
??_C@_0O@HIIJKIHD@joyaxis2_turn@ DB 'joyaxis2_turn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CJJLJLJK@joyaxis_firenormal@
CONST	SEGMENT
??_C@_0BD@CJJLJLJK@joyaxis_firenormal@ DB 'joyaxis_firenormal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JOIPEGDF@joyaxis_fire@
CONST	SEGMENT
??_C@_0N@JOIPEGDF@joyaxis_fire@ DB 'joyaxis_fire', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HLCJBMOF@joyaxis_look@
CONST	SEGMENT
??_C@_0N@HLCJBMOF@joyaxis_look@ DB 'joyaxis_look', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@COCEIBAF@joyaxis_side@
CONST	SEGMENT
??_C@_0N@COCEIBAF@joyaxis_side@ DB 'joyaxis_side', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLDNIACE@joyaxis_move@
CONST	SEGMENT
??_C@_0N@MLDNIACE@joyaxis_move@ DB 'joyaxis_move', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HNJELDDL@joyaxis_turn@
CONST	SEGMENT
??_C@_0N@HNJELDDL@joyaxis_turn@ DB 'joyaxis_turn', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CNJHGAEO@useranalog2@
CONST	SEGMENT
??_C@_0M@CNJHGAEO@useranalog2@ DB 'useranalog2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNFIJCHP@useranalog@
CONST	SEGMENT
??_C@_0L@FNFIJCHP@useranalog@ DB 'useranalog', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNCJPDJ@analog2@
CONST	SEGMENT
??_C@_07BNCJPDJ@analog2@ DB 'analog2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBDJGOMB@analog@
CONST	SEGMENT
??_C@_06MBDJGOMB@analog@ DB 'analog', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CMIBOHJI@mousemove2@
CONST	SEGMENT
??_C@_0L@CMIBOHJI@mousemove2@ DB 'mousemove2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JAKOECDO@mousemove@
CONST	SEGMENT
??_C@_09JAKOECDO@mousemove@ DB 'mousemove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NNNHMFJB@alwaysmlook2@
CONST	SEGMENT
??_C@_0N@NNNHMFJB@alwaysmlook2@ DB 'alwaysmlook2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JHIPFILN@invertmouse2@
CONST	SEGMENT
??_C@_0N@JHIPFILN@invertmouse2@ DB 'invertmouse2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCGOAJOP@alwaysmlook@
CONST	SEGMENT
??_C@_0M@BCGOAJOP@alwaysmlook@ DB 'alwaysmlook', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JFFGGEIL@invertmouse@
CONST	SEGMENT
??_C@_0M@JFFGGEIL@invertmouse@ DB 'invertmouse', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPKJHKDD@crosshair2@
CONST	SEGMENT
??_C@_0L@GPKJHKDD@crosshair2@ DB 'crosshair2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBNKIDFG@crosshair@
CONST	SEGMENT
??_C@_09NBNKIDFG@crosshair@ DB 'crosshair', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKOLMECD@V?9Axis?9@
CONST	SEGMENT
??_C@_07JKOLMECD@V?9Axis?9@ DB 'V-Axis-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BEGEMDMA@U?9Axis?9@
CONST	SEGMENT
??_C@_07BEGEMDMA@U?9Axis?9@ DB 'U-Axis-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBKIMJPE@V?9Axis@
CONST	SEGMENT
??_C@_06BBKIMJPE@V?9Axis@ DB 'V-Axis', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAEANDGJ@U?9Axis@
CONST	SEGMENT
??_C@_06CAEANDGJ@U?9Axis@ DB 'U-Axis', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OMNOJCOK@Z?9Rudder?9@
CONST	SEGMENT
??_C@_09OMNOJCOK@Z?9Rudder?9@ DB 'Z-Rudder-', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HOJCJOJ@Y?9Rudder?9@
CONST	SEGMENT
??_C@_09HOJCJOJ@Y?9Rudder?9@ DB 'Y-Rudder-', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PILPJALE@Z?9Rudder@
CONST	SEGMENT
??_C@_08PILPJALE@Z?9Rudder@ DB 'Z-Rudder', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBDCKMHB@Y?9Rudder@
CONST	SEGMENT
??_C@_08MBDCKMHB@Y?9Rudder@ DB 'Y-Rudder', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OICLECNH@X?9Rudder?9@
CONST	SEGMENT
??_C@_09OICLECNH@X?9Rudder?9@ DB 'X-Rudder-', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MNEENBGM@Z?9Axis?9@
CONST	SEGMENT
??_C@_07MNEENBGM@Z?9Axis?9@ DB 'Z-Axis-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NGEJLIDC@X?9Rudder@
CONST	SEGMENT
??_C@_08NGEJLIDC@X?9Rudder@ DB 'X-Rudder', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGAIKDIA@Z?9Axis@
CONST	SEGMENT
??_C@_06NGAIKDIA@Z?9Axis@ DB 'Z-Axis', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDMLNGIP@Y?9Axis?9@
CONST	SEGMENT
??_C@_07EDMLNGIP@Y?9Axis?9@ DB 'Y-Axis-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IPGBNGBB@X?9Axis?9@
CONST	SEGMENT
??_C@_07IPGBNGBB@X?9Axis?9@ DB 'X-Axis-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHOALJBN@Y?9Axis@
CONST	SEGMENT
??_C@_06OHOALJBN@Y?9Axis@ DB 'Y-Axis', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBJHLCKJ@X?9Axis@
CONST	SEGMENT
??_C@_06EBJHLCKJ@X?9Axis@ DB 'X-Axis', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None@
CONST	SEGMENT
??_C@_04OHJIHAFH@None@ DB 'None', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BGOFFEGG@Point@
CONST	SEGMENT
??_C@_05BGOFFEGG@Point@ DB 'Point', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDINCMKF@Angle@
CONST	SEGMENT
??_C@_05FDINCMKF@Angle@ DB 'Angle', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFADIOFI@Cross@
CONST	SEGMENT
??_C@_05HFADIOFI@Cross@ DB 'Cross', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off@ DB 'Off', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_gamemap DW	01H
	ORG $+2
_cursaveslot DD	0ffffffffH
_numemblems DD	028H
_invulntics DD	02bcH
_emblemlocations DW 0620H
	DW	01100H
	DW	0280H
	DB	00H
	ORG $+1
	DW	01H
	DB	00H
	ORG $+1
	DW	01fc0H
	DW	01b40H
	DW	0160H
	DB	01H
	ORG $+1
	DW	01H
	DB	00H
	ORG $+1
	DW	0c70H
	DW	0713H
	DW	03a0H
	DB	02H
	ORG $+1
	DW	01H
	DB	00H
	ORG $+1
	DW	09e0H
	DW	0e540H
	DW	0534H
	DB	00H
	ORG $+1
	DW	02H
	DB	00H
	ORG $+1
	DW	01600H
	DW	0730H
	DW	0f60H
	DB	01H
	ORG $+1
	DW	02H
	DB	00H
	ORG $+1
	DW	0c40H
	DW	0ec0H
	DW	0524H
	DB	02H
	ORG $+1
	DW	02H
	DB	00H
	ORG $+1
	DW	0f500H
	DW	0dae0H
	DW	0c20H
	DB	00H
	ORG $+1
	DW	04H
	DB	00H
	ORG $+1
	DW	0fd60H
	DW	0ecc0H
	DW	0900H
	DB	01H
	ORG $+1
	DW	04H
	DB	00H
	ORG $+1
	DW	04ec0H
	DW	0dbe0H
	DW	0954H
	DB	02H
	ORG $+1
	DW	04H
	DB	00H
	ORG $+1
	DW	0fb40H
	DW	0f240H
	DW	09a0H
	DB	00H
	ORG $+1
	DW	05H
	DB	00H
	ORG $+1
	DW	016c0H
	DW	05e0H
	DW	03c0H
	DB	01H
	ORG $+1
	DW	05H
	DB	00H
	ORG $+1
	DW	01ae0H
	DW	05e0H
	DW	07dcH
	DB	02H
	ORG $+1
	DW	05H
	DB	00H
	ORG $+1
	DW	0ec00H
	DW	0f040H
	DW	08e8H
	DB	00H
	ORG $+1
	DW	07H
	DB	00H
	ORG $+1
	DW	01840H
	DW	0e460H
	DW	0ebeH
	DB	01H
	ORG $+1
	DW	07H
	DB	00H
	ORG $+1
	DW	0c500H
	DW	0f0e0H
	DW	0dcaH
	DB	02H
	ORG $+1
	DW	07H
	DB	00H
	ORG $+1
	DW	0ac0H
	DW	03f40H
	DW	0968H
	DB	00H
	ORG $+1
	DW	08H
	DB	00H
	ORG $+1
	DW	0c440H
	DW	01b00H
	DW	07e0H
	DB	01H
	ORG $+1
	DW	08H
	DB	00H
	ORG $+1
	DW	011c0H
	DW	0bc0H
	DW	02c0H
	DB	02H
	ORG $+1
	DW	08H
	DB	00H
	ORG $+1
	DW	0ed47H
	DW	0fb05H
	DW	0220H
	DB	00H
	ORG $+1
	DW	0aH
	DB	00H
	ORG $+1
	DW	01ac0H
	DW	0c7a0H
	DW	0fe20H
	DB	01H
	ORG $+1
	DW	0aH
	DB	00H
	ORG $+1
	DW	02dc0H
	DW	05340H
	DW	0fe0H
	DB	02H
	ORG $+1
	DW	0aH
	DB	00H
	ORG $+1
	DW	09e10H
	DW	0dc21H
	DW	0fe0H
	DB	00H
	ORG $+1
	DW	0bH
	DB	00H
	ORG $+1
	DW	09ba2H
	DW	0b25eH
	DW	0570H
	DB	01H
	ORG $+1
	DW	0bH
	DB	00H
	ORG $+1
	DW	0af9aH
	DW	0ac7bH
	DW	012f4H
	DB	02H
	ORG $+1
	DW	0bH
	DB	00H
	ORG $+1
	DW	01392H
	DW	0dbedH
	DW	01070H
	DB	00H
	ORG $+1
	DW	0dH
	DB	00H
	ORG $+1
	DW	0df40H
	DW	0ff94H
	DW	01650H
	DB	01H
	ORG $+1
	DW	0dH
	DB	00H
	ORG $+1
	DW	0db44H
	DW	03a38H
	DW	016b0H
	DB	02H
	ORG $+1
	DW	0dH
	DB	00H
	ORG $+1
	DW	01e7cH
	DW	0e20eH
	DW	07e0H
	DB	00H
	ORG $+1
	DW	010H
	DB	00H
	ORG $+1
	DW	0f920H
	DW	0f40H
	DW	0c24H
	DB	01H
	ORG $+1
	DW	010H
	DB	00H
	ORG $+1
	DW	0bb63H
	DW	01c90H
	DW	0984H
	DB	02H
	ORG $+1
	DW	010H
	DB	00H
	ORG $+1
	DW	0d520H
	DW	0e3a0H
	DW	0630H
	DB	00H
	ORG $+1
	DW	016H
	DB	00H
	ORG $+1
	DW	0540H
	DW	0e520H
	DW	02dcH
	DB	01H
	ORG $+1
	DW	016H
	DB	00H
	ORG $+1
	DW	0ee0H
	DW	0a0H
	DW	05a0H
	DB	02H
	ORG $+1
	DW	016H
	DB	00H
	ORG $+1
	DW	0f700H
	DW	02dc0H
	DW	0280H
	DB	00H
	ORG $+1
	DW	017H
	DB	00H
	ORG $+1
	DW	0f300H
	DW	05780H
	DW	012c0H
	DB	01H
	ORG $+1
	DW	017H
	DB	00H
	ORG $+1
	DW	0600H
	DW	04100H
	DW	0780H
	DB	02H
	ORG $+1
	DW	017H
	DB	00H
	ORG $+1
	ORG $+5712
_sneakertics DD	02bcH
_flashingtics DD 069H
_tailsflytics DD 0118H
_underwatertics DD 041aH
_spacetimetics DD 0192H
_extralifetics DD 08cH
_gravbootstics DD 02bcH
_paralooptics DD 02bcH
_helpertics DD	02bcH
_precache DD	01H
_cv_invertmouse2 DD FLAT:??_C@_0N@JHIPFILN@invertmouse2@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_alwaysfreelook2 DD FLAT:??_C@_0N@NNNHMFJB@alwaysmlook2@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_mousemove2 DD FLAT:??_C@_0L@CMIBOHJI@mousemove2@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_useranalog DD FLAT:??_C@_0L@FNFIJCHP@useranalog@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	03H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_UserAnalog_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_useranalog2 DD FLAT:??_C@_0M@CNJHGAEO@useranalog2@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	03H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_UserAnalog2_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_analog DD	FLAT:??_C@_06MBDJGOMB@analog@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	02H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_Analog_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_analog2 DD	FLAT:??_C@_07BNCJPDJ@analog2@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	02H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_Analog2_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_gamedatafilename DB 'gamedata.dat', 00H
	ORG $+51
_timeattackfolder DB 'main', 00H
	ORG $+59
_player_names DB 'Player 1', 00H
	ORG $+13
	DB	'Player 2', 00H
	ORG $+13
	DB	'Player 3', 00H
	ORG $+13
	DB	'Player 4', 00H
	ORG $+13
	DB	'Player 5', 00H
	ORG $+13
	DB	'Player 6', 00H
	ORG $+13
	DB	'Player 7', 00H
	ORG $+13
	DB	'Player 8', 00H
	ORG $+13
	DB	'Player 9', 00H
	ORG $+13
	DB	'Player 10', 00H
	ORG $+12
	DB	'Player 11', 00H
	ORG $+12
	DB	'Player 12', 00H
	ORG $+12
	DB	'Player 13', 00H
	ORG $+12
	DB	'Player 14', 00H
	ORG $+12
	DB	'Player 15', 00H
	ORG $+12
	DB	'Player 16', 00H
	ORG $+12
	DB	'Player 17', 00H
	ORG $+12
	DB	'Player 18', 00H
	ORG $+12
	DB	'Player 19', 00H
	ORG $+12
	DB	'Player 20', 00H
	ORG $+12
	DB	'Player 21', 00H
	ORG $+12
	DB	'Player 22', 00H
	ORG $+12
	DB	'Player 23', 00H
	ORG $+12
	DB	'Player 24', 00H
	ORG $+12
	DB	'Player 25', 00H
	ORG $+12
	DB	'Player 26', 00H
	ORG $+12
	DB	'Player 27', 00H
	ORG $+12
	DB	'Player 28', 00H
	ORG $+12
	DB	'Player 29', 00H
	ORG $+12
	DB	'Player 30', 00H
	ORG $+12
	DB	'Player 31', 00H
	ORG $+12
	DB	'Player 32', 00H
	ORG $+12
_gameovertics DD 0627H
_cv_crosshair DD FLAT:??_C@_09NBNKIDFG@crosshair@
	DD	FLAT:??_C@_05HFADIOFI@Cross@
	DD	01H
	DD	FLAT:_crosshair_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_crosshair2 DD FLAT:??_C@_0L@GPKJHKDD@crosshair2@
	DD	FLAT:??_C@_05HFADIOFI@Cross@
	DD	01H
	DD	FLAT:_crosshair_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_invertmouse DD FLAT:??_C@_0M@JFFGGEIL@invertmouse@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_alwaysfreelook DD FLAT:??_C@_0M@BCGOAJOP@alwaysmlook@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_mousemove DD FLAT:??_C@_09JAKOECDO@mousemove@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_sideaxis DD	FLAT:??_C@_0N@COCEIBAF@joyaxis_side@
	DD	FLAT:??_C@_06NGAIKDIA@Z?9Axis@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_turnaxis DD	FLAT:??_C@_0N@HNJELDDL@joyaxis_turn@
	DD	FLAT:??_C@_06EBJHLCKJ@X?9Axis@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_moveaxis DD	FLAT:??_C@_0N@MLDNIACE@joyaxis_move@
	DD	FLAT:??_C@_06OHOALJBN@Y?9Axis@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_lookaxis DD	FLAT:??_C@_0N@HLCJBMOF@joyaxis_look@
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_fireaxis DD	FLAT:??_C@_0N@JOIPEGDF@joyaxis_fire@
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_firenaxis DD FLAT:??_C@_0BD@CJJLJLJK@joyaxis_firenormal@
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_sideaxis2 DD FLAT:??_C@_0O@CLDJJKEN@joyaxis2_side@
	DD	FLAT:??_C@_06NGAIKDIA@Z?9Axis@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_turnaxis2 DD FLAT:??_C@_0O@HIIJKIHD@joyaxis2_turn@
	DD	FLAT:??_C@_06EBJHLCKJ@X?9Axis@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_moveaxis2 DD FLAT:??_C@_0O@MOCAJLGM@joyaxis2_move@
	DD	FLAT:??_C@_06OHOALJBN@Y?9Axis@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_lookaxis2 DD FLAT:??_C@_0O@HODEAHKN@joyaxis2_look@
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_fireaxis2 DD FLAT:??_C@_0O@JLJCFNHN@joyaxis2_fire@
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_firenaxis2 DD FLAT:??_C@_0BE@HJBIPIKB@joyaxis2_firenormal@
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	01H
	DD	FLAT:_joyaxis_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_crosshair_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_05HFADIOFI@Cross@
	DD	02H
	DD	FLAT:??_C@_05FDINCMKF@Angle@
	DD	03H
	DD	FLAT:??_C@_05BGOFFEGG@Point@
	DD	00H
	DD	00H
	ORG $+4
_joyaxis_cons_t DD 00H
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	01H
	DD	FLAT:??_C@_06EBJHLCKJ@X?9Axis@
	DD	02H
	DD	FLAT:??_C@_06OHOALJBN@Y?9Axis@
	DD	0ffffffffH
	DD	FLAT:??_C@_07IPGBNGBB@X?9Axis?9@
	DD	0fffffffeH
	DD	FLAT:??_C@_07EDMLNGIP@Y?9Axis?9@
	DD	03H
	DD	FLAT:??_C@_06NGAIKDIA@Z?9Axis@
	DD	04H
	DD	FLAT:??_C@_08NGEJLIDC@X?9Rudder@
	DD	0fffffffdH
	DD	FLAT:??_C@_07MNEENBGM@Z?9Axis?9@
	DD	0fffffffcH
	DD	FLAT:??_C@_09OICLECNH@X?9Rudder?9@
	DD	05H
	DD	FLAT:??_C@_08MBDCKMHB@Y?9Rudder@
	DD	06H
	DD	FLAT:??_C@_08PILPJALE@Z?9Rudder@
	DD	0fffffffbH
	DD	FLAT:??_C@_09HOJCJOJ@Y?9Rudder?9@
	DD	0fffffffaH
	DD	FLAT:??_C@_09OMNOJCOK@Z?9Rudder?9@
	DD	07H
	DD	FLAT:??_C@_06CAEANDGJ@U?9Axis@
	DD	08H
	DD	FLAT:??_C@_06BBKIMJPE@V?9Axis@
	DD	0fffffff9H
	DD	FLAT:??_C@_07BEGEMDMA@U?9Axis?9@
	DD	0fffffff8H
	DD	FLAT:??_C@_07JKOLMECD@V?9Axis?9@
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_G_BuildMapName
PUBLIC	_G_BuildTiccmd
PUBLIC	_G_BuildTiccmd2
PUBLIC	_G_CopyTiccmd
PUBLIC	_G_MoveTiccmd
PUBLIC	_G_ClipAimingPitch
PUBLIC	_G_DoReborn
PUBLIC	_G_DeathMatchSpawnPlayer
PUBLIC	_G_CoopSpawnPlayer
PUBLIC	_G_PlayerReborn
PUBLIC	_G_DoCompleted
PUBLIC	_G_InitNew
PUBLIC	_G_DeferedInitNew
PUBLIC	_G_DoLoadLevel
PUBLIC	_G_DeferedPlayDemo
PUBLIC	_G_LoadGame
PUBLIC	_G_SaveGameData
PUBLIC	_G_SaveGame
PUBLIC	_G_RecordDemo
PUBLIC	_G_BeginRecording
PUBLIC	_G_DoPlayDemo
PUBLIC	_G_TimeDemo
PUBLIC	_G_MovieMode
PUBLIC	_G_DoneLevelLoad
PUBLIC	_G_StopDemo
PUBLIC	_G_CheckDemoStatus
PUBLIC	_G_IsSpecialStage
PUBLIC	_G_ExitLevel
PUBLIC	_G_NextLevel
PUBLIC	_G_AfterIntermission
PUBLIC	_G_Ticker
PUBLIC	_G_Responder
PUBLIC	_G_AddPlayer
PUBLIC	_G_SetExitGameFlag
PUBLIC	_G_ClearExitGameFlag
PUBLIC	_G_GetExitGameFlag
PUBLIC	_G_LoadGameData
PUBLIC	_G_LoadGameSettings
PUBLIC	_G_SetGamestate
PUBLIC	_G_TicsToHours
PUBLIC	_G_TicsToMinutes
PUBLIC	_G_TicsToSeconds
PUBLIC	_G_TicsToCentiseconds
PUBLIC	_G_TicsToMilliseconds
PUBLIC	??_C@_04FGGPOPMG@?$CF?42d@			; `string'
PUBLIC	??_C@_0P@EJBGKLIH@Viewpoint?3?5?$CFs?6@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
PUBLIC	??_C@_0BB@HJFOHGDP@gameaction?5?$DN?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BE@LGPOCENA@Current?5mare?5is?5?$CFd?6@	; `string'
PUBLIC	??_C@_0EP@DOHPPADO@No?5deathmatch?5start?5in?5this?5map@ ; `string'
PUBLIC	??_C@_0CJ@NABGIDMK@There?5aren?8t?5enough?5starts?5in?5t@ ; `string'
PUBLIC	??_C@_0EA@HOJILAI@No?5Red?5Team?5start?5in?5this?5map?0?5@ ; `string'
PUBLIC	??_C@_0EB@POLEFNPH@No?5Blue?5Team?5start?5in?5this?5map?0@ ; `string'
PUBLIC	??_C@_0CA@HNPGPGJO@Not?5enough?5starts?5in?5this?5map?$CB?6@ ; `string'
PUBLIC	??_C@_0BL@HBPLANFD@Error?3?5Weird?5gametype?$CB?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0DM@LCKJCFJB@Next?5map?5given?5?$CIMAP?5?$CFd?$CJ?5doesn?8t@ ; `string'
PUBLIC	??_C@_0HM@HCAECPBK@Warning?3?5Can?8t?5find?5a?5compatibl@ ; `string'
PUBLIC	??_C@_0CD@EIOIMAHF@Followed?5map?5?$CFd?5to?5invalid?5map?5@ ; `string'
PUBLIC	??_C@_0BA@IMDKPFJA@the?5SRB2?5folder@		; `string'
PUBLIC	??_C@_01LFCBOECM@?4@				; `string'
PUBLIC	??_C@_0DO@KKKGCLJM@Corrupt?5game?5data?5file?4?6Delete?5@ ; `string'
PUBLIC	??_C@_0CK@LPFACEEB@No?5more?5free?5memory?5for?5saving?5@ ; `string'
PUBLIC	??_C@_0L@BHAAJMLE@version?5?$CFd@		; `string'
PUBLIC	??_C@_0CN@DIALMBDD@Save?5game?5from?5different?5versio@ ; `string'
PUBLIC	??_C@_0CE@JNNEOGBG@savegame?5file?5corrupted?6?6Press?5@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0CC@EMECLDHI@No?5more?5free?5memory?5for?5savegam@ ; `string'
PUBLIC	??_C@_0DG@EKDKPKCF@Error?5while?5writing?5to?5?$CFs?5for?5s@ ; `string'
PUBLIC	??_C@_09PLHIKHMP@stopdemo?6@			; `string'
PUBLIC	??_C@_0CC@PNBHNBKA@Internal?5game?5map?5?8?$CFs?8?5not?5foun@ ; `string'
PUBLIC	??_C@_04EIOKKJMF@?3?5?$CFs@			; `string'
PUBLIC	??_C@_03EEBNCBOD@?5?$CFs@			; `string'
PUBLIC	??_C@_04EJIOOHLH@?5?$CF2d@			; `string'
PUBLIC	??_C@_02MBJIFMOJ@?$CC?6@			; `string'
PUBLIC	??_C@_04FJOMPALJ@?4lmp@				; `string'
PUBLIC	??_C@_08CJDGAKJF@?9maxdemo@			; `string'
PUBLIC	??_C@_0L@ODFOEFDE@playdemo?5?$CC@		; `string'
PUBLIC	??_C@_0CC@OLLLPKKP@?$ACERROR?3?5couldn?8t?5open?5file?5?8?$CFs?8@ ; `string'
PUBLIC	??_C@_07FOGKCKJK@?9nodraw@			; `string'
PUBLIC	??_C@_07EENCPNON@?9noblit@			; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_0BF@LGDLFHHJ@Movie?5mode?5enabled?4?6@	; `string'
PUBLIC	??_C@_0BG@HNNGOGKI@Movie?5mode?5disabled?4?6@	; `string'
PUBLIC	??_C@_0BI@HAGICDED@Loaded?5level?5in?5?$CFf?5sec?6@ ; `string'
PUBLIC	??_C@_0DJ@IAKKIH@timed?5?$CFu?5gametics?5in?5?$CFd?5realtic@ ; `string'
PUBLIC	??_C@_0BD@KDKOMCNC@?$ACDemo?5?$CFs?5recorded?6@	; `string'
PUBLIC	??_C@_0BE@DCEMDKJG@?$ACDemo?5?$CFs?5not?5saved?6@ ; `string'
PUBLIC	__real@4036db6e
PUBLIC	__real@4041800000000000
PUBLIC	__real@41e49249
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_atoi:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_COM_BufAddText:PROC
EXTRN	_COM_ImmedExecute:PROC
EXTRN	_CV_Set:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_CV_StealthSetValue:PROC
EXTRN	_CON_ClearHUD:PROC
EXTRN	_CON_ToggleOff:PROC
EXTRN	_W_CheckNumForName:PROC
EXTRN	_W_CacheLumpNum:PROC
EXTRN	_D_PageTicker:PROC
EXTRN	_D_AdvanceDemo:PROC
EXTRN	_D_StartTitle:PROC
EXTRN	_F_IntroResponder:PROC
EXTRN	_F_CutsceneResponder:PROC
EXTRN	_F_CreditResponder:PROC
EXTRN	_F_GameEndTicker:PROC
EXTRN	_F_IntroTicker:PROC
EXTRN	_F_TitleScreenTicker:PROC
EXTRN	_F_CutsceneTicker:PROC
EXTRN	_F_StartGameEvaluation:PROC
EXTRN	_F_GameEvaluationTicker:PROC
EXTRN	_F_CreditTicker:PROC
EXTRN	_F_StartCustomCutscene:PROC
EXTRN	_FixedMul:PROC
EXTRN	_P_SpawnPlayer:PROC
EXTRN	_P_SpawnStarpostPlayer:PROC
EXTRN	_P_LoadThingsOnly:PROC
EXTRN	_P_RehitStarposts:PROC
EXTRN	_P_SetupLevel:PROC
EXTRN	_P_SaveGame:PROC
EXTRN	_P_LoadGame:PROC
EXTRN	_I_GetTime:PROC
EXTRN	_I_BaseTiccmd:PROC
EXTRN	_I_BaseTiccmd2:PROC
EXTRN	_I_Quit:PROC
EXTRN	_AM_Responder:PROC
EXTRN	_AM_Ticker:PROC
EXTRN	_AM_Stop:PROC
EXTRN	_M_Random:PROC
EXTRN	_P_Random:PROC
EXTRN	_P_SetRandIndex:PROC
EXTRN	_P_Ticker:PROC
EXTRN	_P_ResetCamera:PROC
EXTRN	_P_IsLocalPlayer:PROC
EXTRN	_P_FindLowestMare:PROC
EXTRN	_P_FindEmerald:PROC
EXTRN	_P_SetMobjState:PROC
EXTRN	_P_MapStart:PROC
EXTRN	_P_MapEnd:PROC
EXTRN	_P_CheckPosition:PROC
EXTRN	_R_PointInSubsector:PROC
EXTRN	_R_ExecuteSetViewSize:PROC
EXTRN	_S_StopSounds:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_S_ResumeSound:PROC
EXTRN	_Command_ExitGame_f:PROC
EXTRN	_D_MapChange:PROC
EXTRN	_SV_StartSinglePlayerServer:PROC
EXTRN	_SV_StopServer:PROC
EXTRN	_SV_ResetServer:PROC
EXTRN	_AddLmpExtradata:PROC
EXTRN	_ReadLmpExtraData:PROC
EXTRN	_D_ResetTiccmds:PROC
EXTRN	_M_MapNumber:PROC
EXTRN	_FIL_WriteFile:PROC
EXTRN	_FIL_ReadFile:PROC
EXTRN	_FIL_DefaultExtension:PROC
EXTRN	_M_StartControlPanel:PROC
EXTRN	_M_StartMessage:PROC
EXTRN	_M_CheckParm:PROC
EXTRN	_M_IsNextParm:PROC
EXTRN	_M_GetNextParm:PROC
EXTRN	_HU_Responder:PROC
EXTRN	_HU_Ticker:PROC
EXTRN	_HU_ClearCEcho:PROC
EXTRN	_ST_Ticker:PROC
EXTRN	_ST_changeDemoView:PROC
EXTRN	_Z_Free:PROC
EXTRN	_G_MapEventsToControls:PROC
EXTRN	_SetSavedSkin:PROC
EXTRN	_SplitScreen_OnChange:PROC
EXTRN	_Y_Ticker:PROC
EXTRN	_Y_StartIntermission:PROC
EXTRN	_Y_EndIntermission:PROC
EXTRN	_Y_EndGame:PROC
EXTRN	_V_SetPaletteLump:PROC
EXTRN	_GetPalette:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	_M_Memcpy:DWORD
EXTRN	_devparm:DWORD
EXTRN	_savegamename:BYTE
EXTRN	_text:BYTE
EXTRN	_cv_vidwait:BYTE
EXTRN	_srb2home:BYTE
EXTRN	_pandf:DWORD
EXTRN	_deathmatchstarts:BYTE
EXTRN	_numdmstarts:DWORD
EXTRN	_numcoopstarts:DWORD
EXTRN	_numredctfstarts:DWORD
EXTRN	_numbluectfstarts:DWORD
EXTRN	_save_p:DWORD
EXTRN	_automapactive:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_camera:BYTE
EXTRN	_camera2:BYTE
EXTRN	_cv_cam_dist:BYTE
EXTRN	_cv_cam2_dist:BYTE
EXTRN	_cv_allowmlook:BYTE
EXTRN	_framecount:DWORD
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
EXTRN	_setsizeneeded:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_lastdraw:DWORD
EXTRN	_playerstarts:BYTE
EXTRN	_bluectfstarts:BYTE
EXTRN	_redctfstarts:BYTE
EXTRN	_wipegamestate:DWORD
EXTRN	_singletics:DWORD
EXTRN	_cv_playercolor:BYTE
EXTRN	_cv_usejoystick:BYTE
EXTRN	_cv_usejoystick2:BYTE
EXTRN	_cv_playercolor2:BYTE
EXTRN	_cv_tagtype:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_timelimit:BYTE
EXTRN	_cv_teamscramble:BYTE
EXTRN	_cv_scrambleonchange:BYTE
EXTRN	_cv_pause:BYTE
EXTRN	_cv_objectplace:BYTE
EXTRN	_cv_advancemap:BYTE
EXTRN	_cv_racetype:BYTE
EXTRN	_server:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_netcmds:BYTE
EXTRN	_adminplayer:DWORD
EXTRN	_moviemode:DWORD
EXTRN	_playerdeadview:DWORD
EXTRN	_rendermode:DWORD
EXTRN	_mousex:DWORD
EXTRN	_mousey:DWORD
EXTRN	_mlooky:DWORD
EXTRN	_mouse2x:DWORD
EXTRN	_mouse2y:DWORD
EXTRN	_mlook2y:DWORD
EXTRN	_joyxmove:BYTE
EXTRN	_joyymove:BYTE
EXTRN	_joy2xmove:BYTE
EXTRN	_joy2ymove:BYTE
EXTRN	_gamekeydown:BYTE
EXTRN	_gamecontrol:BYTE
EXTRN	_gamecontrolbis:BYTE
EXTRN	_skins:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_demostarttime DD 01H DUP (?)
_exitgame DD	01H DUP (?)
_demoname DB	020H DUP (?)
_demobuffer DD	01H DUP (?)
_demo_p	DD	01H DUP (?)
_demoend DD	01H DUP (?)
_savebuffer DD	01H DUP (?)
?turnheld@?1??G_BuildTiccmd@@9@9 DD 01H DUP (?)		; `G_BuildTiccmd'::`2'::turnheld
?keyboard_look@?1??G_BuildTiccmd@@9@9 DD 01H DUP (?)	; `G_BuildTiccmd'::`2'::keyboard_look
?turnheld@?1??G_BuildTiccmd2@@9@9 DD 01H DUP (?)	; `G_BuildTiccmd2'::`2'::turnheld
?keyboard_look@?1??G_BuildTiccmd2@@9@9 DD 01H DUP (?)	; `G_BuildTiccmd2'::`2'::keyboard_look
_pausedelay DD	01H DUP (?)
_oldcmd	DQ	020H DUP (?)
_restorecv_vidwait DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41e49249
CONST	SEGMENT
__real@41e49249 DD 041e49249r			; 28.5714
CONST	ENDS
;	COMDAT __real@4041800000000000
CONST	SEGMENT
__real@4041800000000000 DQ 04041800000000000r	; 35
CONST	ENDS
;	COMDAT __real@4036db6e
CONST	SEGMENT
__real@4036db6e DD 04036db6er			; 2.85714
CONST	ENDS
;	COMDAT ??_C@_0BE@DCEMDKJG@?$ACDemo?5?$CFs?5not?5saved?6@
CONST	SEGMENT
??_C@_0BE@DCEMDKJG@?$ACDemo?5?$CFs?5not?5saved?6@ DB 02H, 'Demo %s not sa'
	DB	'ved', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KDKOMCNC@?$ACDemo?5?$CFs?5recorded?6@
CONST	SEGMENT
??_C@_0BD@KDKOMCNC@?$ACDemo?5?$CFs?5recorded?6@ DB 02H, 'Demo %s recorded'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@IAKKIH@timed?5?$CFu?5gametics?5in?5?$CFd?5realtic@
CONST	SEGMENT
??_C@_0DJ@IAKKIH@timed?5?$CFu?5gametics?5in?5?$CFd?5realtic@ DB 'timed %u'
	DB	' gametics in %d realtics', 0aH, '%f seconds, %f avg fps', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HAGICDED@Loaded?5level?5in?5?$CFf?5sec?6@
CONST	SEGMENT
??_C@_0BI@HAGICDED@Loaded?5level?5in?5?$CFf?5sec?6@ DB 'Loaded level in %'
	DB	'f sec', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HNNGOGKI@Movie?5mode?5disabled?4?6@
CONST	SEGMENT
??_C@_0BG@HNNGOGKI@Movie?5mode?5disabled?4?6@ DB 'Movie mode disabled.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGDLFHHJ@Movie?5mode?5enabled?4?6@
CONST	SEGMENT
??_C@_0BF@LGDLFHHJ@Movie?5mode?5enabled?4?6@ DB 'Movie mode enabled.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07EENCPNON@?9noblit@
CONST	SEGMENT
??_C@_07EENCPNON@?9noblit@ DB '-noblit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FOGKCKJK@?9nodraw@
CONST	SEGMENT
??_C@_07FOGKCKJK@?9nodraw@ DB '-nodraw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OLLLPKKP@?$ACERROR?3?5couldn?8t?5open?5file?5?8?$CFs?8@
CONST	SEGMENT
??_C@_0CC@OLLLPKKP@?$ACERROR?3?5couldn?8t?5open?5file?5?8?$CFs?8@ DB 02H, 'E'
	DB	'RROR: couldn''t open file ''%s''.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ODFOEFDE@playdemo?5?$CC@
CONST	SEGMENT
??_C@_0L@ODFOEFDE@playdemo?5?$CC@ DB 'playdemo "', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CJDGAKJF@?9maxdemo@
CONST	SEGMENT
??_C@_08CJDGAKJF@?9maxdemo@ DB '-maxdemo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJOMPALJ@?4lmp@
CONST	SEGMENT
??_C@_04FJOMPALJ@?4lmp@ DB '.lmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MBJIFMOJ@?$CC?6@
CONST	SEGMENT
??_C@_02MBJIFMOJ@?$CC?6@ DB '"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJIOOHLH@?5?$CF2d@
CONST	SEGMENT
??_C@_04EJIOOHLH@?5?$CF2d@ DB ' %2d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEBNCBOD@?5?$CFs@
CONST	SEGMENT
??_C@_03EEBNCBOD@?5?$CFs@ DB ' %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIOKKJMF@?3?5?$CFs@
CONST	SEGMENT
??_C@_04EIOKKJMF@?3?5?$CFs@ DB ': %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PNBHNBKA@Internal?5game?5map?5?8?$CFs?8?5not?5foun@
CONST	SEGMENT
??_C@_0CC@PNBHNBKA@Internal?5game?5map?5?8?$CFs?8?5not?5foun@ DB 'Interna'
	DB	'l game map ''%s'' not found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLHIKHMP@stopdemo?6@
CONST	SEGMENT
??_C@_09PLHIKHMP@stopdemo?6@ DB 'stopdemo', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@EKDKPKCF@Error?5while?5writing?5to?5?$CFs?5for?5s@
CONST	SEGMENT
??_C@_0DG@EKDKPKCF@Error?5while?5writing?5to?5?$CFs?5for?5s@ DB 'Error wh'
	DB	'ile writing to %s for save slot %u, base: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EMECLDHI@No?5more?5free?5memory?5for?5savegam@
CONST	SEGMENT
??_C@_0CC@EMECLDHI@No?5more?5free?5memory?5for?5savegam@ DB 'No more free'
	DB	' memory for savegame', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JNNEOGBG@savegame?5file?5corrupted?6?6Press?5@
CONST	SEGMENT
??_C@_0CE@JNNEOGBG@savegame?5file?5corrupted?6?6Press?5@ DB 'savegame fil'
	DB	'e corrupted', 0aH, 0aH, 'Press ESC', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DIALMBDD@Save?5game?5from?5different?5versio@
CONST	SEGMENT
??_C@_0CN@DIALMBDD@Save?5game?5from?5different?5versio@ DB 'Save game fro'
	DB	'm different version', 0aH, 0aH, 'Press ESC', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BHAAJMLE@version?5?$CFd@
CONST	SEGMENT
??_C@_0L@BHAAJMLE@version?5?$CFd@ DB 'version %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LPFACEEB@No?5more?5free?5memory?5for?5saving?5@
CONST	SEGMENT
??_C@_0CK@LPFACEEB@No?5more?5free?5memory?5for?5saving?5@ DB 'No more fre'
	DB	'e memory for saving game data', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@KKKGCLJM@Corrupt?5game?5data?5file?4?6Delete?5@
CONST	SEGMENT
??_C@_0DO@KKKGCLJM@Corrupt?5game?5data?5file?4?6Delete?5@ DB 'Corrupt gam'
	DB	'e data file.', 0aH, 'Delete %s(maybe in %s)', 0aH, 'and try a'
	DB	'gain.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4@
CONST	SEGMENT
??_C@_01LFCBOECM@?4@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IMDKPFJA@the?5SRB2?5folder@
CONST	SEGMENT
??_C@_0BA@IMDKPFJA@the?5SRB2?5folder@ DB 'the SRB2 folder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EIOIMAHF@Followed?5map?5?$CFd?5to?5invalid?5map?5@
CONST	SEGMENT
??_C@_0CD@EIOIMAHF@Followed?5map?5?$CFd?5to?5invalid?5map?5@ DB 'Followed'
	DB	' map %d to invalid map %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0HM@HCAECPBK@Warning?3?5Can?8t?5find?5a?5compatibl@
CONST	SEGMENT
??_C@_0HM@HCAECPBK@Warning?3?5Can?8t?5find?5a?5compatibl@ DB 'Warning: Ca'
	DB	'n''t find a compatible map after map %d; using map %d even th'
	DB	'ough it is not compatible with the current gametype', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LCKJCFJB@Next?5map?5given?5?$CIMAP?5?$CFd?$CJ?5doesn?8t@
CONST	SEGMENT
??_C@_0DM@LCKJCFJB@Next?5map?5given?5?$CIMAP?5?$CFd?$CJ?5doesn?8t@ DB 'Ne'
	DB	'xt map given (MAP %d) doesn''t exist! Reverting to MAP01.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HBPLANFD@Error?3?5Weird?5gametype?$CB?5?$CFd?6@
CONST	SEGMENT
??_C@_0BL@HBPLANFD@Error?3?5Weird?5gametype?$CB?5?$CFd?6@ DB 'Error: Weir'
	DB	'd gametype! %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HNPGPGJO@Not?5enough?5starts?5in?5this?5map?$CB?6@
CONST	SEGMENT
??_C@_0CA@HNPGPGJO@Not?5enough?5starts?5in?5this?5map?$CB?6@ DB 'Not enou'
	DB	'gh starts in this map!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@POLEFNPH@No?5Blue?5Team?5start?5in?5this?5map?0@
CONST	SEGMENT
??_C@_0EB@POLEFNPH@No?5Blue?5Team?5start?5in?5this?5map?0@ DB 'No Blue Te'
	DB	'am start in this map, resorting to Deathmatch starts!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@HOJILAI@No?5Red?5Team?5start?5in?5this?5map?0?5@
CONST	SEGMENT
??_C@_0EA@HOJILAI@No?5Red?5Team?5start?5in?5this?5map?0?5@ DB 'No Red Tea'
	DB	'm start in this map, resorting to Deathmatch starts!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NABGIDMK@There?5aren?8t?5enough?5starts?5in?5t@
CONST	SEGMENT
??_C@_0CJ@NABGIDMK@There?5aren?8t?5enough?5starts?5in?5t@ DB 'There aren'''
	DB	't enough starts in this map!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@DOHPPADO@No?5deathmatch?5start?5in?5this?5map@
CONST	SEGMENT
??_C@_0EP@DOHPPADO@No?5deathmatch?5start?5in?5this?5map@ DB 'No deathmatc'
	DB	'h start in this map - shifting to player starts to avoid cras'
	DB	'h...', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LGPOCENA@Current?5mare?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0BE@LGPOCENA@Current?5mare?5is?5?$CFd?6@ DB 'Current mare is %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HJFOHGDP@gameaction?5?$DN?5?$CFd?6@
CONST	SEGMENT
??_C@_0BB@HJFOHGDP@gameaction?5?$DN?5?$CFd?6@ DB 'gameaction = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJBGKLIH@Viewpoint?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0P@EJBGKLIH@Viewpoint?3?5?$CFs?6@ DB 'Viewpoint: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGGPOPMG@?$CF?42d@
CONST	SEGMENT
??_C@_04FGGPOPMG@?$CF?42d@ DB '%.2d', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?mapname@?1??G_BuildMapName@@9@9 DB 'MAPXX', 00H	; `G_BuildMapName'::`2'::mapname
	ORG $+3
	ORG $+3
_forwardmove DD	019H
	DD	032H
_sidemove DD	019H
	DD	032H
_angleturn DD	0280H
	DD	0500H
	DD	0140H
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0feH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01c9H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01a1H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0539H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _RandMap
_TEXT	SEGMENT
_mapnum$ = -2088					; size = 4
_ix$ = -2084						; size = 2
_numokmaps$ = -2080					; size = 4
_okmaps$ = -2076					; size = 2070
__$ArrayPad$ = -4					; size = 4
_tolflags$ = 8						; size = 2
_pprevmap$ = 12						; size = 2
_RandMap PROC						; COMDAT

; 2321 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 09 00
	00		 sub	 esp, 2408		; 00000968H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2322 : 	XBOXSTATIC INT16 okmaps[NUMMAPS];
; 2323 : 	INT32 numokmaps = 0;

  00016	c7 85 e0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _numokmaps$[ebp], 0

; 2324 : 	INT16 ix;
; 2325 : 	INT32 mapnum;
; 2326 : 
; 2327 : 	// Find all the maps that are ok and and put them in an array.
; 2328 : 	for (ix = 0; ix < NUMMAPS; ix++)

  00020	33 c0		 xor	 eax, eax
  00022	66 89 85 dc f7
	ff ff		 mov	 WORD PTR _ix$[ebp], ax
  00029	eb 12		 jmp	 SHORT $LN4@RandMap
$LN2@RandMap:
  0002b	66 8b 85 dc f7
	ff ff		 mov	 ax, WORD PTR _ix$[ebp]
  00032	66 83 c0 01	 add	 ax, 1
  00036	66 89 85 dc f7
	ff ff		 mov	 WORD PTR _ix$[ebp], ax
$LN4@RandMap:
  0003d	0f bf 85 dc f7
	ff ff		 movsx	 eax, WORD PTR _ix$[ebp]
  00044	3d 0b 04 00 00	 cmp	 eax, 1035		; 0000040bH
  00049	7d 57		 jge	 SHORT $LN3@RandMap

; 2329 : 		if ((mapheaderinfo[ix].typeoflevel & tolflags) == tolflags && ix != pprevmap) // Don't pick the same map.

  0004b	0f bf 85 dc f7
	ff ff		 movsx	 eax, WORD PTR _ix$[ebp]
  00052	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00058	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  0005f	0f bf 45 08	 movsx	 eax, WORD PTR _tolflags$[ebp]
  00063	23 d0		 and	 edx, eax
  00065	0f bf 4d 08	 movsx	 ecx, WORD PTR _tolflags$[ebp]
  00069	3b d1		 cmp	 edx, ecx
  0006b	75 33		 jne	 SHORT $LN5@RandMap
  0006d	0f bf 85 dc f7
	ff ff		 movsx	 eax, WORD PTR _ix$[ebp]
  00074	0f bf 4d 0c	 movsx	 ecx, WORD PTR _pprevmap$[ebp]
  00078	3b c1		 cmp	 eax, ecx
  0007a	74 24		 je	 SHORT $LN5@RandMap

; 2330 : 			okmaps[numokmaps++] = ix;

  0007c	8b 85 e0 f7 ff
	ff		 mov	 eax, DWORD PTR _numokmaps$[ebp]
  00082	66 8b 8d dc f7
	ff ff		 mov	 cx, WORD PTR _ix$[ebp]
  00089	66 89 8c 45 e4
	f7 ff ff	 mov	 WORD PTR _okmaps$[ebp+eax*2], cx
  00091	8b 95 e0 f7 ff
	ff		 mov	 edx, DWORD PTR _numokmaps$[ebp]
  00097	83 c2 01	 add	 edx, 1
  0009a	89 95 e0 f7 ff
	ff		 mov	 DWORD PTR _numokmaps$[ebp], edx
$LN5@RandMap:
  000a0	eb 89		 jmp	 SHORT $LN2@RandMap
$LN3@RandMap:

; 2331 : 
; 2332 : 	if (numokmaps == 0)

  000a2	83 bd e0 f7 ff
	ff 00		 cmp	 DWORD PTR _numokmaps$[ebp], 0
  000a9	75 07		 jne	 SHORT $LN6@RandMap

; 2333 : 		return 1; // Sorry, none match. You get MAP01.

  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	eb 49		 jmp	 SHORT $LN1@RandMap
$LN6@RandMap:

; 2334 : 
; 2335 : 	mapnum = M_Random() << 8;

  000b2	e8 00 00 00 00	 call	 _M_Random
  000b7	0f b6 c0	 movzx	 eax, al
  000ba	c1 e0 08	 shl	 eax, 8
  000bd	89 85 d8 f7 ff
	ff		 mov	 DWORD PTR _mapnum$[ebp], eax

; 2336 : 	mapnum |= M_Random();

  000c3	e8 00 00 00 00	 call	 _M_Random
  000c8	0f b6 c0	 movzx	 eax, al
  000cb	0b 85 d8 f7 ff
	ff		 or	 eax, DWORD PTR _mapnum$[ebp]
  000d1	89 85 d8 f7 ff
	ff		 mov	 DWORD PTR _mapnum$[ebp], eax

; 2337 : 	mapnum %= numokmaps;

  000d7	8b 85 d8 f7 ff
	ff		 mov	 eax, DWORD PTR _mapnum$[ebp]
  000dd	99		 cdq
  000de	f7 bd e0 f7 ff
	ff		 idiv	 DWORD PTR _numokmaps$[ebp]
  000e4	89 95 d8 f7 ff
	ff		 mov	 DWORD PTR _mapnum$[ebp], edx

; 2338 : 
; 2339 : 	return (INT16)(okmaps[mapnum]+1);

  000ea	8b 85 d8 f7 ff
	ff		 mov	 eax, DWORD PTR _mapnum$[ebp]
  000f0	0f bf 84 45 e4
	f7 ff ff	 movsx	 eax, WORD PTR _okmaps$[ebp+eax*2]
  000f8	83 c0 01	 add	 eax, 1
$LN1@RandMap:

; 2340 : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	33 cd		 xor	 ecx, ebp
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
_RandMap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _TOLFlag
_TEXT	SEGMENT
_pgametype$ = 8						; size = 4
_TOLFlag PROC						; COMDAT

; 2297 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2298 : 	if (!multiplayer)          return TOL_SP;

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00010	75 07		 jne	 SHORT $LN2@TOLFlag
  00012	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  00017	eb 57		 jmp	 SHORT $LN1@TOLFlag
$LN2@TOLFlag:

; 2299 : 	if (pgametype == GT_COOP)  return TOL_COOP;

  00019	83 7d 08 00	 cmp	 DWORD PTR _pgametype$[ebp], 0
  0001d	75 07		 jne	 SHORT $LN3@TOLFlag
  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	eb 4a		 jmp	 SHORT $LN1@TOLFlag
$LN3@TOLFlag:

; 2300 : 	if (pgametype == GT_RACE)  return TOL_RACE;

  00026	83 7d 08 02	 cmp	 DWORD PTR _pgametype$[ebp], 2
  0002a	75 07		 jne	 SHORT $LN4@TOLFlag
  0002c	b8 02 00 00 00	 mov	 eax, 2
  00031	eb 3d		 jmp	 SHORT $LN1@TOLFlag
$LN4@TOLFlag:

; 2301 : 	if (pgametype == GT_MATCH) return TOL_MATCH;

  00033	83 7d 08 01	 cmp	 DWORD PTR _pgametype$[ebp], 1
  00037	75 07		 jne	 SHORT $LN5@TOLFlag
  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	eb 30		 jmp	 SHORT $LN1@TOLFlag
$LN5@TOLFlag:

; 2302 : #ifdef CHAOSISNOTDEADYET
; 2303 : 	if (pgametype == GT_CHAOS) return TOL_CHAOS;
; 2304 : #endif
; 2305 : 	if (pgametype == GT_TAG)   return TOL_TAG;

  00040	83 7d 08 03	 cmp	 DWORD PTR _pgametype$[ebp], 3
  00044	75 07		 jne	 SHORT $LN6@TOLFlag
  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	eb 23		 jmp	 SHORT $LN1@TOLFlag
$LN6@TOLFlag:

; 2306 : 	if (pgametype == GT_CTF)   return TOL_CTF;

  0004d	83 7d 08 04	 cmp	 DWORD PTR _pgametype$[ebp], 4
  00051	75 07		 jne	 SHORT $LN7@TOLFlag
  00053	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00058	eb 16		 jmp	 SHORT $LN1@TOLFlag
$LN7@TOLFlag:

; 2307 : 
; 2308 : 	CONS_Printf("Error: Weird gametype! %d\n", pgametype);

  0005a	8b 45 08	 mov	 eax, DWORD PTR _pgametype$[ebp]
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HBPLANFD@Error?3?5Weird?5gametype?$CB?5?$CFd?6@
  00063	e8 00 00 00 00	 call	 _CONS_Printf
  00068	83 c4 08	 add	 esp, 8

; 2309 : 	return INT16_MAX;

  0006b	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
$LN1@TOLFlag:

; 2310 : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_TOLFlag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_CheckSpot
_TEXT	SEGMENT
_i$ = -16						; size = 4
_ss$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_playernum$ = 8						; size = 4
_mthing$ = 12						; size = 4
_G_CheckSpot PROC					; COMDAT

; 2007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2008 : 	fixed_t x;
; 2009 : 	fixed_t y;
; 2010 : 	subsector_t *ss;
; 2011 : 	INT32 i;
; 2012 : 
; 2013 : 	// maybe there is no player start
; 2014 : 	if (!mthing)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _mthing$[ebp], 0
  0000d	75 07		 jne	 SHORT $LN5@G_CheckSpo

; 2015 : 		return false;

  0000f	33 c0		 xor	 eax, eax
  00011	e9 e2 00 00 00	 jmp	 $LN1@G_CheckSpo
$LN5@G_CheckSpo:

; 2016 : 
; 2017 : 	if (!players[playernum].mo)

  00016	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0001d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00024	75 7b		 jne	 SHORT $LN6@G_CheckSpo

; 2018 : 	{
; 2019 : 		// first spawn of level
; 2020 : 		for (i = 0; i < playernum; i++)

  00026	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002d	eb 09		 jmp	 SHORT $LN4@G_CheckSpo
$LN2@G_CheckSpo:
  0002f	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_CheckSpo:
  00038	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0003b	3b 45 08	 cmp	 eax, DWORD PTR _playernum$[ebp]
  0003e	7d 5a		 jge	 SHORT $LN3@G_CheckSpo

; 2021 : 			if (playeringame[i] && players[i].mo
; 2022 : 				&& players[i].mo->x == mthing->x << FRACBITS
; 2023 : 				&& players[i].mo->y == mthing->y << FRACBITS)

  00040	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00043	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0004b	74 4b		 je	 SHORT $LN7@G_CheckSpo
  0004d	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00054	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0005b	74 3b		 je	 SHORT $LN7@G_CheckSpo
  0005d	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00064	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0006a	8b 55 0c	 mov	 edx, DWORD PTR _mthing$[ebp]
  0006d	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00070	c1 e0 10	 shl	 eax, 16			; 00000010H
  00073	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00076	75 20		 jne	 SHORT $LN7@G_CheckSpo
  00078	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0007f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00085	8b 55 0c	 mov	 edx, DWORD PTR _mthing$[ebp]
  00088	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  0008c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0008f	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00092	75 04		 jne	 SHORT $LN7@G_CheckSpo

; 2024 : 			{
; 2025 : 				return false;

  00094	33 c0		 xor	 eax, eax
  00096	eb 60		 jmp	 SHORT $LN1@G_CheckSpo
$LN7@G_CheckSpo:

; 2026 : 			}

  00098	eb 95		 jmp	 SHORT $LN2@G_CheckSpo
$LN3@G_CheckSpo:

; 2027 : 		return true;

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	eb 57		 jmp	 SHORT $LN1@G_CheckSpo
$LN6@G_CheckSpo:

; 2028 : 	}
; 2029 : 
; 2030 : 	x = mthing->x << FRACBITS;

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _mthing$[ebp]
  000a4	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000a7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000aa	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 2031 : 	y = mthing->y << FRACBITS;

  000ad	8b 45 0c	 mov	 eax, DWORD PTR _mthing$[ebp]
  000b0	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000b4	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000b7	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 2032 : 	ss = R_PointInSubsector(x, y);

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 _R_PointInSubsector
  000c7	83 c4 08	 add	 esp, 8
  000ca	89 45 f4	 mov	 DWORD PTR _ss$[ebp], eax

; 2033 : 
; 2034 : 	if (!P_CheckPosition(players[playernum].mo, x, y))

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  000d4	51		 push	 ecx
  000d5	69 55 08 fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  000dc	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _players[edx]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _P_CheckPosition
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	85 c0		 test	 eax, eax
  000ed	75 04		 jne	 SHORT $LN8@G_CheckSpo

; 2035 : 		return false;

  000ef	33 c0		 xor	 eax, eax
  000f1	eb 05		 jmp	 SHORT $LN1@G_CheckSpo
$LN8@G_CheckSpo:

; 2036 : 
; 2037 : 	return true;

  000f3	b8 01 00 00 00	 mov	 eax, 1
$LN1@G_CheckSpo:

; 2038 : }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_G_CheckSpot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_PlayerFinishLevel
_TEXT	SEGMENT
_p$ = -4						; size = 4
_player$ = 8						; size = 4
_G_PlayerFinishLevel PROC				; COMDAT

; 1779 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1780 : 	player_t *p;
; 1781 : 
; 1782 : 	p = &players[player];

  00009	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00010	05 00 00 00 00	 add	 eax, OFFSET _players
  00015	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1783 : 
; 1784 : 	memset(p->powers, 0, sizeof (p->powers));

  00018	6a 74		 push	 116			; 00000074H
  0001a	6a 00		 push	 0
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0001f	83 c0 38	 add	 eax, 56			; 00000038H
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _memset
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1785 : 	p->ringweapons = 0;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0002e	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 1786 : 
; 1787 : 	p->mo->flags2 &= ~MF2_SHADOW; // cancel invisibility

  00035	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00040	81 e2 ff ff ff
	fe		 and	 edx, -16777217		; feffffffH
  00046	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 1788 : 	p->bonuscount = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00054	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 1789 : 	p->starpostangle = 0;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00061	c7 80 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+404], 0

; 1790 : 	p->starposttime = 0;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0006e	c7 80 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+400], 0

; 1791 : 	p->starpostx = 0;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0007b	c7 80 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+384], 0

; 1792 : 	p->starposty = 0;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00088	c7 80 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+388], 0

; 1793 : 	p->starpostz = 0;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00095	c7 80 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+392], 0

; 1794 : 	p->starpostnum = 0;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  000a2	c7 80 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+396], 0

; 1795 : 	p->starpostbit = 0;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  000af	c7 80 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+408], 0

; 1796 : 
; 1797 : 	if (rendermode == render_soft)

  000b9	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  000c0	75 0e		 jne	 SHORT $LN2@G_PlayerFi

; 1798 : 		V_SetPaletteLump(GetPalette()); // Reset the palette

  000c2	e8 00 00 00 00	 call	 _GetPalette
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _V_SetPaletteLump
  000cd	83 c4 04	 add	 esp, 4
$LN2@G_PlayerFi:

; 1799 : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
_G_PlayerFinishLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _Joy2Axis
_TEXT	SEGMENT
tv64 = -84						; size = 4
_jdeadzone$1 = -16					; size = 4
_flp$ = -12						; size = 4
_axisval$ = -8						; size = 4
_retaxis$ = -4						; size = 4
_axissel$ = 8						; size = 4
_Joy2Axis PROC						; COMDAT

; 586  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 587  : 	INT32 retaxis;
; 588  : 	INT32 axisval;
; 589  : 	boolean flp = false;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _flp$[ebp], 0

; 590  : 
; 591  : 	//find what axis to get
; 592  : 	switch (axissel)

  00010	8b 45 08	 mov	 eax, DWORD PTR _axissel$[ebp]
  00013	89 45 ac	 mov	 DWORD PTR tv64[ebp], eax
  00016	8b 4d ac	 mov	 ecx, DWORD PTR tv64[ebp]
  00019	83 e9 01	 sub	 ecx, 1
  0001c	89 4d ac	 mov	 DWORD PTR tv64[ebp], ecx
  0001f	83 7d ac 06	 cmp	 DWORD PTR tv64[ebp], 6
  00023	77 46		 ja	 SHORT $LN10@Joy2Axis
  00025	8b 55 ac	 mov	 edx, DWORD PTR tv64[ebp]
  00028	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN22@Joy2Axis[edx*4]
$LN4@Joy2Axis:

; 593  : 	{
; 594  : 		case AXISTURN:
; 595  : 			axisval = cv_turnaxis2.value;

  0002f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_turnaxis2+20
  00034	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 596  : 			break;

  00037	eb 39		 jmp	 SHORT $LN2@Joy2Axis
$LN5@Joy2Axis:

; 597  : 		case AXISMOVE:
; 598  : 			axisval = cv_moveaxis2.value;

  00039	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_moveaxis2+20
  0003e	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 599  : 			break;

  00041	eb 2f		 jmp	 SHORT $LN2@Joy2Axis
$LN6@Joy2Axis:

; 600  : 		case AXISLOOK:
; 601  : 			axisval = cv_lookaxis2.value;

  00043	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_lookaxis2+20
  00048	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 602  : 			break;

  0004b	eb 25		 jmp	 SHORT $LN2@Joy2Axis
$LN7@Joy2Axis:

; 603  : 		case AXISSTRAFE:
; 604  : 			axisval = cv_sideaxis2.value;

  0004d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_sideaxis2+20
  00052	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 605  : 			break;

  00055	eb 1b		 jmp	 SHORT $LN2@Joy2Axis
$LN8@Joy2Axis:

; 606  : 		case AXISFIRE:
; 607  : 			axisval = cv_fireaxis2.value;

  00057	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_fireaxis2+20
  0005c	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 608  : 			break;

  0005f	eb 11		 jmp	 SHORT $LN2@Joy2Axis
$LN9@Joy2Axis:

; 609  : 		case AXISFIRENORMAL:
; 610  : 			axisval = cv_firenaxis2.value;

  00061	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_firenaxis2+20
  00066	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 611  : 			break;

  00069	eb 07		 jmp	 SHORT $LN2@Joy2Axis
$LN10@Joy2Axis:

; 612  : 		default:
; 613  : 			return 0;

  0006b	33 c0		 xor	 eax, eax
  0006d	e9 d3 00 00 00	 jmp	 $LN1@Joy2Axis
$LN2@Joy2Axis:

; 614  : 	}
; 615  : 
; 616  : 
; 617  : 	if (axisval < 0) //odd -axises

  00072	83 7d f8 00	 cmp	 DWORD PTR _axisval$[ebp], 0
  00076	7d 0f		 jge	 SHORT $LN11@Joy2Axis

; 618  : 	{
; 619  : 		axisval = -axisval;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  0007b	f7 d8		 neg	 eax
  0007d	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 620  : 		flp = true;

  00080	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _flp$[ebp], 1
$LN11@Joy2Axis:

; 621  : 	}
; 622  : #ifdef _arch_dreamcast
; 623  : 	if (axisval == 7) // special case
; 624  : 	{
; 625  : 		retaxis = joy2xmove[1] - joy2ymove[1];
; 626  : 		goto skipDC;
; 627  : 	}
; 628  : 	else
; 629  : #endif
; 630  : 	if (axisval > JOYAXISSET*2 || axisval == 0) //not there in array or None

  00087	83 7d f8 08	 cmp	 DWORD PTR _axisval$[ebp], 8
  0008b	7f 06		 jg	 SHORT $LN13@Joy2Axis
  0008d	83 7d f8 00	 cmp	 DWORD PTR _axisval$[ebp], 0
  00091	75 07		 jne	 SHORT $LN12@Joy2Axis
$LN13@Joy2Axis:

; 631  : 		return 0;

  00093	33 c0		 xor	 eax, eax
  00095	e9 ab 00 00 00	 jmp	 $LN1@Joy2Axis
$LN12@Joy2Axis:

; 632  : 
; 633  : 	if (axisval%2)

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  0009d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000a2	79 05		 jns	 SHORT $LN23@Joy2Axis
  000a4	48		 dec	 eax
  000a5	83 c8 fe	 or	 eax, -2			; fffffffeH
  000a8	40		 inc	 eax
$LN23@Joy2Axis:
  000a9	85 c0		 test	 eax, eax
  000ab	74 1a		 je	 SHORT $LN14@Joy2Axis

; 634  : 	{
; 635  : 		axisval /= 2;

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000b0	99		 cdq
  000b1	2b c2		 sub	 eax, edx
  000b3	d1 f8		 sar	 eax, 1
  000b5	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 636  : 		retaxis = joy2xmove[axisval];

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000bb	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _joy2xmove[eax*4]
  000c2	89 4d fc	 mov	 DWORD PTR _retaxis$[ebp], ecx

; 637  : 	}

  000c5	eb 21		 jmp	 SHORT $LN15@Joy2Axis
$LN14@Joy2Axis:

; 638  : 	else
; 639  : 	{
; 640  : 		axisval--;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000ca	83 e8 01	 sub	 eax, 1
  000cd	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 641  : 		axisval /= 2;

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000d3	99		 cdq
  000d4	2b c2		 sub	 eax, edx
  000d6	d1 f8		 sar	 eax, 1
  000d8	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 642  : 		retaxis = joy2ymove[axisval];

  000db	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _joy2ymove[eax*4]
  000e5	89 4d fc	 mov	 DWORD PTR _retaxis$[ebp], ecx
$LN15@Joy2Axis:

; 643  : 	}
; 644  : 
; 645  : #ifdef _arch_dreamcast
; 646  : 	skipDC:
; 647  : #endif
; 648  : 
; 649  : 	if (retaxis < (-JOYAXISRANGE))

  000e8	81 7d fc 01 fc
	ff ff		 cmp	 DWORD PTR _retaxis$[ebp], -1023 ; fffffc01H
  000ef	7d 07		 jge	 SHORT $LN16@Joy2Axis

; 650  : 		retaxis = -JOYAXISRANGE;

  000f1	c7 45 fc 01 fc
	ff ff		 mov	 DWORD PTR _retaxis$[ebp], -1023 ; fffffc01H
$LN16@Joy2Axis:

; 651  : 	if (retaxis > (+JOYAXISRANGE))

  000f8	81 7d fc ff 03
	00 00		 cmp	 DWORD PTR _retaxis$[ebp], 1023 ; 000003ffH
  000ff	7e 07		 jle	 SHORT $LN17@Joy2Axis

; 652  : 		retaxis = +JOYAXISRANGE;

  00101	c7 45 fc ff 03
	00 00		 mov	 DWORD PTR _retaxis$[ebp], 1023 ; 000003ffH
$LN17@Joy2Axis:

; 653  : 	if (!Joystick2.bGamepadStyle && axissel < AXISDEAD)

  00108	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _Joystick2+4, 0
  0010f	75 23		 jne	 SHORT $LN19@Joy2Axis
  00111	83 7d 08 05	 cmp	 DWORD PTR _axissel$[ebp], 5
  00115	7d 1d		 jge	 SHORT $LN19@Joy2Axis

; 654  : 	{
; 655  : 		const INT32 jdeadzone = JOYAXISRANGE/4;

  00117	c7 45 f0 ff 00
	00 00		 mov	 DWORD PTR _jdeadzone$1[ebp], 255 ; 000000ffH

; 656  : 		if (-jdeadzone < retaxis && retaxis < jdeadzone)

  0011e	8b 45 f0	 mov	 eax, DWORD PTR _jdeadzone$1[ebp]
  00121	f7 d8		 neg	 eax
  00123	3b 45 fc	 cmp	 eax, DWORD PTR _retaxis$[ebp]
  00126	7d 0c		 jge	 SHORT $LN19@Joy2Axis
  00128	8b 45 fc	 mov	 eax, DWORD PTR _retaxis$[ebp]
  0012b	3b 45 f0	 cmp	 eax, DWORD PTR _jdeadzone$1[ebp]
  0012e	7d 04		 jge	 SHORT $LN19@Joy2Axis

; 657  : 			return 0;

  00130	33 c0		 xor	 eax, eax
  00132	eb 11		 jmp	 SHORT $LN1@Joy2Axis
$LN19@Joy2Axis:

; 658  : 	}
; 659  : 	if (flp) retaxis = -retaxis; //flip it around

  00134	83 7d f4 00	 cmp	 DWORD PTR _flp$[ebp], 0
  00138	74 08		 je	 SHORT $LN20@Joy2Axis
  0013a	8b 45 fc	 mov	 eax, DWORD PTR _retaxis$[ebp]
  0013d	f7 d8		 neg	 eax
  0013f	89 45 fc	 mov	 DWORD PTR _retaxis$[ebp], eax
$LN20@Joy2Axis:

; 660  : 	return retaxis;

  00142	8b 45 fc	 mov	 eax, DWORD PTR _retaxis$[ebp]
$LN1@Joy2Axis:

; 661  : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN22@Joy2Axis:
  0014c	00 00 00 00	 DD	 $LN4@Joy2Axis
  00150	00 00 00 00	 DD	 $LN5@Joy2Axis
  00154	00 00 00 00	 DD	 $LN6@Joy2Axis
  00158	00 00 00 00	 DD	 $LN7@Joy2Axis
  0015c	00 00 00 00	 DD	 $LN10@Joy2Axis
  00160	00 00 00 00	 DD	 $LN8@Joy2Axis
  00164	00 00 00 00	 DD	 $LN9@Joy2Axis
_Joy2Axis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _JoyAxis
_TEXT	SEGMENT
tv64 = -84						; size = 4
_jdeadzone$1 = -16					; size = 4
_flp$ = -12						; size = 4
_axisval$ = -8						; size = 4
_retaxis$ = -4						; size = 4
_axissel$ = 8						; size = 4
_JoyAxis PROC						; COMDAT

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 510  : 	INT32 retaxis;
; 511  : 	INT32 axisval;
; 512  : 	boolean flp = false;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _flp$[ebp], 0

; 513  : 
; 514  : 	//find what axis to get
; 515  : 	switch (axissel)

  00010	8b 45 08	 mov	 eax, DWORD PTR _axissel$[ebp]
  00013	89 45 ac	 mov	 DWORD PTR tv64[ebp], eax
  00016	8b 4d ac	 mov	 ecx, DWORD PTR tv64[ebp]
  00019	83 e9 01	 sub	 ecx, 1
  0001c	89 4d ac	 mov	 DWORD PTR tv64[ebp], ecx
  0001f	83 7d ac 06	 cmp	 DWORD PTR tv64[ebp], 6
  00023	77 46		 ja	 SHORT $LN10@JoyAxis
  00025	8b 55 ac	 mov	 edx, DWORD PTR tv64[ebp]
  00028	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN22@JoyAxis[edx*4]
$LN4@JoyAxis:

; 516  : 	{
; 517  : 		case AXISTURN:
; 518  : 			axisval = cv_turnaxis.value;

  0002f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_turnaxis+20
  00034	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 519  : 			break;

  00037	eb 39		 jmp	 SHORT $LN2@JoyAxis
$LN5@JoyAxis:

; 520  : 		case AXISMOVE:
; 521  : 			axisval = cv_moveaxis.value;

  00039	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_moveaxis+20
  0003e	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 522  : 			break;

  00041	eb 2f		 jmp	 SHORT $LN2@JoyAxis
$LN6@JoyAxis:

; 523  : 		case AXISLOOK:
; 524  : 			axisval = cv_lookaxis.value;

  00043	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_lookaxis+20
  00048	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 525  : 			break;

  0004b	eb 25		 jmp	 SHORT $LN2@JoyAxis
$LN7@JoyAxis:

; 526  : 		case AXISSTRAFE:
; 527  : 			axisval = cv_sideaxis.value;

  0004d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_sideaxis+20
  00052	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 528  : 			break;

  00055	eb 1b		 jmp	 SHORT $LN2@JoyAxis
$LN8@JoyAxis:

; 529  : 		case AXISFIRE:
; 530  : 			axisval = cv_fireaxis.value;

  00057	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_fireaxis+20
  0005c	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 531  : 			break;

  0005f	eb 11		 jmp	 SHORT $LN2@JoyAxis
$LN9@JoyAxis:

; 532  : 		case AXISFIRENORMAL:
; 533  : 			axisval = cv_firenaxis.value;

  00061	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_firenaxis+20
  00066	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 534  : 			break;

  00069	eb 07		 jmp	 SHORT $LN2@JoyAxis
$LN10@JoyAxis:

; 535  : 		default:
; 536  : 			return 0;

  0006b	33 c0		 xor	 eax, eax
  0006d	e9 d3 00 00 00	 jmp	 $LN1@JoyAxis
$LN2@JoyAxis:

; 537  : 	}
; 538  : 
; 539  : 	if (axisval < 0) //odd -axises

  00072	83 7d f8 00	 cmp	 DWORD PTR _axisval$[ebp], 0
  00076	7d 0f		 jge	 SHORT $LN11@JoyAxis

; 540  : 	{
; 541  : 		axisval = -axisval;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  0007b	f7 d8		 neg	 eax
  0007d	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 542  : 		flp = true;

  00080	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _flp$[ebp], 1
$LN11@JoyAxis:

; 543  : 	}
; 544  : #ifdef _arch_dreamcast
; 545  : 	if (axisval == 7) // special case
; 546  : 	{
; 547  : 		retaxis = joyxmove[1] - joyymove[1];
; 548  : 		goto skipDC;
; 549  : 	}
; 550  : 	else
; 551  : #endif
; 552  : 	if (axisval > JOYAXISSET*2 || axisval == 0) //not there in array or None

  00087	83 7d f8 08	 cmp	 DWORD PTR _axisval$[ebp], 8
  0008b	7f 06		 jg	 SHORT $LN13@JoyAxis
  0008d	83 7d f8 00	 cmp	 DWORD PTR _axisval$[ebp], 0
  00091	75 07		 jne	 SHORT $LN12@JoyAxis
$LN13@JoyAxis:

; 553  : 		return 0;

  00093	33 c0		 xor	 eax, eax
  00095	e9 ab 00 00 00	 jmp	 $LN1@JoyAxis
$LN12@JoyAxis:

; 554  : 
; 555  : 	if (axisval%2)

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  0009d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000a2	79 05		 jns	 SHORT $LN23@JoyAxis
  000a4	48		 dec	 eax
  000a5	83 c8 fe	 or	 eax, -2			; fffffffeH
  000a8	40		 inc	 eax
$LN23@JoyAxis:
  000a9	85 c0		 test	 eax, eax
  000ab	74 1a		 je	 SHORT $LN14@JoyAxis

; 556  : 	{
; 557  : 		axisval /= 2;

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000b0	99		 cdq
  000b1	2b c2		 sub	 eax, edx
  000b3	d1 f8		 sar	 eax, 1
  000b5	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 558  : 		retaxis = joyxmove[axisval];

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000bb	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _joyxmove[eax*4]
  000c2	89 4d fc	 mov	 DWORD PTR _retaxis$[ebp], ecx

; 559  : 	}

  000c5	eb 21		 jmp	 SHORT $LN15@JoyAxis
$LN14@JoyAxis:

; 560  : 	else
; 561  : 	{
; 562  : 		axisval--;

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000ca	83 e8 01	 sub	 eax, 1
  000cd	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 563  : 		axisval /= 2;

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000d3	99		 cdq
  000d4	2b c2		 sub	 eax, edx
  000d6	d1 f8		 sar	 eax, 1
  000d8	89 45 f8	 mov	 DWORD PTR _axisval$[ebp], eax

; 564  : 		retaxis = joyymove[axisval];

  000db	8b 45 f8	 mov	 eax, DWORD PTR _axisval$[ebp]
  000de	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _joyymove[eax*4]
  000e5	89 4d fc	 mov	 DWORD PTR _retaxis$[ebp], ecx
$LN15@JoyAxis:

; 565  : 	}
; 566  : 
; 567  : #ifdef _arch_dreamcast
; 568  : 	skipDC:
; 569  : #endif
; 570  : 
; 571  : 	if (retaxis < (-JOYAXISRANGE))

  000e8	81 7d fc 01 fc
	ff ff		 cmp	 DWORD PTR _retaxis$[ebp], -1023 ; fffffc01H
  000ef	7d 07		 jge	 SHORT $LN16@JoyAxis

; 572  : 		retaxis = -JOYAXISRANGE;

  000f1	c7 45 fc 01 fc
	ff ff		 mov	 DWORD PTR _retaxis$[ebp], -1023 ; fffffc01H
$LN16@JoyAxis:

; 573  : 	if (retaxis > (+JOYAXISRANGE))

  000f8	81 7d fc ff 03
	00 00		 cmp	 DWORD PTR _retaxis$[ebp], 1023 ; 000003ffH
  000ff	7e 07		 jle	 SHORT $LN17@JoyAxis

; 574  : 		retaxis = +JOYAXISRANGE;

  00101	c7 45 fc ff 03
	00 00		 mov	 DWORD PTR _retaxis$[ebp], 1023 ; 000003ffH
$LN17@JoyAxis:

; 575  : 	if (!Joystick.bGamepadStyle && axissel < AXISDEAD)

  00108	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _Joystick+4, 0
  0010f	75 23		 jne	 SHORT $LN19@JoyAxis
  00111	83 7d 08 05	 cmp	 DWORD PTR _axissel$[ebp], 5
  00115	7d 1d		 jge	 SHORT $LN19@JoyAxis

; 576  : 	{
; 577  : 		const INT32 jdeadzone = JOYAXISRANGE/4;

  00117	c7 45 f0 ff 00
	00 00		 mov	 DWORD PTR _jdeadzone$1[ebp], 255 ; 000000ffH

; 578  : 		if (-jdeadzone < retaxis && retaxis < jdeadzone)

  0011e	8b 45 f0	 mov	 eax, DWORD PTR _jdeadzone$1[ebp]
  00121	f7 d8		 neg	 eax
  00123	3b 45 fc	 cmp	 eax, DWORD PTR _retaxis$[ebp]
  00126	7d 0c		 jge	 SHORT $LN19@JoyAxis
  00128	8b 45 fc	 mov	 eax, DWORD PTR _retaxis$[ebp]
  0012b	3b 45 f0	 cmp	 eax, DWORD PTR _jdeadzone$1[ebp]
  0012e	7d 04		 jge	 SHORT $LN19@JoyAxis

; 579  : 			return 0;

  00130	33 c0		 xor	 eax, eax
  00132	eb 11		 jmp	 SHORT $LN1@JoyAxis
$LN19@JoyAxis:

; 580  : 	}
; 581  : 	if (flp) retaxis = -retaxis; //flip it around

  00134	83 7d f4 00	 cmp	 DWORD PTR _flp$[ebp], 0
  00138	74 08		 je	 SHORT $LN20@JoyAxis
  0013a	8b 45 fc	 mov	 eax, DWORD PTR _retaxis$[ebp]
  0013d	f7 d8		 neg	 eax
  0013f	89 45 fc	 mov	 DWORD PTR _retaxis$[ebp], eax
$LN20@JoyAxis:

; 582  : 	return retaxis;

  00142	8b 45 fc	 mov	 eax, DWORD PTR _retaxis$[ebp]
$LN1@JoyAxis:

; 583  : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN22@JoyAxis:
  0014c	00 00 00 00	 DD	 $LN4@JoyAxis
  00150	00 00 00 00	 DD	 $LN5@JoyAxis
  00154	00 00 00 00	 DD	 $LN6@JoyAxis
  00158	00 00 00 00	 DD	 $LN7@JoyAxis
  0015c	00 00 00 00	 DD	 $LN10@JoyAxis
  00160	00 00 00 00	 DD	 $LN8@JoyAxis
  00164	00 00 00 00	 DD	 $LN9@JoyAxis
_JoyAxis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _Analog2_OnChange
_TEXT	SEGMENT
_Analog2_OnChange PROC					; COMDAT

; 1372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1373 : 	if (!cv_cam2_dist.string)

  00009	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR _cv_cam2_dist+24, 0
  00010	75 02		 jne	 SHORT $LN2@Analog2_On

; 1374 : 		return;

  00012	eb 54		 jmp	 SHORT $LN7@Analog2_On
$LN2@Analog2_On:

; 1375 : 	if (leveltime > 1)

  00014	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _leveltime, 1
  0001b	76 12		 jbe	 SHORT $LN3@Analog2_On

; 1376 : 		CV_SetValue(&cv_cam2_dist, 128);

  0001d	68 80 00 00 00	 push	 128			; 00000080H
  00022	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  00027	e8 00 00 00 00	 call	 _CV_SetValue
  0002c	83 c4 08	 add	 esp, 8
$LN3@Analog2_On:

; 1377 : 	if (netgame || !cv_chasecam2.value)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00036	75 09		 jne	 SHORT $LN6@Analog2_On
  00038	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0003f	75 0c		 jne	 SHORT $LN4@Analog2_On
$LN6@Analog2_On:

; 1378 : 		cv_analog2.value = 0;

  00041	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cv_analog2+20, 0
  0004b	eb 1b		 jmp	 SHORT $LN7@Analog2_On
$LN4@Analog2_On:

; 1379 : 	else if (cv_analog2.value)

  0004d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00054	74 12		 je	 SHORT $LN7@Analog2_On

; 1380 : 		CV_SetValue(&cv_cam2_dist, 192);

  00056	68 c0 00 00 00	 push	 192			; 000000c0H
  0005b	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  00060	e8 00 00 00 00	 call	 _CV_SetValue
  00065	83 c4 08	 add	 esp, 8
$LN7@Analog2_On:

; 1381 : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_Analog2_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _Analog_OnChange
_TEXT	SEGMENT
_Analog_OnChange PROC					; COMDAT

; 1359 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1360 : 	if (!cv_cam_dist.string)

  00009	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR _cv_cam_dist+24, 0
  00010	75 02		 jne	 SHORT $LN2@Analog_OnC

; 1361 : 		return;

  00012	eb 54		 jmp	 SHORT $LN7@Analog_OnC
$LN2@Analog_OnC:

; 1362 : 	if (leveltime > 1)

  00014	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _leveltime, 1
  0001b	76 12		 jbe	 SHORT $LN3@Analog_OnC

; 1363 : 		CV_SetValue(&cv_cam_dist, 128);

  0001d	68 80 00 00 00	 push	 128			; 00000080H
  00022	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  00027	e8 00 00 00 00	 call	 _CV_SetValue
  0002c	83 c4 08	 add	 esp, 8
$LN3@Analog_OnC:

; 1364 : 
; 1365 : 	if (netgame || !cv_chasecam.value)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00036	75 09		 jne	 SHORT $LN6@Analog_OnC
  00038	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  0003f	75 0c		 jne	 SHORT $LN4@Analog_OnC
$LN6@Analog_OnC:

; 1366 : 		cv_analog.value = 0;

  00041	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cv_analog+20, 0
  0004b	eb 1b		 jmp	 SHORT $LN7@Analog_OnC
$LN4@Analog_OnC:

; 1367 : 	else if (cv_analog.value)

  0004d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00054	74 12		 je	 SHORT $LN7@Analog_OnC

; 1368 : 		CV_SetValue(&cv_cam_dist, 192);

  00056	68 c0 00 00 00	 push	 192			; 000000c0H
  0005b	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  00060	e8 00 00 00 00	 call	 _CV_SetValue
  00065	83 c4 08	 add	 esp, 8
$LN7@Analog_OnC:

; 1369 : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_Analog_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _UserAnalog2_OnChange
_TEXT	SEGMENT
_UserAnalog2_OnChange PROC				; COMDAT

; 1351 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1352 : 	if (cv_useranalog2.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_useranalog2+20, 0
  00010	74 11		 je	 SHORT $LN2@UserAnalog

; 1353 : 		CV_SetValue(&cv_analog2, 1);

  00012	6a 01		 push	 1
  00014	68 00 00 00 00	 push	 OFFSET _cv_analog2
  00019	e8 00 00 00 00	 call	 _CV_SetValue
  0001e	83 c4 08	 add	 esp, 8
  00021	eb 0f		 jmp	 SHORT $LN3@UserAnalog
$LN2@UserAnalog:

; 1354 : 	else
; 1355 : 		CV_SetValue(&cv_analog2, 0);

  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET _cv_analog2
  0002a	e8 00 00 00 00	 call	 _CV_SetValue
  0002f	83 c4 08	 add	 esp, 8
$LN3@UserAnalog:

; 1356 : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_UserAnalog2_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _UserAnalog_OnChange
_TEXT	SEGMENT
_UserAnalog_OnChange PROC				; COMDAT

; 1343 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1344 : 	if (cv_useranalog.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_useranalog+20, 0
  00010	74 11		 je	 SHORT $LN2@UserAnalog

; 1345 : 		CV_SetValue(&cv_analog, 1);

  00012	6a 01		 push	 1
  00014	68 00 00 00 00	 push	 OFFSET _cv_analog
  00019	e8 00 00 00 00	 call	 _CV_SetValue
  0001e	83 c4 08	 add	 esp, 8
  00021	eb 0f		 jmp	 SHORT $LN3@UserAnalog
$LN2@UserAnalog:

; 1346 : 	else
; 1347 : 		CV_SetValue(&cv_analog, 0);

  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET _cv_analog
  0002a	e8 00 00 00 00	 call	 _CV_SetValue
  0002f	83 c4 08	 add	 esp, 8
$LN3@UserAnalog:

; 1348 : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_UserAnalog_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DoWorldDone
_TEXT	SEGMENT
_nextgametype$1 = -4					; size = 4
_G_DoWorldDone PROC					; COMDAT

; 2528 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2529 : 	// not in demo because demo have the mapcommand on it
; 2530 : 	if (server && !demoplayback)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	0f 84 e5 00 00
	00		 je	 $LN12@G_DoWorldD
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  0001d	0f 85 d8 00 00
	00		 jne	 $LN12@G_DoWorldD

; 2531 : 	{
; 2532 : 		INT32 nextgametype;
; 2533 : 
; 2534 : 		// for custom exit (linetype 2) that changes gametype
; 2535 : 		if (nextmapgametype != -1)

  00023	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _nextmapgametype, -1
  0002a	74 0a		 je	 SHORT $LN3@G_DoWorldD

; 2536 : 			nextgametype = nextmapgametype;

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR _nextmapgametype
  00031	89 45 fc	 mov	 DWORD PTR _nextgametype$1[ebp], eax
  00034	eb 64		 jmp	 SHORT $LN10@G_DoWorldD
$LN3@G_DoWorldD:

; 2537 : 		else
; 2538 : 		{
; 2539 : 			// use current gametype by default
; 2540 : 			if (gametype == GT_RACE && cv_racetype.value)

  00036	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0003d	83 f8 02	 cmp	 eax, 2
  00040	75 12		 jne	 SHORT $LN5@G_DoWorldD
  00042	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_racetype+20, 0
  00049	74 09		 je	 SHORT $LN5@G_DoWorldD

; 2541 : 				nextgametype = GTF_CLASSICRACE;

  0004b	c7 45 fc 2b 00
	00 00		 mov	 DWORD PTR _nextgametype$1[ebp], 43 ; 0000002bH
  00052	eb 46		 jmp	 SHORT $LN10@G_DoWorldD
$LN5@G_DoWorldD:

; 2542 : 			else if (gametype == GT_MATCH && cv_matchtype.value)

  00054	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0005b	83 f8 01	 cmp	 eax, 1
  0005e	75 12		 jne	 SHORT $LN7@G_DoWorldD
  00060	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00067	74 09		 je	 SHORT $LN7@G_DoWorldD

; 2543 : 				nextgametype = GTF_TEAMMATCH;

  00069	c7 45 fc 2a 00
	00 00		 mov	 DWORD PTR _nextgametype$1[ebp], 42 ; 0000002aH
  00070	eb 28		 jmp	 SHORT $LN10@G_DoWorldD
$LN7@G_DoWorldD:

; 2544 : 			else if (gametype == GT_TAG && cv_tagtype.value)

  00072	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00079	83 f8 03	 cmp	 eax, 3
  0007c	75 12		 jne	 SHORT $LN9@G_DoWorldD
  0007e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00085	74 09		 je	 SHORT $LN9@G_DoWorldD

; 2545 : 				nextgametype = GTF_HIDEANDSEEK;

  00087	c7 45 fc 2c 00
	00 00		 mov	 DWORD PTR _nextgametype$1[ebp], 44 ; 0000002cH
  0008e	eb 0a		 jmp	 SHORT $LN10@G_DoWorldD
$LN9@G_DoWorldD:

; 2546 : 			else
; 2547 : 				nextgametype = gametype;

  00090	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00097	89 45 fc	 mov	 DWORD PTR _nextgametype$1[ebp], eax
$LN10@G_DoWorldD:

; 2548 : 		}
; 2549 : 
; 2550 : 		if (gametype == GT_COOP && nextgametype == GT_COOP)

  0009a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a1	85 c0		 test	 eax, eax
  000a3	75 2f		 jne	 SHORT $LN11@G_DoWorldD
  000a5	83 7d fc 00	 cmp	 DWORD PTR _nextgametype$1[ebp], 0
  000a9	75 29		 jne	 SHORT $LN11@G_DoWorldD

; 2551 : 			// don't reset player between maps
; 2552 : 			D_MapChange(nextmap+1, nextgametype, ultimatemode, 0, 0, false, false);

  000ab	6a 00		 push	 0
  000ad	6a 00		 push	 0
  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _nextgametype$1[ebp]
  000be	51		 push	 ecx
  000bf	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _nextmap
  000c6	83 c2 01	 add	 edx, 1
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 _D_MapChange
  000cf	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d2	eb 27		 jmp	 SHORT $LN12@G_DoWorldD
$LN11@G_DoWorldD:

; 2553 : 		else
; 2554 : 			// resetplayer in match/chaos/tag/CTF/race for more equality
; 2555 : 			D_MapChange(nextmap+1, nextgametype, ultimatemode, 1, 0, false, false);

  000d4	6a 00		 push	 0
  000d6	6a 00		 push	 0
  000d8	6a 00		 push	 0
  000da	6a 01		 push	 1
  000dc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  000e3	50		 push	 eax
  000e4	8b 4d fc	 mov	 ecx, DWORD PTR _nextgametype$1[ebp]
  000e7	51		 push	 ecx
  000e8	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _nextmap
  000ef	83 c2 01	 add	 edx, 1
  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 _D_MapChange
  000f8	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN12@G_DoWorldD:

; 2556 : 	}
; 2557 : 
; 2558 : 	gameaction = ga_nothing;

  000fb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 2559 : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
_G_DoWorldDone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_WriteDemoTiccmd
_TEXT	SEGMENT
_p_tmp$1 = -32						; size = 4
_p_tmp$2 = -28						; size = 4
_p_tmp$3 = -24						; size = 4
_p_tmp$4 = -20						; size = 4
_p_tmp$5 = -16						; size = 4
_p_tmp$6 = -12						; size = 4
_ziptic_p$ = -8						; size = 4
_ziptic$ = -1						; size = 1
_cmd$ = 8						; size = 4
_playernum$ = 12					; size = 4
_G_WriteDemoTiccmd PROC					; COMDAT

; 3034 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3035 : 	char ziptic = 0;

  00009	c6 45 ff 00	 mov	 BYTE PTR _ziptic$[ebp], 0

; 3036 : 	UINT8 *ziptic_p;
; 3037 : 
; 3038 : 	ziptic_p = demo_p++; // the ziptic, written at the end of this function

  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00012	89 45 f8	 mov	 DWORD PTR _ziptic_p$[ebp], eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _demo_p
  0001b	83 c1 01	 add	 ecx, 1
  0001e	89 0d 00 00 00
	00		 mov	 DWORD PTR _demo_p, ecx

; 3039 : 
; 3040 : 	if (cmd->forwardmove != oldcmd[playernum].forwardmove)

  00024	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00027	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0002a	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  0002d	0f be 04 d5 00
	00 00 00	 movsx	 eax, BYTE PTR _oldcmd[edx*8]
  00035	3b c8		 cmp	 ecx, eax
  00037	74 40		 je	 SHORT $LN20@G_WriteDem
$LN4@G_WriteDem:

; 3041 : 	{
; 3042 : 		WRITEUINT8(demo_p,cmd->forwardmove);

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0003e	89 45 f4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00041	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00047	8a 11		 mov	 dl, BYTE PTR [ecx]
  00049	88 10		 mov	 BYTE PTR [eax], dl
  0004b	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  0004e	83 c0 01	 add	 eax, 1
  00051	89 45 f4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  00054	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  00057	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  0005c	33 c0		 xor	 eax, eax
  0005e	75 d9		 jne	 SHORT $LN4@G_WriteDem

; 3043 : 		oldcmd[playernum].forwardmove = cmd->forwardmove;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00066	8a 11		 mov	 dl, BYTE PTR [ecx]
  00068	88 14 c5 00 00
	00 00		 mov	 BYTE PTR _oldcmd[eax*8], dl

; 3044 : 		ziptic |= ZT_FWD;

  0006f	0f be 45 ff	 movsx	 eax, BYTE PTR _ziptic$[ebp]
  00073	83 c8 01	 or	 eax, 1
  00076	88 45 ff	 mov	 BYTE PTR _ziptic$[ebp], al
$LN20@G_WriteDem:

; 3045 : 	}
; 3046 : 
; 3047 : 	if (cmd->sidemove != oldcmd[playernum].sidemove)

  00079	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  0007c	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00080	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  00083	0f be 04 d5 01
	00 00 00	 movsx	 eax, BYTE PTR _oldcmd[edx*8+1]
  0008b	3b c8		 cmp	 ecx, eax
  0008d	74 42		 je	 SHORT $LN21@G_WriteDem
$LN7@G_WriteDem:

; 3048 : 	{
; 3049 : 		WRITEUINT8(demo_p,cmd->sidemove);

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00094	89 45 f0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00097	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  0009d	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000a0	88 10		 mov	 BYTE PTR [eax], dl
  000a2	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  000a5	83 c0 01	 add	 eax, 1
  000a8	89 45 f0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  000ab	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  000ae	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  000b3	33 c0		 xor	 eax, eax
  000b5	75 d8		 jne	 SHORT $LN7@G_WriteDem

; 3050 : 		oldcmd[playernum].sidemove = cmd->sidemove;

  000b7	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  000bd	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000c0	88 14 c5 01 00
	00 00		 mov	 BYTE PTR _oldcmd[eax*8+1], dl

; 3051 : 		ziptic |= ZT_SIDE;

  000c7	0f be 45 ff	 movsx	 eax, BYTE PTR _ziptic$[ebp]
  000cb	83 c8 02	 or	 eax, 2
  000ce	88 45 ff	 mov	 BYTE PTR _ziptic$[ebp], al
$LN21@G_WriteDem:

; 3052 : 	}
; 3053 : 
; 3054 : 	if (cmd->angleturn != oldcmd[playernum].angleturn)

  000d1	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  000d4	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  000d8	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  000db	0f bf 04 d5 02
	00 00 00	 movsx	 eax, WORD PTR _oldcmd[edx*8+2]
  000e3	3b c8		 cmp	 ecx, eax
  000e5	74 46		 je	 SHORT $LN22@G_WriteDem
$LN10@G_WriteDem:

; 3055 : 	{
; 3056 : 		WRITEINT16(demo_p,cmd->angleturn);

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000ec	89 45 ec	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  000ef	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  000f5	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  000f9	66 89 10	 mov	 WORD PTR [eax], dx
  000fc	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  000ff	83 c0 02	 add	 eax, 2
  00102	89 45 ec	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00105	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00108	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  0010d	33 c0		 xor	 eax, eax
  0010f	75 d6		 jne	 SHORT $LN10@G_WriteDem

; 3057 : 		oldcmd[playernum].angleturn = cmd->angleturn;

  00111	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00117	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  0011b	66 89 14 c5 02
	00 00 00	 mov	 WORD PTR _oldcmd[eax*8+2], dx

; 3058 : 		ziptic |= ZT_ANGLE;

  00123	0f be 45 ff	 movsx	 eax, BYTE PTR _ziptic$[ebp]
  00127	83 c8 04	 or	 eax, 4
  0012a	88 45 ff	 mov	 BYTE PTR _ziptic$[ebp], al
$LN22@G_WriteDem:

; 3059 : 	}
; 3060 : 
; 3061 : 	if (cmd->buttons != oldcmd[playernum].buttons)

  0012d	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00130	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00134	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  00137	0f b7 04 d5 06
	00 00 00	 movzx	 eax, WORD PTR _oldcmd[edx*8+6]
  0013f	3b c8		 cmp	 ecx, eax
  00141	0f 84 81 00 00
	00		 je	 $LN23@G_WriteDem
$LN13@G_WriteDem:

; 3062 : 	{
; 3063 : 		WRITEUINT8(demo_p,cmd->buttons>>8);

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0014c	89 45 e8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0014f	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00152	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00156	c1 f9 08	 sar	 ecx, 8
  00159	8b 55 e8	 mov	 edx, DWORD PTR _p_tmp$3[ebp]
  0015c	88 0a		 mov	 BYTE PTR [edx], cl
  0015e	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00161	83 c0 01	 add	 eax, 1
  00164	89 45 e8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00167	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0016a	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  0016f	33 c0		 xor	 eax, eax
  00171	75 d4		 jne	 SHORT $LN13@G_WriteDem
$LN12@G_WriteDem:

; 3064 : 		WRITEUINT8(demo_p,cmd->buttons&255);

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00178	89 45 e4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0017b	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  0017e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00182	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00188	8b 55 e4	 mov	 edx, DWORD PTR _p_tmp$2[ebp]
  0018b	88 0a		 mov	 BYTE PTR [edx], cl
  0018d	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00190	83 c0 01	 add	 eax, 1
  00193	89 45 e4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00196	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00199	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  0019e	33 c0		 xor	 eax, eax
  001a0	75 d1		 jne	 SHORT $LN12@G_WriteDem

; 3065 : 		oldcmd[playernum].buttons = cmd->buttons;

  001a2	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  001a8	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  001ac	66 89 14 c5 06
	00 00 00	 mov	 WORD PTR _oldcmd[eax*8+6], dx

; 3066 : 		ziptic |= ZT_BUTTONS;

  001b4	0f be 45 ff	 movsx	 eax, BYTE PTR _ziptic$[ebp]
  001b8	83 c8 08	 or	 eax, 8
  001bb	88 45 ff	 mov	 BYTE PTR _ziptic$[ebp], al

; 3067 : 		ziptic |= ZT_BUTTONS2;

  001be	0f be 45 ff	 movsx	 eax, BYTE PTR _ziptic$[ebp]
  001c2	83 c8 20	 or	 eax, 32			; 00000020H
  001c5	88 45 ff	 mov	 BYTE PTR _ziptic$[ebp], al
$LN23@G_WriteDem:

; 3068 : 	}
; 3069 : 
; 3070 : 	if (cmd->aiming != oldcmd[playernum].aiming)

  001c8	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  001cb	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  001cf	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  001d2	0f bf 04 d5 04
	00 00 00	 movsx	 eax, WORD PTR _oldcmd[edx*8+4]
  001da	3b c8		 cmp	 ecx, eax
  001dc	74 46		 je	 SHORT $LN24@G_WriteDem
$LN19@G_WriteDem:

; 3071 : 	{
; 3072 : 		WRITEINT16(demo_p,cmd->aiming);

  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  001e3	89 45 e0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001e6	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001e9	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  001ec	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  001f0	66 89 10	 mov	 WORD PTR [eax], dx
  001f3	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001f6	83 c0 02	 add	 eax, 2
  001f9	89 45 e0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001fc	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001ff	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00204	33 c0		 xor	 eax, eax
  00206	75 d6		 jne	 SHORT $LN19@G_WriteDem

; 3073 : 		oldcmd[playernum].aiming = cmd->aiming;

  00208	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0020b	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  0020e	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00212	66 89 14 c5 04
	00 00 00	 mov	 WORD PTR _oldcmd[eax*8+4], dx

; 3074 : 		ziptic |= ZT_AIMING;

  0021a	0f be 45 ff	 movsx	 eax, BYTE PTR _ziptic$[ebp]
  0021e	83 c8 10	 or	 eax, 16			; 00000010H
  00221	88 45 ff	 mov	 BYTE PTR _ziptic$[ebp], al
$LN24@G_WriteDem:

; 3075 : 	}
; 3076 : 
; 3077 : 	if (AddLmpExtradata(&demo_p, playernum))

  00224	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00227	50		 push	 eax
  00228	68 00 00 00 00	 push	 OFFSET _demo_p
  0022d	e8 00 00 00 00	 call	 _AddLmpExtradata
  00232	83 c4 08	 add	 esp, 8
  00235	85 c0		 test	 eax, eax
  00237	74 0a		 je	 SHORT $LN25@G_WriteDem

; 3078 : 		ziptic |= ZT_EXTRADATA;

  00239	0f be 45 ff	 movsx	 eax, BYTE PTR _ziptic$[ebp]
  0023d	83 c8 40	 or	 eax, 64			; 00000040H
  00240	88 45 ff	 mov	 BYTE PTR _ziptic$[ebp], al
$LN25@G_WriteDem:

; 3079 : 
; 3080 : 	*ziptic_p = ziptic;

  00243	8b 45 f8	 mov	 eax, DWORD PTR _ziptic_p$[ebp]
  00246	8a 4d ff	 mov	 cl, BYTE PTR _ziptic$[ebp]
  00249	88 08		 mov	 BYTE PTR [eax], cl

; 3081 : 
; 3082 : 	// attention here for the ticcmd size!
; 3083 : 	// latest demos with mouse aiming byte in ticcmd
; 3084 : 	if (ziptic_p > demoend - (5*MAXPLAYERS))

  0024b	a1 00 00 00 00	 mov	 eax, DWORD PTR _demoend
  00250	2d a0 00 00 00	 sub	 eax, 160		; 000000a0H
  00255	39 45 f8	 cmp	 DWORD PTR _ziptic_p$[ebp], eax
  00258	76 06		 jbe	 SHORT $LN26@G_WriteDem

; 3085 : 	{
; 3086 : 		G_CheckDemoStatus(); // no more space

  0025a	e8 00 00 00 00	 call	 _G_CheckDemoStatus
  0025f	90		 npad	 1
$LN26@G_WriteDem:

; 3087 : 		return;
; 3088 : 	}
; 3089 : }

  00260	5f		 pop	 edi
  00261	5e		 pop	 esi
  00262	5b		 pop	 ebx
  00263	8b e5		 mov	 esp, ebp
  00265	5d		 pop	 ebp
  00266	c3		 ret	 0
_G_WriteDemoTiccmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_ReadDemoTiccmd
_TEXT	SEGMENT
_ziptic$ = -1						; size = 1
_cmd$ = 8						; size = 4
_playernum$ = 12					; size = 4
_G_ReadDemoTiccmd PROC					; COMDAT

; 3001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3002 : 	UINT8 ziptic;
; 3003 : 
; 3004 : 	ziptic = READUINT8(demo_p);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0000e	8a 08		 mov	 cl, BYTE PTR [eax]
  00010	88 4d ff	 mov	 BYTE PTR _ziptic$[ebp], cl
  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _demo_p
  00019	83 c2 01	 add	 edx, 1
  0001c	89 15 00 00 00
	00		 mov	 DWORD PTR _demo_p, edx

; 3005 : 
; 3006 : 	if (ziptic & ZT_FWD)

  00022	0f b6 45 ff	 movzx	 eax, BYTE PTR _ziptic$[ebp]
  00026	83 e0 01	 and	 eax, 1
  00029	74 1f		 je	 SHORT $LN2@G_ReadDemo

; 3007 : 		oldcmd[playernum].forwardmove = READSINT8(demo_p);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _demo_p
  00034	8a 11		 mov	 dl, BYTE PTR [ecx]
  00036	88 14 c5 00 00
	00 00		 mov	 BYTE PTR _oldcmd[eax*8], dl
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00042	83 c0 01	 add	 eax, 1
  00045	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
$LN2@G_ReadDemo:

; 3008 : 	if (ziptic & ZT_SIDE)

  0004a	0f b6 45 ff	 movzx	 eax, BYTE PTR _ziptic$[ebp]
  0004e	83 e0 02	 and	 eax, 2
  00051	74 1f		 je	 SHORT $LN3@G_ReadDemo

; 3009 : 		oldcmd[playernum].sidemove = READSINT8(demo_p);

  00053	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _demo_p
  0005c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0005e	88 14 c5 01 00
	00 00		 mov	 BYTE PTR _oldcmd[eax*8+1], dl
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0006a	83 c0 01	 add	 eax, 1
  0006d	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
$LN3@G_ReadDemo:

; 3010 : 	if (ziptic & ZT_ANGLE)

  00072	0f b6 45 ff	 movzx	 eax, BYTE PTR _ziptic$[ebp]
  00076	83 e0 04	 and	 eax, 4
  00079	74 21		 je	 SHORT $LN4@G_ReadDemo

; 3011 : 		oldcmd[playernum].angleturn = READINT16(demo_p);

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _demo_p
  00084	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00087	66 89 14 c5 02
	00 00 00	 mov	 WORD PTR _oldcmd[eax*8+2], dx
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00094	83 c0 02	 add	 eax, 2
  00097	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
$LN4@G_ReadDemo:

; 3012 : 	if (ziptic & ZT_BUTTONS)

  0009c	0f b6 45 ff	 movzx	 eax, BYTE PTR _ziptic$[ebp]
  000a0	83 e0 08	 and	 eax, 8
  000a3	74 23		 je	 SHORT $LN5@G_ReadDemo

; 3013 : 		oldcmd[playernum].buttons = (UINT16)(READUINT8(demo_p)<<8); //buttons in a UINT16, not a UINT8

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000aa	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ad	c1 e1 08	 shl	 ecx, 8
  000b0	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  000b3	66 89 0c d5 06
	00 00 00	 mov	 WORD PTR _oldcmd[edx*8+6], cx
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000c0	83 c0 01	 add	 eax, 1
  000c3	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
$LN5@G_ReadDemo:

; 3014 : 	if (ziptic & ZT_BUTTONS2)

  000c8	0f b6 45 ff	 movzx	 eax, BYTE PTR _ziptic$[ebp]
  000cc	83 e0 20	 and	 eax, 32			; 00000020H
  000cf	74 2e		 je	 SHORT $LN6@G_ReadDemo

; 3015 : 		oldcmd[playernum].buttons = (UINT16)(oldcmd[playernum].buttons+READUINT8(demo_p)); //ZT_BUTTONS2 always comes with ZT_BUTTONS

  000d1	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000d4	0f b7 0c c5 06
	00 00 00	 movzx	 ecx, WORD PTR _oldcmd[eax*8+6]
  000dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _demo_p
  000e2	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000e5	03 c8		 add	 ecx, eax
  000e7	8b 55 0c	 mov	 edx, DWORD PTR _playernum$[ebp]
  000ea	66 89 0c d5 06
	00 00 00	 mov	 WORD PTR _oldcmd[edx*8+6], cx
  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000f7	83 c0 01	 add	 eax, 1
  000fa	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
$LN6@G_ReadDemo:

; 3016 : 	if (ziptic & ZT_AIMING)

  000ff	0f b6 45 ff	 movzx	 eax, BYTE PTR _ziptic$[ebp]
  00103	83 e0 10	 and	 eax, 16			; 00000010H
  00106	74 21		 je	 SHORT $LN7@G_ReadDemo

; 3017 : 		oldcmd[playernum].aiming = READINT16(demo_p);

  00108	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _demo_p
  00111	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00114	66 89 14 c5 04
	00 00 00	 mov	 WORD PTR _oldcmd[eax*8+4], dx
  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00121	83 c0 02	 add	 eax, 2
  00124	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
$LN7@G_ReadDemo:

; 3018 : 	if (ziptic & ZT_EXTRADATA)

  00129	0f b6 45 ff	 movzx	 eax, BYTE PTR _ziptic$[ebp]
  0012d	83 e0 40	 and	 eax, 64			; 00000040H
  00130	74 13		 je	 SHORT $LN8@G_ReadDemo

; 3019 : 		ReadLmpExtraData(&demo_p, playernum);

  00132	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00135	50		 push	 eax
  00136	68 00 00 00 00	 push	 OFFSET _demo_p
  0013b	e8 00 00 00 00	 call	 _ReadLmpExtraData
  00140	83 c4 08	 add	 esp, 8
  00143	eb 0e		 jmp	 SHORT $LN9@G_ReadDemo
$LN8@G_ReadDemo:

; 3020 : 	else
; 3021 : 		ReadLmpExtraData(NULL, playernum);

  00145	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00148	50		 push	 eax
  00149	6a 00		 push	 0
  0014b	e8 00 00 00 00	 call	 _ReadLmpExtraData
  00150	83 c4 08	 add	 esp, 8
$LN9@G_ReadDemo:

; 3022 : 
; 3023 : 	G_CopyTiccmd(cmd, oldcmd+playernum, 1);

  00153	6a 01		 push	 1
  00155	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00158	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR _oldcmd[eax*8]
  0015f	51		 push	 ecx
  00160	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00163	52		 push	 edx
  00164	e8 00 00 00 00	 call	 _G_CopyTiccmd
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3024 : 
; 3025 : 	if (*demo_p == DEMOMARKER)

  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00171	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00174	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  0017a	75 06		 jne	 SHORT $LN10@G_ReadDemo

; 3026 : 	{
; 3027 : 		// end of demo data stream
; 3028 : 		G_CheckDemoStatus();

  0017c	e8 00 00 00 00	 call	 _G_CheckDemoStatus
  00181	90		 npad	 1
$LN10@G_ReadDemo:

; 3029 : 		return;
; 3030 : 	}
; 3031 : }

  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
_G_ReadDemoTiccmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_TicsToMilliseconds
_TEXT	SEGMENT
tv76 = -76						; size = 8
tv73 = -68						; size = 4
_tics$ = 8						; size = 4
_G_TicsToMilliseconds PROC				; COMDAT

; 3406 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3407 : 	return (INT32)((tics%TICRATE) * (1000.00f/TICRATE));

  00009	8b 45 08	 mov	 eax, DWORD PTR _tics$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00013	f7 f1		 div	 ecx
  00015	89 55 bc	 mov	 DWORD PTR tv73[ebp], edx
  00018	f2 0f 2a 45 bc	 cvtsi2sd xmm0, DWORD PTR tv73[ebp]
  0001d	8b 55 bc	 mov	 edx, DWORD PTR tv73[ebp]
  00020	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00023	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  0002c	f2 0f 11 45 b4	 movsd	 QWORD PTR tv76[ebp], xmm0
  00031	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv76[ebp]
  00036	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41e49249
  0003e	f3 0f 2c c0	 cvttss2si eax, xmm0

; 3408 : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_G_TicsToMilliseconds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_TicsToCentiseconds
_TEXT	SEGMENT
tv76 = -76						; size = 8
tv73 = -68						; size = 4
_tics$ = 8						; size = 4
_G_TicsToCentiseconds PROC				; COMDAT

; 3401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3402 : 	return (INT32)((tics%TICRATE) * (100.00f/TICRATE));

  00009	8b 45 08	 mov	 eax, DWORD PTR _tics$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00013	f7 f1		 div	 ecx
  00015	89 55 bc	 mov	 DWORD PTR tv73[ebp], edx
  00018	f2 0f 2a 45 bc	 cvtsi2sd xmm0, DWORD PTR tv73[ebp]
  0001d	8b 55 bc	 mov	 edx, DWORD PTR tv73[ebp]
  00020	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00023	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  0002c	f2 0f 11 45 b4	 movsd	 QWORD PTR tv76[ebp], xmm0
  00031	f2 0f 5a 45 b4	 cvtsd2ss xmm0, QWORD PTR tv76[ebp]
  00036	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@4036db6e
  0003e	f3 0f 2c c0	 cvttss2si eax, xmm0

; 3403 : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_G_TicsToCentiseconds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_TicsToSeconds
_TEXT	SEGMENT
_tics$ = 8						; size = 4
_G_TicsToSeconds PROC					; COMDAT

; 3396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3397 : 	return (tics/TICRATE)%60;

  00009	8b 45 08	 mov	 eax, DWORD PTR _tics$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00013	f7 f1		 div	 ecx
  00015	33 d2		 xor	 edx, edx
  00017	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0001c	f7 f1		 div	 ecx
  0001e	8b c2		 mov	 eax, edx

; 3398 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_G_TicsToSeconds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_TicsToMinutes
_TEXT	SEGMENT
_tics$ = 8						; size = 4
_full$ = 12						; size = 4
_G_TicsToMinutes PROC					; COMDAT

; 3388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3389 : 	if (full)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _full$[ebp], 0
  0000d	74 10		 je	 SHORT $LN2@G_TicsToMi

; 3390 : 		return tics/(60*TICRATE);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _tics$[ebp]
  00012	33 d2		 xor	 edx, edx
  00014	b9 34 08 00 00	 mov	 ecx, 2100		; 00000834H
  00019	f7 f1		 div	 ecx
  0001b	eb 19		 jmp	 SHORT $LN3@G_TicsToMi
  0001d	eb 17		 jmp	 SHORT $LN3@G_TicsToMi
$LN2@G_TicsToMi:

; 3391 : 	else
; 3392 : 		return tics/(60*TICRATE)%60;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _tics$[ebp]
  00022	33 d2		 xor	 edx, edx
  00024	b9 34 08 00 00	 mov	 ecx, 2100		; 00000834H
  00029	f7 f1		 div	 ecx
  0002b	33 d2		 xor	 edx, edx
  0002d	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00032	f7 f1		 div	 ecx
  00034	8b c2		 mov	 eax, edx
$LN3@G_TicsToMi:

; 3393 : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_G_TicsToMinutes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_TicsToHours
_TEXT	SEGMENT
_tics$ = 8						; size = 4
_G_TicsToHours PROC					; COMDAT

; 3383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3384 : 	return tics/(3600*TICRATE);

  00009	8b 45 08	 mov	 eax, DWORD PTR _tics$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	b9 30 ec 01 00	 mov	 ecx, 126000		; 0001ec30H
  00013	f7 f1		 div	 ecx

; 3385 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_G_TicsToHours ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_SetGamestate
_TEXT	SEGMENT
_newstate$ = 8						; size = 4
_G_SetGamestate PROC					; COMDAT

; 3353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3354 : 	gamestate = newstate;

  00009	8b 45 08	 mov	 eax, DWORD PTR _newstate$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR _gamestate, eax

; 3355 : 	oncontinuescreen = false;

  00011	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _oncontinuescreen, 0

; 3356 : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_G_SetGamestate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_LoadGameSettings
_TEXT	SEGMENT
_G_LoadGameSettings PROC				; COMDAT

; 2566 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2567 : 	// defaults
; 2568 : 	spstage_start = 1;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	66 a3 00 00 00
	00		 mov	 WORD PTR _spstage_start, ax

; 2569 : 	spstage_end = 24;

  00014	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00019	66 a3 00 00 00
	00		 mov	 WORD PTR _spstage_end, ax

; 2570 : 	sstage_start = 50;

  0001f	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00024	66 a3 00 00 00
	00		 mov	 WORD PTR _sstage_start, ax

; 2571 : 	sstage_end = 56;

  0002a	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0002f	66 a3 00 00 00
	00		 mov	 WORD PTR _sstage_end, ax

; 2572 : 	nsstage_start = 60;

  00035	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  0003a	66 a3 00 00 00
	00		 mov	 WORD PTR _nsstage_start, ax

; 2573 : 	nsstage_end = 66;

  00040	b8 42 00 00 00	 mov	 eax, 66			; 00000042H
  00045	66 a3 00 00 00
	00		 mov	 WORD PTR _nsstage_end, ax

; 2574 : 	racestage_start = 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	66 a3 00 00 00
	00		 mov	 WORD PTR _racestage_start, ax

; 2575 : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_G_LoadGameSettings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_LoadGameData
_TEXT	SEGMENT
_gdfolder$1 = -20					; size = 4
_corrupt$ = -16						; size = 4
_modded$ = -9						; size = 1
_i$ = -8						; size = 4
_length$ = -4						; size = 4
_G_LoadGameData PROC					; COMDAT

; 2580 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2581 : 	size_t length;
; 2582 : 	INT32 i;
; 2583 : 	UINT8 modded = false;

  00009	c6 45 f7 00	 mov	 BYTE PTR _modded$[ebp], 0

; 2584 : 	boolean corrupt = false;

  0000d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _corrupt$[ebp], 0

; 2585 : 
; 2586 : 	for (i = 0; i < MAXEMBLEMS; i++)

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001b	eb 09		 jmp	 SHORT $LN4@G_LoadGame
$LN2@G_LoadGame:
  0001d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00020	83 c0 01	 add	 eax, 1
  00023	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_LoadGame:
  00026	81 7d f8 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  0002d	7d 0d		 jge	 SHORT $LN3@G_LoadGame

; 2587 : 		emblemlocations[i].collected = false;

  0002f	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00033	c6 80 0a 00 00
	00 00		 mov	 BYTE PTR _emblemlocations[eax+10], 0
  0003a	eb e1		 jmp	 SHORT $LN2@G_LoadGame
$LN3@G_LoadGame:

; 2588 : 
; 2589 : 	memset(mapvisited, false, sizeof(mapvisited));

  0003c	68 0b 04 00 00	 push	 1035			; 0000040bH
  00041	6a 00		 push	 0
  00043	68 00 00 00 00	 push	 OFFSET _mapvisited
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2590 : 
; 2591 : 	totalplaytime = 0;

  00050	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _totalplaytime, 0

; 2592 : 	grade = 0;

  0005a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _grade, 0

; 2593 : 	timesbeaten = 0;

  00064	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timesbeaten, 0

; 2594 : 
; 2595 : 	length = FIL_ReadFile(va(pandf, srb2home, gamedatafilename), &savebuffer);

  0006e	68 00 00 00 00	 push	 OFFSET _savebuffer
  00073	68 00 00 00 00	 push	 OFFSET _gamedatafilename
  00078	68 00 00 00 00	 push	 OFFSET _srb2home
  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pandf
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _va
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _FIL_ReadFile
  00091	83 c4 08	 add	 esp, 8
  00094	89 45 fc	 mov	 DWORD PTR _length$[ebp], eax

; 2596 : 	if (!length)

  00097	83 7d fc 00	 cmp	 DWORD PTR _length$[ebp], 0
  0009b	75 0f		 jne	 SHORT $LN20@G_LoadGame

; 2597 : 	{
; 2598 : 		gamedataloaded = 1; // Aw, no game data. Their loss!

  0009d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _gamedataloaded, 1

; 2599 : 		return;

  000a7	e9 9c 02 00 00	 jmp	 $LN1@G_LoadGame
$LN20@G_LoadGame:

; 2600 : 	}
; 2601 : 
; 2602 : 	save_p = savebuffer;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  000b1	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2603 : 
; 2604 : 	totalplaytime = READUINT32(save_p);

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bd	89 0d 00 00 00
	00		 mov	 DWORD PTR _totalplaytime, ecx
  000c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  000c9	83 c2 04	 add	 edx, 4
  000cc	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2605 : 	grade = (READUINT32(save_p)-25)/2;

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d9	83 e9 19	 sub	 ecx, 25			; 00000019H
  000dc	d1 e9		 shr	 ecx, 1
  000de	89 0d 00 00 00
	00		 mov	 DWORD PTR _grade, ecx
  000e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  000ea	83 c2 04	 add	 edx, 4
  000ed	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2606 : 
; 2607 : 	for (i = 0; i < NUMMAPS; i++)

  000f3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000fa	eb 09		 jmp	 SHORT $LN7@G_LoadGame
$LN5@G_LoadGame:
  000fc	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ff	83 c0 01	 add	 eax, 1
  00102	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@G_LoadGame:
  00105	81 7d f8 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  0010c	7d 20		 jge	 SHORT $LN6@G_LoadGame

; 2608 : 		mapvisited[i] = READUINT8(save_p);

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  00117	8a 11		 mov	 dl, BYTE PTR [ecx]
  00119	88 90 00 00 00
	00		 mov	 BYTE PTR _mapvisited[eax], dl
  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00124	83 c0 01	 add	 eax, 1
  00127	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  0012c	eb ce		 jmp	 SHORT $LN5@G_LoadGame
$LN6@G_LoadGame:

; 2609 : 
; 2610 : 	for (i = 0; i < MAXEMBLEMS; i++)

  0012e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00135	eb 09		 jmp	 SHORT $LN10@G_LoadGame
$LN8@G_LoadGame:
  00137	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0013a	83 c0 01	 add	 eax, 1
  0013d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@G_LoadGame:
  00140	81 7d f8 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00147	7d 32		 jge	 SHORT $LN9@G_LoadGame

; 2611 : 		emblemlocations[i].collected = (UINT8)(READUINT8(save_p)-125-(i/4));

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0014e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00151	83 e9 7d	 sub	 ecx, 125		; 0000007dH
  00154	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00157	99		 cdq
  00158	83 e2 03	 and	 edx, 3
  0015b	03 c2		 add	 eax, edx
  0015d	c1 f8 02	 sar	 eax, 2
  00160	2b c8		 sub	 ecx, eax
  00162	6b 55 f8 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  00166	88 8a 0a 00 00
	00		 mov	 BYTE PTR _emblemlocations[edx+10], cl
  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00171	83 c0 01	 add	 eax, 1
  00174	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00179	eb bc		 jmp	 SHORT $LN8@G_LoadGame
$LN9@G_LoadGame:

; 2612 : 
; 2613 : 	modded = READUINT8(save_p);

  0017b	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00180	8a 08		 mov	 cl, BYTE PTR [eax]
  00182	88 4d f7	 mov	 BYTE PTR _modded$[ebp], cl
  00185	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  0018b	83 c2 01	 add	 edx, 1
  0018e	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2614 : 	timesbeaten = (READUINT32(save_p)/4)+2;

  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00199	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019b	c1 e9 02	 shr	 ecx, 2
  0019e	83 c1 02	 add	 ecx, 2
  001a1	89 0d 00 00 00
	00		 mov	 DWORD PTR _timesbeaten, ecx
  001a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _save_p
  001ad	83 c2 04	 add	 edx, 4
  001b0	89 15 00 00 00
	00		 mov	 DWORD PTR _save_p, edx

; 2615 : 
; 2616 : 	// Initialize the table
; 2617 : 	memset(timedata, 0, sizeof (timeattack_t) * NUMMAPS);

  001b6	68 2c 10 00 00	 push	 4140			; 0000102cH
  001bb	6a 00		 push	 0
  001bd	68 00 00 00 00	 push	 OFFSET _timedata
  001c2	e8 00 00 00 00	 call	 _memset
  001c7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2618 : 
; 2619 : 	for (i = 0; i < NUMMAPS; i++)

  001ca	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001d1	eb 09		 jmp	 SHORT $LN13@G_LoadGame
$LN11@G_LoadGame:
  001d3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001d6	83 c0 01	 add	 eax, 1
  001d9	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN13@G_LoadGame:
  001dc	81 7d f8 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  001e3	7d 21		 jge	 SHORT $LN12@G_LoadGame

; 2620 : 		timedata[i].time = READUINT32(save_p);

  001e5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  001ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f0	89 14 85 00 00
	00 00		 mov	 DWORD PTR _timedata[eax*4], edx
  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001fc	83 c0 04	 add	 eax, 4
  001ff	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00204	eb cd		 jmp	 SHORT $LN11@G_LoadGame
$LN12@G_LoadGame:

; 2621 : 
; 2622 : 	// Aha! Someone's been screwing with the save file!
; 2623 : 	if ((modded && !savemoddata))

  00206	0f b6 45 f7	 movzx	 eax, BYTE PTR _modded$[ebp]
  0020a	85 c0		 test	 eax, eax
  0020c	74 15		 je	 SHORT $LN21@G_LoadGame
  0020e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00215	75 0c		 jne	 SHORT $LN21@G_LoadGame

; 2624 : 		corrupt = true;

  00217	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _corrupt$[ebp], 1
  0021e	e9 c3 00 00 00	 jmp	 $LN18@G_LoadGame
$LN21@G_LoadGame:

; 2625 : 	else if (modded != true && modded != false)

  00223	0f b6 45 f7	 movzx	 eax, BYTE PTR _modded$[ebp]
  00227	83 f8 01	 cmp	 eax, 1
  0022a	74 14		 je	 SHORT $LN23@G_LoadGame
  0022c	0f b6 45 f7	 movzx	 eax, BYTE PTR _modded$[ebp]
  00230	85 c0		 test	 eax, eax
  00232	74 0c		 je	 SHORT $LN23@G_LoadGame

; 2626 : 		corrupt = true;

  00234	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _corrupt$[ebp], 1
  0023b	e9 a6 00 00 00	 jmp	 $LN18@G_LoadGame
$LN23@G_LoadGame:

; 2627 : 	else if (grade > 4095)

  00240	81 3d 00 00 00
	00 ff 0f 00 00	 cmp	 DWORD PTR _grade, 4095	; 00000fffH
  0024a	76 0c		 jbe	 SHORT $LN25@G_LoadGame

; 2628 : 		corrupt = true;

  0024c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _corrupt$[ebp], 1
  00253	e9 8e 00 00 00	 jmp	 $LN18@G_LoadGame
$LN25@G_LoadGame:

; 2629 : 	else
; 2630 : 	{
; 2631 : 		for (i = 0; i < MAXEMBLEMS; i++)

  00258	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0025f	eb 09		 jmp	 SHORT $LN16@G_LoadGame
$LN14@G_LoadGame:
  00261	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00264	83 c0 01	 add	 eax, 1
  00267	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN16@G_LoadGame:
  0026a	81 7d f8 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00271	7d 2a		 jge	 SHORT $LN15@G_LoadGame

; 2632 : 		{
; 2633 : 			if (emblemlocations[i].collected != true
; 2634 : 				&& emblemlocations[i].collected != false)

  00273	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00277	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  0027e	83 f9 01	 cmp	 ecx, 1
  00281	74 18		 je	 SHORT $LN27@G_LoadGame
  00283	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00287	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  0028e	85 c9		 test	 ecx, ecx
  00290	74 09		 je	 SHORT $LN27@G_LoadGame

; 2635 : 			{
; 2636 : 				corrupt = true;

  00292	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _corrupt$[ebp], 1

; 2637 : 				break;

  00299	eb 02		 jmp	 SHORT $LN15@G_LoadGame
$LN27@G_LoadGame:

; 2638 : 			}
; 2639 : 		}

  0029b	eb c4		 jmp	 SHORT $LN14@G_LoadGame
$LN15@G_LoadGame:

; 2640 : 
; 2641 : 		if (!corrupt)

  0029d	83 7d f0 00	 cmp	 DWORD PTR _corrupt$[ebp], 0
  002a1	75 43		 jne	 SHORT $LN18@G_LoadGame

; 2642 : 		{
; 2643 : 			for (i = 0; i < NUMMAPS; i++)

  002a3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002aa	eb 09		 jmp	 SHORT $LN19@G_LoadGame
$LN17@G_LoadGame:
  002ac	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002af	83 c0 01	 add	 eax, 1
  002b2	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN19@G_LoadGame:
  002b5	81 7d f8 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  002bc	7d 28		 jge	 SHORT $LN18@G_LoadGame

; 2644 : 			{
; 2645 : 				if (mapvisited[i] != true
; 2646 : 					&& mapvisited[i] != false)

  002be	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002c1	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  002c8	83 f9 01	 cmp	 ecx, 1
  002cb	74 17		 je	 SHORT $LN29@G_LoadGame
  002cd	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002d0	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mapvisited[eax]
  002d7	85 c9		 test	 ecx, ecx
  002d9	74 09		 je	 SHORT $LN29@G_LoadGame

; 2647 : 				{
; 2648 : 					corrupt = true;

  002db	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _corrupt$[ebp], 1

; 2649 : 					break;

  002e2	eb 02		 jmp	 SHORT $LN18@G_LoadGame
$LN29@G_LoadGame:

; 2650 : 				}
; 2651 : 			}

  002e4	eb c6		 jmp	 SHORT $LN17@G_LoadGame
$LN18@G_LoadGame:

; 2652 : 		}
; 2653 : 	}
; 2654 : 
; 2655 : 	if (corrupt)

  002e6	83 7d f0 00	 cmp	 DWORD PTR _corrupt$[ebp], 0
  002ea	74 3a		 je	 SHORT $LN30@G_LoadGame

; 2656 : 	{
; 2657 : 		const char *gdfolder = "the SRB2 folder";

  002ec	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _gdfolder$1[ebp], OFFSET ??_C@_0BA@IMDKPFJA@the?5SRB2?5folder@

; 2658 : 		if (strcmp(srb2home,"."))

  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4@
  002f8	68 00 00 00 00	 push	 OFFSET _srb2home
  002fd	e8 00 00 00 00	 call	 _strcmp
  00302	83 c4 08	 add	 esp, 8
  00305	85 c0		 test	 eax, eax
  00307	74 07		 je	 SHORT $LN31@G_LoadGame

; 2659 : 			gdfolder = srb2home;

  00309	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _gdfolder$1[ebp], OFFSET _srb2home
$LN31@G_LoadGame:

; 2660 : 		I_Error("Corrupt game data file.\nDelete %s(maybe in %s)\nand try again.", gamedatafilename, gdfolder);

  00310	8b 45 ec	 mov	 eax, DWORD PTR _gdfolder$1[ebp]
  00313	50		 push	 eax
  00314	68 00 00 00 00	 push	 OFFSET _gamedatafilename
  00319	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@KKKGCLJM@Corrupt?5game?5data?5file?4?6Delete?5@
  0031e	e8 00 00 00 00	 call	 _I_Error
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN30@G_LoadGame:

; 2661 : 	}
; 2662 : 
; 2663 : 	// done
; 2664 : 	Z_Free(savebuffer);

  00326	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 _Z_Free
  00331	83 c4 04	 add	 esp, 4

; 2665 : 	save_p = NULL;

  00334	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _save_p, 0

; 2666 : 	gamedataloaded = 1;

  0033e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _gamedataloaded, 1
$LN1@G_LoadGame:

; 2667 : }

  00348	5f		 pop	 edi
  00349	5e		 pop	 esi
  0034a	5b		 pop	 ebx
  0034b	8b e5		 mov	 esp, ebp
  0034d	5d		 pop	 ebp
  0034e	c3		 ret	 0
_G_LoadGameData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_GetExitGameFlag
_TEXT	SEGMENT
_G_GetExitGameFlag PROC					; COMDAT

; 3377 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3378 : 	return exitgame;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _exitgame

; 3379 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_G_GetExitGameFlag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_ClearExitGameFlag
_TEXT	SEGMENT
_G_ClearExitGameFlag PROC				; COMDAT

; 3372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3373 : 	exitgame = false;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _exitgame, 0

; 3374 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_G_ClearExitGameFlag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_SetExitGameFlag
_TEXT	SEGMENT
_G_SetExitGameFlag PROC					; COMDAT

; 3367 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3368 : 	exitgame = true;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _exitgame, 1

; 3369 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_G_SetExitGameFlag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_AddPlayer
_TEXT	SEGMENT
_p$ = -4						; size = 4
_playernum$ = 8						; size = 4
_G_AddPlayer PROC					; COMDAT

; 2249 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2250 : 	player_t *p = &players[playernum];

  00009	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00010	05 00 00 00 00	 add	 eax, OFFSET _players
  00015	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 2251 : 
; 2252 : 	p->playerstate = PST_REBORN;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0001b	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2

; 2253 : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_G_AddPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_Responder
_TEXT	SEGMENT
tv219 = -68						; size = 4
_ev$ = 8						; size = 4
_G_Responder PROC					; COMDAT

; 1461 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1462 : 	// allow spy mode changes even during the demo
; 1463 : 	if (gamestate == GS_LEVEL && ev->type == ev_keydown && ev->data1 == KEY_F12)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00010	0f 85 21 02 00
	00		 jne	 $LN8@G_Responde
  00016	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	0f 85 15 02 00
	00		 jne	 $LN8@G_Responde
  00022	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00025	81 78 04 d8 00
	00 00		 cmp	 DWORD PTR [eax+4], 216	; 000000d8H
  0002c	0f 85 05 02 00
	00		 jne	 $LN8@G_Responde

; 1464 : 	{
; 1465 : 		if (!cv_debug && gametype != GT_COOP && gametype != GT_RACE && gametype != GT_CTF && gametype != GT_MATCH && gametype != GT_TAG)

  00032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00039	75 4a		 jne	 SHORT $LN7@G_Responde
  0003b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00042	85 c0		 test	 eax, eax
  00044	74 3f		 je	 SHORT $LN7@G_Responde
  00046	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0004d	83 f8 02	 cmp	 eax, 2
  00050	74 33		 je	 SHORT $LN7@G_Responde
  00052	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00059	83 f8 04	 cmp	 eax, 4
  0005c	74 27		 je	 SHORT $LN7@G_Responde
  0005e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00065	83 f8 01	 cmp	 eax, 1
  00068	74 1b		 je	 SHORT $LN7@G_Responde
  0006a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00071	83 f8 03	 cmp	 eax, 3
  00074	74 0f		 je	 SHORT $LN7@G_Responde

; 1466 : 		{
; 1467 : 			displayplayer = consoleplayer;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  0007b	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax

; 1468 : 		}

  00080	e9 b2 01 00 00	 jmp	 $LN8@G_Responde
$LN7@G_Responde:

; 1469 : 		else
; 1470 : 		{
; 1471 : 			// spy mode
; 1472 : 			while (true)

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	85 c0		 test	 eax, eax
  0008c	0f 84 72 01 00
	00		 je	 $LN3@G_Responde

; 1473 : 			{
; 1474 : 				displayplayer++;

  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  00097	83 c0 01	 add	 eax, 1
  0009a	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax

; 1475 : 				if (displayplayer == MAXPLAYERS)

  0009f	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR _displayplayer, 32 ; 00000020H
  000a6	75 0a		 jne	 SHORT $LN9@G_Responde

; 1476 : 					displayplayer = 0;

  000a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _displayplayer, 0
$LN9@G_Responde:

; 1477 : 
; 1478 : 				if (displayplayer != consoleplayer && (!playeringame[displayplayer]

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  000b7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  000bd	74 27		 je	 SHORT $LN10@G_Responde
  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  000c4	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000cc	74 16		 je	 SHORT $LN11@G_Responde
  000ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000d5	74 0f		 je	 SHORT $LN10@G_Responde
  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  000dc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  000e2	75 02		 jne	 SHORT $LN10@G_Responde
$LN11@G_Responde:

; 1479 : 					|| (splitscreen && displayplayer == secondarydisplayplayer)))
; 1480 : 					continue;

  000e4	eb 9f		 jmp	 SHORT $LN7@G_Responde
$LN10@G_Responde:

; 1481 : 
; 1482 : 				if ((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value)) && players[consoleplayer].ctfteam
; 1483 : 					&& players[displayplayer].ctfteam != players[consoleplayer].ctfteam)

  000e6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000ed	83 f8 04	 cmp	 eax, 4
  000f0	74 15		 je	 SHORT $LN13@G_Responde
  000f2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000f9	83 f8 01	 cmp	 eax, 1
  000fc	75 43		 jne	 SHORT $LN12@G_Responde
  000fe	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00105	74 3a		 je	 SHORT $LN12@G_Responde
$LN13@G_Responde:
  00107	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00111	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR _players[eax+352], 0
  00118	74 27		 je	 SHORT $LN12@G_Responde
  0011a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00124	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  0012e	8b 90 60 01 00
	00		 mov	 edx, DWORD PTR _players[eax+352]
  00134	3b 91 60 01 00
	00		 cmp	 edx, DWORD PTR _players[ecx+352]
  0013a	74 05		 je	 SHORT $LN12@G_Responde

; 1484 : 					continue;

  0013c	e9 44 ff ff ff	 jmp	 $LN7@G_Responde
$LN12@G_Responde:

; 1485 : 
; 1486 : 				if (gametype == GT_TAG && (players[consoleplayer].pflags & PF_TAGIT)
; 1487 : 					&& !(players[displayplayer].pflags & PF_TAGIT) && (players[consoleplayer].pflags & PF_TAGIT))

  00141	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00148	83 f8 03	 cmp	 eax, 3
  0014b	75 4d		 jne	 SHORT $LN14@G_Responde
  0014d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00157	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0015d	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  00163	74 35		 je	 SHORT $LN14@G_Responde
  00165	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0016f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00175	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0017b	75 1d		 jne	 SHORT $LN14@G_Responde
  0017d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00187	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0018d	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  00193	74 05		 je	 SHORT $LN14@G_Responde

; 1488 : 					continue;

  00195	e9 eb fe ff ff	 jmp	 $LN7@G_Responde
$LN14@G_Responde:

; 1489 : 
; 1490 : 				if ((gametype == GT_MATCH && !cv_matchtype.value) && !(displayplayer == consoleplayer

  0019a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001a1	83 f8 01	 cmp	 eax, 1
  001a4	75 30		 jne	 SHORT $LN15@G_Responde
  001a6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  001ad	75 27		 jne	 SHORT $LN15@G_Responde
  001af	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  001b4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  001ba	74 1a		 je	 SHORT $LN15@G_Responde
  001bc	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  001c6	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  001cd	85 c9		 test	 ecx, ecx
  001cf	75 05		 jne	 SHORT $LN15@G_Responde

; 1491 : 					|| players[consoleplayer].spectator))
; 1492 : 					continue;

  001d1	e9 af fe ff ff	 jmp	 $LN7@G_Responde
$LN15@G_Responde:

; 1493 : 
; 1494 : 				if (players[displayplayer].spectator && displayplayer != consoleplayer)

  001d6	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  001e0	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  001e7	85 c9		 test	 ecx, ecx
  001e9	74 12		 je	 SHORT $LN16@G_Responde
  001eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  001f0	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  001f6	74 05		 je	 SHORT $LN16@G_Responde

; 1495 : 					continue;

  001f8	e9 88 fe ff ff	 jmp	 $LN7@G_Responde
$LN16@G_Responde:

; 1496 : 
; 1497 : 				break;

  001fd	eb 05		 jmp	 SHORT $LN3@G_Responde

; 1498 : 			}

  001ff	e9 81 fe ff ff	 jmp	 $LN7@G_Responde
$LN3@G_Responde:

; 1499 : 
; 1500 : 			// change statusbar also if playing back demo
; 1501 : 			if (singledemo)

  00204	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _singledemo, 0
  0020b	74 06		 je	 SHORT $LN17@G_Responde

; 1502 : 				ST_changeDemoView();

  0020d	e8 00 00 00 00	 call	 _ST_changeDemoView
  00212	90		 npad	 1
$LN17@G_Responde:

; 1503 : 
; 1504 : 			// tell who's the view
; 1505 : 			CONS_Printf("Viewpoint: %s\n", player_names[displayplayer]);

  00213	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _displayplayer, 22
  0021a	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0021f	50		 push	 eax
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EJBGKLIH@Viewpoint?3?5?$CFs?6@
  00225	e8 00 00 00 00	 call	 _CONS_Printf
  0022a	83 c4 08	 add	 esp, 8

; 1506 : 
; 1507 : 			return true;

  0022d	b8 01 00 00 00	 mov	 eax, 1
  00232	e9 f9 02 00 00	 jmp	 $LN1@G_Responde
$LN8@G_Responde:

; 1508 : 		}
; 1509 : 	}
; 1510 : 
; 1511 : 	// any other key pops up menu if in demos
; 1512 : 	if (gameaction == ga_nothing && !singledemo &&

  00237	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gameaction, 0
  0023e	75 68		 jne	 SHORT $LN18@G_Responde
  00240	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _singledemo, 0
  00247	75 5f		 jne	 SHORT $LN18@G_Responde
  00249	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00250	75 12		 jne	 SHORT $LN19@G_Responde
  00252	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _gamestate, 3
  00259	74 09		 je	 SHORT $LN19@G_Responde
  0025b	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR _gamestate, 9
  00262	75 44		 jne	 SHORT $LN18@G_Responde
$LN19@G_Responde:

; 1513 : 		(demoplayback || gamestate == GS_DEMOSCREEN || gamestate == GS_TITLESCREEN))
; 1514 : 	{
; 1515 : 		if (ev->type == ev_keydown && ev->data1 != 301)

  00264	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00267	83 38 00	 cmp	 DWORD PTR [eax], 0
  0026a	75 35		 jne	 SHORT $LN20@G_Responde
  0026c	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0026f	81 78 04 2d 01
	00 00		 cmp	 DWORD PTR [eax+4], 301	; 0000012dH
  00276	74 29		 je	 SHORT $LN20@G_Responde

; 1516 : 		{
; 1517 : 			if (timeattacking)

  00278	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  0027f	74 10		 je	 SHORT $LN21@G_Responde

; 1518 : 			{
; 1519 : 				G_CheckDemoStatus();

  00281	e8 00 00 00 00	 call	 _G_CheckDemoStatus
  00286	90		 npad	 1

; 1520 : 				timeattacking = true;

  00287	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timeattacking, 1
$LN21@G_Responde:

; 1521 : 			}
; 1522 : 			M_StartControlPanel();

  00291	e8 00 00 00 00	 call	 _M_StartControlPanel
  00296	90		 npad	 1

; 1523 : 			return true;

  00297	b8 01 00 00 00	 mov	 eax, 1
  0029c	e9 8f 02 00 00	 jmp	 $LN1@G_Responde
$LN20@G_Responde:

; 1524 : 		}
; 1525 : 		return false;

  002a1	33 c0		 xor	 eax, eax
  002a3	e9 88 02 00 00	 jmp	 $LN1@G_Responde
$LN18@G_Responde:

; 1526 : 	}
; 1527 : 
; 1528 : 	if (gamestate == GS_LEVEL)

  002a8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  002af	75 39		 jne	 SHORT $LN22@G_Responde

; 1529 : 	{
; 1530 : 		if (HU_Responder(ev))

  002b1	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 _HU_Responder
  002ba	83 c4 04	 add	 esp, 4
  002bd	85 c0		 test	 eax, eax
  002bf	74 0a		 je	 SHORT $LN24@G_Responde

; 1531 : 			return true; // chat ate the event

  002c1	b8 01 00 00 00	 mov	 eax, 1
  002c6	e9 65 02 00 00	 jmp	 $LN1@G_Responde
$LN24@G_Responde:

; 1532 : 		if (AM_Responder(ev))

  002cb	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 _AM_Responder
  002d4	83 c4 04	 add	 esp, 4
  002d7	85 c0		 test	 eax, eax
  002d9	74 0a		 je	 SHORT $LN25@G_Responde

; 1533 : 			return true; // automap ate it

  002db	b8 01 00 00 00	 mov	 eax, 1
  002e0	e9 4b 02 00 00	 jmp	 $LN1@G_Responde
$LN25@G_Responde:

; 1534 : 		// map the event (key/mouse/joy) to a gamecontrol
; 1535 : 	}

  002e5	e9 0e 01 00 00	 jmp	 $LN42@G_Responde
$LN22@G_Responde:

; 1536 : 	// Intro
; 1537 : 	else if (gamestate == GS_INTRO || gamestate == GS_INTRO2)

  002ea	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _gamestate, 5
  002f1	74 09		 je	 SHORT $LN28@G_Responde
  002f3	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _gamestate, 6
  002fa	75 25		 jne	 SHORT $LN26@G_Responde
$LN28@G_Responde:

; 1538 : 	{
; 1539 : 		if (F_IntroResponder(ev))

  002fc	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  002ff	50		 push	 eax
  00300	e8 00 00 00 00	 call	 _F_IntroResponder
  00305	83 c4 04	 add	 esp, 4
  00308	85 c0		 test	 eax, eax
  0030a	74 10		 je	 SHORT $LN29@G_Responde

; 1540 : 		{
; 1541 : 			D_StartTitle();

  0030c	e8 00 00 00 00	 call	 _D_StartTitle
  00311	90		 npad	 1

; 1542 : 			return true;

  00312	b8 01 00 00 00	 mov	 eax, 1
  00317	e9 14 02 00 00	 jmp	 $LN1@G_Responde
$LN29@G_Responde:

; 1543 : 		}
; 1544 : 	}

  0031c	e9 d7 00 00 00	 jmp	 $LN42@G_Responde
$LN26@G_Responde:

; 1545 : 	else if (gamestate == GS_CUTSCENE)

  00321	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _gamestate, 7
  00328	75 3f		 jne	 SHORT $LN30@G_Responde

; 1546 : 	{
; 1547 : 		if (HU_Responder(ev))

  0032a	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 _HU_Responder
  00333	83 c4 04	 add	 esp, 4
  00336	85 c0		 test	 eax, eax
  00338	74 0a		 je	 SHORT $LN32@G_Responde

; 1548 : 			return true; // chat ate the event

  0033a	b8 01 00 00 00	 mov	 eax, 1
  0033f	e9 ec 01 00 00	 jmp	 $LN1@G_Responde
$LN32@G_Responde:

; 1549 : 
; 1550 : 		if (F_CutsceneResponder(ev))

  00344	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00347	50		 push	 eax
  00348	e8 00 00 00 00	 call	 _F_CutsceneResponder
  0034d	83 c4 04	 add	 esp, 4
  00350	85 c0		 test	 eax, eax
  00352	74 10		 je	 SHORT $LN33@G_Responde

; 1551 : 		{
; 1552 : 			D_StartTitle();

  00354	e8 00 00 00 00	 call	 _D_StartTitle
  00359	90		 npad	 1

; 1553 : 			return true;

  0035a	b8 01 00 00 00	 mov	 eax, 1
  0035f	e9 cc 01 00 00	 jmp	 $LN1@G_Responde
$LN33@G_Responde:

; 1554 : 		}
; 1555 : 	}

  00364	e9 8f 00 00 00	 jmp	 $LN42@G_Responde
$LN30@G_Responde:

; 1556 : 
; 1557 : 	else if (gamestate == GS_CREDITS)

  00369	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR _gamestate, 10 ; 0000000aH
  00370	75 3c		 jne	 SHORT $LN34@G_Responde

; 1558 : 	{
; 1559 : 		if (HU_Responder(ev))

  00372	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00375	50		 push	 eax
  00376	e8 00 00 00 00	 call	 _HU_Responder
  0037b	83 c4 04	 add	 esp, 4
  0037e	85 c0		 test	 eax, eax
  00380	74 0a		 je	 SHORT $LN36@G_Responde

; 1560 : 			return true; // chat ate the event

  00382	b8 01 00 00 00	 mov	 eax, 1
  00387	e9 a4 01 00 00	 jmp	 $LN1@G_Responde
$LN36@G_Responde:

; 1561 : 
; 1562 : 		if (F_CreditResponder(ev))

  0038c	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 _F_CreditResponder
  00395	83 c4 04	 add	 esp, 4
  00398	85 c0		 test	 eax, eax
  0039a	74 10		 je	 SHORT $LN37@G_Responde

; 1563 : 		{
; 1564 : 			F_StartGameEvaluation();

  0039c	e8 00 00 00 00	 call	 _F_StartGameEvaluation
  003a1	90		 npad	 1

; 1565 : 			return true;

  003a2	b8 01 00 00 00	 mov	 eax, 1
  003a7	e9 84 01 00 00	 jmp	 $LN1@G_Responde
$LN37@G_Responde:

; 1566 : 		}
; 1567 : 	}

  003ac	eb 4a		 jmp	 SHORT $LN42@G_Responde
$LN34@G_Responde:

; 1568 : 
; 1569 : 	// Demo End
; 1570 : 	else if (gamestate == GS_GAMEEND || gamestate == GS_EVALUATION || gamestate == GS_CREDITS)

  003ae	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR _gamestate, 8
  003b5	74 12		 je	 SHORT $LN40@G_Responde
  003b7	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR _gamestate, 4
  003be	74 09		 je	 SHORT $LN40@G_Responde
  003c0	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR _gamestate, 10 ; 0000000aH
  003c7	75 0c		 jne	 SHORT $LN38@G_Responde
$LN40@G_Responde:

; 1571 : 		return true;

  003c9	b8 01 00 00 00	 mov	 eax, 1
  003ce	e9 5d 01 00 00	 jmp	 $LN1@G_Responde
  003d3	eb 23		 jmp	 SHORT $LN42@G_Responde
$LN38@G_Responde:

; 1572 : 
; 1573 : 	else if (gamestate == GS_INTERMISSION)

  003d5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  003dc	75 1a		 jne	 SHORT $LN42@G_Responde

; 1574 : 		if (HU_Responder(ev))

  003de	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _HU_Responder
  003e7	83 c4 04	 add	 esp, 4
  003ea	85 c0		 test	 eax, eax
  003ec	74 0a		 je	 SHORT $LN42@G_Responde

; 1575 : 			return true; // chat ate the event

  003ee	b8 01 00 00 00	 mov	 eax, 1
  003f3	e9 38 01 00 00	 jmp	 $LN1@G_Responde
$LN42@G_Responde:

; 1576 : 
; 1577 : 	// update keys current state
; 1578 : 	G_MapEventsToControls(ev);

  003f8	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  003fb	50		 push	 eax
  003fc	e8 00 00 00 00	 call	 _G_MapEventsToControls
  00401	83 c4 04	 add	 esp, 4

; 1579 : 
; 1580 : 	switch (ev->type)

  00404	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00407	8b 08		 mov	 ecx, DWORD PTR [eax]
  00409	89 4d bc	 mov	 DWORD PTR tv219[ebp], ecx
  0040c	83 7d bc 06	 cmp	 DWORD PTR tv219[ebp], 6
  00410	0f 87 18 01 00
	00		 ja	 $LN56@G_Responde
  00416	8b 55 bc	 mov	 edx, DWORD PTR tv219[ebp]
  00419	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN62@G_Responde[edx*4]
$LN43@G_Responde:

; 1581 : 	{
; 1582 : 		case ev_keydown:
; 1583 : 			if (ev->data1 == gamecontrol[gc_pause][0]
; 1584 : 				|| ev->data1 == gamecontrol[gc_pause][1])

  00420	b8 08 00 00 00	 mov	 eax, 8
  00425	6b c8 22	 imul	 ecx, eax, 34
  00428	ba 04 00 00 00	 mov	 edx, 4
  0042d	6b c2 00	 imul	 eax, edx, 0
  00430	8b 55 08	 mov	 edx, DWORD PTR _ev$[ebp]
  00433	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00436	3b 94 01 00 00
	00 00		 cmp	 edx, DWORD PTR _gamecontrol[ecx+eax]
  0043d	74 23		 je	 SHORT $LN45@G_Responde
  0043f	b8 08 00 00 00	 mov	 eax, 8
  00444	6b c8 22	 imul	 ecx, eax, 34
  00447	ba 04 00 00 00	 mov	 edx, 4
  0044c	c1 e2 00	 shl	 edx, 0
  0044f	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00452	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00455	3b 84 11 00 00
	00 00		 cmp	 eax, DWORD PTR _gamecontrol[ecx+edx]
  0045c	0f 85 ac 00 00
	00		 jne	 $LN47@G_Responde
$LN45@G_Responde:

; 1585 : 			{
; 1586 : 				if (!pausedelay)

  00462	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _pausedelay, 0
  00469	0f 85 95 00 00
	00		 jne	 $LN46@G_Responde

; 1587 : 				{
; 1588 : 					// don't let busy scripts prevent pausing
; 1589 : 					pausedelay = TICRATE/7;

  0046f	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR _pausedelay, 5

; 1590 : 
; 1591 : 					if (cv_pause.value == 1 || server || (adminplayer == consoleplayer))

  00479	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_pause+20, 1
  00480	74 16		 je	 SHORT $LN50@G_Responde
  00482	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00489	75 0d		 jne	 SHORT $LN50@G_Responde
  0048b	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00490	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00496	75 44		 jne	 SHORT $LN48@G_Responde
$LN50@G_Responde:

; 1592 : 					{
; 1593 : 						if (!(gamestate == GS_LEVEL || gamestate == GS_INTERMISSION))

  00498	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  0049f	74 2c		 je	 SHORT $LN51@G_Responde
  004a1	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  004a8	74 23		 je	 SHORT $LN51@G_Responde

; 1594 : 						{
; 1595 : 							CONS_Printf("%s", text[PAUSEINFO]);

  004aa	b8 04 00 00 00	 mov	 eax, 4
  004af	c1 e0 08	 shl	 eax, 8
  004b2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  004b8	51		 push	 ecx
  004b9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  004be	e8 00 00 00 00	 call	 _CONS_Printf
  004c3	83 c4 08	 add	 esp, 8

; 1596 : 							return true;

  004c6	b8 01 00 00 00	 mov	 eax, 1
  004cb	eb 63		 jmp	 SHORT $LN1@G_Responde
$LN51@G_Responde:

; 1597 : 						}
; 1598 : 
; 1599 : 						COM_ImmedExecute("pause");

  004cd	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  004d2	e8 00 00 00 00	 call	 _COM_ImmedExecute
  004d7	83 c4 04	 add	 esp, 4

; 1600 : 					}

  004da	eb 1f		 jmp	 SHORT $LN49@G_Responde
$LN48@G_Responde:

; 1601 : 					else
; 1602 : 						CONS_Printf("%s", text[SERVERPAUSE]);

  004dc	b8 04 00 00 00	 mov	 eax, 4
  004e1	69 c8 ff 00 00
	00		 imul	 ecx, eax, 255
  004e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  004ed	52		 push	 edx
  004ee	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  004f3	e8 00 00 00 00	 call	 _CONS_Printf
  004f8	83 c4 08	 add	 esp, 8
$LN49@G_Responde:

; 1603 : 					return true;

  004fb	b8 01 00 00 00	 mov	 eax, 1
  00500	eb 2e		 jmp	 SHORT $LN1@G_Responde

; 1604 : 				}

  00502	eb 0a		 jmp	 SHORT $LN47@G_Responde
$LN46@G_Responde:

; 1605 : 				else
; 1606 : 					pausedelay = TICRATE/7;

  00504	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR _pausedelay, 5
$LN47@G_Responde:

; 1607 : 			}
; 1608 : 			return true;

  0050e	b8 01 00 00 00	 mov	 eax, 1
  00513	eb 1b		 jmp	 SHORT $LN1@G_Responde
$LN52@G_Responde:

; 1609 : 
; 1610 : 		case ev_keyup:
; 1611 : 			return false; // always let key up events filter down

  00515	33 c0		 xor	 eax, eax
  00517	eb 17		 jmp	 SHORT $LN1@G_Responde
$LN53@G_Responde:

; 1612 : 
; 1613 : 		case ev_mouse:
; 1614 : 			return true; // eat events

  00519	b8 01 00 00 00	 mov	 eax, 1
  0051e	eb 10		 jmp	 SHORT $LN1@G_Responde
$LN54@G_Responde:

; 1615 : 
; 1616 : 		case ev_joystick:
; 1617 : 			return true; // eat events

  00520	b8 01 00 00 00	 mov	 eax, 1
  00525	eb 09		 jmp	 SHORT $LN1@G_Responde
$LN55@G_Responde:

; 1618 : 
; 1619 : 		case ev_joystick2:
; 1620 : 			return true; // eat events

  00527	b8 01 00 00 00	 mov	 eax, 1
  0052c	eb 02		 jmp	 SHORT $LN1@G_Responde
$LN56@G_Responde:

; 1621 : 
; 1622 : 
; 1623 : 		default:
; 1624 : 			break;
; 1625 : 	}
; 1626 : 
; 1627 : 	return false;

  0052e	33 c0		 xor	 eax, eax
$LN1@G_Responde:

; 1628 : }

  00530	5f		 pop	 edi
  00531	5e		 pop	 esi
  00532	5b		 pop	 ebx
  00533	8b e5		 mov	 esp, ebp
  00535	5d		 pop	 ebp
  00536	c3		 ret	 0
  00537	90		 npad	 1
$LN62@G_Responde:
  00538	00 00 00 00	 DD	 $LN43@G_Responde
  0053c	00 00 00 00	 DD	 $LN52@G_Responde
  00540	00 00 00 00	 DD	 $LN56@G_Responde
  00544	00 00 00 00	 DD	 $LN53@G_Responde
  00548	00 00 00 00	 DD	 $LN54@G_Responde
  0054c	00 00 00 00	 DD	 $LN56@G_Responde
  00550	00 00 00 00	 DD	 $LN55@G_Responde
_G_Responder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_Ticker
_TEXT	SEGMENT
tv76 = -80						; size = 4
tv146 = -80						; size = 4
_cmd$ = -12						; size = 4
_buf$ = -8						; size = 4
_i$ = -4						; size = 4
_G_Ticker PROC						; COMDAT

; 1635 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1636 : 	UINT32 i;
; 1637 : 	INT32 buf;
; 1638 : 	ticcmd_t *cmd;
; 1639 : 
; 1640 : 	P_MapStart();

  00009	e8 00 00 00 00	 call	 _P_MapStart
  0000e	90		 npad	 1

; 1641 : 	// do player reborns if needed
; 1642 : 	if (gamestate == GS_LEVEL)

  0000f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00016	75 43		 jne	 SHORT $LN3@G_Ticker

; 1643 : 	{
; 1644 : 		for (i = 0; i < MAXPLAYERS; i++)

  00018	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001f	eb 09		 jmp	 SHORT $LN4@G_Ticker
$LN2@G_Ticker:
  00021	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_Ticker:
  0002a	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0002e	73 2b		 jae	 SHORT $LN3@G_Ticker

; 1645 : 		{
; 1646 : 			if (playeringame[i])

  00030	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00033	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0003b	74 1c		 je	 SHORT $LN19@G_Ticker

; 1647 : 			{
; 1648 : 				if (players[i].playerstate == PST_REBORN)

  0003d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00044	83 b8 04 00 00
	00 02		 cmp	 DWORD PTR _players[eax+4], 2
  0004b	75 0c		 jne	 SHORT $LN19@G_Ticker

; 1649 : 				{
; 1650 : 					G_DoReborn(i);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _G_DoReborn
  00056	83 c4 04	 add	 esp, 4
$LN19@G_Ticker:

; 1651 : 				}
; 1652 : 			}
; 1653 : 		}

  00059	eb c6		 jmp	 SHORT $LN2@G_Ticker
$LN3@G_Ticker:

; 1654 : 	}
; 1655 : 	P_MapEnd();

  0005b	e8 00 00 00 00	 call	 _P_MapEnd
  00060	90		 npad	 1
$LN5@G_Ticker:

; 1656 : 
; 1657 : 	// do things to change the game state
; 1658 : 	while (gameaction != ga_nothing)

  00061	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gameaction, 0
  00068	0f 84 8c 00 00
	00		 je	 $dontcompleteyet$49

; 1659 : 		switch (gameaction)

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameaction
  00073	89 45 b0	 mov	 DWORD PTR tv76[ebp], eax
  00076	83 7d b0 00	 cmp	 DWORD PTR tv76[ebp], 0
  0007a	74 64		 je	 SHORT $LN24@G_Ticker
  0007c	83 7d b0 01	 cmp	 DWORD PTR tv76[ebp], 1
  00080	74 08		 je	 SHORT $LN20@G_Ticker
  00082	83 7d b0 02	 cmp	 DWORD PTR tv76[ebp], 2
  00086	74 50		 je	 SHORT $LN23@G_Ticker
  00088	eb 58		 jmp	 SHORT $LN25@G_Ticker
$LN20@G_Ticker:

; 1660 : 		{
; 1661 : 			case ga_completed :
; 1662 : 				if (lastdraw)

  0008a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _lastdraw, 0
  00091	74 3d		 je	 SHORT $LN21@G_Ticker

; 1663 : 				{
; 1664 : 					// Zero out all controls
; 1665 : 					D_ResetTiccmds();

  00093	e8 00 00 00 00	 call	 _D_ResetTiccmds
  00098	90		 npad	 1

; 1666 : 
; 1667 : 					for (i = 0; i < MAXPLAYERS; i++)

  00099	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a0	eb 09		 jmp	 SHORT $LN11@G_Ticker
$LN9@G_Ticker:
  000a2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a5	83 c0 01	 add	 eax, 1
  000a8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN11@G_Ticker:
  000ab	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  000af	73 1b		 jae	 SHORT $LN10@G_Ticker

; 1668 : 						memset(&players[i].cmd, 0, sizeof(ticcmd_t));

  000b1	6a 08		 push	 8
  000b3	6a 00		 push	 0
  000b5	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000bc	05 08 00 00 00	 add	 eax, OFFSET _players+8
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _memset
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	eb d6		 jmp	 SHORT $LN9@G_Ticker
$LN10@G_Ticker:

; 1669 : 
; 1670 : 					goto dontcompleteyet; // Just one more tic man, I swear!

  000cc	eb 2c		 jmp	 SHORT $dontcompleteyet$49

; 1671 : 				}

  000ce	eb 06		 jmp	 SHORT $LN22@G_Ticker
$LN21@G_Ticker:

; 1672 : 				else
; 1673 : 					G_DoCompleted();

  000d0	e8 00 00 00 00	 call	 _G_DoCompleted
  000d5	90		 npad	 1
$LN22@G_Ticker:

; 1674 : 				break;

  000d6	eb 1d		 jmp	 SHORT $LN7@G_Ticker
$LN23@G_Ticker:

; 1675 : 			case ga_worlddone : G_DoWorldDone(); break;

  000d8	e8 00 00 00 00	 call	 _G_DoWorldDone
  000dd	90		 npad	 1
  000de	eb 15		 jmp	 SHORT $LN7@G_Ticker
$LN24@G_Ticker:

; 1676 : 			case ga_nothing : break;

  000e0	eb 13		 jmp	 SHORT $LN7@G_Ticker
$LN25@G_Ticker:

; 1677 : 			default : I_Error("gameaction = %d\n", gameaction);

  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _gameaction
  000e7	50		 push	 eax
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HJFOHGDP@gameaction?5?$DN?5?$CFd?6@
  000ed	e8 00 00 00 00	 call	 _I_Error
  000f2	83 c4 08	 add	 esp, 8
$LN7@G_Ticker:

; 1678 : 		}

  000f5	e9 67 ff ff ff	 jmp	 $LN5@G_Ticker
$dontcompleteyet$49:

; 1679 : 
; 1680 : dontcompleteyet:
; 1681 : 
; 1682 : 	buf = gametic % BACKUPTICS;

  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  000ff	33 d2		 xor	 edx, edx
  00101	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00106	f7 f1		 div	 ecx
  00108	89 55 f8	 mov	 DWORD PTR _buf$[ebp], edx

; 1683 : 
; 1684 : 	// read/write demo and check turbo cheat
; 1685 : 	for (i = 0; i < MAXPLAYERS; i++)

  0010b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00112	eb 09		 jmp	 SHORT $LN14@G_Ticker
$LN12@G_Ticker:
  00114	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN14@G_Ticker:
  0011d	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00121	73 7a		 jae	 SHORT $LN13@G_Ticker

; 1686 : 	{
; 1687 : 		// BP: i == 0 for playback of demos 1.29 now new players is added with xcmd
; 1688 : 		if ((playeringame[i] || i == 0) /*&& !dedicated*/)

  00123	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00126	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0012e	75 06		 jne	 SHORT $LN27@G_Ticker
  00130	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00134	75 62		 jne	 SHORT $LN30@G_Ticker
$LN27@G_Ticker:

; 1689 : 		{
; 1690 : 			cmd = &players[i].cmd;

  00136	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0013d	05 08 00 00 00	 add	 eax, OFFSET _players+8
  00142	89 45 f4	 mov	 DWORD PTR _cmd$[ebp], eax

; 1691 : 
; 1692 : 			if (demoplayback)

  00145	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  0014c	74 12		 je	 SHORT $LN28@G_Ticker

; 1693 : 				G_ReadDemoTiccmd(cmd, i);

  0014e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00151	50		 push	 eax
  00152	8b 4d f4	 mov	 ecx, DWORD PTR _cmd$[ebp]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 _G_ReadDemoTiccmd
  0015b	83 c4 08	 add	 esp, 8
  0015e	eb 1f		 jmp	 SHORT $LN29@G_Ticker
$LN28@G_Ticker:

; 1694 : 			else
; 1695 : 				G_CopyTiccmd(cmd, &netcmds[buf][i], 1);

  00160	6a 01		 push	 1
  00162	8b 45 f8	 mov	 eax, DWORD PTR _buf$[ebp]
  00165	c1 e0 08	 shl	 eax, 8
  00168	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0016b	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR _netcmds[eax+ecx*8]
  00172	52		 push	 edx
  00173	8b 45 f4	 mov	 eax, DWORD PTR _cmd$[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _G_CopyTiccmd
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@G_Ticker:

; 1696 : 
; 1697 : 			if (demorecording)

  0017f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demorecording, 0
  00186	74 10		 je	 SHORT $LN30@G_Ticker

; 1698 : 				G_WriteDemoTiccmd(cmd, i);

  00188	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0018b	50		 push	 eax
  0018c	8b 4d f4	 mov	 ecx, DWORD PTR _cmd$[ebp]
  0018f	51		 push	 ecx
  00190	e8 00 00 00 00	 call	 _G_WriteDemoTiccmd
  00195	83 c4 08	 add	 esp, 8
$LN30@G_Ticker:

; 1699 : 		}
; 1700 : 	}

  00198	e9 77 ff ff ff	 jmp	 $LN12@G_Ticker
$LN13@G_Ticker:

; 1701 : 
; 1702 : 	// do main actions
; 1703 : 	switch (gamestate)

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR _gamestate
  001a2	89 45 b0	 mov	 DWORD PTR tv146[ebp], eax
  001a5	8b 4d b0	 mov	 ecx, DWORD PTR tv146[ebp]
  001a8	83 e9 01	 sub	 ecx, 1
  001ab	89 4d b0	 mov	 DWORD PTR tv146[ebp], ecx
  001ae	83 7d b0 0c	 cmp	 DWORD PTR tv146[ebp], 12 ; 0000000cH
  001b2	77 7e		 ja	 SHORT $LN15@G_Ticker
  001b4	8b 55 b0	 mov	 edx, DWORD PTR tv146[ebp]
  001b7	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN48@G_Ticker[edx*4]
$LN31@G_Ticker:

; 1704 : 	{
; 1705 : 		case GS_LEVEL:
; 1706 : 			P_Ticker(); // tic the game

  001be	e8 00 00 00 00	 call	 _P_Ticker
  001c3	90		 npad	 1

; 1707 : 			ST_Ticker();

  001c4	e8 00 00 00 00	 call	 _ST_Ticker
  001c9	90		 npad	 1

; 1708 : 			AM_Ticker();

  001ca	e8 00 00 00 00	 call	 _AM_Ticker
  001cf	90		 npad	 1

; 1709 : 			HU_Ticker();

  001d0	e8 00 00 00 00	 call	 _HU_Ticker
  001d5	90		 npad	 1

; 1710 : 			break;

  001d6	eb 5a		 jmp	 SHORT $LN15@G_Ticker
$LN32@G_Ticker:

; 1711 : 
; 1712 : 		case GS_INTERMISSION:
; 1713 : 			Y_Ticker();

  001d8	e8 00 00 00 00	 call	 _Y_Ticker
  001dd	90		 npad	 1

; 1714 : 			HU_Ticker();

  001de	e8 00 00 00 00	 call	 _HU_Ticker
  001e3	90		 npad	 1

; 1715 : 			break;

  001e4	eb 4c		 jmp	 SHORT $LN15@G_Ticker

; 1716 : 
; 1717 : 		case GS_TIMEATTACK:
; 1718 : 			break;

  001e6	eb 4a		 jmp	 SHORT $LN15@G_Ticker
$LN34@G_Ticker:

; 1719 : 
; 1720 : 		case GS_INTRO:
; 1721 : 		case GS_INTRO2:
; 1722 : 			F_IntroTicker();

  001e8	e8 00 00 00 00	 call	 _F_IntroTicker
  001ed	90		 npad	 1

; 1723 : 			break;

  001ee	eb 42		 jmp	 SHORT $LN15@G_Ticker
$LN36@G_Ticker:

; 1724 : 
; 1725 : 		case GS_CUTSCENE:
; 1726 : 			F_CutsceneTicker();

  001f0	e8 00 00 00 00	 call	 _F_CutsceneTicker
  001f5	90		 npad	 1

; 1727 : 			HU_Ticker();

  001f6	e8 00 00 00 00	 call	 _HU_Ticker
  001fb	90		 npad	 1

; 1728 : 			break;

  001fc	eb 34		 jmp	 SHORT $LN15@G_Ticker
$LN37@G_Ticker:

; 1729 : 
; 1730 : 		case GS_GAMEEND:
; 1731 : 			F_GameEndTicker();

  001fe	e8 00 00 00 00	 call	 _F_GameEndTicker
  00203	90		 npad	 1

; 1732 : 			break;

  00204	eb 2c		 jmp	 SHORT $LN15@G_Ticker
$LN38@G_Ticker:

; 1733 : 
; 1734 : 		case GS_EVALUATION:
; 1735 : 			F_GameEvaluationTicker();

  00206	e8 00 00 00 00	 call	 _F_GameEvaluationTicker
  0020b	90		 npad	 1

; 1736 : 			break;

  0020c	eb 24		 jmp	 SHORT $LN15@G_Ticker
$LN39@G_Ticker:

; 1737 : 
; 1738 : 		case GS_CREDITS:
; 1739 : 			F_CreditTicker();

  0020e	e8 00 00 00 00	 call	 _F_CreditTicker
  00213	90		 npad	 1

; 1740 : 			HU_Ticker();

  00214	e8 00 00 00 00	 call	 _HU_Ticker
  00219	90		 npad	 1

; 1741 : 			break;

  0021a	eb 16		 jmp	 SHORT $LN15@G_Ticker
$LN40@G_Ticker:

; 1742 : 
; 1743 : 		case GS_TITLESCREEN:
; 1744 : 			F_TitleScreenTicker();

  0021c	e8 00 00 00 00	 call	 _F_TitleScreenTicker
  00221	90		 npad	 1

; 1745 : 			break;

  00222	eb 0e		 jmp	 SHORT $LN15@G_Ticker
$LN41@G_Ticker:

; 1746 : 
; 1747 : 		case GS_DEMOSCREEN:
; 1748 : 			D_PageTicker();

  00224	e8 00 00 00 00	 call	 _D_PageTicker
  00229	90		 npad	 1

; 1749 : 			break;

  0022a	eb 06		 jmp	 SHORT $LN15@G_Ticker
$LN42@G_Ticker:

; 1750 : 
; 1751 : 		case GS_WAITINGPLAYERS:
; 1752 : 			F_TitleScreenTicker(); // Fixes title sky stopping

  0022c	e8 00 00 00 00	 call	 _F_TitleScreenTicker
  00231	90		 npad	 1
$LN15@G_Ticker:

; 1753 : 		case GS_DEDICATEDSERVER:
; 1754 : 		case GS_NULL:
; 1755 : 			break; // do nothing
; 1756 : 	}
; 1757 : 
; 1758 : 	// Dedicated servers don't get a last draw.
; 1759 : 	if (dedicated && lastdraw)

  00232	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00239	74 19		 je	 SHORT $LN45@G_Ticker
  0023b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _lastdraw, 0
  00242	74 10		 je	 SHORT $LN45@G_Ticker

; 1760 : 	{
; 1761 : 		lastdraw = false;

  00244	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lastdraw, 0

; 1762 : 		G_DoCompleted();

  0024e	e8 00 00 00 00	 call	 _G_DoCompleted
  00253	90		 npad	 1
$LN45@G_Ticker:

; 1763 : 	}
; 1764 : 
; 1765 : 	if (pausedelay)

  00254	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _pausedelay, 0
  0025b	74 0d		 je	 SHORT $LN46@G_Ticker

; 1766 : 		pausedelay--;

  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR _pausedelay
  00262	83 e8 01	 sub	 eax, 1
  00265	a3 00 00 00 00	 mov	 DWORD PTR _pausedelay, eax
$LN46@G_Ticker:

; 1767 : }

  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	5b		 pop	 ebx
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c3		 ret	 0
  00271	0f 1f 00	 npad	 3
$LN48@G_Ticker:
  00274	00 00 00 00	 DD	 $LN31@G_Ticker
  00278	00 00 00 00	 DD	 $LN32@G_Ticker
  0027c	00 00 00 00	 DD	 $LN41@G_Ticker
  00280	00 00 00 00	 DD	 $LN38@G_Ticker
  00284	00 00 00 00	 DD	 $LN34@G_Ticker
  00288	00 00 00 00	 DD	 $LN34@G_Ticker
  0028c	00 00 00 00	 DD	 $LN36@G_Ticker
  00290	00 00 00 00	 DD	 $LN37@G_Ticker
  00294	00 00 00 00	 DD	 $LN40@G_Ticker
  00298	00 00 00 00	 DD	 $LN39@G_Ticker
  0029c	00 00 00 00	 DD	 $LN15@G_Ticker
  002a0	00 00 00 00	 DD	 $LN15@G_Ticker
  002a4	00 00 00 00	 DD	 $LN42@G_Ticker
_G_Ticker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_AfterIntermission
_TEXT	SEGMENT
_G_AfterIntermission PROC				; COMDAT

; 2502 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2503 : 	HU_ClearCEcho();

  00009	e8 00 00 00 00	 call	 _HU_ClearCEcho
  0000e	90		 npad	 1

; 2504 : 
; 2505 : 	if (mapheaderinfo[gamemap-1].cutscenenum) // Start a custom cutscene.

  0000f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00016	83 e8 01	 sub	 eax, 1
  00019	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0001f	0f b6 91 1d 01
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+285]
  00026	85 d2		 test	 edx, edx
  00028	74 29		 je	 SHORT $LN2@G_AfterInt

; 2506 : 		F_StartCustomCutscene(mapheaderinfo[gamemap-1].cutscenenum-1, false, false);

  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00035	83 e8 01	 sub	 eax, 1
  00038	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0003e	0f b6 91 1d 01
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+285]
  00045	83 ea 01	 sub	 edx, 1
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _F_StartCustomCutscene
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	eb 1c		 jmp	 SHORT $LN5@G_AfterInt
$LN2@G_AfterInt:

; 2507 : 	else
; 2508 : 	{
; 2509 : 		if (nextmap < 1100-1)

  00053	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  0005a	3d 4b 04 00 00	 cmp	 eax, 1099		; 0000044bH
  0005f	7d 08		 jge	 SHORT $LN4@G_AfterInt

; 2510 : 			G_NextLevel();

  00061	e8 00 00 00 00	 call	 _G_NextLevel
  00066	90		 npad	 1
  00067	eb 06		 jmp	 SHORT $LN5@G_AfterInt
$LN4@G_AfterInt:

; 2511 : 		else
; 2512 : 			Y_EndGame();

  00069	e8 00 00 00 00	 call	 _Y_EndGame
  0006e	90		 npad	 1
$LN5@G_AfterInt:

; 2513 : 	}
; 2514 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_G_AfterIntermission ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_NextLevel
_TEXT	SEGMENT
_G_NextLevel PROC					; COMDAT

; 2523 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2524 : 	gameaction = ga_worlddone;

  00009	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _gameaction, 2

; 2525 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_G_NextLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_ExitLevel
_TEXT	SEGMENT
_G_ExitLevel PROC					; COMDAT

; 2256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2257 : 	if (gamestate == GS_LEVEL)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00010	0f 85 84 00 00
	00		 jne	 $LN7@G_ExitLeve

; 2258 : 	{
; 2259 : 		gameaction = ga_completed;

  00016	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _gameaction, 1

; 2260 : 		lastdraw = true;

  00020	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _lastdraw, 1

; 2261 : 
; 2262 : 		// If you want your teams scrambled on map change, start the process now.
; 2263 : 		// The teams will scramble at the start of the next round.
; 2264 : 		if (cv_scrambleonchange.value && ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF))

  0002a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_scrambleonchange+20, 0
  00031	74 3d		 je	 SHORT $LN6@G_ExitLeve
  00033	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0003a	83 f8 01	 cmp	 eax, 1
  0003d	75 09		 jne	 SHORT $LN5@G_ExitLeve
  0003f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00046	75 0c		 jne	 SHORT $LN4@G_ExitLeve
$LN5@G_ExitLeve:
  00048	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0004f	83 f8 04	 cmp	 eax, 4
  00052	75 1c		 jne	 SHORT $LN6@G_ExitLeve
$LN4@G_ExitLeve:

; 2265 : 		{
; 2266 : 			if (server)

  00054	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0005b	74 13		 je	 SHORT $LN6@G_ExitLeve

; 2267 : 				CV_SetValue(&cv_teamscramble, cv_scrambleonchange.value);

  0005d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_scrambleonchange+20
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET _cv_teamscramble
  00068	e8 00 00 00 00	 call	 _CV_SetValue
  0006d	83 c4 08	 add	 esp, 8
$LN6@G_ExitLeve:

; 2268 : 		}
; 2269 : 
; 2270 : 		if (gametype != GT_COOP)

  00070	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00077	85 c0		 test	 eax, eax
  00079	74 1f		 je	 SHORT $LN7@G_ExitLeve

; 2271 : 			CONS_Printf("%s", text[ROUND_END]);

  0007b	b8 04 00 00 00	 mov	 eax, 4
  00080	69 c8 ea 00 00
	00		 imul	 ecx, eax, 234
  00086	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0008c	52		 push	 edx
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00092	e8 00 00 00 00	 call	 _CONS_Printf
  00097	83 c4 08	 add	 esp, 8
$LN7@G_ExitLeve:

; 2272 : 	}
; 2273 : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_G_ExitLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_IsSpecialStage
_TEXT	SEGMENT
_mapnum$ = 8						; size = 4
_G_IsSpecialStage PROC					; COMDAT

; 2282 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2283 : 	if ((!useNightsSS && mapnum >= sstage_start && mapnum <= sstage_end)
; 2284 : 		|| (useNightsSS && mapnum >= nsstage_start && mapnum <= nsstage_end))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _useNightsSS, 0
  00010	75 18		 jne	 SHORT $LN4@G_IsSpecia
  00012	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _sstage_start
  00019	39 45 08	 cmp	 DWORD PTR _mapnum$[ebp], eax
  0001c	7c 0c		 jl	 SHORT $LN4@G_IsSpecia
  0001e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _sstage_end
  00025	39 45 08	 cmp	 DWORD PTR _mapnum$[ebp], eax
  00028	7e 21		 jle	 SHORT $LN3@G_IsSpecia
$LN4@G_IsSpecia:
  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _useNightsSS, 0
  00031	74 1f		 je	 SHORT $LN2@G_IsSpecia
  00033	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nsstage_start
  0003a	39 45 08	 cmp	 DWORD PTR _mapnum$[ebp], eax
  0003d	7c 13		 jl	 SHORT $LN2@G_IsSpecia
  0003f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nsstage_end
  00046	39 45 08	 cmp	 DWORD PTR _mapnum$[ebp], eax
  00049	7f 07		 jg	 SHORT $LN2@G_IsSpecia
$LN3@G_IsSpecia:

; 2285 : 		return true;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	eb 02		 jmp	 SHORT $LN1@G_IsSpecia
$LN2@G_IsSpecia:

; 2286 : 
; 2287 : 	return false;

  00052	33 c0		 xor	 eax, eax
$LN1@G_IsSpecia:

; 2288 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_G_IsSpecialStage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_CheckDemoStatus
_TEXT	SEGMENT
tv133 = -96						; size = 4
_p_tmp$1 = -28						; size = 4
_f2$2 = -24						; size = 8
_f1$3 = -16						; size = 8
_demotime$4 = -8					; size = 4
_saved$ = -4						; size = 4
_G_CheckDemoStatus PROC					; COMDAT

; 3290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3291 : 	boolean saved;
; 3292 : 	if (timingdemo)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timingdemo, 0
  00010	0f 84 cc 00 00
	00		 je	 $LN5@G_CheckDem

; 3293 : 	{
; 3294 : 		INT32 demotime;
; 3295 : 		double f1, f2;
; 3296 : 		demotime = I_GetTime() - demostarttime;

  00016	e8 00 00 00 00	 call	 _I_GetTime
  0001b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _demostarttime
  00021	89 45 f8	 mov	 DWORD PTR _demotime$4[ebp], eax

; 3297 : 		if (!demotime)

  00024	75 0a		 jne	 SHORT $LN6@G_CheckDem

; 3298 : 			return true;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	e9 9c 01 00 00	 jmp	 $LN1@G_CheckDem
$LN6@G_CheckDem:

; 3299 : 		G_StopDemo();

  00030	e8 00 00 00 00	 call	 _G_StopDemo
  00035	90		 npad	 1

; 3300 : 		timingdemo = false;

  00036	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timingdemo, 0

; 3301 : 		f1 = (double)demotime;

  00040	f2 0f 2a 45 f8	 cvtsi2sd xmm0, DWORD PTR _demotime$4[ebp]
  00045	f2 0f 11 45 f0	 movsd	 QWORD PTR _f1$3[ebp], xmm0

; 3302 : 		f2 = (double)framecount*TICRATE;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR _framecount
  0004f	89 45 a0	 mov	 DWORD PTR tv133[ebp], eax
  00052	f2 0f 2a 45 a0	 cvtsi2sd xmm0, DWORD PTR tv133[ebp]
  00057	8b 4d a0	 mov	 ecx, DWORD PTR tv133[ebp]
  0005a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0005d	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00066	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4041800000000000
  0006e	f2 0f 11 45 e8	 movsd	 QWORD PTR _f2$2[ebp], xmm0

; 3303 : 		CONS_Printf("timed %u gametics in %d realtics\n"

  00073	f2 0f 10 45 e8	 movsd	 xmm0, QWORD PTR _f2$2[ebp]
  00078	f2 0f 5e 45 f0	 divsd	 xmm0, QWORD PTR _f1$3[ebp]
  0007d	83 ec 08	 sub	 esp, 8
  00080	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00085	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _f1$3[ebp]
  0008a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4041800000000000
  00092	83 ec 08	 sub	 esp, 8
  00095	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _demotime$4[ebp]
  0009d	50		 push	 eax
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  000a4	51		 push	 ecx
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@IAKKIH@timed?5?$CFu?5gametics?5in?5?$CFd?5realtic@
  000aa	e8 00 00 00 00	 call	 _CONS_Printf
  000af	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3304 : 			"%f seconds, %f avg fps\n",
; 3305 : 			leveltime,demotime,f1/TICRATE,f2/f1);
; 3306 : 		if (restorecv_vidwait != cv_vidwait.value)

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _restorecv_vidwait
  000b7	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_vidwait+20
  000bd	74 13		 je	 SHORT $LN7@G_CheckDem

; 3307 : 			CV_SetValue(&cv_vidwait, restorecv_vidwait);

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _restorecv_vidwait
  000c4	50		 push	 eax
  000c5	68 00 00 00 00	 push	 OFFSET _cv_vidwait
  000ca	e8 00 00 00 00	 call	 _CV_SetValue
  000cf	83 c4 08	 add	 esp, 8
$LN7@G_CheckDem:

; 3308 : 		D_AdvanceDemo();

  000d2	e8 00 00 00 00	 call	 _D_AdvanceDemo
  000d7	90		 npad	 1

; 3309 : 		return true;

  000d8	b8 01 00 00 00	 mov	 eax, 1
  000dd	e9 ea 00 00 00	 jmp	 $LN1@G_CheckDem
$LN5@G_CheckDem:

; 3310 : 	}
; 3311 : 
; 3312 : 	if (demoplayback)

  000e2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  000e9	74 2e		 je	 SHORT $LN8@G_CheckDem

; 3313 : 	{
; 3314 : 		if (singledemo)

  000eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _singledemo, 0
  000f2	74 06		 je	 SHORT $LN9@G_CheckDem

; 3315 : 			I_Quit();

  000f4	e8 00 00 00 00	 call	 _I_Quit
  000f9	90		 npad	 1
$LN9@G_CheckDem:

; 3316 : 		G_StopDemo();

  000fa	e8 00 00 00 00	 call	 _G_StopDemo
  000ff	90		 npad	 1

; 3317 : 
; 3318 : 		if (!timeattacking)

  00100	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  00107	75 06		 jne	 SHORT $LN10@G_CheckDem

; 3319 : 			D_AdvanceDemo();

  00109	e8 00 00 00 00	 call	 _D_AdvanceDemo
  0010e	90		 npad	 1
$LN10@G_CheckDem:

; 3320 : 
; 3321 : 		return true;

  0010f	b8 01 00 00 00	 mov	 eax, 1
  00114	e9 b3 00 00 00	 jmp	 $LN1@G_CheckDem
$LN8@G_CheckDem:

; 3322 : 	}
; 3323 : 
; 3324 : 	if (demorecording)

  00119	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demorecording, 0
  00120	0f 84 a4 00 00
	00		 je	 $LN11@G_CheckDem
$LN4@G_CheckDem:

; 3325 : 	{
; 3326 : 		WRITEUINT8(demo_p, DEMOMARKER);

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0012b	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0012e	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00131	c6 00 80	 mov	 BYTE PTR [eax], 128	; 00000080H
  00134	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00137	83 c0 01	 add	 eax, 1
  0013a	89 45 e4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0013d	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00140	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00145	33 c0		 xor	 eax, eax
  00147	75 dd		 jne	 SHORT $LN4@G_CheckDem

; 3327 : 		saved = FIL_WriteFile(demoname, demobuffer, demo_p - demobuffer);

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0014e	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _demobuffer
  00154	50		 push	 eax
  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _demobuffer
  0015b	51		 push	 ecx
  0015c	68 00 00 00 00	 push	 OFFSET _demoname
  00161	e8 00 00 00 00	 call	 _FIL_WriteFile
  00166	83 c4 0c	 add	 esp, 12			; 0000000cH
  00169	89 45 fc	 mov	 DWORD PTR _saved$[ebp], eax

; 3328 : 		free(demobuffer);

  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _demobuffer
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _free
  00177	83 c4 04	 add	 esp, 4

; 3329 : 		demorecording = false;

  0017a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _demorecording, 0

; 3330 : 
; 3331 : 		if (!timeattacking)

  00184	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  0018b	75 2c		 jne	 SHORT $LN14@G_CheckDem

; 3332 : 		{
; 3333 : 			if (saved)

  0018d	83 7d fc 00	 cmp	 DWORD PTR _saved$[ebp], 0
  00191	74 14		 je	 SHORT $LN13@G_CheckDem

; 3334 : 				CONS_Printf("\2Demo %s recorded\n",demoname);

  00193	68 00 00 00 00	 push	 OFFSET _demoname
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KDKOMCNC@?$ACDemo?5?$CFs?5recorded?6@
  0019d	e8 00 00 00 00	 call	 _CONS_Printf
  001a2	83 c4 08	 add	 esp, 8
  001a5	eb 12		 jmp	 SHORT $LN14@G_CheckDem
$LN13@G_CheckDem:

; 3335 : 			else
; 3336 : 				CONS_Printf("\2Demo %s not saved\n",demoname);

  001a7	68 00 00 00 00	 push	 OFFSET _demoname
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DCEMDKJG@?$ACDemo?5?$CFs?5not?5saved?6@
  001b1	e8 00 00 00 00	 call	 _CONS_Printf
  001b6	83 c4 08	 add	 esp, 8
$LN14@G_CheckDem:

; 3337 : 		}
; 3338 : 
; 3339 : 		timeattacking = false;

  001b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timeattacking, 0

; 3340 : 
; 3341 : 		return true;

  001c3	b8 01 00 00 00	 mov	 eax, 1
  001c8	eb 02		 jmp	 SHORT $LN1@G_CheckDem
$LN11@G_CheckDem:

; 3342 : 	}
; 3343 : 
; 3344 : 	return false;

  001ca	33 c0		 xor	 eax, eax
$LN1@G_CheckDem:

; 3345 : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
_G_CheckDemoStatus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_StopDemo
_TEXT	SEGMENT
_G_StopDemo PROC					; COMDAT

; 3273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3274 : 	Z_Free(demobuffer);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _demobuffer
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _Z_Free
  00014	83 c4 04	 add	 esp, 4

; 3275 : 	demobuffer = NULL;

  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _demobuffer, 0

; 3276 : 	demoplayback = false;

  00021	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _demoplayback, 0

; 3277 : 	timingdemo = false;

  0002b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _timingdemo, 0

; 3278 : 	singletics = false;

  00035	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _singletics, 0

; 3279 : 
; 3280 : 	if (gamestate == GS_INTERMISSION)

  0003f	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00046	75 06		 jne	 SHORT $LN2@G_StopDemo

; 3281 : 		Y_EndIntermission(); // cleanup

  00048	e8 00 00 00 00	 call	 _Y_EndIntermission
  0004d	90		 npad	 1
$LN2@G_StopDemo:

; 3282 : 
; 3283 : 	G_SetGamestate(GS_NULL);

  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 _G_SetGamestate
  00055	83 c4 04	 add	 esp, 4

; 3284 : 	wipegamestate = GS_NULL;

  00058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _wipegamestate, 0

; 3285 : 	SV_StopServer();

  00062	e8 00 00 00 00	 call	 _SV_StopServer
  00067	90		 npad	 1

; 3286 : 	SV_ResetServer();

  00068	e8 00 00 00 00	 call	 _SV_ResetServer
  0006d	90		 npad	 1

; 3287 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_G_StopDemo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DoneLevelLoad
_TEXT	SEGMENT
tv72 = -68						; size = 4
_G_DoneLevelLoad PROC					; COMDAT

; 3254 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3255 : 	CONS_Printf("Loaded level in %f sec\n", (double)(I_GetTime() - demostarttime) / TICRATE);

  00009	e8 00 00 00 00	 call	 _I_GetTime
  0000e	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _demostarttime
  00014	89 45 bc	 mov	 DWORD PTR tv72[ebp], eax
  00017	f2 0f 2a 45 bc	 cvtsi2sd xmm0, DWORD PTR tv72[ebp]
  0001c	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0002b	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4041800000000000
  00033	83 ec 08	 sub	 esp, 8
  00036	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@HAGICDED@Loaded?5level?5in?5?$CFf?5sec?6@
  00040	e8 00 00 00 00	 call	 _CONS_Printf
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3256 : 	framecount = 0;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _framecount, 0

; 3257 : 	demostarttime = I_GetTime();

  00052	e8 00 00 00 00	 call	 _I_GetTime
  00057	a3 00 00 00 00	 mov	 DWORD PTR _demostarttime, eax

; 3258 : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_G_DoneLevelLoad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_MovieMode
_TEXT	SEGMENT
_enable$ = 8						; size = 4
_G_MovieMode PROC					; COMDAT

; 3232 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3233 : 	if (enable)

  00009	83 7d 08 00	 cmp	 DWORD PTR _enable$[ebp], 0
  0000d	74 23		 je	 SHORT $LN2@G_MovieMod

; 3234 : 	{
; 3235 : 		CONS_Printf("Movie mode enabled.\n");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LGDLFHHJ@Movie?5mode?5enabled?4?6@
  00014	e8 00 00 00 00	 call	 _CONS_Printf
  00019	83 c4 04	 add	 esp, 4

; 3236 : 		singletics = true;

  0001c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _singletics, 1

; 3237 : 		moviemode = true;

  00026	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _moviemode, 1

; 3238 : #ifdef HAVE_PNG
; 3239 : 		M_StartMovie();
; 3240 : #endif
; 3241 : 	}

  00030	eb 21		 jmp	 SHORT $LN3@G_MovieMod
$LN2@G_MovieMod:

; 3242 : 	else
; 3243 : 	{
; 3244 : 		CONS_Printf("Movie mode disabled.\n");

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HNNGOGKI@Movie?5mode?5disabled?4?6@
  00037	e8 00 00 00 00	 call	 _CONS_Printf
  0003c	83 c4 04	 add	 esp, 4

; 3245 : 		singletics = false;

  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _singletics, 0

; 3246 : 		moviemode = false;

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _moviemode, 0
$LN3@G_MovieMod:

; 3247 : #ifdef HAVE_PNG
; 3248 : 		M_StopMovie();
; 3249 : #endif
; 3250 : 	}
; 3251 : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_G_MovieMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_TimeDemo
_TEXT	SEGMENT
_name$ = 8						; size = 4
_G_TimeDemo PROC					; COMDAT

; 3218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3219 : 	nodrawers = M_CheckParm("-nodraw");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_07FOGKCKJK@?9nodraw@
  0000e	e8 00 00 00 00	 call	 _M_CheckParm
  00013	83 c4 04	 add	 esp, 4
  00016	a3 00 00 00 00	 mov	 DWORD PTR _nodrawers, eax

; 3220 : 	noblit = M_CheckParm("-noblit");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_07EENCPNON@?9noblit@
  00020	e8 00 00 00 00	 call	 _M_CheckParm
  00025	83 c4 04	 add	 esp, 4
  00028	a3 00 00 00 00	 mov	 DWORD PTR _noblit, eax

; 3221 : 	restorecv_vidwait = cv_vidwait.value;

  0002d	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_vidwait+20
  00032	a3 00 00 00 00	 mov	 DWORD PTR _restorecv_vidwait, eax

; 3222 : 	if (cv_vidwait.value)

  00037	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_vidwait+20, 0
  0003e	74 12		 je	 SHORT $LN2@G_TimeDemo

; 3223 : 		CV_Set(&cv_vidwait, "0");

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00045	68 00 00 00 00	 push	 OFFSET _cv_vidwait
  0004a	e8 00 00 00 00	 call	 _CV_Set
  0004f	83 c4 08	 add	 esp, 8
$LN2@G_TimeDemo:

; 3224 : 	timingdemo = true;

  00052	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _timingdemo, 1

; 3225 : 	singletics = true;

  0005c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _singletics, 1

; 3226 : 	framecount = 0;

  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _framecount, 0

; 3227 : 	demostarttime = I_GetTime();

  00070	e8 00 00 00 00	 call	 _I_GetTime
  00075	a3 00 00 00 00	 mov	 DWORD PTR _demostarttime, eax

; 3228 : 	G_DeferedPlayDemo(name);

  0007a	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _G_DeferedPlayDemo
  00083	83 c4 04	 add	 esp, 4

; 3229 : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_G_TimeDemo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DoPlayDemo
_TEXT	SEGMENT
_l$ = -12						; size = 4
_map$ = -8						; size = 2
_i$ = -4						; size = 4
_defdemoname$ = 8					; size = 4
_G_DoPlayDemo PROC					; COMDAT

; 3152 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3153 : 	INT32 i;
; 3154 : 	INT16 map;
; 3155 : 	lumpnum_t l;
; 3156 : 
; 3157 : 	// load demo file / resource
; 3158 : 
; 3159 : 	// it's an internal demo
; 3160 : 	if ((l = W_CheckNumForName(defdemoname)) == LUMPERROR)

  00009	8b 45 08	 mov	 eax, DWORD PTR _defdemoname$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _W_CheckNumForName
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 f4	 mov	 DWORD PTR _l$[ebp], eax
  00018	83 7d f4 ff	 cmp	 DWORD PTR _l$[ebp], -1
  0001c	75 52		 jne	 SHORT $LN5@G_DoPlayDe

; 3161 : 	{
; 3162 : 		FIL_DefaultExtension(defdemoname, ".lmp");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_04FJOMPALJ@?4lmp@
  00023	8b 45 08	 mov	 eax, DWORD PTR _defdemoname$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _FIL_DefaultExtension
  0002c	83 c4 08	 add	 esp, 8

; 3163 : 		if (!FIL_ReadFile(defdemoname, &demobuffer))

  0002f	68 00 00 00 00	 push	 OFFSET _demobuffer
  00034	8b 45 08	 mov	 eax, DWORD PTR _defdemoname$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _FIL_ReadFile
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 20		 jne	 SHORT $LN7@G_DoPlayDe

; 3164 : 		{
; 3165 : 			CONS_Printf("\2ERROR: couldn't open file '%s'.\n", defdemoname);

  00044	8b 45 08	 mov	 eax, DWORD PTR _defdemoname$[ebp]
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@OLLLPKKP@?$ACERROR?3?5couldn?8t?5open?5file?5?8?$CFs?8@
  0004d	e8 00 00 00 00	 call	 _CONS_Printf
  00052	83 c4 08	 add	 esp, 8

; 3166 : 			gameaction = ga_nothing;

  00055	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 3167 : 			return;

  0005f	e9 41 01 00 00	 jmp	 $LN1@G_DoPlayDe
$LN7@G_DoPlayDe:

; 3168 : 		}
; 3169 : 		demo_p = demobuffer;

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR _demobuffer
  00069	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax

; 3170 : 	}

  0006e	eb 1f		 jmp	 SHORT $LN6@G_DoPlayDe
$LN5@G_DoPlayDe:

; 3171 : 	else
; 3172 : 		demobuffer = demo_p = W_CacheLumpNum(l, PU_STATIC);

  00070	6a 01		 push	 1
  00072	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _W_CacheLumpNum
  0007b	83 c4 08	 add	 esp, 8
  0007e	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _demo_p
  00089	89 0d 00 00 00
	00		 mov	 DWORD PTR _demobuffer, ecx
$LN6@G_DoPlayDe:

; 3173 : 
; 3174 : 	// read demo header
; 3175 : 	gameaction = ga_nothing;

  0008f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 3176 : 	(void)READUINT8(demo_p); // ultmode

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0009e	83 c0 01	 add	 eax, 1
  000a1	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax

; 3177 : 	map = READUINT8(demo_p);

  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000ab	66 0f b6 08	 movzx	 cx, BYTE PTR [eax]
  000af	66 89 4d f8	 mov	 WORD PTR _map$[ebp], cx
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _demo_p
  000b9	83 c2 01	 add	 edx, 1
  000bc	89 15 00 00 00
	00		 mov	 DWORD PTR _demo_p, edx

; 3178 : 
; 3179 : 	(void)READUINT8(demo_p);

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000c7	83 c0 01	 add	 eax, 1
  000ca	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax

; 3180 : 
; 3181 : 	(void)READUINT8(demo_p);

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000d4	83 c0 01	 add	 eax, 1
  000d7	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax

; 3182 : 
; 3183 : 	(void)READUINT8(demo_p);

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000e1	83 c0 01	 add	 eax, 1
  000e4	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax

; 3184 : 
; 3185 : 	// pay attention to displayplayer because the status bar links
; 3186 : 	// to the display player when playing back a demo.
; 3187 : 	displayplayer = consoleplayer = READUINT8(demo_p);

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000ee	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000f1	89 0d 00 00 00
	00		 mov	 DWORD PTR _consoleplayer, ecx
  000f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _consoleplayer
  000fd	89 15 00 00 00
	00		 mov	 DWORD PTR _displayplayer, edx
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00108	83 c0 01	 add	 eax, 1
  0010b	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax

; 3188 : 
; 3189 : 	// support old v1.9 demos with ONLY 4 PLAYERS ! Man! what a shame!!!
; 3190 : 
; 3191 : 	(void)READUINT8(demo_p);

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00115	83 c0 01	 add	 eax, 1
  00118	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax

; 3192 : 
; 3193 : 	multiplayer = READUINT8(demo_p);

  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00122	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00125	89 0d 00 00 00
	00		 mov	 DWORD PTR _multiplayer, ecx
  0012b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _demo_p
  00131	83 c2 01	 add	 edx, 1
  00134	89 15 00 00 00
	00		 mov	 DWORD PTR _demo_p, edx

; 3194 : 
; 3195 : 	for (i = 0; i < 32; i++)

  0013a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00141	eb 09		 jmp	 SHORT $LN4@G_DoPlayDe
$LN2@G_DoPlayDe:
  00143	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00146	83 c0 01	 add	 eax, 1
  00149	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_DoPlayDe:
  0014c	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00150	7d 21		 jge	 SHORT $LN3@G_DoPlayDe

; 3196 : 		playeringame[i] = READUINT8(demo_p);

  00152	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00157	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0015a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0015d	89 0c 95 00 00
	00 00		 mov	 DWORD PTR _playeringame[edx*4], ecx
  00164	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00169	83 c0 01	 add	 eax, 1
  0016c	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00171	eb d0		 jmp	 SHORT $LN2@G_DoPlayDe
$LN3@G_DoPlayDe:

; 3197 : 
; 3198 : #if MAXPLAYERS > 32
; 3199 : "Please add support for old lmps"
; 3200 : #endif
; 3201 : 
; 3202 : 	memset(oldcmd, 0, sizeof (oldcmd));

  00173	68 00 01 00 00	 push	 256			; 00000100H
  00178	6a 00		 push	 0
  0017a	68 00 00 00 00	 push	 OFFSET _oldcmd
  0017f	e8 00 00 00 00	 call	 _memset
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3203 : 
; 3204 : 	// wait map command in the demo
; 3205 : 	G_SetGamestate(GS_WAITINGPLAYERS);

  00187	6a 0d		 push	 13			; 0000000dH
  00189	e8 00 00 00 00	 call	 _G_SetGamestate
  0018e	83 c4 04	 add	 esp, 4

; 3206 : 	wipegamestate = GS_WAITINGPLAYERS;

  00191	c7 05 00 00 00
	00 0d 00 00 00	 mov	 DWORD PTR _wipegamestate, 13 ; 0000000dH

; 3207 : 
; 3208 : 	demoplayback = true;

  0019b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _demoplayback, 1
$LN1@G_DoPlayDe:

; 3209 : }

  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
_G_DoPlayDemo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_BeginRecording
_TEXT	SEGMENT
_p_tmp$1 = -48						; size = 4
_p_tmp$2 = -44						; size = 4
_p_tmp$3 = -40						; size = 4
_p_tmp$4 = -36						; size = 4
_p_tmp$5 = -32						; size = 4
_p_tmp$6 = -28						; size = 4
_p_tmp$7 = -24						; size = 4
_p_tmp$8 = -20						; size = 4
_p_tmp$9 = -16						; size = 4
_p_tmp$10 = -12						; size = 4
_p_tmp$11 = -8						; size = 4
_i$ = -4						; size = 4
_G_BeginRecording PROC					; COMDAT

; 3112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3113 : 	INT32 i;
; 3114 : 
; 3115 : 	demo_p = demobuffer;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _demobuffer
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
$LN4@G_BeginRec:

; 3116 : 
; 3117 : 	WRITEUINT8(demo_p,VERSION);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00018	89 45 f8	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  0001b	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0001e	c6 00 c8	 mov	 BYTE PTR [eax], 200	; 000000c8H
  00021	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 f8	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00032	33 c0		 xor	 eax, eax
  00034	75 dd		 jne	 SHORT $LN4@G_BeginRec
$LN3@G_BeginRec:

; 3118 : 	WRITEUINT8(demo_p,ultimatemode);

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0003b	89 45 f4	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  0003e	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00041	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _ultimatemode
  00047	88 08		 mov	 BYTE PTR [eax], cl
  00049	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  0004c	83 c0 01	 add	 eax, 1
  0004f	89 45 f4	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  00052	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00055	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  0005a	33 c0		 xor	 eax, eax
  0005c	75 d8		 jne	 SHORT $LN3@G_BeginRec
$LN6@G_BeginRec:

; 3119 : 	WRITEUINT8(demo_p,gamemap);

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00063	89 45 f0	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  00066	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00069	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _gamemap
  0006f	88 08		 mov	 BYTE PTR [eax], cl
  00071	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  00074	83 c0 01	 add	 eax, 1
  00077	89 45 f0	 mov	 DWORD PTR _p_tmp$9[ebp], eax
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$9[ebp]
  0007d	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00082	33 c0		 xor	 eax, eax
  00084	75 d8		 jne	 SHORT $LN6@G_BeginRec
$LN9@G_BeginRec:

; 3120 : 	WRITEUINT8(demo_p,gametype);

  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0008b	89 45 ec	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0008e	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00091	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _gametype
  00097	88 08		 mov	 BYTE PTR [eax], cl
  00099	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0009c	83 c0 01	 add	 eax, 1
  0009f	89 45 ec	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  000a2	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  000a5	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  000aa	33 c0		 xor	 eax, eax
  000ac	75 d8		 jne	 SHORT $LN9@G_BeginRec
$LN12@G_BeginRec:

; 3121 : 	WRITEUINT8(demo_p,cv_analog.value);

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000b3	89 45 e8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  000b6	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000b9	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR _cv_analog+20
  000bf	88 08		 mov	 BYTE PTR [eax], cl
  000c1	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 e8	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  000ca	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000cd	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  000d2	33 c0		 xor	 eax, eax
  000d4	75 d8		 jne	 SHORT $LN12@G_BeginRec
$LN15@G_BeginRec:

; 3122 : 	WRITEUINT8(demo_p,cv_analog2.value);

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  000db	89 45 e4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000de	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000e1	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR _cv_analog2+20
  000e7	88 08		 mov	 BYTE PTR [eax], cl
  000e9	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 e4	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000f2	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000f5	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  000fa	33 c0		 xor	 eax, eax
  000fc	75 d8		 jne	 SHORT $LN15@G_BeginRec
$LN18@G_BeginRec:

; 3123 : 	WRITEUINT8(demo_p,consoleplayer);

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00103	89 45 e0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00106	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00109	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _consoleplayer
  0010f	88 08		 mov	 BYTE PTR [eax], cl
  00111	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00114	83 c0 01	 add	 eax, 1
  00117	89 45 e0	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0011a	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0011d	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00122	33 c0		 xor	 eax, eax
  00124	75 d8		 jne	 SHORT $LN18@G_BeginRec
$LN21@G_BeginRec:

; 3124 : 	WRITEUINT8(demo_p,cv_timelimit.value); // just to be compatible with old demo (no longer used)

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  0012b	89 45 dc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0012e	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00131	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR _cv_timelimit+20
  00137	88 08		 mov	 BYTE PTR [eax], cl
  00139	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0013c	83 c0 01	 add	 eax, 1
  0013f	89 45 dc	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00142	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00145	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  0014a	33 c0		 xor	 eax, eax
  0014c	75 d8		 jne	 SHORT $LN21@G_BeginRec
$LN24@G_BeginRec:

; 3125 : 	WRITEUINT8(demo_p,multiplayer);

  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  00153	89 45 d8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00156	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00159	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR _multiplayer
  0015f	88 08		 mov	 BYTE PTR [eax], cl
  00161	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00164	83 c0 01	 add	 eax, 1
  00167	89 45 d8	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  0016a	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0016d	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  00172	33 c0		 xor	 eax, eax
  00174	75 d8		 jne	 SHORT $LN24@G_BeginRec

; 3126 : 
; 3127 : 	for (i = 0; i < MAXPLAYERS; i++)

  00176	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0017d	eb 09		 jmp	 SHORT $LN31@G_BeginRec
$LN29@G_BeginRec:
  0017f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN31@G_BeginRec:
  00188	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0018c	7d 57		 jge	 SHORT $LN30@G_BeginRec

; 3128 : 	{
; 3129 : 		if (playeringame[i])

  0018e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00191	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00199	74 25		 je	 SHORT $LN38@G_BeginRec
$LN34@G_BeginRec:

; 3130 : 			WRITEUINT8(demo_p,1);

  0019b	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  001a0	89 45 d4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001a3	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001a6	c6 00 01	 mov	 BYTE PTR [eax], 1
  001a9	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001ac	83 c0 01	 add	 eax, 1
  001af	89 45 d4	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001b2	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001b5	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  001ba	33 c0		 xor	 eax, eax
  001bc	75 dd		 jne	 SHORT $LN34@G_BeginRec
  001be	eb 23		 jmp	 SHORT $LN36@G_BeginRec
$LN38@G_BeginRec:

; 3131 : 		else
; 3132 : 			WRITEUINT8(demo_p,0);

  001c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _demo_p
  001c5	89 45 d0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001c8	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001cb	c6 00 00	 mov	 BYTE PTR [eax], 0
  001ce	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001d1	83 c0 01	 add	 eax, 1
  001d4	89 45 d0	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  001d7	8b 45 d0	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  001da	a3 00 00 00 00	 mov	 DWORD PTR _demo_p, eax
  001df	33 c0		 xor	 eax, eax
  001e1	75 dd		 jne	 SHORT $LN38@G_BeginRec
$LN36@G_BeginRec:

; 3133 : 	}

  001e3	eb 9a		 jmp	 SHORT $LN29@G_BeginRec
$LN30@G_BeginRec:

; 3134 : 
; 3135 : 	memset(oldcmd, 0, sizeof (oldcmd));

  001e5	68 00 01 00 00	 push	 256			; 00000100H
  001ea	6a 00		 push	 0
  001ec	68 00 00 00 00	 push	 OFFSET _oldcmd
  001f1	e8 00 00 00 00	 call	 _memset
  001f6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3136 : }

  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c3		 ret	 0
_G_BeginRecording ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_RecordDemo
_TEXT	SEGMENT
_maxsize$ = -4						; size = 4
_name$ = 8						; size = 4
_G_RecordDemo PROC					; COMDAT

; 3095 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3096 : 	INT32 maxsize;
; 3097 : 
; 3098 : 	strcpy(demoname, name);

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET _demoname
  00012	e8 00 00 00 00	 call	 _strcpy
  00017	83 c4 08	 add	 esp, 8

; 3099 : 	strcat(demoname, ".lmp");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_04FJOMPALJ@?4lmp@
  0001f	68 00 00 00 00	 push	 OFFSET _demoname
  00024	e8 00 00 00 00	 call	 _strcat
  00029	83 c4 08	 add	 esp, 8

; 3100 : 	maxsize = 1024*1024;

  0002c	c7 45 fc 00 00
	10 00		 mov	 DWORD PTR _maxsize$[ebp], 1048576 ; 00100000H

; 3101 : 	if (M_CheckParm("-maxdemo") && M_IsNextParm())

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_08CJDGAKJF@?9maxdemo@
  00038	e8 00 00 00 00	 call	 _M_CheckParm
  0003d	83 c4 04	 add	 esp, 4
  00040	85 c0		 test	 eax, eax
  00042	74 1d		 je	 SHORT $LN2@G_RecordDe
  00044	e8 00 00 00 00	 call	 _M_IsNextParm
  00049	85 c0		 test	 eax, eax
  0004b	74 14		 je	 SHORT $LN2@G_RecordDe

; 3102 : 		maxsize = atoi(M_GetNextParm()) * 1024;

  0004d	e8 00 00 00 00	 call	 _M_GetNextParm
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _atoi
  00058	83 c4 04	 add	 esp, 4
  0005b	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  0005e	89 45 fc	 mov	 DWORD PTR _maxsize$[ebp], eax
$LN2@G_RecordDe:

; 3103 : //	if (demobuffer)
; 3104 : //		free(demobuffer);
; 3105 : 	demobuffer = malloc(maxsize);

  00061	8b 45 fc	 mov	 eax, DWORD PTR _maxsize$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _malloc
  0006a	83 c4 04	 add	 esp, 4
  0006d	a3 00 00 00 00	 mov	 DWORD PTR _demobuffer, eax

; 3106 : 	demoend = demobuffer + maxsize;

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR _demobuffer
  00077	03 45 fc	 add	 eax, DWORD PTR _maxsize$[ebp]
  0007a	a3 00 00 00 00	 mov	 DWORD PTR _demoend, eax

; 3107 : 
; 3108 : 	demorecording = true;

  0007f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _demorecording, 1

; 3109 : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_G_RecordDemo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_SaveGame
_TEXT	SEGMENT
_length$1 = -288					; size = 4
_name$2 = -284						; size = 16
_backup$ = -268						; size = 4
_savename$ = -264					; size = 256
_saved$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_savegameslot$ = 8					; size = 4
_G_SaveGame PROC					; COMDAT

; 2797 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2798 : 	boolean saved;
; 2799 : 	char savename[256] = "";

  00016	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0001b	88 85 f8 fe ff
	ff		 mov	 BYTE PTR _savename$[ebp], al
  00021	68 ff 00 00 00	 push	 255			; 000000ffH
  00026	6a 00		 push	 0
  00028	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _savename$[ebp+1]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2800 : 	const char *backup;
; 2801 : 
; 2802 : 	sprintf(savename, savegamename, savegameslot);

  00037	8b 45 08	 mov	 eax, DWORD PTR _savegameslot$[ebp]
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET _savegamename
  00040	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _savename$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _sprintf
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2803 : 	backup = va("%s",savename);

  0004f	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _savename$[ebp]
  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0005b	e8 00 00 00 00	 call	 _va
  00060	83 c4 08	 add	 esp, 8
  00063	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _backup$[ebp], eax

; 2804 : 
; 2805 : 	gameaction = ga_nothing;

  00069	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 2806 : 	{
; 2807 : 		char name[VERSIONSIZE];
; 2808 : 		size_t length;
; 2809 : 
; 2810 : 		save_p = savebuffer = (UINT8 *)malloc(SAVEGAMESIZE);

  00073	68 00 04 00 00	 push	 1024			; 00000400H
  00078	e8 00 00 00 00	 call	 _malloc
  0007d	83 c4 04	 add	 esp, 4
  00080	a3 00 00 00 00	 mov	 DWORD PTR _savebuffer, eax
  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  0008a	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2811 : 		if (!save_p)

  0008f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _save_p, 0
  00096	75 12		 jne	 SHORT $LN2@G_SaveGame

; 2812 : 		{
; 2813 : 			CONS_Printf("No more free memory for savegame\n");

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EMECLDHI@No?5more?5free?5memory?5for?5savegam@
  0009d	e8 00 00 00 00	 call	 _CONS_Printf
  000a2	83 c4 04	 add	 esp, 4

; 2814 : 			return;

  000a5	e9 1c 01 00 00	 jmp	 $LN6@G_SaveGame
$LN2@G_SaveGame:

; 2815 : 		}
; 2816 : 
; 2817 : 		memset(name, 0, sizeof (name));

  000aa	6a 10		 push	 16			; 00000010H
  000ac	6a 00		 push	 0
  000ae	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _name$2[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _memset
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2818 : 		sprintf(name, "version %d", VERSION);

  000bd	68 c8 00 00 00	 push	 200			; 000000c8H
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BHAAJMLE@version?5?$CFd@
  000c7	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _name$2[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _sprintf
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2819 : 		WRITEMEM(save_p, name, VERSIONSIZE);

  000d6	6a 10		 push	 16			; 00000010H
  000d8	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _name$2[ebp]
  000de	50		 push	 eax
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 _memcpy
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f3	83 c0 10	 add	 eax, 16			; 00000010H
  000f6	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2820 : 
; 2821 : 		P_SaveGame();

  000fb	e8 00 00 00 00	 call	 _P_SaveGame
  00100	90		 npad	 1

; 2822 : 
; 2823 : 		length = SAVEGAMESIZE;

  00101	c7 85 e0 fe ff
	ff 00 04 00 00	 mov	 DWORD PTR _length$1[ebp], 1024 ; 00000400H

; 2824 : 		saved = FIL_WriteFile(backup, savebuffer, length);

  0010b	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _length$1[ebp]
  00111	50		 push	 eax
  00112	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _savebuffer
  00118	51		 push	 ecx
  00119	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _backup$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 _FIL_WriteFile
  00125	83 c4 0c	 add	 esp, 12			; 0000000cH
  00128	89 45 f8	 mov	 DWORD PTR _saved$[ebp], eax

; 2825 : 		free(savebuffer);

  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _free
  00136	83 c4 04	 add	 esp, 4

; 2826 : 		save_p = savebuffer = NULL;

  00139	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savebuffer, 0
  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  00148	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2827 : 
; 2828 : 		if (lastmapsaved == spstage_end)

  0014d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _lastmapsaved
  00154	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _spstage_end
  0015b	3b c1		 cmp	 eax, ecx
  0015d	75 0a		 jne	 SHORT $LN3@G_SaveGame

; 2829 : 			gamecomplete = true;

  0015f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _gamecomplete, 1
$LN3@G_SaveGame:

; 2830 : 	}
; 2831 : 
; 2832 : 	gameaction = ga_nothing;

  00169	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 2833 : 
; 2834 : 	if (cv_debug && saved)

  00173	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0017a	74 27		 je	 SHORT $LN4@G_SaveGame
  0017c	83 7d f8 00	 cmp	 DWORD PTR _saved$[ebp], 0
  00180	74 21		 je	 SHORT $LN4@G_SaveGame

; 2835 : 		CONS_Printf("%s", text[GGSAVED]);

  00182	b8 04 00 00 00	 mov	 eax, 4
  00187	69 c8 e7 00 00
	00		 imul	 ecx, eax, 231
  0018d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00193	52		 push	 edx
  00194	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00199	e8 00 00 00 00	 call	 _CONS_Printf
  0019e	83 c4 08	 add	 esp, 8
  001a1	eb 23		 jmp	 SHORT $LN6@G_SaveGame
$LN4@G_SaveGame:

; 2836 : 	else if (!saved)

  001a3	83 7d f8 00	 cmp	 DWORD PTR _saved$[ebp], 0
  001a7	75 1d		 jne	 SHORT $LN6@G_SaveGame

; 2837 : 		CONS_Printf("Error while writing to %s for save slot %u, base: %s\n",backup,savegameslot,savegamename);

  001a9	68 00 00 00 00	 push	 OFFSET _savegamename
  001ae	8b 45 08	 mov	 eax, DWORD PTR _savegameslot$[ebp]
  001b1	50		 push	 eax
  001b2	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _backup$[ebp]
  001b8	51		 push	 ecx
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@EKDKPKCF@Error?5while?5writing?5to?5?$CFs?5for?5s@
  001be	e8 00 00 00 00	 call	 _CONS_Printf
  001c3	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@G_SaveGame:

; 2838 : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cc	33 cd		 xor	 ecx, ebp
  001ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c3		 ret	 0
_G_SaveGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_SaveGameData
_TEXT	SEGMENT
tv133 = -109						; size = 1
_p_tmp$1 = -44						; size = 4
_p_tmp$2 = -40						; size = 4
_p_tmp$3 = -36						; size = 4
_p_tmp$4 = -32						; size = 4
_p_tmp$5 = -28						; size = 4
_p_tmp$6 = -24						; size = 4
_p_tmp$7 = -20						; size = 4
_btemp$ = -13						; size = 1
_stemp$ = -12						; size = 4
_i$ = -8						; size = 4
_length$ = -4						; size = 4
_G_SaveGameData PROC					; COMDAT

; 2672 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2673 : 	size_t length;
; 2674 : 	INT32 i;
; 2675 : 	UINT32 stemp;
; 2676 : 	UINT8 btemp;
; 2677 : 
; 2678 : 	if (!gamedataloaded)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gamedataloaded, 0
  00010	75 05		 jne	 SHORT $LN32@G_SaveGame

; 2679 : 		return;

  00012	e9 92 02 00 00	 jmp	 $LN1@G_SaveGame
$LN32@G_SaveGame:

; 2680 : 
; 2681 : 	save_p = savebuffer = (UINT8 *)malloc(GAMEDATASIZE);

  00017	68 00 20 00 00	 push	 8192			; 00002000H
  0001c	e8 00 00 00 00	 call	 _malloc
  00021	83 c4 04	 add	 esp, 4
  00024	a3 00 00 00 00	 mov	 DWORD PTR _savebuffer, eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  0002e	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2682 : 	if (!save_p)

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _save_p, 0
  0003a	75 12		 jne	 SHORT $LN33@G_SaveGame

; 2683 : 	{
; 2684 : 		CONS_Printf("No more free memory for saving game data\n");

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@LPFACEEB@No?5more?5free?5memory?5for?5saving?5@
  00041	e8 00 00 00 00	 call	 _CONS_Printf
  00046	83 c4 04	 add	 esp, 4

; 2685 : 		return;

  00049	e9 5b 02 00 00	 jmp	 $LN1@G_SaveGame
$LN33@G_SaveGame:

; 2686 : 	}
; 2687 : 
; 2688 : 	if (modifiedgame && !savemoddata)

  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00055	74 30		 je	 SHORT $LN34@G_SaveGame
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  0005e	75 27		 jne	 SHORT $LN34@G_SaveGame

; 2689 : 	{
; 2690 : 		free(savebuffer);

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _free
  0006b	83 c4 04	 add	 esp, 4

; 2691 : 		save_p = savebuffer = NULL;

  0006e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savebuffer, 0
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  0007d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2692 : 		return;

  00082	e9 22 02 00 00	 jmp	 $LN1@G_SaveGame
$LN34@G_SaveGame:

; 2693 : 	}
; 2694 : 
; 2695 : 	// Cipher
; 2696 : 	// Author: Caesar <caesar@rome.it>
; 2697 : 	//
; 2698 : 	WRITEUINT32(save_p, totalplaytime);

  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  0008c	89 45 ec	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0008f	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _totalplaytime
  00098	89 08		 mov	 DWORD PTR [eax], ecx
  0009a	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0009d	83 c0 04	 add	 eax, 4
  000a0	89 45 ec	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  000a3	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  000a6	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000ab	33 c0		 xor	 eax, eax
  000ad	75 d8		 jne	 SHORT $LN34@G_SaveGame

; 2699 : 	stemp = (grade*2)+25;

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  000b4	8d 4c 00 19	 lea	 ecx, DWORD PTR [eax+eax+25]
  000b8	89 4d f4	 mov	 DWORD PTR _stemp$[ebp], ecx
$LN7@G_SaveGame:

; 2700 : 	WRITEUINT32(save_p, stemp);

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000c0	89 45 e8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000c3	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR _stemp$[ebp]
  000c9	89 08		 mov	 DWORD PTR [eax], ecx
  000cb	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000ce	83 c0 04	 add	 eax, 4
  000d1	89 45 e8	 mov	 DWORD PTR _p_tmp$6[ebp], eax
  000d4	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$6[ebp]
  000d7	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  000dc	33 c0		 xor	 eax, eax
  000de	75 db		 jne	 SHORT $LN7@G_SaveGame

; 2701 : 
; 2702 : 	for (i = 0; i < NUMMAPS; i++)

  000e0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e7	eb 09		 jmp	 SHORT $LN10@G_SaveGame
$LN8@G_SaveGame:
  000e9	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@G_SaveGame:
  000f2	81 7d f8 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  000f9	7d 2d		 jge	 SHORT $LN9@G_SaveGame
$LN13@G_SaveGame:

; 2703 : 		WRITEUINT8(save_p, mapvisited[i]);

  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00100	89 45 e4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00103	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00109	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR _mapvisited[ecx]
  0010f	88 10		 mov	 BYTE PTR [eax], dl
  00111	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00114	83 c0 01	 add	 eax, 1
  00117	89 45 e4	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0011a	8b 45 e4	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0011d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00122	33 c0		 xor	 eax, eax
  00124	75 d5		 jne	 SHORT $LN13@G_SaveGame
  00126	eb c1		 jmp	 SHORT $LN8@G_SaveGame
$LN9@G_SaveGame:

; 2704 : 
; 2705 : 	for (i = 0; i < MAXEMBLEMS; i++)

  00128	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0012f	eb 09		 jmp	 SHORT $LN16@G_SaveGame
$LN14@G_SaveGame:
  00131	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00134	83 c0 01	 add	 eax, 1
  00137	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN16@G_SaveGame:
  0013a	81 7d f8 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00141	7d 45		 jge	 SHORT $LN15@G_SaveGame

; 2706 : 	{
; 2707 : 		btemp = (UINT8)(emblemlocations[i].collected+125+(i/4));

  00143	6b 45 f8 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00147	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  0014e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00151	99		 cdq
  00152	83 e2 03	 and	 edx, 3
  00155	03 c2		 add	 eax, edx
  00157	c1 f8 02	 sar	 eax, 2
  0015a	8d 54 01 7d	 lea	 edx, DWORD PTR [ecx+eax+125]
  0015e	88 55 f3	 mov	 BYTE PTR _btemp$[ebp], dl
$LN19@G_SaveGame:

; 2708 : 		WRITEUINT8(save_p, btemp);

  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00166	89 45 e0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00169	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0016c	8a 4d f3	 mov	 cl, BYTE PTR _btemp$[ebp]
  0016f	88 08		 mov	 BYTE PTR [eax], cl
  00171	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00174	83 c0 01	 add	 eax, 1
  00177	89 45 e0	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0017a	8b 45 e0	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0017d	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00182	33 c0		 xor	 eax, eax
  00184	75 db		 jne	 SHORT $LN19@G_SaveGame

; 2709 : 	}

  00186	eb a9		 jmp	 SHORT $LN14@G_SaveGame
$LN15@G_SaveGame:

; 2710 : 
; 2711 : 	btemp = (UINT8)(savemoddata || modifiedgame);

  00188	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  0018f	75 0f		 jne	 SHORT $LN36@G_SaveGame
  00191	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00198	75 06		 jne	 SHORT $LN36@G_SaveGame
  0019a	c6 45 93 00	 mov	 BYTE PTR tv133[ebp], 0
  0019e	eb 04		 jmp	 SHORT $LN37@G_SaveGame
$LN36@G_SaveGame:
  001a0	c6 45 93 01	 mov	 BYTE PTR tv133[ebp], 1
$LN37@G_SaveGame:
  001a4	8a 45 93	 mov	 al, BYTE PTR tv133[ebp]
  001a7	88 45 f3	 mov	 BYTE PTR _btemp$[ebp], al
$LN22@G_SaveGame:

; 2712 : 	WRITEUINT8(save_p, btemp);

  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001af	89 45 dc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001b2	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001b5	8a 4d f3	 mov	 cl, BYTE PTR _btemp$[ebp]
  001b8	88 08		 mov	 BYTE PTR [eax], cl
  001ba	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001bd	83 c0 01	 add	 eax, 1
  001c0	89 45 dc	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  001c3	8b 45 dc	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  001c6	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001cb	33 c0		 xor	 eax, eax
  001cd	75 db		 jne	 SHORT $LN22@G_SaveGame

; 2713 : 	stemp = (timesbeaten-2)*4;

  001cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _timesbeaten
  001d4	8d 0c 85 f8 ff
	ff ff		 lea	 ecx, DWORD PTR [eax*4-8]
  001db	89 4d f4	 mov	 DWORD PTR _stemp$[ebp], ecx
$LN25@G_SaveGame:

; 2714 : 	WRITEUINT32(save_p, stemp);

  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  001e3	89 45 d8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001e6	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001e9	8b 4d f4	 mov	 ecx, DWORD PTR _stemp$[ebp]
  001ec	89 08		 mov	 DWORD PTR [eax], ecx
  001ee	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001f1	83 c0 04	 add	 eax, 4
  001f4	89 45 d8	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  001f7	8b 45 d8	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  001fa	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  001ff	33 c0		 xor	 eax, eax
  00201	75 db		 jne	 SHORT $LN25@G_SaveGame

; 2715 : 
; 2716 : 	for (i = 0; i < NUMMAPS; i++)

  00203	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0020a	eb 09		 jmp	 SHORT $LN28@G_SaveGame
$LN26@G_SaveGame:
  0020c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0020f	83 c0 01	 add	 eax, 1
  00212	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN28@G_SaveGame:
  00215	81 7d f8 0b 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1035 ; 0000040bH
  0021c	7d 2e		 jge	 SHORT $LN27@G_SaveGame
$LN31@G_SaveGame:

; 2717 : 		WRITEUINT32(save_p, timedata[i].time);

  0021e	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00223	89 45 d4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00226	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00229	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0022c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _timedata[ecx*4]
  00233	89 10		 mov	 DWORD PTR [eax], edx
  00235	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00238	83 c0 04	 add	 eax, 4
  0023b	89 45 d4	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0023e	8b 45 d4	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00241	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
  00246	33 c0		 xor	 eax, eax
  00248	75 d4		 jne	 SHORT $LN31@G_SaveGame
  0024a	eb c0		 jmp	 SHORT $LN26@G_SaveGame
$LN27@G_SaveGame:

; 2718 : 
; 2719 : 	length = save_p - savebuffer;

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  00251	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _savebuffer
  00257	89 45 fc	 mov	 DWORD PTR _length$[ebp], eax

; 2720 : 
; 2721 : 	FIL_WriteFile(va(pandf, srb2home, gamedatafilename), savebuffer, length);

  0025a	8b 45 fc	 mov	 eax, DWORD PTR _length$[ebp]
  0025d	50		 push	 eax
  0025e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _savebuffer
  00264	51		 push	 ecx
  00265	68 00 00 00 00	 push	 OFFSET _gamedatafilename
  0026a	68 00 00 00 00	 push	 OFFSET _srb2home
  0026f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _pandf
  00275	52		 push	 edx
  00276	e8 00 00 00 00	 call	 _va
  0027b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027e	50		 push	 eax
  0027f	e8 00 00 00 00	 call	 _FIL_WriteFile
  00284	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2722 : 	free(savebuffer);

  00287	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 _free
  00292	83 c4 04	 add	 esp, 4

; 2723 : 	save_p = savebuffer = NULL;

  00295	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savebuffer, 0
  0029f	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  002a4	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax
$LN1@G_SaveGame:

; 2724 : }

  002a9	5f		 pop	 edi
  002aa	5e		 pop	 esi
  002ab	5b		 pop	 ebx
  002ac	8b e5		 mov	 esp, ebp
  002ae	5d		 pop	 ebp
  002af	c3		 ret	 0
_G_SaveGameData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_LoadGame
_TEXT	SEGMENT
_savename$ = -280					; size = 255
_vcheck$ = -24						; size = 16
_length$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_slot$ = 8						; size = 4
_mapoverride$ = 12					; size = 2
_G_LoadGame PROC					; COMDAT

; 2733 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2734 : 	size_t length;
; 2735 : 	char vcheck[VERSIONSIZE];
; 2736 : 	char savename[255];
; 2737 : 
; 2738 : 	sprintf(savename, savegamename, slot);

  00016	8b 45 08	 mov	 eax, DWORD PTR _slot$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _savegamename
  0001f	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _savename$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _sprintf
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2739 : 
; 2740 : 	length = FIL_ReadFile(savename, &savebuffer);

  0002e	68 00 00 00 00	 push	 OFFSET _savebuffer
  00033	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _savename$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _FIL_ReadFile
  0003f	83 c4 08	 add	 esp, 8
  00042	89 45 f8	 mov	 DWORD PTR _length$[ebp], eax

; 2741 : 	if (!length)

  00045	83 7d f8 00	 cmp	 DWORD PTR _length$[ebp], 0
  00049	75 26		 jne	 SHORT $LN2@G_LoadGame

; 2742 : 	{
; 2743 : 		CONS_Printf(text[CANTREADFILE], savename);

  0004b	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _savename$[ebp]
  00051	50		 push	 eax
  00052	b9 04 00 00 00	 mov	 ecx, 4
  00057	69 d1 01 01 00
	00		 imul	 edx, ecx, 257
  0005d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _CONS_Printf
  00069	83 c4 08	 add	 esp, 8

; 2744 : 		return;

  0006c	e9 2d 01 00 00	 jmp	 $LN1@G_LoadGame
$LN2@G_LoadGame:

; 2745 : 	}
; 2746 : 
; 2747 : 	save_p = savebuffer;

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  00076	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2748 : 
; 2749 : 	memset(vcheck, 0, sizeof (vcheck));

  0007b	6a 10		 push	 16			; 00000010H
  0007d	6a 00		 push	 0
  0007f	8d 45 e8	 lea	 eax, DWORD PTR _vcheck$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _memset
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2750 : 	sprintf(vcheck, "version %d", VERSION);

  0008b	68 c8 00 00 00	 push	 200			; 000000c8H
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BHAAJMLE@version?5?$CFd@
  00095	8d 45 e8	 lea	 eax, DWORD PTR _vcheck$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _sprintf
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2751 : 	if (strcmp((const char *)save_p, (const char *)vcheck))

  000a1	8d 45 e8	 lea	 eax, DWORD PTR _vcheck$[ebp]
  000a4	50		 push	 eax
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _save_p
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _strcmp
  000b1	83 c4 08	 add	 esp, 8
  000b4	85 c0		 test	 eax, eax
  000b6	74 38		 je	 SHORT $LN3@G_LoadGame

; 2752 : 	{
; 2753 : 		M_StartMessage("Save game from different version\n\nPress ESC\n", NULL, MM_NOTHING);

  000b8	6a 00		 push	 0
  000ba	6a 00		 push	 0
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DIALMBDD@Save?5game?5from?5different?5versio@
  000c1	e8 00 00 00 00	 call	 _M_StartMessage
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2754 : 		Z_Free(savebuffer);

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _Z_Free
  000d4	83 c4 04	 add	 esp, 4

; 2755 : 		save_p = savebuffer = NULL;

  000d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savebuffer, 0
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  000e6	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2756 : 		return; // bad version

  000eb	e9 ae 00 00 00	 jmp	 $LN1@G_LoadGame
$LN3@G_LoadGame:

; 2757 : 	}
; 2758 : 	save_p += VERSIONSIZE;

  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _save_p
  000f5	83 c0 10	 add	 eax, 16			; 00000010H
  000f8	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2759 : 
; 2760 : //	if (demoplayback) // reset game engine
; 2761 : //		G_StopDemo();
; 2762 : 
; 2763 : //	paused = false;
; 2764 : //	automapactive = false;
; 2765 : 
; 2766 : 	// dearchive all the modifications
; 2767 : 	if (!P_LoadGame(mapoverride))

  000fd	0f b7 45 0c	 movzx	 eax, WORD PTR _mapoverride$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _P_LoadGame
  00107	83 c4 04	 add	 esp, 4
  0010a	85 c0		 test	 eax, eax
  0010c	75 3b		 jne	 SHORT $LN4@G_LoadGame

; 2768 : 	{
; 2769 : 		M_StartMessage("savegame file corrupted\n\nPress ESC\n", NULL, MM_NOTHING);

  0010e	6a 00		 push	 0
  00110	6a 00		 push	 0
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@JNNEOGBG@savegame?5file?5corrupted?6?6Press?5@
  00117	e8 00 00 00 00	 call	 _M_StartMessage
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2770 : 		Command_ExitGame_f();

  0011f	e8 00 00 00 00	 call	 _Command_ExitGame_f
  00124	90		 npad	 1

; 2771 : 		Z_Free(savebuffer);

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _Z_Free
  00130	83 c4 04	 add	 esp, 4

; 2772 : 		save_p = savebuffer = NULL;

  00133	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savebuffer, 0
  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  00142	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2773 : 		return;

  00147	eb 55		 jmp	 SHORT $LN1@G_LoadGame
$LN4@G_LoadGame:

; 2774 : 	}
; 2775 : 
; 2776 : 	// done
; 2777 : 	Z_Free(savebuffer);

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 _Z_Free
  00154	83 c4 04	 add	 esp, 4

; 2778 : 	save_p = savebuffer = NULL;

  00157	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savebuffer, 0
  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR _savebuffer
  00166	a3 00 00 00 00	 mov	 DWORD PTR _save_p, eax

; 2779 : 
; 2780 : //	gameaction = ga_nothing;
; 2781 : //	G_SetGamestate(GS_LEVEL);
; 2782 : 	displayplayer = consoleplayer;

  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00170	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax

; 2783 : 	multiplayer = splitscreen = false;

  00175	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _splitscreen, 0
  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR _splitscreen
  00184	a3 00 00 00 00	 mov	 DWORD PTR _multiplayer, eax

; 2784 : 
; 2785 : //	G_DeferedInitNew(sk_medium, G_BuildMapName(1), 0, 0, 1);
; 2786 : 	if (setsizeneeded)

  00189	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setsizeneeded, 0
  00190	74 06		 je	 SHORT $LN5@G_LoadGame

; 2787 : 		R_ExecuteSetViewSize();

  00192	e8 00 00 00 00	 call	 _R_ExecuteSetViewSize
  00197	90		 npad	 1
$LN5@G_LoadGame:

; 2788 : 
; 2789 : 	CON_ToggleOff();

  00198	e8 00 00 00 00	 call	 _CON_ToggleOff
  0019d	90		 npad	 1
$LN1@G_LoadGame:

; 2790 : }

  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	5b		 pop	 ebx
  001a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a4	33 cd		 xor	 ecx, ebp
  001a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
_G_LoadGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DeferedPlayDemo
_TEXT	SEGMENT
_name$ = 8						; size = 4
_G_DeferedPlayDemo PROC					; COMDAT

; 3142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3143 : 	COM_BufAddText("playdemo \"");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0L@ODFOEFDE@playdemo?5?$CC@
  0000e	e8 00 00 00 00	 call	 _COM_BufAddText
  00013	83 c4 04	 add	 esp, 4

; 3144 : 	COM_BufAddText(name);

  00016	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _COM_BufAddText
  0001f	83 c4 04	 add	 esp, 4

; 3145 : 	COM_BufAddText("\"\n");

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_02MBJIFMOJ@?$CC?6@
  00027	e8 00 00 00 00	 call	 _COM_BufAddText
  0002c	83 c4 04	 add	 esp, 4

; 3146 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_G_DeferedPlayDemo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DoLoadLevel
_TEXT	SEGMENT
_i$ = -4						; size = 4
_resetplayer$ = 8					; size = 4
_G_DoLoadLevel PROC					; COMDAT

; 1387 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1388 : 	INT32 i;
; 1389 : 
; 1390 : 	if (server || (adminplayer == consoleplayer))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 0d		 jne	 SHORT $LN9@G_DoLoadLe
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0001d	75 0f		 jne	 SHORT $LN8@G_DoLoadLe
$LN9@G_DoLoadLe:

; 1391 : 		CV_StealthSetValue(&cv_objectplace, 0); // Make sure objectplace is OFF when you first start the level!

  0001f	6a 00		 push	 0
  00021	68 00 00 00 00	 push	 OFFSET _cv_objectplace
  00026	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0002b	83 c4 08	 add	 esp, 8
$LN8@G_DoLoadLe:

; 1392 : 
; 1393 : 	levelstarttic = gametic; // for time calculation

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR _gametic
  00033	a3 00 00 00 00	 mov	 DWORD PTR _levelstarttic, eax

; 1394 : 
; 1395 : 	if (wipegamestate == GS_LEVEL)

  00038	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _wipegamestate, 1
  0003f	75 0a		 jne	 SHORT $LN10@G_DoLoadLe

; 1396 : 		wipegamestate = -1; // force a wipe

  00041	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _wipegamestate, -1
$LN10@G_DoLoadLe:

; 1397 : 
; 1398 : 	if (gamestate == GS_INTERMISSION)

  0004b	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00052	75 06		 jne	 SHORT $LN11@G_DoLoadLe

; 1399 : 		Y_EndIntermission();

  00054	e8 00 00 00 00	 call	 _Y_EndIntermission
  00059	90		 npad	 1
$LN11@G_DoLoadLe:

; 1400 : 	G_SetGamestate(GS_LEVEL);

  0005a	6a 01		 push	 1
  0005c	e8 00 00 00 00	 call	 _G_SetGamestate
  00061	83 c4 04	 add	 esp, 4

; 1401 : 	for (i = 0; i < MAXPLAYERS; i++)

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006b	eb 09		 jmp	 SHORT $LN4@G_DoLoadLe
$LN2@G_DoLoadLe:
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00070	83 c0 01	 add	 eax, 1
  00073	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_DoLoadLe:
  00076	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0007a	7d 36		 jge	 SHORT $LN3@G_DoLoadLe

; 1402 : 	{
; 1403 : 		if (resetplayer || (playeringame[i] && players[i].playerstate == PST_DEAD))

  0007c	83 7d 08 00	 cmp	 DWORD PTR _resetplayer$[ebp], 0
  00080	75 1d		 jne	 SHORT $LN13@G_DoLoadLe
  00082	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00085	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0008d	74 21		 je	 SHORT $LN12@G_DoLoadLe
  0008f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00096	83 b8 04 00 00
	00 01		 cmp	 DWORD PTR _players[eax+4], 1
  0009d	75 11		 jne	 SHORT $LN12@G_DoLoadLe
$LN13@G_DoLoadLe:

; 1404 : 			players[i].playerstate = PST_REBORN;

  0009f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000a6	c7 80 04 00 00
	00 02 00 00 00	 mov	 DWORD PTR _players[eax+4], 2
$LN12@G_DoLoadLe:

; 1405 : 	}

  000b0	eb bb		 jmp	 SHORT $LN2@G_DoLoadLe
$LN3@G_DoLoadLe:

; 1406 : #if 0 //this never worked like intended anyway! <<;
; 1407 : 	if (resetplayer)
; 1408 : 	{
; 1409 : 		// Don't carry over custom music change to another map.
; 1410 : 		mapmusic &= ~2048;
; 1411 : 	}
; 1412 : #endif
; 1413 : 	if (!P_SetupLevel(gamemap, false))

  000b2	6a 00		 push	 0
  000b4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _P_SetupLevel
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 c0		 test	 eax, eax
  000c6	75 0b		 jne	 SHORT $LN14@G_DoLoadLe

; 1414 : 	{
; 1415 : 		// fail so reset game stuff
; 1416 : 		Command_ExitGame_f();

  000c8	e8 00 00 00 00	 call	 _Command_ExitGame_f
  000cd	90		 npad	 1

; 1417 : 		return;

  000ce	e9 71 01 00 00	 jmp	 $LN19@G_DoLoadLe
$LN14@G_DoLoadLe:

; 1418 : 	}
; 1419 : 
; 1420 : 	if (!resetplayer)

  000d3	83 7d 08 00	 cmp	 DWORD PTR _resetplayer$[ebp], 0
  000d7	75 06		 jne	 SHORT $LN15@G_DoLoadLe

; 1421 : 		P_FindEmerald();

  000d9	e8 00 00 00 00	 call	 _P_FindEmerald
  000de	90		 npad	 1
$LN15@G_DoLoadLe:

; 1422 : 
; 1423 : 	displayplayer = consoleplayer; // view the guy you are playing

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  000e4	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax

; 1424 : 	if (!splitscreen)

  000e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000f0	75 0a		 jne	 SHORT $LN16@G_DoLoadLe

; 1425 : 		secondarydisplayplayer = consoleplayer;

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  000f7	a3 00 00 00 00	 mov	 DWORD PTR _secondarydisplayplayer, eax
$LN16@G_DoLoadLe:

; 1426 : 
; 1427 : 	gameaction = ga_nothing;

  000fc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 1428 : #ifdef PARANOIA
; 1429 : 	Z_CheckHeap(-2);
; 1430 : #endif
; 1431 : 
; 1432 : 	if (cv_chasecam.value)

  00106	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  0010d	74 1d		 je	 SHORT $LN17@G_DoLoadLe

; 1433 : 		P_ResetCamera(&players[displayplayer], &camera);

  0010f	68 00 00 00 00	 push	 OFFSET _camera
  00114	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0011e	05 00 00 00 00	 add	 eax, OFFSET _players
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _P_ResetCamera
  00129	83 c4 08	 add	 esp, 8
$LN17@G_DoLoadLe:

; 1434 : 	if (cv_chasecam2.value && splitscreen)

  0012c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  00133	74 26		 je	 SHORT $LN18@G_DoLoadLe
  00135	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0013c	74 1d		 je	 SHORT $LN18@G_DoLoadLe

; 1435 : 		P_ResetCamera(&players[secondarydisplayplayer], &camera2);

  0013e	68 00 00 00 00	 push	 OFFSET _camera2
  00143	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0014d	05 00 00 00 00	 add	 eax, OFFSET _players
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 _P_ResetCamera
  00158	83 c4 08	 add	 esp, 8
$LN18@G_DoLoadLe:

; 1436 : 
; 1437 : 	// clear cmd building stuff
; 1438 : 	memset(gamekeydown, 0, sizeof (gamekeydown));

  0015b	68 e4 01 00 00	 push	 484			; 000001e4H
  00160	6a 00		 push	 0
  00162	68 00 00 00 00	 push	 OFFSET _gamekeydown
  00167	e8 00 00 00 00	 call	 _memset
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1439 : 	for (i = 0;i < JOYAXISSET; i++)

  0016f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00176	eb 09		 jmp	 SHORT $LN7@G_DoLoadLe
$LN5@G_DoLoadLe:
  00178	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0017b	83 c0 01	 add	 eax, 1
  0017e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@G_DoLoadLe:
  00181	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  00185	7d 3a		 jge	 SHORT $LN6@G_DoLoadLe

; 1440 : 	{
; 1441 : 		joyxmove[i] = joyymove[i] = 0;

  00187	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0018a	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joyymove[eax*4], 0
  00195	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00198	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joyxmove[ecx*4], 0

; 1442 : 		joy2xmove[i] = joy2ymove[i] = 0;

  001a3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001a6	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joy2ymove[eax*4], 0
  001b1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001b4	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joy2xmove[ecx*4], 0

; 1443 : 	}

  001bf	eb b7		 jmp	 SHORT $LN5@G_DoLoadLe
$LN6@G_DoLoadLe:

; 1444 : 	mousex = mousey = 0;

  001c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mousey, 0
  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _mousey
  001d0	a3 00 00 00 00	 mov	 DWORD PTR _mousex, eax

; 1445 : 	mouse2x = mouse2y = 0;

  001d5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mouse2y, 0
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse2y
  001e4	a3 00 00 00 00	 mov	 DWORD PTR _mouse2x, eax

; 1446 : 
; 1447 : 	// clear hud messages remains (usually from game startup)
; 1448 : 	CON_ClearHUD();

  001e9	e8 00 00 00 00	 call	 _CON_ClearHUD
  001ee	90		 npad	 1

; 1449 : 
; 1450 : 	if (!(cv_debug || devparm || modifiedgame) && !(multiplayer || netgame))

  001ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  001f6	75 4c		 jne	 SHORT $LN19@G_DoLoadLe
  001f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  001ff	75 43		 jne	 SHORT $LN19@G_DoLoadLe
  00201	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00208	75 3a		 jne	 SHORT $LN19@G_DoLoadLe
  0020a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00211	75 31		 jne	 SHORT $LN19@G_DoLoadLe
  00213	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0021a	75 28		 jne	 SHORT $LN19@G_DoLoadLe

; 1451 : 		SetSavedSkin(0, players[0].skin, players[0].prefcolor);

  0021c	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00221	6b c8 00	 imul	 ecx, eax, 0
  00224	8b 91 fc 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+252]
  0022a	52		 push	 edx
  0022b	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00230	6b c8 00	 imul	 ecx, eax, 0
  00233	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+184]
  00239	52		 push	 edx
  0023a	6a 00		 push	 0
  0023c	e8 00 00 00 00	 call	 _SetSavedSkin
  00241	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@G_DoLoadLe:

; 1452 : }

  00244	5f		 pop	 edi
  00245	5e		 pop	 esi
  00246	5b		 pop	 ebx
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
_G_DoLoadLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DeferedInitNew
_TEXT	SEGMENT
_pultmode$ = 8						; size = 4
_mapname$ = 12						; size = 4
_pickedchar$ = 16					; size = 4
_SSSG$ = 20						; size = 4
_FLS$ = 24						; size = 4
_G_DeferedInitNew PROC					; COMDAT

; 2846 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2847 : 	paused = false;

  00009	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 2848 : 
; 2849 : 	if (demoplayback)

  00010	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00017	74 0d		 je	 SHORT $LN2@G_DeferedI

; 2850 : 		COM_BufAddText("stopdemo\n");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_09PLHIKHMP@stopdemo?6@
  0001e	e8 00 00 00 00	 call	 _COM_BufAddText
  00023	83 c4 04	 add	 esp, 4
$LN2@G_DeferedI:

; 2851 : 
; 2852 : 	// this leave the actual game if needed
; 2853 : 	SV_StartSinglePlayerServer();

  00026	e8 00 00 00 00	 call	 _SV_StartSinglePlayerServer
  0002b	90		 npad	 1

; 2854 : 
; 2855 : 	if (splitscreen != SSSG)

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR _splitscreen
  00031	3b 45 14	 cmp	 eax, DWORD PTR _SSSG$[ebp]
  00034	74 0e		 je	 SHORT $LN3@G_DeferedI

; 2856 : 	{
; 2857 : 		splitscreen = SSSG;

  00036	8b 45 14	 mov	 eax, DWORD PTR _SSSG$[ebp]
  00039	a3 00 00 00 00	 mov	 DWORD PTR _splitscreen, eax

; 2858 : 		SplitScreen_OnChange();

  0003e	e8 00 00 00 00	 call	 _SplitScreen_OnChange
  00043	90		 npad	 1
$LN3@G_DeferedI:

; 2859 : 	}
; 2860 : 
; 2861 : 	SetSavedSkin(0, pickedchar, atoi(skins[pickedchar].prefcolor));

  00044	69 45 10 ec 00
	00 00		 imul	 eax, DWORD PTR _pickedchar$[ebp], 236
  0004b	05 81 00 00 00	 add	 eax, OFFSET _skins+129
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _atoi
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _pickedchar$[ebp]
  0005d	51		 push	 ecx
  0005e	6a 00		 push	 0
  00060	e8 00 00 00 00	 call	 _SetSavedSkin
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2862 : 
; 2863 : 	if (mapname)

  00068	83 7d 0c 00	 cmp	 DWORD PTR _mapname$[ebp], 0
  0006c	74 47		 je	 SHORT $LN4@G_DeferedI

; 2864 : 		D_MapChange(M_MapNumber(mapname[3], mapname[4]), gametype, pultmode, 1, 1, false, FLS);

  0006e	8b 45 18	 mov	 eax, DWORD PTR _FLS$[ebp]
  00071	50		 push	 eax
  00072	6a 00		 push	 0
  00074	6a 01		 push	 1
  00076	6a 01		 push	 1
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _pultmode$[ebp]
  0007b	51		 push	 ecx
  0007c	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _gametype
  00083	52		 push	 edx
  00084	b8 01 00 00 00	 mov	 eax, 1
  00089	c1 e0 02	 shl	 eax, 2
  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _mapname$[ebp]
  0008f	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00093	52		 push	 edx
  00094	b8 01 00 00 00	 mov	 eax, 1
  00099	6b c8 03	 imul	 ecx, eax, 3
  0009c	8b 55 0c	 mov	 edx, DWORD PTR _mapname$[ebp]
  0009f	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _M_MapNumber
  000a9	83 c4 08	 add	 esp, 8
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _D_MapChange
  000b2	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN4@G_DeferedI:

; 2865 : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_G_DeferedInitNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_InitNew
_TEXT	SEGMENT
_actnum$1 = -8						; size = 4
_i$ = -4						; size = 4
_pultmode$ = 8						; size = 1
_mapname$ = 12						; size = 4
_resetplayer$ = 16					; size = 4
_skipprecutscene$ = 20					; size = 4
_G_InitNew PROC						; COMDAT

; 2872 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2873 : 	INT32 i;
; 2874 : 
; 2875 : 	if (paused)

  00009	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  00010	85 c0		 test	 eax, eax
  00012	74 0d		 je	 SHORT $LN5@G_InitNew

; 2876 : 	{
; 2877 : 		paused = false;

  00014	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _paused, 0

; 2878 : 		S_ResumeSound();

  0001b	e8 00 00 00 00	 call	 _S_ResumeSound
  00020	90		 npad	 1
$LN5@G_InitNew:

; 2879 : 	}
; 2880 : 
; 2881 : 	if (netgame || multiplayer) // Nice try, haxor.

  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00028	75 09		 jne	 SHORT $LN7@G_InitNew
  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00031	74 07		 je	 SHORT $LN6@G_InitNew
$LN7@G_InitNew:

; 2882 : 		ultimatemode = false;

  00033	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _ultimatemode, 0
$LN6@G_InitNew:

; 2883 : 
; 2884 : 	if (!netgame)

  0003a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00041	75 35		 jne	 SHORT $LN10@G_InitNew

; 2885 : 	{
; 2886 : 		if (!(demoplayback || demorecording))

  00043	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  0004a	75 22		 jne	 SHORT $LN9@G_InitNew
  0004c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demorecording, 0
  00053	75 19		 jne	 SHORT $LN9@G_InitNew

; 2887 : 			P_SetRandIndex((UINT8)(totalplaytime % 256));

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  0005a	33 d2		 xor	 edx, edx
  0005c	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00061	f7 f1		 div	 ecx
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 _P_SetRandIndex
  00069	83 c4 04	 add	 esp, 4
  0006c	eb 0a		 jmp	 SHORT $LN10@G_InitNew
$LN9@G_InitNew:

; 2888 : 		else // Constant seed for demos
; 2889 : 			P_SetRandIndex(0);

  0006e	6a 00		 push	 0
  00070	e8 00 00 00 00	 call	 _P_SetRandIndex
  00075	83 c4 04	 add	 esp, 4
$LN10@G_InitNew:

; 2890 : 	}
; 2891 : 
; 2892 : 	if (resetplayer)

  00078	83 7d 10 00	 cmp	 DWORD PTR _resetplayer$[ebp], 0
  0007c	0f 84 1c 02 00
	00		 je	 $LN14@G_InitNew

; 2893 : 	{
; 2894 : 		// Clear a bunch of variables
; 2895 : 		tokenlist = token = sstimer = redscore = bluescore = lastmap = 0;

  00082	33 c0		 xor	 eax, eax
  00084	66 a3 00 00 00
	00		 mov	 WORD PTR _lastmap, ax
  0008a	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _lastmap
  00091	89 0d 00 00 00
	00		 mov	 DWORD PTR _bluescore, ecx
  00097	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bluescore
  0009d	89 15 00 00 00
	00		 mov	 DWORD PTR _redscore, edx
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _redscore
  000a8	a3 00 00 00 00	 mov	 DWORD PTR _sstimer, eax
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sstimer
  000b3	89 0d 00 00 00
	00		 mov	 DWORD PTR _token, ecx
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _token
  000bf	89 15 00 00 00
	00		 mov	 DWORD PTR _tokenlist, edx

; 2896 : 		countdown = countdown2 = 0;

  000c5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _countdown2, 0
  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _countdown2
  000d4	a3 00 00 00 00	 mov	 DWORD PTR _countdown, eax

; 2897 : 
; 2898 : 		for (i = 0; i < MAXPLAYERS; i++)

  000d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e0	eb 09		 jmp	 SHORT $LN4@G_InitNew
$LN2@G_InitNew:
  000e2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e5	83 c0 01	 add	 eax, 1
  000e8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_InitNew:
  000eb	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  000ef	0f 8d 5d 01 00
	00		 jge	 $LN3@G_InitNew

; 2899 : 		{
; 2900 : 			players[i].playerstate = PST_REBORN;

  000f5	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000fc	c7 80 04 00 00
	00 02 00 00 00	 mov	 DWORD PTR _players[eax+4], 2

; 2901 : 			players[i].starpostangle = players[i].starpostnum = players[i].starposttime = 0;

  00106	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0010d	c7 80 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+400], 0
  00117	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  0011e	c7 81 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[ecx+396], 0
  00128	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  0012f	c7 82 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[edx+404], 0

; 2902 : 			players[i].starpostx = players[i].starposty = players[i].starpostz = 0;

  00139	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00140	c7 80 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+392], 0
  0014a	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00151	c7 81 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[ecx+388], 0
  0015b	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00162	c7 82 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[edx+384], 0

; 2903 : 			players[i].starpostbit = 0;

  0016c	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00173	c7 80 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+408], 0

; 2904 : 
; 2905 : 			if (pultmode)

  0017d	0f b6 45 08	 movzx	 eax, BYTE PTR _pultmode$[ebp]
  00181	85 c0		 test	 eax, eax
  00183	74 24		 je	 SHORT $LN12@G_InitNew

; 2906 : 			{
; 2907 : 				players[i].lives = 1;

  00185	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0018c	c7 80 00 01 00
	00 01 00 00 00	 mov	 DWORD PTR _players[eax+256], 1

; 2908 : 				players[i].continues = 0;

  00196	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0019d	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+260], 0

; 2909 : 			}

  001a7	eb 22		 jmp	 SHORT $LN13@G_InitNew
$LN12@G_InitNew:

; 2910 : 			else
; 2911 : 			{
; 2912 : 				players[i].lives = 3;

  001a9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001b0	c7 80 00 01 00
	00 03 00 00 00	 mov	 DWORD PTR _players[eax+256], 3

; 2913 : 				players[i].continues = 1;

  001ba	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001c1	c7 80 04 01 00
	00 01 00 00 00	 mov	 DWORD PTR _players[eax+260], 1
$LN13@G_InitNew:

; 2914 : 			}
; 2915 : 
; 2916 : 			players[i].pflags &= ~PF_TAGIT;

  001cb	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001d2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  001d8	81 e1 ff ff ff
	ef		 and	 ecx, -268435457		; efffffffH
  001de	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  001e5	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 2917 : 			players[i].pflags &= ~PF_TAGGED;

  001eb	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  001f2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  001f8	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  001fe	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00205	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 2918 : 			players[i].pflags &= ~PF_STASIS;

  0020b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00212	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00218	81 e1 ff ff ff
	f7		 and	 ecx, -134217729		; f7ffffffH
  0021e	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00225	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 2919 : 
; 2920 : 			players[i].score = players[i].xtralife = 0;

  0022b	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00232	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+264], 0
  0023c	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 508
  00243	c7 81 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR _players[ecx+188], 0

; 2921 : 		}

  0024d	e9 90 fe ff ff	 jmp	 $LN2@G_InitNew
$LN3@G_InitNew:

; 2922 : 
; 2923 : 		if (!(cv_debug || devparm) && !(multiplayer || netgame))

  00252	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00259	75 43		 jne	 SHORT $LN14@G_InitNew
  0025b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00262	75 3a		 jne	 SHORT $LN14@G_InitNew
  00264	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0026b	75 31		 jne	 SHORT $LN14@G_InitNew
  0026d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00274	75 28		 jne	 SHORT $LN14@G_InitNew

; 2924 : 			SetSavedSkin(0, players[0].skin, players[0].prefcolor);

  00276	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0027b	6b c8 00	 imul	 ecx, eax, 0
  0027e	8b 91 fc 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+252]
  00284	52		 push	 edx
  00285	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0028a	6b c8 00	 imul	 ecx, eax, 0
  0028d	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+184]
  00293	52		 push	 edx
  00294	6a 00		 push	 0
  00296	e8 00 00 00 00	 call	 _SetSavedSkin
  0029b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@G_InitNew:

; 2925 : 	}
; 2926 : 
; 2927 : 	// internal game map
; 2928 : 	// well this check is useless because it is done before (d_netcmd.c::command_map_f)
; 2929 : 	// but in case of for demos....
; 2930 : 	if (W_CheckNumForName(mapname) == LUMPERROR)

  0029e	8b 45 0c	 mov	 eax, DWORD PTR _mapname$[ebp]
  002a1	50		 push	 eax
  002a2	e8 00 00 00 00	 call	 _W_CheckNumForName
  002a7	83 c4 04	 add	 esp, 4
  002aa	83 f8 ff	 cmp	 eax, -1
  002ad	75 1c		 jne	 SHORT $LN15@G_InitNew

; 2931 : 	{
; 2932 : 		I_Error("Internal game map '%s' not found\n", mapname);

  002af	8b 45 0c	 mov	 eax, DWORD PTR _mapname$[ebp]
  002b2	50		 push	 eax
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PNBHNBKA@Internal?5game?5map?5?8?$CFs?8?5not?5foun@
  002b8	e8 00 00 00 00	 call	 _I_Error
  002bd	83 c4 08	 add	 esp, 8

; 2933 : 		Command_ExitGame_f();

  002c0	e8 00 00 00 00	 call	 _Command_ExitGame_f
  002c5	90		 npad	 1

; 2934 : 		return;

  002c6	e9 d0 01 00 00	 jmp	 $LN18@G_InitNew
$LN15@G_InitNew:

; 2935 : 	}
; 2936 : 
; 2937 : 	gamemap = (INT16)M_MapNumber(mapname[3], mapname[4]); // get xx out of MAPxx

  002cb	b8 01 00 00 00	 mov	 eax, 1
  002d0	c1 e0 02	 shl	 eax, 2
  002d3	8b 4d 0c	 mov	 ecx, DWORD PTR _mapname$[ebp]
  002d6	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  002da	52		 push	 edx
  002db	b8 01 00 00 00	 mov	 eax, 1
  002e0	6b c8 03	 imul	 ecx, eax, 3
  002e3	8b 55 0c	 mov	 edx, DWORD PTR _mapname$[ebp]
  002e6	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 _M_MapNumber
  002f0	83 c4 08	 add	 esp, 8
  002f3	66 a3 00 00 00
	00		 mov	 WORD PTR _gamemap, ax

; 2938 : 	maptol = mapheaderinfo[gamemap-1].typeoflevel;

  002f9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00300	83 e8 01	 sub	 eax, 1
  00303	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00309	66 8b 91 44 00
	00 00		 mov	 dx, WORD PTR _mapheaderinfo[ecx+68]
  00310	66 89 15 00 00
	00 00		 mov	 WORD PTR _maptol, dx

; 2939 : 	globalweather = mapheaderinfo[gamemap-1].weather;

  00317	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0031e	83 e8 01	 sub	 eax, 1
  00321	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00327	8a 91 4d 00 00
	00		 mov	 dl, BYTE PTR _mapheaderinfo[ecx+77]
  0032d	88 15 00 00 00
	00		 mov	 BYTE PTR _globalweather, dl

; 2940 : 
; 2941 : 	ultimatemode = pultmode;

  00333	8a 45 08	 mov	 al, BYTE PTR _pultmode$[ebp]
  00336	a2 00 00 00 00	 mov	 BYTE PTR _ultimatemode, al

; 2942 : 	playerdeadview = false;

  0033b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _playerdeadview, 0

; 2943 : 	automapactive = false;

  00345	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _automapactive, 0

; 2944 : 
; 2945 : 	if (!skipprecutscene && mapheaderinfo[gamemap-1].precutscenenum) // Start a custom cutscene.

  0034f	83 7d 14 00	 cmp	 DWORD PTR _skipprecutscene$[ebp], 0
  00353	75 46		 jne	 SHORT $LN16@G_InitNew
  00355	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0035c	83 e8 01	 sub	 eax, 1
  0035f	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00365	0f b6 91 1c 01
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+284]
  0036c	85 d2		 test	 edx, edx
  0036e	74 2b		 je	 SHORT $LN16@G_InitNew

; 2946 : 		F_StartCustomCutscene(mapheaderinfo[gamemap-1].precutscenenum-1, true, resetplayer);

  00370	8b 45 10	 mov	 eax, DWORD PTR _resetplayer$[ebp]
  00373	50		 push	 eax
  00374	6a 01		 push	 1
  00376	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _gamemap
  0037d	83 e9 01	 sub	 ecx, 1
  00380	69 d1 84 01 00
	00		 imul	 edx, ecx, 388
  00386	0f b6 82 1c 01
	00 00		 movzx	 eax, BYTE PTR _mapheaderinfo[edx+284]
  0038d	83 e8 01	 sub	 eax, 1
  00390	50		 push	 eax
  00391	e8 00 00 00 00	 call	 _F_StartCustomCutscene
  00396	83 c4 0c	 add	 esp, 12			; 0000000cH
  00399	eb 0c		 jmp	 SHORT $LN17@G_InitNew
$LN16@G_InitNew:

; 2947 : 	else
; 2948 : 		G_DoLoadLevel(resetplayer);

  0039b	8b 45 10	 mov	 eax, DWORD PTR _resetplayer$[ebp]
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 _G_DoLoadLevel
  003a4	83 c4 04	 add	 esp, 4
$LN17@G_InitNew:

; 2949 : 
; 2950 : 	if (netgame)

  003a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  003ae	0f 84 e7 00 00
	00		 je	 $LN18@G_InitNew

; 2951 : 	{
; 2952 : 		const INT32 actnum = mapheaderinfo[gamemap-1].actnum;

  003b4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  003bb	83 e8 01	 sub	 eax, 1
  003be	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  003c4	0f b6 91 42 00
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+66]
  003cb	89 55 f8	 mov	 DWORD PTR _actnum$1[ebp], edx

; 2953 : 		CONS_Printf(text[MAPISNOW], G_BuildMapName(gamemap));

  003ce	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  003d5	50		 push	 eax
  003d6	e8 00 00 00 00	 call	 _G_BuildMapName
  003db	83 c4 04	 add	 esp, 4
  003de	50		 push	 eax
  003df	b9 04 00 00 00	 mov	 ecx, 4
  003e4	6b d1 16	 imul	 edx, ecx, 22
  003e7	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 _CONS_Printf
  003f3	83 c4 08	 add	 esp, 8

; 2954 : 		if (strcmp(mapheaderinfo[gamemap-1].lvlttl, ""))

  003f6	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  003fb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00402	83 e8 01	 sub	 eax, 1
  00405	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0040b	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  00411	51		 push	 ecx
  00412	e8 00 00 00 00	 call	 _strcmp
  00417	83 c4 08	 add	 esp, 8
  0041a	85 c0		 test	 eax, eax
  0041c	74 70		 je	 SHORT $LN21@G_InitNew

; 2955 : 		{
; 2956 : 			CONS_Printf(": %s", mapheaderinfo[gamemap-1].lvlttl);

  0041e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00425	83 e8 01	 sub	 eax, 1
  00428	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0042e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  00434	51		 push	 ecx
  00435	68 00 00 00 00	 push	 OFFSET ??_C@_04EIOKKJMF@?3?5?$CFs@
  0043a	e8 00 00 00 00	 call	 _CONS_Printf
  0043f	83 c4 08	 add	 esp, 8

; 2957 : 			if (!mapheaderinfo[gamemap-1].nozone)

  00442	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00449	83 e8 01	 sub	 eax, 1
  0044c	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00452	83 b9 20 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+288], 0
  00459	75 1c		 jne	 SHORT $LN20@G_InitNew

; 2958 : 				CONS_Printf(" %s",text[ZONE]);

  0045b	b8 04 00 00 00	 mov	 eax, 4
  00460	6b c8 17	 imul	 ecx, eax, 23
  00463	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00469	52		 push	 edx
  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_03EEBNCBOD@?5?$CFs@
  0046f	e8 00 00 00 00	 call	 _CONS_Printf
  00474	83 c4 08	 add	 esp, 8
$LN20@G_InitNew:

; 2959 : 			if (actnum > 0)

  00477	83 7d f8 00	 cmp	 DWORD PTR _actnum$1[ebp], 0
  0047b	7e 11		 jle	 SHORT $LN21@G_InitNew

; 2960 : 				CONS_Printf(" %2d", actnum);

  0047d	8b 45 f8	 mov	 eax, DWORD PTR _actnum$1[ebp]
  00480	50		 push	 eax
  00481	68 00 00 00 00	 push	 OFFSET ??_C@_04EJIOOHLH@?5?$CF2d@
  00486	e8 00 00 00 00	 call	 _CONS_Printf
  0048b	83 c4 08	 add	 esp, 8
$LN21@G_InitNew:

; 2961 : 		}
; 2962 : 		CONS_Printf("\"\n");

  0048e	68 00 00 00 00	 push	 OFFSET ??_C@_02MBJIFMOJ@?$CC?6@
  00493	e8 00 00 00 00	 call	 _CONS_Printf
  00498	83 c4 04	 add	 esp, 4
$LN18@G_InitNew:

; 2963 : 	}
; 2964 : }

  0049b	5f		 pop	 edi
  0049c	5e		 pop	 esi
  0049d	5b		 pop	 ebx
  0049e	8b e5		 mov	 esp, ebp
  004a0	5d		 pop	 ebp
  004a1	c3		 ret	 0
_G_InitNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DoCompleted
_TEXT	SEGMENT
_sstagestartmap$1 = -156				; size = 4
_visitedmap$2 = -152					; size = 130
_cm$3 = -20						; size = 2
_tolflag$4 = -16					; size = 2
_gottoken$ = -12					; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_G_DoCompleted PROC					; COMDAT

; 2346 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2347 : 	INT32 i;
; 2348 : 	boolean gottoken = false;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _gottoken$[ebp], 0

; 2349 : 
; 2350 : 	tokenlist = 0; // Reset the list

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tokenlist, 0

; 2351 : 
; 2352 : 	gameaction = ga_nothing;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _gameaction, 0

; 2353 : 
; 2354 : 	for (i = 0; i < MAXPLAYERS; i++)

  00031	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN4@G_DoComple
$LN2@G_DoComple:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_DoComple:
  00043	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00047	7d 1b		 jge	 SHORT $LN3@G_DoComple

; 2355 : 		if (playeringame[i])

  00049	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00054	74 0c		 je	 SHORT $LN7@G_DoComple

; 2356 : 			G_PlayerFinishLevel(i); // take away cards and stuff

  00056	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _G_PlayerFinishLevel
  0005f	83 c4 04	 add	 esp, 4
$LN7@G_DoComple:
  00062	eb d6		 jmp	 SHORT $LN2@G_DoComple
$LN3@G_DoComple:

; 2357 : 
; 2358 : 	if (automapactive)

  00064	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  0006b	74 06		 je	 SHORT $LN8@G_DoComple

; 2359 : 		AM_Stop();

  0006d	e8 00 00 00 00	 call	 _AM_Stop
  00072	90		 npad	 1
$LN8@G_DoComple:

; 2360 : 
; 2361 : 	S_StopSounds();

  00073	e8 00 00 00 00	 call	 _S_StopSounds
  00078	90		 npad	 1

; 2362 : 
; 2363 : 	prevmap = (INT16)(gamemap-1);

  00079	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00080	83 e8 01	 sub	 eax, 1
  00083	66 a3 00 00 00
	00		 mov	 WORD PTR _prevmap, ax

; 2364 : 
; 2365 : 	// go to next level
; 2366 : 	// nextmap is 0-based, unlike gamemap
; 2367 : 	if (nextmapoverride != 0)

  00089	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmapoverride
  00090	85 c0		 test	 eax, eax
  00092	74 12		 je	 SHORT $LN9@G_DoComple

; 2368 : 		nextmap = (INT16)(nextmapoverride-1);

  00094	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmapoverride
  0009b	83 e8 01	 sub	 eax, 1
  0009e	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  000a4	eb 21		 jmp	 SHORT $LN10@G_DoComple
$LN9@G_DoComple:

; 2369 : 	else
; 2370 : 		nextmap = (INT16)(mapheaderinfo[gamemap-1].nextlevel-1);

  000a6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000ad	83 e8 01	 sub	 eax, 1
  000b0	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000b6	0f bf 91 46 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+70]
  000bd	83 ea 01	 sub	 edx, 1
  000c0	66 89 15 00 00
	00 00		 mov	 WORD PTR _nextmap, dx
$LN10@G_DoComple:

; 2371 : 
; 2372 : 	// Remember last map for when you come out of the special stage.
; 2373 : 	if (!G_IsSpecialStage(gamemap))

  000c7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _G_IsSpecialStage
  000d4	83 c4 04	 add	 esp, 4
  000d7	85 c0		 test	 eax, eax
  000d9	75 0c		 jne	 SHORT $LN11@G_DoComple

; 2374 : 		lastmap = nextmap;

  000db	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _nextmap
  000e1	66 a3 00 00 00
	00		 mov	 WORD PTR _lastmap, ax
$LN11@G_DoComple:

; 2375 : 
; 2376 : 	// If nextmap is actually going to get used, make sure it points to
; 2377 : 	// a map of the proper gametype -- skip levels that don't support
; 2378 : 	// the current gametype. (Helps avoid playing boss levels in Race,
; 2379 : 	// for instance).
; 2380 : 	if (!token && !G_IsSpecialStage(gamemap))

  000e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _token, 0
  000ee	0f 85 c2 01 00
	00		 jne	 $LN13@G_DoComple
  000f4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _G_IsSpecialStage
  00101	83 c4 04	 add	 esp, 4
  00104	85 c0		 test	 eax, eax
  00106	0f 85 aa 01 00
	00		 jne	 $LN13@G_DoComple

; 2381 : 	{
; 2382 : 		INT16 tolflag = TOLFlag(gametype);

  0010c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _TOLFlag
  00119	83 c4 04	 add	 esp, 4
  0011c	66 89 45 f0	 mov	 WORD PTR _tolflag$4[ebp], ax

; 2383 : 
; 2384 : 		if (nextmap >= 0 && nextmap < NUMMAPS
; 2385 : 			&& !(mapheaderinfo[nextmap].typeoflevel & tolflag))

  00120	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  00127	85 c0		 test	 eax, eax
  00129	0f 8c 87 01 00
	00		 jl	 $LN13@G_DoComple
  0012f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  00136	3d 0b 04 00 00	 cmp	 eax, 1035		; 0000040bH
  0013b	0f 8d 75 01 00
	00		 jge	 $LN13@G_DoComple
  00141	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  00148	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0014e	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  00155	0f bf 45 f0	 movsx	 eax, WORD PTR _tolflag$4[ebp]
  00159	23 d0		 and	 edx, eax
  0015b	0f 85 55 01 00
	00		 jne	 $LN13@G_DoComple

; 2386 : 		{
; 2387 : 			register INT16 cm = nextmap;

  00161	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _nextmap
  00167	66 89 45 ec	 mov	 WORD PTR _cm$3[ebp], ax

; 2388 : 			UINT8 visitedmap[(NUMMAPS+7)/8];
; 2389 : 
; 2390 : 			memset(visitedmap, 0, sizeof (visitedmap));

  0016b	68 82 00 00 00	 push	 130			; 00000082H
  00170	6a 00		 push	 0
  00172	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _visitedmap$2[ebp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _memset
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@G_DoComple:

; 2391 : 
; 2392 : 			while (!(mapheaderinfo[cm].typeoflevel & tolflag))

  00181	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  00185	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0018b	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  00192	0f bf 45 f0	 movsx	 eax, WORD PTR _tolflag$4[ebp]
  00196	23 d0		 and	 edx, eax
  00198	0f 85 0e 01 00
	00		 jne	 $LN6@G_DoComple

; 2393 : 			{
; 2394 : 				visitedmap[cm/8] |= (1<<(cm%8));

  0019e	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  001a2	99		 cdq
  001a3	83 e2 07	 and	 edx, 7
  001a6	03 c2		 add	 eax, edx
  001a8	c1 f8 03	 sar	 eax, 3
  001ab	0f bf 4d ec	 movsx	 ecx, WORD PTR _cm$3[ebp]
  001af	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  001b5	79 05		 jns	 SHORT $LN48@G_DoComple
  001b7	49		 dec	 ecx
  001b8	83 c9 f8	 or	 ecx, -8			; fffffff8H
  001bb	41		 inc	 ecx
$LN48@G_DoComple:
  001bc	ba 01 00 00 00	 mov	 edx, 1
  001c1	d3 e2		 shl	 edx, cl
  001c3	0f b6 8c 05 68
	ff ff ff	 movzx	 ecx, BYTE PTR _visitedmap$2[ebp+eax]
  001cb	0b ca		 or	 ecx, edx
  001cd	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  001d1	99		 cdq
  001d2	83 e2 07	 and	 edx, 7
  001d5	03 c2		 add	 eax, edx
  001d7	c1 f8 03	 sar	 eax, 3
  001da	88 8c 05 68 ff
	ff ff		 mov	 BYTE PTR _visitedmap$2[ebp+eax], cl

; 2395 : 				cm = (INT16)(mapheaderinfo[cm].nextlevel-1);

  001e1	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  001e5	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  001eb	0f bf 91 46 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+70]
  001f2	83 ea 01	 sub	 edx, 1
  001f5	66 89 55 ec	 mov	 WORD PTR _cm$3[ebp], dx

; 2396 : 				if (cm >= NUMMAPS || cm < 0) // out of range (either 1100-1102 or error)

  001f9	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  001fd	3d 0b 04 00 00	 cmp	 eax, 1035		; 0000040bH
  00202	7d 08		 jge	 SHORT $LN15@G_DoComple
  00204	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  00208	85 c0		 test	 eax, eax
  0020a	7d 48		 jge	 SHORT $LN16@G_DoComple
$LN15@G_DoComple:

; 2397 : 				{
; 2398 : 					cm = nextmap; //Start the loop again so that the error checking below is executed.

  0020c	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _nextmap
  00212	66 89 45 ec	 mov	 WORD PTR _cm$3[ebp], ax

; 2399 : 
; 2400 : 					//Make sure the map actually exists before you try to go to it!
; 2401 : 					if ((W_CheckNumForName(G_BuildMapName(cm + 1)) == LUMPERROR))

  00216	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  0021a	83 c0 01	 add	 eax, 1
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 _G_BuildMapName
  00223	83 c4 04	 add	 esp, 4
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 _W_CheckNumForName
  0022c	83 c4 04	 add	 esp, 4
  0022f	83 f8 ff	 cmp	 eax, -1
  00232	75 20		 jne	 SHORT $LN16@G_DoComple

; 2402 : 					{
; 2403 : 						CONS_Printf("Next map given (MAP %d) doesn't exist! Reverting to MAP01.\n", cm+1);

  00234	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  00238	83 c0 01	 add	 eax, 1
  0023b	50		 push	 eax
  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LCKJCFJB@Next?5map?5given?5?$CIMAP?5?$CFd?$CJ?5doesn?8t@
  00241	e8 00 00 00 00	 call	 _CONS_Printf
  00246	83 c4 08	 add	 esp, 8

; 2404 : 						cm = 1;

  00249	b8 01 00 00 00	 mov	 eax, 1
  0024e	66 89 45 ec	 mov	 WORD PTR _cm$3[ebp], ax

; 2405 : 						break;

  00252	eb 58		 jmp	 SHORT $LN6@G_DoComple
$LN16@G_DoComple:

; 2406 : 					}
; 2407 : 				}
; 2408 : 
; 2409 : 				if (visitedmap[cm/8] & (1<<(cm%8))) // smells familiar

  00254	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  00258	99		 cdq
  00259	83 e2 07	 and	 edx, 7
  0025c	03 c2		 add	 eax, edx
  0025e	c1 f8 03	 sar	 eax, 3
  00261	0f b6 84 05 68
	ff ff ff	 movzx	 eax, BYTE PTR _visitedmap$2[ebp+eax]
  00269	0f bf 4d ec	 movsx	 ecx, WORD PTR _cm$3[ebp]
  0026d	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  00273	79 05		 jns	 SHORT $LN49@G_DoComple
  00275	49		 dec	 ecx
  00276	83 c9 f8	 or	 ecx, -8			; fffffff8H
  00279	41		 inc	 ecx
$LN49@G_DoComple:
  0027a	ba 01 00 00 00	 mov	 edx, 1
  0027f	d3 e2		 shl	 edx, cl
  00281	23 c2		 and	 eax, edx
  00283	74 22		 je	 SHORT $LN17@G_DoComple

; 2410 : 				{
; 2411 : 					// We got stuck in a loop, came back
; 2412 : 					// to the map we started on without
; 2413 : 					// finding one supporting the current
; 2414 : 					// gametype. Thus, print a warning,
; 2415 : 					// and just use this map anyways.
; 2416 : 					CONS_Printf("Warning: Can't find a "

  00285	0f bf 45 ec	 movsx	 eax, WORD PTR _cm$3[ebp]
  00289	83 c0 01	 add	 eax, 1
  0028c	50		 push	 eax
  0028d	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _prevmap
  00294	83 c1 01	 add	 ecx, 1
  00297	51		 push	 ecx
  00298	68 00 00 00 00	 push	 OFFSET ??_C@_0HM@HCAECPBK@Warning?3?5Can?8t?5find?5a?5compatibl@
  0029d	e8 00 00 00 00	 call	 _CONS_Printf
  002a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2417 : 						"compatible map after map %d; "
; 2418 : 						"using map %d even though it "
; 2419 : 						"is not compatible with the "
; 2420 : 						"current gametype\n",
; 2421 : 							prevmap+1, cm+1);
; 2422 : 					break;

  002a5	eb 05		 jmp	 SHORT $LN6@G_DoComple
$LN17@G_DoComple:

; 2423 : 				}
; 2424 : 			}

  002a7	e9 d5 fe ff ff	 jmp	 $LN5@G_DoComple
$LN6@G_DoComple:

; 2425 : 			nextmap = cm;

  002ac	66 8b 45 ec	 mov	 ax, WORD PTR _cm$3[ebp]
  002b0	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
$LN13@G_DoComple:

; 2426 : 		}
; 2427 : 	}
; 2428 : 
; 2429 : 	if (nextmap < 0 || (nextmap >= NUMMAPS && nextmap < 1100-1)
; 2430 : 		|| nextmap > 1102-1)

  002b6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  002bd	85 c0		 test	 eax, eax
  002bf	7c 2a		 jl	 SHORT $LN19@G_DoComple
  002c1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  002c8	3d 0b 04 00 00	 cmp	 eax, 1035		; 0000040bH
  002cd	7c 0e		 jl	 SHORT $LN20@G_DoComple
  002cf	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  002d6	3d 4b 04 00 00	 cmp	 eax, 1099		; 0000044bH
  002db	7c 0e		 jl	 SHORT $LN19@G_DoComple
$LN20@G_DoComple:
  002dd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  002e4	3d 4d 04 00 00	 cmp	 eax, 1101		; 0000044dH
  002e9	7e 23		 jle	 SHORT $LN18@G_DoComple
$LN19@G_DoComple:

; 2431 : 	{
; 2432 : 		I_Error("Followed map %d to invalid map %d\n", prevmap + 1, nextmap + 1);

  002eb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  002f2	83 c0 01	 add	 eax, 1
  002f5	50		 push	 eax
  002f6	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _prevmap
  002fd	83 c1 01	 add	 ecx, 1
  00300	51		 push	 ecx
  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EIOIMAHF@Followed?5map?5?$CFd?5to?5invalid?5map?5@
  00306	e8 00 00 00 00	 call	 _I_Error
  0030b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@G_DoComple:

; 2433 : 	}
; 2434 : 
; 2435 : 	// wrap around in race
; 2436 : 	if (nextmap >= 1100-1 && nextmap <= 1102-1 && gametype == GT_RACE)

  0030e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  00315	3d 4b 04 00 00	 cmp	 eax, 1099		; 0000044bH
  0031a	7c 2a		 jl	 SHORT $LN21@G_DoComple
  0031c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nextmap
  00323	3d 4d 04 00 00	 cmp	 eax, 1101		; 0000044dH
  00328	7f 1c		 jg	 SHORT $LN21@G_DoComple
  0032a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00331	83 f8 02	 cmp	 eax, 2
  00334	75 10		 jne	 SHORT $LN21@G_DoComple

; 2437 : 		nextmap = (INT16)(racestage_start-1);

  00336	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _racestage_start
  0033d	83 e8 01	 sub	 eax, 1
  00340	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
$LN21@G_DoComple:

; 2438 : 
; 2439 : 	if (gametype == GT_COOP && token)

  00346	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0034d	85 c0		 test	 eax, eax
  0034f	0f 85 1e 01 00
	00		 jne	 $skipit$50
  00355	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _token, 0
  0035c	0f 84 11 01 00
	00		 je	 $skipit$50

; 2440 : 	{
; 2441 : 		INT32 sstagestartmap;
; 2442 : 
; 2443 : 		if (useNightsSS)

  00362	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _useNightsSS, 0
  00369	74 0f		 je	 SHORT $LN23@G_DoComple

; 2444 : 			sstagestartmap = nsstage_start;

  0036b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _nsstage_start
  00372	89 85 64 ff ff
	ff		 mov	 DWORD PTR _sstagestartmap$1[ebp], eax
  00378	eb 0d		 jmp	 SHORT $LN24@G_DoComple
$LN23@G_DoComple:

; 2445 : 		else
; 2446 : 			sstagestartmap = sstage_start;

  0037a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _sstage_start
  00381	89 85 64 ff ff
	ff		 mov	 DWORD PTR _sstagestartmap$1[ebp], eax
$LN24@G_DoComple:

; 2447 : 
; 2448 : 		if (!(emeralds & EMERALD1))

  00387	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  0038e	83 e0 01	 and	 eax, 1
  00391	75 14		 jne	 SHORT $LN25@G_DoComple

; 2449 : 			nextmap = (INT16)(sstagestartmap - 1); // Special Stage 1

  00393	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _sstagestartmap$1[ebp]
  00399	83 e8 01	 sub	 eax, 1
  0039c	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  003a2	e9 b8 00 00 00	 jmp	 $LN38@G_DoComple
$LN25@G_DoComple:

; 2450 : 		else if (!(emeralds & EMERALD2))

  003a7	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  003ae	83 e0 02	 and	 eax, 2
  003b1	75 12		 jne	 SHORT $LN27@G_DoComple

; 2451 : 			nextmap = (INT16)(sstagestartmap); // Special Stage 2

  003b3	66 8b 85 64 ff
	ff ff		 mov	 ax, WORD PTR _sstagestartmap$1[ebp]
  003ba	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  003c0	e9 9a 00 00 00	 jmp	 $LN38@G_DoComple
$LN27@G_DoComple:

; 2452 : 		else if (!(emeralds & EMERALD3))

  003c5	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  003cc	83 e0 04	 and	 eax, 4
  003cf	75 11		 jne	 SHORT $LN29@G_DoComple

; 2453 : 			nextmap = (INT16)(sstagestartmap + 1); // Special Stage 3

  003d1	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _sstagestartmap$1[ebp]
  003d7	83 c0 01	 add	 eax, 1
  003da	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  003e0	eb 7d		 jmp	 SHORT $LN38@G_DoComple
$LN29@G_DoComple:

; 2454 : 		else if (!(emeralds & EMERALD4))

  003e2	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  003e9	83 e0 08	 and	 eax, 8
  003ec	75 11		 jne	 SHORT $LN31@G_DoComple

; 2455 : 			nextmap = (INT16)(sstagestartmap + 2); // Special Stage 4

  003ee	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _sstagestartmap$1[ebp]
  003f4	83 c0 02	 add	 eax, 2
  003f7	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  003fd	eb 60		 jmp	 SHORT $LN38@G_DoComple
$LN31@G_DoComple:

; 2456 : 		else if (!(emeralds & EMERALD5))

  003ff	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00406	83 e0 10	 and	 eax, 16			; 00000010H
  00409	75 11		 jne	 SHORT $LN33@G_DoComple

; 2457 : 			nextmap = (INT16)(sstagestartmap + 3); // Special Stage 5

  0040b	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _sstagestartmap$1[ebp]
  00411	83 c0 03	 add	 eax, 3
  00414	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  0041a	eb 43		 jmp	 SHORT $LN38@G_DoComple
$LN33@G_DoComple:

; 2458 : 		else if (!(emeralds & EMERALD6))

  0041c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00423	83 e0 20	 and	 eax, 32			; 00000020H
  00426	75 11		 jne	 SHORT $LN35@G_DoComple

; 2459 : 			nextmap = (INT16)(sstagestartmap + 4); // Special Stage 6

  00428	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _sstagestartmap$1[ebp]
  0042e	83 c0 04	 add	 eax, 4
  00431	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  00437	eb 26		 jmp	 SHORT $LN38@G_DoComple
$LN35@G_DoComple:

; 2460 : 		else if (!(emeralds & EMERALD7))

  00439	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  00440	83 e0 40	 and	 eax, 64			; 00000040H
  00443	75 11		 jne	 SHORT $LN37@G_DoComple

; 2461 : 			nextmap = (INT16)(sstagestartmap + 5); // Special Stage 7

  00445	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _sstagestartmap$1[ebp]
  0044b	83 c0 05	 add	 eax, 5
  0044e	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  00454	eb 09		 jmp	 SHORT $LN38@G_DoComple
$LN37@G_DoComple:

; 2462 : 		else
; 2463 : 		{
; 2464 : 			gottoken = false;

  00456	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _gottoken$[ebp], 0

; 2465 : 			goto skipit;

  0045d	eb 14		 jmp	 SHORT $skipit$50
$LN38@G_DoComple:

; 2466 : 		}
; 2467 : 
; 2468 : 		token--;

  0045f	a1 00 00 00 00	 mov	 eax, DWORD PTR _token
  00464	83 e8 01	 sub	 eax, 1
  00467	a3 00 00 00 00	 mov	 DWORD PTR _token, eax

; 2469 : 		gottoken = true;

  0046c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _gottoken$[ebp], 1
$skipit$50:

; 2470 : 	}
; 2471 : skipit:
; 2472 : 
; 2473 : 	if (G_IsSpecialStage(gamemap) && !gottoken)

  00473	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0047a	50		 push	 eax
  0047b	e8 00 00 00 00	 call	 _G_IsSpecialStage
  00480	83 c4 04	 add	 esp, 4
  00483	85 c0		 test	 eax, eax
  00485	74 12		 je	 SHORT $LN39@G_DoComple
  00487	83 7d f4 00	 cmp	 DWORD PTR _gottoken$[ebp], 0
  0048b	75 0c		 jne	 SHORT $LN39@G_DoComple

; 2474 : 	{
; 2475 : 		nextmap = lastmap; // Exiting from a special stage? Go back to the game. Tails 08-11-2001

  0048d	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _lastmap
  00493	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
$LN39@G_DoComple:

; 2476 : 	}
; 2477 : 
; 2478 : 	automapactive = false;

  00499	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _automapactive, 0

; 2479 : 
; 2480 : 	if (gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF

  004a3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004aa	83 f8 01	 cmp	 eax, 1
  004ad	74 18		 je	 SHORT $LN41@G_DoComple
  004af	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004b6	83 f8 03	 cmp	 eax, 3
  004b9	74 0c		 je	 SHORT $LN41@G_DoComple
  004bb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004c2	83 f8 04	 cmp	 eax, 4
  004c5	75 4e		 jne	 SHORT $LN44@G_DoComple
$LN41@G_DoComple:

; 2481 : #ifdef CHAOSISNOTDEADYET
; 2482 : 		|| gametype == GT_CHAOS
; 2483 : #endif
; 2484 : 		)
; 2485 : 	{
; 2486 : 		if (cv_advancemap.value == 0) // Stay on same map.

  004c7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_advancemap+20, 0
  004ce	75 0e		 jne	 SHORT $LN42@G_DoComple

; 2487 : 			nextmap = prevmap;

  004d0	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _prevmap
  004d6	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
  004dc	eb 37		 jmp	 SHORT $LN44@G_DoComple
$LN42@G_DoComple:

; 2488 : 		else if (cv_advancemap.value == 2) // Go to random map.

  004de	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_advancemap+20, 2
  004e5	75 2e		 jne	 SHORT $LN44@G_DoComple

; 2489 : 			nextmap = (INT16)(RandMap(TOLFlag(gametype), prevmap) - 1);

  004e7	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _prevmap
  004ee	50		 push	 eax
  004ef	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _gametype
  004f6	51		 push	 ecx
  004f7	e8 00 00 00 00	 call	 _TOLFlag
  004fc	83 c4 04	 add	 esp, 4
  004ff	0f b7 d0	 movzx	 edx, ax
  00502	52		 push	 edx
  00503	e8 00 00 00 00	 call	 _RandMap
  00508	83 c4 08	 add	 esp, 8
  0050b	98		 cwde
  0050c	83 e8 01	 sub	 eax, 1
  0050f	66 a3 00 00 00
	00		 mov	 WORD PTR _nextmap, ax
$LN44@G_DoComple:

; 2490 : 	}
; 2491 : 
; 2492 : 	if (skipstats)

  00515	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _skipstats, 0
  0051c	74 08		 je	 SHORT $LN45@G_DoComple

; 2493 : 		G_AfterIntermission();

  0051e	e8 00 00 00 00	 call	 _G_AfterIntermission
  00523	90		 npad	 1
  00524	eb 10		 jmp	 SHORT $LN46@G_DoComple
$LN45@G_DoComple:

; 2494 : 	else
; 2495 : 	{
; 2496 : 		G_SetGamestate(GS_INTERMISSION);

  00526	6a 02		 push	 2
  00528	e8 00 00 00 00	 call	 _G_SetGamestate
  0052d	83 c4 04	 add	 esp, 4

; 2497 : 		Y_StartIntermission();

  00530	e8 00 00 00 00	 call	 _Y_StartIntermission
  00535	90		 npad	 1
$LN46@G_DoComple:

; 2498 : 	}
; 2499 : }

  00536	5f		 pop	 edi
  00537	5e		 pop	 esi
  00538	5b		 pop	 ebx
  00539	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0053c	33 cd		 xor	 ecx, ebp
  0053e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00543	8b e5		 mov	 esp, ebp
  00545	5d		 pop	 ebp
  00546	c3		 ret	 0
_G_DoCompleted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_PlayerReborn
_TEXT	SEGMENT
_spectator$ = -153					; size = 1
_jointime$ = -152					; size = 4
_skin$ = -148						; size = 4
_skincolor$ = -144					; size = 4
_mare$ = -137						; size = 1
_dbginfo$ = -136					; size = 4
_totalring$ = -132					; size = 4
_laps$ = -128						; size = 4
_numboxes$ = -124					; size = 4
_exiting$ = -120					; size = 4
_jumpfactor$ = -116					; size = 4
_starpostbit$ = -112					; size = 4
_starpostangle$ = -108					; size = 4
_starpostnum$ = -104					; size = 4
_starpostz$ = -100					; size = 4
_starposty$ = -96					; size = 4
_starpostx$ = -92					; size = 4
_starposttime$ = -88					; size = 4
_ctfteam$ = -84						; size = 4
_prefcolor$ = -80					; size = 4
_maxdash$ = -76						; size = 4
_mindash$ = -72						; size = 4
_actionspd$ = -68					; size = 4
_spinitem$ = -64					; size = 4
_thokitem$ = -60					; size = 4
_pflags$ = -56						; size = 4
_charflags$ = -52					; size = 4
_acceleration$ = -48					; size = 4
_accelstart$ = -44					; size = 4
_thrustfactor$ = -40					; size = 4
_runspeed$ = -36					; size = 4
_normalspeed$ = -32					; size = 4
_charability2$ = -28					; size = 4
_charability$ = -24					; size = 4
_xtralife$ = -20					; size = 4
_continues$ = -16					; size = 4
_lives$ = -12						; size = 4
_score$ = -8						; size = 4
_p$ = -4						; size = 4
_player$ = 8						; size = 4
_G_PlayerReborn PROC					; COMDAT

; 1806 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1807 : 	player_t *p;
; 1808 : 	INT32 score;
; 1809 : 	INT32 lives;
; 1810 : 	INT32 continues;
; 1811 : 	INT32 xtralife;
; 1812 : 	INT32 charability;
; 1813 : 	INT32 charability2;
; 1814 : 	INT32 normalspeed;
; 1815 : 	INT32 runspeed;
; 1816 : 	INT32 thrustfactor;
; 1817 : 	INT32 accelstart;
; 1818 : 	INT32 acceleration;
; 1819 : 	INT32 charflags;
; 1820 : 	INT32 pflags = 0;

  0000c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _pflags$[ebp], 0

; 1821 : 	INT32 thokitem;
; 1822 : 	INT32 spinitem;
; 1823 : 	INT32 actionspd;
; 1824 : 	INT32 mindash;
; 1825 : 	INT32 maxdash;
; 1826 : #ifndef TRANSFIX
; 1827 : 	INT32 starttrans;
; 1828 : #endif
; 1829 : 	INT32 prefcolor;
; 1830 : 	INT32 ctfteam;
; 1831 : 	INT32 starposttime;
; 1832 : 	INT32 starpostx;
; 1833 : 	INT32 starposty;
; 1834 : 	INT32 starpostz;
; 1835 : 	INT32 starpostnum;
; 1836 : 	INT32 starpostangle;
; 1837 : 	UINT32 starpostbit;
; 1838 : 	INT32 jumpfactor;
; 1839 : 	INT32 exiting;
; 1840 : 	INT32 numboxes;
; 1841 : 	INT32 laps;
; 1842 : 	INT32 totalring;
; 1843 : 	INT32 dbginfo;
; 1844 : 	UINT8 mare;
; 1845 : 	INT32 skincolor;
; 1846 : 	INT32 skin;
; 1847 : 	tic_t jointime;
; 1848 : 	UINT8 spectator;
; 1849 : 
; 1850 : 	score = players[player].score;

  00013	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0001a	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+188]
  00020	89 4d f8	 mov	 DWORD PTR _score$[ebp], ecx

; 1851 : 	lives = players[player].lives;

  00023	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0002a	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+256]
  00030	89 4d f4	 mov	 DWORD PTR _lives$[ebp], ecx

; 1852 : 	continues = players[player].continues;

  00033	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0003a	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+260]
  00040	89 4d f0	 mov	 DWORD PTR _continues$[ebp], ecx

; 1853 : 	pflags |= (players[player].pflags & PF_TIMEOVER);

  00043	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0004a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00050	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00056	0b 4d c8	 or	 ecx, DWORD PTR _pflags$[ebp]
  00059	89 4d c8	 mov	 DWORD PTR _pflags$[ebp], ecx

; 1854 : 	pflags |= (players[player].pflags & PF_AUTOAIM);

  0005c	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00063	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00069	83 e1 01	 and	 ecx, 1
  0006c	0b 4d c8	 or	 ecx, DWORD PTR _pflags$[ebp]
  0006f	89 4d c8	 mov	 DWORD PTR _pflags$[ebp], ecx

; 1855 : 	xtralife = players[player].xtralife;

  00072	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00079	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+264]
  0007f	89 4d ec	 mov	 DWORD PTR _xtralife$[ebp], ecx

; 1856 : 	pflags |= (players[player].pflags & PF_TAGIT);

  00082	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00089	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0008f	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  00095	0b 4d c8	 or	 ecx, DWORD PTR _pflags$[ebp]
  00098	89 4d c8	 mov	 DWORD PTR _pflags$[ebp], ecx

; 1857 : 	pflags |= (players[player].pflags & PF_TAGGED);

  0009b	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  000a2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  000a8	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  000ae	0b 4d c8	 or	 ecx, DWORD PTR _pflags$[ebp]
  000b1	89 4d c8	 mov	 DWORD PTR _pflags$[ebp], ecx

; 1858 : 	ctfteam = players[player].ctfteam;

  000b4	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  000bb	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+352]
  000c1	89 4d ac	 mov	 DWORD PTR _ctfteam$[ebp], ecx

; 1859 : 	exiting = players[player].exiting;

  000c4	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  000cb	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+304]
  000d1	89 4d 88	 mov	 DWORD PTR _exiting$[ebp], ecx

; 1860 : 	jointime = players[player].jointime;

  000d4	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  000db	8b 88 f4 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+500]
  000e1	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _jointime$[ebp], ecx

; 1861 : 	spectator = players[player].spectator;

  000e7	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  000ee	8a 88 f0 01 00
	00		 mov	 cl, BYTE PTR _players[eax+496]
  000f4	88 8d 67 ff ff
	ff		 mov	 BYTE PTR _spectator$[ebp], cl

; 1862 : 
; 1863 : 	numboxes = players[player].numboxes;

  000fa	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00101	8b 88 4c 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+332]
  00107	89 4d 84	 mov	 DWORD PTR _numboxes$[ebp], ecx

; 1864 : 	laps = players[player].laps;

  0010a	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00111	8b 88 5c 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+348]
  00117	89 4d 80	 mov	 DWORD PTR _laps$[ebp], ecx

; 1865 : 	totalring = players[player].totalring;

  0011a	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00121	8b 88 50 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+336]
  00127	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _totalring$[ebp], ecx

; 1866 : 	dbginfo = players[player].dbginfo;

  0012d	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00134	8b 88 68 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+360]
  0013a	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _dbginfo$[ebp], ecx

; 1867 : 
; 1868 : 	skincolor = players[player].skincolor;

  00140	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  00147	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  0014d	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _skincolor$[ebp], ecx

; 1869 : 	skin = players[player].skin;

  00153	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0015a	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+184]
  00160	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _skin$[ebp], ecx

; 1870 : 	charability = players[player].charability;

  00166	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0016d	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+216]
  00173	89 4d e8	 mov	 DWORD PTR _charability$[ebp], ecx

; 1871 : 	charability2 = players[player].charability2;

  00176	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0017d	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+220]
  00183	89 4d e4	 mov	 DWORD PTR _charability2$[ebp], ecx

; 1872 : 	normalspeed = players[player].normalspeed;

  00186	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0018d	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+196]
  00193	89 4d e0	 mov	 DWORD PTR _normalspeed$[ebp], ecx

; 1873 : 	runspeed = players[player].runspeed;

  00196	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0019d	8b 88 c8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+200]
  001a3	89 4d dc	 mov	 DWORD PTR _runspeed$[ebp], ecx

; 1874 : 	thrustfactor = players[player].thrustfactor;

  001a6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  001ad	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+204]
  001b3	89 4d d8	 mov	 DWORD PTR _thrustfactor$[ebp], ecx

; 1875 : 	accelstart = players[player].accelstart;

  001b6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  001bd	8b 88 d0 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+208]
  001c3	89 4d d4	 mov	 DWORD PTR _accelstart$[ebp], ecx

; 1876 : 	acceleration = players[player].acceleration;

  001c6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  001cd	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+212]
  001d3	89 4d d0	 mov	 DWORD PTR _acceleration$[ebp], ecx

; 1877 : 	charflags = players[player].charflags;

  001d6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  001dd	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+224]
  001e3	89 4d cc	 mov	 DWORD PTR _charflags$[ebp], ecx

; 1878 : #ifndef TRANSFIX
; 1879 : 	starttrans = players[player].starttranscolor;
; 1880 : #endif
; 1881 : 	prefcolor = players[player].prefcolor;

  001e6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  001ed	8b 88 fc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+252]
  001f3	89 4d b0	 mov	 DWORD PTR _prefcolor$[ebp], ecx

; 1882 : 
; 1883 : 	starposttime = players[player].starposttime;

  001f6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  001fd	8b 88 90 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+400]
  00203	89 4d a8	 mov	 DWORD PTR _starposttime$[ebp], ecx

; 1884 : 	starpostx = players[player].starpostx;

  00206	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0020d	8b 88 80 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+384]
  00213	89 4d a4	 mov	 DWORD PTR _starpostx$[ebp], ecx

; 1885 : 	starposty = players[player].starposty;

  00216	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0021d	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+388]
  00223	89 4d a0	 mov	 DWORD PTR _starposty$[ebp], ecx

; 1886 : 	starpostz = players[player].starpostz;

  00226	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0022d	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+392]
  00233	89 4d 9c	 mov	 DWORD PTR _starpostz$[ebp], ecx

; 1887 : 	starpostnum = players[player].starpostnum;

  00236	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0023d	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+396]
  00243	89 4d 98	 mov	 DWORD PTR _starpostnum$[ebp], ecx

; 1888 : 	starpostangle = players[player].starpostangle;

  00246	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0024d	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+404]
  00253	89 4d 94	 mov	 DWORD PTR _starpostangle$[ebp], ecx

; 1889 : 	starpostbit = players[player].starpostbit;

  00256	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0025d	8b 88 98 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+408]
  00263	89 4d 90	 mov	 DWORD PTR _starpostbit$[ebp], ecx

; 1890 : 	jumpfactor = players[player].jumpfactor;

  00266	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0026d	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+248]
  00273	89 4d 8c	 mov	 DWORD PTR _jumpfactor$[ebp], ecx

; 1891 : 	thokitem = players[player].thokitem;

  00276	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0027d	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+228]
  00283	89 4d c4	 mov	 DWORD PTR _thokitem$[ebp], ecx

; 1892 : 	spinitem = players[player].spinitem;

  00286	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0028d	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+232]
  00293	89 4d c0	 mov	 DWORD PTR _spinitem$[ebp], ecx

; 1893 : 	actionspd = players[player].actionspd;

  00296	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  0029d	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+236]
  002a3	89 4d bc	 mov	 DWORD PTR _actionspd$[ebp], ecx

; 1894 : 	mindash = players[player].mindash;

  002a6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  002ad	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+240]
  002b3	89 4d b8	 mov	 DWORD PTR _mindash$[ebp], ecx

; 1895 : 	maxdash = players[player].maxdash;

  002b6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  002bd	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+244]
  002c3	89 4d b4	 mov	 DWORD PTR _maxdash$[ebp], ecx

; 1896 : 
; 1897 : 	mare = players[player].mare;

  002c6	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  002cd	8a 88 d4 01 00
	00		 mov	 cl, BYTE PTR _players[eax+468]
  002d3	88 8d 77 ff ff
	ff		 mov	 BYTE PTR _mare$[ebp], cl

; 1898 : 
; 1899 : 	p = &players[player];

  002d9	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _player$[ebp], 508
  002e0	05 00 00 00 00	 add	 eax, OFFSET _players
  002e5	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1900 : 	memset(p, 0, sizeof (*p));

  002e8	68 fc 01 00 00	 push	 508			; 000001fcH
  002ed	6a 00		 push	 0
  002ef	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  002f2	50		 push	 eax
  002f3	e8 00 00 00 00	 call	 _memset
  002f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1901 : 
; 1902 : 	p->score = score;

  002fb	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  002fe	8b 4d f8	 mov	 ecx, DWORD PTR _score$[ebp]
  00301	89 88 bc 00 00
	00		 mov	 DWORD PTR [eax+188], ecx

; 1903 : 	p->lives = lives;

  00307	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0030a	8b 4d f4	 mov	 ecx, DWORD PTR _lives$[ebp]
  0030d	89 88 00 01 00
	00		 mov	 DWORD PTR [eax+256], ecx

; 1904 : 	p->continues = continues;

  00313	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00316	8b 4d f0	 mov	 ecx, DWORD PTR _continues$[ebp]
  00319	89 88 04 01 00
	00		 mov	 DWORD PTR [eax+260], ecx

; 1905 : 	p->pflags = pflags;

  0031f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00322	8b 4d c8	 mov	 ecx, DWORD PTR _pflags$[ebp]
  00325	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx

; 1906 : 	p->xtralife = xtralife;

  0032b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0032e	8b 4d ec	 mov	 ecx, DWORD PTR _xtralife$[ebp]
  00331	89 88 08 01 00
	00		 mov	 DWORD PTR [eax+264], ecx

; 1907 : 	p->ctfteam = ctfteam;

  00337	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0033a	8b 4d ac	 mov	 ecx, DWORD PTR _ctfteam$[ebp]
  0033d	89 88 60 01 00
	00		 mov	 DWORD PTR [eax+352], ecx

; 1908 : 	p->jointime = jointime;

  00343	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00346	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _jointime$[ebp]
  0034c	89 88 f4 01 00
	00		 mov	 DWORD PTR [eax+500], ecx

; 1909 : 	p->spectator = spectator;

  00352	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00355	8a 8d 67 ff ff
	ff		 mov	 cl, BYTE PTR _spectator$[ebp]
  0035b	88 88 f0 01 00
	00		 mov	 BYTE PTR [eax+496], cl

; 1910 : 
; 1911 : 	// save player config truth reborn
; 1912 : 	p->skincolor = skincolor;

  00361	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00364	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _skincolor$[ebp]
  0036a	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 1913 : 	p->skin = skin;

  00370	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00373	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _skin$[ebp]
  00379	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx

; 1914 : 	p->charability = charability;

  0037f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00382	8b 4d e8	 mov	 ecx, DWORD PTR _charability$[ebp]
  00385	89 88 d8 00 00
	00		 mov	 DWORD PTR [eax+216], ecx

; 1915 : 	p->charability2 = charability2;

  0038b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0038e	8b 4d e4	 mov	 ecx, DWORD PTR _charability2$[ebp]
  00391	89 88 dc 00 00
	00		 mov	 DWORD PTR [eax+220], ecx

; 1916 : 	p->normalspeed = normalspeed;

  00397	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0039a	8b 4d e0	 mov	 ecx, DWORD PTR _normalspeed$[ebp]
  0039d	89 88 c4 00 00
	00		 mov	 DWORD PTR [eax+196], ecx

; 1917 : 	p->runspeed = runspeed;

  003a3	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003a6	8b 4d dc	 mov	 ecx, DWORD PTR _runspeed$[ebp]
  003a9	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 1918 : 	p->thrustfactor = thrustfactor;

  003af	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003b2	8b 4d d8	 mov	 ecx, DWORD PTR _thrustfactor$[ebp]
  003b5	89 88 cc 00 00
	00		 mov	 DWORD PTR [eax+204], ecx

; 1919 : 	p->accelstart = accelstart;

  003bb	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003be	8b 4d d4	 mov	 ecx, DWORD PTR _accelstart$[ebp]
  003c1	89 88 d0 00 00
	00		 mov	 DWORD PTR [eax+208], ecx

; 1920 : 	p->acceleration = acceleration;

  003c7	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003ca	8b 4d d0	 mov	 ecx, DWORD PTR _acceleration$[ebp]
  003cd	89 88 d4 00 00
	00		 mov	 DWORD PTR [eax+212], ecx

; 1921 : 	p->charflags = charflags;

  003d3	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003d6	8b 4d cc	 mov	 ecx, DWORD PTR _charflags$[ebp]
  003d9	89 88 e0 00 00
	00		 mov	 DWORD PTR [eax+224], ecx

; 1922 : #ifndef TRANSFIX
; 1923 : 	p->starttranscolor = starttrans;
; 1924 : #endif
; 1925 : 	p->prefcolor = prefcolor;

  003df	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003e2	8b 4d b0	 mov	 ecx, DWORD PTR _prefcolor$[ebp]
  003e5	89 88 fc 00 00
	00		 mov	 DWORD PTR [eax+252], ecx

; 1926 : 	p->thokitem = thokitem;

  003eb	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003ee	8b 4d c4	 mov	 ecx, DWORD PTR _thokitem$[ebp]
  003f1	89 88 e4 00 00
	00		 mov	 DWORD PTR [eax+228], ecx

; 1927 : 	p->spinitem = spinitem;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003fa	8b 4d c0	 mov	 ecx, DWORD PTR _spinitem$[ebp]
  003fd	89 88 e8 00 00
	00		 mov	 DWORD PTR [eax+232], ecx

; 1928 : 	p->actionspd = actionspd;

  00403	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00406	8b 4d bc	 mov	 ecx, DWORD PTR _actionspd$[ebp]
  00409	89 88 ec 00 00
	00		 mov	 DWORD PTR [eax+236], ecx

; 1929 : 	p->mindash = mindash;

  0040f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00412	8b 4d b8	 mov	 ecx, DWORD PTR _mindash$[ebp]
  00415	89 88 f0 00 00
	00		 mov	 DWORD PTR [eax+240], ecx

; 1930 : 	p->maxdash = maxdash;

  0041b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0041e	8b 4d b4	 mov	 ecx, DWORD PTR _maxdash$[ebp]
  00421	89 88 f4 00 00
	00		 mov	 DWORD PTR [eax+244], ecx

; 1931 : 
; 1932 : 	p->starposttime = starposttime;

  00427	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0042a	8b 4d a8	 mov	 ecx, DWORD PTR _starposttime$[ebp]
  0042d	89 88 90 01 00
	00		 mov	 DWORD PTR [eax+400], ecx

; 1933 : 	p->starpostx = starpostx;

  00433	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00436	8b 4d a4	 mov	 ecx, DWORD PTR _starpostx$[ebp]
  00439	89 88 80 01 00
	00		 mov	 DWORD PTR [eax+384], ecx

; 1934 : 	p->starposty = starposty;

  0043f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00442	8b 4d a0	 mov	 ecx, DWORD PTR _starposty$[ebp]
  00445	89 88 84 01 00
	00		 mov	 DWORD PTR [eax+388], ecx

; 1935 : 	p->starpostz = starpostz;

  0044b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0044e	8b 4d 9c	 mov	 ecx, DWORD PTR _starpostz$[ebp]
  00451	89 88 88 01 00
	00		 mov	 DWORD PTR [eax+392], ecx

; 1936 : 	p->starpostnum = starpostnum;

  00457	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0045a	8b 4d 98	 mov	 ecx, DWORD PTR _starpostnum$[ebp]
  0045d	89 88 8c 01 00
	00		 mov	 DWORD PTR [eax+396], ecx

; 1937 : 	p->starpostangle = starpostangle;

  00463	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00466	8b 4d 94	 mov	 ecx, DWORD PTR _starpostangle$[ebp]
  00469	89 88 94 01 00
	00		 mov	 DWORD PTR [eax+404], ecx

; 1938 : 	p->starpostbit = starpostbit;

  0046f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00472	8b 4d 90	 mov	 ecx, DWORD PTR _starpostbit$[ebp]
  00475	89 88 98 01 00
	00		 mov	 DWORD PTR [eax+408], ecx

; 1939 : 	p->jumpfactor = jumpfactor;

  0047b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0047e	8b 4d 8c	 mov	 ecx, DWORD PTR _jumpfactor$[ebp]
  00481	89 88 f8 00 00
	00		 mov	 DWORD PTR [eax+248], ecx

; 1940 : 	p->exiting = exiting;

  00487	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0048a	8b 4d 88	 mov	 ecx, DWORD PTR _exiting$[ebp]
  0048d	89 88 30 01 00
	00		 mov	 DWORD PTR [eax+304], ecx

; 1941 : 
; 1942 : 	p->numboxes = numboxes;

  00493	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00496	8b 4d 84	 mov	 ecx, DWORD PTR _numboxes$[ebp]
  00499	89 88 4c 01 00
	00		 mov	 DWORD PTR [eax+332], ecx

; 1943 : 	p->laps = laps;

  0049f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  004a2	8b 4d 80	 mov	 ecx, DWORD PTR _laps$[ebp]
  004a5	89 88 5c 01 00
	00		 mov	 DWORD PTR [eax+348], ecx

; 1944 : 	p->totalring = totalring;

  004ab	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  004ae	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _totalring$[ebp]
  004b4	89 88 50 01 00
	00		 mov	 DWORD PTR [eax+336], ecx

; 1945 : 	p->dbginfo = dbginfo;

  004ba	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  004bd	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _dbginfo$[ebp]
  004c3	89 88 68 01 00
	00		 mov	 DWORD PTR [eax+360], ecx

; 1946 : 
; 1947 : 	p->mare = mare;

  004c9	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  004cc	8a 8d 77 ff ff
	ff		 mov	 cl, BYTE PTR _mare$[ebp]
  004d2	88 88 d4 01 00
	00		 mov	 BYTE PTR [eax+468], cl

; 1948 : 
; 1949 : 	// Don't do anything immediately
; 1950 : 	p->pflags |= PF_USEDOWN;

  004d8	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  004db	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  004e1	83 c9 04	 or	 ecx, 4
  004e4	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  004e7	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1951 : 	p->pflags |= PF_ATTACKDOWN;

  004ed	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  004f0	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  004f6	83 c9 02	 or	 ecx, 2
  004f9	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  004fc	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1952 : 	p->pflags |= PF_JUMPDOWN;

  00502	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00505	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0050b	83 c9 08	 or	 ecx, 8
  0050e	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00511	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1953 : 
; 1954 : 	p->playerstate = PST_LIVE;

  00517	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0051a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1955 : 	p->health = 1; // 0 rings

  00521	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00524	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [eax+40], 1

; 1956 : 
; 1957 : 	if (netgame || multiplayer)

  0052b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00532	75 09		 jne	 SHORT $LN3@G_PlayerRe
  00534	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0053b	74 16		 je	 SHORT $LN2@G_PlayerRe
$LN3@G_PlayerRe:

; 1958 : 		p->powers[pw_flashing] = flashingtics-1; // Babysitting deterrent

  0053d	a1 00 00 00 00	 mov	 eax, DWORD PTR _flashingtics
  00542	83 e8 01	 sub	 eax, 1
  00545	b9 04 00 00 00	 mov	 ecx, 4
  0054a	d1 e1		 shl	 ecx, 1
  0054c	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  0054f	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN2@G_PlayerRe:

; 1959 : 
; 1960 : 	if (P_IsLocalPlayer(p) && !(splitscreen && p == &players[secondarydisplayplayer]))

  00553	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0055c	83 c4 04	 add	 esp, 4
  0055f	85 c0		 test	 eax, eax
  00561	74 5a		 je	 SHORT $LN4@G_PlayerRe
  00563	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0056a	74 14		 je	 SHORT $LN5@G_PlayerRe
  0056c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00576	05 00 00 00 00	 add	 eax, OFFSET _players
  0057b	39 45 fc	 cmp	 DWORD PTR _p$[ebp], eax
  0057e	74 3d		 je	 SHORT $LN4@G_PlayerRe
$LN5@G_PlayerRe:

; 1961 : 	{
; 1962 : 		if (!(mapmusic & 2048)) // TODO: Might not need this here

  00580	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  00585	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0058a	75 1c		 jne	 SHORT $LN6@G_PlayerRe

; 1963 : 			mapmusic = mapheaderinfo[gamemap-1].musicslot;

  0058c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00593	83 e8 01	 sub	 eax, 1
  00596	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0059c	8b 91 48 00 00
	00		 mov	 edx, DWORD PTR _mapheaderinfo[ecx+72]
  005a2	89 15 00 00 00
	00		 mov	 DWORD PTR _mapmusic, edx
$LN6@G_PlayerRe:

; 1964 : 
; 1965 : 		S_ChangeMusic(mapmusic & 2047, true);

  005a8	6a 01		 push	 1
  005aa	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  005af	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 _S_ChangeMusic
  005ba	83 c4 08	 add	 esp, 8
$LN4@G_PlayerRe:

; 1966 : 	}
; 1967 : 
; 1968 : 	if (gametype == GT_COOP)

  005bd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  005c4	85 c0		 test	 eax, eax
  005c6	75 06		 jne	 SHORT $LN7@G_PlayerRe

; 1969 : 		P_FindEmerald(); // scan for emeralds to hunt for

  005c8	e8 00 00 00 00	 call	 _P_FindEmerald
  005cd	90		 npad	 1
$LN7@G_PlayerRe:

; 1970 : 
; 1971 : 	// If NiGHTS, find lowest mare to start with.
; 1972 : 	p->mare = P_FindLowestMare();

  005ce	e8 00 00 00 00	 call	 _P_FindLowestMare
  005d3	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  005d6	88 81 d4 01 00
	00		 mov	 BYTE PTR [ecx+468], al

; 1973 : 
; 1974 : 	if (cv_debug)

  005dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  005e3	74 18		 je	 SHORT $LN8@G_PlayerRe

; 1975 : 		CONS_Printf("Current mare is %d\n", p->mare);

  005e5	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  005e8	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+468]
  005ef	51		 push	 ecx
  005f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LGPOCENA@Current?5mare?5is?5?$CFd?6@
  005f5	e8 00 00 00 00	 call	 _CONS_Printf
  005fa	83 c4 08	 add	 esp, 8
$LN8@G_PlayerRe:

; 1976 : 
; 1977 : 	if (p->mare == 255)

  005fd	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00600	0f b6 88 d4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+468]
  00607	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0060d	75 0a		 jne	 SHORT $LN9@G_PlayerRe

; 1978 : 		p->mare = 0;

  0060f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00612	c6 80 d4 01 00
	00 00		 mov	 BYTE PTR [eax+468], 0
$LN9@G_PlayerRe:

; 1979 : 
; 1980 : 	// Check to make sure their color didn't change somehow...
; 1981 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  00619	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00620	83 f8 04	 cmp	 eax, 4
  00623	74 1d		 je	 SHORT $LN11@G_PlayerRe
  00625	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0062c	83 f8 01	 cmp	 eax, 1
  0062f	0f 85 cf 00 00
	00		 jne	 $LN20@G_PlayerRe
  00635	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0063c	0f 84 c2 00 00
	00		 je	 $LN20@G_PlayerRe
$LN11@G_PlayerRe:

; 1982 : 	{
; 1983 : 		if (p->ctfteam == 1 && p->skincolor != 6)

  00642	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00645	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  0064c	75 56		 jne	 SHORT $LN12@G_PlayerRe
  0064e	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00651	83 b8 b4 00 00
	00 06		 cmp	 DWORD PTR [eax+180], 6
  00658	74 4a		 je	 SHORT $LN12@G_PlayerRe

; 1984 : 		{
; 1985 : 			if (p == &players[consoleplayer])

  0065a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00664	05 00 00 00 00	 add	 eax, OFFSET _players
  00669	39 45 fc	 cmp	 DWORD PTR _p$[ebp], eax
  0066c	75 11		 jne	 SHORT $LN14@G_PlayerRe

; 1986 : 				CV_SetValue(&cv_playercolor, 6);

  0066e	6a 06		 push	 6
  00670	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  00675	e8 00 00 00 00	 call	 _CV_SetValue
  0067a	83 c4 08	 add	 esp, 8
  0067d	eb 23		 jmp	 SHORT $LN16@G_PlayerRe
$LN14@G_PlayerRe:

; 1987 : 			else if (p == &players[secondarydisplayplayer])

  0067f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00689	05 00 00 00 00	 add	 eax, OFFSET _players
  0068e	39 45 fc	 cmp	 DWORD PTR _p$[ebp], eax
  00691	75 0f		 jne	 SHORT $LN16@G_PlayerRe

; 1988 : 				CV_SetValue(&cv_playercolor2, 6);

  00693	6a 06		 push	 6
  00695	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  0069a	e8 00 00 00 00	 call	 _CV_SetValue
  0069f	83 c4 08	 add	 esp, 8
$LN16@G_PlayerRe:

; 1989 : 		}

  006a2	eb 60		 jmp	 SHORT $LN20@G_PlayerRe
$LN12@G_PlayerRe:

; 1990 : 		else if (p->ctfteam == 2 && p->skincolor != 7)

  006a4	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  006a7	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  006ae	75 54		 jne	 SHORT $LN20@G_PlayerRe
  006b0	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  006b3	83 b8 b4 00 00
	00 07		 cmp	 DWORD PTR [eax+180], 7
  006ba	74 48		 je	 SHORT $LN20@G_PlayerRe

; 1991 : 		{
; 1992 : 			if (p == &players[consoleplayer])

  006bc	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  006c6	05 00 00 00 00	 add	 eax, OFFSET _players
  006cb	39 45 fc	 cmp	 DWORD PTR _p$[ebp], eax
  006ce	75 11		 jne	 SHORT $LN18@G_PlayerRe

; 1993 : 				CV_SetValue(&cv_playercolor, 7);

  006d0	6a 07		 push	 7
  006d2	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  006d7	e8 00 00 00 00	 call	 _CV_SetValue
  006dc	83 c4 08	 add	 esp, 8
  006df	eb 23		 jmp	 SHORT $LN20@G_PlayerRe
$LN18@G_PlayerRe:

; 1994 : 			else if (p == &players[secondarydisplayplayer])

  006e1	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  006eb	05 00 00 00 00	 add	 eax, OFFSET _players
  006f0	39 45 fc	 cmp	 DWORD PTR _p$[ebp], eax
  006f3	75 0f		 jne	 SHORT $LN20@G_PlayerRe

; 1995 : 				CV_SetValue(&cv_playercolor2, 7);

  006f5	6a 07		 push	 7
  006f7	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  006fc	e8 00 00 00 00	 call	 _CV_SetValue
  00701	83 c4 08	 add	 esp, 8
$LN20@G_PlayerRe:

; 1996 : 		}
; 1997 : 	}
; 1998 : }

  00704	5f		 pop	 edi
  00705	5e		 pop	 esi
  00706	5b		 pop	 ebx
  00707	8b e5		 mov	 esp, ebp
  00709	5d		 pop	 ebp
  0070a	c3		 ret	 0
_G_PlayerReborn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_CoopSpawnPlayer
_TEXT	SEGMENT
tv69 = -76						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_playernum$ = 8						; size = 4
_starpost$ = 12						; size = 4
_G_CoopSpawnPlayer PROC					; COMDAT

; 2077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2078 : 	INT32 i, j;
; 2079 : 
; 2080 : 	// CTF Start Spawns
; 2081 : 	if (gametype == GT_CTF)

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00010	83 f8 04	 cmp	 eax, 4
  00013	0f 85 36 01 00
	00		 jne	 $LN2@G_CoopSpaw

; 2082 : 	{
; 2083 : 		switch (players[playernum].ctfteam)

  00019	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00020	8b 88 60 01 00
	00		 mov	 ecx, DWORD PTR _players[eax+352]
  00026	89 4d b4	 mov	 DWORD PTR tv69[ebp], ecx
  00029	83 7d b4 01	 cmp	 DWORD PTR tv69[ebp], 1
  0002d	74 0f		 je	 SHORT $LN11@G_CoopSpaw
  0002f	83 7d b4 02	 cmp	 DWORD PTR tv69[ebp], 2
  00033	0f 84 88 00 00
	00		 je	 $LN14@G_CoopSpaw
  00039	e9 00 01 00 00	 jmp	 $startdeath$23
$LN11@G_CoopSpaw:

; 2084 : 		{
; 2085 : 			case 1: // Red Team
; 2086 : 				if (!numredctfstarts)

  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numredctfstarts, 0
  00045	75 12		 jne	 SHORT $LN12@G_CoopSpaw

; 2087 : 				{
; 2088 : 					CONS_Printf("No Red Team start in this map, resorting to Deathmatch starts!\n");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@HOJILAI@No?5Red?5Team?5start?5in?5this?5map?0?5@
  0004c	e8 00 00 00 00	 call	 _CONS_Printf
  00051	83 c4 04	 add	 esp, 4

; 2089 : 					goto startdeath;

  00054	e9 e5 00 00 00	 jmp	 $startdeath$23
$LN12@G_CoopSpaw:

; 2090 : 				}
; 2091 : 
; 2092 : 				for (j = 0; j < 32; j++)

  00059	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00060	eb 09		 jmp	 SHORT $LN6@G_CoopSpaw
$LN4@G_CoopSpaw:
  00062	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN6@G_CoopSpaw:
  0006b	83 7d f8 20	 cmp	 DWORD PTR _j$[ebp], 32	; 00000020H
  0006f	7d 4b		 jge	 SHORT $LN5@G_CoopSpaw

; 2093 : 				{
; 2094 : 					i = P_Random() % numredctfstarts;

  00071	e8 00 00 00 00	 call	 _P_Random
  00076	0f b6 c0	 movzx	 eax, al
  00079	99		 cdq
  0007a	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _numredctfstarts
  00080	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2095 : 					if (G_CheckSpot(playernum, redctfstarts[i]))

  00083	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00086	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _redctfstarts[eax*4]
  0008d	51		 push	 ecx
  0008e	8b 55 08	 mov	 edx, DWORD PTR _playernum$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 _G_CheckSpot
  00097	83 c4 08	 add	 esp, 8
  0009a	85 c0		 test	 eax, eax
  0009c	74 1c		 je	 SHORT $LN13@G_CoopSpaw

; 2096 : 					{
; 2097 : 						P_SpawnPlayer(redctfstarts[i], playernum);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000a5	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _redctfstarts[ecx*4]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 _P_SpawnPlayer
  000b2	83 c4 08	 add	 esp, 8

; 2098 : 						return;

  000b5	e9 4d 01 00 00	 jmp	 $LN1@G_CoopSpaw
$LN13@G_CoopSpaw:

; 2099 : 					}
; 2100 : 				}

  000ba	eb a6		 jmp	 SHORT $LN4@G_CoopSpaw
$LN5@G_CoopSpaw:

; 2101 : 				break;

  000bc	e9 8e 00 00 00	 jmp	 $LN2@G_CoopSpaw
$LN14@G_CoopSpaw:

; 2102 : 			case 2: // Blue Team
; 2103 : 				if (!numbluectfstarts)

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numbluectfstarts, 0
  000c8	75 0f		 jne	 SHORT $LN15@G_CoopSpaw

; 2104 : 				{
; 2105 : 					CONS_Printf("No Blue Team start in this map, resorting to Deathmatch starts!\n");

  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@POLEFNPH@No?5Blue?5Team?5start?5in?5this?5map?0@
  000cf	e8 00 00 00 00	 call	 _CONS_Printf
  000d4	83 c4 04	 add	 esp, 4

; 2106 : 					goto startdeath;

  000d7	eb 65		 jmp	 SHORT $startdeath$23
$LN15@G_CoopSpaw:

; 2107 : 				}
; 2108 : 
; 2109 : 				for (j = 0; j < 32; j++)

  000d9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  000e0	eb 09		 jmp	 SHORT $LN9@G_CoopSpaw
$LN7@G_CoopSpaw:
  000e2	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000e5	83 c0 01	 add	 eax, 1
  000e8	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN9@G_CoopSpaw:
  000eb	83 7d f8 20	 cmp	 DWORD PTR _j$[ebp], 32	; 00000020H
  000ef	7d 4b		 jge	 SHORT $LN8@G_CoopSpaw

; 2110 : 				{
; 2111 : 					i = P_Random() % numbluectfstarts;

  000f1	e8 00 00 00 00	 call	 _P_Random
  000f6	0f b6 c0	 movzx	 eax, al
  000f9	99		 cdq
  000fa	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _numbluectfstarts
  00100	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2112 : 					if (G_CheckSpot(playernum, bluectfstarts[i]))

  00103	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00106	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _bluectfstarts[eax*4]
  0010d	51		 push	 ecx
  0010e	8b 55 08	 mov	 edx, DWORD PTR _playernum$[ebp]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _G_CheckSpot
  00117	83 c4 08	 add	 esp, 8
  0011a	85 c0		 test	 eax, eax
  0011c	74 1c		 je	 SHORT $LN16@G_CoopSpaw

; 2113 : 					{
; 2114 : 						P_SpawnPlayer(bluectfstarts[i], playernum);

  0011e	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00121	50		 push	 eax
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00125	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _bluectfstarts[ecx*4]
  0012c	52		 push	 edx
  0012d	e8 00 00 00 00	 call	 _P_SpawnPlayer
  00132	83 c4 08	 add	 esp, 8

; 2115 : 						return;

  00135	e9 cd 00 00 00	 jmp	 $LN1@G_CoopSpaw
$LN16@G_CoopSpaw:

; 2116 : 					}
; 2117 : 				}

  0013a	eb a6		 jmp	 SHORT $LN7@G_CoopSpaw
$LN8@G_CoopSpaw:

; 2118 : 				break;

  0013c	eb 11		 jmp	 SHORT $LN2@G_CoopSpaw
$startdeath$23:

; 2119 : 			default:
; 2120 : startdeath:
; 2121 : 				G_DeathMatchSpawnPlayer(playernum);

  0013e	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _G_DeathMatchSpawnPlayer
  00147	83 c4 04	 add	 esp, 4

; 2122 : 				return;

  0014a	e9 b8 00 00 00	 jmp	 $LN1@G_CoopSpaw
$LN2@G_CoopSpaw:

; 2123 : 		}
; 2124 : 	}
; 2125 : 
; 2126 : 	if (starpost)

  0014f	83 7d 0c 00	 cmp	 DWORD PTR _starpost$[ebp], 0
  00153	74 1f		 je	 SHORT $LN18@G_CoopSpaw

; 2127 : 	{
; 2128 : 		P_SpawnStarpostPlayer(players[playernum].mo, playernum);

  00155	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00158	50		 push	 eax
  00159	69 4d 08 fc 01
	00 00		 imul	 ecx, DWORD PTR _playernum$[ebp], 508
  00160	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00166	52		 push	 edx
  00167	e8 00 00 00 00	 call	 _P_SpawnStarpostPlayer
  0016c	83 c4 08	 add	 esp, 8

; 2129 : 		return;

  0016f	e9 93 00 00 00	 jmp	 $LN1@G_CoopSpaw
$LN18@G_CoopSpaw:

; 2130 : 	}
; 2131 : 
; 2132 : 	// no deathmatch use the spot
; 2133 : 	if (G_CheckSpot(playernum, playerstarts[playernum]))

  00174	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00177	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _playerstarts[eax*4]
  0017e	51		 push	 ecx
  0017f	8b 55 08	 mov	 edx, DWORD PTR _playernum$[ebp]
  00182	52		 push	 edx
  00183	e8 00 00 00 00	 call	 _G_CheckSpot
  00188	83 c4 08	 add	 esp, 8
  0018b	85 c0		 test	 eax, eax
  0018d	74 19		 je	 SHORT $LN19@G_CoopSpaw

; 2134 : 	{
; 2135 : 		P_SpawnPlayer(playerstarts[playernum], playernum);

  0018f	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  00192	50		 push	 eax
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _playernum$[ebp]
  00196	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _playerstarts[ecx*4]
  0019d	52		 push	 edx
  0019e	e8 00 00 00 00	 call	 _P_SpawnPlayer
  001a3	83 c4 08	 add	 esp, 8

; 2136 : 		return;

  001a6	eb 5f		 jmp	 SHORT $LN1@G_CoopSpaw
$LN19@G_CoopSpaw:

; 2137 : 	}
; 2138 : 
; 2139 : 	// use the player start anyway if it exists
; 2140 : 	if (playerstarts[playernum])

  001a8	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001ab	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playerstarts[eax*4], 0
  001b3	74 19		 je	 SHORT $LN20@G_CoopSpaw

; 2141 : 	{
; 2142 : 		P_SpawnPlayer(playerstarts[playernum], playernum);

  001b5	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001b8	50		 push	 eax
  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _playernum$[ebp]
  001bc	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _playerstarts[ecx*4]
  001c3	52		 push	 edx
  001c4	e8 00 00 00 00	 call	 _P_SpawnPlayer
  001c9	83 c4 08	 add	 esp, 8

; 2143 : 		return;

  001cc	eb 39		 jmp	 SHORT $LN1@G_CoopSpaw
$LN20@G_CoopSpaw:

; 2144 : 	}
; 2145 : 
; 2146 : 	// resort to the player one start, and if there is none, we're screwed
; 2147 : 	if (!playerstarts[0])

  001ce	b8 04 00 00 00	 mov	 eax, 4
  001d3	6b c8 00	 imul	 ecx, eax, 0
  001d6	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR _playerstarts[ecx], 0
  001dd	75 0d		 jne	 SHORT $LN21@G_CoopSpaw

; 2148 : 		I_Error("Not enough starts in this map!\n");

  001df	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HNPGPGJO@Not?5enough?5starts?5in?5this?5map?$CB?6@
  001e4	e8 00 00 00 00	 call	 _I_Error
  001e9	83 c4 04	 add	 esp, 4
$LN21@G_CoopSpaw:

; 2149 : 
; 2150 : 	P_SpawnPlayer(playerstarts[0], playernum);

  001ec	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001ef	50		 push	 eax
  001f0	b9 04 00 00 00	 mov	 ecx, 4
  001f5	6b d1 00	 imul	 edx, ecx, 0
  001f8	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _playerstarts[edx]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 _P_SpawnPlayer
  00204	83 c4 08	 add	 esp, 8
$LN1@G_CoopSpaw:

; 2151 : }

  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
_G_CoopSpawnPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DeathMatchSpawnPlayer
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_playernum$ = 8						; size = 4
_G_DeathMatchSpawnPlayer PROC				; COMDAT

; 2046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2047 : 	INT32 i, j;
; 2048 : 
; 2049 : 	// In all cases except the tagging player in tag, spawn at deathmatch spawns.
; 2050 : 	if (!(gametype == GT_TAG && (players[playernum].pflags & PF_TAGIT)))

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00010	83 f8 03	 cmp	 eax, 3
  00013	75 15		 jne	 SHORT $LN6@G_DeathMat
  00015	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0001c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00022	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  00028	75 76		 jne	 SHORT $LN5@G_DeathMat
$LN6@G_DeathMat:

; 2051 : 	{
; 2052 : 		if (numdmstarts)

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numdmstarts, 0
  00031	74 60		 je	 SHORT $LN3@G_DeathMat

; 2053 : 			for (j = 0; j < 64; j++)

  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0003a	eb 09		 jmp	 SHORT $LN4@G_DeathMat
$LN2@G_DeathMat:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN4@G_DeathMat:
  00045	83 7d f8 40	 cmp	 DWORD PTR _j$[ebp], 64	; 00000040H
  00049	7d 48		 jge	 SHORT $LN3@G_DeathMat

; 2054 : 			{
; 2055 : 				i = P_Random() % numdmstarts;

  0004b	e8 00 00 00 00	 call	 _P_Random
  00050	0f b6 c0	 movzx	 eax, al
  00053	99		 cdq
  00054	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _numdmstarts
  0005a	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2056 : 				if (G_CheckSpot(playernum, deathmatchstarts[i]))

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00060	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _deathmatchstarts[eax*4]
  00067	51		 push	 ecx
  00068	8b 55 08	 mov	 edx, DWORD PTR _playernum$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _G_CheckSpot
  00071	83 c4 08	 add	 esp, 8
  00074	85 c0		 test	 eax, eax
  00076	74 19		 je	 SHORT $LN8@G_DeathMat

; 2057 : 				{
; 2058 : 					P_SpawnPlayer(deathmatchstarts[i], playernum);

  00078	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007f	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _deathmatchstarts[ecx*4]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _P_SpawnPlayer
  0008c	83 c4 08	 add	 esp, 8

; 2059 : 					return;

  0008f	eb 49		 jmp	 SHORT $LN1@G_DeathMat
$LN8@G_DeathMat:

; 2060 : 				}
; 2061 : 			}

  00091	eb a9		 jmp	 SHORT $LN2@G_DeathMat
$LN3@G_DeathMat:

; 2062 : 
; 2063 : 		// Use a coop start dependent on playernum
; 2064 : 		CONS_Printf("No deathmatch start in this map - shifting to player starts to avoid crash...\n");

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@DOHPPADO@No?5deathmatch?5start?5in?5this?5map@
  00098	e8 00 00 00 00	 call	 _CONS_Printf
  0009d	83 c4 04	 add	 esp, 4
$LN5@G_DeathMat:

; 2065 : 	}
; 2066 : 
; 2067 : 	if (!numcoopstarts)

  000a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numcoopstarts, 0
  000a7	75 0d		 jne	 SHORT $LN9@G_DeathMat

; 2068 : 		I_Error("There aren't enough starts in this map!\n");

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NABGIDMK@There?5aren?8t?5enough?5starts?5in?5t@
  000ae	e8 00 00 00 00	 call	 _I_Error
  000b3	83 c4 04	 add	 esp, 4
$LN9@G_DeathMat:

; 2069 : 
; 2070 : 	i = playernum % numcoopstarts;

  000b6	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  000b9	99		 cdq
  000ba	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _numcoopstarts
  000c0	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx

; 2071 : 	P_SpawnPlayer(playerstarts[i], playernum);

  000c3	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000ca	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _playerstarts[ecx*4]
  000d1	52		 push	 edx
  000d2	e8 00 00 00 00	 call	 _P_SpawnPlayer
  000d7	83 c4 08	 add	 esp, 8
$LN1@G_DeathMat:

; 2072 : }

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
_G_DeathMatchSpawnPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_DoReborn
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_starpost$ = -8						; size = 4
_player$ = -4						; size = 4
_playernum$ = 8						; size = 4
_G_DoReborn PROC					; COMDAT

; 2157 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2158 : 	player_t *player = &players[playernum];

  00009	69 45 08 fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00010	05 00 00 00 00	 add	 eax, OFFSET _players
  00015	89 45 fc	 mov	 DWORD PTR _player$[ebp], eax

; 2159 : 	boolean starpost = false;

  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _starpost$[ebp], 0

; 2160 : 
; 2161 : 	if (countdowntimeup || (!multiplayer && gametype == GT_COOP))

  0001f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _countdowntimeup
  00026	85 c0		 test	 eax, eax
  00028	75 1c		 jne	 SHORT $LN7@G_DoReborn
  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00031	0f 85 0e 02 00
	00		 jne	 $LN5@G_DoReborn
  00037	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0003e	85 c0		 test	 eax, eax
  00040	0f 85 ff 01 00
	00		 jne	 $LN5@G_DoReborn
$LN7@G_DoReborn:

; 2162 : 	{
; 2163 : 		// reload the level from scratch
; 2164 : 		if (countdowntimeup)

  00046	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _countdowntimeup
  0004d	85 c0		 test	 eax, eax
  0004f	74 5b		 je	 SHORT $LN8@G_DoReborn

; 2165 : 		{
; 2166 : 			player->starpostangle = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00054	c7 80 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+404], 0

; 2167 : 			player->starposttime = 0;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00061	c7 80 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+400], 0

; 2168 : 			player->starpostx = 0;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0006e	c7 80 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+384], 0

; 2169 : 			player->starposty = 0;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0007b	c7 80 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+388], 0

; 2170 : 			player->starpostz = 0;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00088	c7 80 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+392], 0

; 2171 : 			player->starpostnum = 0;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00095	c7 80 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+396], 0

; 2172 : 			player->starpostbit = 0;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000a2	c7 80 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+408], 0
$LN8@G_DoReborn:

; 2173 : 		}
; 2174 : 		if (mapheaderinfo[gamemap-1].noreload && !imcontinuing && !timeattacking)

  000ac	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000b3	83 e8 01	 sub	 eax, 1
  000b6	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000bc	83 b9 30 01 00
	00 00		 cmp	 DWORD PTR _mapheaderinfo[ecx+304], 0
  000c3	0f 84 63 01 00
	00		 je	 $LN9@G_DoReborn
  000c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _imcontinuing, 0
  000d0	0f 85 56 01 00
	00		 jne	 $LN9@G_DoReborn
  000d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  000dd	0f 85 49 01 00
	00		 jne	 $LN9@G_DoReborn

; 2175 : 		{
; 2176 : 			INT32 i;
; 2177 : 
; 2178 : 			P_LoadThingsOnly();

  000e3	e8 00 00 00 00	 call	 _P_LoadThingsOnly
  000e8	90		 npad	 1

; 2179 : 
; 2180 : 			P_RehitStarposts();

  000e9	e8 00 00 00 00	 call	 _P_RehitStarposts
  000ee	90		 npad	 1

; 2181 : 
; 2182 : 			// Do a wipe
; 2183 : 			wipegamestate = -1;

  000ef	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _wipegamestate, -1

; 2184 : 
; 2185 : 			if (player->starposttime)

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000fc	83 b8 90 01 00
	00 00		 cmp	 DWORD PTR [eax+400], 0
  00103	74 07		 je	 SHORT $LN11@G_DoReborn

; 2186 : 				starpost = true;

  00105	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _starpost$[ebp], 1
$LN11@G_DoReborn:

; 2187 : 
; 2188 : 			if (server || (adminplayer == consoleplayer))

  0010c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00113	75 0d		 jne	 SHORT $LN13@G_DoReborn
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0011a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00120	75 0f		 jne	 SHORT $LN12@G_DoReborn
$LN13@G_DoReborn:

; 2189 : 				CV_StealthSetValue(&cv_objectplace, 0); // Make sure objectplace is OFF when you first start the level!

  00122	6a 00		 push	 0
  00124	68 00 00 00 00	 push	 OFFSET _cv_objectplace
  00129	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0012e	83 c4 08	 add	 esp, 8
$LN12@G_DoReborn:

; 2190 : 
; 2191 : 			if (cv_chasecam.value)

  00131	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00138	74 1d		 je	 SHORT $LN14@G_DoReborn

; 2192 : 				P_ResetCamera(&players[displayplayer], &camera);

  0013a	68 00 00 00 00	 push	 OFFSET _camera
  0013f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00149	05 00 00 00 00	 add	 eax, OFFSET _players
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 _P_ResetCamera
  00154	83 c4 08	 add	 esp, 8
$LN14@G_DoReborn:

; 2193 : 			if (cv_chasecam2.value && splitscreen)

  00157	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0015e	74 26		 je	 SHORT $LN15@G_DoReborn
  00160	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00167	74 1d		 je	 SHORT $LN15@G_DoReborn

; 2194 : 				P_ResetCamera(&players[secondarydisplayplayer], &camera2);

  00169	68 00 00 00 00	 push	 OFFSET _camera2
  0016e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00178	05 00 00 00 00	 add	 eax, OFFSET _players
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _P_ResetCamera
  00183	83 c4 08	 add	 esp, 8
$LN15@G_DoReborn:

; 2195 : 
; 2196 : 			// clear cmd building stuff
; 2197 : 			memset(gamekeydown, 0, sizeof (gamekeydown));

  00186	68 e4 01 00 00	 push	 484			; 000001e4H
  0018b	6a 00		 push	 0
  0018d	68 00 00 00 00	 push	 OFFSET _gamekeydown
  00192	e8 00 00 00 00	 call	 _memset
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2198 : 			for (i = 0;i < JOYAXISSET; i++)

  0019a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  001a1	eb 09		 jmp	 SHORT $LN4@G_DoReborn
$LN2@G_DoReborn:
  001a3	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  001a6	83 c0 01	 add	 eax, 1
  001a9	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@G_DoReborn:
  001ac	83 7d f4 04	 cmp	 DWORD PTR _i$1[ebp], 4
  001b0	7d 3a		 jge	 SHORT $LN3@G_DoReborn

; 2199 : 			{
; 2200 : 				joyxmove[i] = joyymove[i] = 0;

  001b2	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  001b5	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joyymove[eax*4], 0
  001c0	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  001c3	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joyxmove[ecx*4], 0

; 2201 : 				joy2xmove[i] = joy2ymove[i] = 0;

  001ce	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  001d1	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joy2ymove[eax*4], 0
  001dc	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  001df	c7 04 8d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _joy2xmove[ecx*4], 0

; 2202 : 			}

  001ea	eb b7		 jmp	 SHORT $LN2@G_DoReborn
$LN3@G_DoReborn:

; 2203 : 			mousex = mousey = 0;

  001ec	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mousey, 0
  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _mousey
  001fb	a3 00 00 00 00	 mov	 DWORD PTR _mousex, eax

; 2204 : 			mouse2x = mouse2y = 0;

  00200	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mouse2y, 0
  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse2y
  0020f	a3 00 00 00 00	 mov	 DWORD PTR _mouse2x, eax

; 2205 : 
; 2206 : 			// clear hud messages remains (usually from game startup)
; 2207 : 			CON_ClearHUD();

  00214	e8 00 00 00 00	 call	 _CON_ClearHUD
  00219	90		 npad	 1

; 2208 : 
; 2209 : 			// Starpost support
; 2210 : 			G_CoopSpawnPlayer(playernum, starpost);

  0021a	8b 45 f8	 mov	 eax, DWORD PTR _starpost$[ebp]
  0021d	50		 push	 eax
  0021e	8b 4d 08	 mov	 ecx, DWORD PTR _playernum$[ebp]
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 _G_CoopSpawnPlayer
  00227	83 c4 08	 add	 esp, 8

; 2211 : 		}

  0022a	eb 0a		 jmp	 SHORT $LN10@G_DoReborn
$LN9@G_DoReborn:

; 2212 : 		else
; 2213 : 			G_DoLoadLevel(true);

  0022c	6a 01		 push	 1
  0022e	e8 00 00 00 00	 call	 _G_DoLoadLevel
  00233	83 c4 04	 add	 esp, 4
$LN10@G_DoReborn:

; 2214 : 
; 2215 : 		imcontinuing = false;

  00236	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _imcontinuing, 0

; 2216 : 	}

  00240	e9 8f 00 00 00	 jmp	 $LN6@G_DoReborn
$LN5@G_DoReborn:

; 2217 : 	else
; 2218 : 	{
; 2219 : 		// respawn at the start
; 2220 : 
; 2221 : 		if (player->starposttime)

  00245	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00248	83 b8 90 01 00
	00 00		 cmp	 DWORD PTR [eax+400], 0
  0024f	74 07		 je	 SHORT $LN16@G_DoReborn

; 2222 : 			starpost = true;

  00251	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _starpost$[ebp], 1
$LN16@G_DoReborn:

; 2223 : 
; 2224 : 		// first dissasociate the corpse
; 2225 : 		if (player->mo)

  00258	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0025b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0025e	74 3e		 je	 SHORT $LN17@G_DoReborn

; 2226 : 		{
; 2227 : 			player->mo->player = NULL;

  00260	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	c7 81 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+164], 0

; 2228 : 			player->mo->flags2 &= ~MF2_DONTDRAW;

  0026f	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00272	8b 08		 mov	 ecx, DWORD PTR [eax]
  00274	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0027a	81 e2 ff ff bf
	ff		 and	 edx, -4194305		; ffbfffffH
  00280	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]
  00285	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx

; 2229 : 			// Don't leave your carcass stuck 10-billion feet in the ground!
; 2230 : 			P_SetMobjState(player->mo, S_DISS);

  0028b	68 4f 06 00 00	 push	 1615			; 0000064fH
  00290	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00293	8b 08		 mov	 ecx, DWORD PTR [eax]
  00295	51		 push	 ecx
  00296	e8 00 00 00 00	 call	 _P_SetMobjState
  0029b	83 c4 08	 add	 esp, 8
$LN17@G_DoReborn:

; 2231 : 		}
; 2232 : 		// spawn at random spot if in death match
; 2233 : 		if (gametype == GT_MATCH || gametype == GT_TAG

  0029e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002a5	83 f8 01	 cmp	 eax, 1
  002a8	74 0c		 je	 SHORT $LN19@G_DoReborn
  002aa	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002b1	83 f8 03	 cmp	 eax, 3
  002b4	75 0e		 jne	 SHORT $LN18@G_DoReborn
$LN19@G_DoReborn:

; 2234 : #ifdef CHAOSISNOTDEADYET
; 2235 : 			|| gametype == GT_CHAOS
; 2236 : #endif
; 2237 : 			)
; 2238 : 		{
; 2239 : 			G_DeathMatchSpawnPlayer(playernum);

  002b6	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 _G_DeathMatchSpawnPlayer
  002bf	83 c4 04	 add	 esp, 4

; 2240 : 			return;

  002c2	eb 10		 jmp	 SHORT $LN6@G_DoReborn
$LN18@G_DoReborn:

; 2241 : 		}
; 2242 : 
; 2243 : 		// Starpost support
; 2244 : 		G_CoopSpawnPlayer(playernum, starpost);

  002c4	8b 45 f8	 mov	 eax, DWORD PTR _starpost$[ebp]
  002c7	50		 push	 eax
  002c8	8b 4d 08	 mov	 ecx, DWORD PTR _playernum$[ebp]
  002cb	51		 push	 ecx
  002cc	e8 00 00 00 00	 call	 _G_CoopSpawnPlayer
  002d1	83 c4 08	 add	 esp, 8
$LN6@G_DoReborn:

; 2245 : 	}
; 2246 : }

  002d4	5f		 pop	 edi
  002d5	5e		 pop	 esi
  002d6	5b		 pop	 ebx
  002d7	8b e5		 mov	 esp, ebp
  002d9	5d		 pop	 ebp
  002da	c3		 ret	 0
_G_DoReborn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_ClipAimingPitch
_TEXT	SEGMENT
_limitangle$ = -4					; size = 4
_aiming$ = 8						; size = 4
_G_ClipAimingPitch PROC					; COMDAT

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 492  : 	INT32 limitangle;
; 493  : 
; 494  : 	// note: the current software mode implementation doesn't have true perspective
; 495  : 	if (rendermode == render_soft)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	75 09		 jne	 SHORT $LN2@G_ClipAimi

; 496  : 		limitangle = ANG64h; // Some viewing fun, but not too far down...

  00012	c7 45 fc de dd
	dd 2d		 mov	 DWORD PTR _limitangle$[ebp], 769514974 ; 2ddddddeH
  00019	eb 07		 jmp	 SHORT $LN3@G_ClipAimi
$LN2@G_ClipAimi:

; 497  : 	else
; 498  : 		limitangle = ANGLE_90 - 1;

  0001b	c7 45 fc ff ff
	ff 3f		 mov	 DWORD PTR _limitangle$[ebp], 1073741823 ; 3fffffffH
$LN3@G_ClipAimi:

; 499  : 
; 500  : 	if (*aiming > limitangle)

  00022	8b 45 08	 mov	 eax, DWORD PTR _aiming$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	3b 4d fc	 cmp	 ecx, DWORD PTR _limitangle$[ebp]
  0002a	7e 0a		 jle	 SHORT $LN4@G_ClipAimi

; 501  : 		*aiming = limitangle;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _aiming$[ebp]
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _limitangle$[ebp]
  00032	89 08		 mov	 DWORD PTR [eax], ecx
  00034	eb 16		 jmp	 SHORT $LN6@G_ClipAimi
$LN4@G_ClipAimi:

; 502  : 	else if (*aiming < -limitangle)

  00036	8b 45 fc	 mov	 eax, DWORD PTR _limitangle$[ebp]
  00039	f7 d8		 neg	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _aiming$[ebp]
  0003e	39 01		 cmp	 DWORD PTR [ecx], eax
  00040	7d 0a		 jge	 SHORT $LN6@G_ClipAimi

; 503  : 		*aiming = -limitangle;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _limitangle$[ebp]
  00045	f7 d8		 neg	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _aiming$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax
$LN6@G_ClipAimi:

; 504  : 
; 505  : 	return (INT16)((*aiming)>>16);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _aiming$[ebp]
  0004f	8b 00		 mov	 eax, DWORD PTR [eax]
  00051	c1 f8 10	 sar	 eax, 16			; 00000010H

; 506  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_G_ClipAimingPitch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_MoveTiccmd
_TEXT	SEGMENT
_i$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_G_MoveTiccmd PROC					; COMDAT

; 2987 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2988 : 	size_t i;
; 2989 : 	for (i = 0; i < n; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@G_MoveTicc
$LN2@G_MoveTicc:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@G_MoveTicc:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 45 10	 cmp	 eax, DWORD PTR _n$[ebp]
  00021	73 6a		 jae	 SHORT $LN3@G_MoveTicc

; 2990 : 	{
; 2991 : 		dest[i].forwardmove = src[i].forwardmove;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00029	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002c	8b 75 0c	 mov	 esi, DWORD PTR _src$[ebp]
  0002f	8a 14 d6	 mov	 dl, BYTE PTR [esi+edx*8]
  00032	88 14 c1	 mov	 BYTE PTR [ecx+eax*8], dl

; 2992 : 		dest[i].sidemove = src[i].sidemove;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0003e	8b 75 0c	 mov	 esi, DWORD PTR _src$[ebp]
  00041	8a 54 d6 01	 mov	 dl, BYTE PTR [esi+edx*8+1]
  00045	88 54 c1 01	 mov	 BYTE PTR [ecx+eax*8+1], dl

; 2993 : 		dest[i].angleturn = SHORT(src[i].angleturn);

  00049	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00052	8b 75 0c	 mov	 esi, DWORD PTR _src$[ebp]
  00055	66 8b 54 d6 02	 mov	 dx, WORD PTR [esi+edx*8+2]
  0005a	66 89 54 c1 02	 mov	 WORD PTR [ecx+eax*8+2], dx

; 2994 : 		dest[i].aiming = (INT16)SHORT(src[i].aiming);

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00065	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00068	8b 75 0c	 mov	 esi, DWORD PTR _src$[ebp]
  0006b	66 8b 54 d6 04	 mov	 dx, WORD PTR [esi+edx*8+4]
  00070	66 89 54 c1 04	 mov	 WORD PTR [ecx+eax*8+4], dx

; 2995 : 		dest[i].buttons = (UINT16)SHORT(src[i].buttons);

  00075	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0007e	8b 75 0c	 mov	 esi, DWORD PTR _src$[ebp]
  00081	66 8b 54 d6 06	 mov	 dx, WORD PTR [esi+edx*8+6]
  00086	66 89 54 c1 06	 mov	 WORD PTR [ecx+eax*8+6], dx

; 2996 : 	}

  0008b	eb 85		 jmp	 SHORT $LN2@G_MoveTicc
$LN3@G_MoveTicc:

; 2997 : 	return dest;

  0008d	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]

; 2998 : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_G_MoveTiccmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_CopyTiccmd
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_G_CopyTiccmd PROC					; COMDAT

; 2982 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2983 : 	return M_Memcpy(dest, src, n*sizeof(*src));

  00009	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0000c	c1 e0 03	 shl	 eax, 3
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00017	52		 push	 edx
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2984 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_G_CopyTiccmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_BuildTiccmd2
_TEXT	SEGMENT
tv992 = -116						; size = 4
tv86 = -112						; size = 4
tv135 = -112						; size = 4
tv152 = -112						; size = 4
tv169 = -112						; size = 4
tv173 = -112						; size = 4
tv176 = -112						; size = 4
tv183 = -112						; size = 4
tv186 = -112						; size = 4
tv959 = -112						; size = 4
_gamepadjoystickmove$ = -44				; size = 4
_analogjoystickmove$ = -40				; size = 4
_mouseaiming$ = -36					; size = 4
_turnright$ = -32					; size = 4
_turnleft$ = -28					; size = 4
_speed$ = -24						; size = 4
_axis$ = -20						; size = 4
_side$ = -16						; size = 4
_forward$ = -12						; size = 4
_tspeed$ = -8						; size = 4
_strafe$ = -4						; size = 4
_cmd$ = 8						; size = 4
_realtics$ = 12						; size = 4
_G_BuildTiccmd2 PROC					; COMDAT

; 1014 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1015 : 	boolean strafe;
; 1016 : 	INT32 tspeed, forward, side, axis;
; 1017 : 	const INT32 speed = 1;

  00009	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _speed$[ebp], 1

; 1018 : 	// these ones used for multiple conditions
; 1019 : 	boolean turnleft, turnright, mouseaiming, analogjoystickmove, gamepadjoystickmove;
; 1020 : 
; 1021 : 	static INT32 turnheld; // for accelerative turning
; 1022 : 	static boolean keyboard_look; // true if lookup/down using keyboard
; 1023 : 
; 1024 : 	G_CopyTiccmd(cmd,  I_BaseTiccmd2(), 1); // empty, or external driver

  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 _I_BaseTiccmd2
  00017	50		 push	 eax
  00018	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _G_CopyTiccmd
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1025 : 
; 1026 : 	//why build a ticcmd if we're paused?
; 1027 : 	if (paused)

  00024	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  0002b	85 c0		 test	 eax, eax
  0002d	74 05		 je	 SHORT $LN2@G_BuildTic

; 1028 : 		return;

  0002f	e9 ae 13 00 00	 jmp	 $LN1@G_BuildTic
$LN2@G_BuildTic:

; 1029 : 
; 1030 : 	// a little clumsy, but then the g_input.c became a lot simpler!
; 1031 : 	strafe = gamekeydown[gamecontrolbis[gc_strafe][0]] ||

  00034	b8 08 00 00 00	 mov	 eax, 8
  00039	6b c8 03	 imul	 ecx, eax, 3
  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	6b c2 00	 imul	 eax, edx, 0
  00044	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  0004b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00052	85 d2		 test	 edx, edx
  00054	75 2b		 jne	 SHORT $LN128@G_BuildTic
  00056	b8 08 00 00 00	 mov	 eax, 8
  0005b	6b c8 03	 imul	 ecx, eax, 3
  0005e	ba 04 00 00 00	 mov	 edx, 4
  00063	c1 e2 00	 shl	 edx, 0
  00066	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  0006d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00074	85 c9		 test	 ecx, ecx
  00076	75 09		 jne	 SHORT $LN128@G_BuildTic
  00078	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
  0007f	eb 07		 jmp	 SHORT $LN129@G_BuildTic
$LN128@G_BuildTic:
  00081	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
$LN129@G_BuildTic:
  00088	8b 55 90	 mov	 edx, DWORD PTR tv86[ebp]
  0008b	89 55 fc	 mov	 DWORD PTR _strafe$[ebp], edx

; 1032 : 		gamekeydown[gamecontrolbis[gc_strafe][1]];
; 1033 : 
; 1034 : 	turnright = gamekeydown[gamecontrolbis[gc_turnright][0]]

  0008e	b8 08 00 00 00	 mov	 eax, 8
  00093	6b c8 07	 imul	 ecx, eax, 7
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	6b c2 00	 imul	 eax, edx, 0
  0009e	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  000a5	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  000ac	85 d2		 test	 edx, edx
  000ae	75 2b		 jne	 SHORT $LN130@G_BuildTic
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	6b c8 07	 imul	 ecx, eax, 7
  000b8	ba 04 00 00 00	 mov	 edx, 4
  000bd	c1 e2 00	 shl	 edx, 0
  000c0	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  000c7	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  000ce	85 c9		 test	 ecx, ecx
  000d0	75 09		 jne	 SHORT $LN130@G_BuildTic
  000d2	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
  000d9	eb 07		 jmp	 SHORT $LN131@G_BuildTic
$LN130@G_BuildTic:
  000db	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
$LN131@G_BuildTic:
  000e2	8b 55 90	 mov	 edx, DWORD PTR tv135[ebp]
  000e5	89 55 e0	 mov	 DWORD PTR _turnright$[ebp], edx

; 1035 : 		|| gamekeydown[gamecontrolbis[gc_turnright][1]];
; 1036 : 	turnleft = gamekeydown[gamecontrolbis[gc_turnleft][0]]

  000e8	b8 08 00 00 00	 mov	 eax, 8
  000ed	6b c8 06	 imul	 ecx, eax, 6
  000f0	ba 04 00 00 00	 mov	 edx, 4
  000f5	6b c2 00	 imul	 eax, edx, 0
  000f8	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  000ff	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00106	85 d2		 test	 edx, edx
  00108	75 2b		 jne	 SHORT $LN132@G_BuildTic
  0010a	b8 08 00 00 00	 mov	 eax, 8
  0010f	6b c8 06	 imul	 ecx, eax, 6
  00112	ba 04 00 00 00	 mov	 edx, 4
  00117	c1 e2 00	 shl	 edx, 0
  0011a	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00121	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00128	85 c9		 test	 ecx, ecx
  0012a	75 09		 jne	 SHORT $LN132@G_BuildTic
  0012c	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
  00133	eb 07		 jmp	 SHORT $LN133@G_BuildTic
$LN132@G_BuildTic:
  00135	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv152[ebp], 1
$LN133@G_BuildTic:
  0013c	8b 55 90	 mov	 edx, DWORD PTR tv152[ebp]
  0013f	89 55 e4	 mov	 DWORD PTR _turnleft$[ebp], edx

; 1037 : 		|| gamekeydown[gamecontrolbis[gc_turnleft][1]];
; 1038 : 
; 1039 : 	mouseaiming = (gamekeydown[gamecontrolbis[gc_mouseaiming][0]]

  00142	b8 08 00 00 00	 mov	 eax, 8
  00147	6b c8 1c	 imul	 ecx, eax, 28
  0014a	ba 04 00 00 00	 mov	 edx, 4
  0014f	6b c2 00	 imul	 eax, edx, 0
  00152	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00159	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00160	85 d2		 test	 edx, edx
  00162	75 2b		 jne	 SHORT $LN134@G_BuildTic
  00164	b8 08 00 00 00	 mov	 eax, 8
  00169	6b c8 1c	 imul	 ecx, eax, 28
  0016c	ba 04 00 00 00	 mov	 edx, 4
  00171	c1 e2 00	 shl	 edx, 0
  00174	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  0017b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00182	85 c9		 test	 ecx, ecx
  00184	75 09		 jne	 SHORT $LN134@G_BuildTic
  00186	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], 0
  0018d	eb 07		 jmp	 SHORT $LN135@G_BuildTic
$LN134@G_BuildTic:
  0018f	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv169[ebp], 1
$LN135@G_BuildTic:
  00196	8b 55 90	 mov	 edx, DWORD PTR tv169[ebp]
  00199	33 15 14 00 00
	00		 xor	 edx, DWORD PTR _cv_alwaysfreelook2+20
  0019f	89 55 dc	 mov	 DWORD PTR _mouseaiming$[ebp], edx

; 1040 : 		|| gamekeydown[gamecontrolbis[gc_mouseaiming][1]]) ^ cv_alwaysfreelook2.value;
; 1041 : 	analogjoystickmove = cv_usejoystick2.value && !Joystick2.bGamepadStyle;

  001a2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick2+20, 0
  001a9	74 12		 je	 SHORT $LN136@G_BuildTic
  001ab	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _Joystick2+4, 0
  001b2	75 09		 jne	 SHORT $LN136@G_BuildTic
  001b4	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv173[ebp], 1
  001bb	eb 07		 jmp	 SHORT $LN137@G_BuildTic
$LN136@G_BuildTic:
  001bd	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN137@G_BuildTic:
  001c4	8b 45 90	 mov	 eax, DWORD PTR tv173[ebp]
  001c7	89 45 d8	 mov	 DWORD PTR _analogjoystickmove$[ebp], eax

; 1042 : 	gamepadjoystickmove = cv_usejoystick2.value && Joystick2.bGamepadStyle;

  001ca	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick2+20, 0
  001d1	74 12		 je	 SHORT $LN138@G_BuildTic
  001d3	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _Joystick2+4, 0
  001da	74 09		 je	 SHORT $LN138@G_BuildTic
  001dc	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv176[ebp], 1
  001e3	eb 07		 jmp	 SHORT $LN139@G_BuildTic
$LN138@G_BuildTic:
  001e5	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv176[ebp], 0
$LN139@G_BuildTic:
  001ec	8b 45 90	 mov	 eax, DWORD PTR tv176[ebp]
  001ef	89 45 d4	 mov	 DWORD PTR _gamepadjoystickmove$[ebp], eax

; 1043 : 
; 1044 : 	axis = Joy2Axis(AXISTURN);

  001f2	6a 01		 push	 1
  001f4	e8 00 00 00 00	 call	 _Joy2Axis
  001f9	83 c4 04	 add	 esp, 4
  001fc	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 1045 : 	if (gamepadjoystickmove && axis != 0)

  001ff	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  00203	74 4a		 je	 SHORT $LN3@G_BuildTic
  00205	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00209	74 44		 je	 SHORT $LN3@G_BuildTic

; 1046 : 	{
; 1047 : 		turnright = turnright || (axis > 0);

  0020b	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  0020f	75 0f		 jne	 SHORT $LN140@G_BuildTic
  00211	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00215	7f 09		 jg	 SHORT $LN140@G_BuildTic
  00217	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv183[ebp], 0
  0021e	eb 07		 jmp	 SHORT $LN141@G_BuildTic
$LN140@G_BuildTic:
  00220	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv183[ebp], 1
$LN141@G_BuildTic:
  00227	8b 45 90	 mov	 eax, DWORD PTR tv183[ebp]
  0022a	89 45 e0	 mov	 DWORD PTR _turnright$[ebp], eax

; 1048 : 		turnleft = turnleft || (axis < 0);

  0022d	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  00231	75 0f		 jne	 SHORT $LN142@G_BuildTic
  00233	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00237	7c 09		 jl	 SHORT $LN142@G_BuildTic
  00239	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv186[ebp], 0
  00240	eb 07		 jmp	 SHORT $LN143@G_BuildTic
$LN142@G_BuildTic:
  00242	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv186[ebp], 1
$LN143@G_BuildTic:
  00249	8b 45 90	 mov	 eax, DWORD PTR tv186[ebp]
  0024c	89 45 e4	 mov	 DWORD PTR _turnleft$[ebp], eax
$LN3@G_BuildTic:

; 1049 : 	}
; 1050 : 
; 1051 : 	forward = side = 0;

  0024f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00256	8b 45 f0	 mov	 eax, DWORD PTR _side$[ebp]
  00259	89 45 f4	 mov	 DWORD PTR _forward$[ebp], eax

; 1052 : 
; 1053 : 	// use two stage accelerative turning
; 1054 : 	// on the keyboard and joystick
; 1055 : 	if (turnleft || turnright)

  0025c	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  00260	75 06		 jne	 SHORT $LN6@G_BuildTic
  00262	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  00266	74 0f		 je	 SHORT $LN4@G_BuildTic
$LN6@G_BuildTic:

; 1056 : 		turnheld += realtics;

  00268	a1 00 00 00 00	 mov	 eax, DWORD PTR ?turnheld@?1??G_BuildTiccmd2@@9@9
  0026d	03 45 0c	 add	 eax, DWORD PTR _realtics$[ebp]
  00270	a3 00 00 00 00	 mov	 DWORD PTR ?turnheld@?1??G_BuildTiccmd2@@9@9, eax
  00275	eb 0a		 jmp	 SHORT $LN5@G_BuildTic
$LN4@G_BuildTic:

; 1057 : 	else
; 1058 : 		turnheld = 0;

  00277	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?turnheld@?1??G_BuildTiccmd2@@9@9, 0
$LN5@G_BuildTic:

; 1059 : 
; 1060 : 	if (turnheld < SLOWTURNTICS)

  00281	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?turnheld@?1??G_BuildTiccmd2@@9@9, 6
  00288	7d 09		 jge	 SHORT $LN7@G_BuildTic

; 1061 : 		tspeed = 2; // slow turn

  0028a	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _tspeed$[ebp], 2
  00291	eb 06		 jmp	 SHORT $LN8@G_BuildTic
$LN7@G_BuildTic:

; 1062 : 	else
; 1063 : 		tspeed = speed;

  00293	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00296	89 45 f8	 mov	 DWORD PTR _tspeed$[ebp], eax
$LN8@G_BuildTic:

; 1064 : 
; 1065 : 	// let movement keys cancel each other out
; 1066 : 	if (cv_analog2.value) // Analog

  00299	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  002a0	74 3c		 je	 SHORT $LN11@G_BuildTic

; 1067 : 	{
; 1068 : 		if (turnright)

  002a2	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  002a6	74 18		 je	 SHORT $LN10@G_BuildTic

; 1069 : 			cmd->angleturn = (INT16)(cmd->angleturn - angleturn[tspeed]);

  002a8	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002ab	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  002af	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  002b2	2b 0c 95 00 00
	00 00		 sub	 ecx, DWORD PTR _angleturn[edx*4]
  002b9	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002bc	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN10@G_BuildTic:

; 1070 : 		if (turnleft)

  002c0	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  002c4	74 18		 je	 SHORT $LN11@G_BuildTic

; 1071 : 			cmd->angleturn = (INT16)(cmd->angleturn + angleturn[tspeed]);

  002c6	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002c9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  002cd	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  002d0	03 0c 95 00 00
	00 00		 add	 ecx, DWORD PTR _angleturn[edx*4]
  002d7	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002da	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN11@G_BuildTic:

; 1072 : 	}
; 1073 : 
; 1074 : 	if (strafe || cv_analog2.value || twodlevel
; 1075 : 		|| (players[secondarydisplayplayer].mo && (players[secondarydisplayplayer].mo->flags2 & MF2_TWOD))
; 1076 : 		|| players[secondarydisplayplayer].climbing
; 1077 : 		|| (players[secondarydisplayplayer].pflags & PF_NIGHTSMODE)
; 1078 : 		|| (players[secondarydisplayplayer].pflags & PF_SLIDING)) // Analog

  002de	83 7d fc 00	 cmp	 DWORD PTR _strafe$[ebp], 0
  002e2	0f 85 8f 00 00
	00		 jne	 $LN14@G_BuildTic
  002e8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  002ef	0f 85 82 00 00
	00		 jne	 $LN14@G_BuildTic
  002f5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  002fc	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00301	75 74		 jne	 SHORT $LN14@G_BuildTic
  00303	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0030d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00314	74 1e		 je	 SHORT $LN15@G_BuildTic
  00316	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00320	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00326	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0032c	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00332	75 43		 jne	 SHORT $LN14@G_BuildTic
$LN15@G_BuildTic:
  00334	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0033e	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR _players[eax+292], 0
  00345	75 30		 jne	 SHORT $LN14@G_BuildTic
  00347	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00351	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00357	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0035d	75 18		 jne	 SHORT $LN14@G_BuildTic
  0035f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00369	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0036f	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00375	74 55		 je	 SHORT $LN12@G_BuildTic
$LN14@G_BuildTic:

; 1079 : 	{
; 1080 : 		if (turnright)

  00377	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  0037b	74 10		 je	 SHORT $LN16@G_BuildTic

; 1081 : 			side += sidemove[speed];

  0037d	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00380	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00383	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _sidemove[eax*4]
  0038a	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN16@G_BuildTic:

; 1082 : 		if (turnleft)

  0038d	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  00391	74 10		 je	 SHORT $LN17@G_BuildTic

; 1083 : 			side -= sidemove[speed];

  00393	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00396	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00399	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _sidemove[eax*4]
  003a0	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN17@G_BuildTic:

; 1084 : 
; 1085 : 		if (analogjoystickmove && axis != 0)

  003a3	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  003a7	74 21		 je	 SHORT $LN18@G_BuildTic
  003a9	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  003ad	74 1b		 je	 SHORT $LN18@G_BuildTic

; 1086 : 		{
; 1087 : 			// JOYAXISRANGE is supposed to be 1023 (divide by 1024)
; 1088 : 			side += ((axis * sidemove[1]) >> 10);

  003af	b8 04 00 00 00	 mov	 eax, 4
  003b4	c1 e0 00	 shl	 eax, 0
  003b7	8b 4d ec	 mov	 ecx, DWORD PTR _axis$[ebp]
  003ba	0f af 88 00 00
	00 00		 imul	 ecx, DWORD PTR _sidemove[eax]
  003c1	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  003c4	03 4d f0	 add	 ecx, DWORD PTR _side$[ebp]
  003c7	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN18@G_BuildTic:

; 1089 : 		}
; 1090 : 	}

  003ca	eb 6f		 jmp	 SHORT $LN22@G_BuildTic
$LN12@G_BuildTic:

; 1091 : 	else
; 1092 : 	{
; 1093 : 		if (turnright)

  003cc	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  003d0	74 1a		 je	 SHORT $LN19@G_BuildTic

; 1094 : 			cmd->angleturn = (INT16)(cmd->angleturn - angleturn[tspeed]);

  003d2	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  003d5	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  003d9	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  003dc	2b 0c 95 00 00
	00 00		 sub	 ecx, DWORD PTR _angleturn[edx*4]
  003e3	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  003e6	66 89 48 02	 mov	 WORD PTR [eax+2], cx
  003ea	eb 1e		 jmp	 SHORT $LN21@G_BuildTic
$LN19@G_BuildTic:

; 1095 : 		else if (turnleft)

  003ec	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  003f0	74 18		 je	 SHORT $LN21@G_BuildTic

; 1096 : 			cmd->angleturn = (INT16)(cmd->angleturn + angleturn[tspeed]);

  003f2	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  003f5	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  003f9	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  003fc	03 0c 95 00 00
	00 00		 add	 ecx, DWORD PTR _angleturn[edx*4]
  00403	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00406	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN21@G_BuildTic:

; 1097 : 
; 1098 : 		if (analogjoystickmove && axis != 0)

  0040a	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  0040e	74 2b		 je	 SHORT $LN22@G_BuildTic
  00410	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00414	74 25		 je	 SHORT $LN22@G_BuildTic

; 1099 : 		{
; 1100 : 			// JOYAXISRANGE should be 1023 (divide by 1024)
; 1101 : 			cmd->angleturn = (INT16)(cmd->angleturn - ((axis * angleturn[1]) >> 10)); // ANALOG!

  00416	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00419	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0041d	ba 04 00 00 00	 mov	 edx, 4
  00422	c1 e2 00	 shl	 edx, 0
  00425	8b 45 ec	 mov	 eax, DWORD PTR _axis$[ebp]
  00428	0f af 82 00 00
	00 00		 imul	 eax, DWORD PTR _angleturn[edx]
  0042f	c1 f8 0a	 sar	 eax, 10			; 0000000aH
  00432	2b c8		 sub	 ecx, eax
  00434	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00437	66 89 4a 02	 mov	 WORD PTR [edx+2], cx
$LN22@G_BuildTic:

; 1102 : 		}
; 1103 : 	}
; 1104 : 
; 1105 : 	axis = Joy2Axis(AXISSTRAFE);

  0043b	6a 04		 push	 4
  0043d	e8 00 00 00 00	 call	 _Joy2Axis
  00442	83 c4 04	 add	 esp, 4
  00445	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 1106 : 	if (gamepadjoystickmove && axis != 0)

  00448	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  0044c	74 36		 je	 SHORT $LN23@G_BuildTic
  0044e	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00452	74 30		 je	 SHORT $LN23@G_BuildTic

; 1107 : 	{
; 1108 : 		if (axis < 0)

  00454	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00458	7d 12		 jge	 SHORT $LN25@G_BuildTic

; 1109 : 			side += sidemove[speed];

  0045a	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  0045d	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00460	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _sidemove[eax*4]
  00467	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
  0046a	eb 16		 jmp	 SHORT $LN27@G_BuildTic
$LN25@G_BuildTic:

; 1110 : 		else if (axis > 0)

  0046c	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00470	7e 10		 jle	 SHORT $LN27@G_BuildTic

; 1111 : 			side -= sidemove[speed];

  00472	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00475	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00478	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _sidemove[eax*4]
  0047f	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN27@G_BuildTic:

; 1112 : 	}

  00482	eb 27		 jmp	 SHORT $LN28@G_BuildTic
$LN23@G_BuildTic:

; 1113 : 	else if (analogjoystickmove && axis != 0)

  00484	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  00488	74 21		 je	 SHORT $LN28@G_BuildTic
  0048a	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  0048e	74 1b		 je	 SHORT $LN28@G_BuildTic

; 1114 : 	{
; 1115 : 		// JOYAXISRANGE is supposed to be 1023 (divide by 1024)
; 1116 : 			side += ((axis * sidemove[1]) >> 10);

  00490	b8 04 00 00 00	 mov	 eax, 4
  00495	c1 e0 00	 shl	 eax, 0
  00498	8b 4d ec	 mov	 ecx, DWORD PTR _axis$[ebp]
  0049b	0f af 88 00 00
	00 00		 imul	 ecx, DWORD PTR _sidemove[eax]
  004a2	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  004a5	03 4d f0	 add	 ecx, DWORD PTR _side$[ebp]
  004a8	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN28@G_BuildTic:

; 1117 : 	}
; 1118 : 
; 1119 : 	// forward with key or button
; 1120 : 	axis = Joy2Axis(AXISMOVE);

  004ab	6a 02		 push	 2
  004ad	e8 00 00 00 00	 call	 _Joy2Axis
  004b2	83 c4 04	 add	 esp, 4
  004b5	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 1121 : 	if (gamekeydown[gamecontrolbis[gc_forward][0]] ||
; 1122 : 		gamekeydown[gamecontrolbis[gc_forward][1]] ||

  004b8	b8 08 00 00 00	 mov	 eax, 8
  004bd	c1 e0 00	 shl	 eax, 0
  004c0	b9 04 00 00 00	 mov	 ecx, 4
  004c5	6b d1 00	 imul	 edx, ecx, 0
  004c8	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  004cf	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  004d6	85 c9		 test	 ecx, ecx
  004d8	75 36		 jne	 SHORT $LN30@G_BuildTic
  004da	b8 08 00 00 00	 mov	 eax, 8
  004df	c1 e0 00	 shl	 eax, 0
  004e2	b9 04 00 00 00	 mov	 ecx, 4
  004e7	c1 e1 00	 shl	 ecx, 0
  004ea	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  004f1	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  004f8	85 c0		 test	 eax, eax
  004fa	75 14		 jne	 SHORT $LN30@G_BuildTic
  004fc	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  00500	0f 84 c2 00 00
	00		 je	 $LN32@G_BuildTic
  00506	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  0050a	0f 8d b8 00 00
	00		 jge	 $LN32@G_BuildTic
$LN30@G_BuildTic:

; 1123 : 		(gamepadjoystickmove && axis < 0))
; 1124 : 	{
; 1125 : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 1126 : 		if ((gamekeydown[gamecontrolbis[gc_straferight][0]] || gamekeydown[gamecontrolbis[gc_straferight][1]]) ||

  00510	b8 08 00 00 00	 mov	 eax, 8
  00515	c1 e0 02	 shl	 eax, 2
  00518	b9 04 00 00 00	 mov	 ecx, 4
  0051d	6b d1 00	 imul	 edx, ecx, 0
  00520	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  00527	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0052e	85 c9		 test	 ecx, ecx
  00530	75 66		 jne	 SHORT $LN34@G_BuildTic
  00532	b8 08 00 00 00	 mov	 eax, 8
  00537	c1 e0 02	 shl	 eax, 2
  0053a	b9 04 00 00 00	 mov	 ecx, 4
  0053f	c1 e1 00	 shl	 ecx, 0
  00542	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  00549	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00550	85 c0		 test	 eax, eax
  00552	75 44		 jne	 SHORT $LN34@G_BuildTic
  00554	b8 08 00 00 00	 mov	 eax, 8
  00559	6b c8 05	 imul	 ecx, eax, 5
  0055c	ba 04 00 00 00	 mov	 edx, 4
  00561	6b c2 00	 imul	 eax, edx, 0
  00564	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  0056b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00572	85 d2		 test	 edx, edx
  00574	75 22		 jne	 SHORT $LN34@G_BuildTic
  00576	b8 08 00 00 00	 mov	 eax, 8
  0057b	6b c8 05	 imul	 ecx, eax, 5
  0057e	ba 04 00 00 00	 mov	 edx, 4
  00583	c1 e2 00	 shl	 edx, 0
  00586	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  0058d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00594	85 c9		 test	 ecx, ecx
  00596	74 20		 je	 SHORT $LN31@G_BuildTic
$LN34@G_BuildTic:

; 1127 : 			(gamekeydown[gamecontrolbis[gc_strafeleft][0]] || gamekeydown[gamecontrolbis[gc_strafeleft][1]]))
; 1128 : 			forward += FixedMul(forwardmove[speed], FRACUNIT * 3 / 4);

  00598	68 00 c0 00 00	 push	 49152			; 0000c000H
  0059d	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  005a0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _forwardmove[eax*4]
  005a7	51		 push	 ecx
  005a8	e8 00 00 00 00	 call	 _FixedMul
  005ad	83 c4 08	 add	 esp, 8
  005b0	03 45 f4	 add	 eax, DWORD PTR _forward$[ebp]
  005b3	89 45 f4	 mov	 DWORD PTR _forward$[ebp], eax
  005b6	eb 10		 jmp	 SHORT $LN32@G_BuildTic
$LN31@G_BuildTic:

; 1129 : 		else
; 1130 : 			forward += forwardmove[speed];

  005b8	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  005bb	8b 4d f4	 mov	 ecx, DWORD PTR _forward$[ebp]
  005be	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _forwardmove[eax*4]
  005c5	89 4d f4	 mov	 DWORD PTR _forward$[ebp], ecx
$LN32@G_BuildTic:

; 1131 : 	}
; 1132 : 
; 1133 : 	if (gamekeydown[gamecontrolbis[gc_backward][0]] ||
; 1134 : 		gamekeydown[gamecontrolbis[gc_backward][1]] ||

  005c8	b8 08 00 00 00	 mov	 eax, 8
  005cd	d1 e0		 shl	 eax, 1
  005cf	b9 04 00 00 00	 mov	 ecx, 4
  005d4	6b d1 00	 imul	 edx, ecx, 0
  005d7	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  005de	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  005e5	85 c9		 test	 ecx, ecx
  005e7	75 35		 jne	 SHORT $LN36@G_BuildTic
  005e9	b8 08 00 00 00	 mov	 eax, 8
  005ee	d1 e0		 shl	 eax, 1
  005f0	b9 04 00 00 00	 mov	 ecx, 4
  005f5	c1 e1 00	 shl	 ecx, 0
  005f8	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  005ff	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00606	85 c0		 test	 eax, eax
  00608	75 14		 jne	 SHORT $LN36@G_BuildTic
  0060a	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  0060e	0f 84 c4 00 00
	00		 je	 $LN38@G_BuildTic
  00614	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00618	0f 8e ba 00 00
	00		 jle	 $LN38@G_BuildTic
$LN36@G_BuildTic:

; 1135 : 		(gamepadjoystickmove && axis > 0))
; 1136 : 	{
; 1137 : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 1138 : 		if ((gamekeydown[gamecontrolbis[gc_straferight][0]] || gamekeydown[gamecontrolbis[gc_straferight][1]]) ||

  0061e	b8 08 00 00 00	 mov	 eax, 8
  00623	c1 e0 02	 shl	 eax, 2
  00626	b9 04 00 00 00	 mov	 ecx, 4
  0062b	6b d1 00	 imul	 edx, ecx, 0
  0062e	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  00635	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0063c	85 c9		 test	 ecx, ecx
  0063e	75 66		 jne	 SHORT $LN40@G_BuildTic
  00640	b8 08 00 00 00	 mov	 eax, 8
  00645	c1 e0 02	 shl	 eax, 2
  00648	b9 04 00 00 00	 mov	 ecx, 4
  0064d	c1 e1 00	 shl	 ecx, 0
  00650	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  00657	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  0065e	85 c0		 test	 eax, eax
  00660	75 44		 jne	 SHORT $LN40@G_BuildTic
  00662	b8 08 00 00 00	 mov	 eax, 8
  00667	6b c8 05	 imul	 ecx, eax, 5
  0066a	ba 04 00 00 00	 mov	 edx, 4
  0066f	6b c2 00	 imul	 eax, edx, 0
  00672	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00679	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00680	85 d2		 test	 edx, edx
  00682	75 22		 jne	 SHORT $LN40@G_BuildTic
  00684	b8 08 00 00 00	 mov	 eax, 8
  00689	6b c8 05	 imul	 ecx, eax, 5
  0068c	ba 04 00 00 00	 mov	 edx, 4
  00691	c1 e2 00	 shl	 edx, 0
  00694	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  0069b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  006a2	85 c9		 test	 ecx, ecx
  006a4	74 22		 je	 SHORT $LN37@G_BuildTic
$LN40@G_BuildTic:

; 1139 : 			(gamekeydown[gamecontrolbis[gc_strafeleft][0]] || gamekeydown[gamecontrolbis[gc_strafeleft][1]]))
; 1140 : 			forward -= FixedMul(forwardmove[speed], FRACUNIT * 3 / 4);

  006a6	68 00 c0 00 00	 push	 49152			; 0000c000H
  006ab	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  006ae	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _forwardmove[eax*4]
  006b5	51		 push	 ecx
  006b6	e8 00 00 00 00	 call	 _FixedMul
  006bb	83 c4 08	 add	 esp, 8
  006be	8b 55 f4	 mov	 edx, DWORD PTR _forward$[ebp]
  006c1	2b d0		 sub	 edx, eax
  006c3	89 55 f4	 mov	 DWORD PTR _forward$[ebp], edx
  006c6	eb 10		 jmp	 SHORT $LN38@G_BuildTic
$LN37@G_BuildTic:

; 1141 : 		else
; 1142 : 			forward -= forwardmove[speed];

  006c8	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  006cb	8b 4d f4	 mov	 ecx, DWORD PTR _forward$[ebp]
  006ce	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _forwardmove[eax*4]
  006d5	89 4d f4	 mov	 DWORD PTR _forward$[ebp], ecx
$LN38@G_BuildTic:

; 1143 : 	}
; 1144 : 
; 1145 : 	if (analogjoystickmove && axis != 0)

  006d8	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  006dc	74 23		 je	 SHORT $LN41@G_BuildTic
  006de	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  006e2	74 1d		 je	 SHORT $LN41@G_BuildTic

; 1146 : 		forward -= ((axis * forwardmove[1]) >> 10); // ANALOG!

  006e4	b8 04 00 00 00	 mov	 eax, 4
  006e9	c1 e0 00	 shl	 eax, 0
  006ec	8b 4d ec	 mov	 ecx, DWORD PTR _axis$[ebp]
  006ef	0f af 88 00 00
	00 00		 imul	 ecx, DWORD PTR _forwardmove[eax]
  006f6	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  006f9	8b 55 f4	 mov	 edx, DWORD PTR _forward$[ebp]
  006fc	2b d1		 sub	 edx, ecx
  006fe	89 55 f4	 mov	 DWORD PTR _forward$[ebp], edx
$LN41@G_BuildTic:

; 1147 : 
; 1148 : 	// some people strafe left & right with mouse buttons
; 1149 : 	if (gamekeydown[gamecontrolbis[gc_straferight][0]] ||

  00701	b8 08 00 00 00	 mov	 eax, 8
  00706	c1 e0 02	 shl	 eax, 2
  00709	b9 04 00 00 00	 mov	 ecx, 4
  0070e	6b d1 00	 imul	 edx, ecx, 0
  00711	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  00718	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0071f	85 c9		 test	 ecx, ecx
  00721	75 26		 jne	 SHORT $LN43@G_BuildTic
  00723	b8 08 00 00 00	 mov	 eax, 8
  00728	c1 e0 02	 shl	 eax, 2
  0072b	b9 04 00 00 00	 mov	 ecx, 4
  00730	c1 e1 00	 shl	 ecx, 0
  00733	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  0073a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00741	85 c0		 test	 eax, eax
  00743	0f 84 b6 00 00
	00		 je	 $LN45@G_BuildTic
$LN43@G_BuildTic:

; 1150 : 		gamekeydown[gamecontrolbis[gc_straferight][1]])
; 1151 : 	{
; 1152 : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 1153 : 		if ((gamekeydown[gamecontrolbis[gc_forward][0]] || gamekeydown[gamecontrolbis[gc_forward][1]]) ||

  00749	b8 08 00 00 00	 mov	 eax, 8
  0074e	c1 e0 00	 shl	 eax, 0
  00751	b9 04 00 00 00	 mov	 ecx, 4
  00756	6b d1 00	 imul	 edx, ecx, 0
  00759	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  00760	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00767	85 c9		 test	 ecx, ecx
  00769	75 64		 jne	 SHORT $LN47@G_BuildTic
  0076b	b8 08 00 00 00	 mov	 eax, 8
  00770	c1 e0 00	 shl	 eax, 0
  00773	b9 04 00 00 00	 mov	 ecx, 4
  00778	c1 e1 00	 shl	 ecx, 0
  0077b	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  00782	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00789	85 c0		 test	 eax, eax
  0078b	75 42		 jne	 SHORT $LN47@G_BuildTic
  0078d	b8 08 00 00 00	 mov	 eax, 8
  00792	d1 e0		 shl	 eax, 1
  00794	b9 04 00 00 00	 mov	 ecx, 4
  00799	6b d1 00	 imul	 edx, ecx, 0
  0079c	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  007a3	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  007aa	85 c9		 test	 ecx, ecx
  007ac	75 21		 jne	 SHORT $LN47@G_BuildTic
  007ae	b8 08 00 00 00	 mov	 eax, 8
  007b3	d1 e0		 shl	 eax, 1
  007b5	b9 04 00 00 00	 mov	 ecx, 4
  007ba	c1 e1 00	 shl	 ecx, 0
  007bd	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  007c4	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  007cb	85 c0		 test	 eax, eax
  007cd	74 20		 je	 SHORT $LN44@G_BuildTic
$LN47@G_BuildTic:

; 1154 : 			(gamekeydown[gamecontrolbis[gc_backward][0]] || gamekeydown[gamecontrolbis[gc_backward][1]]))
; 1155 : 			side += FixedMul(sidemove[speed], FRACUNIT * 3 / 4);

  007cf	68 00 c0 00 00	 push	 49152			; 0000c000H
  007d4	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  007d7	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _sidemove[eax*4]
  007de	51		 push	 ecx
  007df	e8 00 00 00 00	 call	 _FixedMul
  007e4	83 c4 08	 add	 esp, 8
  007e7	03 45 f0	 add	 eax, DWORD PTR _side$[ebp]
  007ea	89 45 f0	 mov	 DWORD PTR _side$[ebp], eax
  007ed	eb 10		 jmp	 SHORT $LN45@G_BuildTic
$LN44@G_BuildTic:

; 1156 : 		else
; 1157 : 			side += sidemove[speed];

  007ef	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  007f2	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  007f5	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _sidemove[eax*4]
  007fc	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN45@G_BuildTic:

; 1158 : 	}
; 1159 : 	if (gamekeydown[gamecontrolbis[gc_strafeleft][0]] ||

  007ff	b8 08 00 00 00	 mov	 eax, 8
  00804	6b c8 05	 imul	 ecx, eax, 5
  00807	ba 04 00 00 00	 mov	 edx, 4
  0080c	6b c2 00	 imul	 eax, edx, 0
  0080f	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00816	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  0081d	85 d2		 test	 edx, edx
  0081f	75 26		 jne	 SHORT $LN49@G_BuildTic
  00821	b8 08 00 00 00	 mov	 eax, 8
  00826	6b c8 05	 imul	 ecx, eax, 5
  00829	ba 04 00 00 00	 mov	 edx, 4
  0082e	c1 e2 00	 shl	 edx, 0
  00831	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00838	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0083f	85 c9		 test	 ecx, ecx
  00841	0f 84 b8 00 00
	00		 je	 $LN51@G_BuildTic
$LN49@G_BuildTic:

; 1160 : 		gamekeydown[gamecontrolbis[gc_strafeleft][1]])
; 1161 : 	{
; 1162 : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 1163 : 		if ((gamekeydown[gamecontrolbis[gc_forward][0]] || gamekeydown[gamecontrolbis[gc_forward][1]]) ||

  00847	b8 08 00 00 00	 mov	 eax, 8
  0084c	c1 e0 00	 shl	 eax, 0
  0084f	b9 04 00 00 00	 mov	 ecx, 4
  00854	6b d1 00	 imul	 edx, ecx, 0
  00857	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  0085e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00865	85 c9		 test	 ecx, ecx
  00867	75 64		 jne	 SHORT $LN53@G_BuildTic
  00869	b8 08 00 00 00	 mov	 eax, 8
  0086e	c1 e0 00	 shl	 eax, 0
  00871	b9 04 00 00 00	 mov	 ecx, 4
  00876	c1 e1 00	 shl	 ecx, 0
  00879	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  00880	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00887	85 c0		 test	 eax, eax
  00889	75 42		 jne	 SHORT $LN53@G_BuildTic
  0088b	b8 08 00 00 00	 mov	 eax, 8
  00890	d1 e0		 shl	 eax, 1
  00892	b9 04 00 00 00	 mov	 ecx, 4
  00897	6b d1 00	 imul	 edx, ecx, 0
  0089a	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  008a1	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  008a8	85 c9		 test	 ecx, ecx
  008aa	75 21		 jne	 SHORT $LN53@G_BuildTic
  008ac	b8 08 00 00 00	 mov	 eax, 8
  008b1	d1 e0		 shl	 eax, 1
  008b3	b9 04 00 00 00	 mov	 ecx, 4
  008b8	c1 e1 00	 shl	 ecx, 0
  008bb	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  008c2	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  008c9	85 c0		 test	 eax, eax
  008cb	74 22		 je	 SHORT $LN50@G_BuildTic
$LN53@G_BuildTic:

; 1164 : 			(gamekeydown[gamecontrolbis[gc_backward][0]] || gamekeydown[gamecontrolbis[gc_backward][1]]))
; 1165 : 			side -= FixedMul(sidemove[speed], FRACUNIT * 3 / 4);

  008cd	68 00 c0 00 00	 push	 49152			; 0000c000H
  008d2	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  008d5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _sidemove[eax*4]
  008dc	51		 push	 ecx
  008dd	e8 00 00 00 00	 call	 _FixedMul
  008e2	83 c4 08	 add	 esp, 8
  008e5	8b 55 f0	 mov	 edx, DWORD PTR _side$[ebp]
  008e8	2b d0		 sub	 edx, eax
  008ea	89 55 f0	 mov	 DWORD PTR _side$[ebp], edx
  008ed	eb 10		 jmp	 SHORT $LN51@G_BuildTic
$LN50@G_BuildTic:

; 1166 : 		else
; 1167 : 			side -= sidemove[speed];

  008ef	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  008f2	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  008f5	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _sidemove[eax*4]
  008fc	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN51@G_BuildTic:

; 1168 : 	}
; 1169 : 
; 1170 : 	// Next Weapon
; 1171 : 	if (gamekeydown[gamecontrolbis[gc_weaponnext][0]] ||

  008ff	b8 08 00 00 00	 mov	 eax, 8
  00904	c1 e0 03	 shl	 eax, 3
  00907	b9 04 00 00 00	 mov	 ecx, 4
  0090c	6b d1 00	 imul	 edx, ecx, 0
  0090f	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  00916	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0091d	85 c9		 test	 ecx, ecx
  0091f	75 22		 jne	 SHORT $LN55@G_BuildTic
  00921	b8 08 00 00 00	 mov	 eax, 8
  00926	c1 e0 03	 shl	 eax, 3
  00929	b9 04 00 00 00	 mov	 ecx, 4
  0092e	c1 e1 00	 shl	 ecx, 0
  00931	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  00938	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  0093f	85 c0		 test	 eax, eax
  00941	74 11		 je	 SHORT $LN54@G_BuildTic
$LN55@G_BuildTic:

; 1172 : 		gamekeydown[gamecontrolbis[gc_weaponnext][1]])
; 1173 : 		cmd->buttons |= BT_WEAPONNEXT;

  00943	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00946	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0094a	83 c9 10	 or	 ecx, 16			; 00000010H
  0094d	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00950	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN54@G_BuildTic:

; 1174 : 
; 1175 : 	// Previous Weapon
; 1176 : 	if (gamekeydown[gamecontrolbis[gc_weaponprev][0]] ||

  00954	b8 08 00 00 00	 mov	 eax, 8
  00959	6b c8 09	 imul	 ecx, eax, 9
  0095c	ba 04 00 00 00	 mov	 edx, 4
  00961	6b c2 00	 imul	 eax, edx, 0
  00964	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  0096b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00972	85 d2		 test	 edx, edx
  00974	75 22		 jne	 SHORT $LN57@G_BuildTic
  00976	b8 08 00 00 00	 mov	 eax, 8
  0097b	6b c8 09	 imul	 ecx, eax, 9
  0097e	ba 04 00 00 00	 mov	 edx, 4
  00983	c1 e2 00	 shl	 edx, 0
  00986	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  0098d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00994	85 c9		 test	 ecx, ecx
  00996	74 11		 je	 SHORT $LN56@G_BuildTic
$LN57@G_BuildTic:

; 1177 : 		gamekeydown[gamecontrolbis[gc_weaponprev][1]])
; 1178 : 		cmd->buttons |= BT_WEAPONPREV;

  00998	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  0099b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0099f	83 c9 20	 or	 ecx, 32			; 00000020H
  009a2	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  009a5	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN56@G_BuildTic:

; 1179 : 
; 1180 : 	//use the three avaliable bits to determine the weapon.
; 1181 : 	cmd->buttons &= ~BT_WEAPONMASK;

  009a9	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  009ac	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  009b0	83 e1 f8	 and	 ecx, -8			; fffffff8H
  009b3	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  009b6	66 89 4a 06	 mov	 WORD PTR [edx+6], cx

; 1182 : 
; 1183 : 	if (gamekeydown[gamecontrolbis[gc_normalring][0]] ||

  009ba	b8 08 00 00 00	 mov	 eax, 8
  009bf	6b c8 0a	 imul	 ecx, eax, 10
  009c2	ba 04 00 00 00	 mov	 edx, 4
  009c7	6b c2 00	 imul	 eax, edx, 0
  009ca	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  009d1	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  009d8	85 d2		 test	 edx, edx
  009da	75 22		 jne	 SHORT $LN60@G_BuildTic
  009dc	b8 08 00 00 00	 mov	 eax, 8
  009e1	6b c8 0a	 imul	 ecx, eax, 10
  009e4	ba 04 00 00 00	 mov	 edx, 4
  009e9	c1 e2 00	 shl	 edx, 0
  009ec	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  009f3	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  009fa	85 c9		 test	 ecx, ecx
  009fc	74 16		 je	 SHORT $LN58@G_BuildTic
$LN60@G_BuildTic:

; 1184 : 		gamekeydown[gamecontrolbis[gc_normalring][1]])
; 1185 : 		cmd->buttons |= 1; // Normal Ring

  009fe	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00a01	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00a05	83 c9 01	 or	 ecx, 1
  00a08	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00a0b	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00a0f	e9 14 02 00 00	 jmp	 $LN76@G_BuildTic
$LN58@G_BuildTic:

; 1186 : 	else if (gamekeydown[gamecontrolbis[gc_autoring][0]] ||

  00a14	b8 08 00 00 00	 mov	 eax, 8
  00a19	6b c8 0b	 imul	 ecx, eax, 11
  00a1c	ba 04 00 00 00	 mov	 edx, 4
  00a21	6b c2 00	 imul	 eax, edx, 0
  00a24	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00a2b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00a32	85 d2		 test	 edx, edx
  00a34	75 22		 jne	 SHORT $LN63@G_BuildTic
  00a36	b8 08 00 00 00	 mov	 eax, 8
  00a3b	6b c8 0b	 imul	 ecx, eax, 11
  00a3e	ba 04 00 00 00	 mov	 edx, 4
  00a43	c1 e2 00	 shl	 edx, 0
  00a46	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00a4d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00a54	85 c9		 test	 ecx, ecx
  00a56	74 16		 je	 SHORT $LN61@G_BuildTic
$LN63@G_BuildTic:

; 1187 : 		gamekeydown[gamecontrolbis[gc_autoring][1]])
; 1188 : 		cmd->buttons |= 2; // Automatic Ring

  00a58	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00a5b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00a5f	83 c9 02	 or	 ecx, 2
  00a62	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00a65	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00a69	e9 ba 01 00 00	 jmp	 $LN76@G_BuildTic
$LN61@G_BuildTic:

; 1189 : 	else if (gamekeydown[gamecontrolbis[gc_bouncering][0]] ||

  00a6e	b8 08 00 00 00	 mov	 eax, 8
  00a73	6b c8 0c	 imul	 ecx, eax, 12
  00a76	ba 04 00 00 00	 mov	 edx, 4
  00a7b	6b c2 00	 imul	 eax, edx, 0
  00a7e	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00a85	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00a8c	85 d2		 test	 edx, edx
  00a8e	75 22		 jne	 SHORT $LN66@G_BuildTic
  00a90	b8 08 00 00 00	 mov	 eax, 8
  00a95	6b c8 0c	 imul	 ecx, eax, 12
  00a98	ba 04 00 00 00	 mov	 edx, 4
  00a9d	c1 e2 00	 shl	 edx, 0
  00aa0	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00aa7	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00aae	85 c9		 test	 ecx, ecx
  00ab0	74 16		 je	 SHORT $LN64@G_BuildTic
$LN66@G_BuildTic:

; 1190 : 		gamekeydown[gamecontrolbis[gc_bouncering][1]])
; 1191 : 		cmd->buttons |= 3; // Bounce Ring

  00ab2	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00ab5	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00ab9	83 c9 03	 or	 ecx, 3
  00abc	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00abf	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00ac3	e9 60 01 00 00	 jmp	 $LN76@G_BuildTic
$LN64@G_BuildTic:

; 1192 : 	else if (gamekeydown[gamecontrolbis[gc_scatterring][0]] ||

  00ac8	b8 08 00 00 00	 mov	 eax, 8
  00acd	6b c8 0d	 imul	 ecx, eax, 13
  00ad0	ba 04 00 00 00	 mov	 edx, 4
  00ad5	6b c2 00	 imul	 eax, edx, 0
  00ad8	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00adf	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00ae6	85 d2		 test	 edx, edx
  00ae8	75 22		 jne	 SHORT $LN69@G_BuildTic
  00aea	b8 08 00 00 00	 mov	 eax, 8
  00aef	6b c8 0d	 imul	 ecx, eax, 13
  00af2	ba 04 00 00 00	 mov	 edx, 4
  00af7	c1 e2 00	 shl	 edx, 0
  00afa	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00b01	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00b08	85 c9		 test	 ecx, ecx
  00b0a	74 16		 je	 SHORT $LN67@G_BuildTic
$LN69@G_BuildTic:

; 1193 : 		gamekeydown[gamecontrolbis[gc_scatterring][1]])
; 1194 : 		cmd->buttons |= 4; // Scatter Ring

  00b0c	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00b0f	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00b13	83 c9 04	 or	 ecx, 4
  00b16	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00b19	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00b1d	e9 06 01 00 00	 jmp	 $LN76@G_BuildTic
$LN67@G_BuildTic:

; 1195 : 	else if (gamekeydown[gamecontrolbis[gc_grenadering][0]] ||

  00b22	b8 08 00 00 00	 mov	 eax, 8
  00b27	6b c8 0e	 imul	 ecx, eax, 14
  00b2a	ba 04 00 00 00	 mov	 edx, 4
  00b2f	6b c2 00	 imul	 eax, edx, 0
  00b32	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00b39	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00b40	85 d2		 test	 edx, edx
  00b42	75 22		 jne	 SHORT $LN72@G_BuildTic
  00b44	b8 08 00 00 00	 mov	 eax, 8
  00b49	6b c8 0e	 imul	 ecx, eax, 14
  00b4c	ba 04 00 00 00	 mov	 edx, 4
  00b51	c1 e2 00	 shl	 edx, 0
  00b54	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00b5b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00b62	85 c9		 test	 ecx, ecx
  00b64	74 16		 je	 SHORT $LN70@G_BuildTic
$LN72@G_BuildTic:

; 1196 : 		gamekeydown[gamecontrolbis[gc_grenadering][1]])
; 1197 : 		cmd->buttons |= 5; // Grenade Ring

  00b66	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00b69	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00b6d	83 c9 05	 or	 ecx, 5
  00b70	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00b73	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00b77	e9 ac 00 00 00	 jmp	 $LN76@G_BuildTic
$LN70@G_BuildTic:

; 1198 : 	else if (gamekeydown[gamecontrolbis[gc_explosionring][0]] ||

  00b7c	b8 08 00 00 00	 mov	 eax, 8
  00b81	6b c8 0f	 imul	 ecx, eax, 15
  00b84	ba 04 00 00 00	 mov	 edx, 4
  00b89	6b c2 00	 imul	 eax, edx, 0
  00b8c	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00b93	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00b9a	85 d2		 test	 edx, edx
  00b9c	75 22		 jne	 SHORT $LN75@G_BuildTic
  00b9e	b8 08 00 00 00	 mov	 eax, 8
  00ba3	6b c8 0f	 imul	 ecx, eax, 15
  00ba6	ba 04 00 00 00	 mov	 edx, 4
  00bab	c1 e2 00	 shl	 edx, 0
  00bae	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00bb5	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00bbc	85 c9		 test	 ecx, ecx
  00bbe	74 13		 je	 SHORT $LN73@G_BuildTic
$LN75@G_BuildTic:

; 1199 : 		gamekeydown[gamecontrolbis[gc_explosionring][1]])
; 1200 : 		cmd->buttons |= 6; // Explosion Ring

  00bc0	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00bc3	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00bc7	83 c9 06	 or	 ecx, 6
  00bca	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00bcd	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00bd1	eb 55		 jmp	 SHORT $LN76@G_BuildTic
$LN73@G_BuildTic:

; 1201 : 	else if (gamekeydown[gamecontrolbis[gc_railring][0]] ||

  00bd3	b8 08 00 00 00	 mov	 eax, 8
  00bd8	c1 e0 04	 shl	 eax, 4
  00bdb	b9 04 00 00 00	 mov	 ecx, 4
  00be0	6b d1 00	 imul	 edx, ecx, 0
  00be3	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  00bea	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00bf1	85 c9		 test	 ecx, ecx
  00bf3	75 22		 jne	 SHORT $LN77@G_BuildTic
  00bf5	b8 08 00 00 00	 mov	 eax, 8
  00bfa	c1 e0 04	 shl	 eax, 4
  00bfd	b9 04 00 00 00	 mov	 ecx, 4
  00c02	c1 e1 00	 shl	 ecx, 0
  00c05	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  00c0c	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00c13	85 c0		 test	 eax, eax
  00c15	74 11		 je	 SHORT $LN76@G_BuildTic
$LN77@G_BuildTic:

; 1202 : 		gamekeydown[gamecontrolbis[gc_railring][1]])
; 1203 : 		cmd->buttons |= 7; // Rail Ring

  00c17	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00c1a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00c1e	83 c9 07	 or	 ecx, 7
  00c21	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00c24	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN76@G_BuildTic:

; 1204 : 
; 1205 : 	// fire with any button/key
; 1206 : 	axis = Joy2Axis(AXISFIRE);

  00c28	6a 06		 push	 6
  00c2a	e8 00 00 00 00	 call	 _Joy2Axis
  00c2f	83 c4 04	 add	 esp, 4
  00c32	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 1207 : 	if (gamekeydown[gamecontrolbis[gc_fire][0]] ||
; 1208 : 		gamekeydown[gamecontrolbis[gc_fire][1]] ||

  00c35	b8 08 00 00 00	 mov	 eax, 8
  00c3a	6b c8 11	 imul	 ecx, eax, 17
  00c3d	ba 04 00 00 00	 mov	 edx, 4
  00c42	6b c2 00	 imul	 eax, edx, 0
  00c45	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00c4c	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00c53	85 d2		 test	 edx, edx
  00c55	75 31		 jne	 SHORT $LN79@G_BuildTic
  00c57	b8 08 00 00 00	 mov	 eax, 8
  00c5c	6b c8 11	 imul	 ecx, eax, 17
  00c5f	ba 04 00 00 00	 mov	 edx, 4
  00c64	c1 e2 00	 shl	 edx, 0
  00c67	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00c6e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00c75	85 c9		 test	 ecx, ecx
  00c77	75 0f		 jne	 SHORT $LN79@G_BuildTic
  00c79	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick2+20, 0
  00c80	74 1a		 je	 SHORT $LN78@G_BuildTic
  00c82	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00c86	7e 14		 jle	 SHORT $LN78@G_BuildTic
$LN79@G_BuildTic:

; 1209 : 		(cv_usejoystick2.value && axis > 0))
; 1210 : 		cmd->buttons |= BT_ATTACK;

  00c88	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00c8b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00c8f	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  00c95	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00c98	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN78@G_BuildTic:

; 1211 : 
; 1212 : 	// fire normal with any button/key
; 1213 : 	axis = Joy2Axis(AXISFIRENORMAL);

  00c9c	6a 07		 push	 7
  00c9e	e8 00 00 00 00	 call	 _Joy2Axis
  00ca3	83 c4 04	 add	 esp, 4
  00ca6	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 1214 : 	if (gamekeydown[gamecontrolbis[gc_firenormal][0]] ||
; 1215 : 		gamekeydown[gamecontrolbis[gc_firenormal][1]] ||

  00ca9	b8 08 00 00 00	 mov	 eax, 8
  00cae	6b c8 12	 imul	 ecx, eax, 18
  00cb1	ba 04 00 00 00	 mov	 edx, 4
  00cb6	6b c2 00	 imul	 eax, edx, 0
  00cb9	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00cc0	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00cc7	85 d2		 test	 edx, edx
  00cc9	75 31		 jne	 SHORT $LN81@G_BuildTic
  00ccb	b8 08 00 00 00	 mov	 eax, 8
  00cd0	6b c8 12	 imul	 ecx, eax, 18
  00cd3	ba 04 00 00 00	 mov	 edx, 4
  00cd8	c1 e2 00	 shl	 edx, 0
  00cdb	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00ce2	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00ce9	85 c9		 test	 ecx, ecx
  00ceb	75 0f		 jne	 SHORT $LN81@G_BuildTic
  00ced	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick2+20, 0
  00cf4	74 1a		 je	 SHORT $LN80@G_BuildTic
  00cf6	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00cfa	7e 14		 jle	 SHORT $LN80@G_BuildTic
$LN81@G_BuildTic:

; 1216 : 		(cv_usejoystick2.value && axis > 0))
; 1217 : 		cmd->buttons |= BT_FIRENORMAL;

  00cfc	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00cff	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00d03	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  00d09	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00d0c	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN80@G_BuildTic:

; 1218 : 
; 1219 : 	if (gamekeydown[gamecontrolbis[gc_tossflag][0]] ||

  00d10	b8 08 00 00 00	 mov	 eax, 8
  00d15	6b c8 13	 imul	 ecx, eax, 19
  00d18	ba 04 00 00 00	 mov	 edx, 4
  00d1d	6b c2 00	 imul	 eax, edx, 0
  00d20	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00d27	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00d2e	85 d2		 test	 edx, edx
  00d30	75 22		 jne	 SHORT $LN83@G_BuildTic
  00d32	b8 08 00 00 00	 mov	 eax, 8
  00d37	6b c8 13	 imul	 ecx, eax, 19
  00d3a	ba 04 00 00 00	 mov	 edx, 4
  00d3f	c1 e2 00	 shl	 edx, 0
  00d42	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00d49	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00d50	85 c9		 test	 ecx, ecx
  00d52	74 14		 je	 SHORT $LN82@G_BuildTic
$LN83@G_BuildTic:

; 1220 : 		gamekeydown[gamecontrolbis[gc_tossflag][1]])
; 1221 : 		cmd->buttons |= BT_TOSSFLAG;

  00d54	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00d57	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00d5b	81 c9 00 20 00
	00		 or	 ecx, 8192		; 00002000H
  00d61	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00d64	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN82@G_BuildTic:

; 1222 : 
; 1223 : 	// use with any button/key
; 1224 : 	if (gamekeydown[gamecontrolbis[gc_use][0]] ||

  00d68	b8 08 00 00 00	 mov	 eax, 8
  00d6d	6b c8 14	 imul	 ecx, eax, 20
  00d70	ba 04 00 00 00	 mov	 edx, 4
  00d75	6b c2 00	 imul	 eax, edx, 0
  00d78	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00d7f	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00d86	85 d2		 test	 edx, edx
  00d88	75 22		 jne	 SHORT $LN85@G_BuildTic
  00d8a	b8 08 00 00 00	 mov	 eax, 8
  00d8f	6b c8 14	 imul	 ecx, eax, 20
  00d92	ba 04 00 00 00	 mov	 edx, 4
  00d97	c1 e2 00	 shl	 edx, 0
  00d9a	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00da1	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00da8	85 c9		 test	 ecx, ecx
  00daa	74 14		 je	 SHORT $LN84@G_BuildTic
$LN85@G_BuildTic:

; 1225 : 		gamekeydown[gamecontrolbis[gc_use][1]])
; 1226 : 		cmd->buttons |= BT_USE;

  00dac	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00daf	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00db3	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00db9	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00dbc	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN84@G_BuildTic:

; 1227 : 
; 1228 : 	// Taunts
; 1229 : 	if (gamekeydown[gamecontrolbis[gc_taunt][0]] ||

  00dc0	b8 08 00 00 00	 mov	 eax, 8
  00dc5	6b c8 15	 imul	 ecx, eax, 21
  00dc8	ba 04 00 00 00	 mov	 edx, 4
  00dcd	6b c2 00	 imul	 eax, edx, 0
  00dd0	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00dd7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00dde	85 d2		 test	 edx, edx
  00de0	75 22		 jne	 SHORT $LN87@G_BuildTic
  00de2	b8 08 00 00 00	 mov	 eax, 8
  00de7	6b c8 15	 imul	 ecx, eax, 21
  00dea	ba 04 00 00 00	 mov	 edx, 4
  00def	c1 e2 00	 shl	 edx, 0
  00df2	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00df9	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00e00	85 c9		 test	 ecx, ecx
  00e02	74 14		 je	 SHORT $LN86@G_BuildTic
$LN87@G_BuildTic:

; 1230 : 		gamekeydown[gamecontrolbis[gc_taunt][1]])
; 1231 : 		cmd->buttons |= BT_TAUNT;

  00e04	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e07	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00e0b	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  00e11	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00e14	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN86@G_BuildTic:

; 1232 : 
; 1233 : 	// Camera Controls
; 1234 : 	if ((gamekeydown[gamecontrolbis[gc_camleft][0]] ||
; 1235 : 		gamekeydown[gamecontrolbis[gc_camleft][1]]) &&

  00e18	b8 08 00 00 00	 mov	 eax, 8
  00e1d	6b c8 16	 imul	 ecx, eax, 22
  00e20	ba 04 00 00 00	 mov	 edx, 4
  00e25	6b c2 00	 imul	 eax, edx, 0
  00e28	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00e2f	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00e36	85 d2		 test	 edx, edx
  00e38	75 22		 jne	 SHORT $LN89@G_BuildTic
  00e3a	b8 08 00 00 00	 mov	 eax, 8
  00e3f	6b c8 16	 imul	 ecx, eax, 22
  00e42	ba 04 00 00 00	 mov	 edx, 4
  00e47	c1 e2 00	 shl	 edx, 0
  00e4a	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00e51	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00e58	85 c9		 test	 ecx, ecx
  00e5a	74 47		 je	 SHORT $LN88@G_BuildTic
$LN89@G_BuildTic:
  00e5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00e63	75 2a		 jne	 SHORT $LN90@G_BuildTic
  00e65	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00e6c	75 21		 jne	 SHORT $LN90@G_BuildTic
  00e6e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00e75	75 18		 jne	 SHORT $LN90@G_BuildTic
  00e77	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00e81	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00e87	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00e8d	74 14		 je	 SHORT $LN88@G_BuildTic
$LN90@G_BuildTic:

; 1236 : 		(cv_debug || cv_analog2.value || cv_objectplace.value || players[secondarydisplayplayer].pflags & PF_NIGHTSMODE))
; 1237 : 		cmd->buttons |= BT_CAMLEFT;

  00e8f	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e92	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00e96	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00e9c	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00e9f	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN88@G_BuildTic:

; 1238 : 
; 1239 : 	if ((gamekeydown[gamecontrolbis[gc_camright][0]] ||
; 1240 : 		gamekeydown[gamecontrolbis[gc_camright][1]]) &&

  00ea3	b8 08 00 00 00	 mov	 eax, 8
  00ea8	6b c8 17	 imul	 ecx, eax, 23
  00eab	ba 04 00 00 00	 mov	 edx, 4
  00eb0	6b c2 00	 imul	 eax, edx, 0
  00eb3	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00eba	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00ec1	85 d2		 test	 edx, edx
  00ec3	75 22		 jne	 SHORT $LN92@G_BuildTic
  00ec5	b8 08 00 00 00	 mov	 eax, 8
  00eca	6b c8 17	 imul	 ecx, eax, 23
  00ecd	ba 04 00 00 00	 mov	 edx, 4
  00ed2	c1 e2 00	 shl	 edx, 0
  00ed5	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00edc	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00ee3	85 c9		 test	 ecx, ecx
  00ee5	74 47		 je	 SHORT $LN91@G_BuildTic
$LN92@G_BuildTic:
  00ee7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00eee	75 2a		 jne	 SHORT $LN93@G_BuildTic
  00ef0	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  00ef7	75 21		 jne	 SHORT $LN93@G_BuildTic
  00ef9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00f00	75 18		 jne	 SHORT $LN93@G_BuildTic
  00f02	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00f0c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00f12	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00f18	74 14		 je	 SHORT $LN91@G_BuildTic
$LN93@G_BuildTic:

; 1241 : 		(cv_debug || cv_analog2.value || cv_objectplace.value || players[secondarydisplayplayer].pflags & PF_NIGHTSMODE))
; 1242 : 		cmd->buttons |= BT_CAMRIGHT;

  00f1a	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00f1d	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00f21	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00f27	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00f2a	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN91@G_BuildTic:

; 1243 : 
; 1244 : 	if (gamekeydown[gamecontrolbis[gc_camreset][0]] ||

  00f2e	b8 08 00 00 00	 mov	 eax, 8
  00f33	6b c8 18	 imul	 ecx, eax, 24
  00f36	ba 04 00 00 00	 mov	 edx, 4
  00f3b	6b c2 00	 imul	 eax, edx, 0
  00f3e	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  00f45	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00f4c	85 d2		 test	 edx, edx
  00f4e	75 22		 jne	 SHORT $LN95@G_BuildTic
  00f50	b8 08 00 00 00	 mov	 eax, 8
  00f55	6b c8 18	 imul	 ecx, eax, 24
  00f58	ba 04 00 00 00	 mov	 edx, 4
  00f5d	c1 e2 00	 shl	 edx, 0
  00f60	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  00f67	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00f6e	85 c9		 test	 ecx, ecx
  00f70	74 26		 je	 SHORT $LN96@G_BuildTic
$LN95@G_BuildTic:

; 1245 : 		gamekeydown[gamecontrolbis[gc_camreset][1]])
; 1246 : 	{
; 1247 : 		if (cv_chasecam2.value)

  00f72	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  00f79	74 1d		 je	 SHORT $LN96@G_BuildTic

; 1248 : 			P_ResetCamera(&players[secondarydisplayplayer], &camera2);

  00f7b	68 00 00 00 00	 push	 OFFSET _camera2
  00f80	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00f8a	05 00 00 00 00	 add	 eax, OFFSET _players
  00f8f	50		 push	 eax
  00f90	e8 00 00 00 00	 call	 _P_ResetCamera
  00f95	83 c4 08	 add	 esp, 8
$LN96@G_BuildTic:

; 1249 : 	}
; 1250 : 
; 1251 : 	// jump button
; 1252 : 	if (gamekeydown[gamecontrolbis[gc_jump][0]] ||

  00f98	b8 08 00 00 00	 mov	 eax, 8
  00f9d	c1 e0 05	 shl	 eax, 5
  00fa0	b9 04 00 00 00	 mov	 ecx, 4
  00fa5	6b d1 00	 imul	 edx, ecx, 0
  00fa8	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[eax+edx]
  00faf	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00fb6	85 c9		 test	 ecx, ecx
  00fb8	75 22		 jne	 SHORT $LN98@G_BuildTic
  00fba	b8 08 00 00 00	 mov	 eax, 8
  00fbf	c1 e0 05	 shl	 eax, 5
  00fc2	b9 04 00 00 00	 mov	 ecx, 4
  00fc7	c1 e1 00	 shl	 ecx, 0
  00fca	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrolbis[eax+ecx]
  00fd1	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00fd8	85 c0		 test	 eax, eax
  00fda	74 14		 je	 SHORT $LN97@G_BuildTic
$LN98@G_BuildTic:

; 1253 : 		gamekeydown[gamecontrolbis[gc_jump][1]])
; 1254 : 		cmd->buttons |= BT_JUMP;

  00fdc	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00fdf	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00fe3	81 c9 00 40 00
	00		 or	 ecx, 16384		; 00004000H
  00fe9	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00fec	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN97@G_BuildTic:

; 1255 : 
; 1256 : 	// mouse look stuff (mouse look is not the same as mouse aim)
; 1257 : 	if (mouseaiming)

  00ff0	83 7d dc 00	 cmp	 DWORD PTR _mouseaiming$[ebp], 0
  00ff4	0f 84 9c 00 00
	00		 je	 $LN101@G_BuildTic

; 1258 : 	{
; 1259 : 		keyboard_look = false;

  00ffa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd2@@9@9, 0

; 1260 : 
; 1261 : 		// looking up/down
; 1262 : 		if (players[secondarydisplayplayer].mo
; 1263 : 			&& players[secondarydisplayplayer].mo->eflags & MFE_VERTICALFLIP
; 1264 : 			&& !cv_chasecam.value //because chasecam's not inverted
; 1265 : 			? !cv_invertmouse2.value : cv_invertmouse2.value)

  01004	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0100e	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  01015	74 45		 je	 SHORT $LN144@G_BuildTic
  01017	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _secondarydisplayplayer, 508
  01021	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  01027	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0102d	83 e0 20	 and	 eax, 32			; 00000020H
  01030	74 2a		 je	 SHORT $LN144@G_BuildTic
  01032	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01039	75 21		 jne	 SHORT $LN144@G_BuildTic
  0103b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_invertmouse2+20, 0
  01042	75 09		 jne	 SHORT $LN145@G_BuildTic
  01044	c7 45 90 01 00
	00 00		 mov	 DWORD PTR tv959[ebp], 1
  0104b	eb 07		 jmp	 SHORT $LN146@G_BuildTic
$LN145@G_BuildTic:
  0104d	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv959[ebp], 0
$LN146@G_BuildTic:
  01054	8b 4d 90	 mov	 ecx, DWORD PTR tv959[ebp]
  01057	89 4d 8c	 mov	 DWORD PTR tv992[ebp], ecx
  0105a	eb 09		 jmp	 SHORT $LN147@G_BuildTic
$LN144@G_BuildTic:
  0105c	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_invertmouse2+20
  01062	89 55 8c	 mov	 DWORD PTR tv992[ebp], edx
$LN147@G_BuildTic:
  01065	83 7d 8c 00	 cmp	 DWORD PTR tv992[ebp], 0
  01069	74 18		 je	 SHORT $LN100@G_BuildTic

; 1266 : 			localaiming2 -= mlook2y<<19;

  0106b	a1 00 00 00 00	 mov	 eax, DWORD PTR _mlook2y
  01070	c1 e0 13	 shl	 eax, 19			; 00000013H
  01073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _localaiming2
  01079	2b c8		 sub	 ecx, eax
  0107b	89 0d 00 00 00
	00		 mov	 DWORD PTR _localaiming2, ecx
  01081	eb 13		 jmp	 SHORT $LN101@G_BuildTic
$LN100@G_BuildTic:

; 1267 : 		else
; 1268 : 			localaiming2 += mlook2y<<19;

  01083	a1 00 00 00 00	 mov	 eax, DWORD PTR _mlook2y
  01088	c1 e0 13	 shl	 eax, 19			; 00000013H
  0108b	03 05 00 00 00
	00		 add	 eax, DWORD PTR _localaiming2
  01091	a3 00 00 00 00	 mov	 DWORD PTR _localaiming2, eax
$LN101@G_BuildTic:

; 1269 : 	}
; 1270 : 
; 1271 : 	axis = Joy2Axis(AXISLOOK);

  01096	6a 03		 push	 3
  01098	e8 00 00 00 00	 call	 _Joy2Axis
  0109d	83 c4 04	 add	 esp, 4
  010a0	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 1272 : 
; 1273 : 	if (analogjoystickmove && cv_lookaxis2.value != 0 && axis != 0)

  010a3	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  010a7	74 20		 je	 SHORT $LN102@G_BuildTic
  010a9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_lookaxis2+20, 0
  010b0	74 17		 je	 SHORT $LN102@G_BuildTic
  010b2	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  010b6	74 11		 je	 SHORT $LN102@G_BuildTic

; 1274 : 		localaiming2 += axis<<16;

  010b8	8b 45 ec	 mov	 eax, DWORD PTR _axis$[ebp]
  010bb	c1 e0 10	 shl	 eax, 16			; 00000010H
  010be	03 05 00 00 00
	00		 add	 eax, DWORD PTR _localaiming2
  010c4	a3 00 00 00 00	 mov	 DWORD PTR _localaiming2, eax
$LN102@G_BuildTic:

; 1275 : 
; 1276 : 	// spring back if not using keyboard neither mouselookin'
; 1277 : 	if (!keyboard_look && cv_lookaxis2.value == 0 && !mouseaiming)

  010c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd2@@9@9, 0
  010d0	75 19		 jne	 SHORT $LN103@G_BuildTic
  010d2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_lookaxis2+20, 0
  010d9	75 10		 jne	 SHORT $LN103@G_BuildTic
  010db	83 7d dc 00	 cmp	 DWORD PTR _mouseaiming$[ebp], 0
  010df	75 0a		 jne	 SHORT $LN103@G_BuildTic

; 1278 : 		localaiming2 = 0;

  010e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming2, 0
$LN103@G_BuildTic:

; 1279 : 
; 1280 : 	if (gamekeydown[gamecontrolbis[gc_lookup][0]] ||
; 1281 : 		gamekeydown[gamecontrolbis[gc_lookup][1]] ||

  010eb	b8 08 00 00 00	 mov	 eax, 8
  010f0	6b c8 19	 imul	 ecx, eax, 25
  010f3	ba 04 00 00 00	 mov	 edx, 4
  010f8	6b c2 00	 imul	 eax, edx, 0
  010fb	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  01102	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  01109	85 d2		 test	 edx, edx
  0110b	75 2e		 jne	 SHORT $LN106@G_BuildTic
  0110d	b8 08 00 00 00	 mov	 eax, 8
  01112	6b c8 19	 imul	 ecx, eax, 25
  01115	ba 04 00 00 00	 mov	 edx, 4
  0111a	c1 e2 00	 shl	 edx, 0
  0111d	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  01124	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0112b	85 c9		 test	 ecx, ecx
  0112d	75 0c		 jne	 SHORT $LN106@G_BuildTic
  0112f	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  01133	74 6c		 je	 SHORT $LN104@G_BuildTic
  01135	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  01139	7d 66		 jge	 SHORT $LN104@G_BuildTic
$LN106@G_BuildTic:

; 1282 : 		(gamepadjoystickmove && axis < 0))
; 1283 : 	{
; 1284 : 		if (players[secondarydisplayplayer].mo && players[secondarydisplayplayer].mo->eflags & MFE_VERTICALFLIP && !cv_chasecam.value)

  0113b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  01145	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0114c	74 35		 je	 SHORT $LN107@G_BuildTic
  0114e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  01158	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0115e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01164	83 e2 20	 and	 edx, 32			; 00000020H
  01167	74 1a		 je	 SHORT $LN107@G_BuildTic
  01169	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01170	75 11		 jne	 SHORT $LN107@G_BuildTic

; 1285 : 			localaiming2 -= KB_LOOKSPEED;

  01172	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming2
  01177	2d 00 00 00 02	 sub	 eax, 33554432		; 02000000H
  0117c	a3 00 00 00 00	 mov	 DWORD PTR _localaiming2, eax
  01181	eb 0f		 jmp	 SHORT $LN108@G_BuildTic
$LN107@G_BuildTic:

; 1286 : 		else
; 1287 : 			localaiming2 += KB_LOOKSPEED;

  01183	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming2
  01188	05 00 00 00 02	 add	 eax, 33554432		; 02000000H
  0118d	a3 00 00 00 00	 mov	 DWORD PTR _localaiming2, eax
$LN108@G_BuildTic:

; 1288 : 		keyboard_look = true;

  01192	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd2@@9@9, 1

; 1289 : 	}

  0119c	e9 01 01 00 00	 jmp	 $LN114@G_BuildTic
$LN104@G_BuildTic:

; 1290 : 	else if (gamekeydown[gamecontrolbis[gc_lookdown][0]] ||
; 1291 : 		gamekeydown[gamecontrolbis[gc_lookdown][1]] ||

  011a1	b8 08 00 00 00	 mov	 eax, 8
  011a6	6b c8 1a	 imul	 ecx, eax, 26
  011a9	ba 04 00 00 00	 mov	 edx, 4
  011ae	6b c2 00	 imul	 eax, edx, 0
  011b1	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  011b8	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  011bf	85 d2		 test	 edx, edx
  011c1	75 2e		 jne	 SHORT $LN111@G_BuildTic
  011c3	b8 08 00 00 00	 mov	 eax, 8
  011c8	6b c8 1a	 imul	 ecx, eax, 26
  011cb	ba 04 00 00 00	 mov	 edx, 4
  011d0	c1 e2 00	 shl	 edx, 0
  011d3	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  011da	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  011e1	85 c9		 test	 ecx, ecx
  011e3	75 0c		 jne	 SHORT $LN111@G_BuildTic
  011e5	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  011e9	74 69		 je	 SHORT $LN109@G_BuildTic
  011eb	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  011ef	7e 63		 jle	 SHORT $LN109@G_BuildTic
$LN111@G_BuildTic:

; 1292 : 		(gamepadjoystickmove && axis > 0))
; 1293 : 	{
; 1294 : 		if (players[secondarydisplayplayer].mo && players[secondarydisplayplayer].mo->eflags & MFE_VERTICALFLIP && !cv_chasecam.value)

  011f1	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  011fb	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  01202	74 35		 je	 SHORT $LN112@G_BuildTic
  01204	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0120e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  01214	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0121a	83 e2 20	 and	 edx, 32			; 00000020H
  0121d	74 1a		 je	 SHORT $LN112@G_BuildTic
  0121f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01226	75 11		 jne	 SHORT $LN112@G_BuildTic

; 1295 : 			localaiming2 += KB_LOOKSPEED;

  01228	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming2
  0122d	05 00 00 00 02	 add	 eax, 33554432		; 02000000H
  01232	a3 00 00 00 00	 mov	 DWORD PTR _localaiming2, eax
  01237	eb 0f		 jmp	 SHORT $LN113@G_BuildTic
$LN112@G_BuildTic:

; 1296 : 		else
; 1297 : 			localaiming2 -= KB_LOOKSPEED;

  01239	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming2
  0123e	2d 00 00 00 02	 sub	 eax, 33554432		; 02000000H
  01243	a3 00 00 00 00	 mov	 DWORD PTR _localaiming2, eax
$LN113@G_BuildTic:

; 1298 : 		keyboard_look = true;

  01248	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd2@@9@9, 1

; 1299 : 	}

  01252	eb 4e		 jmp	 SHORT $LN114@G_BuildTic
$LN109@G_BuildTic:

; 1300 : 	else if (gamekeydown[gamecontrolbis[gc_centerview][0]] ||

  01254	b8 08 00 00 00	 mov	 eax, 8
  01259	6b c8 1b	 imul	 ecx, eax, 27
  0125c	ba 04 00 00 00	 mov	 edx, 4
  01261	6b c2 00	 imul	 eax, edx, 0
  01264	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrolbis[ecx+eax]
  0126b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  01272	85 d2		 test	 edx, edx
  01274	75 22		 jne	 SHORT $LN115@G_BuildTic
  01276	b8 08 00 00 00	 mov	 eax, 8
  0127b	6b c8 1b	 imul	 ecx, eax, 27
  0127e	ba 04 00 00 00	 mov	 edx, 4
  01283	c1 e2 00	 shl	 edx, 0
  01286	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrolbis[ecx+edx]
  0128d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  01294	85 c9		 test	 ecx, ecx
  01296	74 0a		 je	 SHORT $LN114@G_BuildTic
$LN115@G_BuildTic:

; 1301 : 		gamekeydown[gamecontrolbis[gc_centerview][1]])
; 1302 : 		localaiming2 = 0;

  01298	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming2, 0
$LN114@G_BuildTic:

; 1303 : 
; 1304 : 	// accept no mlook for network games
; 1305 : 	if (!cv_allowmlook.value)

  012a2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowmlook+20, 0
  012a9	75 0a		 jne	 SHORT $LN116@G_BuildTic

; 1306 : 		localaiming2 = 0;

  012ab	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming2, 0
$LN116@G_BuildTic:

; 1307 : 
; 1308 : 	// look up max (viewheight/2) look down min -(viewheight/2)
; 1309 : 	cmd->aiming = G_ClipAimingPitch(&localaiming2);

  012b5	68 00 00 00 00	 push	 OFFSET _localaiming2
  012ba	e8 00 00 00 00	 call	 _G_ClipAimingPitch
  012bf	83 c4 04	 add	 esp, 4
  012c2	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  012c5	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 1310 : 
; 1311 : 	if (!mouseaiming && cv_mousemove2.value)

  012c9	83 7d dc 00	 cmp	 DWORD PTR _mouseaiming$[ebp], 0
  012cd	75 15		 jne	 SHORT $LN117@G_BuildTic
  012cf	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mousemove2+20, 0
  012d6	74 0c		 je	 SHORT $LN117@G_BuildTic

; 1312 : 		forward += mouse2y;

  012d8	8b 45 f4	 mov	 eax, DWORD PTR _forward$[ebp]
  012db	03 05 00 00 00
	00		 add	 eax, DWORD PTR _mouse2y
  012e1	89 45 f4	 mov	 DWORD PTR _forward$[ebp], eax
$LN117@G_BuildTic:

; 1313 : 
; 1314 : 	if (strafe || cv_analog2.value
; 1315 : 		|| players[secondarydisplayplayer].climbing
; 1316 : 		|| (players[secondarydisplayplayer].pflags & PF_SLIDING)) // Analog for mouse

  012e4	83 7d fc 00	 cmp	 DWORD PTR _strafe$[ebp], 0
  012e8	75 34		 jne	 SHORT $LN120@G_BuildTic
  012ea	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog2+20, 0
  012f1	75 2b		 jne	 SHORT $LN120@G_BuildTic
  012f3	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  012fd	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR _players[eax+292], 0
  01304	75 18		 jne	 SHORT $LN120@G_BuildTic
  01306	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  01310	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  01316	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  0131c	74 10		 je	 SHORT $LN118@G_BuildTic
$LN120@G_BuildTic:

; 1317 : 		side = side + mouse2x*2;

  0131e	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse2x
  01323	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  01326	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  01329	89 55 f0	 mov	 DWORD PTR _side$[ebp], edx
  0132c	eb 19		 jmp	 SHORT $LN119@G_BuildTic
$LN118@G_BuildTic:

; 1318 : 	else
; 1319 : 		cmd->angleturn = (INT16)(cmd->angleturn - (mouse2x*8));

  0132e	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  01331	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01335	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _mouse2x
  0133b	c1 e2 03	 shl	 edx, 3
  0133e	2b ca		 sub	 ecx, edx
  01340	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  01343	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN119@G_BuildTic:

; 1320 : 
; 1321 : 	mouse2x = mouse2y = mlook2y = 0;

  01347	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mlook2y, 0
  01351	a1 00 00 00 00	 mov	 eax, DWORD PTR _mlook2y
  01356	a3 00 00 00 00	 mov	 DWORD PTR _mouse2y, eax
  0135b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mouse2y
  01361	89 0d 00 00 00
	00		 mov	 DWORD PTR _mouse2x, ecx

; 1322 : 
; 1323 : 	if (forward > MAXPLMOVE)

  01367	83 7d f4 32	 cmp	 DWORD PTR _forward$[ebp], 50 ; 00000032H
  0136b	7e 09		 jle	 SHORT $LN121@G_BuildTic

; 1324 : 		forward = MAXPLMOVE;

  0136d	c7 45 f4 32 00
	00 00		 mov	 DWORD PTR _forward$[ebp], 50 ; 00000032H
  01374	eb 0d		 jmp	 SHORT $LN123@G_BuildTic
$LN121@G_BuildTic:

; 1325 : 	else if (forward < -MAXPLMOVE)

  01376	83 7d f4 ce	 cmp	 DWORD PTR _forward$[ebp], -50 ; ffffffceH
  0137a	7d 07		 jge	 SHORT $LN123@G_BuildTic

; 1326 : 		forward = -MAXPLMOVE;

  0137c	c7 45 f4 ce ff
	ff ff		 mov	 DWORD PTR _forward$[ebp], -50 ; ffffffceH
$LN123@G_BuildTic:

; 1327 : 	if (side > MAXPLMOVE)

  01383	83 7d f0 32	 cmp	 DWORD PTR _side$[ebp], 50 ; 00000032H
  01387	7e 09		 jle	 SHORT $LN124@G_BuildTic

; 1328 : 		side = MAXPLMOVE;

  01389	c7 45 f0 32 00
	00 00		 mov	 DWORD PTR _side$[ebp], 50 ; 00000032H
  01390	eb 0d		 jmp	 SHORT $LN126@G_BuildTic
$LN124@G_BuildTic:

; 1329 : 	else if (side < -MAXPLMOVE)

  01392	83 7d f0 ce	 cmp	 DWORD PTR _side$[ebp], -50 ; ffffffceH
  01396	7d 07		 jge	 SHORT $LN126@G_BuildTic

; 1330 : 		side = -MAXPLMOVE;

  01398	c7 45 f0 ce ff
	ff ff		 mov	 DWORD PTR _side$[ebp], -50 ; ffffffceH
$LN126@G_BuildTic:

; 1331 : 
; 1332 : 	cmd->forwardmove = (SINT8)(cmd->forwardmove + forward);

  0139f	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  013a2	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  013a5	03 4d f4	 add	 ecx, DWORD PTR _forward$[ebp]
  013a8	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  013ab	88 0a		 mov	 BYTE PTR [edx], cl

; 1333 : 	cmd->sidemove = (SINT8)(cmd->sidemove + side);

  013ad	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  013b0	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  013b4	03 4d f0	 add	 ecx, DWORD PTR _side$[ebp]
  013b7	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  013ba	88 4a 01	 mov	 BYTE PTR [edx+1], cl

; 1334 : 
; 1335 : 	localangle2 += (cmd->angleturn<<16);

  013bd	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  013c0	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  013c4	c1 e1 10	 shl	 ecx, 16			; 00000010H
  013c7	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _localangle2
  013cd	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle2, ecx

; 1336 : 	cmd->angleturn = (INT16)(localangle2 >> 16);

  013d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _localangle2
  013d8	c1 e8 10	 shr	 eax, 16			; 00000010H
  013db	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  013de	66 89 41 02	 mov	 WORD PTR [ecx+2], ax
$LN1@G_BuildTic:

; 1337 : }

  013e2	5f		 pop	 edi
  013e3	5e		 pop	 esi
  013e4	5b		 pop	 ebx
  013e5	8b e5		 mov	 esp, ebp
  013e7	5d		 pop	 ebp
  013e8	c3		 ret	 0
_G_BuildTiccmd2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_BuildTiccmd
_TEXT	SEGMENT
tv959 = -120						; size = 4
tv86 = -116						; size = 4
tv135 = -116						; size = 4
tv152 = -116						; size = 4
tv169 = -116						; size = 4
tv173 = -116						; size = 4
tv176 = -116						; size = 4
tv183 = -116						; size = 4
tv186 = -116						; size = 4
tv958 = -116						; size = 4
_temp$1 = -48						; size = 4
_gamepadjoystickmove$ = -44				; size = 4
_analogjoystickmove$ = -40				; size = 4
_mouseaiming$ = -36					; size = 4
_turnright$ = -32					; size = 4
_turnleft$ = -28					; size = 4
_speed$ = -24						; size = 4
_axis$ = -20						; size = 4
_side$ = -16						; size = 4
_forward$ = -12						; size = 4
_tspeed$ = -8						; size = 4
_strafe$ = -4						; size = 4
_cmd$ = 8						; size = 4
_realtics$ = 12						; size = 4
_G_BuildTiccmd PROC					; COMDAT

; 680  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 681  : 	boolean strafe;
; 682  : 	INT32 tspeed, forward, side, axis;
; 683  : 	const INT32 speed = 1;

  00009	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _speed$[ebp], 1

; 684  : 	// these ones used for multiple conditions
; 685  : 	boolean turnleft, turnright, mouseaiming, analogjoystickmove, gamepadjoystickmove;
; 686  : 
; 687  : 	static INT32 turnheld; // for accelerative turning
; 688  : 	static boolean keyboard_look; // true if lookup/down using keyboard
; 689  : 
; 690  : 	G_CopyTiccmd(cmd, I_BaseTiccmd(), 1); // empty, or external driver

  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 _I_BaseTiccmd
  00017	50		 push	 eax
  00018	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _G_CopyTiccmd
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 691  : 
; 692  : 	//why build a ticcmd if we're paused?
; 693  : 	if (paused)

  00024	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  0002b	85 c0		 test	 eax, eax
  0002d	74 05		 je	 SHORT $LN2@G_BuildTic

; 694  : 		return;

  0002f	e9 3c 14 00 00	 jmp	 $LN129@G_BuildTic
$LN2@G_BuildTic:

; 695  : 
; 696  : 	// a little clumsy, but then the g_input.c became a lot simpler!
; 697  : 	strafe = gamekeydown[gamecontrol[gc_strafe][0]] ||

  00034	b8 08 00 00 00	 mov	 eax, 8
  00039	6b c8 03	 imul	 ecx, eax, 3
  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	6b c2 00	 imul	 eax, edx, 0
  00044	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  0004b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00052	85 d2		 test	 edx, edx
  00054	75 2b		 jne	 SHORT $LN132@G_BuildTic
  00056	b8 08 00 00 00	 mov	 eax, 8
  0005b	6b c8 03	 imul	 ecx, eax, 3
  0005e	ba 04 00 00 00	 mov	 edx, 4
  00063	c1 e2 00	 shl	 edx, 0
  00066	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  0006d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00074	85 c9		 test	 ecx, ecx
  00076	75 09		 jne	 SHORT $LN132@G_BuildTic
  00078	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
  0007f	eb 07		 jmp	 SHORT $LN133@G_BuildTic
$LN132@G_BuildTic:
  00081	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
$LN133@G_BuildTic:
  00088	8b 55 8c	 mov	 edx, DWORD PTR tv86[ebp]
  0008b	89 55 fc	 mov	 DWORD PTR _strafe$[ebp], edx

; 698  : 		gamekeydown[gamecontrol[gc_strafe][1]];
; 699  : 
; 700  : 	turnright = gamekeydown[gamecontrol[gc_turnright][0]]

  0008e	b8 08 00 00 00	 mov	 eax, 8
  00093	6b c8 07	 imul	 ecx, eax, 7
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	6b c2 00	 imul	 eax, edx, 0
  0009e	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  000a5	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  000ac	85 d2		 test	 edx, edx
  000ae	75 2b		 jne	 SHORT $LN134@G_BuildTic
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	6b c8 07	 imul	 ecx, eax, 7
  000b8	ba 04 00 00 00	 mov	 edx, 4
  000bd	c1 e2 00	 shl	 edx, 0
  000c0	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  000c7	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  000ce	85 c9		 test	 ecx, ecx
  000d0	75 09		 jne	 SHORT $LN134@G_BuildTic
  000d2	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
  000d9	eb 07		 jmp	 SHORT $LN135@G_BuildTic
$LN134@G_BuildTic:
  000db	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
$LN135@G_BuildTic:
  000e2	8b 55 8c	 mov	 edx, DWORD PTR tv135[ebp]
  000e5	89 55 e0	 mov	 DWORD PTR _turnright$[ebp], edx

; 701  : 		|| gamekeydown[gamecontrol[gc_turnright][1]];
; 702  : 	turnleft = gamekeydown[gamecontrol[gc_turnleft][0]]

  000e8	b8 08 00 00 00	 mov	 eax, 8
  000ed	6b c8 06	 imul	 ecx, eax, 6
  000f0	ba 04 00 00 00	 mov	 edx, 4
  000f5	6b c2 00	 imul	 eax, edx, 0
  000f8	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  000ff	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00106	85 d2		 test	 edx, edx
  00108	75 2b		 jne	 SHORT $LN136@G_BuildTic
  0010a	b8 08 00 00 00	 mov	 eax, 8
  0010f	6b c8 06	 imul	 ecx, eax, 6
  00112	ba 04 00 00 00	 mov	 edx, 4
  00117	c1 e2 00	 shl	 edx, 0
  0011a	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00121	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00128	85 c9		 test	 ecx, ecx
  0012a	75 09		 jne	 SHORT $LN136@G_BuildTic
  0012c	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
  00133	eb 07		 jmp	 SHORT $LN137@G_BuildTic
$LN136@G_BuildTic:
  00135	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv152[ebp], 1
$LN137@G_BuildTic:
  0013c	8b 55 8c	 mov	 edx, DWORD PTR tv152[ebp]
  0013f	89 55 e4	 mov	 DWORD PTR _turnleft$[ebp], edx

; 703  : 		|| gamekeydown[gamecontrol[gc_turnleft][1]];
; 704  : 	mouseaiming = (gamekeydown[gamecontrol[gc_mouseaiming][0]]

  00142	b8 08 00 00 00	 mov	 eax, 8
  00147	6b c8 1c	 imul	 ecx, eax, 28
  0014a	ba 04 00 00 00	 mov	 edx, 4
  0014f	6b c2 00	 imul	 eax, edx, 0
  00152	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00159	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00160	85 d2		 test	 edx, edx
  00162	75 2b		 jne	 SHORT $LN138@G_BuildTic
  00164	b8 08 00 00 00	 mov	 eax, 8
  00169	6b c8 1c	 imul	 ecx, eax, 28
  0016c	ba 04 00 00 00	 mov	 edx, 4
  00171	c1 e2 00	 shl	 edx, 0
  00174	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  0017b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00182	85 c9		 test	 ecx, ecx
  00184	75 09		 jne	 SHORT $LN138@G_BuildTic
  00186	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], 0
  0018d	eb 07		 jmp	 SHORT $LN139@G_BuildTic
$LN138@G_BuildTic:
  0018f	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv169[ebp], 1
$LN139@G_BuildTic:
  00196	8b 55 8c	 mov	 edx, DWORD PTR tv169[ebp]
  00199	33 15 14 00 00
	00		 xor	 edx, DWORD PTR _cv_alwaysfreelook+20
  0019f	89 55 dc	 mov	 DWORD PTR _mouseaiming$[ebp], edx

; 705  : 		|| gamekeydown[gamecontrol[gc_mouseaiming][1]]) ^ cv_alwaysfreelook.value;
; 706  : 	analogjoystickmove = cv_usejoystick.value && !Joystick.bGamepadStyle;

  001a2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick+20, 0
  001a9	74 12		 je	 SHORT $LN140@G_BuildTic
  001ab	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _Joystick+4, 0
  001b2	75 09		 jne	 SHORT $LN140@G_BuildTic
  001b4	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv173[ebp], 1
  001bb	eb 07		 jmp	 SHORT $LN141@G_BuildTic
$LN140@G_BuildTic:
  001bd	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN141@G_BuildTic:
  001c4	8b 45 8c	 mov	 eax, DWORD PTR tv173[ebp]
  001c7	89 45 d8	 mov	 DWORD PTR _analogjoystickmove$[ebp], eax

; 707  : 	gamepadjoystickmove = cv_usejoystick.value && Joystick.bGamepadStyle;

  001ca	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick+20, 0
  001d1	74 12		 je	 SHORT $LN142@G_BuildTic
  001d3	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _Joystick+4, 0
  001da	74 09		 je	 SHORT $LN142@G_BuildTic
  001dc	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv176[ebp], 1
  001e3	eb 07		 jmp	 SHORT $LN143@G_BuildTic
$LN142@G_BuildTic:
  001e5	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv176[ebp], 0
$LN143@G_BuildTic:
  001ec	8b 45 8c	 mov	 eax, DWORD PTR tv176[ebp]
  001ef	89 45 d4	 mov	 DWORD PTR _gamepadjoystickmove$[ebp], eax

; 708  : 
; 709  : 	axis = JoyAxis(AXISTURN);

  001f2	6a 01		 push	 1
  001f4	e8 00 00 00 00	 call	 _JoyAxis
  001f9	83 c4 04	 add	 esp, 4
  001fc	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 710  : 	if (gamepadjoystickmove && axis != 0)

  001ff	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  00203	74 4a		 je	 SHORT $LN3@G_BuildTic
  00205	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00209	74 44		 je	 SHORT $LN3@G_BuildTic

; 711  : 	{
; 712  : 		turnright = turnright || (axis > 0);

  0020b	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  0020f	75 0f		 jne	 SHORT $LN144@G_BuildTic
  00211	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00215	7f 09		 jg	 SHORT $LN144@G_BuildTic
  00217	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv183[ebp], 0
  0021e	eb 07		 jmp	 SHORT $LN145@G_BuildTic
$LN144@G_BuildTic:
  00220	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv183[ebp], 1
$LN145@G_BuildTic:
  00227	8b 45 8c	 mov	 eax, DWORD PTR tv183[ebp]
  0022a	89 45 e0	 mov	 DWORD PTR _turnright$[ebp], eax

; 713  : 		turnleft = turnleft || (axis < 0);

  0022d	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  00231	75 0f		 jne	 SHORT $LN146@G_BuildTic
  00233	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00237	7c 09		 jl	 SHORT $LN146@G_BuildTic
  00239	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv186[ebp], 0
  00240	eb 07		 jmp	 SHORT $LN147@G_BuildTic
$LN146@G_BuildTic:
  00242	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv186[ebp], 1
$LN147@G_BuildTic:
  00249	8b 45 8c	 mov	 eax, DWORD PTR tv186[ebp]
  0024c	89 45 e4	 mov	 DWORD PTR _turnleft$[ebp], eax
$LN3@G_BuildTic:

; 714  : 	}
; 715  : 	forward = side = 0;

  0024f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _side$[ebp], 0
  00256	8b 45 f0	 mov	 eax, DWORD PTR _side$[ebp]
  00259	89 45 f4	 mov	 DWORD PTR _forward$[ebp], eax

; 716  : 
; 717  : 	// use two stage accelerative turning
; 718  : 	// on the keyboard and joystick
; 719  : 	if (turnleft || turnright)

  0025c	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  00260	75 06		 jne	 SHORT $LN6@G_BuildTic
  00262	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  00266	74 0f		 je	 SHORT $LN4@G_BuildTic
$LN6@G_BuildTic:

; 720  : 		turnheld += realtics;

  00268	a1 00 00 00 00	 mov	 eax, DWORD PTR ?turnheld@?1??G_BuildTiccmd@@9@9
  0026d	03 45 0c	 add	 eax, DWORD PTR _realtics$[ebp]
  00270	a3 00 00 00 00	 mov	 DWORD PTR ?turnheld@?1??G_BuildTiccmd@@9@9, eax
  00275	eb 0a		 jmp	 SHORT $LN5@G_BuildTic
$LN4@G_BuildTic:

; 721  : 	else
; 722  : 		turnheld = 0;

  00277	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?turnheld@?1??G_BuildTiccmd@@9@9, 0
$LN5@G_BuildTic:

; 723  : 
; 724  : 	if (turnheld < SLOWTURNTICS)

  00281	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?turnheld@?1??G_BuildTiccmd@@9@9, 6
  00288	7d 09		 jge	 SHORT $LN7@G_BuildTic

; 725  : 		tspeed = 2; // slow turn

  0028a	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _tspeed$[ebp], 2
  00291	eb 06		 jmp	 SHORT $LN8@G_BuildTic
$LN7@G_BuildTic:

; 726  : 	else
; 727  : 		tspeed = speed;

  00293	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00296	89 45 f8	 mov	 DWORD PTR _tspeed$[ebp], eax
$LN8@G_BuildTic:

; 728  : 
; 729  : 	// let movement keys cancel each other out
; 730  : 	if (cv_analog.value) // Analog

  00299	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  002a0	74 3c		 je	 SHORT $LN11@G_BuildTic

; 731  : 	{
; 732  : 		if (turnright)

  002a2	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  002a6	74 18		 je	 SHORT $LN10@G_BuildTic

; 733  : 			cmd->angleturn = (INT16)(cmd->angleturn - angleturn[tspeed]);

  002a8	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002ab	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  002af	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  002b2	2b 0c 95 00 00
	00 00		 sub	 ecx, DWORD PTR _angleturn[edx*4]
  002b9	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002bc	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN10@G_BuildTic:

; 734  : 		if (turnleft)

  002c0	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  002c4	74 18		 je	 SHORT $LN11@G_BuildTic

; 735  : 			cmd->angleturn = (INT16)(cmd->angleturn + angleturn[tspeed]);

  002c6	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002c9	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  002cd	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  002d0	03 0c 95 00 00
	00 00		 add	 ecx, DWORD PTR _angleturn[edx*4]
  002d7	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  002da	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN11@G_BuildTic:

; 736  : 	}
; 737  : 	if (strafe || cv_analog.value || twodlevel
; 738  : 		|| (players[consoleplayer].mo && (players[consoleplayer].mo->flags2 & MF2_TWOD))
; 739  : 		|| players[consoleplayer].climbing
; 740  : 		|| (players[consoleplayer].pflags & PF_NIGHTSMODE)
; 741  : 		|| (players[consoleplayer].pflags & PF_SLIDING)) // Analog

  002de	83 7d fc 00	 cmp	 DWORD PTR _strafe$[ebp], 0
  002e2	0f 85 8f 00 00
	00		 jne	 $LN14@G_BuildTic
  002e8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  002ef	0f 85 82 00 00
	00		 jne	 $LN14@G_BuildTic
  002f5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  002fc	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00301	75 74		 jne	 SHORT $LN14@G_BuildTic
  00303	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0030d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00314	74 1e		 je	 SHORT $LN15@G_BuildTic
  00316	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00320	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00326	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0032c	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00332	75 43		 jne	 SHORT $LN14@G_BuildTic
$LN15@G_BuildTic:
  00334	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0033e	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR _players[eax+292], 0
  00345	75 30		 jne	 SHORT $LN14@G_BuildTic
  00347	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00351	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00357	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  0035d	75 18		 jne	 SHORT $LN14@G_BuildTic
  0035f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00369	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0036f	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  00375	74 55		 je	 SHORT $LN12@G_BuildTic
$LN14@G_BuildTic:

; 742  : 	{
; 743  : 		if (turnright)

  00377	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  0037b	74 10		 je	 SHORT $LN16@G_BuildTic

; 744  : 			side += sidemove[speed];

  0037d	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00380	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00383	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _sidemove[eax*4]
  0038a	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN16@G_BuildTic:

; 745  : 		if (turnleft)

  0038d	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  00391	74 10		 je	 SHORT $LN17@G_BuildTic

; 746  : 			side -= sidemove[speed];

  00393	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00396	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00399	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _sidemove[eax*4]
  003a0	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN17@G_BuildTic:

; 747  : 
; 748  : 		if (analogjoystickmove && axis != 0)

  003a3	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  003a7	74 21		 je	 SHORT $LN18@G_BuildTic
  003a9	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  003ad	74 1b		 je	 SHORT $LN18@G_BuildTic

; 749  : 		{
; 750  : 			// JOYAXISRANGE is supposed to be 1023 (divide by 1024)
; 751  : 			side += ((axis * sidemove[1]) >> 10);

  003af	b8 04 00 00 00	 mov	 eax, 4
  003b4	c1 e0 00	 shl	 eax, 0
  003b7	8b 4d ec	 mov	 ecx, DWORD PTR _axis$[ebp]
  003ba	0f af 88 00 00
	00 00		 imul	 ecx, DWORD PTR _sidemove[eax]
  003c1	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  003c4	03 4d f0	 add	 ecx, DWORD PTR _side$[ebp]
  003c7	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN18@G_BuildTic:

; 752  : 		}
; 753  : 	}

  003ca	eb 6f		 jmp	 SHORT $LN22@G_BuildTic
$LN12@G_BuildTic:

; 754  : 	else
; 755  : 	{
; 756  : 		if (turnright)

  003cc	83 7d e0 00	 cmp	 DWORD PTR _turnright$[ebp], 0
  003d0	74 1a		 je	 SHORT $LN19@G_BuildTic

; 757  : 			cmd->angleturn = (INT16)(cmd->angleturn - angleturn[tspeed]);

  003d2	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  003d5	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  003d9	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  003dc	2b 0c 95 00 00
	00 00		 sub	 ecx, DWORD PTR _angleturn[edx*4]
  003e3	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  003e6	66 89 48 02	 mov	 WORD PTR [eax+2], cx
  003ea	eb 1e		 jmp	 SHORT $LN21@G_BuildTic
$LN19@G_BuildTic:

; 758  : 		else if (turnleft)

  003ec	83 7d e4 00	 cmp	 DWORD PTR _turnleft$[ebp], 0
  003f0	74 18		 je	 SHORT $LN21@G_BuildTic

; 759  : 			cmd->angleturn = (INT16)(cmd->angleturn + angleturn[tspeed]);

  003f2	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  003f5	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  003f9	8b 55 f8	 mov	 edx, DWORD PTR _tspeed$[ebp]
  003fc	03 0c 95 00 00
	00 00		 add	 ecx, DWORD PTR _angleturn[edx*4]
  00403	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00406	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN21@G_BuildTic:

; 760  : 
; 761  : 		if (analogjoystickmove && axis != 0)

  0040a	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  0040e	74 2b		 je	 SHORT $LN22@G_BuildTic
  00410	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00414	74 25		 je	 SHORT $LN22@G_BuildTic

; 762  : 		{
; 763  : 			// JOYAXISRANGE should be 1023 (divide by 1024)
; 764  : 			cmd->angleturn = (INT16)(cmd->angleturn - ((axis * angleturn[1]) >> 10)); // ANALOG!

  00416	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00419	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0041d	ba 04 00 00 00	 mov	 edx, 4
  00422	c1 e2 00	 shl	 edx, 0
  00425	8b 45 ec	 mov	 eax, DWORD PTR _axis$[ebp]
  00428	0f af 82 00 00
	00 00		 imul	 eax, DWORD PTR _angleturn[edx]
  0042f	c1 f8 0a	 sar	 eax, 10			; 0000000aH
  00432	2b c8		 sub	 ecx, eax
  00434	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00437	66 89 4a 02	 mov	 WORD PTR [edx+2], cx
$LN22@G_BuildTic:

; 765  : 		}
; 766  : 	}
; 767  : 
; 768  : 	axis = JoyAxis(AXISSTRAFE);

  0043b	6a 04		 push	 4
  0043d	e8 00 00 00 00	 call	 _JoyAxis
  00442	83 c4 04	 add	 esp, 4
  00445	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 769  : 	if (gamepadjoystickmove && axis != 0)

  00448	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  0044c	74 36		 je	 SHORT $LN23@G_BuildTic
  0044e	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00452	74 30		 je	 SHORT $LN23@G_BuildTic

; 770  : 	{
; 771  : 		if (axis < 0)

  00454	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00458	7d 12		 jge	 SHORT $LN25@G_BuildTic

; 772  : 			side += sidemove[speed];

  0045a	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  0045d	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00460	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _sidemove[eax*4]
  00467	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
  0046a	eb 16		 jmp	 SHORT $LN27@G_BuildTic
$LN25@G_BuildTic:

; 773  : 		else if (axis > 0)

  0046c	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00470	7e 10		 jle	 SHORT $LN27@G_BuildTic

; 774  : 			side -= sidemove[speed];

  00472	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  00475	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  00478	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _sidemove[eax*4]
  0047f	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN27@G_BuildTic:

; 775  : 	}

  00482	eb 27		 jmp	 SHORT $LN28@G_BuildTic
$LN23@G_BuildTic:

; 776  : 	else if (analogjoystickmove && axis != 0)

  00484	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  00488	74 21		 je	 SHORT $LN28@G_BuildTic
  0048a	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  0048e	74 1b		 je	 SHORT $LN28@G_BuildTic

; 777  : 	{
; 778  : 		// JOYAXISRANGE is supposed to be 1023 (divide by 1024)
; 779  : 			side += ((axis * sidemove[1]) >> 10);

  00490	b8 04 00 00 00	 mov	 eax, 4
  00495	c1 e0 00	 shl	 eax, 0
  00498	8b 4d ec	 mov	 ecx, DWORD PTR _axis$[ebp]
  0049b	0f af 88 00 00
	00 00		 imul	 ecx, DWORD PTR _sidemove[eax]
  004a2	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  004a5	03 4d f0	 add	 ecx, DWORD PTR _side$[ebp]
  004a8	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN28@G_BuildTic:

; 780  : 	}
; 781  : 
; 782  : 	// forward with key or button
; 783  : 	axis = JoyAxis(AXISMOVE);

  004ab	6a 02		 push	 2
  004ad	e8 00 00 00 00	 call	 _JoyAxis
  004b2	83 c4 04	 add	 esp, 4
  004b5	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 784  : 	if (gamekeydown[gamecontrol[gc_forward][0]] ||
; 785  : 		gamekeydown[gamecontrol[gc_forward][1]] ||

  004b8	b8 08 00 00 00	 mov	 eax, 8
  004bd	c1 e0 00	 shl	 eax, 0
  004c0	b9 04 00 00 00	 mov	 ecx, 4
  004c5	6b d1 00	 imul	 edx, ecx, 0
  004c8	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  004cf	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  004d6	85 c9		 test	 ecx, ecx
  004d8	75 36		 jne	 SHORT $LN30@G_BuildTic
  004da	b8 08 00 00 00	 mov	 eax, 8
  004df	c1 e0 00	 shl	 eax, 0
  004e2	b9 04 00 00 00	 mov	 ecx, 4
  004e7	c1 e1 00	 shl	 ecx, 0
  004ea	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  004f1	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  004f8	85 c0		 test	 eax, eax
  004fa	75 14		 jne	 SHORT $LN30@G_BuildTic
  004fc	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  00500	0f 84 bf 00 00
	00		 je	 $LN32@G_BuildTic
  00506	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  0050a	0f 8d b5 00 00
	00		 jge	 $LN32@G_BuildTic
$LN30@G_BuildTic:

; 786  : 		(gamepadjoystickmove && axis < 0))
; 787  : 	{
; 788  : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 789  : 		if ((gamekeydown[gamecontrol[gc_straferight][0]] || gamekeydown[gamecontrol[gc_straferight][1]]) ||

  00510	b8 08 00 00 00	 mov	 eax, 8
  00515	c1 e0 02	 shl	 eax, 2
  00518	b9 04 00 00 00	 mov	 ecx, 4
  0051d	6b d1 00	 imul	 edx, ecx, 0
  00520	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  00527	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0052e	85 c9		 test	 ecx, ecx
  00530	75 66		 jne	 SHORT $LN34@G_BuildTic
  00532	b8 08 00 00 00	 mov	 eax, 8
  00537	c1 e0 02	 shl	 eax, 2
  0053a	b9 04 00 00 00	 mov	 ecx, 4
  0053f	c1 e1 00	 shl	 ecx, 0
  00542	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  00549	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00550	85 c0		 test	 eax, eax
  00552	75 44		 jne	 SHORT $LN34@G_BuildTic
  00554	b8 08 00 00 00	 mov	 eax, 8
  00559	6b c8 05	 imul	 ecx, eax, 5
  0055c	ba 04 00 00 00	 mov	 edx, 4
  00561	6b c2 00	 imul	 eax, edx, 0
  00564	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  0056b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00572	85 d2		 test	 edx, edx
  00574	75 22		 jne	 SHORT $LN34@G_BuildTic
  00576	b8 08 00 00 00	 mov	 eax, 8
  0057b	6b c8 05	 imul	 ecx, eax, 5
  0057e	ba 04 00 00 00	 mov	 edx, 4
  00583	c1 e2 00	 shl	 edx, 0
  00586	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  0058d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00594	85 c9		 test	 ecx, ecx
  00596	74 20		 je	 SHORT $LN31@G_BuildTic
$LN34@G_BuildTic:

; 790  : 			(gamekeydown[gamecontrol[gc_strafeleft][0]] || gamekeydown[gamecontrol[gc_strafeleft][1]]))
; 791  : 			forward += FixedMul(forwardmove[speed], FRACUNIT * 3 / 4);

  00598	68 00 c0 00 00	 push	 49152			; 0000c000H
  0059d	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  005a0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _forwardmove[eax*4]
  005a7	51		 push	 ecx
  005a8	e8 00 00 00 00	 call	 _FixedMul
  005ad	83 c4 08	 add	 esp, 8
  005b0	03 45 f4	 add	 eax, DWORD PTR _forward$[ebp]
  005b3	89 45 f4	 mov	 DWORD PTR _forward$[ebp], eax
  005b6	eb 0d		 jmp	 SHORT $LN32@G_BuildTic
$LN31@G_BuildTic:

; 792  : 		else
; 793  : 			forward = forwardmove[speed];

  005b8	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  005bb	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _forwardmove[eax*4]
  005c2	89 4d f4	 mov	 DWORD PTR _forward$[ebp], ecx
$LN32@G_BuildTic:

; 794  : 	}
; 795  : 	if (gamekeydown[gamecontrol[gc_backward][0]] ||
; 796  : 		gamekeydown[gamecontrol[gc_backward][1]] ||

  005c5	b8 08 00 00 00	 mov	 eax, 8
  005ca	d1 e0		 shl	 eax, 1
  005cc	b9 04 00 00 00	 mov	 ecx, 4
  005d1	6b d1 00	 imul	 edx, ecx, 0
  005d4	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  005db	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  005e2	85 c9		 test	 ecx, ecx
  005e4	75 35		 jne	 SHORT $LN36@G_BuildTic
  005e6	b8 08 00 00 00	 mov	 eax, 8
  005eb	d1 e0		 shl	 eax, 1
  005ed	b9 04 00 00 00	 mov	 ecx, 4
  005f2	c1 e1 00	 shl	 ecx, 0
  005f5	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  005fc	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00603	85 c0		 test	 eax, eax
  00605	75 14		 jne	 SHORT $LN36@G_BuildTic
  00607	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  0060b	0f 84 c4 00 00
	00		 je	 $LN38@G_BuildTic
  00611	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00615	0f 8e ba 00 00
	00		 jle	 $LN38@G_BuildTic
$LN36@G_BuildTic:

; 797  : 		(gamepadjoystickmove && axis > 0))
; 798  : 	{
; 799  : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 800  : 		if ((gamekeydown[gamecontrol[gc_straferight][0]] || gamekeydown[gamecontrol[gc_straferight][1]]) ||

  0061b	b8 08 00 00 00	 mov	 eax, 8
  00620	c1 e0 02	 shl	 eax, 2
  00623	b9 04 00 00 00	 mov	 ecx, 4
  00628	6b d1 00	 imul	 edx, ecx, 0
  0062b	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  00632	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00639	85 c9		 test	 ecx, ecx
  0063b	75 66		 jne	 SHORT $LN40@G_BuildTic
  0063d	b8 08 00 00 00	 mov	 eax, 8
  00642	c1 e0 02	 shl	 eax, 2
  00645	b9 04 00 00 00	 mov	 ecx, 4
  0064a	c1 e1 00	 shl	 ecx, 0
  0064d	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  00654	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  0065b	85 c0		 test	 eax, eax
  0065d	75 44		 jne	 SHORT $LN40@G_BuildTic
  0065f	b8 08 00 00 00	 mov	 eax, 8
  00664	6b c8 05	 imul	 ecx, eax, 5
  00667	ba 04 00 00 00	 mov	 edx, 4
  0066c	6b c2 00	 imul	 eax, edx, 0
  0066f	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00676	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  0067d	85 d2		 test	 edx, edx
  0067f	75 22		 jne	 SHORT $LN40@G_BuildTic
  00681	b8 08 00 00 00	 mov	 eax, 8
  00686	6b c8 05	 imul	 ecx, eax, 5
  00689	ba 04 00 00 00	 mov	 edx, 4
  0068e	c1 e2 00	 shl	 edx, 0
  00691	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00698	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0069f	85 c9		 test	 ecx, ecx
  006a1	74 22		 je	 SHORT $LN37@G_BuildTic
$LN40@G_BuildTic:

; 801  : 			(gamekeydown[gamecontrol[gc_strafeleft][0]] || gamekeydown[gamecontrol[gc_strafeleft][1]]))
; 802  : 			forward -= FixedMul(forwardmove[speed], FRACUNIT * 3 / 4);

  006a3	68 00 c0 00 00	 push	 49152			; 0000c000H
  006a8	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  006ab	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _forwardmove[eax*4]
  006b2	51		 push	 ecx
  006b3	e8 00 00 00 00	 call	 _FixedMul
  006b8	83 c4 08	 add	 esp, 8
  006bb	8b 55 f4	 mov	 edx, DWORD PTR _forward$[ebp]
  006be	2b d0		 sub	 edx, eax
  006c0	89 55 f4	 mov	 DWORD PTR _forward$[ebp], edx
  006c3	eb 10		 jmp	 SHORT $LN38@G_BuildTic
$LN37@G_BuildTic:

; 803  : 		else
; 804  : 			forward -= forwardmove[speed];

  006c5	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  006c8	8b 4d f4	 mov	 ecx, DWORD PTR _forward$[ebp]
  006cb	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _forwardmove[eax*4]
  006d2	89 4d f4	 mov	 DWORD PTR _forward$[ebp], ecx
$LN38@G_BuildTic:

; 805  : 	}
; 806  : 
; 807  : 	if (analogjoystickmove && axis != 0)

  006d5	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  006d9	74 23		 je	 SHORT $LN41@G_BuildTic
  006db	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  006df	74 1d		 je	 SHORT $LN41@G_BuildTic

; 808  : 		forward -= ((axis * forwardmove[1]) >> 10); // ANALOG!

  006e1	b8 04 00 00 00	 mov	 eax, 4
  006e6	c1 e0 00	 shl	 eax, 0
  006e9	8b 4d ec	 mov	 ecx, DWORD PTR _axis$[ebp]
  006ec	0f af 88 00 00
	00 00		 imul	 ecx, DWORD PTR _forwardmove[eax]
  006f3	c1 f9 0a	 sar	 ecx, 10			; 0000000aH
  006f6	8b 55 f4	 mov	 edx, DWORD PTR _forward$[ebp]
  006f9	2b d1		 sub	 edx, ecx
  006fb	89 55 f4	 mov	 DWORD PTR _forward$[ebp], edx
$LN41@G_BuildTic:

; 809  : 
; 810  : 	// some people strafe left & right with mouse buttons
; 811  : 	if (gamekeydown[gamecontrol[gc_straferight][0]] ||

  006fe	b8 08 00 00 00	 mov	 eax, 8
  00703	c1 e0 02	 shl	 eax, 2
  00706	b9 04 00 00 00	 mov	 ecx, 4
  0070b	6b d1 00	 imul	 edx, ecx, 0
  0070e	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  00715	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0071c	85 c9		 test	 ecx, ecx
  0071e	75 26		 jne	 SHORT $LN43@G_BuildTic
  00720	b8 08 00 00 00	 mov	 eax, 8
  00725	c1 e0 02	 shl	 eax, 2
  00728	b9 04 00 00 00	 mov	 ecx, 4
  0072d	c1 e1 00	 shl	 ecx, 0
  00730	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  00737	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  0073e	85 c0		 test	 eax, eax
  00740	0f 84 b6 00 00
	00		 je	 $LN45@G_BuildTic
$LN43@G_BuildTic:

; 812  : 		gamekeydown[gamecontrol[gc_straferight][1]])
; 813  : 	{
; 814  : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 815  : 		if ((gamekeydown[gamecontrol[gc_forward][0]] || gamekeydown[gamecontrol[gc_forward][1]]) ||

  00746	b8 08 00 00 00	 mov	 eax, 8
  0074b	c1 e0 00	 shl	 eax, 0
  0074e	b9 04 00 00 00	 mov	 ecx, 4
  00753	6b d1 00	 imul	 edx, ecx, 0
  00756	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  0075d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00764	85 c9		 test	 ecx, ecx
  00766	75 64		 jne	 SHORT $LN47@G_BuildTic
  00768	b8 08 00 00 00	 mov	 eax, 8
  0076d	c1 e0 00	 shl	 eax, 0
  00770	b9 04 00 00 00	 mov	 ecx, 4
  00775	c1 e1 00	 shl	 ecx, 0
  00778	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  0077f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00786	85 c0		 test	 eax, eax
  00788	75 42		 jne	 SHORT $LN47@G_BuildTic
  0078a	b8 08 00 00 00	 mov	 eax, 8
  0078f	d1 e0		 shl	 eax, 1
  00791	b9 04 00 00 00	 mov	 ecx, 4
  00796	6b d1 00	 imul	 edx, ecx, 0
  00799	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  007a0	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  007a7	85 c9		 test	 ecx, ecx
  007a9	75 21		 jne	 SHORT $LN47@G_BuildTic
  007ab	b8 08 00 00 00	 mov	 eax, 8
  007b0	d1 e0		 shl	 eax, 1
  007b2	b9 04 00 00 00	 mov	 ecx, 4
  007b7	c1 e1 00	 shl	 ecx, 0
  007ba	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  007c1	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  007c8	85 c0		 test	 eax, eax
  007ca	74 20		 je	 SHORT $LN44@G_BuildTic
$LN47@G_BuildTic:

; 816  : 			(gamekeydown[gamecontrol[gc_backward][0]] || gamekeydown[gamecontrol[gc_backward][1]]))
; 817  : 			side += FixedMul(sidemove[speed], FRACUNIT * 3 / 4);

  007cc	68 00 c0 00 00	 push	 49152			; 0000c000H
  007d1	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  007d4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _sidemove[eax*4]
  007db	51		 push	 ecx
  007dc	e8 00 00 00 00	 call	 _FixedMul
  007e1	83 c4 08	 add	 esp, 8
  007e4	03 45 f0	 add	 eax, DWORD PTR _side$[ebp]
  007e7	89 45 f0	 mov	 DWORD PTR _side$[ebp], eax
  007ea	eb 10		 jmp	 SHORT $LN45@G_BuildTic
$LN44@G_BuildTic:

; 818  : 		else
; 819  : 			side += sidemove[speed];

  007ec	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  007ef	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  007f2	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR _sidemove[eax*4]
  007f9	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN45@G_BuildTic:

; 820  : 	}
; 821  : 	if (gamekeydown[gamecontrol[gc_strafeleft][0]] ||

  007fc	b8 08 00 00 00	 mov	 eax, 8
  00801	6b c8 05	 imul	 ecx, eax, 5
  00804	ba 04 00 00 00	 mov	 edx, 4
  00809	6b c2 00	 imul	 eax, edx, 0
  0080c	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00813	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  0081a	85 d2		 test	 edx, edx
  0081c	75 26		 jne	 SHORT $LN49@G_BuildTic
  0081e	b8 08 00 00 00	 mov	 eax, 8
  00823	6b c8 05	 imul	 ecx, eax, 5
  00826	ba 04 00 00 00	 mov	 edx, 4
  0082b	c1 e2 00	 shl	 edx, 0
  0082e	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00835	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0083c	85 c9		 test	 ecx, ecx
  0083e	0f 84 b8 00 00
	00		 je	 $LN51@G_BuildTic
$LN49@G_BuildTic:

; 822  : 		gamekeydown[gamecontrol[gc_strafeleft][1]])
; 823  : 	{
; 824  : 		// No additional acceleration when moving forward/backward and strafing simultaneously.
; 825  : 		if ((gamekeydown[gamecontrol[gc_forward][0]] || gamekeydown[gamecontrol[gc_forward][1]]) ||

  00844	b8 08 00 00 00	 mov	 eax, 8
  00849	c1 e0 00	 shl	 eax, 0
  0084c	b9 04 00 00 00	 mov	 ecx, 4
  00851	6b d1 00	 imul	 edx, ecx, 0
  00854	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  0085b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00862	85 c9		 test	 ecx, ecx
  00864	75 64		 jne	 SHORT $LN53@G_BuildTic
  00866	b8 08 00 00 00	 mov	 eax, 8
  0086b	c1 e0 00	 shl	 eax, 0
  0086e	b9 04 00 00 00	 mov	 ecx, 4
  00873	c1 e1 00	 shl	 ecx, 0
  00876	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  0087d	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00884	85 c0		 test	 eax, eax
  00886	75 42		 jne	 SHORT $LN53@G_BuildTic
  00888	b8 08 00 00 00	 mov	 eax, 8
  0088d	d1 e0		 shl	 eax, 1
  0088f	b9 04 00 00 00	 mov	 ecx, 4
  00894	6b d1 00	 imul	 edx, ecx, 0
  00897	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  0089e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  008a5	85 c9		 test	 ecx, ecx
  008a7	75 21		 jne	 SHORT $LN53@G_BuildTic
  008a9	b8 08 00 00 00	 mov	 eax, 8
  008ae	d1 e0		 shl	 eax, 1
  008b0	b9 04 00 00 00	 mov	 ecx, 4
  008b5	c1 e1 00	 shl	 ecx, 0
  008b8	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  008bf	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  008c6	85 c0		 test	 eax, eax
  008c8	74 22		 je	 SHORT $LN50@G_BuildTic
$LN53@G_BuildTic:

; 826  : 			(gamekeydown[gamecontrol[gc_backward][0]] || gamekeydown[gamecontrol[gc_backward][1]]))
; 827  : 			side -= FixedMul(sidemove[speed], FRACUNIT * 3 / 4);

  008ca	68 00 c0 00 00	 push	 49152			; 0000c000H
  008cf	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  008d2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _sidemove[eax*4]
  008d9	51		 push	 ecx
  008da	e8 00 00 00 00	 call	 _FixedMul
  008df	83 c4 08	 add	 esp, 8
  008e2	8b 55 f0	 mov	 edx, DWORD PTR _side$[ebp]
  008e5	2b d0		 sub	 edx, eax
  008e7	89 55 f0	 mov	 DWORD PTR _side$[ebp], edx
  008ea	eb 10		 jmp	 SHORT $LN51@G_BuildTic
$LN50@G_BuildTic:

; 828  : 		else
; 829  : 			side -= sidemove[speed];

  008ec	8b 45 e8	 mov	 eax, DWORD PTR _speed$[ebp]
  008ef	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  008f2	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _sidemove[eax*4]
  008f9	89 4d f0	 mov	 DWORD PTR _side$[ebp], ecx
$LN51@G_BuildTic:

; 830  : 	}
; 831  : 
; 832  : 	// Next Weapon
; 833  : 	if (gamekeydown[gamecontrol[gc_weaponnext][0]] ||

  008fc	b8 08 00 00 00	 mov	 eax, 8
  00901	c1 e0 03	 shl	 eax, 3
  00904	b9 04 00 00 00	 mov	 ecx, 4
  00909	6b d1 00	 imul	 edx, ecx, 0
  0090c	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  00913	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  0091a	85 c9		 test	 ecx, ecx
  0091c	75 22		 jne	 SHORT $LN55@G_BuildTic
  0091e	b8 08 00 00 00	 mov	 eax, 8
  00923	c1 e0 03	 shl	 eax, 3
  00926	b9 04 00 00 00	 mov	 ecx, 4
  0092b	c1 e1 00	 shl	 ecx, 0
  0092e	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  00935	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  0093c	85 c0		 test	 eax, eax
  0093e	74 11		 je	 SHORT $LN54@G_BuildTic
$LN55@G_BuildTic:

; 834  : 		gamekeydown[gamecontrol[gc_weaponnext][1]])
; 835  : 		cmd->buttons |= BT_WEAPONNEXT;

  00940	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00943	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00947	83 c9 10	 or	 ecx, 16			; 00000010H
  0094a	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  0094d	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN54@G_BuildTic:

; 836  : 
; 837  : 	// Previous Weapon
; 838  : 	if (gamekeydown[gamecontrol[gc_weaponprev][0]] ||

  00951	b8 08 00 00 00	 mov	 eax, 8
  00956	6b c8 09	 imul	 ecx, eax, 9
  00959	ba 04 00 00 00	 mov	 edx, 4
  0095e	6b c2 00	 imul	 eax, edx, 0
  00961	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00968	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  0096f	85 d2		 test	 edx, edx
  00971	75 22		 jne	 SHORT $LN57@G_BuildTic
  00973	b8 08 00 00 00	 mov	 eax, 8
  00978	6b c8 09	 imul	 ecx, eax, 9
  0097b	ba 04 00 00 00	 mov	 edx, 4
  00980	c1 e2 00	 shl	 edx, 0
  00983	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  0098a	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00991	85 c9		 test	 ecx, ecx
  00993	74 11		 je	 SHORT $LN56@G_BuildTic
$LN57@G_BuildTic:

; 839  : 		gamekeydown[gamecontrol[gc_weaponprev][1]])
; 840  : 		cmd->buttons |= BT_WEAPONPREV;

  00995	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00998	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0099c	83 c9 20	 or	 ecx, 32			; 00000020H
  0099f	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  009a2	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN56@G_BuildTic:

; 841  : 
; 842  : 	//use the three avaliable bits to determine the weapon.
; 843  : 	cmd->buttons &= ~BT_WEAPONMASK;

  009a6	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  009a9	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  009ad	83 e1 f8	 and	 ecx, -8			; fffffff8H
  009b0	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  009b3	66 89 4a 06	 mov	 WORD PTR [edx+6], cx

; 844  : 
; 845  : 	if (gamekeydown[gamecontrol[gc_normalring][0]] ||

  009b7	b8 08 00 00 00	 mov	 eax, 8
  009bc	6b c8 0a	 imul	 ecx, eax, 10
  009bf	ba 04 00 00 00	 mov	 edx, 4
  009c4	6b c2 00	 imul	 eax, edx, 0
  009c7	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  009ce	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  009d5	85 d2		 test	 edx, edx
  009d7	75 22		 jne	 SHORT $LN60@G_BuildTic
  009d9	b8 08 00 00 00	 mov	 eax, 8
  009de	6b c8 0a	 imul	 ecx, eax, 10
  009e1	ba 04 00 00 00	 mov	 edx, 4
  009e6	c1 e2 00	 shl	 edx, 0
  009e9	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  009f0	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  009f7	85 c9		 test	 ecx, ecx
  009f9	74 16		 je	 SHORT $LN58@G_BuildTic
$LN60@G_BuildTic:

; 846  : 		gamekeydown[gamecontrol[gc_normalring][1]])
; 847  : 		cmd->buttons |= 1; // Normal Ring

  009fb	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  009fe	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00a02	83 c9 01	 or	 ecx, 1
  00a05	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00a08	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00a0c	e9 14 02 00 00	 jmp	 $LN76@G_BuildTic
$LN58@G_BuildTic:

; 848  : 	else if (gamekeydown[gamecontrol[gc_autoring][0]] ||

  00a11	b8 08 00 00 00	 mov	 eax, 8
  00a16	6b c8 0b	 imul	 ecx, eax, 11
  00a19	ba 04 00 00 00	 mov	 edx, 4
  00a1e	6b c2 00	 imul	 eax, edx, 0
  00a21	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00a28	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00a2f	85 d2		 test	 edx, edx
  00a31	75 22		 jne	 SHORT $LN63@G_BuildTic
  00a33	b8 08 00 00 00	 mov	 eax, 8
  00a38	6b c8 0b	 imul	 ecx, eax, 11
  00a3b	ba 04 00 00 00	 mov	 edx, 4
  00a40	c1 e2 00	 shl	 edx, 0
  00a43	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00a4a	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00a51	85 c9		 test	 ecx, ecx
  00a53	74 16		 je	 SHORT $LN61@G_BuildTic
$LN63@G_BuildTic:

; 849  : 		gamekeydown[gamecontrol[gc_autoring][1]])
; 850  : 		cmd->buttons |= 2; // Automatic Ring

  00a55	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00a58	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00a5c	83 c9 02	 or	 ecx, 2
  00a5f	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00a62	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00a66	e9 ba 01 00 00	 jmp	 $LN76@G_BuildTic
$LN61@G_BuildTic:

; 851  : 	else if (gamekeydown[gamecontrol[gc_bouncering][0]] ||

  00a6b	b8 08 00 00 00	 mov	 eax, 8
  00a70	6b c8 0c	 imul	 ecx, eax, 12
  00a73	ba 04 00 00 00	 mov	 edx, 4
  00a78	6b c2 00	 imul	 eax, edx, 0
  00a7b	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00a82	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00a89	85 d2		 test	 edx, edx
  00a8b	75 22		 jne	 SHORT $LN66@G_BuildTic
  00a8d	b8 08 00 00 00	 mov	 eax, 8
  00a92	6b c8 0c	 imul	 ecx, eax, 12
  00a95	ba 04 00 00 00	 mov	 edx, 4
  00a9a	c1 e2 00	 shl	 edx, 0
  00a9d	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00aa4	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00aab	85 c9		 test	 ecx, ecx
  00aad	74 16		 je	 SHORT $LN64@G_BuildTic
$LN66@G_BuildTic:

; 852  : 		gamekeydown[gamecontrol[gc_bouncering][1]])
; 853  : 		cmd->buttons |= 3; // Bounce Ring

  00aaf	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00ab2	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00ab6	83 c9 03	 or	 ecx, 3
  00ab9	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00abc	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00ac0	e9 60 01 00 00	 jmp	 $LN76@G_BuildTic
$LN64@G_BuildTic:

; 854  : 	else if (gamekeydown[gamecontrol[gc_scatterring][0]] ||

  00ac5	b8 08 00 00 00	 mov	 eax, 8
  00aca	6b c8 0d	 imul	 ecx, eax, 13
  00acd	ba 04 00 00 00	 mov	 edx, 4
  00ad2	6b c2 00	 imul	 eax, edx, 0
  00ad5	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00adc	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00ae3	85 d2		 test	 edx, edx
  00ae5	75 22		 jne	 SHORT $LN69@G_BuildTic
  00ae7	b8 08 00 00 00	 mov	 eax, 8
  00aec	6b c8 0d	 imul	 ecx, eax, 13
  00aef	ba 04 00 00 00	 mov	 edx, 4
  00af4	c1 e2 00	 shl	 edx, 0
  00af7	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00afe	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00b05	85 c9		 test	 ecx, ecx
  00b07	74 16		 je	 SHORT $LN67@G_BuildTic
$LN69@G_BuildTic:

; 855  : 		gamekeydown[gamecontrol[gc_scatterring][1]])
; 856  : 		cmd->buttons |= 4; // Scatter Ring

  00b09	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00b0c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00b10	83 c9 04	 or	 ecx, 4
  00b13	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00b16	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00b1a	e9 06 01 00 00	 jmp	 $LN76@G_BuildTic
$LN67@G_BuildTic:

; 857  : 	else if (gamekeydown[gamecontrol[gc_grenadering][0]] ||

  00b1f	b8 08 00 00 00	 mov	 eax, 8
  00b24	6b c8 0e	 imul	 ecx, eax, 14
  00b27	ba 04 00 00 00	 mov	 edx, 4
  00b2c	6b c2 00	 imul	 eax, edx, 0
  00b2f	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00b36	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00b3d	85 d2		 test	 edx, edx
  00b3f	75 22		 jne	 SHORT $LN72@G_BuildTic
  00b41	b8 08 00 00 00	 mov	 eax, 8
  00b46	6b c8 0e	 imul	 ecx, eax, 14
  00b49	ba 04 00 00 00	 mov	 edx, 4
  00b4e	c1 e2 00	 shl	 edx, 0
  00b51	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00b58	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00b5f	85 c9		 test	 ecx, ecx
  00b61	74 16		 je	 SHORT $LN70@G_BuildTic
$LN72@G_BuildTic:

; 858  : 		gamekeydown[gamecontrol[gc_grenadering][1]])
; 859  : 		cmd->buttons |= 5; // Grenade Ring

  00b63	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00b66	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00b6a	83 c9 05	 or	 ecx, 5
  00b6d	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00b70	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00b74	e9 ac 00 00 00	 jmp	 $LN76@G_BuildTic
$LN70@G_BuildTic:

; 860  : 	else if (gamekeydown[gamecontrol[gc_explosionring][0]] ||

  00b79	b8 08 00 00 00	 mov	 eax, 8
  00b7e	6b c8 0f	 imul	 ecx, eax, 15
  00b81	ba 04 00 00 00	 mov	 edx, 4
  00b86	6b c2 00	 imul	 eax, edx, 0
  00b89	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00b90	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00b97	85 d2		 test	 edx, edx
  00b99	75 22		 jne	 SHORT $LN75@G_BuildTic
  00b9b	b8 08 00 00 00	 mov	 eax, 8
  00ba0	6b c8 0f	 imul	 ecx, eax, 15
  00ba3	ba 04 00 00 00	 mov	 edx, 4
  00ba8	c1 e2 00	 shl	 edx, 0
  00bab	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00bb2	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00bb9	85 c9		 test	 ecx, ecx
  00bbb	74 13		 je	 SHORT $LN73@G_BuildTic
$LN75@G_BuildTic:

; 861  : 		gamekeydown[gamecontrol[gc_explosionring][1]])
; 862  : 		cmd->buttons |= 6; // Explosion Ring

  00bbd	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00bc0	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00bc4	83 c9 06	 or	 ecx, 6
  00bc7	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00bca	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
  00bce	eb 55		 jmp	 SHORT $LN76@G_BuildTic
$LN73@G_BuildTic:

; 863  : 	else if (gamekeydown[gamecontrol[gc_railring][0]] ||

  00bd0	b8 08 00 00 00	 mov	 eax, 8
  00bd5	c1 e0 04	 shl	 eax, 4
  00bd8	b9 04 00 00 00	 mov	 ecx, 4
  00bdd	6b d1 00	 imul	 edx, ecx, 0
  00be0	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  00be7	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00bee	85 c9		 test	 ecx, ecx
  00bf0	75 22		 jne	 SHORT $LN77@G_BuildTic
  00bf2	b8 08 00 00 00	 mov	 eax, 8
  00bf7	c1 e0 04	 shl	 eax, 4
  00bfa	b9 04 00 00 00	 mov	 ecx, 4
  00bff	c1 e1 00	 shl	 ecx, 0
  00c02	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  00c09	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00c10	85 c0		 test	 eax, eax
  00c12	74 11		 je	 SHORT $LN76@G_BuildTic
$LN77@G_BuildTic:

; 864  : 		gamekeydown[gamecontrol[gc_railring][1]])
; 865  : 		cmd->buttons |= 7; // Rail Ring

  00c14	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00c17	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00c1b	83 c9 07	 or	 ecx, 7
  00c1e	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00c21	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN76@G_BuildTic:

; 866  : 
; 867  : 	// fire with any button/key
; 868  : 	axis = JoyAxis(AXISFIRE);

  00c25	6a 06		 push	 6
  00c27	e8 00 00 00 00	 call	 _JoyAxis
  00c2c	83 c4 04	 add	 esp, 4
  00c2f	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 869  : 	if (gamekeydown[gamecontrol[gc_fire][0]] ||
; 870  : 		gamekeydown[gamecontrol[gc_fire][1]] ||

  00c32	b8 08 00 00 00	 mov	 eax, 8
  00c37	6b c8 11	 imul	 ecx, eax, 17
  00c3a	ba 04 00 00 00	 mov	 edx, 4
  00c3f	6b c2 00	 imul	 eax, edx, 0
  00c42	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00c49	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00c50	85 d2		 test	 edx, edx
  00c52	75 31		 jne	 SHORT $LN79@G_BuildTic
  00c54	b8 08 00 00 00	 mov	 eax, 8
  00c59	6b c8 11	 imul	 ecx, eax, 17
  00c5c	ba 04 00 00 00	 mov	 edx, 4
  00c61	c1 e2 00	 shl	 edx, 0
  00c64	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00c6b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00c72	85 c9		 test	 ecx, ecx
  00c74	75 0f		 jne	 SHORT $LN79@G_BuildTic
  00c76	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick+20, 0
  00c7d	74 1a		 je	 SHORT $LN78@G_BuildTic
  00c7f	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00c83	7e 14		 jle	 SHORT $LN78@G_BuildTic
$LN79@G_BuildTic:

; 871  : 		(cv_usejoystick.value && axis > 0))
; 872  : 		cmd->buttons |= BT_ATTACK;

  00c85	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00c88	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00c8c	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  00c92	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00c95	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN78@G_BuildTic:

; 873  : 
; 874  : 	// fire normal with any button/key
; 875  : 	axis = JoyAxis(AXISFIRENORMAL);

  00c99	6a 07		 push	 7
  00c9b	e8 00 00 00 00	 call	 _JoyAxis
  00ca0	83 c4 04	 add	 esp, 4
  00ca3	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 876  : 	if (gamekeydown[gamecontrol[gc_firenormal][0]] ||
; 877  : 		gamekeydown[gamecontrol[gc_firenormal][1]] ||

  00ca6	b8 08 00 00 00	 mov	 eax, 8
  00cab	6b c8 12	 imul	 ecx, eax, 18
  00cae	ba 04 00 00 00	 mov	 edx, 4
  00cb3	6b c2 00	 imul	 eax, edx, 0
  00cb6	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00cbd	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00cc4	85 d2		 test	 edx, edx
  00cc6	75 31		 jne	 SHORT $LN81@G_BuildTic
  00cc8	b8 08 00 00 00	 mov	 eax, 8
  00ccd	6b c8 12	 imul	 ecx, eax, 18
  00cd0	ba 04 00 00 00	 mov	 edx, 4
  00cd5	c1 e2 00	 shl	 edx, 0
  00cd8	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00cdf	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00ce6	85 c9		 test	 ecx, ecx
  00ce8	75 0f		 jne	 SHORT $LN81@G_BuildTic
  00cea	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_usejoystick+20, 0
  00cf1	74 1a		 je	 SHORT $LN80@G_BuildTic
  00cf3	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  00cf7	7e 14		 jle	 SHORT $LN80@G_BuildTic
$LN81@G_BuildTic:

; 878  : 		(cv_usejoystick.value && axis > 0))
; 879  : 		cmd->buttons |= BT_FIRENORMAL;

  00cf9	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00cfc	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00d00	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H
  00d06	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00d09	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN80@G_BuildTic:

; 880  : 
; 881  : 	if (gamekeydown[gamecontrol[gc_tossflag][0]] ||

  00d0d	b8 08 00 00 00	 mov	 eax, 8
  00d12	6b c8 13	 imul	 ecx, eax, 19
  00d15	ba 04 00 00 00	 mov	 edx, 4
  00d1a	6b c2 00	 imul	 eax, edx, 0
  00d1d	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00d24	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00d2b	85 d2		 test	 edx, edx
  00d2d	75 22		 jne	 SHORT $LN83@G_BuildTic
  00d2f	b8 08 00 00 00	 mov	 eax, 8
  00d34	6b c8 13	 imul	 ecx, eax, 19
  00d37	ba 04 00 00 00	 mov	 edx, 4
  00d3c	c1 e2 00	 shl	 edx, 0
  00d3f	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00d46	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00d4d	85 c9		 test	 ecx, ecx
  00d4f	74 14		 je	 SHORT $LN82@G_BuildTic
$LN83@G_BuildTic:

; 882  : 		gamekeydown[gamecontrol[gc_tossflag][1]])
; 883  : 		cmd->buttons |= BT_TOSSFLAG;

  00d51	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00d54	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00d58	81 c9 00 20 00
	00		 or	 ecx, 8192		; 00002000H
  00d5e	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00d61	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN82@G_BuildTic:

; 884  : 
; 885  : 	// use with any button/key
; 886  : 	if (gamekeydown[gamecontrol[gc_use][0]] ||

  00d65	b8 08 00 00 00	 mov	 eax, 8
  00d6a	6b c8 14	 imul	 ecx, eax, 20
  00d6d	ba 04 00 00 00	 mov	 edx, 4
  00d72	6b c2 00	 imul	 eax, edx, 0
  00d75	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00d7c	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00d83	85 d2		 test	 edx, edx
  00d85	75 22		 jne	 SHORT $LN85@G_BuildTic
  00d87	b8 08 00 00 00	 mov	 eax, 8
  00d8c	6b c8 14	 imul	 ecx, eax, 20
  00d8f	ba 04 00 00 00	 mov	 edx, 4
  00d94	c1 e2 00	 shl	 edx, 0
  00d97	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00d9e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00da5	85 c9		 test	 ecx, ecx
  00da7	74 14		 je	 SHORT $LN84@G_BuildTic
$LN85@G_BuildTic:

; 887  : 		gamekeydown[gamecontrol[gc_use][1]])
; 888  : 		cmd->buttons |= BT_USE;

  00da9	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00dac	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00db0	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00db6	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00db9	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN84@G_BuildTic:

; 889  : 
; 890  : 	// Taunts
; 891  : 	if (gamekeydown[gamecontrol[gc_taunt][0]] ||

  00dbd	b8 08 00 00 00	 mov	 eax, 8
  00dc2	6b c8 15	 imul	 ecx, eax, 21
  00dc5	ba 04 00 00 00	 mov	 edx, 4
  00dca	6b c2 00	 imul	 eax, edx, 0
  00dcd	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00dd4	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00ddb	85 d2		 test	 edx, edx
  00ddd	75 22		 jne	 SHORT $LN87@G_BuildTic
  00ddf	b8 08 00 00 00	 mov	 eax, 8
  00de4	6b c8 15	 imul	 ecx, eax, 21
  00de7	ba 04 00 00 00	 mov	 edx, 4
  00dec	c1 e2 00	 shl	 edx, 0
  00def	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00df6	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00dfd	85 c9		 test	 ecx, ecx
  00dff	74 14		 je	 SHORT $LN86@G_BuildTic
$LN87@G_BuildTic:

; 892  : 		gamekeydown[gamecontrol[gc_taunt][1]])
; 893  : 		cmd->buttons |= BT_TAUNT;

  00e01	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e04	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00e08	81 c9 00 04 00
	00		 or	 ecx, 1024		; 00000400H
  00e0e	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00e11	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN86@G_BuildTic:

; 894  : 
; 895  : 	// Camera Controls
; 896  : 	if ((gamekeydown[gamecontrol[gc_camleft][0]] ||
; 897  : 		gamekeydown[gamecontrol[gc_camleft][1]]) &&

  00e15	b8 08 00 00 00	 mov	 eax, 8
  00e1a	6b c8 16	 imul	 ecx, eax, 22
  00e1d	ba 04 00 00 00	 mov	 edx, 4
  00e22	6b c2 00	 imul	 eax, edx, 0
  00e25	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00e2c	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00e33	85 d2		 test	 edx, edx
  00e35	75 22		 jne	 SHORT $LN89@G_BuildTic
  00e37	b8 08 00 00 00	 mov	 eax, 8
  00e3c	6b c8 16	 imul	 ecx, eax, 22
  00e3f	ba 04 00 00 00	 mov	 edx, 4
  00e44	c1 e2 00	 shl	 edx, 0
  00e47	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00e4e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00e55	85 c9		 test	 ecx, ecx
  00e57	74 47		 je	 SHORT $LN88@G_BuildTic
$LN89@G_BuildTic:
  00e59	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00e60	75 2a		 jne	 SHORT $LN90@G_BuildTic
  00e62	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00e69	75 21		 jne	 SHORT $LN90@G_BuildTic
  00e6b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00e72	75 18		 jne	 SHORT $LN90@G_BuildTic
  00e74	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00e7e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00e84	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00e8a	74 14		 je	 SHORT $LN88@G_BuildTic
$LN90@G_BuildTic:

; 898  : 		(cv_debug || cv_analog.value || cv_objectplace.value || players[consoleplayer].pflags & PF_NIGHTSMODE))
; 899  : 		cmd->buttons |= BT_CAMLEFT;

  00e8c	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00e8f	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00e93	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00e99	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00e9c	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN88@G_BuildTic:

; 900  : 
; 901  : 	if ((gamekeydown[gamecontrol[gc_camright][0]] ||
; 902  : 		gamekeydown[gamecontrol[gc_camright][1]]) &&

  00ea0	b8 08 00 00 00	 mov	 eax, 8
  00ea5	6b c8 17	 imul	 ecx, eax, 23
  00ea8	ba 04 00 00 00	 mov	 edx, 4
  00ead	6b c2 00	 imul	 eax, edx, 0
  00eb0	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00eb7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00ebe	85 d2		 test	 edx, edx
  00ec0	75 22		 jne	 SHORT $LN92@G_BuildTic
  00ec2	b8 08 00 00 00	 mov	 eax, 8
  00ec7	6b c8 17	 imul	 ecx, eax, 23
  00eca	ba 04 00 00 00	 mov	 edx, 4
  00ecf	c1 e2 00	 shl	 edx, 0
  00ed2	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00ed9	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00ee0	85 c9		 test	 ecx, ecx
  00ee2	74 47		 je	 SHORT $LN91@G_BuildTic
$LN92@G_BuildTic:
  00ee4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00eeb	75 2a		 jne	 SHORT $LN93@G_BuildTic
  00eed	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  00ef4	75 21		 jne	 SHORT $LN93@G_BuildTic
  00ef6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00efd	75 18		 jne	 SHORT $LN93@G_BuildTic
  00eff	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00f09	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00f0f	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00f15	74 14		 je	 SHORT $LN91@G_BuildTic
$LN93@G_BuildTic:

; 903  : 		(cv_debug || cv_analog.value || cv_objectplace.value || players[consoleplayer].pflags & PF_NIGHTSMODE))
; 904  : 		cmd->buttons |= BT_CAMRIGHT;

  00f17	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00f1a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00f1e	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  00f24	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00f27	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN91@G_BuildTic:

; 905  : 
; 906  : 	if (gamekeydown[gamecontrol[gc_camreset][0]] ||

  00f2b	b8 08 00 00 00	 mov	 eax, 8
  00f30	6b c8 18	 imul	 ecx, eax, 24
  00f33	ba 04 00 00 00	 mov	 edx, 4
  00f38	6b c2 00	 imul	 eax, edx, 0
  00f3b	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  00f42	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00f49	85 d2		 test	 edx, edx
  00f4b	75 22		 jne	 SHORT $LN95@G_BuildTic
  00f4d	b8 08 00 00 00	 mov	 eax, 8
  00f52	6b c8 18	 imul	 ecx, eax, 24
  00f55	ba 04 00 00 00	 mov	 edx, 4
  00f5a	c1 e2 00	 shl	 edx, 0
  00f5d	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  00f64	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00f6b	85 c9		 test	 ecx, ecx
  00f6d	74 26		 je	 SHORT $LN96@G_BuildTic
$LN95@G_BuildTic:

; 907  : 		gamekeydown[gamecontrol[gc_camreset][1]])
; 908  : 	{
; 909  : 		if (cv_chasecam.value)

  00f6f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00f76	74 1d		 je	 SHORT $LN96@G_BuildTic

; 910  : 			P_ResetCamera(&players[displayplayer], &camera);

  00f78	68 00 00 00 00	 push	 OFFSET _camera
  00f7d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00f87	05 00 00 00 00	 add	 eax, OFFSET _players
  00f8c	50		 push	 eax
  00f8d	e8 00 00 00 00	 call	 _P_ResetCamera
  00f92	83 c4 08	 add	 esp, 8
$LN96@G_BuildTic:

; 911  : 	}
; 912  : 
; 913  : 	// jump button
; 914  : 	if (gamekeydown[gamecontrol[gc_jump][0]] ||

  00f95	b8 08 00 00 00	 mov	 eax, 8
  00f9a	c1 e0 05	 shl	 eax, 5
  00f9d	b9 04 00 00 00	 mov	 ecx, 4
  00fa2	6b d1 00	 imul	 edx, ecx, 0
  00fa5	8b 84 10 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[eax+edx]
  00fac	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  00fb3	85 c9		 test	 ecx, ecx
  00fb5	75 22		 jne	 SHORT $LN98@G_BuildTic
  00fb7	b8 08 00 00 00	 mov	 eax, 8
  00fbc	c1 e0 05	 shl	 eax, 5
  00fbf	b9 04 00 00 00	 mov	 ecx, 4
  00fc4	c1 e1 00	 shl	 ecx, 0
  00fc7	8b 94 08 00 00
	00 00		 mov	 edx, DWORD PTR _gamecontrol[eax+ecx]
  00fce	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _gamekeydown[edx]
  00fd5	85 c0		 test	 eax, eax
  00fd7	74 14		 je	 SHORT $LN97@G_BuildTic
$LN98@G_BuildTic:

; 915  : 		gamekeydown[gamecontrol[gc_jump][1]])
; 916  : 		cmd->buttons |= BT_JUMP;

  00fd9	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  00fdc	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00fe0	81 c9 00 40 00
	00		 or	 ecx, 16384		; 00004000H
  00fe6	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  00fe9	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN97@G_BuildTic:

; 917  : 
; 918  : 	// mouse look stuff (mouse look is not the same as mouse aim)
; 919  : 	if (mouseaiming)

  00fed	83 7d dc 00	 cmp	 DWORD PTR _mouseaiming$[ebp], 0
  00ff1	0f 84 9c 00 00
	00		 je	 $LN101@G_BuildTic

; 920  : 	{
; 921  : 		keyboard_look = false;

  00ff7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd@@9@9, 0

; 922  : 
; 923  : 		// looking up/down
; 924  : 		if (players[consoleplayer].mo
; 925  : 			&& players[consoleplayer].mo->eflags & MFE_VERTICALFLIP
; 926  : 			&& !cv_chasecam.value //because chasecam's not inverted
; 927  : 			? !cv_invertmouse.value : cv_invertmouse.value)

  01001	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0100b	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  01012	74 45		 je	 SHORT $LN148@G_BuildTic
  01014	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  0101e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  01024	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0102a	83 e0 20	 and	 eax, 32			; 00000020H
  0102d	74 2a		 je	 SHORT $LN148@G_BuildTic
  0102f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01036	75 21		 jne	 SHORT $LN148@G_BuildTic
  01038	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_invertmouse+20, 0
  0103f	75 09		 jne	 SHORT $LN149@G_BuildTic
  01041	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv958[ebp], 1
  01048	eb 07		 jmp	 SHORT $LN150@G_BuildTic
$LN149@G_BuildTic:
  0104a	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv958[ebp], 0
$LN150@G_BuildTic:
  01051	8b 4d 8c	 mov	 ecx, DWORD PTR tv958[ebp]
  01054	89 4d 88	 mov	 DWORD PTR tv959[ebp], ecx
  01057	eb 09		 jmp	 SHORT $LN151@G_BuildTic
$LN148@G_BuildTic:
  01059	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_invertmouse+20
  0105f	89 55 88	 mov	 DWORD PTR tv959[ebp], edx
$LN151@G_BuildTic:
  01062	83 7d 88 00	 cmp	 DWORD PTR tv959[ebp], 0
  01066	74 18		 je	 SHORT $LN100@G_BuildTic

; 928  : 			localaiming -= mlooky<<19;

  01068	a1 00 00 00 00	 mov	 eax, DWORD PTR _mlooky
  0106d	c1 e0 13	 shl	 eax, 19			; 00000013H
  01070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _localaiming
  01076	2b c8		 sub	 ecx, eax
  01078	89 0d 00 00 00
	00		 mov	 DWORD PTR _localaiming, ecx
  0107e	eb 13		 jmp	 SHORT $LN101@G_BuildTic
$LN100@G_BuildTic:

; 929  : 		else
; 930  : 			localaiming += mlooky<<19;

  01080	a1 00 00 00 00	 mov	 eax, DWORD PTR _mlooky
  01085	c1 e0 13	 shl	 eax, 19			; 00000013H
  01088	03 05 00 00 00
	00		 add	 eax, DWORD PTR _localaiming
  0108e	a3 00 00 00 00	 mov	 DWORD PTR _localaiming, eax
$LN101@G_BuildTic:

; 931  : 	}
; 932  : 
; 933  : 	axis = JoyAxis(AXISLOOK);

  01093	6a 03		 push	 3
  01095	e8 00 00 00 00	 call	 _JoyAxis
  0109a	83 c4 04	 add	 esp, 4
  0109d	89 45 ec	 mov	 DWORD PTR _axis$[ebp], eax

; 934  : 	if (analogjoystickmove && axis != 0 && cv_lookaxis.value != 0)

  010a0	83 7d d8 00	 cmp	 DWORD PTR _analogjoystickmove$[ebp], 0
  010a4	74 20		 je	 SHORT $LN102@G_BuildTic
  010a6	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  010aa	74 1a		 je	 SHORT $LN102@G_BuildTic
  010ac	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_lookaxis+20, 0
  010b3	74 11		 je	 SHORT $LN102@G_BuildTic

; 935  : 		localaiming += axis<<16;

  010b5	8b 45 ec	 mov	 eax, DWORD PTR _axis$[ebp]
  010b8	c1 e0 10	 shl	 eax, 16			; 00000010H
  010bb	03 05 00 00 00
	00		 add	 eax, DWORD PTR _localaiming
  010c1	a3 00 00 00 00	 mov	 DWORD PTR _localaiming, eax
$LN102@G_BuildTic:

; 936  : 
; 937  : 	// spring back if not using keyboard neither mouselookin'
; 938  : 	if (!keyboard_look && cv_lookaxis.value == 0 && !mouseaiming)

  010c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd@@9@9, 0
  010cd	75 19		 jne	 SHORT $LN103@G_BuildTic
  010cf	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_lookaxis+20, 0
  010d6	75 10		 jne	 SHORT $LN103@G_BuildTic
  010d8	83 7d dc 00	 cmp	 DWORD PTR _mouseaiming$[ebp], 0
  010dc	75 0a		 jne	 SHORT $LN103@G_BuildTic

; 939  : 		localaiming = 0;

  010de	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming, 0
$LN103@G_BuildTic:

; 940  : 
; 941  : 	if (gamekeydown[gamecontrol[gc_lookup][0]] ||
; 942  : 		gamekeydown[gamecontrol[gc_lookup][1]] ||

  010e8	b8 08 00 00 00	 mov	 eax, 8
  010ed	6b c8 19	 imul	 ecx, eax, 25
  010f0	ba 04 00 00 00	 mov	 edx, 4
  010f5	6b c2 00	 imul	 eax, edx, 0
  010f8	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  010ff	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  01106	85 d2		 test	 edx, edx
  01108	75 2e		 jne	 SHORT $LN106@G_BuildTic
  0110a	b8 08 00 00 00	 mov	 eax, 8
  0110f	6b c8 19	 imul	 ecx, eax, 25
  01112	ba 04 00 00 00	 mov	 edx, 4
  01117	c1 e2 00	 shl	 edx, 0
  0111a	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  01121	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  01128	85 c9		 test	 ecx, ecx
  0112a	75 0c		 jne	 SHORT $LN106@G_BuildTic
  0112c	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  01130	74 6c		 je	 SHORT $LN104@G_BuildTic
  01132	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  01136	7d 66		 jge	 SHORT $LN104@G_BuildTic
$LN106@G_BuildTic:

; 943  : 		(gamepadjoystickmove && axis < 0))
; 944  : 	{
; 945  : 		if (players[consoleplayer].mo && players[consoleplayer].mo->eflags & MFE_VERTICALFLIP && !cv_chasecam.value)

  01138	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  01142	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  01149	74 35		 je	 SHORT $LN107@G_BuildTic
  0114b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  01155	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0115b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01161	83 e2 20	 and	 edx, 32			; 00000020H
  01164	74 1a		 je	 SHORT $LN107@G_BuildTic
  01166	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  0116d	75 11		 jne	 SHORT $LN107@G_BuildTic

; 946  : 			localaiming -= KB_LOOKSPEED;

  0116f	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming
  01174	2d 00 00 00 02	 sub	 eax, 33554432		; 02000000H
  01179	a3 00 00 00 00	 mov	 DWORD PTR _localaiming, eax
  0117e	eb 0f		 jmp	 SHORT $LN108@G_BuildTic
$LN107@G_BuildTic:

; 947  : 		else
; 948  : 			localaiming += KB_LOOKSPEED;

  01180	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming
  01185	05 00 00 00 02	 add	 eax, 33554432		; 02000000H
  0118a	a3 00 00 00 00	 mov	 DWORD PTR _localaiming, eax
$LN108@G_BuildTic:

; 949  : 		keyboard_look = true;

  0118f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd@@9@9, 1

; 950  : 	}

  01199	e9 01 01 00 00	 jmp	 $LN114@G_BuildTic
$LN104@G_BuildTic:

; 951  : 	else if (gamekeydown[gamecontrol[gc_lookdown][0]] ||
; 952  : 		gamekeydown[gamecontrol[gc_lookdown][1]] ||

  0119e	b8 08 00 00 00	 mov	 eax, 8
  011a3	6b c8 1a	 imul	 ecx, eax, 26
  011a6	ba 04 00 00 00	 mov	 edx, 4
  011ab	6b c2 00	 imul	 eax, edx, 0
  011ae	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  011b5	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  011bc	85 d2		 test	 edx, edx
  011be	75 2e		 jne	 SHORT $LN111@G_BuildTic
  011c0	b8 08 00 00 00	 mov	 eax, 8
  011c5	6b c8 1a	 imul	 ecx, eax, 26
  011c8	ba 04 00 00 00	 mov	 edx, 4
  011cd	c1 e2 00	 shl	 edx, 0
  011d0	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  011d7	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  011de	85 c9		 test	 ecx, ecx
  011e0	75 0c		 jne	 SHORT $LN111@G_BuildTic
  011e2	83 7d d4 00	 cmp	 DWORD PTR _gamepadjoystickmove$[ebp], 0
  011e6	74 69		 je	 SHORT $LN109@G_BuildTic
  011e8	83 7d ec 00	 cmp	 DWORD PTR _axis$[ebp], 0
  011ec	7e 63		 jle	 SHORT $LN109@G_BuildTic
$LN111@G_BuildTic:

; 953  : 		(gamepadjoystickmove && axis > 0))
; 954  : 	{
; 955  : 		if (players[consoleplayer].mo && players[consoleplayer].mo->eflags & MFE_VERTICALFLIP && !cv_chasecam.value)

  011ee	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  011f8	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  011ff	74 35		 je	 SHORT $LN112@G_BuildTic
  01201	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0120b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  01211	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  01217	83 e2 20	 and	 edx, 32			; 00000020H
  0121a	74 1a		 je	 SHORT $LN112@G_BuildTic
  0121c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  01223	75 11		 jne	 SHORT $LN112@G_BuildTic

; 956  : 			localaiming += KB_LOOKSPEED;

  01225	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming
  0122a	05 00 00 00 02	 add	 eax, 33554432		; 02000000H
  0122f	a3 00 00 00 00	 mov	 DWORD PTR _localaiming, eax
  01234	eb 0f		 jmp	 SHORT $LN113@G_BuildTic
$LN112@G_BuildTic:

; 957  : 		else
; 958  : 			localaiming -= KB_LOOKSPEED;

  01236	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming
  0123b	2d 00 00 00 02	 sub	 eax, 33554432		; 02000000H
  01240	a3 00 00 00 00	 mov	 DWORD PTR _localaiming, eax
$LN113@G_BuildTic:

; 959  : 		keyboard_look = true;

  01245	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?keyboard_look@?1??G_BuildTiccmd@@9@9, 1

; 960  : 	}

  0124f	eb 4e		 jmp	 SHORT $LN114@G_BuildTic
$LN109@G_BuildTic:

; 961  : 	else if (gamekeydown[gamecontrol[gc_centerview][0]] ||

  01251	b8 08 00 00 00	 mov	 eax, 8
  01256	6b c8 1b	 imul	 ecx, eax, 27
  01259	ba 04 00 00 00	 mov	 edx, 4
  0125e	6b c2 00	 imul	 eax, edx, 0
  01261	8b 8c 01 00 00
	00 00		 mov	 ecx, DWORD PTR _gamecontrol[ecx+eax]
  01268	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  0126f	85 d2		 test	 edx, edx
  01271	75 22		 jne	 SHORT $LN115@G_BuildTic
  01273	b8 08 00 00 00	 mov	 eax, 8
  01278	6b c8 1b	 imul	 ecx, eax, 27
  0127b	ba 04 00 00 00	 mov	 edx, 4
  01280	c1 e2 00	 shl	 edx, 0
  01283	8b 84 11 00 00
	00 00		 mov	 eax, DWORD PTR _gamecontrol[ecx+edx]
  0128a	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _gamekeydown[eax]
  01291	85 c9		 test	 ecx, ecx
  01293	74 0a		 je	 SHORT $LN114@G_BuildTic
$LN115@G_BuildTic:

; 962  : 		gamekeydown[gamecontrol[gc_centerview][1]])
; 963  : 		localaiming = 0;

  01295	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming, 0
$LN114@G_BuildTic:

; 964  : 
; 965  : 	// accept no mlook for network games
; 966  : 	if (!cv_allowmlook.value)

  0129f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowmlook+20, 0
  012a6	75 0a		 jne	 SHORT $LN116@G_BuildTic

; 967  : 		localaiming = 0;

  012a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming, 0
$LN116@G_BuildTic:

; 968  : 
; 969  : 	cmd->aiming = G_ClipAimingPitch(&localaiming);

  012b2	68 00 00 00 00	 push	 OFFSET _localaiming
  012b7	e8 00 00 00 00	 call	 _G_ClipAimingPitch
  012bc	83 c4 04	 add	 esp, 4
  012bf	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  012c2	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 970  : 
; 971  : 	if (!mouseaiming && cv_mousemove.value)

  012c6	83 7d dc 00	 cmp	 DWORD PTR _mouseaiming$[ebp], 0
  012ca	75 15		 jne	 SHORT $LN117@G_BuildTic
  012cc	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mousemove+20, 0
  012d3	74 0c		 je	 SHORT $LN117@G_BuildTic

; 972  : 		forward += mousey;

  012d5	8b 45 f4	 mov	 eax, DWORD PTR _forward$[ebp]
  012d8	03 05 00 00 00
	00		 add	 eax, DWORD PTR _mousey
  012de	89 45 f4	 mov	 DWORD PTR _forward$[ebp], eax
$LN117@G_BuildTic:

; 973  : 
; 974  : 	if (strafe || cv_analog.value
; 975  : 		|| players[consoleplayer].climbing
; 976  : 		|| (players[consoleplayer].pflags & PF_SLIDING)) // Analog for mouse

  012e1	83 7d fc 00	 cmp	 DWORD PTR _strafe$[ebp], 0
  012e5	75 34		 jne	 SHORT $LN120@G_BuildTic
  012e7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_analog+20, 0
  012ee	75 2b		 jne	 SHORT $LN120@G_BuildTic
  012f0	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  012fa	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR _players[eax+292], 0
  01301	75 18		 jne	 SHORT $LN120@G_BuildTic
  01303	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0130d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  01313	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  01319	74 10		 je	 SHORT $LN118@G_BuildTic
$LN120@G_BuildTic:

; 977  : 		side += mousex*2;

  0131b	a1 00 00 00 00	 mov	 eax, DWORD PTR _mousex
  01320	8b 4d f0	 mov	 ecx, DWORD PTR _side$[ebp]
  01323	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  01326	89 55 f0	 mov	 DWORD PTR _side$[ebp], edx
  01329	eb 19		 jmp	 SHORT $LN119@G_BuildTic
$LN118@G_BuildTic:

; 978  : 	else
; 979  : 		cmd->angleturn = (INT16)(cmd->angleturn - (mousex*8));

  0132b	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  0132e	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  01332	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _mousex
  01338	c1 e2 03	 shl	 edx, 3
  0133b	2b ca		 sub	 ecx, edx
  0133d	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  01340	66 89 48 02	 mov	 WORD PTR [eax+2], cx
$LN119@G_BuildTic:

; 980  : 
; 981  : 	mousex = mousey = mlooky = 0;

  01344	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mlooky, 0
  0134e	a1 00 00 00 00	 mov	 eax, DWORD PTR _mlooky
  01353	a3 00 00 00 00	 mov	 DWORD PTR _mousey, eax
  01358	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mousey
  0135e	89 0d 00 00 00
	00		 mov	 DWORD PTR _mousex, ecx

; 982  : 
; 983  : 	if (forward > MAXPLMOVE)

  01364	83 7d f4 32	 cmp	 DWORD PTR _forward$[ebp], 50 ; 00000032H
  01368	7e 09		 jle	 SHORT $LN121@G_BuildTic

; 984  : 		forward = MAXPLMOVE;

  0136a	c7 45 f4 32 00
	00 00		 mov	 DWORD PTR _forward$[ebp], 50 ; 00000032H
  01371	eb 0d		 jmp	 SHORT $LN123@G_BuildTic
$LN121@G_BuildTic:

; 985  : 	else if (forward < -MAXPLMOVE)

  01373	83 7d f4 ce	 cmp	 DWORD PTR _forward$[ebp], -50 ; ffffffceH
  01377	7d 07		 jge	 SHORT $LN123@G_BuildTic

; 986  : 		forward = -MAXPLMOVE;

  01379	c7 45 f4 ce ff
	ff ff		 mov	 DWORD PTR _forward$[ebp], -50 ; ffffffceH
$LN123@G_BuildTic:

; 987  : 	if (side > MAXPLMOVE)

  01380	83 7d f0 32	 cmp	 DWORD PTR _side$[ebp], 50 ; 00000032H
  01384	7e 09		 jle	 SHORT $LN124@G_BuildTic

; 988  : 		side = MAXPLMOVE;

  01386	c7 45 f0 32 00
	00 00		 mov	 DWORD PTR _side$[ebp], 50 ; 00000032H
  0138d	eb 0d		 jmp	 SHORT $LN126@G_BuildTic
$LN124@G_BuildTic:

; 989  : 	else if (side < -MAXPLMOVE)

  0138f	83 7d f0 ce	 cmp	 DWORD PTR _side$[ebp], -50 ; ffffffceH
  01393	7d 07		 jge	 SHORT $LN126@G_BuildTic

; 990  : 		side = -MAXPLMOVE;

  01395	c7 45 f0 ce ff
	ff ff		 mov	 DWORD PTR _side$[ebp], -50 ; ffffffceH
$LN126@G_BuildTic:

; 991  : 
; 992  : 	//Silly hack to make 2d mode *somewhat* playable with no chasecam.
; 993  : 	if ((twodlevel || (players[consoleplayer].mo && players[consoleplayer].mo->flags2 & MF2_TWOD)) && !cv_chasecam.value)

  0139c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  013a3	25 00 02 00 00	 and	 eax, 512		; 00000200H
  013a8	75 31		 jne	 SHORT $LN128@G_BuildTic
  013aa	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  013b4	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  013bb	74 39		 je	 SHORT $LN127@G_BuildTic
  013bd	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  013c7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  013cd	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  013d3	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  013d9	74 1b		 je	 SHORT $LN127@G_BuildTic
$LN128@G_BuildTic:
  013db	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  013e2	75 12		 jne	 SHORT $LN127@G_BuildTic

; 994  : 	{
; 995  : 		INT32 temp = forward;

  013e4	8b 45 f4	 mov	 eax, DWORD PTR _forward$[ebp]
  013e7	89 45 d0	 mov	 DWORD PTR _temp$1[ebp], eax

; 996  : 		forward = side;

  013ea	8b 45 f0	 mov	 eax, DWORD PTR _side$[ebp]
  013ed	89 45 f4	 mov	 DWORD PTR _forward$[ebp], eax

; 997  : 		side = temp;

  013f0	8b 45 d0	 mov	 eax, DWORD PTR _temp$1[ebp]
  013f3	89 45 f0	 mov	 DWORD PTR _side$[ebp], eax
$LN127@G_BuildTic:

; 998  : 	}
; 999  : 
; 1000 : 	cmd->forwardmove = (SINT8)(cmd->forwardmove + forward);

  013f6	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  013f9	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  013fc	03 4d f4	 add	 ecx, DWORD PTR _forward$[ebp]
  013ff	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  01402	88 0a		 mov	 BYTE PTR [edx], cl

; 1001 : 	cmd->sidemove = (SINT8)(cmd->sidemove + side);

  01404	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  01407	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0140b	03 4d f0	 add	 ecx, DWORD PTR _side$[ebp]
  0140e	8b 55 08	 mov	 edx, DWORD PTR _cmd$[ebp]
  01411	88 4a 01	 mov	 BYTE PTR [edx+1], cl

; 1002 : 
; 1003 : 	localangle += (cmd->angleturn<<16);

  01414	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  01417	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  0141b	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0141e	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _localangle
  01424	89 0d 00 00 00
	00		 mov	 DWORD PTR _localangle, ecx

; 1004 : 	cmd->angleturn = (INT16)(localangle >> 16);

  0142a	a1 00 00 00 00	 mov	 eax, DWORD PTR _localangle
  0142f	c1 e8 10	 shr	 eax, 16			; 00000010H
  01432	8b 4d 08	 mov	 ecx, DWORD PTR _cmd$[ebp]
  01435	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 1005 : 
; 1006 : 	//Reset away view if a command is given.
; 1007 : 	if ((cmd->forwardmove || cmd->sidemove || cmd->buttons)
; 1008 : 		&& displayplayer != consoleplayer)

  01439	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  0143c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0143f	85 c9		 test	 ecx, ecx
  01441	75 16		 jne	 SHORT $LN130@G_BuildTic
  01443	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  01446	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0144a	85 c9		 test	 ecx, ecx
  0144c	75 0b		 jne	 SHORT $LN130@G_BuildTic
  0144e	8b 45 08	 mov	 eax, DWORD PTR _cmd$[ebp]
  01451	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  01455	85 c9		 test	 ecx, ecx
  01457	74 17		 je	 SHORT $LN129@G_BuildTic
$LN130@G_BuildTic:
  01459	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  0145e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  01464	74 0a		 je	 SHORT $LN129@G_BuildTic

; 1009 : 		displayplayer = consoleplayer;

  01466	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  0146b	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax
$LN129@G_BuildTic:

; 1010 : }

  01470	5f		 pop	 edi
  01471	5e		 pop	 esi
  01472	5b		 pop	 ebx
  01473	8b e5		 mov	 esp, ebp
  01475	5d		 pop	 ebp
  01476	c3		 ret	 0
_G_BuildTiccmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\g_game.c
;	COMDAT _G_BuildMapName
_TEXT	SEGMENT
$T1 = -68						; size = 4
_map$ = 8						; size = 4
_G_BuildMapName PROC					; COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 464  : 	static char mapname[9] = "MAPXX"; // internal map name (wad resource name)
; 465  : 
; 466  : 	I_Assert(map > 0);
; 467  : 	I_Assert(map <= NUMMAPS);
; 468  : 
; 469  : 	if (map < 100)

  00009	83 7d 08 64	 cmp	 DWORD PTR _map$[ebp], 100 ; 00000064H
  0000d	7d 25		 jge	 SHORT $LN2@G_BuildMap

; 470  : 		sprintf(&mapname[3], "%.2d", map);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _map$[ebp]
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_04FGGPOPMG@?$CF?42d@
  00018	b9 01 00 00 00	 mov	 ecx, 1
  0001d	6b d1 03	 imul	 edx, ecx, 3
  00020	81 c2 00 00 00
	00		 add	 edx, OFFSET ?mapname@?1??G_BuildMapName@@9@9
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 _sprintf
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	e9 9e 00 00 00	 jmp	 $LN3@G_BuildMap
$LN2@G_BuildMap:

; 471  : 	else
; 472  : 	{
; 473  : 		mapname[3] = (char)('A' + (char)((map - 100) / 36));

  00034	8b 45 08	 mov	 eax, DWORD PTR _map$[ebp]
  00037	83 e8 64	 sub	 eax, 100		; 00000064H
  0003a	99		 cdq
  0003b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00040	f7 f9		 idiv	 ecx
  00042	0f be d0	 movsx	 edx, al
  00045	83 c2 41	 add	 edx, 65			; 00000041H
  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	6b c8 03	 imul	 ecx, eax, 3
  00050	88 91 00 00 00
	00		 mov	 BYTE PTR ?mapname@?1??G_BuildMapName@@9@9[ecx], dl

; 474  : 		if ((map - 100) % 36 < 10)

  00056	8b 45 08	 mov	 eax, DWORD PTR _map$[ebp]
  00059	83 e8 64	 sub	 eax, 100		; 00000064H
  0005c	99		 cdq
  0005d	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00062	f7 f9		 idiv	 ecx
  00064	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00067	7d 24		 jge	 SHORT $LN4@G_BuildMap

; 475  : 			mapname[4] = (char)('0' + (char)((map - 100) % 36));

  00069	8b 45 08	 mov	 eax, DWORD PTR _map$[ebp]
  0006c	83 e8 64	 sub	 eax, 100		; 00000064H
  0006f	99		 cdq
  00070	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00075	f7 f9		 idiv	 ecx
  00077	0f be d2	 movsx	 edx, dl
  0007a	83 c2 30	 add	 edx, 48			; 00000030H
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	c1 e0 02	 shl	 eax, 2
  00085	88 90 00 00 00
	00		 mov	 BYTE PTR ?mapname@?1??G_BuildMapName@@9@9[eax], dl
  0008b	eb 22		 jmp	 SHORT $LN5@G_BuildMap
$LN4@G_BuildMap:

; 476  : 		else
; 477  : 			mapname[4] = (char)('A' + (char)((map - 100) % 36) - 10);

  0008d	8b 45 08	 mov	 eax, DWORD PTR _map$[ebp]
  00090	83 e8 64	 sub	 eax, 100		; 00000064H
  00093	99		 cdq
  00094	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00099	f7 f9		 idiv	 ecx
  0009b	0f be d2	 movsx	 edx, dl
  0009e	83 c2 37	 add	 edx, 55			; 00000037H
  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	c1 e0 02	 shl	 eax, 2
  000a9	88 90 00 00 00
	00		 mov	 BYTE PTR ?mapname@?1??G_BuildMapName@@9@9[eax], dl
$LN5@G_BuildMap:

; 478  : 		mapname[5] = '\0';

  000af	b8 01 00 00 00	 mov	 eax, 1
  000b4	6b c8 05	 imul	 ecx, eax, 5
  000b7	89 4d bc	 mov	 DWORD PTR $T1[ebp], ecx
  000ba	83 7d bc 09	 cmp	 DWORD PTR $T1[ebp], 9
  000be	73 02		 jae	 SHORT $LN7@G_BuildMap
  000c0	eb 06		 jmp	 SHORT $LN8@G_BuildMap
$LN7@G_BuildMap:
  000c2	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000c7	90		 npad	 1
$LN8@G_BuildMap:
  000c8	8b 55 bc	 mov	 edx, DWORD PTR $T1[ebp]
  000cb	c6 82 00 00 00
	00 00		 mov	 BYTE PTR ?mapname@?1??G_BuildMapName@@9@9[edx], 0
$LN3@G_BuildMap:

; 479  : 	}
; 480  : 
; 481  : 	return mapname;

  000d2	b8 00 00 00 00	 mov	 eax, OFFSET ?mapname@?1??G_BuildMapName@@9@9
$LN1@G_BuildMap:

; 482  : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_G_BuildMapName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1779 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1780 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1458 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1460 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1397 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
