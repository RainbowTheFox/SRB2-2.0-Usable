; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\md5.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_fillbuf DB	080H
	DB	00H
	ORG $+62
CONST	ENDS
PUBLIC	_md5_stream
PUBLIC	_md5_buffer
EXTRN	_memcpy:PROC
EXTRN	_ferror:PROC
EXTRN	_fread:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	012f0H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	052H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	0128H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\md5.c
;	COMDAT _md5_finish_ctx
_TEXT	SEGMENT
tv86 = -76						; size = 4
_pad$ = -8						; size = 4
_bytes$ = -4						; size = 4
_ctx$ = 8						; size = 4
_resbuf$ = 12						; size = 4
_md5_finish_ctx PROC					; COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 322  :   /* Take yet unprocessed bytes into account.  */
; 323  :   md5_uint32 bytes = ctx->buflen;

  00009	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  0000c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0000f	89 4d fc	 mov	 DWORD PTR _bytes$[ebp], ecx

; 324  :   size_t pad;
; 325  : 
; 326  :   /* Now count remaining bytes.  */
; 327  :   ctx->total[0] += bytes;

  00012	b8 04 00 00 00	 mov	 eax, 4
  00017	6b c8 00	 imul	 ecx, eax, 0
  0001a	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  0001d	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00021	03 45 fc	 add	 eax, DWORD PTR _bytes$[ebp]
  00024	b9 04 00 00 00	 mov	 ecx, 4
  00029	6b d1 00	 imul	 edx, ecx, 0
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  0002f	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 328  :   if (ctx->total[0] < bytes)

  00033	b8 04 00 00 00	 mov	 eax, 4
  00038	6b c8 00	 imul	 ecx, eax, 0
  0003b	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  0003e	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00042	3b 45 fc	 cmp	 eax, DWORD PTR _bytes$[ebp]
  00045	73 21		 jae	 SHORT $LN2@md5_finish

; 329  :     ++ctx->total[1];

  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	c1 e0 00	 shl	 eax, 0
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  00052	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00056	83 c2 01	 add	 edx, 1
  00059	b8 04 00 00 00	 mov	 eax, 4
  0005e	c1 e0 00	 shl	 eax, 0
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  00064	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
$LN2@md5_finish:

; 330  : 
; 331  :   pad = bytes >= 56 ? 64 + 56 - bytes : 56 - bytes;

  00068	83 7d fc 38	 cmp	 DWORD PTR _bytes$[ebp], 56 ; 00000038H
  0006c	72 0d		 jb	 SHORT $LN4@md5_finish
  0006e	b8 78 00 00 00	 mov	 eax, 120		; 00000078H
  00073	2b 45 fc	 sub	 eax, DWORD PTR _bytes$[ebp]
  00076	89 45 b4	 mov	 DWORD PTR tv86[ebp], eax
  00079	eb 0b		 jmp	 SHORT $LN5@md5_finish
$LN4@md5_finish:
  0007b	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00080	2b 4d fc	 sub	 ecx, DWORD PTR _bytes$[ebp]
  00083	89 4d b4	 mov	 DWORD PTR tv86[ebp], ecx
$LN5@md5_finish:
  00086	8b 55 b4	 mov	 edx, DWORD PTR tv86[ebp]
  00089	89 55 f8	 mov	 DWORD PTR _pad$[ebp], edx

; 332  :   memcpy (&ctx->buffer[bytes], fillbuf, pad);

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _pad$[ebp]
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET _fillbuf
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _bytes$[ebp]
  00098	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  0009b	8d 44 0a 1c	 lea	 eax, DWORD PTR [edx+ecx+28]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 _memcpy
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 333  : 
; 334  :   /* Put the 64-bit file length in *bits* at the end of the buffer.  */
; 335  :   *(md5_uint32 *) &ctx->buffer[bytes + pad] = SWAP (ctx->total[0] << 3);

  000a8	b8 04 00 00 00	 mov	 eax, 4
  000ad	6b c8 00	 imul	 ecx, eax, 0
  000b0	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  000b3	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  000b7	c1 e0 03	 shl	 eax, 3
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _bytes$[ebp]
  000bd	03 4d f8	 add	 ecx, DWORD PTR _pad$[ebp]
  000c0	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  000c3	89 44 0a 1c	 mov	 DWORD PTR [edx+ecx+28], eax

; 336  :   *(md5_uint32 *) &ctx->buffer[bytes + pad + 4] = SWAP ((ctx->total[1] << 3) |

  000c7	b8 04 00 00 00	 mov	 eax, 4
  000cc	c1 e0 00	 shl	 eax, 0
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  000d2	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  000d6	c1 e2 03	 shl	 edx, 3
  000d9	b8 04 00 00 00	 mov	 eax, 4
  000de	6b c8 00	 imul	 ecx, eax, 0
  000e1	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  000e4	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  000e8	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  000eb	0b d1		 or	 edx, ecx
  000ed	8b 45 fc	 mov	 eax, DWORD PTR _bytes$[ebp]
  000f0	03 45 f8	 add	 eax, DWORD PTR _pad$[ebp]
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  000f6	89 54 01 20	 mov	 DWORD PTR [ecx+eax+32], edx

; 337  :                                                        (ctx->total[0] >> 29));
; 338  : 
; 339  :   /* Process last bytes.  */
; 340  :   md5_process_block (ctx->buffer, bytes + pad + 8, ctx);

  000fa	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _pad$[ebp]
  00101	8b 55 fc	 mov	 edx, DWORD PTR _bytes$[ebp]
  00104	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  00108	50		 push	 eax
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  0010c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 _md5_process_block
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 341  : 
; 342  :   return md5_read_ctx (ctx, resbuf);

  00118	8b 45 0c	 mov	 eax, DWORD PTR _resbuf$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 _md5_read_ctx
  00125	83 c4 08	 add	 esp, 8

; 343  : }

  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
_md5_finish_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\md5.c
;	COMDAT _md5_process_bytes
_TEXT	SEGMENT
tv70 = -76						; size = 4
_add$1 = -8						; size = 4
_left_over$2 = -4					; size = 4
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_ctx$ = 16						; size = 4
_md5_process_bytes PROC					; COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 275  :   /* When we already have some bits in our internal buffer concatenate
; 276  :      both inputs first.  */
; 277  :   if (ctx->buflen != 0)

  00009	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  0000c	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00010	0f 84 cc 00 00
	00		 je	 $LN2@md5_proces

; 278  :     {
; 279  :       size_t left_over = ctx->buflen;

  00016	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  00019	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001c	89 4d fc	 mov	 DWORD PTR _left_over$2[ebp], ecx

; 280  :       size_t add = 128 - left_over > len ? len : 128 - left_over;

  0001f	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00024	2b 45 fc	 sub	 eax, DWORD PTR _left_over$2[ebp]
  00027	3b 45 0c	 cmp	 eax, DWORD PTR _len$[ebp]
  0002a	76 08		 jbe	 SHORT $LN7@md5_proces
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
  0002f	89 4d b4	 mov	 DWORD PTR tv70[ebp], ecx
  00032	eb 0b		 jmp	 SHORT $LN8@md5_proces
$LN7@md5_proces:
  00034	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00039	2b 55 fc	 sub	 edx, DWORD PTR _left_over$2[ebp]
  0003c	89 55 b4	 mov	 DWORD PTR tv70[ebp], edx
$LN8@md5_proces:
  0003f	8b 45 b4	 mov	 eax, DWORD PTR tv70[ebp]
  00042	89 45 f8	 mov	 DWORD PTR _add$1[ebp], eax

; 281  : 
; 282  :       memcpy (&ctx->buffer[left_over], buffer, add);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _add$1[ebp]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0004c	51		 push	 ecx
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _left_over$2[ebp]
  00050	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  00053	8d 4c 10 1c	 lea	 ecx, DWORD PTR [eax+edx+28]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _memcpy
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 283  :       ctx->buflen = (md5_uint32)(add+ctx->buflen);

  00060	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _add$1[ebp]
  00066	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  00069	8b 55 10	 mov	 edx, DWORD PTR _ctx$[ebp]
  0006c	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 284  : 
; 285  :       if (left_over + add > 64)

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _left_over$2[ebp]
  00072	03 45 f8	 add	 eax, DWORD PTR _add$1[ebp]
  00075	83 f8 40	 cmp	 eax, 64			; 00000040H
  00078	76 56		 jbe	 SHORT $LN3@md5_proces

; 286  : 	{
; 287  : 	  md5_process_block (ctx->buffer, (left_over + add) & ~63, ctx);

  0007a	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _left_over$2[ebp]
  00081	03 4d f8	 add	 ecx, DWORD PTR _add$1[ebp]
  00084	83 e1 c0	 and	 ecx, -64		; ffffffc0H
  00087	51		 push	 ecx
  00088	8b 55 10	 mov	 edx, DWORD PTR _ctx$[ebp]
  0008b	83 c2 1c	 add	 edx, 28			; 0000001cH
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _md5_process_block
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH

; 288  : 	  /* The regions in the following copy operation cannot overlap.  */
; 289  : 	  memcpy (ctx->buffer, &ctx->buffer[(left_over + add) & ~63],

  00097	8b 45 fc	 mov	 eax, DWORD PTR _left_over$2[ebp]
  0009a	03 45 f8	 add	 eax, DWORD PTR _add$1[ebp]
  0009d	83 e0 3f	 and	 eax, 63			; 0000003fH
  000a0	50		 push	 eax
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _left_over$2[ebp]
  000a4	03 4d f8	 add	 ecx, DWORD PTR _add$1[ebp]
  000a7	83 e1 c0	 and	 ecx, -64		; ffffffc0H
  000aa	8b 55 10	 mov	 edx, DWORD PTR _ctx$[ebp]
  000ad	8d 44 0a 1c	 lea	 eax, DWORD PTR [edx+ecx+28]
  000b1	50		 push	 eax
  000b2	8b 4d 10	 mov	 ecx, DWORD PTR _ctx$[ebp]
  000b5	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 _memcpy
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 290  : 		  (left_over + add) & 63);
; 291  : 	  ctx->buflen = (md5_uint32)((left_over + add) & 63);

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _left_over$2[ebp]
  000c4	03 45 f8	 add	 eax, DWORD PTR _add$1[ebp]
  000c7	83 e0 3f	 and	 eax, 63			; 0000003fH
  000ca	8b 4d 10	 mov	 ecx, DWORD PTR _ctx$[ebp]
  000cd	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN3@md5_proces:

; 292  : 	}
; 293  : 
; 294  :       buffer = (const char *) buffer + add;

  000d0	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  000d3	03 45 f8	 add	 eax, DWORD PTR _add$1[ebp]
  000d6	89 45 08	 mov	 DWORD PTR _buffer$[ebp], eax

; 295  :       len -= add;

  000d9	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  000dc	2b 45 f8	 sub	 eax, DWORD PTR _add$1[ebp]
  000df	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax
$LN2@md5_proces:

; 296  :     }
; 297  : 
; 298  :   /* Process available complete blocks.  */
; 299  :   if (len > 64)

  000e2	83 7d 0c 40	 cmp	 DWORD PTR _len$[ebp], 64 ; 00000040H
  000e6	76 2c		 jbe	 SHORT $LN4@md5_proces

; 300  :     {
; 301  :       md5_process_block (buffer, len & ~63, ctx);

  000e8	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
  000ef	83 e1 c0	 and	 ecx, -64		; ffffffc0H
  000f2	51		 push	 ecx
  000f3	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _md5_process_block
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  :       buffer = (const char *) buffer + (len & ~63);

  000ff	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00102	83 e0 c0	 and	 eax, -64		; ffffffc0H
  00105	03 45 08	 add	 eax, DWORD PTR _buffer$[ebp]
  00108	89 45 08	 mov	 DWORD PTR _buffer$[ebp], eax

; 303  :       len &= 63;

  0010b	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0010e	83 e0 3f	 and	 eax, 63			; 0000003fH
  00111	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax
$LN4@md5_proces:

; 304  :     }
; 305  : 
; 306  :   /* Move remaining bytes in internal buffer.  */
; 307  :   if (len > 0)

  00114	83 7d 0c 00	 cmp	 DWORD PTR _len$[ebp], 0
  00118	76 20		 jbe	 SHORT $LN5@md5_proces

; 308  :     {
; 309  :       memcpy (ctx->buffer, buffer, len);

  0011a	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0011d	50		 push	 eax
  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00121	51		 push	 ecx
  00122	8b 55 10	 mov	 edx, DWORD PTR _ctx$[ebp]
  00125	83 c2 1c	 add	 edx, 28			; 0000001cH
  00128	52		 push	 edx
  00129	e8 00 00 00 00	 call	 _memcpy
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 310  :       ctx->buflen = (md5_uint32)len;

  00131	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  00134	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
  00137	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN5@md5_proces:

; 311  :     }
; 312  : }

  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
_md5_process_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\md5.c
;	COMDAT _md5_process_block
_TEXT	SEGMENT
_D_save$1 = -116					; size = 4
_C_save$2 = -112					; size = 4
_B_save$3 = -108					; size = 4
_A_save$4 = -104					; size = 4
_cwp$5 = -100						; size = 4
_D$ = -96						; size = 4
_C$ = -92						; size = 4
_B$ = -88						; size = 4
_A$ = -84						; size = 4
_endp$ = -80						; size = 4
_nwords$ = -76						; size = 4
_words$ = -72						; size = 4
_correct_words$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_ctx$ = 16						; size = 4
_md5_process_block PROC					; COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 120  :   md5_uint32 correct_words[16];
; 121  :   const md5_uint32 *words = buffer;

  00016	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00019	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax

; 122  :   size_t nwords = len / sizeof (md5_uint32);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0001f	c1 e8 02	 shr	 eax, 2
  00022	89 45 b4	 mov	 DWORD PTR _nwords$[ebp], eax

; 123  :   const md5_uint32 *endp = words + nwords;

  00025	8b 45 b4	 mov	 eax, DWORD PTR _nwords$[ebp]
  00028	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  0002b	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0002e	89 55 b0	 mov	 DWORD PTR _endp$[ebp], edx

; 124  :   md5_uint32 A = ctx->A;

  00031	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	89 4d ac	 mov	 DWORD PTR _A$[ebp], ecx

; 125  :   md5_uint32 B = ctx->B;

  00039	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	89 4d a8	 mov	 DWORD PTR _B$[ebp], ecx

; 126  :   md5_uint32 C = ctx->C;

  00042	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  00045	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00048	89 4d a4	 mov	 DWORD PTR _C$[ebp], ecx

; 127  :   md5_uint32 D = ctx->D;

  0004b	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  0004e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00051	89 4d a0	 mov	 DWORD PTR _D$[ebp], ecx

; 128  : 
; 129  :   /* First increment the byte count.  RFC 1321 specifies the possible
; 130  :      length of the file up to 2^64 bits.  Here we only compute the
; 131  :      number of bytes.  Do a double word increment.  */
; 132  :   ctx->total[0] = (md5_uint32)(len+ctx->total[0]);

  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	8b 55 10	 mov	 edx, DWORD PTR _ctx$[ebp]
  0005f	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00062	03 44 0a 10	 add	 eax, DWORD PTR [edx+ecx+16]
  00066	b9 04 00 00 00	 mov	 ecx, 4
  0006b	6b d1 00	 imul	 edx, ecx, 0
  0006e	8b 4d 10	 mov	 ecx, DWORD PTR _ctx$[ebp]
  00071	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 133  :   if (ctx->total[0] < len)

  00075	b8 04 00 00 00	 mov	 eax, 4
  0007a	6b c8 00	 imul	 ecx, eax, 0
  0007d	8b 55 10	 mov	 edx, DWORD PTR _ctx$[ebp]
  00080	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  00084	3b 45 0c	 cmp	 eax, DWORD PTR _len$[ebp]
  00087	73 21		 jae	 SHORT $LN196@md5_proces

; 134  :     ++ctx->total[1];

  00089	b8 04 00 00 00	 mov	 eax, 4
  0008e	c1 e0 00	 shl	 eax, 0
  00091	8b 4d 10	 mov	 ecx, DWORD PTR _ctx$[ebp]
  00094	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00098	83 c2 01	 add	 edx, 1
  0009b	b8 04 00 00 00	 mov	 eax, 4
  000a0	c1 e0 00	 shl	 eax, 0
  000a3	8b 4d 10	 mov	 ecx, DWORD PTR _ctx$[ebp]
  000a6	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
$LN196@md5_proces:

; 135  : 
; 136  :   /* Process all bytes in the buffer with 64 bytes in each round of
; 137  :      the loop.  */
; 138  :   while (words < endp)

  000aa	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  000ad	3b 45 b0	 cmp	 eax, DWORD PTR _endp$[ebp]
  000b0	0f 83 14 12 00
	00		 jae	 $LN3@md5_proces

; 139  :     {
; 140  :       md5_uint32 *cwp = correct_words;

  000b6	8d 45 bc	 lea	 eax, DWORD PTR _correct_words$[ebp]
  000b9	89 45 9c	 mov	 DWORD PTR _cwp$5[ebp], eax

; 141  :       md5_uint32 A_save = A;

  000bc	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  000bf	89 45 98	 mov	 DWORD PTR _A_save$4[ebp], eax

; 142  :       md5_uint32 B_save = B;

  000c2	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  000c5	89 45 94	 mov	 DWORD PTR _B_save$3[ebp], eax

; 143  :       md5_uint32 C_save = C;

  000c8	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  000cb	89 45 90	 mov	 DWORD PTR _C_save$2[ebp], eax

; 144  :       md5_uint32 D_save = D;

  000ce	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  000d1	89 45 8c	 mov	 DWORD PTR _D_save$1[ebp], eax
$LN6@md5_proces:

; 145  : 
; 146  :       /* First round: using the given function, the context and a constant
; 147  : 	 the next context is computed.  Because the algorithms processing
; 148  : 	 unit is a 32-bit word and it is determined to work on words in
; 149  : 	 little endian byte order we perhaps have to change the byte order
; 150  : 	 before the computation.  To reduce the work for the next steps
; 151  : 	 we store the swapped words in the array CORRECT_WORDS.  */
; 152  : 
; 153  : #define OP(a, b, c, d, s, T)						\
; 154  :       do								\
; 155  :         {								\
; 156  : 	  a += FF (b, c, d) + (*cwp++ = SWAP (*words)) + T;		\
; 157  : 	  ++words;							\
; 158  : 	  CYCLIC (a, s);						\
; 159  : 	  a += b;							\
; 160  :         }								\
; 161  :       while (0)
; 162  : 
; 163  :       /* It is unfortunate that C does not provide an operator for
; 164  : 	 cyclic rotation.  Hope the C compiler is smart enough.  */
; 165  : #define CYCLIC(w, s) (w = (w << s) | (w >> (32 - s)))
; 166  : 
; 167  :       /* Before we start, one word to the strange constants.
; 168  : 	 They are defined in RFC 1321 as
; 169  : 
; 170  : 	 T[i] = (int) (4294967296.0 * fabs (sin (i))), i = 1..64
; 171  :        */
; 172  : 
; 173  :       /* Round 1.  */
; 174  :       OP (A, B, C, D,  7, 0xd76aa478);

  000d4	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  000d7	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 10		 mov	 DWORD PTR [eax], edx
  000de	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  000e1	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  000e4	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  000e7	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  000ea	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  000ed	03 01		 add	 eax, DWORD PTR [ecx]
  000ef	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  000f2	8d 84 02 78 a4
	6a d7		 lea	 eax, DWORD PTR [edx+eax-680876936]
  000f9	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  000fc	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  000ff	83 c1 04	 add	 ecx, 4
  00102	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  00105	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00108	83 c0 04	 add	 eax, 4
  0010b	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  0010e	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00111	c1 e0 07	 shl	 eax, 7
  00114	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00117	c1 e9 19	 shr	 ecx, 25			; 00000019H
  0011a	0b c1		 or	 eax, ecx
  0011c	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  0011f	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00122	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00125	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00128	33 c0		 xor	 eax, eax
  0012a	75 a8		 jne	 SHORT $LN6@md5_proces
$LN5@md5_proces:

; 175  :       OP (D, A, B, C, 12, 0xe8c7b756);

  0012c	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  0012f	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  00132	8b 11		 mov	 edx, DWORD PTR [ecx]
  00134	89 10		 mov	 DWORD PTR [eax], edx
  00136	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00139	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  0013c	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  0013f	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00142	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00145	03 01		 add	 eax, DWORD PTR [ecx]
  00147	8b 55 a0	 mov	 edx, DWORD PTR _D$[ebp]
  0014a	8d 84 02 56 b7
	c7 e8		 lea	 eax, DWORD PTR [edx+eax-389564586]
  00151	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00154	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00157	83 c1 04	 add	 ecx, 4
  0015a	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  0015d	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00160	83 c0 04	 add	 eax, 4
  00163	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  00166	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00169	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0016c	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  0016f	c1 e9 14	 shr	 ecx, 20			; 00000014H
  00172	0b c1		 or	 eax, ecx
  00174	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00177	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  0017a	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  0017d	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00180	33 c0		 xor	 eax, eax
  00182	75 a8		 jne	 SHORT $LN5@md5_proces
$LN8@md5_proces:

; 176  :       OP (C, D, A, B, 17, 0x242070db);

  00184	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  00187	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  0018a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0018c	89 10		 mov	 DWORD PTR [eax], edx
  0018e	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00191	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00194	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  00197	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  0019a	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0019d	03 01		 add	 eax, DWORD PTR [ecx]
  0019f	8b 55 a4	 mov	 edx, DWORD PTR _C$[ebp]
  001a2	8d 84 02 db 70
	20 24		 lea	 eax, DWORD PTR [edx+eax+606105819]
  001a9	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  001ac	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  001af	83 c1 04	 add	 ecx, 4
  001b2	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  001b5	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  001b8	83 c0 04	 add	 eax, 4
  001bb	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  001be	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  001c1	c1 e0 11	 shl	 eax, 17			; 00000011H
  001c4	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  001c7	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  001ca	0b c1		 or	 eax, ecx
  001cc	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  001cf	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  001d2	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  001d5	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  001d8	33 c0		 xor	 eax, eax
  001da	75 a8		 jne	 SHORT $LN8@md5_proces
$LN11@md5_proces:

; 177  :       OP (B, C, D, A, 22, 0xc1bdceee);

  001dc	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  001df	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  001e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e4	89 10		 mov	 DWORD PTR [eax], edx
  001e6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  001e9	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  001ec	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  001ef	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  001f2	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  001f5	03 01		 add	 eax, DWORD PTR [ecx]
  001f7	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  001fa	8d 84 02 ee ce
	bd c1		 lea	 eax, DWORD PTR [edx+eax-1044525330]
  00201	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00204	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00207	83 c1 04	 add	 ecx, 4
  0020a	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  0020d	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00210	83 c0 04	 add	 eax, 4
  00213	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  00216	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00219	c1 e0 16	 shl	 eax, 22			; 00000016H
  0021c	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  0021f	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00222	0b c1		 or	 eax, ecx
  00224	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00227	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0022a	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  0022d	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00230	33 c0		 xor	 eax, eax
  00232	75 a8		 jne	 SHORT $LN11@md5_proces
$LN14@md5_proces:

; 178  :       OP (A, B, C, D,  7, 0xf57c0faf);

  00234	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  00237	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  0023a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0023c	89 10		 mov	 DWORD PTR [eax], edx
  0023e	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00241	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00244	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  00247	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  0024a	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0024d	03 01		 add	 eax, DWORD PTR [ecx]
  0024f	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  00252	8d 84 02 af 0f
	7c f5		 lea	 eax, DWORD PTR [edx+eax-176418897]
  00259	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  0025c	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0025f	83 c1 04	 add	 ecx, 4
  00262	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  00265	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00268	83 c0 04	 add	 eax, 4
  0026b	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  0026e	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00271	c1 e0 07	 shl	 eax, 7
  00274	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00277	c1 e9 19	 shr	 ecx, 25			; 00000019H
  0027a	0b c1		 or	 eax, ecx
  0027c	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  0027f	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00282	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00285	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00288	33 c0		 xor	 eax, eax
  0028a	75 a8		 jne	 SHORT $LN14@md5_proces
$LN17@md5_proces:

; 179  :       OP (D, A, B, C, 12, 0x4787c62a);

  0028c	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  0028f	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  00292	8b 11		 mov	 edx, DWORD PTR [ecx]
  00294	89 10		 mov	 DWORD PTR [eax], edx
  00296	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00299	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  0029c	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  0029f	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  002a2	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  002a5	03 01		 add	 eax, DWORD PTR [ecx]
  002a7	8b 55 a0	 mov	 edx, DWORD PTR _D$[ebp]
  002aa	8d 84 02 2a c6
	87 47		 lea	 eax, DWORD PTR [edx+eax+1200080426]
  002b1	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  002b4	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  002b7	83 c1 04	 add	 ecx, 4
  002ba	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  002bd	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  002c0	83 c0 04	 add	 eax, 4
  002c3	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  002c6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  002c9	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  002cc	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  002cf	c1 e9 14	 shr	 ecx, 20			; 00000014H
  002d2	0b c1		 or	 eax, ecx
  002d4	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  002d7	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  002da	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  002dd	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  002e0	33 c0		 xor	 eax, eax
  002e2	75 a8		 jne	 SHORT $LN17@md5_proces
$LN20@md5_proces:

; 180  :       OP (C, D, A, B, 17, 0xa8304613);

  002e4	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  002e7	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  002ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ec	89 10		 mov	 DWORD PTR [eax], edx
  002ee	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  002f1	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  002f4	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  002f7	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  002fa	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  002fd	03 01		 add	 eax, DWORD PTR [ecx]
  002ff	8b 55 a4	 mov	 edx, DWORD PTR _C$[ebp]
  00302	8d 84 02 13 46
	30 a8		 lea	 eax, DWORD PTR [edx+eax-1473231341]
  00309	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0030c	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0030f	83 c1 04	 add	 ecx, 4
  00312	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  00315	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00318	83 c0 04	 add	 eax, 4
  0031b	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  0031e	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00321	c1 e0 11	 shl	 eax, 17			; 00000011H
  00324	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00327	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  0032a	0b c1		 or	 eax, ecx
  0032c	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0032f	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00332	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00335	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00338	33 c0		 xor	 eax, eax
  0033a	75 a8		 jne	 SHORT $LN20@md5_proces
$LN23@md5_proces:

; 181  :       OP (B, C, D, A, 22, 0xfd469501);

  0033c	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  0033f	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  00342	8b 11		 mov	 edx, DWORD PTR [ecx]
  00344	89 10		 mov	 DWORD PTR [eax], edx
  00346	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00349	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  0034c	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  0034f	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00352	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00355	03 01		 add	 eax, DWORD PTR [ecx]
  00357	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  0035a	8d 84 02 01 95
	46 fd		 lea	 eax, DWORD PTR [edx+eax-45705983]
  00361	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00364	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00367	83 c1 04	 add	 ecx, 4
  0036a	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  0036d	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00370	83 c0 04	 add	 eax, 4
  00373	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  00376	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00379	c1 e0 16	 shl	 eax, 22			; 00000016H
  0037c	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  0037f	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00382	0b c1		 or	 eax, ecx
  00384	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00387	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0038a	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  0038d	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00390	33 c0		 xor	 eax, eax
  00392	75 a8		 jne	 SHORT $LN23@md5_proces
$LN26@md5_proces:

; 182  :       OP (A, B, C, D,  7, 0x698098d8);

  00394	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  00397	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  0039a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0039c	89 10		 mov	 DWORD PTR [eax], edx
  0039e	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  003a1	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  003a4	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  003a7	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  003aa	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  003ad	03 01		 add	 eax, DWORD PTR [ecx]
  003af	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  003b2	8d 84 02 d8 98
	80 69		 lea	 eax, DWORD PTR [edx+eax+1770035416]
  003b9	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  003bc	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  003bf	83 c1 04	 add	 ecx, 4
  003c2	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  003c5	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  003c8	83 c0 04	 add	 eax, 4
  003cb	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  003ce	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  003d1	c1 e0 07	 shl	 eax, 7
  003d4	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  003d7	c1 e9 19	 shr	 ecx, 25			; 00000019H
  003da	0b c1		 or	 eax, ecx
  003dc	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  003df	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  003e2	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  003e5	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  003e8	33 c0		 xor	 eax, eax
  003ea	75 a8		 jne	 SHORT $LN26@md5_proces
$LN29@md5_proces:

; 183  :       OP (D, A, B, C, 12, 0x8b44f7af);

  003ec	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  003ef	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  003f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f4	89 10		 mov	 DWORD PTR [eax], edx
  003f6	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  003f9	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  003fc	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  003ff	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00402	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00405	03 01		 add	 eax, DWORD PTR [ecx]
  00407	8b 55 a0	 mov	 edx, DWORD PTR _D$[ebp]
  0040a	8d 84 02 af f7
	44 8b		 lea	 eax, DWORD PTR [edx+eax-1958414417]
  00411	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00414	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00417	83 c1 04	 add	 ecx, 4
  0041a	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  0041d	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00420	83 c0 04	 add	 eax, 4
  00423	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  00426	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00429	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0042c	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  0042f	c1 e9 14	 shr	 ecx, 20			; 00000014H
  00432	0b c1		 or	 eax, ecx
  00434	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00437	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  0043a	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  0043d	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00440	33 c0		 xor	 eax, eax
  00442	75 a8		 jne	 SHORT $LN29@md5_proces
$LN32@md5_proces:

; 184  :       OP (C, D, A, B, 17, 0xffff5bb1);

  00444	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  00447	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  0044a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0044c	89 10		 mov	 DWORD PTR [eax], edx
  0044e	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00451	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00454	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  00457	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  0045a	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0045d	03 01		 add	 eax, DWORD PTR [ecx]
  0045f	8b 55 a4	 mov	 edx, DWORD PTR _C$[ebp]
  00462	8d 84 02 b1 5b
	ff ff		 lea	 eax, DWORD PTR [edx+eax-42063]
  00469	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0046c	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0046f	83 c1 04	 add	 ecx, 4
  00472	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  00475	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00478	83 c0 04	 add	 eax, 4
  0047b	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  0047e	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00481	c1 e0 11	 shl	 eax, 17			; 00000011H
  00484	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00487	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  0048a	0b c1		 or	 eax, ecx
  0048c	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0048f	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00492	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00495	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00498	33 c0		 xor	 eax, eax
  0049a	75 a8		 jne	 SHORT $LN32@md5_proces
$LN35@md5_proces:

; 185  :       OP (B, C, D, A, 22, 0x895cd7be);

  0049c	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  0049f	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  004a2	8b 11		 mov	 edx, DWORD PTR [ecx]
  004a4	89 10		 mov	 DWORD PTR [eax], edx
  004a6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  004a9	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  004ac	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  004af	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  004b2	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  004b5	03 01		 add	 eax, DWORD PTR [ecx]
  004b7	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  004ba	8d 84 02 be d7
	5c 89		 lea	 eax, DWORD PTR [edx+eax-1990404162]
  004c1	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  004c4	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  004c7	83 c1 04	 add	 ecx, 4
  004ca	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  004cd	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  004d0	83 c0 04	 add	 eax, 4
  004d3	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  004d6	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  004d9	c1 e0 16	 shl	 eax, 22			; 00000016H
  004dc	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  004df	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  004e2	0b c1		 or	 eax, ecx
  004e4	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  004e7	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  004ea	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  004ed	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  004f0	33 c0		 xor	 eax, eax
  004f2	75 a8		 jne	 SHORT $LN35@md5_proces
$LN38@md5_proces:

; 186  :       OP (A, B, C, D,  7, 0x6b901122);

  004f4	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  004f7	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  004fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  004fc	89 10		 mov	 DWORD PTR [eax], edx
  004fe	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00501	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00504	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  00507	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  0050a	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0050d	03 01		 add	 eax, DWORD PTR [ecx]
  0050f	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  00512	8d 84 02 22 11
	90 6b		 lea	 eax, DWORD PTR [edx+eax+1804603682]
  00519	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  0051c	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  0051f	83 c1 04	 add	 ecx, 4
  00522	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  00525	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00528	83 c0 04	 add	 eax, 4
  0052b	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  0052e	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00531	c1 e0 07	 shl	 eax, 7
  00534	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00537	c1 e9 19	 shr	 ecx, 25			; 00000019H
  0053a	0b c1		 or	 eax, ecx
  0053c	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  0053f	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00542	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00545	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00548	33 c0		 xor	 eax, eax
  0054a	75 a8		 jne	 SHORT $LN38@md5_proces
$LN41@md5_proces:

; 187  :       OP (D, A, B, C, 12, 0xfd987193);

  0054c	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  0054f	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  00552	8b 11		 mov	 edx, DWORD PTR [ecx]
  00554	89 10		 mov	 DWORD PTR [eax], edx
  00556	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00559	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  0055c	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  0055f	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00562	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00565	03 01		 add	 eax, DWORD PTR [ecx]
  00567	8b 55 a0	 mov	 edx, DWORD PTR _D$[ebp]
  0056a	8d 84 02 93 71
	98 fd		 lea	 eax, DWORD PTR [edx+eax-40341101]
  00571	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00574	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00577	83 c1 04	 add	 ecx, 4
  0057a	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  0057d	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00580	83 c0 04	 add	 eax, 4
  00583	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  00586	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00589	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0058c	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  0058f	c1 e9 14	 shr	 ecx, 20			; 00000014H
  00592	0b c1		 or	 eax, ecx
  00594	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00597	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  0059a	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  0059d	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  005a0	33 c0		 xor	 eax, eax
  005a2	75 a8		 jne	 SHORT $LN41@md5_proces
$LN44@md5_proces:

; 188  :       OP (C, D, A, B, 17, 0xa679438e);

  005a4	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  005a7	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  005aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  005ac	89 10		 mov	 DWORD PTR [eax], edx
  005ae	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  005b1	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  005b4	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  005b7	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  005ba	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  005bd	03 01		 add	 eax, DWORD PTR [ecx]
  005bf	8b 55 a4	 mov	 edx, DWORD PTR _C$[ebp]
  005c2	8d 84 02 8e 43
	79 a6		 lea	 eax, DWORD PTR [edx+eax-1502002290]
  005c9	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  005cc	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  005cf	83 c1 04	 add	 ecx, 4
  005d2	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  005d5	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  005d8	83 c0 04	 add	 eax, 4
  005db	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  005de	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  005e1	c1 e0 11	 shl	 eax, 17			; 00000011H
  005e4	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  005e7	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  005ea	0b c1		 or	 eax, ecx
  005ec	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  005ef	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  005f2	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  005f5	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  005f8	33 c0		 xor	 eax, eax
  005fa	75 a8		 jne	 SHORT $LN44@md5_proces
$LN47@md5_proces:

; 189  :       OP (B, C, D, A, 22, 0x49b40821);

  005fc	8b 45 9c	 mov	 eax, DWORD PTR _cwp$5[ebp]
  005ff	8b 4d b8	 mov	 ecx, DWORD PTR _words$[ebp]
  00602	8b 11		 mov	 edx, DWORD PTR [ecx]
  00604	89 10		 mov	 DWORD PTR [eax], edx
  00606	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00609	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  0060c	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  0060f	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00612	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00615	03 01		 add	 eax, DWORD PTR [ecx]
  00617	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  0061a	8d 84 02 21 08
	b4 49		 lea	 eax, DWORD PTR [edx+eax+1236535329]
  00621	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00624	8b 4d 9c	 mov	 ecx, DWORD PTR _cwp$5[ebp]
  00627	83 c1 04	 add	 ecx, 4
  0062a	89 4d 9c	 mov	 DWORD PTR _cwp$5[ebp], ecx
  0062d	8b 45 b8	 mov	 eax, DWORD PTR _words$[ebp]
  00630	83 c0 04	 add	 eax, 4
  00633	89 45 b8	 mov	 DWORD PTR _words$[ebp], eax
  00636	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00639	c1 e0 16	 shl	 eax, 22			; 00000016H
  0063c	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  0063f	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00642	0b c1		 or	 eax, ecx
  00644	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00647	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0064a	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  0064d	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00650	33 c0		 xor	 eax, eax
  00652	75 a8		 jne	 SHORT $LN47@md5_proces
$LN50@md5_proces:

; 190  : 
; 191  :       /* For the second to fourth round we have the possibly swapped words
; 192  : 	 in CORRECT_WORDS.  Redefine the macro to take an additional first
; 193  : 	 argument specifying the function to use.  */
; 194  : #undef OP
; 195  : #define OP(f, a, b, c, d, k, s, T)               \
; 196  : 	do                                           \
; 197  : 	{                                            \
; 198  : 		a += f (b, c, d) + correct_words[k] + T; \
; 199  : 		CYCLIC (a, s);                           \
; 200  : 		a += b;                                  \
; 201  : 	}                                            \
; 202  :       while (0)
; 203  : 
; 204  :       /* Round 2.  */
; 205  :       OP (FG, A, B, C, D,  1,  5, 0xf61e2562);

  00654	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00657	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  0065a	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  0065d	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00660	b9 04 00 00 00	 mov	 ecx, 4
  00665	c1 e1 00	 shl	 ecx, 0
  00668	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  0066c	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  0066f	8d 84 02 62 25
	1e f6		 lea	 eax, DWORD PTR [edx+eax-165796510]
  00676	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00679	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  0067c	c1 e0 05	 shl	 eax, 5
  0067f	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00682	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  00685	0b c1		 or	 eax, ecx
  00687	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  0068a	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  0068d	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00690	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00693	33 c0		 xor	 eax, eax
  00695	75 bd		 jne	 SHORT $LN50@md5_proces
$LN53@md5_proces:

; 206  :       OP (FG, D, A, B, C,  6,  9, 0xc040b340);

  00697	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  0069a	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  0069d	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  006a0	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  006a3	b9 04 00 00 00	 mov	 ecx, 4
  006a8	6b d1 06	 imul	 edx, ecx, 6
  006ab	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  006af	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  006b2	8d 94 01 40 b3
	40 c0		 lea	 edx, DWORD PTR [ecx+eax-1069501632]
  006b9	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  006bc	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  006bf	c1 e0 09	 shl	 eax, 9
  006c2	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  006c5	c1 e9 17	 shr	 ecx, 23			; 00000017H
  006c8	0b c1		 or	 eax, ecx
  006ca	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  006cd	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  006d0	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  006d3	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  006d6	33 c0		 xor	 eax, eax
  006d8	75 bd		 jne	 SHORT $LN53@md5_proces
$LN56@md5_proces:

; 207  :       OP (FG, C, D, A, B, 11, 14, 0x265e5a51);

  006da	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  006dd	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  006e0	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  006e3	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  006e6	b9 04 00 00 00	 mov	 ecx, 4
  006eb	6b d1 0b	 imul	 edx, ecx, 11
  006ee	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  006f2	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  006f5	8d 94 01 51 5a
	5e 26		 lea	 edx, DWORD PTR [ecx+eax+643717713]
  006fc	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  006ff	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00702	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00705	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00708	c1 e9 12	 shr	 ecx, 18			; 00000012H
  0070b	0b c1		 or	 eax, ecx
  0070d	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00710	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00713	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00716	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00719	33 c0		 xor	 eax, eax
  0071b	75 bd		 jne	 SHORT $LN56@md5_proces
$LN59@md5_proces:

; 208  :       OP (FG, B, C, D, A,  0, 20, 0xe9b6c7aa);

  0071d	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00720	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00723	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  00726	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00729	b9 04 00 00 00	 mov	 ecx, 4
  0072e	6b d1 00	 imul	 edx, ecx, 0
  00731	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00735	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00738	8d 94 01 aa c7
	b6 e9		 lea	 edx, DWORD PTR [ecx+eax-373897302]
  0073f	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  00742	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00745	c1 e0 14	 shl	 eax, 20			; 00000014H
  00748	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  0074b	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  0074e	0b c1		 or	 eax, ecx
  00750	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00753	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00756	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00759	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0075c	33 c0		 xor	 eax, eax
  0075e	75 bd		 jne	 SHORT $LN59@md5_proces
$LN62@md5_proces:

; 209  :       OP (FG, A, B, C, D,  5,  5, 0xd62f105d);

  00760	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00763	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00766	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  00769	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  0076c	b9 04 00 00 00	 mov	 ecx, 4
  00771	6b d1 05	 imul	 edx, ecx, 5
  00774	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00778	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  0077b	8d 94 01 5d 10
	2f d6		 lea	 edx, DWORD PTR [ecx+eax-701558691]
  00782	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  00785	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00788	c1 e0 05	 shl	 eax, 5
  0078b	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  0078e	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  00791	0b c1		 or	 eax, ecx
  00793	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00796	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00799	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  0079c	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  0079f	33 c0		 xor	 eax, eax
  007a1	75 bd		 jne	 SHORT $LN62@md5_proces
$LN65@md5_proces:

; 210  :       OP (FG, D, A, B, C, 10,  9, 0x02441453);

  007a3	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  007a6	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  007a9	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  007ac	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  007af	b9 04 00 00 00	 mov	 ecx, 4
  007b4	6b d1 0a	 imul	 edx, ecx, 10
  007b7	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  007bb	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  007be	8d 94 01 53 14
	44 02		 lea	 edx, DWORD PTR [ecx+eax+38016083]
  007c5	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  007c8	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  007cb	c1 e0 09	 shl	 eax, 9
  007ce	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  007d1	c1 e9 17	 shr	 ecx, 23			; 00000017H
  007d4	0b c1		 or	 eax, ecx
  007d6	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  007d9	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  007dc	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  007df	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  007e2	33 c0		 xor	 eax, eax
  007e4	75 bd		 jne	 SHORT $LN65@md5_proces
$LN68@md5_proces:

; 211  :       OP (FG, C, D, A, B, 15, 14, 0xd8a1e681);

  007e6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  007e9	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  007ec	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  007ef	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  007f2	b9 04 00 00 00	 mov	 ecx, 4
  007f7	6b d1 0f	 imul	 edx, ecx, 15
  007fa	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  007fe	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00801	8d 94 01 81 e6
	a1 d8		 lea	 edx, DWORD PTR [ecx+eax-660478335]
  00808	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  0080b	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  0080e	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00811	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00814	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00817	0b c1		 or	 eax, ecx
  00819	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0081c	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  0081f	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00822	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00825	33 c0		 xor	 eax, eax
  00827	75 bd		 jne	 SHORT $LN68@md5_proces
$LN71@md5_proces:

; 212  :       OP (FG, B, C, D, A,  4, 20, 0xe7d3fbc8);

  00829	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  0082c	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  0082f	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  00832	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00835	b9 04 00 00 00	 mov	 ecx, 4
  0083a	c1 e1 02	 shl	 ecx, 2
  0083d	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  00841	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  00844	8d 84 02 c8 fb
	d3 e7		 lea	 eax, DWORD PTR [edx+eax-405537848]
  0084b	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0084e	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00851	c1 e0 14	 shl	 eax, 20			; 00000014H
  00854	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00857	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  0085a	0b c1		 or	 eax, ecx
  0085c	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0085f	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00862	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00865	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00868	33 c0		 xor	 eax, eax
  0086a	75 bd		 jne	 SHORT $LN71@md5_proces
$LN74@md5_proces:

; 213  :       OP (FG, A, B, C, D,  9,  5, 0x21e1cde6);

  0086c	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0086f	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00872	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  00875	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00878	b9 04 00 00 00	 mov	 ecx, 4
  0087d	6b d1 09	 imul	 edx, ecx, 9
  00880	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00884	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00887	8d 94 01 e6 cd
	e1 21		 lea	 edx, DWORD PTR [ecx+eax+568446438]
  0088e	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  00891	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00894	c1 e0 05	 shl	 eax, 5
  00897	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  0089a	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  0089d	0b c1		 or	 eax, ecx
  0089f	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  008a2	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  008a5	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  008a8	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  008ab	33 c0		 xor	 eax, eax
  008ad	75 bd		 jne	 SHORT $LN74@md5_proces
$LN77@md5_proces:

; 214  :       OP (FG, D, A, B, C, 14,  9, 0xc33707d6);

  008af	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  008b2	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  008b5	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  008b8	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  008bb	b9 04 00 00 00	 mov	 ecx, 4
  008c0	6b d1 0e	 imul	 edx, ecx, 14
  008c3	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  008c7	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  008ca	8d 94 01 d6 07
	37 c3		 lea	 edx, DWORD PTR [ecx+eax-1019803690]
  008d1	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  008d4	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  008d7	c1 e0 09	 shl	 eax, 9
  008da	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  008dd	c1 e9 17	 shr	 ecx, 23			; 00000017H
  008e0	0b c1		 or	 eax, ecx
  008e2	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  008e5	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  008e8	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  008eb	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  008ee	33 c0		 xor	 eax, eax
  008f0	75 bd		 jne	 SHORT $LN77@md5_proces
$LN80@md5_proces:

; 215  :       OP (FG, C, D, A, B,  3, 14, 0xf4d50d87);

  008f2	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  008f5	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  008f8	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  008fb	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  008fe	b9 04 00 00 00	 mov	 ecx, 4
  00903	6b d1 03	 imul	 edx, ecx, 3
  00906	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  0090a	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  0090d	8d 94 01 87 0d
	d5 f4		 lea	 edx, DWORD PTR [ecx+eax-187363961]
  00914	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  00917	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  0091a	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0091d	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00920	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00923	0b c1		 or	 eax, ecx
  00925	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00928	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  0092b	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  0092e	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00931	33 c0		 xor	 eax, eax
  00933	75 bd		 jne	 SHORT $LN80@md5_proces
$LN83@md5_proces:

; 216  :       OP (FG, B, C, D, A,  8, 20, 0x455a14ed);

  00935	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00938	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  0093b	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  0093e	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00941	b9 04 00 00 00	 mov	 ecx, 4
  00946	c1 e1 03	 shl	 ecx, 3
  00949	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  0094d	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  00950	8d 84 02 ed 14
	5a 45		 lea	 eax, DWORD PTR [edx+eax+1163531501]
  00957	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0095a	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0095d	c1 e0 14	 shl	 eax, 20			; 00000014H
  00960	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00963	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00966	0b c1		 or	 eax, ecx
  00968	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0096b	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0096e	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00971	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00974	33 c0		 xor	 eax, eax
  00976	75 bd		 jne	 SHORT $LN83@md5_proces
$LN86@md5_proces:

; 217  :       OP (FG, A, B, C, D, 13,  5, 0xa9e3e905);

  00978	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0097b	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  0097e	23 45 a0	 and	 eax, DWORD PTR _D$[ebp]
  00981	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00984	b9 04 00 00 00	 mov	 ecx, 4
  00989	6b d1 0d	 imul	 edx, ecx, 13
  0098c	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00990	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00993	8d 94 01 05 e9
	e3 a9		 lea	 edx, DWORD PTR [ecx+eax-1444681467]
  0099a	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  0099d	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  009a0	c1 e0 05	 shl	 eax, 5
  009a3	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  009a6	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  009a9	0b c1		 or	 eax, ecx
  009ab	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  009ae	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  009b1	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  009b4	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  009b7	33 c0		 xor	 eax, eax
  009b9	75 bd		 jne	 SHORT $LN86@md5_proces
$LN89@md5_proces:

; 218  :       OP (FG, D, A, B, C,  2,  9, 0xfcefa3f8);

  009bb	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  009be	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  009c1	23 45 a4	 and	 eax, DWORD PTR _C$[ebp]
  009c4	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  009c7	b9 04 00 00 00	 mov	 ecx, 4
  009cc	d1 e1		 shl	 ecx, 1
  009ce	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  009d2	8b 55 a0	 mov	 edx, DWORD PTR _D$[ebp]
  009d5	8d 84 02 f8 a3
	ef fc		 lea	 eax, DWORD PTR [edx+eax-51403784]
  009dc	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  009df	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  009e2	c1 e0 09	 shl	 eax, 9
  009e5	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  009e8	c1 e9 17	 shr	 ecx, 23			; 00000017H
  009eb	0b c1		 or	 eax, ecx
  009ed	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  009f0	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  009f3	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  009f6	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  009f9	33 c0		 xor	 eax, eax
  009fb	75 be		 jne	 SHORT $LN89@md5_proces
$LN92@md5_proces:

; 219  :       OP (FG, C, D, A, B,  7, 14, 0x676f02d9);

  009fd	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00a00	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00a03	23 45 a8	 and	 eax, DWORD PTR _B$[ebp]
  00a06	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00a09	b9 04 00 00 00	 mov	 ecx, 4
  00a0e	6b d1 07	 imul	 edx, ecx, 7
  00a11	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00a15	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00a18	8d 94 01 d9 02
	6f 67		 lea	 edx, DWORD PTR [ecx+eax+1735328473]
  00a1f	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  00a22	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00a25	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00a28	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00a2b	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00a2e	0b c1		 or	 eax, ecx
  00a30	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00a33	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00a36	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00a39	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00a3c	33 c0		 xor	 eax, eax
  00a3e	75 bd		 jne	 SHORT $LN92@md5_proces
$LN95@md5_proces:

; 220  :       OP (FG, B, C, D, A, 12, 20, 0x8d2a4c8a);

  00a40	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00a43	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00a46	23 45 ac	 and	 eax, DWORD PTR _A$[ebp]
  00a49	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00a4c	b9 04 00 00 00	 mov	 ecx, 4
  00a51	6b d1 0c	 imul	 edx, ecx, 12
  00a54	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00a58	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00a5b	8d 94 01 8a 4c
	2a 8d		 lea	 edx, DWORD PTR [ecx+eax-1926607734]
  00a62	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  00a65	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00a68	c1 e0 14	 shl	 eax, 20			; 00000014H
  00a6b	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00a6e	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00a71	0b c1		 or	 eax, ecx
  00a73	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00a76	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00a79	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00a7c	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00a7f	33 c0		 xor	 eax, eax
  00a81	75 bd		 jne	 SHORT $LN95@md5_proces
$LN98@md5_proces:

; 221  : 
; 222  :       /* Round 3.  */
; 223  :       OP (FH, A, B, C, D,  5,  4, 0xfffa3942);

  00a83	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00a86	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00a89	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00a8c	b9 04 00 00 00	 mov	 ecx, 4
  00a91	6b d1 05	 imul	 edx, ecx, 5
  00a94	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00a98	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00a9b	8d 94 01 42 39
	fa ff		 lea	 edx, DWORD PTR [ecx+eax-378558]
  00aa2	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  00aa5	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00aa8	c1 e0 04	 shl	 eax, 4
  00aab	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00aae	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00ab1	0b c1		 or	 eax, ecx
  00ab3	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00ab6	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00ab9	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00abc	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00abf	33 c0		 xor	 eax, eax
  00ac1	75 c0		 jne	 SHORT $LN98@md5_proces
$LN101@md5_proces:

; 224  :       OP (FH, D, A, B, C,  8, 11, 0x8771f681);

  00ac3	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00ac6	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00ac9	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00acc	b9 04 00 00 00	 mov	 ecx, 4
  00ad1	c1 e1 03	 shl	 ecx, 3
  00ad4	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  00ad8	8b 55 a0	 mov	 edx, DWORD PTR _D$[ebp]
  00adb	8d 84 02 81 f6
	71 87		 lea	 eax, DWORD PTR [edx+eax-2022574463]
  00ae2	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00ae5	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00ae8	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00aeb	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00aee	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00af1	0b c1		 or	 eax, ecx
  00af3	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00af6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00af9	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  00afc	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00aff	33 c0		 xor	 eax, eax
  00b01	75 c0		 jne	 SHORT $LN101@md5_proces
$LN104@md5_proces:

; 225  :       OP (FH, C, D, A, B, 11, 16, 0x6d9d6122);

  00b03	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00b06	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00b09	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00b0c	b9 04 00 00 00	 mov	 ecx, 4
  00b11	6b d1 0b	 imul	 edx, ecx, 11
  00b14	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00b18	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00b1b	8d 94 01 22 61
	9d 6d		 lea	 edx, DWORD PTR [ecx+eax+1839030562]
  00b22	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  00b25	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00b28	c1 e0 10	 shl	 eax, 16			; 00000010H
  00b2b	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00b2e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b31	0b c1		 or	 eax, ecx
  00b33	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00b36	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00b39	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00b3c	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00b3f	33 c0		 xor	 eax, eax
  00b41	75 c0		 jne	 SHORT $LN104@md5_proces
$LN107@md5_proces:

; 226  :       OP (FH, B, C, D, A, 14, 23, 0xfde5380c);

  00b43	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00b46	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00b49	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00b4c	b9 04 00 00 00	 mov	 ecx, 4
  00b51	6b d1 0e	 imul	 edx, ecx, 14
  00b54	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00b58	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00b5b	8d 94 01 0c 38
	e5 fd		 lea	 edx, DWORD PTR [ecx+eax-35309556]
  00b62	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  00b65	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00b68	c1 e0 17	 shl	 eax, 23			; 00000017H
  00b6b	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00b6e	c1 e9 09	 shr	 ecx, 9
  00b71	0b c1		 or	 eax, ecx
  00b73	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00b76	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00b79	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00b7c	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00b7f	33 c0		 xor	 eax, eax
  00b81	75 c0		 jne	 SHORT $LN107@md5_proces
$LN110@md5_proces:

; 227  :       OP (FH, A, B, C, D,  1,  4, 0xa4beea44);

  00b83	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00b86	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00b89	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00b8c	b9 04 00 00 00	 mov	 ecx, 4
  00b91	c1 e1 00	 shl	 ecx, 0
  00b94	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  00b98	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  00b9b	8d 84 02 44 ea
	be a4		 lea	 eax, DWORD PTR [edx+eax-1530992060]
  00ba2	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00ba5	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00ba8	c1 e0 04	 shl	 eax, 4
  00bab	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00bae	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00bb1	0b c1		 or	 eax, ecx
  00bb3	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00bb6	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00bb9	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00bbc	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00bbf	33 c0		 xor	 eax, eax
  00bc1	75 c0		 jne	 SHORT $LN110@md5_proces
$LN113@md5_proces:

; 228  :       OP (FH, D, A, B, C,  4, 11, 0x4bdecfa9);

  00bc3	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00bc6	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00bc9	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00bcc	b9 04 00 00 00	 mov	 ecx, 4
  00bd1	c1 e1 02	 shl	 ecx, 2
  00bd4	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  00bd8	8b 55 a0	 mov	 edx, DWORD PTR _D$[ebp]
  00bdb	8d 84 02 a9 cf
	de 4b		 lea	 eax, DWORD PTR [edx+eax+1272893353]
  00be2	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00be5	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00be8	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00beb	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00bee	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00bf1	0b c1		 or	 eax, ecx
  00bf3	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00bf6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00bf9	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  00bfc	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00bff	33 c0		 xor	 eax, eax
  00c01	75 c0		 jne	 SHORT $LN113@md5_proces
$LN116@md5_proces:

; 229  :       OP (FH, C, D, A, B,  7, 16, 0xf6bb4b60);

  00c03	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00c06	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00c09	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00c0c	b9 04 00 00 00	 mov	 ecx, 4
  00c11	6b d1 07	 imul	 edx, ecx, 7
  00c14	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00c18	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00c1b	8d 94 01 60 4b
	bb f6		 lea	 edx, DWORD PTR [ecx+eax-155497632]
  00c22	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  00c25	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00c28	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c2b	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00c2e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c31	0b c1		 or	 eax, ecx
  00c33	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00c36	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00c39	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00c3c	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00c3f	33 c0		 xor	 eax, eax
  00c41	75 c0		 jne	 SHORT $LN116@md5_proces
$LN119@md5_proces:

; 230  :       OP (FH, B, C, D, A, 10, 23, 0xbebfbc70);

  00c43	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00c46	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00c49	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00c4c	b9 04 00 00 00	 mov	 ecx, 4
  00c51	6b d1 0a	 imul	 edx, ecx, 10
  00c54	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00c58	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00c5b	8d 94 01 70 bc
	bf be		 lea	 edx, DWORD PTR [ecx+eax-1094730640]
  00c62	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  00c65	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00c68	c1 e0 17	 shl	 eax, 23			; 00000017H
  00c6b	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00c6e	c1 e9 09	 shr	 ecx, 9
  00c71	0b c1		 or	 eax, ecx
  00c73	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00c76	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00c79	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00c7c	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00c7f	33 c0		 xor	 eax, eax
  00c81	75 c0		 jne	 SHORT $LN119@md5_proces
$LN122@md5_proces:

; 231  :       OP (FH, A, B, C, D, 13,  4, 0x289b7ec6);

  00c83	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00c86	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00c89	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00c8c	b9 04 00 00 00	 mov	 ecx, 4
  00c91	6b d1 0d	 imul	 edx, ecx, 13
  00c94	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00c98	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00c9b	8d 94 01 c6 7e
	9b 28		 lea	 edx, DWORD PTR [ecx+eax+681279174]
  00ca2	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  00ca5	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00ca8	c1 e0 04	 shl	 eax, 4
  00cab	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00cae	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00cb1	0b c1		 or	 eax, ecx
  00cb3	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00cb6	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00cb9	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00cbc	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00cbf	33 c0		 xor	 eax, eax
  00cc1	75 c0		 jne	 SHORT $LN122@md5_proces
$LN125@md5_proces:

; 232  :       OP (FH, D, A, B, C,  0, 11, 0xeaa127fa);

  00cc3	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00cc6	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00cc9	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00ccc	b9 04 00 00 00	 mov	 ecx, 4
  00cd1	6b d1 00	 imul	 edx, ecx, 0
  00cd4	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00cd8	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00cdb	8d 94 01 fa 27
	a1 ea		 lea	 edx, DWORD PTR [ecx+eax-358537222]
  00ce2	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  00ce5	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00ce8	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00ceb	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00cee	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00cf1	0b c1		 or	 eax, ecx
  00cf3	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00cf6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00cf9	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  00cfc	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00cff	33 c0		 xor	 eax, eax
  00d01	75 c0		 jne	 SHORT $LN125@md5_proces
$LN128@md5_proces:

; 233  :       OP (FH, C, D, A, B,  3, 16, 0xd4ef3085);

  00d03	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00d06	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00d09	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00d0c	b9 04 00 00 00	 mov	 ecx, 4
  00d11	6b d1 03	 imul	 edx, ecx, 3
  00d14	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00d18	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00d1b	8d 94 01 85 30
	ef d4		 lea	 edx, DWORD PTR [ecx+eax-722521979]
  00d22	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  00d25	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00d28	c1 e0 10	 shl	 eax, 16			; 00000010H
  00d2b	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00d2e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00d31	0b c1		 or	 eax, ecx
  00d33	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00d36	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00d39	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00d3c	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00d3f	33 c0		 xor	 eax, eax
  00d41	75 c0		 jne	 SHORT $LN128@md5_proces
$LN131@md5_proces:

; 234  :       OP (FH, B, C, D, A,  6, 23, 0x04881d05);

  00d43	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00d46	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00d49	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00d4c	b9 04 00 00 00	 mov	 ecx, 4
  00d51	6b d1 06	 imul	 edx, ecx, 6
  00d54	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00d58	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00d5b	8d 94 01 05 1d
	88 04		 lea	 edx, DWORD PTR [ecx+eax+76029189]
  00d62	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  00d65	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00d68	c1 e0 17	 shl	 eax, 23			; 00000017H
  00d6b	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00d6e	c1 e9 09	 shr	 ecx, 9
  00d71	0b c1		 or	 eax, ecx
  00d73	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00d76	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00d79	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00d7c	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00d7f	33 c0		 xor	 eax, eax
  00d81	75 c0		 jne	 SHORT $LN131@md5_proces
$LN134@md5_proces:

; 235  :       OP (FH, A, B, C, D,  9,  4, 0xd9d4d039);

  00d83	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00d86	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00d89	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00d8c	b9 04 00 00 00	 mov	 ecx, 4
  00d91	6b d1 09	 imul	 edx, ecx, 9
  00d94	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00d98	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00d9b	8d 94 01 39 d0
	d4 d9		 lea	 edx, DWORD PTR [ecx+eax-640364487]
  00da2	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  00da5	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00da8	c1 e0 04	 shl	 eax, 4
  00dab	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00dae	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00db1	0b c1		 or	 eax, ecx
  00db3	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00db6	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00db9	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00dbc	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00dbf	33 c0		 xor	 eax, eax
  00dc1	75 c0		 jne	 SHORT $LN134@md5_proces
$LN137@md5_proces:

; 236  :       OP (FH, D, A, B, C, 12, 11, 0xe6db99e5);

  00dc3	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00dc6	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00dc9	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00dcc	b9 04 00 00 00	 mov	 ecx, 4
  00dd1	6b d1 0c	 imul	 edx, ecx, 12
  00dd4	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00dd8	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00ddb	8d 94 01 e5 99
	db e6		 lea	 edx, DWORD PTR [ecx+eax-421815835]
  00de2	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  00de5	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00de8	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00deb	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00dee	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00df1	0b c1		 or	 eax, ecx
  00df3	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00df6	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00df9	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  00dfc	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00dff	33 c0		 xor	 eax, eax
  00e01	75 c0		 jne	 SHORT $LN137@md5_proces
$LN140@md5_proces:

; 237  :       OP (FH, C, D, A, B, 15, 16, 0x1fa27cf8);

  00e03	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00e06	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00e09	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00e0c	b9 04 00 00 00	 mov	 ecx, 4
  00e11	6b d1 0f	 imul	 edx, ecx, 15
  00e14	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00e18	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00e1b	8d 94 01 f8 7c
	a2 1f		 lea	 edx, DWORD PTR [ecx+eax+530742520]
  00e22	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  00e25	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00e28	c1 e0 10	 shl	 eax, 16			; 00000010H
  00e2b	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00e2e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00e31	0b c1		 or	 eax, ecx
  00e33	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00e36	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00e39	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00e3c	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00e3f	33 c0		 xor	 eax, eax
  00e41	75 c0		 jne	 SHORT $LN140@md5_proces
$LN143@md5_proces:

; 238  :       OP (FH, B, C, D, A,  2, 23, 0xc4ac5665);

  00e43	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00e46	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00e49	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00e4c	b9 04 00 00 00	 mov	 ecx, 4
  00e51	d1 e1		 shl	 ecx, 1
  00e53	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  00e57	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  00e5a	8d 84 02 65 56
	ac c4		 lea	 eax, DWORD PTR [edx+eax-995338651]
  00e61	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00e64	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00e67	c1 e0 17	 shl	 eax, 23			; 00000017H
  00e6a	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00e6d	c1 e9 09	 shr	 ecx, 9
  00e70	0b c1		 or	 eax, ecx
  00e72	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00e75	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00e78	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00e7b	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00e7e	33 c0		 xor	 eax, eax
  00e80	75 c1		 jne	 SHORT $LN143@md5_proces
$LN146@md5_proces:

; 239  : 
; 240  :       /* Round 4.  */
; 241  :       OP (FI, A, B, C, D,  0,  6, 0xf4292244);

  00e82	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00e85	f7 d0		 not	 eax
  00e87	0b 45 a8	 or	 eax, DWORD PTR _B$[ebp]
  00e8a	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00e8d	b9 04 00 00 00	 mov	 ecx, 4
  00e92	6b d1 00	 imul	 edx, ecx, 0
  00e95	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00e99	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00e9c	8d 94 01 44 22
	29 f4		 lea	 edx, DWORD PTR [ecx+eax-198630844]
  00ea3	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  00ea6	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00ea9	c1 e0 06	 shl	 eax, 6
  00eac	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00eaf	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00eb2	0b c1		 or	 eax, ecx
  00eb4	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00eb7	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00eba	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00ebd	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00ec0	33 c0		 xor	 eax, eax
  00ec2	75 be		 jne	 SHORT $LN146@md5_proces
$LN149@md5_proces:

; 242  :       OP (FI, D, A, B, C,  7, 10, 0x432aff97);

  00ec4	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00ec7	f7 d0		 not	 eax
  00ec9	0b 45 ac	 or	 eax, DWORD PTR _A$[ebp]
  00ecc	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00ecf	b9 04 00 00 00	 mov	 ecx, 4
  00ed4	6b d1 07	 imul	 edx, ecx, 7
  00ed7	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00edb	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00ede	8d 94 01 97 ff
	2a 43		 lea	 edx, DWORD PTR [ecx+eax+1126891415]
  00ee5	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  00ee8	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00eeb	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00eee	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00ef1	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00ef4	0b c1		 or	 eax, ecx
  00ef6	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00ef9	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00efc	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  00eff	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  00f02	33 c0		 xor	 eax, eax
  00f04	75 be		 jne	 SHORT $LN149@md5_proces
$LN152@md5_proces:

; 243  :       OP (FI, C, D, A, B, 14, 15, 0xab9423a7);

  00f06	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00f09	f7 d0		 not	 eax
  00f0b	0b 45 a0	 or	 eax, DWORD PTR _D$[ebp]
  00f0e	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  00f11	b9 04 00 00 00	 mov	 ecx, 4
  00f16	6b d1 0e	 imul	 edx, ecx, 14
  00f19	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00f1d	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00f20	8d 94 01 a7 23
	94 ab		 lea	 edx, DWORD PTR [ecx+eax-1416354905]
  00f27	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  00f2a	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00f2d	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00f30	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  00f33	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00f36	0b c1		 or	 eax, ecx
  00f38	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00f3b	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00f3e	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  00f41	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  00f44	33 c0		 xor	 eax, eax
  00f46	75 be		 jne	 SHORT $LN152@md5_proces
$LN155@md5_proces:

; 244  :       OP (FI, B, C, D, A,  5, 21, 0xfc93a039);

  00f48	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00f4b	f7 d0		 not	 eax
  00f4d	0b 45 a4	 or	 eax, DWORD PTR _C$[ebp]
  00f50	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  00f53	b9 04 00 00 00	 mov	 ecx, 4
  00f58	6b d1 05	 imul	 edx, ecx, 5
  00f5b	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00f5f	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00f62	8d 94 01 39 a0
	93 fc		 lea	 edx, DWORD PTR [ecx+eax-57434055]
  00f69	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  00f6c	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00f6f	c1 e0 15	 shl	 eax, 21			; 00000015H
  00f72	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  00f75	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00f78	0b c1		 or	 eax, ecx
  00f7a	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00f7d	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  00f80	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  00f83	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  00f86	33 c0		 xor	 eax, eax
  00f88	75 be		 jne	 SHORT $LN155@md5_proces
$LN158@md5_proces:

; 245  :       OP (FI, A, B, C, D, 12,  6, 0x655b59c3);

  00f8a	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00f8d	f7 d0		 not	 eax
  00f8f	0b 45 a8	 or	 eax, DWORD PTR _B$[ebp]
  00f92	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  00f95	b9 04 00 00 00	 mov	 ecx, 4
  00f9a	6b d1 0c	 imul	 edx, ecx, 12
  00f9d	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00fa1	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00fa4	8d 94 01 c3 59
	5b 65		 lea	 edx, DWORD PTR [ecx+eax+1700485571]
  00fab	89 55 ac	 mov	 DWORD PTR _A$[ebp], edx
  00fae	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00fb1	c1 e0 06	 shl	 eax, 6
  00fb4	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  00fb7	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00fba	0b c1		 or	 eax, ecx
  00fbc	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00fbf	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  00fc2	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  00fc5	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  00fc8	33 c0		 xor	 eax, eax
  00fca	75 be		 jne	 SHORT $LN158@md5_proces
$LN161@md5_proces:

; 246  :       OP (FI, D, A, B, C,  3, 10, 0x8f0ccc92);

  00fcc	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  00fcf	f7 d0		 not	 eax
  00fd1	0b 45 ac	 or	 eax, DWORD PTR _A$[ebp]
  00fd4	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  00fd7	b9 04 00 00 00	 mov	 ecx, 4
  00fdc	6b d1 03	 imul	 edx, ecx, 3
  00fdf	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  00fe3	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00fe6	8d 94 01 92 cc
	0c 8f		 lea	 edx, DWORD PTR [ecx+eax-1894986606]
  00fed	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  00ff0	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  00ff3	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00ff6	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  00ff9	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00ffc	0b c1		 or	 eax, ecx
  00ffe	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  01001	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  01004	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  01007	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  0100a	33 c0		 xor	 eax, eax
  0100c	75 be		 jne	 SHORT $LN161@md5_proces
$LN164@md5_proces:

; 247  :       OP (FI, C, D, A, B, 10, 15, 0xffeff47d);

  0100e	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01011	f7 d0		 not	 eax
  01013	0b 45 a0	 or	 eax, DWORD PTR _D$[ebp]
  01016	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  01019	b9 04 00 00 00	 mov	 ecx, 4
  0101e	6b d1 0a	 imul	 edx, ecx, 10
  01021	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  01025	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  01028	8d 94 01 7d f4
	ef ff		 lea	 edx, DWORD PTR [ecx+eax-1051523]
  0102f	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  01032	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  01035	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  01038	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  0103b	c1 e9 11	 shr	 ecx, 17			; 00000011H
  0103e	0b c1		 or	 eax, ecx
  01040	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  01043	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  01046	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  01049	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0104c	33 c0		 xor	 eax, eax
  0104e	75 be		 jne	 SHORT $LN164@md5_proces
$LN167@md5_proces:

; 248  :       OP (FI, B, C, D, A,  1, 21, 0x85845dd1);

  01050	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  01053	f7 d0		 not	 eax
  01055	0b 45 a4	 or	 eax, DWORD PTR _C$[ebp]
  01058	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  0105b	b9 04 00 00 00	 mov	 ecx, 4
  01060	c1 e1 00	 shl	 ecx, 0
  01063	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  01067	8b 55 a8	 mov	 edx, DWORD PTR _B$[ebp]
  0106a	8d 84 02 d1 5d
	84 85		 lea	 eax, DWORD PTR [edx+eax-2054922799]
  01071	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  01074	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01077	c1 e0 15	 shl	 eax, 21			; 00000015H
  0107a	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  0107d	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  01080	0b c1		 or	 eax, ecx
  01082	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  01085	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01088	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  0108b	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0108e	33 c0		 xor	 eax, eax
  01090	75 be		 jne	 SHORT $LN167@md5_proces
$LN170@md5_proces:

; 249  :       OP (FI, A, B, C, D,  8,  6, 0x6fa87e4f);

  01092	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  01095	f7 d0		 not	 eax
  01097	0b 45 a8	 or	 eax, DWORD PTR _B$[ebp]
  0109a	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  0109d	b9 04 00 00 00	 mov	 ecx, 4
  010a2	c1 e1 03	 shl	 ecx, 3
  010a5	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  010a9	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  010ac	8d 84 02 4f 7e
	a8 6f		 lea	 eax, DWORD PTR [edx+eax+1873313359]
  010b3	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  010b6	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  010b9	c1 e0 06	 shl	 eax, 6
  010bc	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  010bf	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  010c2	0b c1		 or	 eax, ecx
  010c4	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  010c7	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  010ca	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  010cd	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  010d0	33 c0		 xor	 eax, eax
  010d2	75 be		 jne	 SHORT $LN170@md5_proces
$LN173@md5_proces:

; 250  :       OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);

  010d4	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  010d7	f7 d0		 not	 eax
  010d9	0b 45 ac	 or	 eax, DWORD PTR _A$[ebp]
  010dc	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  010df	b9 04 00 00 00	 mov	 ecx, 4
  010e4	6b d1 0f	 imul	 edx, ecx, 15
  010e7	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  010eb	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  010ee	8d 94 01 e0 e6
	2c fe		 lea	 edx, DWORD PTR [ecx+eax-30611744]
  010f5	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  010f8	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  010fb	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  010fe	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  01101	c1 e9 16	 shr	 ecx, 22			; 00000016H
  01104	0b c1		 or	 eax, ecx
  01106	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  01109	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  0110c	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  0110f	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  01112	33 c0		 xor	 eax, eax
  01114	75 be		 jne	 SHORT $LN173@md5_proces
$LN176@md5_proces:

; 251  :       OP (FI, C, D, A, B,  6, 15, 0xa3014314);

  01116	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01119	f7 d0		 not	 eax
  0111b	0b 45 a0	 or	 eax, DWORD PTR _D$[ebp]
  0111e	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  01121	b9 04 00 00 00	 mov	 ecx, 4
  01126	6b d1 06	 imul	 edx, ecx, 6
  01129	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  0112d	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  01130	8d 94 01 14 43
	01 a3		 lea	 edx, DWORD PTR [ecx+eax-1560198380]
  01137	89 55 a4	 mov	 DWORD PTR _C$[ebp], edx
  0113a	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  0113d	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  01140	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  01143	c1 e9 11	 shr	 ecx, 17			; 00000011H
  01146	0b c1		 or	 eax, ecx
  01148	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0114b	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  0114e	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  01151	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  01154	33 c0		 xor	 eax, eax
  01156	75 be		 jne	 SHORT $LN176@md5_proces
$LN179@md5_proces:

; 252  :       OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);

  01158	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  0115b	f7 d0		 not	 eax
  0115d	0b 45 a4	 or	 eax, DWORD PTR _C$[ebp]
  01160	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  01163	b9 04 00 00 00	 mov	 ecx, 4
  01168	6b d1 0d	 imul	 edx, ecx, 13
  0116b	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  0116f	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  01172	8d 94 01 a1 11
	08 4e		 lea	 edx, DWORD PTR [ecx+eax+1309151649]
  01179	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  0117c	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  0117f	c1 e0 15	 shl	 eax, 21			; 00000015H
  01182	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  01185	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  01188	0b c1		 or	 eax, ecx
  0118a	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0118d	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01190	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  01193	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  01196	33 c0		 xor	 eax, eax
  01198	75 be		 jne	 SHORT $LN179@md5_proces
$LN182@md5_proces:

; 253  :       OP (FI, A, B, C, D,  4,  6, 0xf7537e82);

  0119a	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  0119d	f7 d0		 not	 eax
  0119f	0b 45 a8	 or	 eax, DWORD PTR _B$[ebp]
  011a2	33 45 a4	 xor	 eax, DWORD PTR _C$[ebp]
  011a5	b9 04 00 00 00	 mov	 ecx, 4
  011aa	c1 e1 02	 shl	 ecx, 2
  011ad	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  011b1	8b 55 ac	 mov	 edx, DWORD PTR _A$[ebp]
  011b4	8d 84 02 82 7e
	53 f7		 lea	 eax, DWORD PTR [edx+eax-145523070]
  011bb	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  011be	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  011c1	c1 e0 06	 shl	 eax, 6
  011c4	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  011c7	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  011ca	0b c1		 or	 eax, ecx
  011cc	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  011cf	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  011d2	03 45 a8	 add	 eax, DWORD PTR _B$[ebp]
  011d5	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax
  011d8	33 c0		 xor	 eax, eax
  011da	75 be		 jne	 SHORT $LN182@md5_proces
$LN185@md5_proces:

; 254  :       OP (FI, D, A, B, C, 11, 10, 0xbd3af235);

  011dc	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  011df	f7 d0		 not	 eax
  011e1	0b 45 ac	 or	 eax, DWORD PTR _A$[ebp]
  011e4	33 45 a8	 xor	 eax, DWORD PTR _B$[ebp]
  011e7	b9 04 00 00 00	 mov	 ecx, 4
  011ec	6b d1 0b	 imul	 edx, ecx, 11
  011ef	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  011f3	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  011f6	8d 94 01 35 f2
	3a bd		 lea	 edx, DWORD PTR [ecx+eax-1120210379]
  011fd	89 55 a0	 mov	 DWORD PTR _D$[ebp], edx
  01200	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  01203	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  01206	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  01209	c1 e9 16	 shr	 ecx, 22			; 00000016H
  0120c	0b c1		 or	 eax, ecx
  0120e	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  01211	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  01214	03 45 ac	 add	 eax, DWORD PTR _A$[ebp]
  01217	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax
  0121a	33 c0		 xor	 eax, eax
  0121c	75 be		 jne	 SHORT $LN185@md5_proces
$LN188@md5_proces:

; 255  :       OP (FI, C, D, A, B,  2, 15, 0x2ad7d2bb);

  0121e	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01221	f7 d0		 not	 eax
  01223	0b 45 a0	 or	 eax, DWORD PTR _D$[ebp]
  01226	33 45 ac	 xor	 eax, DWORD PTR _A$[ebp]
  01229	b9 04 00 00 00	 mov	 ecx, 4
  0122e	d1 e1		 shl	 ecx, 1
  01230	03 44 0d bc	 add	 eax, DWORD PTR _correct_words$[ebp+ecx]
  01234	8b 55 a4	 mov	 edx, DWORD PTR _C$[ebp]
  01237	8d 84 02 bb d2
	d7 2a		 lea	 eax, DWORD PTR [edx+eax+718787259]
  0123e	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  01241	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  01244	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  01247	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  0124a	c1 e9 11	 shr	 ecx, 17			; 00000011H
  0124d	0b c1		 or	 eax, ecx
  0124f	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  01252	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  01255	03 45 a0	 add	 eax, DWORD PTR _D$[ebp]
  01258	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax
  0125b	33 c0		 xor	 eax, eax
  0125d	75 bf		 jne	 SHORT $LN188@md5_proces
$LN191@md5_proces:

; 256  :       OP (FI, B, C, D, A,  9, 21, 0xeb86d391);

  0125f	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  01262	f7 d0		 not	 eax
  01264	0b 45 a4	 or	 eax, DWORD PTR _C$[ebp]
  01267	33 45 a0	 xor	 eax, DWORD PTR _D$[ebp]
  0126a	b9 04 00 00 00	 mov	 ecx, 4
  0126f	6b d1 09	 imul	 edx, ecx, 9
  01272	03 44 15 bc	 add	 eax, DWORD PTR _correct_words$[ebp+edx]
  01276	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  01279	8d 94 01 91 d3
	86 eb		 lea	 edx, DWORD PTR [ecx+eax-343485551]
  01280	89 55 a8	 mov	 DWORD PTR _B$[ebp], edx
  01283	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01286	c1 e0 15	 shl	 eax, 21			; 00000015H
  01289	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  0128c	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0128f	0b c1		 or	 eax, ecx
  01291	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  01294	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  01297	03 45 a4	 add	 eax, DWORD PTR _C$[ebp]
  0129a	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax
  0129d	33 c0		 xor	 eax, eax
  0129f	75 be		 jne	 SHORT $LN191@md5_proces

; 257  : 
; 258  :       /* Add the starting values of the context.  */
; 259  :       A += A_save;

  012a1	8b 45 ac	 mov	 eax, DWORD PTR _A$[ebp]
  012a4	03 45 98	 add	 eax, DWORD PTR _A_save$4[ebp]
  012a7	89 45 ac	 mov	 DWORD PTR _A$[ebp], eax

; 260  :       B += B_save;

  012aa	8b 45 a8	 mov	 eax, DWORD PTR _B$[ebp]
  012ad	03 45 94	 add	 eax, DWORD PTR _B_save$3[ebp]
  012b0	89 45 a8	 mov	 DWORD PTR _B$[ebp], eax

; 261  :       C += C_save;

  012b3	8b 45 a4	 mov	 eax, DWORD PTR _C$[ebp]
  012b6	03 45 90	 add	 eax, DWORD PTR _C_save$2[ebp]
  012b9	89 45 a4	 mov	 DWORD PTR _C$[ebp], eax

; 262  :       D += D_save;

  012bc	8b 45 a0	 mov	 eax, DWORD PTR _D$[ebp]
  012bf	03 45 8c	 add	 eax, DWORD PTR _D_save$1[ebp]
  012c2	89 45 a0	 mov	 DWORD PTR _D$[ebp], eax

; 263  :     }

  012c5	e9 e0 ed ff ff	 jmp	 $LN196@md5_proces
$LN3@md5_proces:

; 264  : 
; 265  :   /* Put checksum in context given as argument.  */
; 266  :   ctx->A = A;

  012ca	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  012cd	8b 4d ac	 mov	 ecx, DWORD PTR _A$[ebp]
  012d0	89 08		 mov	 DWORD PTR [eax], ecx

; 267  :   ctx->B = B;

  012d2	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  012d5	8b 4d a8	 mov	 ecx, DWORD PTR _B$[ebp]
  012d8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 268  :   ctx->C = C;

  012db	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  012de	8b 4d a4	 mov	 ecx, DWORD PTR _C$[ebp]
  012e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 269  :   ctx->D = D;

  012e4	8b 45 10	 mov	 eax, DWORD PTR _ctx$[ebp]
  012e7	8b 4d a0	 mov	 ecx, DWORD PTR _D$[ebp]
  012ea	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 270  : }

  012ed	5f		 pop	 edi
  012ee	5e		 pop	 esi
  012ef	5b		 pop	 ebx
  012f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  012f3	33 cd		 xor	 ecx, ebp
  012f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  012fa	8b e5		 mov	 esp, ebp
  012fc	5d		 pop	 ebp
  012fd	c3		 ret	 0
_md5_process_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\md5.c
;	COMDAT _md5_read_ctx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_resbuf$ = 12						; size = 4
_md5_read_ctx PROC					; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   :   ((md5_uint32 *) resbuf)[0] = SWAP (ctx->A);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 0c	 mov	 edx, DWORD PTR _resbuf$[ebp]
  00014	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 99   :   ((md5_uint32 *) resbuf)[1] = SWAP (ctx->B);

  0001c	b8 04 00 00 00	 mov	 eax, 4
  00021	c1 e0 00	 shl	 eax, 0
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _resbuf$[ebp]
  00027	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  0002a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0002d	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 100  :   ((md5_uint32 *) resbuf)[2] = SWAP (ctx->C);

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	d1 e0		 shl	 eax, 1
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _resbuf$[ebp]
  0003a	8b 55 08	 mov	 edx, DWORD PTR _ctx$[ebp]
  0003d	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00040	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 101  :   ((md5_uint32 *) resbuf)[3] = SWAP (ctx->D);

  00043	b8 04 00 00 00	 mov	 eax, 4
  00048	6b c8 03	 imul	 ecx, eax, 3
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _resbuf$[ebp]
  0004e	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00051	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00054	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 102  : 
; 103  :   return resbuf;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _resbuf$[ebp]

; 104  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_md5_read_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\md5.c
;	COMDAT _md5_init_ctx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_md5_init_ctx PROC					; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 82   :   ctx->A = 0x67452301;

  00009	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  0000c	c7 00 01 23 45
	67		 mov	 DWORD PTR [eax], 1732584193 ; 67452301H

; 83   :   ctx->B = 0xefcdab89;

  00012	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00015	c7 40 04 89 ab
	cd ef		 mov	 DWORD PTR [eax+4], -271733879 ; efcdab89H

; 84   :   ctx->C = 0x98badcfe;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  0001f	c7 40 08 fe dc
	ba 98		 mov	 DWORD PTR [eax+8], -1732584194 ; 98badcfeH

; 85   :   ctx->D = 0x10325476;

  00026	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00029	c7 40 0c 76 54
	32 10		 mov	 DWORD PTR [eax+12], 271733878 ; 10325476H

; 86   : 
; 87   :   ctx->total[0] = ctx->total[1] = 0;

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	c1 e0 00	 shl	 eax, 0
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  0003b	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0
  00043	ba 04 00 00 00	 mov	 edx, 4
  00048	6b c2 00	 imul	 eax, edx, 0
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _ctx$[ebp]
  0004e	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0

; 88   :   ctx->buflen = 0;

  00056	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00059	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 89   : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_md5_init_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\md5.c
;	COMDAT _md5_buffer
_TEXT	SEGMENT
_ctx$ = -160						; size = 156
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_resblock$ = 16						; size = 4
_md5_buffer PROC					; COMDAT

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 404  :   struct md5_ctx ctx;
; 405  : 
; 406  :   /* Initialize the computation context.  */
; 407  :   md5_init_ctx (&ctx);

  00016	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _md5_init_ctx
  00022	83 c4 04	 add	 esp, 4

; 408  : 
; 409  :   /* Process whole buffer but last len % 64 bytes.  */
; 410  :   md5_process_bytes (buffer, len, &ctx);

  00025	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _md5_process_bytes
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 411  : 
; 412  :   /* Put result in desired memory area.  */
; 413  :   return md5_finish_ctx (&ctx, resblock);

  0003c	8b 45 10	 mov	 eax, DWORD PTR _resblock$[ebp]
  0003f	50		 push	 eax
  00040	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _ctx$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _md5_finish_ctx
  0004c	83 c4 08	 add	 esp, 8

; 414  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00055	33 cd		 xor	 ecx, ebp
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_md5_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\md5.c
;	COMDAT _md5_stream
_TEXT	SEGMENT
_n$1 = -4336						; size = 4
_sum$ = -4332						; size = 4
_buffer$ = -4328					; size = 4168
_ctx$ = -160						; size = 156
__$ArrayPad$ = -4					; size = 4
_stream$ = 8						; size = 4
_resblock$ = 12						; size = 4
_md5_stream PROC					; COMDAT

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 f0 12 00 00	 mov	 eax, 4848		; 000012f0H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi

; 350  :   /* Important: BLOCKSIZE must be a multiple of 64.  */
; 351  : #define BLOCKSIZE 4096
; 352  :   struct md5_ctx ctx;
; 353  :   char buffer[BLOCKSIZE + 72];
; 354  :   size_t sum = 0;

  0001a	c7 85 14 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _sum$[ebp], 0

; 355  : 
; 356  :   /* Initialize the computation context.  */
; 357  :   md5_init_ctx (&ctx);

  00024	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _md5_init_ctx
  00030	83 c4 04	 add	 esp, 4
$LN2@md5_stream:

; 358  : 
; 359  :   /* Iterate over full file contents.  */
; 360  :   while (1)

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 aa 00 00
	00		 je	 $LN3@md5_stream

; 361  :     {
; 362  :       /* We read the file in blocks of BLOCKSIZE bytes.  One call of the
; 363  : 	 computation function processes the whole buffer so that with the
; 364  : 	 next round of the loop another block can be read.  */
; 365  :       size_t n;
; 366  :       sum = 0;

  00040	c7 85 14 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _sum$[ebp], 0
$LN6@md5_stream:

; 367  : 
; 368  :       /* Read block.  Take care for partial reads.  */
; 369  :       do
; 370  : 	{
; 371  : 	  n = fread (buffer + sum, 1, BLOCKSIZE - sum, stream);

  0004a	8b 45 08	 mov	 eax, DWORD PTR _stream$[ebp]
  0004d	50		 push	 eax
  0004e	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00053	2b 8d 14 ef ff
	ff		 sub	 ecx, DWORD PTR _sum$[ebp]
  00059	51		 push	 ecx
  0005a	6a 01		 push	 1
  0005c	8b 95 14 ef ff
	ff		 mov	 edx, DWORD PTR _sum$[ebp]
  00062	8d 84 15 18 ef
	ff ff		 lea	 eax, DWORD PTR _buffer$[ebp+edx]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _fread
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	89 85 10 ef ff
	ff		 mov	 DWORD PTR _n$1[ebp], eax

; 372  : 
; 373  : 	  sum += n;

  00078	8b 85 14 ef ff
	ff		 mov	 eax, DWORD PTR _sum$[ebp]
  0007e	03 85 10 ef ff
	ff		 add	 eax, DWORD PTR _n$1[ebp]
  00084	89 85 14 ef ff
	ff		 mov	 DWORD PTR _sum$[ebp], eax

; 374  : 	}
; 375  :       while (sum < BLOCKSIZE && n != 0);

  0008a	81 bd 14 ef ff
	ff 00 10 00 00	 cmp	 DWORD PTR _sum$[ebp], 4096 ; 00001000H
  00094	73 09		 jae	 SHORT $LN7@md5_stream
  00096	83 bd 10 ef ff
	ff 00		 cmp	 DWORD PTR _n$1[ebp], 0
  0009d	75 ab		 jne	 SHORT $LN6@md5_stream
$LN7@md5_stream:

; 376  :       if (n == 0 && ferror (stream))

  0009f	83 bd 10 ef ff
	ff 00		 cmp	 DWORD PTR _n$1[ebp], 0
  000a6	75 17		 jne	 SHORT $LN8@md5_stream
  000a8	8b 45 08	 mov	 eax, DWORD PTR _stream$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _ferror
  000b1	83 c4 04	 add	 esp, 4
  000b4	85 c0		 test	 eax, eax
  000b6	74 07		 je	 SHORT $LN8@md5_stream

; 377  :         return 1;

  000b8	b8 01 00 00 00	 mov	 eax, 1
  000bd	eb 66		 jmp	 SHORT $LN1@md5_stream
$LN8@md5_stream:

; 378  : 
; 379  :       /* If end of file is reached, end the loop.  */
; 380  :       if (n == 0)

  000bf	83 bd 10 ef ff
	ff 00		 cmp	 DWORD PTR _n$1[ebp], 0
  000c6	75 02		 jne	 SHORT $LN9@md5_stream

; 381  : 	break;

  000c8	eb 20		 jmp	 SHORT $LN3@md5_stream
$LN9@md5_stream:

; 382  : 
; 383  :       /* Process buffer with BLOCKSIZE bytes.  Note that
; 384  : 			BLOCKSIZE % 64 == 0
; 385  :        */
; 386  :       md5_process_block (buffer, BLOCKSIZE, &ctx);

  000ca	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  000d0	50		 push	 eax
  000d1	68 00 10 00 00	 push	 4096			; 00001000H
  000d6	8d 8d 18 ef ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 _md5_process_block
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  :     }

  000e5	e9 49 ff ff ff	 jmp	 $LN2@md5_stream
$LN3@md5_stream:

; 388  : 
; 389  :   /* Add the last bytes if necessary.  */
; 390  :   if (sum > 0)

  000ea	83 bd 14 ef ff
	ff 00		 cmp	 DWORD PTR _sum$[ebp], 0
  000f1	76 1d		 jbe	 SHORT $LN10@md5_stream

; 391  :     md5_process_bytes (buffer, sum, &ctx);

  000f3	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _ctx$[ebp]
  000f9	50		 push	 eax
  000fa	8b 8d 14 ef ff
	ff		 mov	 ecx, DWORD PTR _sum$[ebp]
  00100	51		 push	 ecx
  00101	8d 95 18 ef ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 _md5_process_bytes
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@md5_stream:

; 392  : 
; 393  :   /* Construct result in desired memory.  */
; 394  :   md5_finish_ctx (&ctx, resblock);

  00110	8b 45 0c	 mov	 eax, DWORD PTR _resblock$[ebp]
  00113	50		 push	 eax
  00114	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _ctx$[ebp]
  0011a	51		 push	 ecx
  0011b	e8 00 00 00 00	 call	 _md5_finish_ctx
  00120	83 c4 08	 add	 esp, 8

; 395  :   return 0;

  00123	33 c0		 xor	 eax, eax
$LN1@md5_stream:

; 396  : }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012b	33 cd		 xor	 ecx, ebp
  0012d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c3		 ret	 0
_md5_stream ENDP
_TEXT	ENDS
END
