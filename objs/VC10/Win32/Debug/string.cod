; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\string.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_strlcat
PUBLIC	_strlcpy
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\string.c
;	COMDAT _strlcpy
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_siz$ = 16						; size = 4
_strlcpy PROC						; COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 41   : 	if (siz == 0)

  00009	83 7d 10 00	 cmp	 DWORD PTR _siz$[ebp], 0
  0000d	75 0e		 jne	 SHORT $LN2@strlcpy

; 42   : 		return strlen(dst);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _strlen
  00018	83 c4 04	 add	 esp, 4
  0001b	eb 23		 jmp	 SHORT $LN1@strlcpy
$LN2@strlcpy:

; 43   : 
; 44   : 	dst[0] = '\0';

  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	6b c8 00	 imul	 ecx, eax, 0
  00025	8b 55 08	 mov	 edx, DWORD PTR _dst$[ebp]
  00028	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 45   : 	return strlcat(dst, src, siz);

  0002c	8b 45 10	 mov	 eax, DWORD PTR _siz$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR _dst$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _strlcat
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@strlcpy:

; 46   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_strlcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\string.c
;	COMDAT _strlcat
_TEXT	SEGMENT
_p$ = -12						; size = 4
_n$ = -8						; size = 4
_dstlen$ = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_siz$ = 16						; size = 4
_strlcat PROC						; COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 20   : 	size_t dstlen, n = siz;

  00009	8b 45 10	 mov	 eax, DWORD PTR _siz$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 21   : 	char *p = dst;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00012	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 22   : 
; 23   : 	dstlen = strlen(dst);

  00015	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _strlen
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 fc	 mov	 DWORD PTR _dstlen$[ebp], eax

; 24   : 	n -= dstlen;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00027	2b 45 fc	 sub	 eax, DWORD PTR _dstlen$[ebp]
  0002a	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 25   : 	p += dstlen;

  0002d	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00030	03 45 fc	 add	 eax, DWORD PTR _dstlen$[ebp]
  00033	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
$LN2@strlcat:

; 26   : 
; 27   : 	while (n > 1 && *src != '\0')

  00036	83 7d f8 01	 cmp	 DWORD PTR _n$[ebp], 1
  0003a	76 31		 jbe	 SHORT $LN3@strlcat
  0003c	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0003f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00042	85 c9		 test	 ecx, ecx
  00044	74 27		 je	 SHORT $LN3@strlcat

; 28   : 	{
; 29   : 		*p++ = *src++;

  00046	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  0004c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0004e	88 10		 mov	 BYTE PTR [eax], dl
  00050	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00053	83 c0 01	 add	 eax, 1
  00056	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  0005c	83 c1 01	 add	 ecx, 1
  0005f	89 4d 0c	 mov	 DWORD PTR _src$[ebp], ecx

; 30   : 		n--;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00065	83 e8 01	 sub	 eax, 1
  00068	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 31   : 	}

  0006b	eb c9		 jmp	 SHORT $LN2@strlcat
$LN3@strlcat:

; 32   : 
; 33   : 	if (n >= 1)

  0006d	83 7d f8 01	 cmp	 DWORD PTR _n$[ebp], 1
  00071	72 06		 jb	 SHORT $LN4@strlcat

; 34   : 		*p = '\0';

  00073	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
  00076	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN4@strlcat:

; 35   : 
; 36   : 	return strlen(src) + dstlen;

  00079	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _strlen
  00082	83 c4 04	 add	 esp, 4
  00085	03 45 fc	 add	 eax, DWORD PTR _dstlen$[ebp]

; 37   : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_strlcat ENDP
_TEXT	ENDS
END
