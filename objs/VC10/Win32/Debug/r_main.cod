; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\r_main.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_R_SetViewSize
PUBLIC	_finecosine
PUBLIC	_cv_soniccd
PUBLIC	_cv_allowmlook
PUBLIC	_validcount
PUBLIC	_cv_showhud
PUBLIC	_cv_limitdraw
PUBLIC	_cv_grtranslucenthud
PUBLIC	_cv_chasecam
PUBLIC	_cv_chasecam2
PUBLIC	_cv_shadow
PUBLIC	_cv_precipdensity
PUBLIC	_cv_precipdist
PUBLIC	_cv_tailspickup
PUBLIC	_cv_shadowoffs
PUBLIC	??_C@_05PKNGFHKN@Thick@				; `string'
PUBLIC	??_C@_05NBPPGIFL@Heavy@				; `string'
PUBLIC	??_C@_08FDNKDHKO@Moderate@			; `string'
PUBLIC	??_C@_05JODGIKH@Light@				; `string'
PUBLIC	??_C@_03KGHEHEMH@MIN@				; `string'
PUBLIC	??_C@_03LEPPJAKI@MAX@				; `string'
PUBLIC	??_C@_0M@LGFCBPB@tailspickup@			; `string'
PUBLIC	??_C@_02IAAGKKDJ@On@				; `string'
PUBLIC	??_C@_08DOGGMBCN@chasecam@			; `string'
PUBLIC	??_C@_09KIJBGOMF@chasecam2@			; `string'
PUBLIC	??_C@_06GIFHDKIF@shadow@			; `string'
PUBLIC	??_C@_03GCDBBDDL@Off@				; `string'
PUBLIC	??_C@_0O@GDEADCKF@offsetshadows@		; `string'
PUBLIC	??_C@_0O@FAJNHIHA@precipdensity@		; `string'
PUBLIC	??_C@_07BLDHCMI@soniccd@			; `string'
PUBLIC	??_C@_0L@BKMFJCPL@allowmlook@			; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes@				; `string'
PUBLIC	??_C@_0L@PCACCNPO@precipdist@			; `string'
PUBLIC	??_C@_04MJHCKDHM@1024@				; `string'
PUBLIC	??_C@_07BPDCOOMD@showhud@			; `string'
PUBLIC	??_C@_09GGPCEALP@limitdraw@			; `string'
PUBLIC	??_C@_0BC@PPENBGNL@gr_translucenthud@		; `string'
PUBLIC	??_C@_03EAIPFAE@255@				; `string'
PUBLIC	_cv_homremoval
PUBLIC	??_C@_0L@KFFFHDCL@homremoval@			; `string'
EXTRN	_finesine:BYTE
EXTRN	_CV_OnOff:BYTE
EXTRN	_CV_YesNo:BYTE
EXTRN	_CV_Unsigned:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_num_extra_colormaps:DWORD
COMM	_extra_colormaps:BYTE:0960H
COMM	_viewx:DWORD
COMM	_viewy:DWORD
COMM	_viewz:DWORD
COMM	_viewsector:DWORD
COMM	_viewangle:DWORD
COMM	_aimingangle:DWORD
COMM	_viewplayer:DWORD
COMM	_clipangle:DWORD
COMM	_doubleclipangle:DWORD
COMM	_viewangletox:DWORD:01000H
COMM	_xtoviewangle:DWORD:0781H
COMM	_sscount:DWORD
COMM	_viewcos:DWORD
COMM	_viewsin:DWORD
COMM	_centerx:DWORD
COMM	_centery:DWORD
COMM	_centerxfrac:DWORD
COMM	_centeryfrac:DWORD
COMM	_projection:DWORD
COMM	_projectiony:DWORD
COMM	_loopcount:DWORD
COMM	_framecount:DWORD
COMM	_scalelight:DWORD:0600H
COMM	_scalelightfixed:DWORD:030H
COMM	_zlight:DWORD:01000H
COMM	_setsizeneeded:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0L@KFFFHDCL@homremoval@
CONST	SEGMENT
??_C@_0L@KFFFHDCL@homremoval@ DB 'homremoval', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03EAIPFAE@255@
CONST	SEGMENT
??_C@_03EAIPFAE@255@ DB '255', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PPENBGNL@gr_translucenthud@
CONST	SEGMENT
??_C@_0BC@PPENBGNL@gr_translucenthud@ DB 'gr_translucenthud', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGPCEALP@limitdraw@
CONST	SEGMENT
??_C@_09GGPCEALP@limitdraw@ DB 'limitdraw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPDCOOMD@showhud@
CONST	SEGMENT
??_C@_07BPDCOOMD@showhud@ DB 'showhud', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJHCKDHM@1024@
CONST	SEGMENT
??_C@_04MJHCKDHM@1024@ DB '1024', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCACCNPO@precipdist@
CONST	SEGMENT
??_C@_0L@PCACCNPO@precipdist@ DB 'precipdist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BKMFJCPL@allowmlook@
CONST	SEGMENT
??_C@_0L@BKMFJCPL@allowmlook@ DB 'allowmlook', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLDHCMI@soniccd@
CONST	SEGMENT
??_C@_07BLDHCMI@soniccd@ DB 'soniccd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FAJNHIHA@precipdensity@
CONST	SEGMENT
??_C@_0O@FAJNHIHA@precipdensity@ DB 'precipdensity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDEADCKF@offsetshadows@
CONST	SEGMENT
??_C@_0O@GDEADCKF@offsetshadows@ DB 'offsetshadows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off@ DB 'Off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIFHDKIF@shadow@
CONST	SEGMENT
??_C@_06GIFHDKIF@shadow@ DB 'shadow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIJBGOMF@chasecam2@
CONST	SEGMENT
??_C@_09KIJBGOMF@chasecam2@ DB 'chasecam2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOGGMBCN@chasecam@
CONST	SEGMENT
??_C@_08DOGGMBCN@chasecam@ DB 'chasecam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LGFCBPB@tailspickup@
CONST	SEGMENT
??_C@_0M@LGFCBPB@tailspickup@ DB 'tailspickup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LEPPJAKI@MAX@
CONST	SEGMENT
??_C@_03LEPPJAKI@MAX@ DB 'MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KGHEHEMH@MIN@
CONST	SEGMENT
??_C@_03KGHEHEMH@MIN@ DB 'MIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JODGIKH@Light@
CONST	SEGMENT
??_C@_05JODGIKH@Light@ DB 'Light', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDNKDHKO@Moderate@
CONST	SEGMENT
??_C@_08FDNKDHKO@Moderate@ DB 'Moderate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBPPGIFL@Heavy@
CONST	SEGMENT
??_C@_05NBPPGIFL@Heavy@ DB 'Heavy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKNGFHKN@Thick@
CONST	SEGMENT
??_C@_05PKNGFHKN@Thick@ DB 'Thick', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_finecosine DD	FLAT:_finesine+8192
_cv_soniccd DD	FLAT:??_C@_07BLDHCMI@soniccd@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_allowmlook DD FLAT:??_C@_0L@BKMFJCPL@allowmlook@
	DD	FLAT:??_C@_03CCLAEDDF@Yes@
	DD	04H
	DD	FLAT:_CV_YesNo
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_validcount DD	01H
_cv_showhud DD	FLAT:??_C@_07BPDCOOMD@showhud@
	DD	FLAT:??_C@_03CCLAEDDF@Yes@
	DD	02H
	DD	FLAT:_CV_YesNo
	DD	FLAT:_R_SetViewSize
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_limitdraw DD FLAT:??_C@_09GGPCEALP@limitdraw@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_grtranslucenthud DD FLAT:??_C@_0BC@PPENBGNL@gr_translucenthud@
	DD	FLAT:??_C@_03EAIPFAE@255@
	DD	03H
	DD	FLAT:_grtranslucenthud_cons_t
	DD	FLAT:_R_SetViewSize
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_chasecam DD	FLAT:??_C@_08DOGGMBCN@chasecam@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	02H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_ChaseCam_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_chasecam2 DD FLAT:??_C@_09KIJBGOMF@chasecam2@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	02H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_ChaseCam2_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_shadow DD	FLAT:??_C@_06GIFHDKIF@shadow@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_precipdensity DD FLAT:??_C@_0O@FAJNHIHA@precipdensity@
	DD	FLAT:??_C@_05NBPPGIFL@Heavy@
	DD	01H
	DD	FLAT:_precipdensity_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_precipdist DD FLAT:??_C@_0L@PCACCNPO@precipdist@
	DD	FLAT:??_C@_04MJHCKDHM@1024@
	DD	01H
	DD	FLAT:_CV_Unsigned
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_tailspickup DD FLAT:??_C@_0M@LGFCBPB@tailspickup@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_shadowoffs DD FLAT:??_C@_0O@GDEADCKF@offsetshadows@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_precipdensity_cons_t DD 01H
	DD	FLAT:??_C@_05PKNGFHKN@Thick@
	DD	02H
	DD	FLAT:??_C@_05NBPPGIFL@Heavy@
	DD	03H
	DD	FLAT:??_C@_08FDNKDHKO@Moderate@
	DD	04H
	DD	FLAT:??_C@_05JODGIKH@Light@
	DD	00H
	DD	00H
_grtranslucenthud_cons_t DD 01H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	0ffH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_cv_homremoval DD FLAT:??_C@_0L@KFFFHDCL@homremoval@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_DATA	ENDS
PUBLIC	_R_PointOnSide
PUBLIC	_R_PointOnSegSide
PUBLIC	_R_PointToAngle
PUBLIC	_R_PointToAngle2
PUBLIC	_R_PointToDist
PUBLIC	_R_PointToDist2
PUBLIC	_R_SecplaneZatPoint
PUBLIC	_R_SecplaneZatPointDist
PUBLIC	_R_SecplaneFlipVert
PUBLIC	_R_ArePlanesSame
PUBLIC	_R_ArePlanesDifferent
PUBLIC	_R_SecplaneChangeHeight
PUBLIC	_R_SecplaneHeightDiff
PUBLIC	_R_SecplanePointToDist
PUBLIC	_R_SecplanePointToDist2
PUBLIC	_R_ScaleFromGlobalAngle
PUBLIC	_R_PointInSubsector
PUBLIC	_R_IsPointInSubsector
PUBLIC	_R_Init
PUBLIC	_R_ExecuteSetViewSize
PUBLIC	_R_SetupFrame
PUBLIC	_R_RenderPlayerView
PUBLIC	_R_RegisterEngineStuff
PUBLIC	_SplitScreen_OnChange
PUBLIC	??_C@_0CO@PCEPNDJH@Splitscreen?5not?5supported?5in?5ne@ ; `string'
PUBLIC	??_C@_0M@DOOKNNGA@?6R_InitData@			; `string'
PUBLIC	??_C@_0BC@EEPBJGIP@?6R_InitViewBorder@		; `string'
PUBLIC	??_C@_0O@IPNHLHN@?6R_InitPlanes@		; `string'
PUBLIC	??_C@_0BD@GPFHMJKK@?6R_InitLightTables@		; `string'
PUBLIC	??_C@_0BK@JPNKNDCM@?6R_InitTranslationTables?6@	; `string'
EXTRN	_abs:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_SlopeDiv:PROC
EXTRN	_CV_RegisterVar:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_NetUpdate:PROC
EXTRN	_CL_AddSplitscreenPlayer:PROC
EXTRN	_CL_RemoveSplitscreenPlayer:PROC
EXTRN	_G_ClipAimingPitch:PROC
EXTRN	_R_InitData:PROC
EXTRN	_R_ClearClipSegs:PROC
EXTRN	_R_ClearDrawSegs:PROC
EXTRN	_R_RenderBSPNode:PROC
EXTRN	_R_InitPlanes:PROC
EXTRN	_R_ClearPlanes:PROC
EXTRN	_R_DrawPlanes:PROC
EXTRN	_R_SetSkyScale:PROC
EXTRN	_R_ClearSprites:PROC
EXTRN	_R_DrawMasked:PROC
EXTRN	_R_InitDrawNodes:PROC
EXTRN	_R_InitTranslationTables:PROC
EXTRN	_R_LoadSkinTable:PROC
EXTRN	_R_InitViewBuffer:PROC
EXTRN	_R_InitViewBorder:PROC
EXTRN	_P_ResetCamera:PROC
EXTRN	_M_SwitchSplitscreen:PROC
EXTRN	_V_DrawFill:PROC
EXTRN	_HWR_InitTextureMapping:PROC
EXTRN	_HWR_SetViewSize:PROC
EXTRN	_HWR_AddCommands:PROC
EXTRN	__allmul:PROC
EXTRN	__allshr:PROC
EXTRN	_devparm:DWORD
EXTRN	_finetangent:BYTE
EXTRN	_tantoangle:BYTE
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_splitscreen:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_viewwidth:DWORD
EXTRN	_scaledviewwidth:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_cv_useranalog:BYTE
EXTRN	_cv_useranalog2:BYTE
EXTRN	_cv_analog:BYTE
EXTRN	_cv_analog2:BYTE
EXTRN	_server:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_demoplayback:DWORD
EXTRN	_localangle:DWORD
EXTRN	_localangle2:DWORD
EXTRN	_localaiming:DWORD
EXTRN	_localaiming2:DWORD
EXTRN	_vid:BYTE
EXTRN	_colormaps:DWORD
EXTRN	_segs:DWORD
EXTRN	_subsectors:DWORD
EXTRN	_numnodes:DWORD
EXTRN	_nodes:DWORD
EXTRN	_rw_distance:DWORD
EXTRN	_rw_normalangle:DWORD
EXTRN	_viewheight:DWORD
EXTRN	_yslopetab:BYTE
EXTRN	_yslope:DWORD
EXTRN	_distscale:BYTE
EXTRN	_screenheightarray:BYTE
EXTRN	_st_overlay:DWORD
EXTRN	_camera:BYTE
EXTRN	_camera2:BYTE
EXTRN	_cv_cam_dist:BYTE
EXTRN	_cv_cam_still:BYTE
EXTRN	_cv_cam_height:BYTE
EXTRN	_cv_cam_speed:BYTE
EXTRN	_cv_cam_rotate:BYTE
EXTRN	_cv_cam_rotspeed:BYTE
EXTRN	_cv_cam2_dist:BYTE
EXTRN	_cv_cam2_still:BYTE
EXTRN	_cv_cam2_height:BYTE
EXTRN	_cv_cam2_speed:BYTE
EXTRN	_cv_cam2_rotate:BYTE
EXTRN	_cv_cam2_rotspeed:BYTE
EXTRN	_cv_gravity:BYTE
EXTRN	_cv_viewheight:BYTE
EXTRN	_rendermode:DWORD
EXTRN	_am_recalc:DWORD
EXTRN	_cv_grfog:BYTE
EXTRN	_cv_grfogcolor:BYTE
EXTRN	_cv_grsoftwarefog:BYTE
EXTRN	_cv_grgammared:BYTE
EXTRN	_cv_grgammagreen:BYTE
EXTRN	_cv_grgammablue:BYTE
EXTRN	_cv_grfovchange:BYTE
_BSS	SEGMENT
_viewmobj DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BK@JPNKNDCM@?6R_InitTranslationTables?6@
CONST	SEGMENT
??_C@_0BK@JPNKNDCM@?6R_InitTranslationTables?6@ DB 0aH, 'R_InitTranslatio'
	DB	'nTables', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GPFHMJKK@?6R_InitLightTables@
CONST	SEGMENT
??_C@_0BD@GPFHMJKK@?6R_InitLightTables@ DB 0aH, 'R_InitLightTables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IPNHLHN@?6R_InitPlanes@
CONST	SEGMENT
??_C@_0O@IPNHLHN@?6R_InitPlanes@ DB 0aH, 'R_InitPlanes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EEPBJGIP@?6R_InitViewBorder@
CONST	SEGMENT
??_C@_0BC@EEPBJGIP@?6R_InitViewBorder@ DB 0aH, 'R_InitViewBorder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DOOKNNGA@?6R_InitData@
CONST	SEGMENT
??_C@_0M@DOOKNNGA@?6R_InitData@ DB 0aH, 'R_InitData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PCEPNDJH@Splitscreen?5not?5supported?5in?5ne@
CONST	SEGMENT
??_C@_0CO@PCEPNDJH@Splitscreen?5not?5supported?5in?5ne@ DB 'Splitscreen n'
	DB	'ot supported in netplay, sorry!', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_InitLightTables
_TEXT	SEGMENT
_scale$ = -20						; size = 4
_startmapl$ = -16					; size = 4
_level$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_R_InitLightTables PROC					; COMDAT

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 483  : 	INT32 i;
; 484  : 	INT32 j;
; 485  : 	INT32 level;
; 486  : 	INT32 startmapl;
; 487  : 	INT32 scale;
; 488  : 
; 489  : 	// Calculate the light levels to use
; 490  : 	//  for each level / distance combination.
; 491  : 	for (i = 0; i < LIGHTLEVELS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@R_InitLigh
$LN2@R_InitLigh:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_InitLigh:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0001f	0f 8d a0 00 00
	00		 jge	 $LN3@R_InitLigh

; 492  : 	{
; 493  : 		startmapl = ((LIGHTLEVELS-1-i)*2)*NUMCOLORMAPS/LIGHTLEVELS;

  00025	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0002a	2b 45 fc	 sub	 eax, DWORD PTR _i$[ebp]
  0002d	d1 e0		 shl	 eax, 1
  0002f	c1 e0 05	 shl	 eax, 5
  00032	99		 cdq
  00033	83 e2 1f	 and	 edx, 31			; 0000001fH
  00036	03 c2		 add	 eax, edx
  00038	c1 f8 05	 sar	 eax, 5
  0003b	89 45 f0	 mov	 DWORD PTR _startmapl$[ebp], eax

; 494  : 		for (j = 0; j < MAXLIGHTZ; j++)

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00045	eb 09		 jmp	 SHORT $LN7@R_InitLigh
$LN5@R_InitLigh:
  00047	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0004a	83 c0 01	 add	 eax, 1
  0004d	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@R_InitLigh:
  00050	81 7d f8 80 00
	00 00		 cmp	 DWORD PTR _j$[ebp], 128	; 00000080H
  00057	7d 67		 jge	 SHORT $LN6@R_InitLigh

; 495  : 		{
; 496  : 			//added : 02-02-98 : use BASEVIDWIDTH, vid.width is not set already,
; 497  : 			// and it seems it needs to be calculated only once.
; 498  : 			scale = FixedDiv((BASEVIDWIDTH/2*FRACUNIT), (j+1)<<LIGHTZSHIFT);

  00059	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0005c	83 c0 01	 add	 eax, 1
  0005f	c1 e0 14	 shl	 eax, 20			; 00000014H
  00062	50		 push	 eax
  00063	68 00 00 a0 00	 push	 10485760		; 00a00000H
  00068	e8 00 00 00 00	 call	 _FixedDiv
  0006d	83 c4 08	 add	 esp, 8
  00070	89 45 ec	 mov	 DWORD PTR _scale$[ebp], eax

; 499  : 			scale >>= LIGHTSCALESHIFT;

  00073	8b 45 ec	 mov	 eax, DWORD PTR _scale$[ebp]
  00076	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00079	89 45 ec	 mov	 DWORD PTR _scale$[ebp], eax

; 500  : 			level = startmapl - scale/DISTMAP;

  0007c	8b 45 ec	 mov	 eax, DWORD PTR _scale$[ebp]
  0007f	99		 cdq
  00080	2b c2		 sub	 eax, edx
  00082	d1 f8		 sar	 eax, 1
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _startmapl$[ebp]
  00087	2b c8		 sub	 ecx, eax
  00089	89 4d f4	 mov	 DWORD PTR _level$[ebp], ecx

; 501  : 
; 502  : 			if (level < 0)

  0008c	79 07		 jns	 SHORT $LN8@R_InitLigh

; 503  : 				level = 0;

  0008e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN8@R_InitLigh:

; 504  : 
; 505  : 			if (level >= NUMCOLORMAPS)

  00095	83 7d f4 20	 cmp	 DWORD PTR _level$[ebp], 32 ; 00000020H
  00099	7c 07		 jl	 SHORT $LN9@R_InitLigh

; 506  : 				level = NUMCOLORMAPS-1;

  0009b	c7 45 f4 1f 00
	00 00		 mov	 DWORD PTR _level$[ebp], 31 ; 0000001fH
$LN9@R_InitLigh:

; 507  : 
; 508  : 			zlight[i][j] = colormaps + level*256;

  000a2	8b 45 f4	 mov	 eax, DWORD PTR _level$[ebp]
  000a5	c1 e0 08	 shl	 eax, 8
  000a8	03 05 00 00 00
	00		 add	 eax, DWORD PTR _colormaps
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000b1	c1 e1 09	 shl	 ecx, 9
  000b4	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  000b7	89 84 91 00 00
	00 00		 mov	 DWORD PTR _zlight[ecx+edx*4], eax

; 509  : 		}

  000be	eb 87		 jmp	 SHORT $LN5@R_InitLigh
$LN6@R_InitLigh:

; 510  : 	}

  000c0	e9 4d ff ff ff	 jmp	 $LN2@R_InitLigh
$LN3@R_InitLigh:

; 511  : }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_R_InitLightTables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_InitTextureMapping
_TEXT	SEGMENT
_focallength$ = -16					; size = 4
_t$ = -12						; size = 4
_x$ = -8						; size = 4
_i$ = -4						; size = 4
_R_InitTextureMapping PROC				; COMDAT

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 412  : 	INT32 i;
; 413  : 	INT32 x;
; 414  : 	INT32 t;
; 415  : 	fixed_t focallength;
; 416  : 
; 417  : 	// Use tangent table to generate viewangletox:
; 418  : 	//  viewangletox will give the next greatest x
; 419  : 	//  after the view angle.
; 420  : 	//
; 421  : 	// Calc focallength
; 422  : 	//  so FIELDOFVIEW angles covers SCREENWIDTH.
; 423  : 	focallength = FixedDiv(centerxfrac,

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	69 c8 00 0c 00
	00		 imul	 ecx, eax, 3072
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _finetangent[ecx]
  0001a	52		 push	 edx
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerxfrac
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _FixedDiv
  00026	83 c4 08	 add	 esp, 8
  00029	89 45 f0	 mov	 DWORD PTR _focallength$[ebp], eax

; 424  : 		FINETANGENT(FINEANGLES/4+/*cv_fov.value*/ FIELDOFVIEW/2));
; 425  : 
; 426  : 	for (i = 0; i < FINEANGLES/2; i++)

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00033	eb 09		 jmp	 SHORT $LN4@R_InitText
$LN2@R_InitText:
  00035	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_InitText:
  0003e	81 7d fc 00 10
	00 00		 cmp	 DWORD PTR _i$[ebp], 4096 ; 00001000H
  00045	0f 8d 9c 00 00
	00		 jge	 $LN3@R_InitText

; 427  : 	{
; 428  : 		if (FINETANGENT(i) > FRACUNIT*2)

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	81 3c 85 00 00
	00 00 00 00 02
	00		 cmp	 DWORD PTR _finetangent[eax*4], 131072 ; 00020000H
  00059	7e 09		 jle	 SHORT $LN13@R_InitText

; 429  : 			t = -1;

  0005b	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _t$[ebp], -1
  00062	eb 71		 jmp	 SHORT $LN19@R_InitText
$LN13@R_InitText:

; 430  : 		else if (FINETANGENT(i) < -FRACUNIT*2)

  00064	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00067	81 3c 85 00 00
	00 00 00 00 fe
	ff		 cmp	 DWORD PTR _finetangent[eax*4], -131072 ; fffe0000H
  00072	7d 0d		 jge	 SHORT $LN15@R_InitText

; 431  : 			t = viewwidth+1;

  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwidth
  00079	83 c0 01	 add	 eax, 1
  0007c	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
  0007f	eb 54		 jmp	 SHORT $LN19@R_InitText
$LN15@R_InitText:

; 432  : 		else
; 433  : 		{
; 434  : 			t = FixedMul(FINETANGENT(i), focallength);

  00081	8b 45 f0	 mov	 eax, DWORD PTR _focallength$[ebp]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00088	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finetangent[ecx*4]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _FixedMul
  00095	83 c4 08	 add	 esp, 8
  00098	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax

; 435  : 			t = (centerxfrac - t+FRACUNIT-1)>>FRACBITS;

  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerxfrac
  000a0	2b 45 f4	 sub	 eax, DWORD PTR _t$[ebp]
  000a3	05 ff ff 00 00	 add	 eax, 65535		; 0000ffffH
  000a8	c1 f8 10	 sar	 eax, 16			; 00000010H
  000ab	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax

; 436  : 
; 437  : 			if (t < -1)

  000ae	83 7d f4 ff	 cmp	 DWORD PTR _t$[ebp], -1
  000b2	7d 09		 jge	 SHORT $LN17@R_InitText

; 438  : 				t = -1;

  000b4	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _t$[ebp], -1
  000bb	eb 18		 jmp	 SHORT $LN19@R_InitText
$LN17@R_InitText:

; 439  : 			else if (t > viewwidth+1)

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwidth
  000c2	83 c0 01	 add	 eax, 1
  000c5	39 45 f4	 cmp	 DWORD PTR _t$[ebp], eax
  000c8	7e 0b		 jle	 SHORT $LN19@R_InitText

; 440  : 				t = viewwidth+1;

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwidth
  000cf	83 c0 01	 add	 eax, 1
  000d2	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax
$LN19@R_InitText:

; 441  : 		}
; 442  : 		viewangletox[i] = t;

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d8	8b 4d f4	 mov	 ecx, DWORD PTR _t$[ebp]
  000db	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _viewangletox[eax*4], ecx

; 443  : 	}

  000e2	e9 4e ff ff ff	 jmp	 $LN2@R_InitText
$LN3@R_InitText:

; 444  : 
; 445  : 	// Scan viewangletox[] to generate xtoviewangle[]:
; 446  : 	//  xtoviewangle will give the smallest view angle
; 447  : 	//  that maps to x.
; 448  : 	for (x = 0; x <= viewwidth;x++)

  000e7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  000ee	eb 09		 jmp	 SHORT $LN7@R_InitText
$LN5@R_InitText:
  000f0	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000f3	83 c0 01	 add	 eax, 1
  000f6	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN7@R_InitText:
  000f9	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000fc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _viewwidth
  00102	7f 38		 jg	 SHORT $LN6@R_InitText

; 449  : 	{
; 450  : 		i = 0;

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN8@R_InitText:

; 451  : 		while (viewangletox[i] > x)

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0010e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _viewangletox[eax*4]
  00115	3b 4d f8	 cmp	 ecx, DWORD PTR _x$[ebp]
  00118	7e 0b		 jle	 SHORT $LN9@R_InitText

; 452  : 			i++;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0011d	83 c0 01	 add	 eax, 1
  00120	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00123	eb e6		 jmp	 SHORT $LN8@R_InitText
$LN9@R_InitText:

; 453  : 		xtoviewangle[x] = (i<<ANGLETOFINESHIFT) - ANGLE_90;

  00125	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00128	c1 e0 13	 shl	 eax, 19			; 00000013H
  0012b	2d 00 00 00 40	 sub	 eax, 1073741824		; 40000000H
  00130	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  00133	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _xtoviewangle[ecx*4], eax

; 454  : 	}

  0013a	eb b4		 jmp	 SHORT $LN5@R_InitText
$LN6@R_InitText:

; 455  : 
; 456  : 	// Take out the fencepost cases from viewangletox.
; 457  : 	for (i = 0; i < FINEANGLES/2; i++)

  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00143	eb 09		 jmp	 SHORT $LN12@R_InitText
$LN10@R_InitText:
  00145	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00148	83 c0 01	 add	 eax, 1
  0014b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN12@R_InitText:
  0014e	81 7d fc 00 10
	00 00		 cmp	 DWORD PTR _i$[ebp], 4096 ; 00001000H
  00155	7d 68		 jge	 SHORT $LN11@R_InitText

; 458  : 	{
; 459  : 		t = FixedMul(FINETANGENT(i), focallength);

  00157	8b 45 f0	 mov	 eax, DWORD PTR _focallength$[ebp]
  0015a	50		 push	 eax
  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0015e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finetangent[ecx*4]
  00165	52		 push	 edx
  00166	e8 00 00 00 00	 call	 _FixedMul
  0016b	83 c4 08	 add	 esp, 8
  0016e	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax

; 460  : 		t = centerx - t;

  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerx
  00176	2b 45 f4	 sub	 eax, DWORD PTR _t$[ebp]
  00179	89 45 f4	 mov	 DWORD PTR _t$[ebp], eax

; 461  : 
; 462  : 		if (viewangletox[i] == -1)

  0017c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0017f	83 3c 85 00 00
	00 00 ff	 cmp	 DWORD PTR _viewangletox[eax*4], -1
  00187	75 10		 jne	 SHORT $LN20@R_InitText

; 463  : 			viewangletox[i] = 0;

  00189	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0018c	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _viewangletox[eax*4], 0
  00197	eb 24		 jmp	 SHORT $LN22@R_InitText
$LN20@R_InitText:

; 464  : 		else if (viewangletox[i] == viewwidth+1)

  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwidth
  0019e	83 c0 01	 add	 eax, 1
  001a1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001a4	39 04 8d 00 00
	00 00		 cmp	 DWORD PTR _viewangletox[ecx*4], eax
  001ab	75 10		 jne	 SHORT $LN22@R_InitText

; 465  : 			viewangletox[i]  = viewwidth;

  001ad	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewwidth
  001b6	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _viewangletox[eax*4], ecx
$LN22@R_InitText:

; 466  : 	}

  001bd	eb 86		 jmp	 SHORT $LN10@R_InitText
$LN11@R_InitText:

; 467  : 
; 468  : 	clipangle = xtoviewangle[0];

  001bf	b8 04 00 00 00	 mov	 eax, 4
  001c4	6b c8 00	 imul	 ecx, eax, 0
  001c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _xtoviewangle[ecx]
  001cd	89 15 00 00 00
	00		 mov	 DWORD PTR _clipangle, edx

; 469  : 	doubleclipangle = clipangle*2;

  001d3	a1 00 00 00 00	 mov	 eax, DWORD PTR _clipangle
  001d8	d1 e0		 shl	 eax, 1
  001da	a3 00 00 00 00	 mov	 DWORD PTR _doubleclipangle, eax

; 470  : }

  001df	5f		 pop	 edi
  001e0	5e		 pop	 esi
  001e1	5b		 pop	 ebx
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
_R_InitTextureMapping ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _ChaseCam2_OnChange
_TEXT	SEGMENT
_ChaseCam2_OnChange PROC				; COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 183  : 	if (!cv_chasecam2.value || !cv_useranalog2.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  00010	74 09		 je	 SHORT $LN4@ChaseCam2_
  00012	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_useranalog2+20, 0
  00019	75 11		 jne	 SHORT $LN2@ChaseCam2_
$LN4@ChaseCam2_:

; 184  : 		CV_SetValue(&cv_analog2, 0);

  0001b	6a 00		 push	 0
  0001d	68 00 00 00 00	 push	 OFFSET _cv_analog2
  00022	e8 00 00 00 00	 call	 _CV_SetValue
  00027	83 c4 08	 add	 esp, 8
  0002a	eb 0f		 jmp	 SHORT $LN3@ChaseCam2_
$LN2@ChaseCam2_:

; 185  : 	else
; 186  : 		CV_SetValue(&cv_analog2, 1);

  0002c	6a 01		 push	 1
  0002e	68 00 00 00 00	 push	 OFFSET _cv_analog2
  00033	e8 00 00 00 00	 call	 _CV_SetValue
  00038	83 c4 08	 add	 esp, 8
$LN3@ChaseCam2_:

; 187  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_ChaseCam2_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _ChaseCam_OnChange
_TEXT	SEGMENT
_ChaseCam_OnChange PROC					; COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 175  : 	if (!cv_chasecam.value || !cv_useranalog.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00010	74 09		 je	 SHORT $LN4@ChaseCam_O
  00012	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_useranalog+20, 0
  00019	75 11		 jne	 SHORT $LN2@ChaseCam_O
$LN4@ChaseCam_O:

; 176  : 		CV_SetValue(&cv_analog, 0);

  0001b	6a 00		 push	 0
  0001d	68 00 00 00 00	 push	 OFFSET _cv_analog
  00022	e8 00 00 00 00	 call	 _CV_SetValue
  00027	83 c4 08	 add	 esp, 8
  0002a	eb 0f		 jmp	 SHORT $LN3@ChaseCam_O
$LN2@ChaseCam_O:

; 177  : 	else
; 178  : 		CV_SetValue(&cv_analog, 1);

  0002c	6a 01		 push	 1
  0002e	68 00 00 00 00	 push	 OFFSET _cv_analog
  00033	e8 00 00 00 00	 call	 _CV_SetValue
  00038	83 c4 08	 add	 esp, 8
$LN3@ChaseCam_O:

; 179  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_ChaseCam_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _SplitScreen_OnChange
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_SplitScreen_OnChange PROC				; COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 133  : 	if (!cv_debug && netgame)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00010	75 2e		 jne	 SHORT $LN5@SplitScree
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00019	74 25		 je	 SHORT $LN5@SplitScree

; 134  : 	{
; 135  : 		if (splitscreen)

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00022	74 17		 je	 SHORT $LN6@SplitScree

; 136  : 		{
; 137  : 			CONS_Printf("Splitscreen not supported in netplay, "

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PCEPNDJH@Splitscreen?5not?5supported?5in?5ne@
  00029	e8 00 00 00 00	 call	 _CONS_Printf
  0002e	83 c4 04	 add	 esp, 4

; 138  : 				"sorry!\n");
; 139  : 			splitscreen = false;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _splitscreen, 0
$LN6@SplitScree:

; 140  : 		}
; 141  : 		return;

  0003b	e9 90 00 00 00	 jmp	 $LN3@SplitScree
$LN5@SplitScree:

; 142  : 	}
; 143  : 
; 144  : 	// recompute screen size
; 145  : 	R_ExecuteSetViewSize();

  00040	e8 00 00 00 00	 call	 _R_ExecuteSetViewSize
  00045	90		 npad	 1

; 146  : 
; 147  : 	// change the menu
; 148  : 	M_SwitchSplitscreen();

  00046	e8 00 00 00 00	 call	 _M_SwitchSplitscreen
  0004b	90		 npad	 1

; 149  : 
; 150  : 	if (!demoplayback)

  0004c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00053	75 35		 jne	 SHORT $LN7@SplitScree

; 151  : 	{
; 152  : 		if (splitscreen)

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0005c	74 08		 je	 SHORT $LN9@SplitScree

; 153  : 			CL_AddSplitscreenPlayer();

  0005e	e8 00 00 00 00	 call	 _CL_AddSplitscreenPlayer
  00063	90		 npad	 1
  00064	eb 06		 jmp	 SHORT $LN10@SplitScree
$LN9@SplitScree:

; 154  : 		else
; 155  : 			CL_RemoveSplitscreenPlayer();

  00066	e8 00 00 00 00	 call	 _CL_RemoveSplitscreenPlayer
  0006b	90		 npad	 1
$LN10@SplitScree:

; 156  : 
; 157  : 		if (server && !netgame)

  0006c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00073	74 13		 je	 SHORT $LN11@SplitScree
  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0007c	75 0a		 jne	 SHORT $LN11@SplitScree

; 158  : 			multiplayer = splitscreen;

  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR _splitscreen
  00083	a3 00 00 00 00	 mov	 DWORD PTR _multiplayer, eax
$LN11@SplitScree:

; 159  : 	}

  00088	eb 46		 jmp	 SHORT $LN3@SplitScree
$LN7@SplitScree:

; 160  : 	else
; 161  : 	{
; 162  : 		INT32 i;
; 163  : 		secondarydisplayplayer = consoleplayer;

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  0008f	a3 00 00 00 00	 mov	 DWORD PTR _secondarydisplayplayer, eax

; 164  : 		for (i = 0; i < MAXPLAYERS; i++)

  00094	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0009b	eb 09		 jmp	 SHORT $LN4@SplitScree
$LN2@SplitScree:
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000a0	83 c0 01	 add	 eax, 1
  000a3	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@SplitScree:
  000a6	83 7d fc 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  000aa	7d 24		 jge	 SHORT $LN3@SplitScree

; 165  : 			if (playeringame[i] && i != consoleplayer)

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000af	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000b7	74 15		 je	 SHORT $LN12@SplitScree
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000bc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  000c2	74 0a		 je	 SHORT $LN12@SplitScree

; 166  : 			{
; 167  : 				secondarydisplayplayer = i;

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000c7	a3 00 00 00 00	 mov	 DWORD PTR _secondarydisplayplayer, eax

; 168  : 				break;

  000cc	eb 02		 jmp	 SHORT $LN3@SplitScree
$LN12@SplitScree:

; 169  : 			}

  000ce	eb cd		 jmp	 SHORT $LN2@SplitScree
$LN3@SplitScree:

; 170  : 	}
; 171  : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
_SplitScreen_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_RegisterEngineStuff
_TEXT	SEGMENT
_R_RegisterEngineStuff PROC				; COMDAT

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 922  : 	CV_RegisterVar(&cv_gravity);

  00009	68 00 00 00 00	 push	 OFFSET _cv_gravity
  0000e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00013	83 c4 04	 add	 esp, 4

; 923  : 	CV_RegisterVar(&cv_tailspickup);

  00016	68 00 00 00 00	 push	 OFFSET _cv_tailspickup
  0001b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00020	83 c4 04	 add	 esp, 4

; 924  : 	CV_RegisterVar(&cv_soniccd);

  00023	68 00 00 00 00	 push	 OFFSET _cv_soniccd
  00028	e8 00 00 00 00	 call	 _CV_RegisterVar
  0002d	83 c4 04	 add	 esp, 4

; 925  : 	CV_RegisterVar(&cv_allowmlook);

  00030	68 00 00 00 00	 push	 OFFSET _cv_allowmlook
  00035	e8 00 00 00 00	 call	 _CV_RegisterVar
  0003a	83 c4 04	 add	 esp, 4

; 926  : 	CV_RegisterVar(&cv_homremoval);

  0003d	68 00 00 00 00	 push	 OFFSET _cv_homremoval
  00042	e8 00 00 00 00	 call	 _CV_RegisterVar
  00047	83 c4 04	 add	 esp, 4

; 927  : 
; 928  : 	// Enough for dedicated server
; 929  : 	if (dedicated)

  0004a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00051	74 05		 je	 SHORT $LN2@R_Register

; 930  : 		return;

  00053	e9 91 01 00 00	 jmp	 $LN3@R_Register
$LN2@R_Register:

; 931  : 
; 932  : 	CV_RegisterVar(&cv_precipdist);

  00058	68 00 00 00 00	 push	 OFFSET _cv_precipdist
  0005d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00062	83 c4 04	 add	 esp, 4

; 933  : 	CV_RegisterVar(&cv_chasecam);

  00065	68 00 00 00 00	 push	 OFFSET _cv_chasecam
  0006a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0006f	83 c4 04	 add	 esp, 4

; 934  : 	CV_RegisterVar(&cv_chasecam2);

  00072	68 00 00 00 00	 push	 OFFSET _cv_chasecam2
  00077	e8 00 00 00 00	 call	 _CV_RegisterVar
  0007c	83 c4 04	 add	 esp, 4

; 935  : 	CV_RegisterVar(&cv_shadow);

  0007f	68 00 00 00 00	 push	 OFFSET _cv_shadow
  00084	e8 00 00 00 00	 call	 _CV_RegisterVar
  00089	83 c4 04	 add	 esp, 4

; 936  : 	CV_RegisterVar(&cv_shadowoffs);

  0008c	68 00 00 00 00	 push	 OFFSET _cv_shadowoffs
  00091	e8 00 00 00 00	 call	 _CV_RegisterVar
  00096	83 c4 04	 add	 esp, 4

; 937  : 	CV_RegisterVar(&cv_precipdensity);

  00099	68 00 00 00 00	 push	 OFFSET _cv_precipdensity
  0009e	e8 00 00 00 00	 call	 _CV_RegisterVar
  000a3	83 c4 04	 add	 esp, 4

; 938  : 
; 939  : 	CV_RegisterVar(&cv_cam_dist);

  000a6	68 00 00 00 00	 push	 OFFSET _cv_cam_dist
  000ab	e8 00 00 00 00	 call	 _CV_RegisterVar
  000b0	83 c4 04	 add	 esp, 4

; 940  : 	CV_RegisterVar(&cv_cam_still);

  000b3	68 00 00 00 00	 push	 OFFSET _cv_cam_still
  000b8	e8 00 00 00 00	 call	 _CV_RegisterVar
  000bd	83 c4 04	 add	 esp, 4

; 941  : 	CV_RegisterVar(&cv_cam_height);

  000c0	68 00 00 00 00	 push	 OFFSET _cv_cam_height
  000c5	e8 00 00 00 00	 call	 _CV_RegisterVar
  000ca	83 c4 04	 add	 esp, 4

; 942  : 	CV_RegisterVar(&cv_cam_speed);

  000cd	68 00 00 00 00	 push	 OFFSET _cv_cam_speed
  000d2	e8 00 00 00 00	 call	 _CV_RegisterVar
  000d7	83 c4 04	 add	 esp, 4

; 943  : 	CV_RegisterVar(&cv_cam_rotate);

  000da	68 00 00 00 00	 push	 OFFSET _cv_cam_rotate
  000df	e8 00 00 00 00	 call	 _CV_RegisterVar
  000e4	83 c4 04	 add	 esp, 4

; 944  : 	CV_RegisterVar(&cv_cam_rotspeed);

  000e7	68 00 00 00 00	 push	 OFFSET _cv_cam_rotspeed
  000ec	e8 00 00 00 00	 call	 _CV_RegisterVar
  000f1	83 c4 04	 add	 esp, 4

; 945  : 
; 946  : 	CV_RegisterVar(&cv_cam2_dist);

  000f4	68 00 00 00 00	 push	 OFFSET _cv_cam2_dist
  000f9	e8 00 00 00 00	 call	 _CV_RegisterVar
  000fe	83 c4 04	 add	 esp, 4

; 947  : 	CV_RegisterVar(&cv_cam2_still);

  00101	68 00 00 00 00	 push	 OFFSET _cv_cam2_still
  00106	e8 00 00 00 00	 call	 _CV_RegisterVar
  0010b	83 c4 04	 add	 esp, 4

; 948  : 	CV_RegisterVar(&cv_cam2_height);

  0010e	68 00 00 00 00	 push	 OFFSET _cv_cam2_height
  00113	e8 00 00 00 00	 call	 _CV_RegisterVar
  00118	83 c4 04	 add	 esp, 4

; 949  : 	CV_RegisterVar(&cv_cam2_speed);

  0011b	68 00 00 00 00	 push	 OFFSET _cv_cam2_speed
  00120	e8 00 00 00 00	 call	 _CV_RegisterVar
  00125	83 c4 04	 add	 esp, 4

; 950  : 	CV_RegisterVar(&cv_cam2_rotate);

  00128	68 00 00 00 00	 push	 OFFSET _cv_cam2_rotate
  0012d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00132	83 c4 04	 add	 esp, 4

; 951  : 	CV_RegisterVar(&cv_cam2_rotspeed);

  00135	68 00 00 00 00	 push	 OFFSET _cv_cam2_rotspeed
  0013a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0013f	83 c4 04	 add	 esp, 4

; 952  : 
; 953  : 	CV_RegisterVar(&cv_showhud);

  00142	68 00 00 00 00	 push	 OFFSET _cv_showhud
  00147	e8 00 00 00 00	 call	 _CV_RegisterVar
  0014c	83 c4 04	 add	 esp, 4

; 954  : 
; 955  : 	// Default viewheight is changeable,
; 956  : 	// initialized to standard viewheight
; 957  : 	CV_RegisterVar(&cv_viewheight);

  0014f	68 00 00 00 00	 push	 OFFSET _cv_viewheight
  00154	e8 00 00 00 00	 call	 _CV_RegisterVar
  00159	83 c4 04	 add	 esp, 4

; 958  : 	CV_RegisterVar (&cv_limitdraw);

  0015c	68 00 00 00 00	 push	 OFFSET _cv_limitdraw
  00161	e8 00 00 00 00	 call	 _CV_RegisterVar
  00166	83 c4 04	 add	 esp, 4

; 959  : 	CV_RegisterVar(&cv_grtranslucenthud);

  00169	68 00 00 00 00	 push	 OFFSET _cv_grtranslucenthud
  0016e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00173	83 c4 04	 add	 esp, 4

; 960  : 
; 961  : #ifdef HWRENDER
; 962  : 	// GL-specific Commands
; 963  : 	CV_RegisterVar(&cv_grgammablue);

  00176	68 00 00 00 00	 push	 OFFSET _cv_grgammablue
  0017b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00180	83 c4 04	 add	 esp, 4

; 964  : 	CV_RegisterVar(&cv_grgammagreen);

  00183	68 00 00 00 00	 push	 OFFSET _cv_grgammagreen
  00188	e8 00 00 00 00	 call	 _CV_RegisterVar
  0018d	83 c4 04	 add	 esp, 4

; 965  : 	CV_RegisterVar(&cv_grgammared);

  00190	68 00 00 00 00	 push	 OFFSET _cv_grgammared
  00195	e8 00 00 00 00	 call	 _CV_RegisterVar
  0019a	83 c4 04	 add	 esp, 4

; 966  : 	CV_RegisterVar(&cv_grfovchange);

  0019d	68 00 00 00 00	 push	 OFFSET _cv_grfovchange
  001a2	e8 00 00 00 00	 call	 _CV_RegisterVar
  001a7	83 c4 04	 add	 esp, 4

; 967  : 	CV_RegisterVar(&cv_grfog);

  001aa	68 00 00 00 00	 push	 OFFSET _cv_grfog
  001af	e8 00 00 00 00	 call	 _CV_RegisterVar
  001b4	83 c4 04	 add	 esp, 4

; 968  : 	CV_RegisterVar(&cv_grfogcolor);

  001b7	68 00 00 00 00	 push	 OFFSET _cv_grfogcolor
  001bc	e8 00 00 00 00	 call	 _CV_RegisterVar
  001c1	83 c4 04	 add	 esp, 4

; 969  : 	CV_RegisterVar(&cv_grsoftwarefog);

  001c4	68 00 00 00 00	 push	 OFFSET _cv_grsoftwarefog
  001c9	e8 00 00 00 00	 call	 _CV_RegisterVar
  001ce	83 c4 04	 add	 esp, 4

; 970  : #endif
; 971  : 
; 972  : #ifdef HWRENDER
; 973  : 	if (rendermode != render_soft && rendermode != render_none)

  001d1	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  001d8	74 0f		 je	 SHORT $LN3@R_Register
  001da	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  001e1	74 06		 je	 SHORT $LN3@R_Register

; 974  : 		HWR_AddCommands();

  001e3	e8 00 00 00 00	 call	 _HWR_AddCommands
  001e8	90		 npad	 1
$LN3@R_Register:

; 975  : #endif
; 976  : }

  001e9	5f		 pop	 edi
  001ea	5e		 pop	 esi
  001eb	5b		 pop	 ebx
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c3		 ret	 0
_R_RegisterEngineStuff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_RenderPlayerView
_TEXT	SEGMENT
_player$ = 8						; size = 4
_R_RenderPlayerView PROC				; COMDAT

; 861  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 862  : 	R_SetupFrame(player);

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _R_SetupFrame
  00012	83 c4 04	 add	 esp, 4

; 863  : 
; 864  : 	// Clear buffers.
; 865  : 	R_ClearClipSegs();

  00015	e8 00 00 00 00	 call	 _R_ClearClipSegs
  0001a	90		 npad	 1

; 866  : 	R_ClearDrawSegs();

  0001b	e8 00 00 00 00	 call	 _R_ClearDrawSegs
  00020	90		 npad	 1

; 867  : 	R_ClearPlanes();

  00021	e8 00 00 00 00	 call	 _R_ClearPlanes
  00026	90		 npad	 1

; 868  : 	R_ClearSprites();

  00027	e8 00 00 00 00	 call	 _R_ClearSprites
  0002c	90		 npad	 1

; 869  : 
; 870  : #ifdef FLOORSPLATS
; 871  : 	R_ClearVisibleFloorSplats();
; 872  : #endif
; 873  : 
; 874  : 	if (cv_homremoval.value && player == &players[displayplayer]) // if this is display player 1

  0002d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_homremoval+20, 0
  00034	74 2f		 je	 SHORT $LN2@R_RenderPl
  00036	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00040	05 00 00 00 00	 add	 eax, OFFSET _players
  00045	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00048	75 1b		 jne	 SHORT $LN2@R_RenderPl

; 875  : 		V_DrawFill(0, 0, vid.width, vid.height, 31); // No HOM effect!

  0004a	6a 1f		 push	 31			; 0000001fH
  0004c	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00051	50		 push	 eax
  00052	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00058	51		 push	 ecx
  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	e8 00 00 00 00	 call	 _V_DrawFill
  00062	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@R_RenderPl:

; 876  : 
; 877  : 	// check for new console commands.
; 878  : 	NetUpdate();

  00065	e8 00 00 00 00	 call	 _NetUpdate
  0006a	90		 npad	 1

; 879  : 
; 880  : 	// The head node is the last node output.
; 881  : 
; 882  : //profile stuff ---------------------------------------------------------
; 883  : #ifdef TIMING
; 884  : 	mytotal = 0;
; 885  : 	ProfZeroTimer();
; 886  : #endif
; 887  : 	R_RenderBSPNode((INT32)numnodes - 1);

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR _numnodes
  00070	83 e8 01	 sub	 eax, 1
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _R_RenderBSPNode
  00079	83 c4 04	 add	 esp, 4

; 888  : #ifdef TIMING
; 889  : 	RDMSR(0x10, &mycount);
; 890  : 	mytotal += mycount; // 64bit add
; 891  : 
; 892  : 	CONS_Printf("RenderBSPNode: 0x%d %d\n", *((INT32 *)&mytotal + 1), (INT32)mytotal);
; 893  : #endif
; 894  : //profile stuff ---------------------------------------------------------
; 895  : 
; 896  : 	// Check for new console commands.
; 897  : 	NetUpdate();

  0007c	e8 00 00 00 00	 call	 _NetUpdate
  00081	90		 npad	 1

; 898  : 
; 899  : 	R_DrawPlanes();

  00082	e8 00 00 00 00	 call	 _R_DrawPlanes
  00087	90		 npad	 1

; 900  : 
; 901  : 	// Check for new console commands.
; 902  : 	NetUpdate();

  00088	e8 00 00 00 00	 call	 _NetUpdate
  0008d	90		 npad	 1

; 903  : 
; 904  : #ifdef FLOORSPLATS
; 905  : 	R_DrawVisibleFloorSplats();
; 906  : #endif
; 907  : 
; 908  : 	// draw mid texture and sprite
; 909  : 	// And now 3D floors/sides!
; 910  : 	R_DrawMasked();

  0008e	e8 00 00 00 00	 call	 _R_DrawMasked
  00093	90		 npad	 1

; 911  : 
; 912  : 	// Check for new console commands.
; 913  : 	NetUpdate();

  00094	e8 00 00 00 00	 call	 _NetUpdate
  00099	90		 npad	 1

; 914  : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_R_RenderPlayerView ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SetupFrame
_TEXT	SEGMENT
_thiscam$ = -8						; size = 4
_dy$ = -4						; size = 4
_player$ = 8						; size = 4
_R_SetupFrame PROC					; COMDAT

; 718  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 719  : 	INT32 dy = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dy$[ebp], 0

; 720  : 	camera_t *thiscam;
; 721  : 
; 722  : 	if (splitscreen && player == &players[secondarydisplayplayer]
; 723  : 		&& player != &players[consoleplayer])

  00010	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00017	74 31		 je	 SHORT $LN2@R_SetupFra
  00019	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00023	05 00 00 00 00	 add	 eax, OFFSET _players
  00028	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0002b	75 1d		 jne	 SHORT $LN2@R_SetupFra
  0002d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00037	05 00 00 00 00	 add	 eax, OFFSET _players
  0003c	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  0003f	74 09		 je	 SHORT $LN2@R_SetupFra

; 724  : 	{
; 725  : 		thiscam = &camera2;

  00041	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera2

; 726  : 	}

  00048	eb 07		 jmp	 SHORT $LN3@R_SetupFra
$LN2@R_SetupFra:

; 727  : 	else
; 728  : 		thiscam = &camera;

  0004a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _thiscam$[ebp], OFFSET _camera
$LN3@R_SetupFra:

; 729  : 
; 730  : 	if (cv_chasecam.value && thiscam == &camera && !thiscam->chase)

  00051	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00058	74 2d		 je	 SHORT $LN4@R_SetupFra
  0005a	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  00061	75 24		 jne	 SHORT $LN4@R_SetupFra
  00063	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00066	83 38 00	 cmp	 DWORD PTR [eax], 0
  00069	75 1c		 jne	 SHORT $LN4@R_SetupFra

; 731  : 	{
; 732  : 		P_ResetCamera(player, &camera);

  0006b	68 00 00 00 00	 push	 OFFSET _camera
  00070	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _P_ResetCamera
  00079	83 c4 08	 add	 esp, 8

; 733  : 		thiscam->chase = true;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0007f	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 734  : 	}

  00085	eb 6e		 jmp	 SHORT $LN10@R_SetupFra
$LN4@R_SetupFra:

; 735  : 	else if (cv_chasecam2.value && thiscam == &camera2 && !thiscam->chase)

  00087	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0008e	74 2d		 je	 SHORT $LN6@R_SetupFra
  00090	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  00097	75 24		 jne	 SHORT $LN6@R_SetupFra
  00099	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0009c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009f	75 1c		 jne	 SHORT $LN6@R_SetupFra

; 736  : 	{
; 737  : 		P_ResetCamera(player, &camera2);

  000a1	68 00 00 00 00	 push	 OFFSET _camera2
  000a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _P_ResetCamera
  000af	83 c4 08	 add	 esp, 8

; 738  : 		thiscam->chase = true;

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000b5	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 739  : 	}

  000bb	eb 38		 jmp	 SHORT $LN10@R_SetupFra
$LN6@R_SetupFra:

; 740  : 	else if (!cv_chasecam.value && thiscam == &camera)

  000bd	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  000c4	75 14		 jne	 SHORT $LN8@R_SetupFra
  000c6	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  000cd	75 0b		 jne	 SHORT $LN8@R_SetupFra

; 741  : 		thiscam->chase = false;

  000cf	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000d2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000d8	eb 1b		 jmp	 SHORT $LN10@R_SetupFra
$LN8@R_SetupFra:

; 742  : 	else if (!cv_chasecam2.value && thiscam == &camera2)

  000da	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  000e1	75 12		 jne	 SHORT $LN10@R_SetupFra
  000e3	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  000ea	75 09		 jne	 SHORT $LN10@R_SetupFra

; 743  : 		thiscam->chase = false;

  000ec	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  000ef	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN10@R_SetupFra:

; 744  : 
; 745  : 	if (player->awayviewtics)

  000f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f8	83 b8 ec 01 00
	00 00		 cmp	 DWORD PTR [eax+492], 0
  000ff	74 42		 je	 SHORT $LN11@R_SetupFra

; 746  : 	{
; 747  : 		// cut-away view stuff
; 748  : 		viewmobj = player->awayviewmobj; // should be a MT_ALTVIEWMAN

  00101	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00104	8b 88 e8 01 00
	00		 mov	 ecx, DWORD PTR [eax+488]
  0010a	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewmobj, ecx

; 749  : 		viewz = viewmobj->z + 20*FRACUNIT;

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewmobj
  00115	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00118	81 c1 00 00 14
	00		 add	 ecx, 1310720		; 00140000H
  0011e	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewz, ecx

; 750  : 		aimingangle = player->awayviewaiming;

  00124	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00127	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0012a	89 0d 00 00 00
	00		 mov	 DWORD PTR _aimingangle, ecx

; 751  : 		viewangle = viewmobj->angle;

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewmobj
  00135	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00138	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewangle, ecx

; 752  : 	}

  0013e	e9 f5 00 00 00	 jmp	 $LN20@R_SetupFra
$LN11@R_SetupFra:

; 753  : 	else if ((cv_chasecam.value && thiscam == &camera)
; 754  : 		|| (cv_chasecam2.value && thiscam == &camera2))

  00143	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  0014a	74 09		 je	 SHORT $LN16@R_SetupFra
  0014c	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  00153	74 12		 je	 SHORT $LN15@R_SetupFra
$LN16@R_SetupFra:
  00155	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0015c	74 45		 je	 SHORT $LN13@R_SetupFra
  0015e	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  00165	75 3c		 jne	 SHORT $LN13@R_SetupFra
$LN15@R_SetupFra:

; 755  : 	// use outside cam view
; 756  : 	{
; 757  : 		viewmobj = player->mo; // LIES! FILTHY STINKING LIES!!!

  00167	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewmobj, ecx

; 758  : 		I_Assert(viewmobj != NULL);
; 759  : 		viewz = thiscam->z + (thiscam->height>>1);

  00172	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00175	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00178	d1 f9		 sar	 ecx, 1
  0017a	8b 55 f8	 mov	 edx, DWORD PTR _thiscam$[ebp]
  0017d	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  00180	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewz, ecx

; 760  : 		aimingangle = thiscam->aiming;

  00186	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00189	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0018c	89 0d 00 00 00
	00		 mov	 DWORD PTR _aimingangle, ecx

; 761  : 		viewangle = thiscam->angle;

  00192	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00195	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00198	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewangle, ecx

; 762  : 	}

  0019e	e9 95 00 00 00	 jmp	 $LN20@R_SetupFra
$LN13@R_SetupFra:

; 763  : 	else
; 764  : 	// use the player's eyes view
; 765  : 	{
; 766  : 		viewz = player->viewz;

  001a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001a6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001a9	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewz, ecx

; 767  : 
; 768  : 		viewmobj = player->mo;

  001af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b4	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewmobj, ecx

; 769  : 
; 770  : 		aimingangle = player->aiming;

  001ba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001bd	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001c0	89 0d 00 00 00
	00		 mov	 DWORD PTR _aimingangle, ecx

; 771  : 		viewangle = viewmobj->angle;

  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewmobj
  001cb	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001ce	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewangle, ecx

; 772  : 
; 773  : 		if (!demoplayback && player->playerstate != PST_DEAD)

  001d4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  001db	75 5b		 jne	 SHORT $LN20@R_SetupFra
  001dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e0	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  001e4	74 52		 je	 SHORT $LN20@R_SetupFra

; 774  : 		{
; 775  : 			if (player == &players[consoleplayer])

  001e6	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  001f0	05 00 00 00 00	 add	 eax, OFFSET _players
  001f5	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  001f8	75 16		 jne	 SHORT $LN18@R_SetupFra

; 776  : 			{
; 777  : 				viewangle = localangle; // WARNING: camera uses this

  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _localangle
  001ff	a3 00 00 00 00	 mov	 DWORD PTR _viewangle, eax

; 778  : 				aimingangle = localaiming;

  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming
  00209	a3 00 00 00 00	 mov	 DWORD PTR _aimingangle, eax

; 779  : 			}

  0020e	eb 28		 jmp	 SHORT $LN20@R_SetupFra
$LN18@R_SetupFra:

; 780  : 			else if (player == &players[secondarydisplayplayer])

  00210	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0021a	05 00 00 00 00	 add	 eax, OFFSET _players
  0021f	39 45 08	 cmp	 DWORD PTR _player$[ebp], eax
  00222	75 14		 jne	 SHORT $LN20@R_SetupFra

; 781  : 			{
; 782  : 				viewangle = localangle2;

  00224	a1 00 00 00 00	 mov	 eax, DWORD PTR _localangle2
  00229	a3 00 00 00 00	 mov	 DWORD PTR _viewangle, eax

; 783  : 				aimingangle = localaiming2;

  0022e	a1 00 00 00 00	 mov	 eax, DWORD PTR _localaiming2
  00233	a3 00 00 00 00	 mov	 DWORD PTR _aimingangle, eax
$LN20@R_SetupFra:

; 784  : 			}
; 785  : 		}
; 786  : 	}
; 787  : 
; 788  : 	if (!viewmobj)

  00238	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _viewmobj, 0
  0023f	75 05		 jne	 SHORT $LN21@R_SetupFra

; 789  : #ifdef PARANOIA
; 790  : 		{
; 791  : 			const size_t playeri = (size_t)(player - players);
; 792  : 			I_Error("R_SetupFrame: viewmobj null (player %"PRIdS")", playeri);
; 793  : 		}
; 794  : #else
; 795  : 		return;

  00241	e9 f3 01 00 00	 jmp	 $LN1@R_SetupFra
$LN21@R_SetupFra:

; 796  : #endif
; 797  : 
; 798  : 	viewplayer = player;

  00246	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00249	a3 00 00 00 00	 mov	 DWORD PTR _viewplayer, eax

; 799  : 
; 800  : 	if (((cv_chasecam.value && thiscam == &camera) || (cv_chasecam2.value && thiscam == &camera2))
; 801  : 		&& !player->awayviewtics)

  0024e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00255	74 09		 je	 SHORT $LN25@R_SetupFra
  00257	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera
  0025e	74 12		 je	 SHORT $LN24@R_SetupFra
$LN25@R_SetupFra:
  00260	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  00267	74 65		 je	 SHORT $LN22@R_SetupFra
  00269	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _thiscam$[ebp], OFFSET _camera2
  00270	75 5c		 jne	 SHORT $LN22@R_SetupFra
$LN24@R_SetupFra:
  00272	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00275	83 b8 ec 01 00
	00 00		 cmp	 DWORD PTR [eax+492], 0
  0027c	75 50		 jne	 SHORT $LN22@R_SetupFra

; 802  : 	{
; 803  : 		viewx = thiscam->x;

  0027e	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00281	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00284	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewx, ecx

; 804  : 		viewy = thiscam->y;

  0028a	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  0028d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00290	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewy, ecx

; 805  : 
; 806  : 		if (thiscam->subsector)

  00296	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  00299	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0029d	74 10		 je	 SHORT $LN26@R_SetupFra

; 807  : 			viewsector = thiscam->subsector->sector;

  0029f	8b 45 f8	 mov	 eax, DWORD PTR _thiscam$[ebp]
  002a2	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a7	89 15 00 00 00
	00		 mov	 DWORD PTR _viewsector, edx
  002ad	eb 1d		 jmp	 SHORT $LN27@R_SetupFra
$LN26@R_SetupFra:

; 808  : 		else
; 809  : 			viewsector = R_PointInSubsector(viewx, viewy)->sector;

  002af	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewy
  002b4	50		 push	 eax
  002b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewx
  002bb	51		 push	 ecx
  002bc	e8 00 00 00 00	 call	 _R_PointInSubsector
  002c1	83 c4 08	 add	 esp, 8
  002c4	8b 10		 mov	 edx, DWORD PTR [eax]
  002c6	89 15 00 00 00
	00		 mov	 DWORD PTR _viewsector, edx
$LN27@R_SetupFra:

; 810  : 	}

  002cc	eb 56		 jmp	 SHORT $LN29@R_SetupFra
$LN22@R_SetupFra:

; 811  : 	else
; 812  : 	{
; 813  : 		viewx = viewmobj->x;

  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewmobj
  002d3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002d6	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewx, ecx

; 814  : 		viewy = viewmobj->y;

  002dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewmobj
  002e1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002e4	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewy, ecx

; 815  : 
; 816  : 		if (viewmobj->subsector)

  002ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewmobj
  002ef	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  002f3	74 12		 je	 SHORT $LN28@R_SetupFra

; 817  : 			viewsector = viewmobj->subsector->sector;

  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewmobj
  002fa	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  002fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ff	89 15 00 00 00
	00		 mov	 DWORD PTR _viewsector, edx
  00305	eb 1d		 jmp	 SHORT $LN29@R_SetupFra
$LN28@R_SetupFra:

; 818  : 		else
; 819  : 			viewsector = R_PointInSubsector(viewx, viewy)->sector;

  00307	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewy
  0030c	50		 push	 eax
  0030d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _viewx
  00313	51		 push	 ecx
  00314	e8 00 00 00 00	 call	 _R_PointInSubsector
  00319	83 c4 08	 add	 esp, 8
  0031c	8b 10		 mov	 edx, DWORD PTR [eax]
  0031e	89 15 00 00 00
	00		 mov	 DWORD PTR _viewsector, edx
$LN29@R_SetupFra:

; 820  : 	}
; 821  : 
; 822  : 	viewsin = FINESINE(viewangle>>ANGLETOFINESHIFT);

  00324	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewangle
  00329	c1 e8 13	 shr	 eax, 19			; 00000013H
  0032c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00333	89 0d 00 00 00
	00		 mov	 DWORD PTR _viewsin, ecx

; 823  : 	viewcos = FINECOSINE(viewangle>>ANGLETOFINESHIFT);

  00339	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewangle
  0033e	c1 e8 13	 shr	 eax, 19			; 00000013H
  00341	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00347	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0034a	89 15 00 00 00
	00		 mov	 DWORD PTR _viewcos, edx

; 824  : 
; 825  : 	sscount = 0;

  00350	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sscount, 0

; 826  : 
; 827  : 	// recalc necessary stuff for mouseaiming
; 828  : 	// slopes are already calculated for the full possible view (which is 4*viewheight).
; 829  : 
; 830  : 	if (rendermode == render_soft)

  0035a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00361	0f 85 99 00 00
	00		 jne	 $LN30@R_SetupFra

; 831  : 	{
; 832  : 		// clip it in the case we are looking a hardware 90 degrees full aiming
; 833  : 		// (lmps, network and use F12...)
; 834  : 		G_ClipAimingPitch((INT32 *)&aimingangle);

  00367	68 00 00 00 00	 push	 OFFSET _aimingangle
  0036c	e8 00 00 00 00	 call	 _G_ClipAimingPitch
  00371	83 c4 04	 add	 esp, 4

; 835  : 
; 836  : 		if (!splitscreen)

  00374	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0037b	75 34		 jne	 SHORT $LN31@R_SetupFra

; 837  : 			dy = AIMINGTODY(aimingangle) * viewheight/BASEVIDHEIGHT;

  0037d	a1 00 00 00 00	 mov	 eax, DWORD PTR _aimingangle
  00382	c1 f8 13	 sar	 eax, 19			; 00000013H
  00385	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  0038a	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  0038f	69 04 85 00 00
	00 00 a0 00 00
	00		 imul	 eax, DWORD PTR _finetangent[eax*4], 160
  0039a	c1 f8 10	 sar	 eax, 16			; 00000010H
  0039d	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _viewheight
  003a4	99		 cdq
  003a5	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  003aa	f7 f9		 idiv	 ecx
  003ac	89 45 fc	 mov	 DWORD PTR _dy$[ebp], eax
  003af	eb 34		 jmp	 SHORT $LN32@R_SetupFra
$LN31@R_SetupFra:

; 838  : 		else
; 839  : 			dy = AIMINGTODY(aimingangle) * viewheight*2/BASEVIDHEIGHT;

  003b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _aimingangle
  003b6	c1 f8 13	 sar	 eax, 19			; 00000013H
  003b9	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  003be	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  003c3	69 04 85 00 00
	00 00 a0 00 00
	00		 imul	 eax, DWORD PTR _finetangent[eax*4], 160
  003ce	c1 f8 10	 sar	 eax, 16			; 00000010H
  003d1	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _viewheight
  003d8	d1 e0		 shl	 eax, 1
  003da	99		 cdq
  003db	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  003e0	f7 f9		 idiv	 ecx
  003e2	89 45 fc	 mov	 DWORD PTR _dy$[ebp], eax
$LN32@R_SetupFra:

; 840  : 
; 841  : 		yslope = &yslopetab[(3*viewheight/2) - dy];

  003e5	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR _viewheight, 3
  003ec	99		 cdq
  003ed	2b c2		 sub	 eax, edx
  003ef	d1 f8		 sar	 eax, 1
  003f1	2b 45 fc	 sub	 eax, DWORD PTR _dy$[ebp]
  003f4	8d 04 85 00 00
	00 00		 lea	 eax, DWORD PTR _yslopetab[eax*4]
  003fb	a3 00 00 00 00	 mov	 DWORD PTR _yslope, eax
$LN30@R_SetupFra:

; 842  : 	}
; 843  : 	centery = (viewheight/2) + dy;

  00400	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  00405	99		 cdq
  00406	2b c2		 sub	 eax, edx
  00408	d1 f8		 sar	 eax, 1
  0040a	03 45 fc	 add	 eax, DWORD PTR _dy$[ebp]
  0040d	a3 00 00 00 00	 mov	 DWORD PTR _centery, eax

; 844  : 	centeryfrac = centery<<FRACBITS;

  00412	a1 00 00 00 00	 mov	 eax, DWORD PTR _centery
  00417	c1 e0 10	 shl	 eax, 16			; 00000010H
  0041a	a3 00 00 00 00	 mov	 DWORD PTR _centeryfrac, eax

; 845  : 
; 846  : 	framecount++;

  0041f	a1 00 00 00 00	 mov	 eax, DWORD PTR _framecount
  00424	83 c0 01	 add	 eax, 1
  00427	a3 00 00 00 00	 mov	 DWORD PTR _framecount, eax

; 847  : 	validcount++;

  0042c	a1 00 00 00 00	 mov	 eax, DWORD PTR _validcount
  00431	83 c0 01	 add	 eax, 1
  00434	a3 00 00 00 00	 mov	 DWORD PTR _validcount, eax
$LN1@R_SetupFra:

; 848  : }

  00439	5f		 pop	 edi
  0043a	5e		 pop	 esi
  0043b	5b		 pop	 ebx
  0043c	8b e5		 mov	 esp, ebp
  0043e	5d		 pop	 ebp
  0043f	c3		 ret	 0
_R_SetupFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_ExecuteSetViewSize
_TEXT	SEGMENT
_aspectx$ = -28						; size = 4
_startmapl$ = -24					; size = 4
_level$ = -20						; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_dy$ = -8						; size = 4
_cosadj$ = -4						; size = 4
_R_ExecuteSetViewSize PROC				; COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 532  : 	fixed_t cosadj;
; 533  : 	fixed_t dy;
; 534  : 	INT32 i;
; 535  : 	INT32 j;
; 536  : 	INT32 level;
; 537  : 	INT32 startmapl;
; 538  : 	INT32 aspectx;  //added : 02-02-98 : for aspect ratio calc. below...
; 539  : 
; 540  : 	setsizeneeded = false;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setsizeneeded, 0

; 541  : 
; 542  : 	if (rendermode == render_none)

  00013	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  0001a	75 05		 jne	 SHORT $LN17@R_ExecuteS

; 543  : 		return;

  0001c	e9 bb 02 00 00	 jmp	 $LN1@R_ExecuteS
$LN17@R_ExecuteS:

; 544  : 
; 545  : 	// status bar overlay
; 546  : 	st_overlay = cv_showhud.value;

  00021	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_showhud+20
  00026	a3 00 00 00 00	 mov	 DWORD PTR _st_overlay, eax

; 547  : 
; 548  : 	scaledviewwidth = vid.width;

  0002b	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00030	a3 00 00 00 00	 mov	 DWORD PTR _scaledviewwidth, eax

; 549  : 	viewheight = vid.height;

  00035	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0003a	a3 00 00 00 00	 mov	 DWORD PTR _viewheight, eax

; 550  : 
; 551  : 	if (splitscreen)

  0003f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00046	74 0c		 je	 SHORT $LN18@R_ExecuteS

; 552  : 		viewheight >>= 1;

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  0004d	d1 f8		 sar	 eax, 1
  0004f	a3 00 00 00 00	 mov	 DWORD PTR _viewheight, eax
$LN18@R_ExecuteS:

; 553  : 
; 554  : 	viewwidth = scaledviewwidth;

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR _scaledviewwidth
  00059	a3 00 00 00 00	 mov	 DWORD PTR _viewwidth, eax

; 555  : 
; 556  : 	centery = viewheight/2;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  00063	99		 cdq
  00064	2b c2		 sub	 eax, edx
  00066	d1 f8		 sar	 eax, 1
  00068	a3 00 00 00 00	 mov	 DWORD PTR _centery, eax

; 557  : 	centerx = viewwidth/2;

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewwidth
  00072	99		 cdq
  00073	2b c2		 sub	 eax, edx
  00075	d1 f8		 sar	 eax, 1
  00077	a3 00 00 00 00	 mov	 DWORD PTR _centerx, eax

; 558  : 	centerxfrac = centerx<<FRACBITS;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerx
  00081	c1 e0 10	 shl	 eax, 16			; 00000010H
  00084	a3 00 00 00 00	 mov	 DWORD PTR _centerxfrac, eax

; 559  : 	centeryfrac = centery<<FRACBITS;

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR _centery
  0008e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00091	a3 00 00 00 00	 mov	 DWORD PTR _centeryfrac, eax

; 560  : 
; 561  : 	projection = centerxfrac;

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR _centerxfrac
  0009b	a3 00 00 00 00	 mov	 DWORD PTR _projection, eax

; 562  : 	projectiony = (((vid.height*centerx*BASEVIDWIDTH)/BASEVIDHEIGHT)/vid.width)<<FRACBITS;

  000a0	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  000a5	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _centerx
  000ac	69 c0 40 01 00
	00		 imul	 eax, eax, 320
  000b2	99		 cdq
  000b3	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  000b8	f7 f9		 idiv	 ecx
  000ba	99		 cdq
  000bb	f7 3d 0c 00 00
	00		 idiv	 DWORD PTR _vid+12
  000c1	c1 e0 10	 shl	 eax, 16			; 00000010H
  000c4	a3 00 00 00 00	 mov	 DWORD PTR _projectiony, eax

; 563  : 
; 564  : 	R_InitViewBuffer(scaledviewwidth, viewheight);

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  000ce	50		 push	 eax
  000cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scaledviewwidth
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _R_InitViewBuffer
  000db	83 c4 08	 add	 esp, 8

; 565  : 
; 566  : 	R_InitTextureMapping();

  000de	e8 00 00 00 00	 call	 _R_InitTextureMapping
  000e3	90		 npad	 1

; 567  : 
; 568  : #ifdef HWRENDER
; 569  : 	if (rendermode != render_soft)

  000e4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  000eb	74 06		 je	 SHORT $LN19@R_ExecuteS

; 570  : 		HWR_InitTextureMapping();

  000ed	e8 00 00 00 00	 call	 _HWR_InitTextureMapping
  000f2	90		 npad	 1
$LN19@R_ExecuteS:

; 571  : #endif
; 572  : 
; 573  : 	// thing clipping
; 574  : 	for (i = 0; i < viewwidth; i++)

  000f3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000fa	eb 09		 jmp	 SHORT $LN4@R_ExecuteS
$LN2@R_ExecuteS:
  000fc	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000ff	83 c0 01	 add	 eax, 1
  00102	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@R_ExecuteS:
  00105	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00108	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _viewwidth
  0010e	7d 14		 jge	 SHORT $LN3@R_ExecuteS

; 575  : 		screenheightarray[i] = (INT16)viewheight;

  00110	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00113	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _viewheight
  0011a	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _screenheightarray[eax*2], cx
  00122	eb d8		 jmp	 SHORT $LN2@R_ExecuteS
$LN3@R_ExecuteS:

; 576  : 
; 577  : 	// setup sky scaling (uses pspriteyscale)
; 578  : 	R_SetSkyScale();

  00124	e8 00 00 00 00	 call	 _R_SetSkyScale
  00129	90		 npad	 1

; 579  : 
; 580  : 	// planes
; 581  : 	aspectx = (((vid.height*centerx*BASEVIDWIDTH)/BASEVIDHEIGHT)/vid.width);

  0012a	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0012f	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _centerx
  00136	69 c0 40 01 00
	00		 imul	 eax, eax, 320
  0013c	99		 cdq
  0013d	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00142	f7 f9		 idiv	 ecx
  00144	99		 cdq
  00145	f7 3d 0c 00 00
	00		 idiv	 DWORD PTR _vid+12
  0014b	89 45 e4	 mov	 DWORD PTR _aspectx$[ebp], eax

; 582  : 
; 583  : 	if (rendermode == render_soft)

  0014e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00155	75 6b		 jne	 SHORT $LN6@R_ExecuteS

; 584  : 	{
; 585  : 		// this is only used for planes rendering in software mode
; 586  : 		j = viewheight*4;

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  0015c	c1 e0 02	 shl	 eax, 2
  0015f	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax

; 587  : 		for (i = 0; i < j; i++)

  00162	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00169	eb 09		 jmp	 SHORT $LN7@R_ExecuteS
$LN5@R_ExecuteS:
  0016b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0016e	83 c0 01	 add	 eax, 1
  00171	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN7@R_ExecuteS:
  00174	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00177	3b 45 f0	 cmp	 eax, DWORD PTR _j$[ebp]
  0017a	7d 46		 jge	 SHORT $LN6@R_ExecuteS

; 588  : 		{
; 589  : 			dy = ((i - viewheight*2)<<FRACBITS) + FRACUNIT/2;

  0017c	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewheight
  00181	d1 e0		 shl	 eax, 1
  00183	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00186	2b c8		 sub	 ecx, eax
  00188	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0018b	81 c1 00 80 00
	00		 add	 ecx, 32768		; 00008000H
  00191	89 4d f8	 mov	 DWORD PTR _dy$[ebp], ecx

; 590  : 			dy = abs(dy);

  00194	8b 45 f8	 mov	 eax, DWORD PTR _dy$[ebp]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _abs
  0019d	83 c4 04	 add	 esp, 4
  001a0	89 45 f8	 mov	 DWORD PTR _dy$[ebp], eax

; 591  : 			yslopetab[i] = FixedDiv(aspectx*FRACUNIT, dy);

  001a3	8b 45 f8	 mov	 eax, DWORD PTR _dy$[ebp]
  001a6	50		 push	 eax
  001a7	8b 4d e4	 mov	 ecx, DWORD PTR _aspectx$[ebp]
  001aa	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 _FixedDiv
  001b3	83 c4 08	 add	 esp, 8
  001b6	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  001b9	89 04 95 00 00
	00 00		 mov	 DWORD PTR _yslopetab[edx*4], eax

; 592  : 		}

  001c0	eb a9		 jmp	 SHORT $LN5@R_ExecuteS
$LN6@R_ExecuteS:

; 593  : 	}
; 594  : 
; 595  : 	for (i = 0; i < viewwidth; i++)

  001c2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001c9	eb 09		 jmp	 SHORT $LN10@R_ExecuteS
$LN8@R_ExecuteS:
  001cb	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001ce	83 c0 01	 add	 eax, 1
  001d1	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN10@R_ExecuteS:
  001d4	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001d7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _viewwidth
  001dd	7d 3f		 jge	 SHORT $LN9@R_ExecuteS

; 596  : 	{
; 597  : 		cosadj = abs(FINECOSINE(xtoviewangle[i]>>ANGLETOFINESHIFT));

  001df	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001e2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _xtoviewangle[eax*4]
  001e9	c1 e9 13	 shr	 ecx, 19			; 00000013H
  001ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  001f2	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 _abs
  001fb	83 c4 04	 add	 esp, 4
  001fe	89 45 fc	 mov	 DWORD PTR _cosadj$[ebp], eax

; 598  : 		distscale[i] = FixedDiv(FRACUNIT, cosadj);

  00201	8b 45 fc	 mov	 eax, DWORD PTR _cosadj$[ebp]
  00204	50		 push	 eax
  00205	68 00 00 01 00	 push	 65536			; 00010000H
  0020a	e8 00 00 00 00	 call	 _FixedDiv
  0020f	83 c4 08	 add	 esp, 8
  00212	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00215	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _distscale[ecx*4], eax

; 599  : 	}

  0021c	eb ad		 jmp	 SHORT $LN8@R_ExecuteS
$LN9@R_ExecuteS:

; 600  : 
; 601  : 	// Calculate the light levels to use for each level/scale combination.
; 602  : 	for (i = 0; i< LIGHTLEVELS; i++)

  0021e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00225	eb 09		 jmp	 SHORT $LN13@R_ExecuteS
$LN11@R_ExecuteS:
  00227	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0022a	83 c0 01	 add	 eax, 1
  0022d	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN13@R_ExecuteS:
  00230	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00234	0f 8d 89 00 00
	00		 jge	 $LN12@R_ExecuteS

; 603  : 	{
; 604  : 		startmapl = ((LIGHTLEVELS - 1 - i)*2)*NUMCOLORMAPS/LIGHTLEVELS;

  0023a	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0023f	2b 45 f4	 sub	 eax, DWORD PTR _i$[ebp]
  00242	d1 e0		 shl	 eax, 1
  00244	c1 e0 05	 shl	 eax, 5
  00247	99		 cdq
  00248	83 e2 1f	 and	 edx, 31			; 0000001fH
  0024b	03 c2		 add	 eax, edx
  0024d	c1 f8 05	 sar	 eax, 5
  00250	89 45 e8	 mov	 DWORD PTR _startmapl$[ebp], eax

; 605  : 		for (j = 0; j < MAXLIGHTSCALE; j++)

  00253	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0025a	eb 09		 jmp	 SHORT $LN16@R_ExecuteS
$LN14@R_ExecuteS:
  0025c	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0025f	83 c0 01	 add	 eax, 1
  00262	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN16@R_ExecuteS:
  00265	83 7d f0 30	 cmp	 DWORD PTR _j$[ebp], 48	; 00000030H
  00269	7d 53		 jge	 SHORT $LN15@R_ExecuteS

; 606  : 		{
; 607  : 			level = startmapl - j*vid.width/(viewwidth)/DISTMAP;

  0026b	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0026e	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR _vid+12
  00275	99		 cdq
  00276	f7 3d 00 00 00
	00		 idiv	 DWORD PTR _viewwidth
  0027c	99		 cdq
  0027d	2b c2		 sub	 eax, edx
  0027f	d1 f8		 sar	 eax, 1
  00281	8b 4d e8	 mov	 ecx, DWORD PTR _startmapl$[ebp]
  00284	2b c8		 sub	 ecx, eax
  00286	89 4d ec	 mov	 DWORD PTR _level$[ebp], ecx

; 608  : 
; 609  : 			if (level < 0)

  00289	79 07		 jns	 SHORT $LN21@R_ExecuteS

; 610  : 				level = 0;

  0028b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0
$LN21@R_ExecuteS:

; 611  : 
; 612  : 			if (level >= NUMCOLORMAPS)

  00292	83 7d ec 20	 cmp	 DWORD PTR _level$[ebp], 32 ; 00000020H
  00296	7c 07		 jl	 SHORT $LN22@R_ExecuteS

; 613  : 				level = NUMCOLORMAPS - 1;

  00298	c7 45 ec 1f 00
	00 00		 mov	 DWORD PTR _level$[ebp], 31 ; 0000001fH
$LN22@R_ExecuteS:

; 614  : 
; 615  : 			scalelight[i][j] = colormaps + level*256;

  0029f	8b 45 ec	 mov	 eax, DWORD PTR _level$[ebp]
  002a2	c1 e0 08	 shl	 eax, 8
  002a5	03 05 00 00 00
	00		 add	 eax, DWORD PTR _colormaps
  002ab	69 4d f4 c0 00
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 192
  002b2	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  002b5	89 84 91 00 00
	00 00		 mov	 DWORD PTR _scalelight[ecx+edx*4], eax

; 616  : 		}

  002bc	eb 9e		 jmp	 SHORT $LN14@R_ExecuteS
$LN15@R_ExecuteS:

; 617  : 	}

  002be	e9 64 ff ff ff	 jmp	 $LN11@R_ExecuteS
$LN12@R_ExecuteS:

; 618  : 
; 619  : 	// continue to do the software setviewsize as long as we use the reference software view
; 620  : #ifdef HWRENDER
; 621  : 	if (rendermode != render_soft)

  002c3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  002ca	74 06		 je	 SHORT $LN23@R_ExecuteS

; 622  : 		HWR_SetViewSize();

  002cc	e8 00 00 00 00	 call	 _HWR_SetViewSize
  002d1	90		 npad	 1
$LN23@R_ExecuteS:

; 623  : #endif
; 624  : 
; 625  : 	am_recalc = true;

  002d2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _am_recalc, 1
$LN1@R_ExecuteS:

; 626  : }

  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	5b		 pop	 ebx
  002df	8b e5		 mov	 esp, ebp
  002e1	5d		 pop	 ebp
  002e2	c3		 ret	 0
_R_ExecuteSetViewSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SetViewSize
_TEXT	SEGMENT
_R_SetViewSize PROC					; COMDAT

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 524  : 	setsizeneeded = true;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _setsizeneeded, 1

; 525  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_R_SetViewSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_Init
_TEXT	SEGMENT
_R_Init	PROC						; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  : 	R_LoadSkinTable();

  00009	e8 00 00 00 00	 call	 _R_LoadSkinTable
  0000e	90		 npad	 1

; 635  : 
; 636  : 	// screensize independent
; 637  : 	if (devparm)

  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00016	74 0d		 je	 SHORT $LN2@R_Init

; 638  : 		CONS_Printf("\nR_InitData");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DOOKNNGA@?6R_InitData@
  0001d	e8 00 00 00 00	 call	 _CONS_Printf
  00022	83 c4 04	 add	 esp, 4
$LN2@R_Init:

; 639  : 	R_InitData();

  00025	e8 00 00 00 00	 call	 _R_InitData
  0002a	90		 npad	 1

; 640  : 
; 641  : 	if (devparm)

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00032	74 0d		 je	 SHORT $LN3@R_Init

; 642  : 		CONS_Printf("\nR_InitViewBorder");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EEPBJGIP@?6R_InitViewBorder@
  00039	e8 00 00 00 00	 call	 _CONS_Printf
  0003e	83 c4 04	 add	 esp, 4
$LN3@R_Init:

; 643  : 	R_InitViewBorder();

  00041	e8 00 00 00 00	 call	 _R_InitViewBorder
  00046	90		 npad	 1

; 644  : 	R_SetViewSize(); // setsizeneeded is set true

  00047	e8 00 00 00 00	 call	 _R_SetViewSize
  0004c	90		 npad	 1

; 645  : 
; 646  : 	if (devparm)

  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00054	74 0d		 je	 SHORT $LN4@R_Init

; 647  : 		CONS_Printf("\nR_InitPlanes");

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IPNHLHN@?6R_InitPlanes@
  0005b	e8 00 00 00 00	 call	 _CONS_Printf
  00060	83 c4 04	 add	 esp, 4
$LN4@R_Init:

; 648  : 	R_InitPlanes();

  00063	e8 00 00 00 00	 call	 _R_InitPlanes
  00068	90		 npad	 1

; 649  : 
; 650  : 	// this is now done by SCR_Recalc() at the first mode set
; 651  : 	if (devparm)

  00069	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00070	74 0d		 je	 SHORT $LN5@R_Init

; 652  : 		CONS_Printf("\nR_InitLightTables");

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GPFHMJKK@?6R_InitLightTables@
  00077	e8 00 00 00 00	 call	 _CONS_Printf
  0007c	83 c4 04	 add	 esp, 4
$LN5@R_Init:

; 653  : 	R_InitLightTables();

  0007f	e8 00 00 00 00	 call	 _R_InitLightTables
  00084	90		 npad	 1

; 654  : 
; 655  : 	if (devparm)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  0008c	74 0d		 je	 SHORT $LN6@R_Init

; 656  : 		CONS_Printf("\nR_InitTranslationTables\n");

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JPNKNDCM@?6R_InitTranslationTables?6@
  00093	e8 00 00 00 00	 call	 _CONS_Printf
  00098	83 c4 04	 add	 esp, 4
$LN6@R_Init:

; 657  : 	R_InitTranslationTables();

  0009b	e8 00 00 00 00	 call	 _R_InitTranslationTables
  000a0	90		 npad	 1

; 658  : 
; 659  : 	R_InitDrawNodes();

  000a1	e8 00 00 00 00	 call	 _R_InitDrawNodes
  000a6	90		 npad	 1

; 660  : 
; 661  : 	framecount = 0;

  000a7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _framecount, 0

; 662  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_R_Init	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_IsPointInSubsector
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_nodenum$ = -16						; size = 4
_i$ = -12						; size = 4
_side$ = -8						; size = 4
_node$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_R_IsPointInSubsector PROC				; COMDAT

; 681  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 682  : 	node_t *node;
; 683  : 	INT32 side, i;
; 684  : 	size_t nodenum;
; 685  : 	subsector_t *ret;
; 686  : 
; 687  : 	// single subsector is a special case
; 688  : 	if (numnodes == 0)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _numnodes, 0
  00010	75 0a		 jne	 SHORT $LN7@R_IsPointI

; 689  : 		return subsectors;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _subsectors
  00017	e9 ac 00 00 00	 jmp	 $LN1@R_IsPointI
$LN7@R_IsPointI:

; 690  : 
; 691  : 	nodenum = numnodes - 1;

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _numnodes
  00021	83 e8 01	 sub	 eax, 1
  00024	89 45 f0	 mov	 DWORD PTR _nodenum$[ebp], eax
$LN2@R_IsPointI:

; 692  : 
; 693  : 	while (!(nodenum & NF_SUBSECTOR))

  00027	8b 45 f0	 mov	 eax, DWORD PTR _nodenum$[ebp]
  0002a	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  0002f	75 34		 jne	 SHORT $LN3@R_IsPointI

; 694  : 	{
; 695  : 		node = &nodes[nodenum];

  00031	6b 45 f0 34	 imul	 eax, DWORD PTR _nodenum$[ebp], 52
  00035	03 05 00 00 00
	00		 add	 eax, DWORD PTR _nodes
  0003b	89 45 fc	 mov	 DWORD PTR _node$[ebp], eax

; 696  : 		side = R_PointOnSide(x, y, node);

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _node$[ebp]
  00041	50		 push	 eax
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 _R_PointOnSide
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00052	89 45 f8	 mov	 DWORD PTR _side$[ebp], eax

; 697  : 		nodenum = node->children[side];

  00055	8b 45 f8	 mov	 eax, DWORD PTR _side$[ebp]
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _node$[ebp]
  0005b	0f b7 54 41 30	 movzx	 edx, WORD PTR [ecx+eax*2+48]
  00060	89 55 f0	 mov	 DWORD PTR _nodenum$[ebp], edx

; 698  : 	}

  00063	eb c2		 jmp	 SHORT $LN2@R_IsPointI
$LN3@R_IsPointI:

; 699  : 
; 700  : 	ret = &subsectors[nodenum & ~NF_SUBSECTOR];

  00065	8b 45 f0	 mov	 eax, DWORD PTR _nodenum$[ebp]
  00068	25 ff 7f ff ff	 and	 eax, -32769		; ffff7fffH
  0006d	6b c8 14	 imul	 ecx, eax, 20
  00070	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _subsectors
  00076	89 4d ec	 mov	 DWORD PTR _ret$[ebp], ecx

; 701  : 	for (i = 0; i < ret->numlines; i++)

  00079	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00080	eb 09		 jmp	 SHORT $LN6@R_IsPointI
$LN4@R_IsPointI:
  00082	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN6@R_IsPointI:
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _ret$[ebp]
  0008e	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00092	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  00095	7d 2e		 jge	 SHORT $LN5@R_IsPointI

; 702  : 		if (R_PointOnSegSide(x, y, &segs[ret->firstline + i]))

  00097	8b 45 ec	 mov	 eax, DWORD PTR _ret$[ebp]
  0009a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0009e	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  000a1	6b d1 3c	 imul	 edx, ecx, 60
  000a4	03 15 00 00 00
	00		 add	 edx, DWORD PTR _segs
  000aa	52		 push	 edx
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _R_PointOnSegSide
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	85 c0		 test	 eax, eax
  000bd	74 04		 je	 SHORT $LN8@R_IsPointI

; 703  : 			return 0;

  000bf	33 c0		 xor	 eax, eax
  000c1	eb 05		 jmp	 SHORT $LN1@R_IsPointI
$LN8@R_IsPointI:
  000c3	eb bd		 jmp	 SHORT $LN4@R_IsPointI
$LN5@R_IsPointI:

; 704  : 
; 705  : 	return ret;

  000c5	8b 45 ec	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@R_IsPointI:

; 706  : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_R_IsPointInSubsector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_PointInSubsector
_TEXT	SEGMENT
_nodenum$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_R_PointInSubsector PROC				; COMDAT

; 668  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 669  : 	size_t nodenum = numnodes-1;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _numnodes
  0000e	83 e8 01	 sub	 eax, 1
  00011	89 45 fc	 mov	 DWORD PTR _nodenum$[ebp], eax
$LN2@R_PointInS:

; 670  : 
; 671  : 	while (!(nodenum & NF_SUBSECTOR))

  00014	8b 45 fc	 mov	 eax, DWORD PTR _nodenum$[ebp]
  00017	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  0001c	75 2f		 jne	 SHORT $LN3@R_PointInS

; 672  : 		nodenum = nodes[nodenum].children[R_PointOnSide(x, y, nodes+nodenum)];

  0001e	6b 75 fc 34	 imul	 esi, DWORD PTR _nodenum$[ebp], 52
  00022	03 35 00 00 00
	00		 add	 esi, DWORD PTR _nodes
  00028	6b 45 fc 34	 imul	 eax, DWORD PTR _nodenum$[ebp], 52
  0002c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _nodes
  00032	50		 push	 eax
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 _R_PointOnSide
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	0f b7 44 46 30	 movzx	 eax, WORD PTR [esi+eax*2+48]
  00048	89 45 fc	 mov	 DWORD PTR _nodenum$[ebp], eax
  0004b	eb c7		 jmp	 SHORT $LN2@R_PointInS
$LN3@R_PointInS:

; 673  : 
; 674  : 	return &subsectors[nodenum & ~NF_SUBSECTOR];

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _nodenum$[ebp]
  00050	25 ff 7f ff ff	 and	 eax, -32769		; ffff7fffH
  00055	6b c0 14	 imul	 eax, eax, 20
  00058	03 05 00 00 00
	00		 add	 eax, DWORD PTR _subsectors

; 675  : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_R_PointInSubsector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_ScaleFromGlobalAngle
_TEXT	SEGMENT
_num$ = -16						; size = 4
_den$ = -12						; size = 4
_angleb$ = -8						; size = 4
_anglea$ = -4						; size = 4
_visangle$ = 8						; size = 4
_R_ScaleFromGlobalAngle PROC				; COMDAT

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 389  : 	INT32 anglea = ANGLE_90 + (visangle-viewangle);

  00009	8b 45 08	 mov	 eax, DWORD PTR _visangle$[ebp]
  0000c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewangle
  00012	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00017	89 45 fc	 mov	 DWORD PTR _anglea$[ebp], eax

; 390  : 	INT32 angleb = ANGLE_90 + (visangle-rw_normalangle);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _visangle$[ebp]
  0001d	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _rw_normalangle
  00023	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00028	89 45 f8	 mov	 DWORD PTR _angleb$[ebp], eax

; 391  : 	INT32 den = FixedMul(rw_distance, FINESINE(anglea>>ANGLETOFINESHIFT));

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _anglea$[ebp]
  0002e	c1 f8 13	 sar	 eax, 19			; 00000013H
  00031	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00038	51		 push	 ecx
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rw_distance
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _FixedMul
  00045	83 c4 08	 add	 esp, 8
  00048	89 45 f4	 mov	 DWORD PTR _den$[ebp], eax

; 392  : 	// proff 11/06/98: Changed for high-res
; 393  : 	fixed_t num = FixedMul(projectiony, FINESINE(angleb>>ANGLETOFINESHIFT));

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _angleb$[ebp]
  0004e	c1 f8 13	 sar	 eax, 19			; 00000013H
  00051	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00058	51		 push	 ecx
  00059	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _projectiony
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _FixedMul
  00065	83 c4 08	 add	 esp, 8
  00068	89 45 f0	 mov	 DWORD PTR _num$[ebp], eax

; 394  : 
; 395  : 	if (den > num>>16)

  0006b	8b 45 f0	 mov	 eax, DWORD PTR _num$[ebp]
  0006e	c1 f8 10	 sar	 eax, 16			; 00000010H
  00071	39 45 f4	 cmp	 DWORD PTR _den$[ebp], eax
  00074	7e 38		 jle	 SHORT $LN2@R_ScaleFro

; 396  : 	{
; 397  : 		num = FixedDiv(num, den);

  00076	8b 45 f4	 mov	 eax, DWORD PTR _den$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _num$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _FixedDiv
  00083	83 c4 08	 add	 esp, 8
  00086	89 45 f0	 mov	 DWORD PTR _num$[ebp], eax

; 398  : 		if (num > 64*FRACUNIT)

  00089	81 7d f0 00 00
	40 00		 cmp	 DWORD PTR _num$[ebp], 4194304 ; 00400000H
  00090	7e 07		 jle	 SHORT $LN3@R_ScaleFro

; 399  : 			return 64*FRACUNIT;

  00092	b8 00 00 40 00	 mov	 eax, 4194304		; 00400000H
  00097	eb 1a		 jmp	 SHORT $LN1@R_ScaleFro
$LN3@R_ScaleFro:

; 400  : 		if (num < 256)

  00099	81 7d f0 00 01
	00 00		 cmp	 DWORD PTR _num$[ebp], 256 ; 00000100H
  000a0	7d 07		 jge	 SHORT $LN4@R_ScaleFro

; 401  : 			return 256;

  000a2	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  000a7	eb 0a		 jmp	 SHORT $LN1@R_ScaleFro
$LN4@R_ScaleFro:

; 402  : 		return num;

  000a9	8b 45 f0	 mov	 eax, DWORD PTR _num$[ebp]
  000ac	eb 05		 jmp	 SHORT $LN1@R_ScaleFro
$LN2@R_ScaleFro:

; 403  : 	}
; 404  : 	return 64*FRACUNIT;

  000ae	b8 00 00 40 00	 mov	 eax, 4194304		; 00400000H
$LN1@R_ScaleFro:

; 405  : }

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_R_ScaleFromGlobalAngle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SecplanePointToDist2
_TEXT	SEGMENT
_secplane$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_R_SecplanePointToDist2 PROC				; COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 375  : 	return -TMulScale16(secplane->a, x, secplane->b, y, z, secplane->c);

  00009	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	51		 push	 ecx
  00010	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00013	52		 push	 edx
  00014	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _secplane$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _secplane$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 _TMulScale16
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	f7 d8		 neg	 eax

; 376  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_R_SecplanePointToDist2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SecplanePointToDist
_TEXT	SEGMENT
_secplane$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_R_SecplanePointToDist PROC				; COMDAT

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 370  : 	return -TMulScale16(secplane->a, x, y, secplane->b, z, secplane->c);

  00009	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	51		 push	 ecx
  00010	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00013	52		 push	 edx
  00014	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  00017	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001a	51		 push	 ecx
  0001b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _secplane$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 _TMulScale16
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	f7 d8		 neg	 eax

; 371  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_R_SecplanePointToDist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SecplaneHeightDiff
_TEXT	SEGMENT
_secplane$ = 8						; size = 4
_oldd$ = 12						; size = 4
_R_SecplaneHeightDiff PROC				; COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 365  : 	return FixedMul(oldd - secplane->d, secplane->ic);

  00009	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  0000c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000f	51		 push	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _oldd$[ebp]
  00016	2b 42 0c	 sub	 eax, DWORD PTR [edx+12]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _FixedMul
  0001f	83 c4 08	 add	 esp, 8

; 366  : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_R_SecplaneHeightDiff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SecplaneChangeHeight
_TEXT	SEGMENT
_secplane$ = 8						; size = 4
_hdiff$ = 12						; size = 4
_R_SecplaneChangeHeight PROC				; COMDAT

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 359  : 	secplane->d = secplane->d - FixedMul(hdiff, secplane->c);

  00009	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _hdiff$[ebp]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 _FixedMul
  00019	83 c4 08	 add	 esp, 8
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _secplane$[ebp]
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	2b d0		 sub	 edx, eax
  00024	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  00027	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 360  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_R_SecplaneChangeHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_ArePlanesDifferent
_TEXT	SEGMENT
tv76 = -68						; size = 4
_original$ = 8						; size = 4
_other$ = 12						; size = 4
_R_ArePlanesDifferent PROC				; COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 352  : 	return original->a != other->a || original->b != other->b

  00009	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	75 33		 jne	 SHORT $LN3@R_ArePlane
  00015	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	75 25		 jne	 SHORT $LN3@R_ArePlane
  00023	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  00029	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002c	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0002f	75 17		 jne	 SHORT $LN3@R_ArePlane
  00031	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  00037	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003a	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0003d	75 09		 jne	 SHORT $LN3@R_ArePlane
  0003f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
  00046	eb 07		 jmp	 SHORT $LN4@R_ArePlane
$LN3@R_ArePlane:
  00048	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
$LN4@R_ArePlane:
  0004f	8b 45 bc	 mov	 eax, DWORD PTR tv76[ebp]

; 353  : 		|| original->c != other->c || original->d != other->d;
; 354  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_R_ArePlanesDifferent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_ArePlanesSame
_TEXT	SEGMENT
tv76 = -68						; size = 4
_original$ = 8						; size = 4
_other$ = 12						; size = 4
_R_ArePlanesSame PROC					; COMDAT

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 345  : 	return original->a == other->a && original->b == other->b

  00009	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	75 33		 jne	 SHORT $LN3@R_ArePlane
  00015	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	75 25		 jne	 SHORT $LN3@R_ArePlane
  00023	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  00029	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002c	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0002f	75 17		 jne	 SHORT $LN3@R_ArePlane
  00031	8b 45 08	 mov	 eax, DWORD PTR _original$[ebp]
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _other$[ebp]
  00037	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003a	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0003d	75 09		 jne	 SHORT $LN3@R_ArePlane
  0003f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00046	eb 07		 jmp	 SHORT $LN4@R_ArePlane
$LN3@R_ArePlane:
  00048	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN4@R_ArePlane:
  0004f	8b 45 bc	 mov	 eax, DWORD PTR tv76[ebp]

; 346  : 		&& original->c == other->c && original->d == other->d;
; 347  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_R_ArePlanesSame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SecplaneFlipVert
_TEXT	SEGMENT
_secplane$ = 8						; size = 4
_R_SecplaneFlipVert PROC				; COMDAT

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 335  : 	secplane->a = -secplane->a;

  00009	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	f7 d9		 neg	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  00013	89 0a		 mov	 DWORD PTR [edx], ecx

; 336  : 	secplane->b = -secplane->b;

  00015	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	f7 d9		 neg	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  00020	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 337  : 	secplane->c = -secplane->c;

  00023	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	f7 d9		 neg	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  0002e	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 338  : 	secplane->d = -secplane->d;

  00031	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  00034	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00037	f7 d9		 neg	 ecx
  00039	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  0003c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 339  : 	secplane->ic = -secplane->ic;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  00042	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00045	f7 d9		 neg	 ecx
  00047	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  0004a	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 340  : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_R_SecplaneFlipVert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SecplaneZatPointDist
_TEXT	SEGMENT
_secplane$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dist$ = 20						; size = 4
_R_SecplaneZatPointDist PROC				; COMDAT

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 328  : 	return FixedMul(secplane->ic, -dist - DMulScale16(secplane->a, x, secplane->b, y));

  00009	8b 75 14	 mov	 esi, DWORD PTR _dist$[ebp]
  0000c	f7 de		 neg	 esi
  0000e	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _secplane$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	52		 push	 edx
  00019	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _secplane$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 _DMulScale16
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	2b f0		 sub	 esi, eax
  0002d	56		 push	 esi
  0002e	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  00031	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _FixedMul
  0003a	83 c4 08	 add	 esp, 8

; 329  : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_R_SecplaneZatPointDist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_SecplaneZatPoint
_TEXT	SEGMENT
_secplane$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_R_SecplaneZatPoint PROC				; COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 322  : 	return FixedMul(secplane->ic, -secplane->d - DMulScale16(secplane->a, x, secplane->b, y));

  00009	8b 45 08	 mov	 eax, DWORD PTR _secplane$[ebp]
  0000c	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0000f	f7 de		 neg	 esi
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 08	 mov	 edx, DWORD PTR _secplane$[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _DMulScale16
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	2b f0		 sub	 esi, eax
  00030	56		 push	 esi
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _secplane$[ebp]
  00034	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _FixedMul
  0003d	83 c4 08	 add	 esp, 8

; 323  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_R_SecplaneZatPoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_PointToDist2
_TEXT	SEGMENT
_temp$1 = -20						; size = 4
_dist$ = -16						; size = 4
_dy$ = -12						; size = 4
_dx$ = -8						; size = 4
_angle$ = -4						; size = 4
_px2$ = 8						; size = 4
_py2$ = 12						; size = 4
_px1$ = 16						; size = 4
_py1$ = 20						; size = 4
_R_PointToDist2 PROC					; COMDAT

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 284  : 	angle_t angle;
; 285  : 	fixed_t dx, dy, dist;
; 286  : 
; 287  : 	dx = abs(px1 - px2);

  00009	8b 45 10	 mov	 eax, DWORD PTR _px1$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR _px2$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _abs
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 f8	 mov	 DWORD PTR _dx$[ebp], eax

; 288  : 	dy = abs(py1 - py2);

  0001b	8b 45 14	 mov	 eax, DWORD PTR _py1$[ebp]
  0001e	2b 45 0c	 sub	 eax, DWORD PTR _py2$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _abs
  00027	83 c4 04	 add	 esp, 4
  0002a	89 45 f4	 mov	 DWORD PTR _dy$[ebp], eax

; 289  : 
; 290  : 	if (dy > dx)

  0002d	8b 45 f4	 mov	 eax, DWORD PTR _dy$[ebp]
  00030	3b 45 f8	 cmp	 eax, DWORD PTR _dx$[ebp]
  00033	7e 12		 jle	 SHORT $LN2@R_PointToD

; 291  : 	{
; 292  : 		fixed_t temp;
; 293  : 
; 294  : 		temp = dx;

  00035	8b 45 f8	 mov	 eax, DWORD PTR _dx$[ebp]
  00038	89 45 ec	 mov	 DWORD PTR _temp$1[ebp], eax

; 295  : 		dx = dy;

  0003b	8b 45 f4	 mov	 eax, DWORD PTR _dy$[ebp]
  0003e	89 45 f8	 mov	 DWORD PTR _dx$[ebp], eax

; 296  : 		dy = temp;

  00041	8b 45 ec	 mov	 eax, DWORD PTR _temp$1[ebp]
  00044	89 45 f4	 mov	 DWORD PTR _dy$[ebp], eax
$LN2@R_PointToD:

; 297  : 	}
; 298  : 	if (!dy)

  00047	83 7d f4 00	 cmp	 DWORD PTR _dy$[ebp], 0
  0004b	75 05		 jne	 SHORT $LN3@R_PointToD

; 299  : 		return dx;

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _dx$[ebp]
  00050	eb 43		 jmp	 SHORT $LN1@R_PointToD
$LN3@R_PointToD:

; 300  : 
; 301  : 	angle = (tantoangle[FixedDiv(dy, dx)>>DBITS] + ANGLE_90) >> ANGLETOFINESHIFT;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _dx$[ebp]
  00055	50		 push	 eax
  00056	8b 4d f4	 mov	 ecx, DWORD PTR _dy$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _FixedDiv
  0005f	83 c4 08	 add	 esp, 8
  00062	c1 f8 05	 sar	 eax, 5
  00065	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _tantoangle[eax*4]
  0006c	81 c2 00 00 00
	40		 add	 edx, 1073741824		; 40000000H
  00072	c1 ea 13	 shr	 edx, 19			; 00000013H
  00075	89 55 fc	 mov	 DWORD PTR _angle$[ebp], edx

; 302  : 
; 303  : 	// use as cosine
; 304  : 	dist = FixedDiv(dx, FINESINE(angle));

  00078	8b 45 fc	 mov	 eax, DWORD PTR _angle$[ebp]
  0007b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00082	51		 push	 ecx
  00083	8b 55 f8	 mov	 edx, DWORD PTR _dx$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _FixedDiv
  0008c	83 c4 08	 add	 esp, 8
  0008f	89 45 f0	 mov	 DWORD PTR _dist$[ebp], eax

; 305  : 
; 306  : 	return dist;

  00092	8b 45 f0	 mov	 eax, DWORD PTR _dist$[ebp]
$LN1@R_PointToD:

; 307  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_R_PointToDist2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_PointToDist
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_R_PointToDist PROC					; COMDAT

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 312  : 	return R_PointToDist2(viewx, viewy, x, y);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _viewy
  00017	52		 push	 edx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _viewx
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _R_PointToDist2
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 313  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_R_PointToDist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_PointToAngle2
_TEXT	SEGMENT
tv162 = -96						; size = 4
tv163 = -92						; size = 4
tv146 = -88						; size = 4
tv164 = -84						; size = 4
tv129 = -80						; size = 4
tv130 = -76						; size = 4
tv82 = -72						; size = 4
tv165 = -68						; size = 4
_pviewx$ = 8						; size = 4
_pviewy$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_R_PointToAngle2 PROC					; COMDAT

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 268  : 	return (y -= pviewy, (x -= pviewx) || y) ?

  00009	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  0000c	2b 45 0c	 sub	 eax, DWORD PTR _pviewy$[ebp]
  0000f	89 45 14	 mov	 DWORD PTR _y$[ebp], eax
  00012	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00015	2b 4d 08	 sub	 ecx, DWORD PTR _pviewx$[ebp]
  00018	89 4d 10	 mov	 DWORD PTR _x$[ebp], ecx
  0001b	75 12		 jne	 SHORT $LN3@R_PointToA
  0001d	83 7d 14 00	 cmp	 DWORD PTR _y$[ebp], 0
  00021	75 0c		 jne	 SHORT $LN3@R_PointToA
  00023	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
  0002a	e9 84 01 00 00	 jmp	 $LN18@R_PointToA
$LN3@R_PointToA:
  0002f	83 7d 10 00	 cmp	 DWORD PTR _x$[ebp], 0
  00033	0f 8c b0 00 00
	00		 jl	 $LN16@R_PointToA
  00039	83 7d 14 00	 cmp	 DWORD PTR _y$[ebp], 0
  0003d	7c 4b		 jl	 SHORT $LN8@R_PointToA
  0003f	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00042	3b 55 14	 cmp	 edx, DWORD PTR _y$[ebp]
  00045	7e 1c		 jle	 SHORT $LN4@R_PointToA
  00047	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 14	 mov	 ecx, DWORD PTR _y$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _SlopeDiv
  00054	83 c4 08	 add	 esp, 8
  00057	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _tantoangle[eax*4]
  0005e	89 55 b8	 mov	 DWORD PTR tv82[ebp], edx
  00061	eb 1f		 jmp	 SHORT $LN5@R_PointToA
$LN4@R_PointToA:
  00063	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  00066	50		 push	 eax
  00067	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 _SlopeDiv
  00070	83 c4 08	 add	 esp, 8
  00073	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00078	2b 14 85 00 00
	00 00		 sub	 edx, DWORD PTR _tantoangle[eax*4]
  0007f	89 55 b8	 mov	 DWORD PTR tv82[ebp], edx
$LN5@R_PointToA:
  00082	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  00085	89 45 b4	 mov	 DWORD PTR tv130[ebp], eax
  00088	eb 54		 jmp	 SHORT $LN9@R_PointToA
$LN8@R_PointToA:
  0008a	8b 4d 14	 mov	 ecx, DWORD PTR _y$[ebp]
  0008d	f7 d9		 neg	 ecx
  0008f	89 4d 14	 mov	 DWORD PTR _y$[ebp], ecx
  00092	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00095	3b 55 14	 cmp	 edx, DWORD PTR _y$[ebp]
  00098	7e 1e		 jle	 SHORT $LN6@R_PointToA
  0009a	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 14	 mov	 ecx, DWORD PTR _y$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _SlopeDiv
  000a7	83 c4 08	 add	 esp, 8
  000aa	33 d2		 xor	 edx, edx
  000ac	2b 14 85 00 00
	00 00		 sub	 edx, DWORD PTR _tantoangle[eax*4]
  000b3	89 55 b0	 mov	 DWORD PTR tv129[ebp], edx
  000b6	eb 20		 jmp	 SHORT $LN7@R_PointToA
$LN6@R_PointToA:
  000b8	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  000bb	50		 push	 eax
  000bc	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _SlopeDiv
  000c5	83 c4 08	 add	 esp, 8
  000c8	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _tantoangle[eax*4]
  000cf	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  000d5	89 55 b0	 mov	 DWORD PTR tv129[ebp], edx
$LN7@R_PointToA:
  000d8	8b 45 b0	 mov	 eax, DWORD PTR tv129[ebp]
  000db	89 45 b4	 mov	 DWORD PTR tv130[ebp], eax
$LN9@R_PointToA:
  000de	8b 4d b4	 mov	 ecx, DWORD PTR tv130[ebp]
  000e1	89 4d ac	 mov	 DWORD PTR tv164[ebp], ecx
  000e4	e9 c4 00 00 00	 jmp	 $LN17@R_PointToA
$LN16@R_PointToA:
  000e9	83 7d 14 00	 cmp	 DWORD PTR _y$[ebp], 0
  000ed	7c 59		 jl	 SHORT $LN14@R_PointToA
  000ef	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  000f2	f7 da		 neg	 edx
  000f4	89 55 10	 mov	 DWORD PTR _x$[ebp], edx
  000f7	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  000fa	3b 45 14	 cmp	 eax, DWORD PTR _y$[ebp]
  000fd	7e 21		 jle	 SHORT $LN10@R_PointToA
  000ff	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00102	51		 push	 ecx
  00103	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 _SlopeDiv
  0010c	83 c4 08	 add	 esp, 8
  0010f	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00114	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _tantoangle[eax*4]
  0011b	89 4d a8	 mov	 DWORD PTR tv146[ebp], ecx
  0011e	eb 20		 jmp	 SHORT $LN11@R_PointToA
$LN10@R_PointToA:
  00120	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  00123	52		 push	 edx
  00124	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 _SlopeDiv
  0012d	83 c4 08	 add	 esp, 8
  00130	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _tantoangle[eax*4]
  00137	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  0013d	89 4d a8	 mov	 DWORD PTR tv146[ebp], ecx
$LN11@R_PointToA:
  00140	8b 55 a8	 mov	 edx, DWORD PTR tv146[ebp]
  00143	89 55 a4	 mov	 DWORD PTR tv163[ebp], edx
  00146	eb 5f		 jmp	 SHORT $LN15@R_PointToA
$LN14@R_PointToA:
  00148	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  0014b	f7 d8		 neg	 eax
  0014d	89 45 10	 mov	 DWORD PTR _x$[ebp], eax
  00150	8b 4d 14	 mov	 ecx, DWORD PTR _y$[ebp]
  00153	f7 d9		 neg	 ecx
  00155	89 4d 14	 mov	 DWORD PTR _y$[ebp], ecx
  00158	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  0015b	3b 55 14	 cmp	 edx, DWORD PTR _y$[ebp]
  0015e	7e 22		 jle	 SHORT $LN12@R_PointToA
  00160	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00163	50		 push	 eax
  00164	8b 4d 14	 mov	 ecx, DWORD PTR _y$[ebp]
  00167	51		 push	 ecx
  00168	e8 00 00 00 00	 call	 _SlopeDiv
  0016d	83 c4 08	 add	 esp, 8
  00170	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _tantoangle[eax*4]
  00177	81 ea 00 00 00
	80		 sub	 edx, -2147483648	; 80000000H
  0017d	89 55 a0	 mov	 DWORD PTR tv162[ebp], edx
  00180	eb 1f		 jmp	 SHORT $LN13@R_PointToA
$LN12@R_PointToA:
  00182	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  00185	50		 push	 eax
  00186	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 _SlopeDiv
  0018f	83 c4 08	 add	 esp, 8
  00192	ba ff ff ff bf	 mov	 edx, -1073741825	; bfffffffH
  00197	2b 14 85 00 00
	00 00		 sub	 edx, DWORD PTR _tantoangle[eax*4]
  0019e	89 55 a0	 mov	 DWORD PTR tv162[ebp], edx
$LN13@R_PointToA:
  001a1	8b 45 a0	 mov	 eax, DWORD PTR tv162[ebp]
  001a4	89 45 a4	 mov	 DWORD PTR tv163[ebp], eax
$LN15@R_PointToA:
  001a7	8b 4d a4	 mov	 ecx, DWORD PTR tv163[ebp]
  001aa	89 4d ac	 mov	 DWORD PTR tv164[ebp], ecx
$LN17@R_PointToA:
  001ad	8b 55 ac	 mov	 edx, DWORD PTR tv164[ebp]
  001b0	89 55 bc	 mov	 DWORD PTR tv165[ebp], edx
$LN18@R_PointToA:
  001b3	8b 45 bc	 mov	 eax, DWORD PTR tv165[ebp]

; 269  : 	x >= 0 ?
; 270  : 	y >= 0 ?
; 271  : 		(x > y) ? tantoangle[SlopeDiv(y,x)] :                          // octant 0
; 272  : 		ANGLE_90-1-tantoangle[SlopeDiv(x,y)] :                         // octant 1
; 273  : 		x > (y = -y) ? 0-tantoangle[SlopeDiv(y,x)] :                   // octant 8
; 274  : 		ANGLE_270+tantoangle[SlopeDiv(x,y)] :                          // octant 7
; 275  : 		y >= 0 ? (x = -x) > y ? ANGLE_180-1-tantoangle[SlopeDiv(y,x)] :// octant 3
; 276  : 		ANGLE_90 + tantoangle[SlopeDiv(x,y)] :                         // octant 2
; 277  : 		(x = -x) > (y = -y) ? ANGLE_180+tantoangle[ SlopeDiv(y,x)] :   // octant 4
; 278  : 		ANGLE_270-1-tantoangle[SlopeDiv(x,y)] :                        // octant 5
; 279  : 		0;
; 280  : }

  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_R_PointToAngle2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_PointToAngle
_TEXT	SEGMENT
tv162 = -96						; size = 4
tv163 = -92						; size = 4
tv146 = -88						; size = 4
tv164 = -84						; size = 4
tv129 = -80						; size = 4
tv130 = -76						; size = 4
tv82 = -72						; size = 4
tv165 = -68						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_R_PointToAngle PROC					; COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 252  : 	return (y -= viewy, (x -= viewx) || y) ?

  00009	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _viewy
  00012	89 45 0c	 mov	 DWORD PTR _y$[ebp], eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00018	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _viewx
  0001e	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx
  00021	75 12		 jne	 SHORT $LN3@R_PointToA
  00023	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  00027	75 0c		 jne	 SHORT $LN3@R_PointToA
  00029	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
  00030	e9 84 01 00 00	 jmp	 $LN18@R_PointToA
$LN3@R_PointToA:
  00035	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00039	0f 8c b0 00 00
	00		 jl	 $LN16@R_PointToA
  0003f	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  00043	7c 4b		 jl	 SHORT $LN8@R_PointToA
  00045	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00048	3b 55 0c	 cmp	 edx, DWORD PTR _y$[ebp]
  0004b	7e 1c		 jle	 SHORT $LN4@R_PointToA
  0004d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 _SlopeDiv
  0005a	83 c4 08	 add	 esp, 8
  0005d	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _tantoangle[eax*4]
  00064	89 55 b8	 mov	 DWORD PTR tv82[ebp], edx
  00067	eb 1f		 jmp	 SHORT $LN5@R_PointToA
$LN4@R_PointToA:
  00069	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _SlopeDiv
  00076	83 c4 08	 add	 esp, 8
  00079	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0007e	2b 14 85 00 00
	00 00		 sub	 edx, DWORD PTR _tantoangle[eax*4]
  00085	89 55 b8	 mov	 DWORD PTR tv82[ebp], edx
$LN5@R_PointToA:
  00088	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  0008b	89 45 b4	 mov	 DWORD PTR tv130[ebp], eax
  0008e	eb 54		 jmp	 SHORT $LN9@R_PointToA
$LN8@R_PointToA:
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00093	f7 d9		 neg	 ecx
  00095	89 4d 0c	 mov	 DWORD PTR _y$[ebp], ecx
  00098	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0009b	3b 55 0c	 cmp	 edx, DWORD PTR _y$[ebp]
  0009e	7e 1e		 jle	 SHORT $LN6@R_PointToA
  000a0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 _SlopeDiv
  000ad	83 c4 08	 add	 esp, 8
  000b0	33 d2		 xor	 edx, edx
  000b2	2b 14 85 00 00
	00 00		 sub	 edx, DWORD PTR _tantoangle[eax*4]
  000b9	89 55 b0	 mov	 DWORD PTR tv129[ebp], edx
  000bc	eb 20		 jmp	 SHORT $LN7@R_PointToA
$LN6@R_PointToA:
  000be	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000c1	50		 push	 eax
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _SlopeDiv
  000cb	83 c4 08	 add	 esp, 8
  000ce	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _tantoangle[eax*4]
  000d5	81 ea 00 00 00
	40		 sub	 edx, 1073741824		; 40000000H
  000db	89 55 b0	 mov	 DWORD PTR tv129[ebp], edx
$LN7@R_PointToA:
  000de	8b 45 b0	 mov	 eax, DWORD PTR tv129[ebp]
  000e1	89 45 b4	 mov	 DWORD PTR tv130[ebp], eax
$LN9@R_PointToA:
  000e4	8b 4d b4	 mov	 ecx, DWORD PTR tv130[ebp]
  000e7	89 4d ac	 mov	 DWORD PTR tv164[ebp], ecx
  000ea	e9 c4 00 00 00	 jmp	 $LN17@R_PointToA
$LN16@R_PointToA:
  000ef	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  000f3	7c 59		 jl	 SHORT $LN14@R_PointToA
  000f5	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000f8	f7 da		 neg	 edx
  000fa	89 55 08	 mov	 DWORD PTR _x$[ebp], edx
  000fd	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00100	3b 45 0c	 cmp	 eax, DWORD PTR _y$[ebp]
  00103	7e 21		 jle	 SHORT $LN10@R_PointToA
  00105	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00108	51		 push	 ecx
  00109	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 _SlopeDiv
  00112	83 c4 08	 add	 esp, 8
  00115	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0011a	2b 0c 85 00 00
	00 00		 sub	 ecx, DWORD PTR _tantoangle[eax*4]
  00121	89 4d a8	 mov	 DWORD PTR tv146[ebp], ecx
  00124	eb 20		 jmp	 SHORT $LN11@R_PointToA
$LN10@R_PointToA:
  00126	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00129	52		 push	 edx
  0012a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _SlopeDiv
  00133	83 c4 08	 add	 esp, 8
  00136	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _tantoangle[eax*4]
  0013d	81 c1 00 00 00
	40		 add	 ecx, 1073741824		; 40000000H
  00143	89 4d a8	 mov	 DWORD PTR tv146[ebp], ecx
$LN11@R_PointToA:
  00146	8b 55 a8	 mov	 edx, DWORD PTR tv146[ebp]
  00149	89 55 a4	 mov	 DWORD PTR tv163[ebp], edx
  0014c	eb 5f		 jmp	 SHORT $LN15@R_PointToA
$LN14@R_PointToA:
  0014e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00151	f7 d8		 neg	 eax
  00153	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00156	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00159	f7 d9		 neg	 ecx
  0015b	89 4d 0c	 mov	 DWORD PTR _y$[ebp], ecx
  0015e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00161	3b 55 0c	 cmp	 edx, DWORD PTR _y$[ebp]
  00164	7e 22		 jle	 SHORT $LN12@R_PointToA
  00166	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00169	50		 push	 eax
  0016a	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0016d	51		 push	 ecx
  0016e	e8 00 00 00 00	 call	 _SlopeDiv
  00173	83 c4 08	 add	 esp, 8
  00176	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR _tantoangle[eax*4]
  0017d	81 ea 00 00 00
	80		 sub	 edx, -2147483648	; 80000000H
  00183	89 55 a0	 mov	 DWORD PTR tv162[ebp], edx
  00186	eb 1f		 jmp	 SHORT $LN13@R_PointToA
$LN12@R_PointToA:
  00188	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0018b	50		 push	 eax
  0018c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0018f	51		 push	 ecx
  00190	e8 00 00 00 00	 call	 _SlopeDiv
  00195	83 c4 08	 add	 esp, 8
  00198	ba ff ff ff bf	 mov	 edx, -1073741825	; bfffffffH
  0019d	2b 14 85 00 00
	00 00		 sub	 edx, DWORD PTR _tantoangle[eax*4]
  001a4	89 55 a0	 mov	 DWORD PTR tv162[ebp], edx
$LN13@R_PointToA:
  001a7	8b 45 a0	 mov	 eax, DWORD PTR tv162[ebp]
  001aa	89 45 a4	 mov	 DWORD PTR tv163[ebp], eax
$LN15@R_PointToA:
  001ad	8b 4d a4	 mov	 ecx, DWORD PTR tv163[ebp]
  001b0	89 4d ac	 mov	 DWORD PTR tv164[ebp], ecx
$LN17@R_PointToA:
  001b3	8b 55 ac	 mov	 edx, DWORD PTR tv164[ebp]
  001b6	89 55 bc	 mov	 DWORD PTR tv165[ebp], edx
$LN18@R_PointToA:
  001b9	8b 45 bc	 mov	 eax, DWORD PTR tv165[ebp]

; 253  : 	x >= 0 ?
; 254  : 	y >= 0 ?
; 255  : 		(x > y) ? tantoangle[SlopeDiv(y,x)] :                          // octant 0
; 256  : 		ANGLE_90-1-tantoangle[SlopeDiv(x,y)] :                         // octant 1
; 257  : 		x > (y = -y) ? 0-tantoangle[SlopeDiv(y,x)] :                   // octant 8
; 258  : 		ANGLE_270+tantoangle[SlopeDiv(x,y)] :                          // octant 7
; 259  : 		y >= 0 ? (x = -x) > y ? ANGLE_180-1-tantoangle[SlopeDiv(y,x)] :// octant 3
; 260  : 		ANGLE_90 + tantoangle[SlopeDiv(x,y)] :                         // octant 2
; 261  : 		(x = -x) > (y = -y) ? ANGLE_180+tantoangle[ SlopeDiv(y,x)] :   // octant 4
; 262  : 		ANGLE_270-1-tantoangle[SlopeDiv(x,y)] :                        // octant 5
; 263  : 		0;
; 264  : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c3		 ret	 0
_R_PointToAngle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_PointOnSegSide
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv85 = -92						; size = 4
tv80 = -88						; size = 4
tv87 = -88						; size = 4
tv79 = -84						; size = 4
tv86 = -84						; size = 4
tv128 = -84						; size = 4
tv138 = -84						; size = 4
_ldy$ = -16						; size = 4
_ldx$ = -12						; size = 4
_ly$ = -8						; size = 4
_lx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_line$ = 16						; size = 4
_R_PointOnSegSide PROC					; COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 217  : 	fixed_t lx = line->v1->x;

  00009	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 55 fc	 mov	 DWORD PTR _lx$[ebp], edx

; 218  : 	fixed_t ly = line->v1->y;

  00013	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001b	89 55 f8	 mov	 DWORD PTR _ly$[ebp], edx

; 219  : 	fixed_t ldx = line->v2->x - lx;

  0001e	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	8b 11		 mov	 edx, DWORD PTR [ecx]
  00026	2b 55 fc	 sub	 edx, DWORD PTR _lx$[ebp]
  00029	89 55 f4	 mov	 DWORD PTR _ldx$[ebp], edx

; 220  : 	fixed_t ldy = line->v2->y - ly;

  0002c	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00035	2b 55 f8	 sub	 edx, DWORD PTR _ly$[ebp]
  00038	89 55 f0	 mov	 DWORD PTR _ldy$[ebp], edx

; 221  : 
; 222  : 	if (!ldx)

  0003b	83 7d f4 00	 cmp	 DWORD PTR _ldx$[ebp], 0
  0003f	75 4a		 jne	 SHORT $LN2@R_PointOnS

; 223  : 		return x <= lx ? ldy > 0 : ldy < 0;

  00041	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00044	3b 45 fc	 cmp	 eax, DWORD PTR _lx$[ebp]
  00047	7f 1e		 jg	 SHORT $LN10@R_PointOnS
  00049	83 7d f0 00	 cmp	 DWORD PTR _ldy$[ebp], 0
  0004d	7e 09		 jle	 SHORT $LN8@R_PointOnS
  0004f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  00056	eb 07		 jmp	 SHORT $LN9@R_PointOnS
$LN8@R_PointOnS:
  00058	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN9@R_PointOnS:
  0005f	8b 4d ac	 mov	 ecx, DWORD PTR tv79[ebp]
  00062	89 4d a8	 mov	 DWORD PTR tv80[ebp], ecx
  00065	eb 1c		 jmp	 SHORT $LN11@R_PointOnS
$LN10@R_PointOnS:
  00067	83 7d f0 00	 cmp	 DWORD PTR _ldy$[ebp], 0
  0006b	7d 09		 jge	 SHORT $LN6@R_PointOnS
  0006d	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN7@R_PointOnS
$LN6@R_PointOnS:
  00076	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN7@R_PointOnS:
  0007d	8b 55 a4	 mov	 edx, DWORD PTR tv78[ebp]
  00080	89 55 a8	 mov	 DWORD PTR tv80[ebp], edx
$LN11@R_PointOnS:
  00083	8b 45 a8	 mov	 eax, DWORD PTR tv80[ebp]
  00086	e9 c9 00 00 00	 jmp	 $LN1@R_PointOnS
$LN2@R_PointOnS:

; 224  : 
; 225  : 	if (!ldy)

  0008b	83 7d f0 00	 cmp	 DWORD PTR _ldy$[ebp], 0
  0008f	75 47		 jne	 SHORT $LN3@R_PointOnS

; 226  : 		return y <= ly ? ldx < 0 : ldx > 0;

  00091	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00094	3b 45 f8	 cmp	 eax, DWORD PTR _ly$[ebp]
  00097	7f 1e		 jg	 SHORT $LN16@R_PointOnS
  00099	83 7d f4 00	 cmp	 DWORD PTR _ldx$[ebp], 0
  0009d	7d 09		 jge	 SHORT $LN14@R_PointOnS
  0009f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  000a6	eb 07		 jmp	 SHORT $LN15@R_PointOnS
$LN14@R_PointOnS:
  000a8	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN15@R_PointOnS:
  000af	8b 4d ac	 mov	 ecx, DWORD PTR tv86[ebp]
  000b2	89 4d a8	 mov	 DWORD PTR tv87[ebp], ecx
  000b5	eb 1c		 jmp	 SHORT $LN17@R_PointOnS
$LN16@R_PointOnS:
  000b7	83 7d f4 00	 cmp	 DWORD PTR _ldx$[ebp], 0
  000bb	7e 09		 jle	 SHORT $LN12@R_PointOnS
  000bd	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  000c4	eb 07		 jmp	 SHORT $LN13@R_PointOnS
$LN12@R_PointOnS:
  000c6	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN13@R_PointOnS:
  000cd	8b 55 a4	 mov	 edx, DWORD PTR tv85[ebp]
  000d0	89 55 a8	 mov	 DWORD PTR tv87[ebp], edx
$LN17@R_PointOnS:
  000d3	8b 45 a8	 mov	 eax, DWORD PTR tv87[ebp]
  000d6	eb 7c		 jmp	 SHORT $LN1@R_PointOnS
$LN3@R_PointOnS:

; 227  : 
; 228  : 	x -= lx;

  000d8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000db	2b 45 fc	 sub	 eax, DWORD PTR _lx$[ebp]
  000de	89 45 08	 mov	 DWORD PTR _x$[ebp], eax

; 229  : 	y -= ly;

  000e1	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000e4	2b 45 f8	 sub	 eax, DWORD PTR _ly$[ebp]
  000e7	89 45 0c	 mov	 DWORD PTR _y$[ebp], eax

; 230  : 
; 231  : 	// Try to quickly decide by looking at sign bits.
; 232  : 	if ((ldy ^ ldx ^ x ^ y) < 0)

  000ea	8b 45 f0	 mov	 eax, DWORD PTR _ldy$[ebp]
  000ed	33 45 f4	 xor	 eax, DWORD PTR _ldx$[ebp]
  000f0	33 45 08	 xor	 eax, DWORD PTR _x$[ebp]
  000f3	33 45 0c	 xor	 eax, DWORD PTR _y$[ebp]
  000f6	7d 1d		 jge	 SHORT $LN4@R_PointOnS

; 233  : 		return (ldy ^ x) < 0;          // (left is negative)

  000f8	8b 45 f0	 mov	 eax, DWORD PTR _ldy$[ebp]
  000fb	33 45 08	 xor	 eax, DWORD PTR _x$[ebp]
  000fe	7d 09		 jge	 SHORT $LN18@R_PointOnS
  00100	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv128[ebp], 1
  00107	eb 07		 jmp	 SHORT $LN19@R_PointOnS
$LN18@R_PointOnS:
  00109	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN19@R_PointOnS:
  00110	8b 45 ac	 mov	 eax, DWORD PTR tv128[ebp]
  00113	eb 3f		 jmp	 SHORT $LN1@R_PointOnS
$LN4@R_PointOnS:

; 234  : 	return FixedMul(y, ldx>>FRACBITS) >= FixedMul(ldy>>FRACBITS, x);

  00115	8b 45 f4	 mov	 eax, DWORD PTR _ldx$[ebp]
  00118	c1 f8 10	 sar	 eax, 16			; 00000010H
  0011b	50		 push	 eax
  0011c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 _FixedMul
  00125	83 c4 08	 add	 esp, 8
  00128	8b f0		 mov	 esi, eax
  0012a	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0012d	52		 push	 edx
  0012e	8b 45 f0	 mov	 eax, DWORD PTR _ldy$[ebp]
  00131	c1 f8 10	 sar	 eax, 16			; 00000010H
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _FixedMul
  0013a	83 c4 08	 add	 esp, 8
  0013d	3b f0		 cmp	 esi, eax
  0013f	7c 09		 jl	 SHORT $LN20@R_PointOnS
  00141	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv138[ebp], 1
  00148	eb 07		 jmp	 SHORT $LN21@R_PointOnS
$LN20@R_PointOnS:
  0014a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv138[ebp], 0
$LN21@R_PointOnS:
  00151	8b 45 ac	 mov	 eax, DWORD PTR tv138[ebp]
$LN1@R_PointOnS:

; 235  : }

  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
_R_PointOnSegSide ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\r_main.c
;	COMDAT _R_PointOnSide
_TEXT	SEGMENT
tv72 = -76						; size = 4
tv83 = -76						; size = 4
tv74 = -72						; size = 4
tv85 = -72						; size = 4
tv73 = -68						; size = 4
tv84 = -68						; size = 4
tv131 = -68						; size = 4
tv143 = -68						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_node$ = 16						; size = 4
_R_PointOnSide PROC					; COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 199  : 	if (!node->dx)

  00009	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	75 52		 jne	 SHORT $LN2@R_PointOnS

; 200  : 		return x <= node->x ? node->dy > 0 : node->dy < 0;

  00012	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00018	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0001a	7f 21		 jg	 SHORT $LN10@R_PointOnS
  0001c	8b 55 10	 mov	 edx, DWORD PTR _node$[ebp]
  0001f	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00023	7e 09		 jle	 SHORT $LN8@R_PointOnS
  00025	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002c	eb 07		 jmp	 SHORT $LN9@R_PointOnS
$LN8@R_PointOnS:
  0002e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN9@R_PointOnS:
  00035	8b 45 bc	 mov	 eax, DWORD PTR tv73[ebp]
  00038	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
  0003b	eb 1f		 jmp	 SHORT $LN11@R_PointOnS
$LN10@R_PointOnS:
  0003d	8b 4d 10	 mov	 ecx, DWORD PTR _node$[ebp]
  00040	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00044	7d 09		 jge	 SHORT $LN6@R_PointOnS
  00046	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  0004d	eb 07		 jmp	 SHORT $LN7@R_PointOnS
$LN6@R_PointOnS:
  0004f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN7@R_PointOnS:
  00056	8b 55 b4	 mov	 edx, DWORD PTR tv72[ebp]
  00059	89 55 b8	 mov	 DWORD PTR tv74[ebp], edx
$LN11@R_PointOnS:
  0005c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]
  0005f	e9 ec 00 00 00	 jmp	 $LN1@R_PointOnS
$LN2@R_PointOnS:

; 201  : 
; 202  : 	if (!node->dy)

  00064	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  00067	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0006b	75 53		 jne	 SHORT $LN3@R_PointOnS

; 203  : 		return y <= node->y ? node->dx < 0 : node->dx > 0;

  0006d	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00073	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00076	7f 21		 jg	 SHORT $LN16@R_PointOnS
  00078	8b 55 10	 mov	 edx, DWORD PTR _node$[ebp]
  0007b	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0007f	7d 09		 jge	 SHORT $LN14@R_PointOnS
  00081	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  00088	eb 07		 jmp	 SHORT $LN15@R_PointOnS
$LN14@R_PointOnS:
  0008a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN15@R_PointOnS:
  00091	8b 45 bc	 mov	 eax, DWORD PTR tv84[ebp]
  00094	89 45 b8	 mov	 DWORD PTR tv85[ebp], eax
  00097	eb 1f		 jmp	 SHORT $LN17@R_PointOnS
$LN16@R_PointOnS:
  00099	8b 4d 10	 mov	 ecx, DWORD PTR _node$[ebp]
  0009c	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000a0	7e 09		 jle	 SHORT $LN12@R_PointOnS
  000a2	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  000a9	eb 07		 jmp	 SHORT $LN13@R_PointOnS
$LN12@R_PointOnS:
  000ab	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN13@R_PointOnS:
  000b2	8b 55 b4	 mov	 edx, DWORD PTR tv83[ebp]
  000b5	89 55 b8	 mov	 DWORD PTR tv85[ebp], edx
$LN17@R_PointOnS:
  000b8	8b 45 b8	 mov	 eax, DWORD PTR tv85[ebp]
  000bb	e9 90 00 00 00	 jmp	 $LN1@R_PointOnS
$LN3@R_PointOnS:

; 204  : 
; 205  : 	x -= node->x;

  000c0	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000c6	2b 08		 sub	 ecx, DWORD PTR [eax]
  000c8	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx

; 206  : 	y -= node->y;

  000cb	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000d1	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  000d4	89 4d 0c	 mov	 DWORD PTR _y$[ebp], ecx

; 207  : 
; 208  : 	// Try to quickly decide by looking at sign bits.
; 209  : 	if ((node->dy ^ node->dx ^ x ^ y) < 0)

  000d7	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _node$[ebp]
  000dd	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000e0	33 51 08	 xor	 edx, DWORD PTR [ecx+8]
  000e3	33 55 08	 xor	 edx, DWORD PTR _x$[ebp]
  000e6	33 55 0c	 xor	 edx, DWORD PTR _y$[ebp]
  000e9	7d 20		 jge	 SHORT $LN4@R_PointOnS

; 210  : 		return (node->dy ^ x) < 0;  // (left is negative)

  000eb	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  000ee	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000f1	33 4d 08	 xor	 ecx, DWORD PTR _x$[ebp]
  000f4	7d 09		 jge	 SHORT $LN18@R_PointOnS
  000f6	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv131[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN19@R_PointOnS
$LN18@R_PointOnS:
  000ff	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN19@R_PointOnS:
  00106	8b 45 bc	 mov	 eax, DWORD PTR tv131[ebp]
  00109	eb 45		 jmp	 SHORT $LN1@R_PointOnS
$LN4@R_PointOnS:

; 211  : 	return FixedMul(y, node->dx>>FRACBITS) >= FixedMul(node->dy>>FRACBITS, x);

  0010b	8b 45 10	 mov	 eax, DWORD PTR _node$[ebp]
  0010e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00111	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00114	51		 push	 ecx
  00115	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00118	52		 push	 edx
  00119	e8 00 00 00 00	 call	 _FixedMul
  0011e	83 c4 08	 add	 esp, 8
  00121	8b f0		 mov	 esi, eax
  00123	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00126	50		 push	 eax
  00127	8b 4d 10	 mov	 ecx, DWORD PTR _node$[ebp]
  0012a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0012d	c1 fa 10	 sar	 edx, 16			; 00000010H
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _FixedMul
  00136	83 c4 08	 add	 esp, 8
  00139	3b f0		 cmp	 esi, eax
  0013b	7c 09		 jl	 SHORT $LN20@R_PointOnS
  0013d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv143[ebp], 1
  00144	eb 07		 jmp	 SHORT $LN21@R_PointOnS
$LN20@R_PointOnS:
  00146	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN21@R_PointOnS:
  0014d	8b 45 bc	 mov	 eax, DWORD PTR tv143[ebp]
$LN1@R_PointOnS:

; 212  : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
_R_PointOnSide ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _DMulScale16
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
_DMulScale16 PROC					; COMDAT

; 88   : { \

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 89   : 	return (fixed_t)((((INT64)a * (INT64)b) + ((INT64)c * (INT64)d)) >> 16); \

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	99		 cdq
  0000d	8b c8		 mov	 ecx, eax
  0000f	8b f2		 mov	 esi, edx
  00011	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00014	99		 cdq
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	56		 push	 esi
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 __allmul
  0001e	8b f0		 mov	 esi, eax
  00020	8b fa		 mov	 edi, edx
  00022	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  00025	99		 cdq
  00026	8b c8		 mov	 ecx, eax
  00028	8b da		 mov	 ebx, edx
  0002a	8b 45 14	 mov	 eax, DWORD PTR _d$[ebp]
  0002d	99		 cdq
  0002e	52		 push	 edx
  0002f	50		 push	 eax
  00030	53		 push	 ebx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 __allmul
  00037	03 f0		 add	 esi, eax
  00039	13 fa		 adc	 edi, edx
  0003b	8b c6		 mov	 eax, esi
  0003d	8b d7		 mov	 edx, edi
  0003f	b1 10		 mov	 cl, 16			; 00000010H
  00041	e8 00 00 00 00	 call	 __allshr

; 90   : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_DMulScale16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _TMulScale16
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
_e$ = 24						; size = 4
_f$ = 28						; size = 4
_TMulScale16 PROC					; COMDAT

; 71   : { \

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 72   : 	return (fixed_t)((((INT64)a * (INT64)b) + ((INT64)c * (INT64)d) \

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	99		 cdq
  0000d	8b c8		 mov	 ecx, eax
  0000f	8b f2		 mov	 esi, edx
  00011	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00014	99		 cdq
  00015	52		 push	 edx
  00016	50		 push	 eax
  00017	56		 push	 esi
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 __allmul
  0001e	8b f0		 mov	 esi, eax
  00020	8b fa		 mov	 edi, edx
  00022	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  00025	99		 cdq
  00026	8b c8		 mov	 ecx, eax
  00028	8b da		 mov	 ebx, edx
  0002a	8b 45 14	 mov	 eax, DWORD PTR _d$[ebp]
  0002d	99		 cdq
  0002e	52		 push	 edx
  0002f	50		 push	 eax
  00030	53		 push	 ebx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 __allmul
  00037	03 f0		 add	 esi, eax
  00039	13 fa		 adc	 edi, edx
  0003b	8b 45 18	 mov	 eax, DWORD PTR _e$[ebp]
  0003e	99		 cdq
  0003f	8b c8		 mov	 ecx, eax
  00041	8b da		 mov	 ebx, edx
  00043	8b 45 1c	 mov	 eax, DWORD PTR _f$[ebp]
  00046	99		 cdq
  00047	52		 push	 edx
  00048	50		 push	 eax
  00049	53		 push	 ebx
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 __allmul
  00050	03 f0		 add	 esi, eax
  00052	13 fa		 adc	 edi, edx
  00054	8b c6		 mov	 eax, esi
  00056	8b d7		 mov	 edx, edi
  00058	b1 10		 mov	 cl, 16			; 00000010H
  0005a	e8 00 00 00 00	 call	 __allshr

; 73   : 		+ ((INT64)e * (INT64)f)) >> 16); \
; 74   : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_TMulScale16 ENDP
_TEXT	ENDS
END
