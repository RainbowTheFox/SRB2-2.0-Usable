; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\am_map.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_am_recalc
PUBLIC	_automapactive
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
_BSS	SEGMENT
_am_recalc DD	01H DUP (?)
_automapactive DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_GREENS	DB	0a0H
_GREENRANGE DB	010H
_GRAYS	DB	00H
_GRAYSRANGE DB	010H
_DBLACK	DB	01fH
_DWHITE	DB	00H
	ORG $+2
_player_arrow DD 0fff00000H
	DD	00H
	DD	0124924H
	DD	00H
	DD	0124924H
	DD	00H
	DD	092492H
	DD	049249H
	DD	0124924H
	DD	00H
	DD	092492H
	DD	0fffb6db7H
	DD	0fff00000H
	DD	00H
	DD	0ffeb6db8H
	DD	049249H
	DD	0fff00000H
	DD	00H
	DD	0ffeb6db8H
	DD	0fffb6db7H
	DD	0fff49249H
	DD	00H
	DD	0fff00000H
	DD	049249H
	DD	0fff49249H
	DD	00H
	DD	0fff00000H
	DD	0fffb6db7H
_thintriangle_guy DD 0ffff8000H
	DD	0ffff4ccdH
	DD	010000H
	DD	00H
	DD	010000H
	DD	00H
	DD	0ffff8000H
	DD	0b333H
	DD	0ffff8000H
	DD	0b333H
	DD	0ffff8000H
	DD	0ffff4ccdH
CONST	ENDS
PUBLIC	_AM_Responder
PUBLIC	_AM_Ticker
PUBLIC	_AM_Drawer
PUBLIC	_AM_Stop
PUBLIC	??_C@_0CK@EINOJIMG@Automap?5can?8t?5run?5without?5a?5ren@ ; `string'
PUBLIC	??_C@_0BK@HMEJDKMM@line?5clipping?5problem?5?$CFd?6@ ; `string'
EXTRN	_memset:PROC
EXTRN	_abs:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_V_DrawPatch:PROC
EXTRN	_HWR_clearAutomap:PROC
EXTRN	_HWR_drawAMline:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_devparm:DWORD
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_gamemap:WORD
EXTRN	_multiplayer:DWORD
EXTRN	_cv_debug:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_gamekeydown:BYTE
EXTRN	_vid:BYTE
EXTRN	_scr_bpp:DWORD
EXTRN	_bmaporgx:DWORD
EXTRN	_bmaporgy:DWORD
EXTRN	_screens:BYTE
EXTRN	_rendermode:DWORD
EXTRN	_numvertexes:DWORD
EXTRN	_vertexes:DWORD
EXTRN	_numsectors:DWORD
EXTRN	_sectors:DWORD
EXTRN	_numlines:DWORD
EXTRN	_lines:DWORD
EXTRN	_defaulttranslationtables:DWORD
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_bigstate DD	01H DUP (?)
_grid	DD	01H DUP (?)
_f_x	DD	01H DUP (?)
_f_y	DD	01H DUP (?)
_f_w	DD	01H DUP (?)
_f_h	DD	01H DUP (?)
_lightlev DD	01H DUP (?)
_fb	DD	01H DUP (?)
_amclock DD	01H DUP (?)
	ALIGN	8

_m_paninc DQ	01H DUP (?)
_mtof_zoommul DD 01H DUP (?)
_ftom_zoommul DD 01H DUP (?)
_m_x	DD	01H DUP (?)
_m_y	DD	01H DUP (?)
_m_x2	DD	01H DUP (?)
_m_y2	DD	01H DUP (?)
_m_w	DD	01H DUP (?)
_m_h	DD	01H DUP (?)
_min_x	DD	01H DUP (?)
_min_y	DD	01H DUP (?)
_max_x	DD	01H DUP (?)
_max_y	DD	01H DUP (?)
_max_w	DD	01H DUP (?)
_max_h	DD	01H DUP (?)
_min_w	DD	01H DUP (?)
_min_h	DD	01H DUP (?)
_min_scale_mtof DD 01H DUP (?)
_max_scale_mtof DD 01H DUP (?)
_old_m_w DD	01H DUP (?)
_old_m_h DD	01H DUP (?)
_old_m_x DD	01H DUP (?)
_old_m_y DD	01H DUP (?)
_f_oldloc DQ	01H DUP (?)
_scale_ftom DD	01H DUP (?)
_plr	DD	01H DUP (?)
_marknums DD	0aH DUP (?)
_markpoints DQ	0aH DUP (?)
_markpointnum DD 01H DUP (?)
_AM_drawFline DD 01H DUP (?)
_maplump DD	01H DUP (?)
?mapxstart@?3??AM_clearFB@@9@9 DD 01H DUP (?)		; `AM_clearFB'::`4'::mapxstart
?mapystart@?3??AM_clearFB@@9@9 DD 01H DUP (?)		; `AM_clearFB'::`4'::mapystart
?oldplr@?4??AM_clearFB@@9@9 DB 0cH DUP (?)		; `AM_clearFB'::`5'::oldplr
?num@?1??AM_drawFline_soft@@9@9 DD 01H DUP (?)		; `AM_drawFline_soft'::`2'::num
?fl@?1??AM_drawMline@@9@9 DB 010H DUP (?)		; `AM_drawMline'::`2'::fl
?l@?1??AM_drawWalls@@9@9 DB 010H DUP (?)		; `AM_drawWalls'::`2'::l
_BSS	ENDS
;	COMDAT ??_C@_0BK@HMEJDKMM@line?5clipping?5problem?5?$CFd?6@
CONST	SEGMENT
??_C@_0BK@HMEJDKMM@line?5clipping?5problem?5?$CFd?6@ DB 'line clipping pr'
	DB	'oblem %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EINOJIMG@Automap?5can?8t?5run?5without?5a?5ren@
CONST	SEGMENT
??_C@_0CK@EINOJIMG@Automap?5can?8t?5run?5without?5a?5ren@ DB 'Automap can'
	DB	'''t run without a render system', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_leveljuststarted DD 01H
_scale_mtof DD	03333H
_followplayer DD 01H
_stopped DD	01H
?lastlevel@?1??AM_Start@@9@9 DD 0ffffffffH		; `AM_Start'::`2'::lastlevel
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0138H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	015eH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawCrosshair
_TEXT	SEGMENT
_color$ = 8						; size = 4
_AM_drawCrosshair PROC					; COMDAT

; 1150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1151 : 	if (rendermode != render_soft)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	74 02		 je	 SHORT $LN2@AM_drawCro

; 1152 : 		return; // BP: should be putpixel here

  00012	eb 4d		 jmp	 SHORT $LN4@AM_drawCro
$LN2@AM_drawCro:

; 1153 : 
; 1154 : 	if (scr_bpp == 1)

  00014	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _scr_bpp, 1
  0001b	75 22		 jne	 SHORT $LN3@AM_drawCro

; 1155 : 		fb[(f_w*(f_h + 1))/2] = (UINT8)color; // single point for now

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_h
  00022	83 c0 01	 add	 eax, 1
  00025	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _f_w
  0002c	99		 cdq
  0002d	2b c2		 sub	 eax, edx
  0002f	d1 f8		 sar	 eax, 1
  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _fb
  00037	8a 55 08	 mov	 dl, BYTE PTR _color$[ebp]
  0003a	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003d	eb 22		 jmp	 SHORT $LN4@AM_drawCro
$LN3@AM_drawCro:

; 1156 : 	else
; 1157 : 		*((INT16 *)(void *)fb + (f_w*(f_h + 1))/2) = (INT16)color;

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_h
  00044	83 c0 01	 add	 eax, 1
  00047	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _f_w
  0004e	99		 cdq
  0004f	2b c2		 sub	 eax, edx
  00051	d1 f8		 sar	 eax, 1
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _fb
  00059	66 8b 55 08	 mov	 dx, WORD PTR _color$[ebp]
  0005d	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN4@AM_drawCro:

; 1158 : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_AM_drawCrosshair ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawMarks
_TEXT	SEGMENT
_h$ = -20						; size = 4
_w$ = -16						; size = 4
_fy$ = -12						; size = 4
_fx$ = -8						; size = 4
_i$ = -4						; size = 4
_AM_drawMarks PROC					; COMDAT

; 1126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1127 : 	INT32 i, fx, fy, w, h;
; 1128 : 
; 1129 : 	for (i = 0; i < AM_NUMMARKPOINTS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@AM_drawMar
$LN2@AM_drawMar:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AM_drawMar:
  0001b	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0001f	0f 8d e0 00 00
	00		 jge	 $LN3@AM_drawMar

; 1130 : 	{
; 1131 : 		if (markpoints[i].x != -1 && marknums[i])

  00025	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00028	83 3c c5 00 00
	00 00 ff	 cmp	 DWORD PTR _markpoints[eax*8], -1
  00030	0f 84 ca 00 00
	00		 je	 $LN6@AM_drawMar
  00036	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00039	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _marknums[eax*4], 0
  00041	0f 84 b9 00 00
	00		 je	 $LN6@AM_drawMar

; 1132 : 		{
; 1133 : 			// w = SHORT(marknums[i]->width);
; 1134 : 			// h = SHORT(marknums[i]->height);
; 1135 : 			w = 5; // because something's wrong with the wad, i guess

  00047	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _w$[ebp], 5

; 1136 : 			h = 6; // because something's wrong with the wad, i guess

  0004e	c7 45 ec 06 00
	00 00		 mov	 DWORD PTR _h$[ebp], 6

; 1137 : 			fx = CXMTOF(markpoints[i].x);

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  0005a	50		 push	 eax
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005e	8b 14 cd 00 00
	00 00		 mov	 edx, DWORD PTR _markpoints[ecx*8]
  00065	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _m_x
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _FixedMul
  00071	83 c4 08	 add	 esp, 8
  00074	c1 f8 10	 sar	 eax, 16			; 00000010H
  00077	03 05 00 00 00
	00		 add	 eax, DWORD PTR _f_x
  0007d	89 45 f8	 mov	 DWORD PTR _fx$[ebp], eax

; 1138 : 			fy = CYMTOF(markpoints[i].y);

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00085	50		 push	 eax
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00089	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR _markpoints[ecx*8+4]
  00090	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _m_y
  00096	52		 push	 edx
  00097	e8 00 00 00 00	 call	 _FixedMul
  0009c	83 c4 08	 add	 esp, 8
  0009f	c1 f8 10	 sar	 eax, 16			; 00000010H
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_h
  000a8	2b c8		 sub	 ecx, eax
  000aa	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _f_y
  000b0	89 4d f4	 mov	 DWORD PTR _fy$[ebp], ecx

; 1139 : 			if (fx >= f_x && fx <= f_w - w && fy >= f_y && fy <= f_h - h)

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _fx$[ebp]
  000b6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _f_x
  000bc	7c 42		 jl	 SHORT $LN6@AM_drawMar
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_w
  000c3	2b 45 f0	 sub	 eax, DWORD PTR _w$[ebp]
  000c6	39 45 f8	 cmp	 DWORD PTR _fx$[ebp], eax
  000c9	7f 35		 jg	 SHORT $LN6@AM_drawMar
  000cb	8b 45 f4	 mov	 eax, DWORD PTR _fy$[ebp]
  000ce	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _f_y
  000d4	7c 2a		 jl	 SHORT $LN6@AM_drawMar
  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_h
  000db	2b 45 ec	 sub	 eax, DWORD PTR _h$[ebp]
  000de	39 45 f4	 cmp	 DWORD PTR _fy$[ebp], eax
  000e1	7f 1d		 jg	 SHORT $LN6@AM_drawMar

; 1140 : 				V_DrawPatch(fx, fy, FB, marknums[i]);

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _marknums[eax*4]
  000ed	51		 push	 ecx
  000ee	6a 00		 push	 0
  000f0	8b 55 f4	 mov	 edx, DWORD PTR _fy$[ebp]
  000f3	52		 push	 edx
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _fx$[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _V_DrawPatch
  000fd	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@AM_drawMar:

; 1141 : 		}
; 1142 : 	}

  00100	e9 0d ff ff ff	 jmp	 $LN2@AM_drawMar
$LN3@AM_drawMar:

; 1143 : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
_AM_drawMarks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawThings
_TEXT	SEGMENT
_t$ = -8						; size = 4
_i$ = -4						; size = 4
_colors$ = 8						; size = 4
_colorrange$ = 12					; size = 4
_AM_drawThings PROC					; COMDAT

; 1108 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1109 : 	size_t i;
; 1110 : 	mobj_t *t;
; 1111 : 
; 1112 : 	colorrange = 0;

  00009	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _colorrange$[ebp], 0

; 1113 : 	for (i = 0; i < numsectors; i++)

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $LN4@AM_drawThi
$LN2@AM_drawThi:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AM_drawThi:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numsectors
  0002b	73 5a		 jae	 SHORT $LN3@AM_drawThi

; 1114 : 	{
; 1115 : 		t = sectors[i].thinglist;

  0002d	69 45 fc f8 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 248
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sectors
  0003a	8b 54 01 40	 mov	 edx, DWORD PTR [ecx+eax+64]
  0003e	89 55 f8	 mov	 DWORD PTR _t$[ebp], edx
$LN5@AM_drawThi:

; 1116 : 		while (t)

  00041	83 7d f8 00	 cmp	 DWORD PTR _t$[ebp], 0
  00045	74 3e		 je	 SHORT $LN6@AM_drawThi

; 1117 : 		{
; 1118 : 			AM_drawLineCharacter(thintriangle_guy, NUMTHINTRIANGLEGUYLINES,

  00047	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  0004a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004d	51		 push	 ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  00051	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _colors$[ebp]
  00058	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _lightlev
  0005e	51		 push	 ecx
  0005f	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  00062	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00065	50		 push	 eax
  00066	68 00 00 10 00	 push	 1048576			; 00100000H
  0006b	6a 03		 push	 3
  0006d	68 00 00 00 00	 push	 OFFSET _thintriangle_guy
  00072	e8 00 00 00 00	 call	 _AM_drawLineCharacter
  00077	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1119 : 				16<<FRACBITS, t->angle, colors + lightlev, t->x, t->y);
; 1120 : 			t = t->snext;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  0007d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00080	89 4d f8	 mov	 DWORD PTR _t$[ebp], ecx

; 1121 : 		}

  00083	eb bc		 jmp	 SHORT $LN5@AM_drawThi
$LN6@AM_drawThi:

; 1122 : 	}

  00085	eb 92		 jmp	 SHORT $LN2@AM_drawThi
$LN3@AM_drawThi:

; 1123 : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_AM_drawThings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawPlayers
_TEXT	SEGMENT
_color$ = -12						; size = 4
_p$ = -8						; size = 4
_i$ = -4						; size = 4
_AM_drawPlayers PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1079 : 	INT32 i;
; 1080 : 	player_t *p;
; 1081 : 	INT32 color;
; 1082 : 
; 1083 : 	if (!multiplayer)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00010	75 40		 jne	 SHORT $LN5@AM_drawPla

; 1084 : 	{
; 1085 : 		AM_drawLineCharacter(player_arrow, NUMPLYRLINES, 0,

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0001c	52		 push	 edx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00027	52		 push	 edx
  00028	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _DWHITE
  0002f	50		 push	 eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _plr
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	6a 07		 push	 7
  00040	68 00 00 00 00	 push	 OFFSET _player_arrow
  00045	e8 00 00 00 00	 call	 _AM_drawLineCharacter
  0004a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1086 : 			plr->mo->angle, DWHITE, plr->mo->x, plr->mo->y);
; 1087 : 		return;

  0004d	e9 ab 00 00 00	 jmp	 $LN3@AM_drawPla
$LN5@AM_drawPla:

; 1088 : 	}
; 1089 : 
; 1090 : 	// multiplayer
; 1091 : 	for (i = 0; i < MAXPLAYERS; i++)

  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@AM_drawPla
$LN2@AM_drawPla:
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AM_drawPla:
  00064	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00068	0f 8d 8f 00 00
	00		 jge	 $LN3@AM_drawPla

; 1092 : 	{
; 1093 : 		if (!playeringame[i])

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00071	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00079	75 02		 jne	 SHORT $LN6@AM_drawPla

; 1094 : 			continue;

  0007b	eb de		 jmp	 SHORT $LN2@AM_drawPla
$LN6@AM_drawPla:

; 1095 : 
; 1096 : 		p = &players[i];

  0007d	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00084	05 00 00 00 00	 add	 eax, OFFSET _players
  00089	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 1097 : 		if (p->skincolor == 0)

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0008f	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  00096	75 0c		 jne	 SHORT $LN7@AM_drawPla

; 1098 : 			color = GREENS;

  00098	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _GREENS
  0009f	89 45 f4	 mov	 DWORD PTR _color$[ebp], eax
  000a2	eb 24		 jmp	 SHORT $LN8@AM_drawPla
$LN7@AM_drawPla:

; 1099 : 		else
; 1100 : 			color = *(defaulttranslationtables + ((p->skincolor - 1)<<8) + GREENS + 8);

  000a4	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000a7	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000ad	83 e9 01	 sub	 ecx, 1
  000b0	c1 e1 08	 shl	 ecx, 8
  000b3	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _defaulttranslationtables
  000b9	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _GREENS
  000c0	0f b6 44 11 08	 movzx	 eax, BYTE PTR [ecx+edx+8]
  000c5	89 45 f4	 mov	 DWORD PTR _color$[ebp], eax
$LN8@AM_drawPla:

; 1101 : 
; 1102 : 		AM_drawLineCharacter(player_arrow, NUMPLYRLINES, 0, p->mo->angle,

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000d0	52		 push	 edx
  000d1	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000d9	52		 push	 edx
  000da	8b 45 f4	 mov	 eax, DWORD PTR _color$[ebp]
  000dd	50		 push	 eax
  000de	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000e6	50		 push	 eax
  000e7	6a 00		 push	 0
  000e9	6a 07		 push	 7
  000eb	68 00 00 00 00	 push	 OFFSET _player_arrow
  000f0	e8 00 00 00 00	 call	 _AM_drawLineCharacter
  000f5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1103 : 			color, p->mo->x, p->mo->y);
; 1104 : 	}

  000f8	e9 5e ff ff ff	 jmp	 $LN2@AM_drawPla
$LN3@AM_drawPla:

; 1105 : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
_AM_drawPlayers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawLineCharacter
_TEXT	SEGMENT
_l$ = -24						; size = 16
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lineguy$ = 8						; size = 4
_lineguylines$ = 12					; size = 4
_scale$ = 16						; size = 4
_angle$ = 20						; size = 4
_color$ = 24						; size = 4
_x$ = 28						; size = 4
_y$ = 32						; size = 4
_AM_drawLineCharacter PROC				; COMDAT

; 1037 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 1038 : 	size_t i;
; 1039 : 	mline_t l;
; 1040 : 
; 1041 : 	for (i = 0; i < lineguylines; i++)

  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN4@AM_drawLin
$LN2@AM_drawLin:
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AM_drawLin:
  00025	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00028	3b 45 0c	 cmp	 eax, DWORD PTR _lineguylines$[ebp]
  0002b	0f 83 04 01 00
	00		 jae	 $LN3@AM_drawLin

; 1042 : 	{
; 1043 : 		l.a.x = lineguy[i].a.x;

  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00034	c1 e0 04	 shl	 eax, 4
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _lineguy$[ebp]
  0003a	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003d	89 55 e8	 mov	 DWORD PTR _l$[ebp], edx

; 1044 : 		l.a.y = lineguy[i].a.y;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00043	c1 e0 04	 shl	 eax, 4
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _lineguy$[ebp]
  00049	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0004d	89 55 ec	 mov	 DWORD PTR _l$[ebp+4], edx

; 1045 : 
; 1046 : 		if (scale)

  00050	83 7d 10 00	 cmp	 DWORD PTR _scale$[ebp], 0
  00054	74 26		 je	 SHORT $LN5@AM_drawLin

; 1047 : 		{
; 1048 : 			l.a.x = FixedMul(scale, l.a.x);

  00056	8b 45 e8	 mov	 eax, DWORD PTR _l$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _scale$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _FixedMul
  00063	83 c4 08	 add	 esp, 8
  00066	89 45 e8	 mov	 DWORD PTR _l$[ebp], eax

; 1049 : 			l.a.y = FixedMul(scale, l.a.y);

  00069	8b 45 ec	 mov	 eax, DWORD PTR _l$[ebp+4]
  0006c	50		 push	 eax
  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _scale$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _FixedMul
  00076	83 c4 08	 add	 esp, 8
  00079	89 45 ec	 mov	 DWORD PTR _l$[ebp+4], eax
$LN5@AM_drawLin:

; 1050 : 		}
; 1051 : 
; 1052 : 		if (angle)

  0007c	83 7d 14 00	 cmp	 DWORD PTR _angle$[ebp], 0
  00080	74 14		 je	 SHORT $LN6@AM_drawLin

; 1053 : 			AM_rotate(&l.a.x, &l.a.y, angle);

  00082	8b 45 14	 mov	 eax, DWORD PTR _angle$[ebp]
  00085	50		 push	 eax
  00086	8d 4d ec	 lea	 ecx, DWORD PTR _l$[ebp+4]
  00089	51		 push	 ecx
  0008a	8d 55 e8	 lea	 edx, DWORD PTR _l$[ebp]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 _AM_rotate
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@AM_drawLin:

; 1054 : 
; 1055 : 		l.a.x += x;

  00096	8b 45 e8	 mov	 eax, DWORD PTR _l$[ebp]
  00099	03 45 1c	 add	 eax, DWORD PTR _x$[ebp]
  0009c	89 45 e8	 mov	 DWORD PTR _l$[ebp], eax

; 1056 : 		l.a.y += y;

  0009f	8b 45 ec	 mov	 eax, DWORD PTR _l$[ebp+4]
  000a2	03 45 20	 add	 eax, DWORD PTR _y$[ebp]
  000a5	89 45 ec	 mov	 DWORD PTR _l$[ebp+4], eax

; 1057 : 
; 1058 : 		l.b.x = lineguy[i].b.x;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ab	c1 e0 04	 shl	 eax, 4
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _lineguy$[ebp]
  000b1	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  000b5	89 55 f0	 mov	 DWORD PTR _l$[ebp+8], edx

; 1059 : 		l.b.y = lineguy[i].b.y;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000bb	c1 e0 04	 shl	 eax, 4
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _lineguy$[ebp]
  000c1	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  000c5	89 55 f4	 mov	 DWORD PTR _l$[ebp+12], edx

; 1060 : 
; 1061 : 		if (scale)

  000c8	83 7d 10 00	 cmp	 DWORD PTR _scale$[ebp], 0
  000cc	74 26		 je	 SHORT $LN7@AM_drawLin

; 1062 : 		{
; 1063 : 			l.b.x = FixedMul(scale, l.b.x);

  000ce	8b 45 f0	 mov	 eax, DWORD PTR _l$[ebp+8]
  000d1	50		 push	 eax
  000d2	8b 4d 10	 mov	 ecx, DWORD PTR _scale$[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _FixedMul
  000db	83 c4 08	 add	 esp, 8
  000de	89 45 f0	 mov	 DWORD PTR _l$[ebp+8], eax

; 1064 : 			l.b.y = FixedMul(scale, l.b.y);

  000e1	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp+12]
  000e4	50		 push	 eax
  000e5	8b 4d 10	 mov	 ecx, DWORD PTR _scale$[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _FixedMul
  000ee	83 c4 08	 add	 esp, 8
  000f1	89 45 f4	 mov	 DWORD PTR _l$[ebp+12], eax
$LN7@AM_drawLin:

; 1065 : 		}
; 1066 : 
; 1067 : 		if (angle)

  000f4	83 7d 14 00	 cmp	 DWORD PTR _angle$[ebp], 0
  000f8	74 14		 je	 SHORT $LN8@AM_drawLin

; 1068 : 			AM_rotate(&l.b.x, &l.b.y, angle);

  000fa	8b 45 14	 mov	 eax, DWORD PTR _angle$[ebp]
  000fd	50		 push	 eax
  000fe	8d 4d f4	 lea	 ecx, DWORD PTR _l$[ebp+12]
  00101	51		 push	 ecx
  00102	8d 55 f0	 lea	 edx, DWORD PTR _l$[ebp+8]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _AM_rotate
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@AM_drawLin:

; 1069 : 
; 1070 : 		l.b.x += x;

  0010e	8b 45 f0	 mov	 eax, DWORD PTR _l$[ebp+8]
  00111	03 45 1c	 add	 eax, DWORD PTR _x$[ebp]
  00114	89 45 f0	 mov	 DWORD PTR _l$[ebp+8], eax

; 1071 : 		l.b.y += y;

  00117	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp+12]
  0011a	03 45 20	 add	 eax, DWORD PTR _y$[ebp]
  0011d	89 45 f4	 mov	 DWORD PTR _l$[ebp+12], eax

; 1072 : 
; 1073 : 		AM_drawMline(&l, color);

  00120	8b 45 18	 mov	 eax, DWORD PTR _color$[ebp]
  00123	50		 push	 eax
  00124	8d 4d e8	 lea	 ecx, DWORD PTR _l$[ebp]
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 _AM_drawMline
  0012d	83 c4 08	 add	 esp, 8

; 1074 : 	}

  00130	e9 e7 fe ff ff	 jmp	 $LN2@AM_drawLin
$LN3@AM_drawLin:

; 1075 : }

  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx
  00138	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013b	33 cd		 xor	 ecx, ebp
  0013d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
_AM_drawLineCharacter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_rotate
_TEXT	SEGMENT
_tmpx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_a$ = 16						; size = 4
_AM_rotate PROC						; COMDAT

; 1023 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1024 : 	fixed_t tmpx;
; 1025 : 
; 1026 : 	tmpx = FixedMul(*x, FINECOSINE(a>>ANGLETOFINESHIFT))

  00009	8b 45 10	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00015	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _FixedMul
  00024	83 c4 08	 add	 esp, 8
  00027	8b f0		 mov	 esi, eax
  00029	8b 55 10	 mov	 edx, DWORD PTR _a$[ebp]
  0002c	c1 ea 13	 shr	 edx, 19			; 00000013H
  0002f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _finesine[edx*4]
  00036	50		 push	 eax
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _FixedMul
  00042	83 c4 08	 add	 esp, 8
  00045	2b f0		 sub	 esi, eax
  00047	89 75 fc	 mov	 DWORD PTR _tmpx$[ebp], esi

; 1027 : 		- FixedMul(*y, FINESINE(a>>ANGLETOFINESHIFT));
; 1028 : 
; 1029 : 	*y = FixedMul(*x, FINESINE(a>>ANGLETOFINESHIFT))

  0004a	8b 45 10	 mov	 eax, DWORD PTR _a$[ebp]
  0004d	c1 e8 13	 shr	 eax, 19			; 00000013H
  00050	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00057	51		 push	 ecx
  00058	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _FixedMul
  00063	83 c4 08	 add	 esp, 8
  00066	8b f0		 mov	 esi, eax
  00068	8b 4d 10	 mov	 ecx, DWORD PTR _a$[ebp]
  0006b	c1 e9 13	 shr	 ecx, 19			; 00000013H
  0006e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00074	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00077	50		 push	 eax
  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0007b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 _FixedMul
  00083	83 c4 08	 add	 esp, 8
  00086	03 f0		 add	 esi, eax
  00088	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0008b	89 30		 mov	 DWORD PTR [eax], esi

; 1030 : 		+ FixedMul(*y, FINECOSINE(a>>ANGLETOFINESHIFT));
; 1031 : 
; 1032 : 	*x = tmpx;

  0008d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _tmpx$[ebp]
  00093	89 08		 mov	 DWORD PTR [eax], ecx

; 1033 : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_AM_rotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawWalls
_TEXT	SEGMENT
_i$ = -4						; size = 4
_AM_drawWalls PROC					; COMDAT

; 1003 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1004 : 	size_t i;
; 1005 : 	static mline_t l;
; 1006 : 
; 1007 : 	for (i = 0; i < numlines; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@AM_drawWal
$LN2@AM_drawWal:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AM_drawWal:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numlines
  00024	73 71		 jae	 SHORT $LN3@AM_drawWal

; 1008 : 	{
; 1009 : 		l.a.x = lines[i].v1->x;

  00026	6b 45 fc 4c	 imul	 eax, DWORD PTR _i$[ebp], 76
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00030	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00033	8b 02		 mov	 eax, DWORD PTR [edx]
  00035	a3 00 00 00 00	 mov	 DWORD PTR ?l@?1??AM_drawWalls@@9@9, eax

; 1010 : 		l.a.y = lines[i].v1->y;

  0003a	6b 45 fc 4c	 imul	 eax, DWORD PTR _i$[ebp], 76
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00044	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00047	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004a	a3 04 00 00 00	 mov	 DWORD PTR ?l@?1??AM_drawWalls@@9@9+4, eax

; 1011 : 		l.b.x = lines[i].v2->x;

  0004f	6b 45 fc 4c	 imul	 eax, DWORD PTR _i$[ebp], 76
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  00059	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	a3 08 00 00 00	 mov	 DWORD PTR ?l@?1??AM_drawWalls@@9@9+8, eax

; 1012 : 		l.b.y = lines[i].v2->y;

  00064	6b 45 fc 4c	 imul	 eax, DWORD PTR _i$[ebp], 76
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lines
  0006e	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00072	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00075	a3 0c 00 00 00	 mov	 DWORD PTR ?l@?1??AM_drawWalls@@9@9+12, eax

; 1013 : 
; 1014 : 		AM_drawMline(&l, GRAYS + 3);

  0007a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _GRAYS
  00081	83 c0 03	 add	 eax, 3
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ?l@?1??AM_drawWalls@@9@9
  0008a	e8 00 00 00 00	 call	 _AM_drawMline
  0008f	83 c4 08	 add	 esp, 8

; 1015 : 	}

  00092	e9 7b ff ff ff	 jmp	 $LN2@AM_drawWal
$LN3@AM_drawWal:

; 1016 : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
_AM_drawWalls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawGrid
_TEXT	SEGMENT
_ml$ = -36						; size = 16
_end$ = -20						; size = 4
_start$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_color$ = 8						; size = 4
_AM_drawGrid PROC					; COMDAT

; 960  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 961  : 	fixed_t x, y;
; 962  : 	fixed_t start, end;
; 963  : 	mline_t ml;
; 964  : 
; 965  : 	// Figure out start of vertical gridlines
; 966  : 	start = m_x;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  00018	89 45 f0	 mov	 DWORD PTR _start$[ebp], eax

; 967  : 	if ((start - bmaporgx) % (MAPBLOCKUNITS<<FRACBITS))

  0001b	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  0001e	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _bmaporgx
  00024	25 ff ff 7f 80	 and	 eax, -2139095041	; 807fffffH
  00029	79 07		 jns	 SHORT $LN11@AM_drawGri
  0002b	48		 dec	 eax
  0002c	0d 00 00 80 ff	 or	 eax, -8388608		; ff800000H
  00031	40		 inc	 eax
$LN11@AM_drawGri:
  00032	85 c0		 test	 eax, eax
  00034	74 24		 je	 SHORT $LN8@AM_drawGri

; 968  : 		start += (MAPBLOCKUNITS<<FRACBITS) - ((start - bmaporgx) % (MAPBLOCKUNITS<<FRACBITS));

  00036	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  00039	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _bmaporgx
  0003f	25 ff ff 7f 80	 and	 eax, -2139095041	; 807fffffH
  00044	79 07		 jns	 SHORT $LN12@AM_drawGri
  00046	48		 dec	 eax
  00047	0d 00 00 80 ff	 or	 eax, -8388608		; ff800000H
  0004c	40		 inc	 eax
$LN12@AM_drawGri:
  0004d	b9 00 00 80 00	 mov	 ecx, 8388608		; 00800000H
  00052	2b c8		 sub	 ecx, eax
  00054	03 4d f0	 add	 ecx, DWORD PTR _start$[ebp]
  00057	89 4d f0	 mov	 DWORD PTR _start$[ebp], ecx
$LN8@AM_drawGri:

; 969  : 	end = m_x + m_w;

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  0005f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_w
  00065	89 45 ec	 mov	 DWORD PTR _end$[ebp], eax

; 970  : 
; 971  : 	// draw vertical gridlines
; 972  : 	ml.a.y = m_y;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  0006d	89 45 e0	 mov	 DWORD PTR _ml$[ebp+4], eax

; 973  : 	ml.b.y = m_y + m_h;

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  00075	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_h
  0007b	89 45 e8	 mov	 DWORD PTR _ml$[ebp+12], eax

; 974  : 	for (x = start; x < end; x += (MAPBLOCKUNITS<<FRACBITS))

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  00081	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  00084	eb 0b		 jmp	 SHORT $LN4@AM_drawGri
$LN2@AM_drawGri:
  00086	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00089	05 00 00 80 00	 add	 eax, 8388608		; 00800000H
  0008e	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN4@AM_drawGri:
  00091	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00094	3b 45 ec	 cmp	 eax, DWORD PTR _end$[ebp]
  00097	7d 1e		 jge	 SHORT $LN3@AM_drawGri

; 975  : 	{
; 976  : 		ml.a.x = x;

  00099	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0009c	89 45 dc	 mov	 DWORD PTR _ml$[ebp], eax

; 977  : 		ml.b.x = x;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  000a2	89 45 e4	 mov	 DWORD PTR _ml$[ebp+8], eax

; 978  : 		AM_drawMline(&ml, color);

  000a5	8b 45 08	 mov	 eax, DWORD PTR _color$[ebp]
  000a8	50		 push	 eax
  000a9	8d 4d dc	 lea	 ecx, DWORD PTR _ml$[ebp]
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 _AM_drawMline
  000b2	83 c4 08	 add	 esp, 8

; 979  : 	}

  000b5	eb cf		 jmp	 SHORT $LN2@AM_drawGri
$LN3@AM_drawGri:

; 980  : 
; 981  : 	// Figure out start of horizontal gridlines
; 982  : 	start = m_y;

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  000bc	89 45 f0	 mov	 DWORD PTR _start$[ebp], eax

; 983  : 	if ((start - bmaporgy) % (MAPBLOCKUNITS<<FRACBITS))

  000bf	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  000c2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _bmaporgy
  000c8	25 ff ff 7f 80	 and	 eax, -2139095041	; 807fffffH
  000cd	79 07		 jns	 SHORT $LN13@AM_drawGri
  000cf	48		 dec	 eax
  000d0	0d 00 00 80 ff	 or	 eax, -8388608		; ff800000H
  000d5	40		 inc	 eax
$LN13@AM_drawGri:
  000d6	85 c0		 test	 eax, eax
  000d8	74 24		 je	 SHORT $LN9@AM_drawGri

; 984  : 		start += (MAPBLOCKUNITS<<FRACBITS) - ((start - bmaporgy) % (MAPBLOCKUNITS<<FRACBITS));

  000da	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  000dd	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _bmaporgy
  000e3	25 ff ff 7f 80	 and	 eax, -2139095041	; 807fffffH
  000e8	79 07		 jns	 SHORT $LN14@AM_drawGri
  000ea	48		 dec	 eax
  000eb	0d 00 00 80 ff	 or	 eax, -8388608		; ff800000H
  000f0	40		 inc	 eax
$LN14@AM_drawGri:
  000f1	b9 00 00 80 00	 mov	 ecx, 8388608		; 00800000H
  000f6	2b c8		 sub	 ecx, eax
  000f8	03 4d f0	 add	 ecx, DWORD PTR _start$[ebp]
  000fb	89 4d f0	 mov	 DWORD PTR _start$[ebp], ecx
$LN9@AM_drawGri:

; 985  : 	end = m_y + m_h;

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  00103	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_h
  00109	89 45 ec	 mov	 DWORD PTR _end$[ebp], eax

; 986  : 
; 987  : 	// draw horizontal gridlines
; 988  : 	ml.a.x = m_x;

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  00111	89 45 dc	 mov	 DWORD PTR _ml$[ebp], eax

; 989  : 	ml.b.x = m_x + m_w;

  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  00119	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_w
  0011f	89 45 e4	 mov	 DWORD PTR _ml$[ebp+8], eax

; 990  : 	for (y = start; y < end; y += (MAPBLOCKUNITS<<FRACBITS))

  00122	8b 45 f0	 mov	 eax, DWORD PTR _start$[ebp]
  00125	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
  00128	eb 0b		 jmp	 SHORT $LN7@AM_drawGri
$LN5@AM_drawGri:
  0012a	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  0012d	05 00 00 80 00	 add	 eax, 8388608		; 00800000H
  00132	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax
$LN7@AM_drawGri:
  00135	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00138	3b 45 ec	 cmp	 eax, DWORD PTR _end$[ebp]
  0013b	7d 1e		 jge	 SHORT $LN6@AM_drawGri

; 991  : 	{
; 992  : 		ml.a.y = y;

  0013d	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00140	89 45 e0	 mov	 DWORD PTR _ml$[ebp+4], eax

; 993  : 		ml.b.y = y;

  00143	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00146	89 45 e8	 mov	 DWORD PTR _ml$[ebp+12], eax

; 994  : 		AM_drawMline(&ml, color);

  00149	8b 45 08	 mov	 eax, DWORD PTR _color$[ebp]
  0014c	50		 push	 eax
  0014d	8d 4d dc	 lea	 ecx, DWORD PTR _ml$[ebp]
  00150	51		 push	 ecx
  00151	e8 00 00 00 00	 call	 _AM_drawMline
  00156	83 c4 08	 add	 esp, 8

; 995  : 	}

  00159	eb cf		 jmp	 SHORT $LN5@AM_drawGri
$LN6@AM_drawGri:

; 996  : }

  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
_AM_drawGrid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawMline
_TEXT	SEGMENT
_ml$ = 8						; size = 4
_color$ = 12						; size = 4
_AM_drawMline PROC					; COMDAT

; 949  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 950  : 	static fline_t fl;
; 951  : 
; 952  : 	if (AM_clipMline(ml, &fl))

  00009	68 00 00 00 00	 push	 OFFSET ?fl@?1??AM_drawMline@@9@9
  0000e	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _AM_clipMline
  00017	83 c4 08	 add	 esp, 8
  0001a	85 c0		 test	 eax, eax
  0001c	74 12		 je	 SHORT $LN2@AM_drawMli

; 953  : 		AM_drawFline(&fl, color); // draws it on frame buffer using fb coords

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _color$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ?fl@?1??AM_drawMline@@9@9
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR _AM_drawFline
  0002d	83 c4 08	 add	 esp, 8
$LN2@AM_drawMli:

; 954  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_AM_drawMline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_clipMline
_TEXT	SEGMENT
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_tmp$ = -20						; size = 8
_outside$ = -12						; size = 4
_outcode2$ = -8						; size = 4
_outcode1$ = -4						; size = 4
_ml$ = 8						; size = 4
_fl$ = 12						; size = 4
_AM_clipMline PROC					; COMDAT

; 758  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 759  : 	enum
; 760  : 	{
; 761  : 		LEFT   = 1,
; 762  : 		RIGHT  = 2,
; 763  : 		BOTTOM = 4,
; 764  : 		TOP    = 8
; 765  : 	};
; 766  : 
; 767  : 	register INT32 outcode1 = 0, outcode2 = 0, outside;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode1$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 0

; 768  : 	fpoint_t tmp ={0,0};

  00017	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp], 0
  0001e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+4], 0

; 769  : 	INT32 dx, dy;
; 770  : 
; 771  : #define DOOUTCODE(oc, mx, my) \
; 772  : 	(oc) = 0; \
; 773  : 	if ((my) < 0) (oc) |= TOP; \
; 774  : 	else if ((my) >= f_h) (oc) |= BOTTOM; \
; 775  : 	if ((mx) < 0) (oc) |= LEFT; \
; 776  : 	else if ((mx) >= f_w) (oc) |= RIGHT;
; 777  : 
; 778  : 	// do trivial rejects and outcodes
; 779  : 	if (ml->a.y > m_y2)

  00025	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  00028	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_y2
  00031	7e 09		 jle	 SHORT $LN4@AM_clipMli

; 780  : 		outcode1 = TOP;

  00033	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _outcode1$[ebp], 8
  0003a	eb 15		 jmp	 SHORT $LN6@AM_clipMli
$LN4@AM_clipMli:

; 781  : 	else if (ml->a.y < m_y)

  0003c	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_y
  00048	7d 07		 jge	 SHORT $LN6@AM_clipMli

; 782  : 		outcode1 = BOTTOM;

  0004a	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _outcode1$[ebp], 4
$LN6@AM_clipMli:

; 783  : 
; 784  : 	if (ml->b.y > m_y2)

  00051	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  00054	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00057	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_y2
  0005d	7e 09		 jle	 SHORT $LN7@AM_clipMli

; 785  : 		outcode2 = TOP;

  0005f	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 8
  00066	eb 15		 jmp	 SHORT $LN9@AM_clipMli
$LN7@AM_clipMli:

; 786  : 	else if (ml->b.y < m_y)

  00068	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  0006b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006e	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_y
  00074	7d 07		 jge	 SHORT $LN9@AM_clipMli

; 787  : 		outcode2 = BOTTOM;

  00076	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 4
$LN9@AM_clipMli:

; 788  : 
; 789  : 	if (outcode1 & outcode2)

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00080	23 45 f8	 and	 eax, DWORD PTR _outcode2$[ebp]
  00083	74 07		 je	 SHORT $LN10@AM_clipMli

; 790  : 		return false; // trivially outside

  00085	33 c0		 xor	 eax, eax
  00087	e9 31 04 00 00	 jmp	 $LN1@AM_clipMli
$LN10@AM_clipMli:

; 791  : 
; 792  : 	if (ml->a.x < m_x)

  0008c	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_x
  00097	7d 0b		 jge	 SHORT $LN11@AM_clipMli

; 793  : 		outcode1 |= LEFT;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0009c	83 c8 01	 or	 eax, 1
  0009f	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
  000a2	eb 16		 jmp	 SHORT $LN13@AM_clipMli
$LN11@AM_clipMli:

; 794  : 	else if (ml->a.x > m_x2)

  000a4	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  000a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a9	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_x2
  000af	7e 09		 jle	 SHORT $LN13@AM_clipMli

; 795  : 		outcode1 |= RIGHT;

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  000b4	83 c8 02	 or	 eax, 2
  000b7	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN13@AM_clipMli:

; 796  : 
; 797  : 	if (ml->b.x < m_x)

  000ba	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  000bd	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c0	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_x
  000c6	7d 0b		 jge	 SHORT $LN14@AM_clipMli

; 798  : 		outcode2 |= LEFT;

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  000cb	83 c8 01	 or	 eax, 1
  000ce	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
  000d1	eb 17		 jmp	 SHORT $LN16@AM_clipMli
$LN14@AM_clipMli:

; 799  : 	else if (ml->b.x > m_x2)

  000d3	8b 45 08	 mov	 eax, DWORD PTR _ml$[ebp]
  000d6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d9	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _m_x2
  000df	7e 09		 jle	 SHORT $LN16@AM_clipMli

; 800  : 		outcode2 |= RIGHT;

  000e1	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  000e4	83 c8 02	 or	 eax, 2
  000e7	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN16@AM_clipMli:

; 801  : 
; 802  : 	if (outcode1 & outcode2)

  000ea	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  000ed	23 45 f8	 and	 eax, DWORD PTR _outcode2$[ebp]
  000f0	74 07		 je	 SHORT $LN17@AM_clipMli

; 803  : 		return false; // trivially outside

  000f2	33 c0		 xor	 eax, eax
  000f4	e9 c4 03 00 00	 jmp	 $LN1@AM_clipMli
$LN17@AM_clipMli:

; 804  : 
; 805  : 	// transform to frame-buffer coordinates.
; 806  : 	fl->a.x = CXMTOF(ml->a.x);

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  000fe	50		 push	 eax
  000ff	8b 4d 08	 mov	 ecx, DWORD PTR _ml$[ebp]
  00102	8b 11		 mov	 edx, DWORD PTR [ecx]
  00104	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _m_x
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 _FixedMul
  00110	83 c4 08	 add	 esp, 8
  00113	c1 f8 10	 sar	 eax, 16			; 00000010H
  00116	03 05 00 00 00
	00		 add	 eax, DWORD PTR _f_x
  0011c	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  0011f	89 01		 mov	 DWORD PTR [ecx], eax

; 807  : 	fl->a.y = CYMTOF(ml->a.y);

  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00126	50		 push	 eax
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _ml$[ebp]
  0012a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012d	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _m_y
  00133	52		 push	 edx
  00134	e8 00 00 00 00	 call	 _FixedMul
  00139	83 c4 08	 add	 esp, 8
  0013c	c1 f8 10	 sar	 eax, 16			; 00000010H
  0013f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_h
  00145	2b c8		 sub	 ecx, eax
  00147	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _f_y
  0014d	8b 55 0c	 mov	 edx, DWORD PTR _fl$[ebp]
  00150	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 808  : 	fl->b.x = CXMTOF(ml->b.x);

  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00158	50		 push	 eax
  00159	8b 4d 08	 mov	 ecx, DWORD PTR _ml$[ebp]
  0015c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0015f	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _m_x
  00165	52		 push	 edx
  00166	e8 00 00 00 00	 call	 _FixedMul
  0016b	83 c4 08	 add	 esp, 8
  0016e	c1 f8 10	 sar	 eax, 16			; 00000010H
  00171	03 05 00 00 00
	00		 add	 eax, DWORD PTR _f_x
  00177	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  0017a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 809  : 	fl->b.y = CYMTOF(ml->b.y);

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00182	50		 push	 eax
  00183	8b 4d 08	 mov	 ecx, DWORD PTR _ml$[ebp]
  00186	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00189	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _m_y
  0018f	52		 push	 edx
  00190	e8 00 00 00 00	 call	 _FixedMul
  00195	83 c4 08	 add	 esp, 8
  00198	c1 f8 10	 sar	 eax, 16			; 00000010H
  0019b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_h
  001a1	2b c8		 sub	 ecx, eax
  001a3	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _f_y
  001a9	8b 55 0c	 mov	 edx, DWORD PTR _fl$[ebp]
  001ac	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 810  : 
; 811  : 	DOOUTCODE(outcode1, fl->a.x, fl->a.y);

  001af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode1$[ebp], 0
  001b6	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  001b9	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  001bd	7d 0b		 jge	 SHORT $LN18@AM_clipMli
  001bf	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001c2	83 c8 08	 or	 eax, 8
  001c5	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
  001c8	eb 17		 jmp	 SHORT $LN20@AM_clipMli
$LN18@AM_clipMli:
  001ca	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  001cd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d0	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_h
  001d6	7c 09		 jl	 SHORT $LN20@AM_clipMli
  001d8	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001db	83 c8 04	 or	 eax, 4
  001de	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN20@AM_clipMli:
  001e1	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  001e4	83 38 00	 cmp	 DWORD PTR [eax], 0
  001e7	7d 0b		 jge	 SHORT $LN21@AM_clipMli
  001e9	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  001ec	83 c8 01	 or	 eax, 1
  001ef	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
  001f2	eb 16		 jmp	 SHORT $LN23@AM_clipMli
$LN21@AM_clipMli:
  001f4	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  001f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f9	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_w
  001ff	7c 09		 jl	 SHORT $LN23@AM_clipMli
  00201	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00204	83 c8 02	 or	 eax, 2
  00207	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN23@AM_clipMli:

; 812  : 	DOOUTCODE(outcode2, fl->b.x, fl->b.y);

  0020a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 0
  00211	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00214	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00218	7d 0b		 jge	 SHORT $LN24@AM_clipMli
  0021a	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  0021d	83 c8 08	 or	 eax, 8
  00220	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
  00223	eb 17		 jmp	 SHORT $LN26@AM_clipMli
$LN24@AM_clipMli:
  00225	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00228	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0022b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_h
  00231	7c 09		 jl	 SHORT $LN26@AM_clipMli
  00233	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00236	83 c8 04	 or	 eax, 4
  00239	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN26@AM_clipMli:
  0023c	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  0023f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00243	7d 0b		 jge	 SHORT $LN27@AM_clipMli
  00245	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00248	83 c8 01	 or	 eax, 1
  0024b	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
  0024e	eb 17		 jmp	 SHORT $LN29@AM_clipMli
$LN27@AM_clipMli:
  00250	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00253	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00256	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_w
  0025c	7c 09		 jl	 SHORT $LN29@AM_clipMli
  0025e	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00261	83 c8 02	 or	 eax, 2
  00264	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN29@AM_clipMli:

; 813  : 
; 814  : 	if (outcode1 & outcode2)

  00267	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0026a	23 45 f8	 and	 eax, DWORD PTR _outcode2$[ebp]
  0026d	74 07		 je	 SHORT $LN30@AM_clipMli

; 815  : 		return false;

  0026f	33 c0		 xor	 eax, eax
  00271	e9 47 02 00 00	 jmp	 $LN1@AM_clipMli
$LN30@AM_clipMli:

; 816  : 
; 817  : 	while (outcode1 | outcode2)

  00276	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00279	0b 45 f8	 or	 eax, DWORD PTR _outcode2$[ebp]
  0027c	0f 84 36 02 00
	00		 je	 $LN3@AM_clipMli

; 818  : 	{
; 819  : 		// may be partially inside box
; 820  : 		// find an outside point
; 821  : 		if (outcode1)

  00282	83 7d fc 00	 cmp	 DWORD PTR _outcode1$[ebp], 0
  00286	74 08		 je	 SHORT $LN31@AM_clipMli

; 822  : 			outside = outcode1;

  00288	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0028b	89 45 f4	 mov	 DWORD PTR _outside$[ebp], eax
  0028e	eb 06		 jmp	 SHORT $LN32@AM_clipMli
$LN31@AM_clipMli:

; 823  : 		else
; 824  : 			outside = outcode2;

  00290	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00293	89 45 f4	 mov	 DWORD PTR _outside$[ebp], eax
$LN32@AM_clipMli:

; 825  : 
; 826  : 		// clip to each side
; 827  : 		if (outside & TOP)

  00296	8b 45 f4	 mov	 eax, DWORD PTR _outside$[ebp]
  00299	83 e0 08	 and	 eax, 8
  0029c	74 41		 je	 SHORT $LN33@AM_clipMli

; 828  : 		{
; 829  : 			dy = fl->a.y - fl->b.y;

  0029e	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  002a1	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  002a4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002a7	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  002aa	89 55 e4	 mov	 DWORD PTR _dy$[ebp], edx

; 830  : 			dx = fl->b.x - fl->a.x;

  002ad	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  002b0	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  002b3	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002b6	2b 11		 sub	 edx, DWORD PTR [ecx]
  002b8	89 55 e8	 mov	 DWORD PTR _dx$[ebp], edx

; 831  : 			tmp.x = fl->a.x + (dx*(fl->a.y))/dy;

  002bb	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  002be	8b 4d e8	 mov	 ecx, DWORD PTR _dx$[ebp]
  002c1	0f af 48 04	 imul	 ecx, DWORD PTR [eax+4]
  002c5	8b c1		 mov	 eax, ecx
  002c7	99		 cdq
  002c8	f7 7d e4	 idiv	 DWORD PTR _dy$[ebp]
  002cb	8b 55 0c	 mov	 edx, DWORD PTR _fl$[ebp]
  002ce	03 02		 add	 eax, DWORD PTR [edx]
  002d0	89 45 ec	 mov	 DWORD PTR _tmp$[ebp], eax

; 832  : 			tmp.y = 0;

  002d3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp+4], 0

; 833  : 		}

  002da	e9 e9 00 00 00	 jmp	 $LN39@AM_clipMli
$LN33@AM_clipMli:

; 834  : 		else if (outside & BOTTOM)

  002df	8b 45 f4	 mov	 eax, DWORD PTR _outside$[ebp]
  002e2	83 e0 04	 and	 eax, 4
  002e5	74 4b		 je	 SHORT $LN35@AM_clipMli

; 835  : 		{
; 836  : 			dy = fl->a.y - fl->b.y;

  002e7	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  002ea	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  002ed	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002f0	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  002f3	89 55 e4	 mov	 DWORD PTR _dy$[ebp], edx

; 837  : 			dx = fl->b.x - fl->a.x;

  002f6	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  002f9	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  002fc	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002ff	2b 11		 sub	 edx, DWORD PTR [ecx]
  00301	89 55 e8	 mov	 DWORD PTR _dx$[ebp], edx

; 838  : 			tmp.x = fl->a.x + (dx*(fl->a.y-f_h))/dy;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00307	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0030a	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _f_h
  00310	8b c1		 mov	 eax, ecx
  00312	0f af 45 e8	 imul	 eax, DWORD PTR _dx$[ebp]
  00316	99		 cdq
  00317	f7 7d e4	 idiv	 DWORD PTR _dy$[ebp]
  0031a	8b 55 0c	 mov	 edx, DWORD PTR _fl$[ebp]
  0031d	03 02		 add	 eax, DWORD PTR [edx]
  0031f	89 45 ec	 mov	 DWORD PTR _tmp$[ebp], eax

; 839  : 			tmp.y = f_h-1;

  00322	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_h
  00327	83 e8 01	 sub	 eax, 1
  0032a	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 840  : 		}

  0032d	e9 96 00 00 00	 jmp	 $LN39@AM_clipMli
$LN35@AM_clipMli:

; 841  : 		else if (outside & RIGHT)

  00332	8b 45 f4	 mov	 eax, DWORD PTR _outside$[ebp]
  00335	83 e0 02	 and	 eax, 2
  00338	74 48		 je	 SHORT $LN37@AM_clipMli

; 842  : 		{
; 843  : 			dy = fl->b.y - fl->a.y;

  0033a	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  0033d	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  00340	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00343	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00346	89 55 e4	 mov	 DWORD PTR _dy$[ebp], edx

; 844  : 			dx = fl->b.x - fl->a.x;

  00349	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  0034c	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  0034f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00352	2b 11		 sub	 edx, DWORD PTR [ecx]
  00354	89 55 e8	 mov	 DWORD PTR _dx$[ebp], edx

; 845  : 			tmp.y = fl->a.y + (dy*(f_w-1 - fl->a.x))/dx;

  00357	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_w
  0035c	83 e8 01	 sub	 eax, 1
  0035f	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  00362	2b 01		 sub	 eax, DWORD PTR [ecx]
  00364	0f af 45 e4	 imul	 eax, DWORD PTR _dy$[ebp]
  00368	99		 cdq
  00369	f7 7d e8	 idiv	 DWORD PTR _dx$[ebp]
  0036c	8b 55 0c	 mov	 edx, DWORD PTR _fl$[ebp]
  0036f	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00372	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 846  : 			tmp.x = f_w-1;

  00375	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_w
  0037a	83 e8 01	 sub	 eax, 1
  0037d	89 45 ec	 mov	 DWORD PTR _tmp$[ebp], eax

; 847  : 		}

  00380	eb 46		 jmp	 SHORT $LN39@AM_clipMli
$LN37@AM_clipMli:

; 848  : 		else if (outside & LEFT)

  00382	8b 45 f4	 mov	 eax, DWORD PTR _outside$[ebp]
  00385	83 e0 01	 and	 eax, 1
  00388	74 3e		 je	 SHORT $LN39@AM_clipMli

; 849  : 		{
; 850  : 			dy = fl->b.y - fl->a.y;

  0038a	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  0038d	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  00390	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00393	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00396	89 55 e4	 mov	 DWORD PTR _dy$[ebp], edx

; 851  : 			dx = fl->b.x - fl->a.x;

  00399	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  0039c	8b 4d 0c	 mov	 ecx, DWORD PTR _fl$[ebp]
  0039f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003a2	2b 11		 sub	 edx, DWORD PTR [ecx]
  003a4	89 55 e8	 mov	 DWORD PTR _dx$[ebp], edx

; 852  : 			tmp.y = fl->a.y + (dy*(-fl->a.x))/dx;

  003a7	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  003aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ac	f7 d9		 neg	 ecx
  003ae	8b c1		 mov	 eax, ecx
  003b0	0f af 45 e4	 imul	 eax, DWORD PTR _dy$[ebp]
  003b4	99		 cdq
  003b5	f7 7d e8	 idiv	 DWORD PTR _dx$[ebp]
  003b8	8b 55 0c	 mov	 edx, DWORD PTR _fl$[ebp]
  003bb	03 42 04	 add	 eax, DWORD PTR [edx+4]
  003be	89 45 f0	 mov	 DWORD PTR _tmp$[ebp+4], eax

; 853  : 			tmp.x = 0;

  003c1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp], 0
$LN39@AM_clipMli:

; 854  : 		}
; 855  : 
; 856  : 		if (outside == outcode1)

  003c8	8b 45 f4	 mov	 eax, DWORD PTR _outside$[ebp]
  003cb	3b 45 fc	 cmp	 eax, DWORD PTR _outcode1$[ebp]
  003ce	75 6b		 jne	 SHORT $LN40@AM_clipMli

; 857  : 		{
; 858  : 			fl->a = tmp;

  003d0	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  003d3	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$[ebp]
  003d6	8b 55 f0	 mov	 edx, DWORD PTR _tmp$[ebp+4]
  003d9	89 08		 mov	 DWORD PTR [eax], ecx
  003db	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 859  : 			DOOUTCODE(outcode1, fl->a.x, fl->a.y);

  003de	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _outcode1$[ebp], 0
  003e5	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  003e8	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  003ec	7d 0b		 jge	 SHORT $LN42@AM_clipMli
  003ee	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  003f1	83 c8 08	 or	 eax, 8
  003f4	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
  003f7	eb 17		 jmp	 SHORT $LN44@AM_clipMli
$LN42@AM_clipMli:
  003f9	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  003fc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003ff	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_h
  00405	7c 09		 jl	 SHORT $LN44@AM_clipMli
  00407	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0040a	83 c8 04	 or	 eax, 4
  0040d	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN44@AM_clipMli:
  00410	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00413	83 38 00	 cmp	 DWORD PTR [eax], 0
  00416	7d 0b		 jge	 SHORT $LN45@AM_clipMli
  00418	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  0041b	83 c8 01	 or	 eax, 1
  0041e	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
  00421	eb 16		 jmp	 SHORT $LN47@AM_clipMli
$LN45@AM_clipMli:
  00423	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00426	8b 08		 mov	 ecx, DWORD PTR [eax]
  00428	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_w
  0042e	7c 09		 jl	 SHORT $LN47@AM_clipMli
  00430	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  00433	83 c8 02	 or	 eax, 2
  00436	89 45 fc	 mov	 DWORD PTR _outcode1$[ebp], eax
$LN47@AM_clipMli:

; 860  : 		}

  00439	eb 6c		 jmp	 SHORT $LN53@AM_clipMli
$LN40@AM_clipMli:

; 861  : 		else
; 862  : 		{
; 863  : 			fl->b = tmp;

  0043b	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  0043e	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$[ebp]
  00441	8b 55 f0	 mov	 edx, DWORD PTR _tmp$[ebp+4]
  00444	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00447	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 864  : 			DOOUTCODE(outcode2, fl->b.x, fl->b.y);

  0044a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _outcode2$[ebp], 0
  00451	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00454	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00458	7d 0b		 jge	 SHORT $LN48@AM_clipMli
  0045a	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  0045d	83 c8 08	 or	 eax, 8
  00460	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
  00463	eb 17		 jmp	 SHORT $LN50@AM_clipMli
$LN48@AM_clipMli:
  00465	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00468	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0046b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_h
  00471	7c 09		 jl	 SHORT $LN50@AM_clipMli
  00473	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00476	83 c8 04	 or	 eax, 4
  00479	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN50@AM_clipMli:
  0047c	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  0047f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00483	7d 0b		 jge	 SHORT $LN51@AM_clipMli
  00485	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  00488	83 c8 01	 or	 eax, 1
  0048b	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
  0048e	eb 17		 jmp	 SHORT $LN53@AM_clipMli
$LN51@AM_clipMli:
  00490	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00493	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00496	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_w
  0049c	7c 09		 jl	 SHORT $LN53@AM_clipMli
  0049e	8b 45 f8	 mov	 eax, DWORD PTR _outcode2$[ebp]
  004a1	83 c8 02	 or	 eax, 2
  004a4	89 45 f8	 mov	 DWORD PTR _outcode2$[ebp], eax
$LN53@AM_clipMli:

; 865  : 		}
; 866  : 
; 867  : 		if (outcode1 & outcode2)

  004a7	8b 45 fc	 mov	 eax, DWORD PTR _outcode1$[ebp]
  004aa	23 45 f8	 and	 eax, DWORD PTR _outcode2$[ebp]
  004ad	74 04		 je	 SHORT $LN54@AM_clipMli

; 868  : 			return false; // trivially outside

  004af	33 c0		 xor	 eax, eax
  004b1	eb 0a		 jmp	 SHORT $LN1@AM_clipMli
$LN54@AM_clipMli:

; 869  : 	}

  004b3	e9 be fd ff ff	 jmp	 $LN30@AM_clipMli
$LN3@AM_clipMli:

; 870  : 
; 871  : 	return true;

  004b8	b8 01 00 00 00	 mov	 eax, 1
$LN1@AM_clipMli:

; 872  : }

  004bd	5f		 pop	 edi
  004be	5e		 pop	 esi
  004bf	5b		 pop	 ebx
  004c0	8b e5		 mov	 esp, ebp
  004c2	5d		 pop	 ebp
  004c3	c3		 ret	 0
_AM_clipMline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_clearFB
_TEXT	SEGMENT
_src$1 = -24						; size = 4
_dest$2 = -20						; size = 4
_y$3 = -16						; size = 4
_i$4 = -12						; size = 4
_dmapy$5 = -8						; size = 4
_dmapx$6 = -4						; size = 4
_color$ = 8						; size = 4
_AM_clearFB PROC					; COMDAT

; 679  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 680  : #ifdef HWRENDER
; 681  : 	if (rendermode != render_soft && rendermode != render_none)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	74 14		 je	 SHORT $LN18@AM_clearFB
  00012	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00019	74 0b		 je	 SHORT $LN18@AM_clearFB

; 682  : 	{
; 683  : 		HWR_clearAutomap();

  0001b	e8 00 00 00 00	 call	 _HWR_clearAutomap
  00020	90		 npad	 1

; 684  : 		return;

  00021	e9 ea 02 00 00	 jmp	 $LN11@AM_clearFB
$LN18@AM_clearFB:

; 685  : 	}
; 686  : #endif
; 687  : 
; 688  : 	if (!maplump)

  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _maplump, 0
  0002d	75 2c		 jne	 SHORT $LN19@AM_clearFB

; 689  : 		memset(fb, color, f_w*f_h*vid.bpp);

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_w
  00034	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _f_h
  0003b	0f af 05 30 00
	00 00		 imul	 eax, DWORD PTR _vid+48
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  00046	51		 push	 ecx
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _fb
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 _memset
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	e9 b5 02 00 00	 jmp	 $LN11@AM_clearFB
$LN19@AM_clearFB:

; 690  : 	else
; 691  : 	{
; 692  : 		INT32 dmapx, dmapy, i, y;
; 693  : 		static INT32 mapxstart, mapystart;
; 694  : 		UINT8 *dest = screens[0];

  0005b	b8 04 00 00 00	 mov	 eax, 4
  00060	6b c8 00	 imul	 ecx, eax, 0
  00063	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _screens[ecx]
  00069	89 55 ec	 mov	 DWORD PTR _dest$2[ebp], edx

; 695  : 		const UINT8 *src;
; 696  : #define MAPLUMPHEIGHT (200 - 42)
; 697  : 
; 698  : 		if (followplayer)

  0006c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  00073	0f 84 2c 01 00
	00		 je	 $LN21@AM_clearFB

; 699  : 		{
; 700  : 			static vertex_t oldplr;
; 701  : 
; 702  : 			dmapx = MTOF(plr->mo->x) - MTOF(oldplr.x); //fixed point

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  0007e	50		 push	 eax
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _plr
  00085	8b 11		 mov	 edx, DWORD PTR [ecx]
  00087	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _FixedMul
  00090	83 c4 08	 add	 esp, 8
  00093	8b f0		 mov	 esi, eax
  00095	c1 fe 10	 sar	 esi, 16			; 00000010H
  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scale_mtof
  0009e	51		 push	 ecx
  0009f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?oldplr@?4??AM_clearFB@@9@9
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _FixedMul
  000ab	83 c4 08	 add	 esp, 8
  000ae	c1 f8 10	 sar	 eax, 16			; 00000010H
  000b1	2b f0		 sub	 esi, eax
  000b3	89 75 fc	 mov	 DWORD PTR _dmapx$6[ebp], esi

; 703  : 			dmapy = MTOF(oldplr.y) - MTOF(plr->mo->y);

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  000bb	50		 push	 eax
  000bc	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?oldplr@?4??AM_clearFB@@9@9+4
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 _FixedMul
  000c8	83 c4 08	 add	 esp, 8
  000cb	8b f0		 mov	 esi, eax
  000cd	c1 fe 10	 sar	 esi, 16			; 00000010H
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _scale_mtof
  000d6	52		 push	 edx
  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  000dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000de	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 _FixedMul
  000e7	83 c4 08	 add	 esp, 8
  000ea	c1 f8 10	 sar	 eax, 16			; 00000010H
  000ed	2b f0		 sub	 esi, eax
  000ef	89 75 f8	 mov	 DWORD PTR _dmapy$5[ebp], esi

; 704  : 
; 705  : 			oldplr.x = plr->mo->x;

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000fc	89 15 00 00 00
	00		 mov	 DWORD PTR ?oldplr@?4??AM_clearFB@@9@9, edx

; 706  : 			oldplr.y = plr->mo->y;

  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  00107	8b 08		 mov	 ecx, DWORD PTR [eax]
  00109	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0010c	89 15 04 00 00
	00		 mov	 DWORD PTR ?oldplr@?4??AM_clearFB@@9@9+4, edx

; 707  : 			mapxstart += dmapx>>1;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _dmapx$6[ebp]
  00115	d1 f8		 sar	 eax, 1
  00117	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9
  0011d	a3 00 00 00 00	 mov	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, eax

; 708  : 			mapystart += dmapy>>1;

  00122	8b 45 f8	 mov	 eax, DWORD PTR _dmapy$5[ebp]
  00125	d1 f8		 sar	 eax, 1
  00127	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mapystart@?3??AM_clearFB@@9@9
  0012d	a3 00 00 00 00	 mov	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, eax
$LN2@AM_clearFB:

; 709  : 
; 710  : 			while (mapxstart >= BASEVIDWIDTH)

  00132	81 3d 00 00 00
	00 40 01 00 00	 cmp	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, 320 ; 00000140H
  0013c	7c 11		 jl	 SHORT $LN3@AM_clearFB

; 711  : 				mapxstart -= BASEVIDWIDTH;

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9
  00143	2d 40 01 00 00	 sub	 eax, 320		; 00000140H
  00148	a3 00 00 00 00	 mov	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, eax
  0014d	eb e3		 jmp	 SHORT $LN2@AM_clearFB
$LN3@AM_clearFB:

; 712  : 			while (mapxstart < 0)

  0014f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, 0
  00156	7d 11		 jge	 SHORT $LN5@AM_clearFB

; 713  : 				mapxstart += BASEVIDWIDTH;

  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9
  0015d	05 40 01 00 00	 add	 eax, 320		; 00000140H
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, eax
  00167	eb e6		 jmp	 SHORT $LN3@AM_clearFB
$LN5@AM_clearFB:

; 714  : 			while (mapystart >= MAPLUMPHEIGHT)

  00169	81 3d 00 00 00
	00 9e 00 00 00	 cmp	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, 158 ; 0000009eH
  00173	7c 11		 jl	 SHORT $LN7@AM_clearFB

; 715  : 				mapystart -= MAPLUMPHEIGHT;

  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapystart@?3??AM_clearFB@@9@9
  0017a	2d 9e 00 00 00	 sub	 eax, 158		; 0000009eH
  0017f	a3 00 00 00 00	 mov	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, eax
  00184	eb e3		 jmp	 SHORT $LN5@AM_clearFB
$LN7@AM_clearFB:

; 716  : 			while (mapystart < 0)

  00186	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, 0
  0018d	7d 11		 jge	 SHORT $LN9@AM_clearFB

; 717  : 				mapystart += MAPLUMPHEIGHT;

  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapystart@?3??AM_clearFB@@9@9
  00194	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  00199	a3 00 00 00 00	 mov	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, eax
  0019e	eb e6		 jmp	 SHORT $LN7@AM_clearFB
$LN9@AM_clearFB:

; 718  : 		}

  001a0	e9 b3 00 00 00	 jmp	 $LN26@AM_clearFB
$LN21@AM_clearFB:

; 719  : 		else
; 720  : 		{
; 721  : 			mapxstart += (MTOF(m_paninc.x)>>1);

  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  001aa	50		 push	 eax
  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _m_paninc
  001b1	51		 push	 ecx
  001b2	e8 00 00 00 00	 call	 _FixedMul
  001b7	83 c4 08	 add	 esp, 8
  001ba	c1 f8 10	 sar	 eax, 16			; 00000010H
  001bd	d1 f8		 sar	 eax, 1
  001bf	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9
  001c5	a3 00 00 00 00	 mov	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, eax

; 722  : 			mapystart -= (MTOF(m_paninc.y)>>1);

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  001cf	50		 push	 eax
  001d0	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _m_paninc+4
  001d6	51		 push	 ecx
  001d7	e8 00 00 00 00	 call	 _FixedMul
  001dc	83 c4 08	 add	 esp, 8
  001df	c1 f8 10	 sar	 eax, 16			; 00000010H
  001e2	d1 f8		 sar	 eax, 1
  001e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mapystart@?3??AM_clearFB@@9@9
  001ea	2b d0		 sub	 edx, eax
  001ec	89 15 00 00 00
	00		 mov	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, edx

; 723  : 			if (mapxstart >= BASEVIDWIDTH)

  001f2	81 3d 00 00 00
	00 40 01 00 00	 cmp	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, 320 ; 00000140H
  001fc	7c 0f		 jl	 SHORT $LN23@AM_clearFB

; 724  : 				mapxstart -= BASEVIDWIDTH;

  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9
  00203	2d 40 01 00 00	 sub	 eax, 320		; 00000140H
  00208	a3 00 00 00 00	 mov	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, eax
$LN23@AM_clearFB:

; 725  : 			if (mapxstart < 0)

  0020d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, 0
  00214	7d 0f		 jge	 SHORT $LN24@AM_clearFB

; 726  : 				mapxstart += BASEVIDWIDTH;

  00216	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9
  0021b	05 40 01 00 00	 add	 eax, 320		; 00000140H
  00220	a3 00 00 00 00	 mov	 DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9, eax
$LN24@AM_clearFB:

; 727  : 			if (mapystart >= MAPLUMPHEIGHT)

  00225	81 3d 00 00 00
	00 9e 00 00 00	 cmp	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, 158 ; 0000009eH
  0022f	7c 0f		 jl	 SHORT $LN25@AM_clearFB

; 728  : 				mapystart -= MAPLUMPHEIGHT;

  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapystart@?3??AM_clearFB@@9@9
  00236	2d 9e 00 00 00	 sub	 eax, 158		; 0000009eH
  0023b	a3 00 00 00 00	 mov	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, eax
$LN25@AM_clearFB:

; 729  : 			if (mapystart < 0)

  00240	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, 0
  00247	7d 0f		 jge	 SHORT $LN26@AM_clearFB

; 730  : 				mapystart += MAPLUMPHEIGHT;

  00249	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapystart@?3??AM_clearFB@@9@9
  0024e	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  00253	a3 00 00 00 00	 mov	 DWORD PTR ?mapystart@?3??AM_clearFB@@9@9, eax
$LN26@AM_clearFB:

; 731  : 		}
; 732  : 
; 733  : 		//blit the automap background to the screen.
; 734  : 		for (y = 0; y < f_h; y++)

  00258	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _y$3[ebp], 0
  0025f	eb 09		 jmp	 SHORT $LN12@AM_clearFB
$LN10@AM_clearFB:
  00261	8b 45 f0	 mov	 eax, DWORD PTR _y$3[ebp]
  00264	83 c0 01	 add	 eax, 1
  00267	89 45 f0	 mov	 DWORD PTR _y$3[ebp], eax
$LN12@AM_clearFB:
  0026a	8b 45 f0	 mov	 eax, DWORD PTR _y$3[ebp]
  0026d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _f_h
  00273	0f 8d 97 00 00
	00		 jge	 $LN11@AM_clearFB

; 735  : 		{
; 736  : 			src = maplump + mapxstart + (y + mapystart)*BASEVIDWIDTH;

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR _maplump
  0027e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mapxstart@?3??AM_clearFB@@9@9
  00284	8b 4d f0	 mov	 ecx, DWORD PTR _y$3[ebp]
  00287	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?mapystart@?3??AM_clearFB@@9@9
  0028d	69 d1 40 01 00
	00		 imul	 edx, ecx, 320
  00293	03 c2		 add	 eax, edx
  00295	89 45 e8	 mov	 DWORD PTR _src$1[ebp], eax

; 737  : 			for (i = 0; i < BASEVIDWIDTH*vid.dupx; i++)

  00298	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0029f	eb 09		 jmp	 SHORT $LN15@AM_clearFB
$LN13@AM_clearFB:
  002a1	8b 45 f4	 mov	 eax, DWORD PTR _i$4[ebp]
  002a4	83 c0 01	 add	 eax, 1
  002a7	89 45 f4	 mov	 DWORD PTR _i$4[ebp], eax
$LN15@AM_clearFB:
  002aa	69 05 20 00 00
	00 40 01 00 00	 imul	 eax, DWORD PTR _vid+32, 320
  002b4	39 45 f4	 cmp	 DWORD PTR _i$4[ebp], eax
  002b7	7d 3a		 jge	 SHORT $LN14@AM_clearFB
$LN16@AM_clearFB:

; 738  : 			{
; 739  : 				while (src > maplump + BASEVIDWIDTH*MAPLUMPHEIGHT)

  002b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _maplump
  002be	05 80 c5 00 00	 add	 eax, 50560		; 0000c580H
  002c3	39 45 e8	 cmp	 DWORD PTR _src$1[ebp], eax
  002c6	76 0d		 jbe	 SHORT $LN17@AM_clearFB

; 740  : 					src -= BASEVIDWIDTH*MAPLUMPHEIGHT;

  002c8	8b 45 e8	 mov	 eax, DWORD PTR _src$1[ebp]
  002cb	2d 80 c5 00 00	 sub	 eax, 50560		; 0000c580H
  002d0	89 45 e8	 mov	 DWORD PTR _src$1[ebp], eax
  002d3	eb e4		 jmp	 SHORT $LN16@AM_clearFB
$LN17@AM_clearFB:

; 741  : 				*dest++ = *src++;

  002d5	8b 45 ec	 mov	 eax, DWORD PTR _dest$2[ebp]
  002d8	8b 4d e8	 mov	 ecx, DWORD PTR _src$1[ebp]
  002db	8a 11		 mov	 dl, BYTE PTR [ecx]
  002dd	88 10		 mov	 BYTE PTR [eax], dl
  002df	8b 45 ec	 mov	 eax, DWORD PTR _dest$2[ebp]
  002e2	83 c0 01	 add	 eax, 1
  002e5	89 45 ec	 mov	 DWORD PTR _dest$2[ebp], eax
  002e8	8b 4d e8	 mov	 ecx, DWORD PTR _src$1[ebp]
  002eb	83 c1 01	 add	 ecx, 1
  002ee	89 4d e8	 mov	 DWORD PTR _src$1[ebp], ecx

; 742  : 			}

  002f1	eb ae		 jmp	 SHORT $LN13@AM_clearFB
$LN14@AM_clearFB:

; 743  : 			dest += vid.width - vid.dupx*BASEVIDWIDTH;

  002f3	69 05 20 00 00
	00 40 01 00 00	 imul	 eax, DWORD PTR _vid+32, 320
  002fd	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _vid+12
  00303	2b c8		 sub	 ecx, eax
  00305	03 4d ec	 add	 ecx, DWORD PTR _dest$2[ebp]
  00308	89 4d ec	 mov	 DWORD PTR _dest$2[ebp], ecx

; 744  : 		}

  0030b	e9 51 ff ff ff	 jmp	 $LN10@AM_clearFB
$LN11@AM_clearFB:

; 745  : 	}
; 746  : }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c3		 ret	 0
_AM_clearFB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_doFollowPlayer
_TEXT	SEGMENT
_AM_doFollowPlayer PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  : 	if (f_oldloc.x != plr->mo->x || f_oldloc.y != plr->mo->y)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _f_oldloc
  00016	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00019	75 16		 jne	 SHORT $LN3@AM_doFollo
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _f_oldloc+4
  00028	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  0002b	0f 84 c8 00 00
	00		 je	 $LN2@AM_doFollo
$LN3@AM_doFollo:

; 640  : 	{
; 641  : 		m_x = FTOM(MTOF(plr->mo->x)) - m_w/2;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  00036	50		 push	 eax
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scale_mtof
  0003d	51		 push	 ecx
  0003e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _plr
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _FixedMul
  0004f	83 c4 08	 add	 esp, 8
  00052	c1 f8 10	 sar	 eax, 16			; 00000010H
  00055	c1 e0 10	 shl	 eax, 16			; 00000010H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _FixedMul
  0005e	83 c4 08	 add	 esp, 8
  00061	8b c8		 mov	 ecx, eax
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00068	99		 cdq
  00069	2b c2		 sub	 eax, edx
  0006b	d1 f8		 sar	 eax, 1
  0006d	2b c8		 sub	 ecx, eax
  0006f	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_x, ecx

; 642  : 		m_y = FTOM(MTOF(plr->mo->y)) - m_h/2;

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  0007a	50		 push	 eax
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scale_mtof
  00081	51		 push	 ecx
  00082	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _plr
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 _FixedMul
  00093	83 c4 08	 add	 esp, 8
  00096	c1 f8 10	 sar	 eax, 16			; 00000010H
  00099	c1 e0 10	 shl	 eax, 16			; 00000010H
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _FixedMul
  000a2	83 c4 08	 add	 esp, 8
  000a5	8b c8		 mov	 ecx, eax
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  000ac	99		 cdq
  000ad	2b c2		 sub	 eax, edx
  000af	d1 f8		 sar	 eax, 1
  000b1	2b c8		 sub	 ecx, eax
  000b3	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_y, ecx

; 643  : 		m_x2 = m_x + m_w;

  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  000be	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_w
  000c4	a3 00 00 00 00	 mov	 DWORD PTR _m_x2, eax

; 644  : 		m_y2 = m_y + m_h;

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  000ce	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_h
  000d4	a3 00 00 00 00	 mov	 DWORD PTR _m_y2, eax

; 645  : 		f_oldloc.x = plr->mo->x;

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  000de	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e3	89 15 00 00 00
	00		 mov	 DWORD PTR _f_oldloc, edx

; 646  : 		f_oldloc.y = plr->mo->y;

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  000ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000f3	89 15 04 00 00
	00		 mov	 DWORD PTR _f_oldloc+4, edx
$LN2@AM_doFollo:

; 647  : 	}
; 648  : }

  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_AM_doFollowPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_changeWindowScale
_TEXT	SEGMENT
_AM_changeWindowScale PROC				; COMDAT

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 625  : 	// Change the scaling multipliers
; 626  : 	scale_mtof = FixedMul(scale_mtof, mtof_zoommul);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _mtof_zoommul
  0000e	50		 push	 eax
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _scale_mtof
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _FixedMul
  0001b	83 c4 08	 add	 esp, 8
  0001e	a3 00 00 00 00	 mov	 DWORD PTR _scale_mtof, eax

; 627  : 	scale_ftom = FixedDiv(FRACUNIT, scale_mtof);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00028	50		 push	 eax
  00029	68 00 00 01 00	 push	 65536			; 00010000H
  0002e	e8 00 00 00 00	 call	 _FixedDiv
  00033	83 c4 08	 add	 esp, 8
  00036	a3 00 00 00 00	 mov	 DWORD PTR _scale_ftom, eax

; 628  : 
; 629  : 	if (scale_mtof < min_scale_mtof)

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00040	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _min_scale_mtof
  00046	7d 08		 jge	 SHORT $LN2@AM_changeW

; 630  : 		AM_minOutWindowScale();

  00048	e8 00 00 00 00	 call	 _AM_minOutWindowScale
  0004d	90		 npad	 1
  0004e	eb 1b		 jmp	 SHORT $LN5@AM_changeW
$LN2@AM_changeW:

; 631  : 	else if (scale_mtof > max_scale_mtof)

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00055	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _max_scale_mtof
  0005b	7e 08		 jle	 SHORT $LN4@AM_changeW

; 632  : 		AM_maxOutWindowScale();

  0005d	e8 00 00 00 00	 call	 _AM_maxOutWindowScale
  00062	90		 npad	 1
  00063	eb 06		 jmp	 SHORT $LN5@AM_changeW
$LN4@AM_changeW:

; 633  : 	else
; 634  : 		AM_activateNewScale();

  00065	e8 00 00 00 00	 call	 _AM_activateNewScale
  0006a	90		 npad	 1
$LN5@AM_changeW:

; 635  : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_AM_changeWindowScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_maxOutWindowScale
_TEXT	SEGMENT
_AM_maxOutWindowScale PROC				; COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 494  : 	scale_mtof = max_scale_mtof;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _max_scale_mtof
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _scale_mtof, eax

; 495  : 	scale_ftom = FixedDiv(FRACUNIT, scale_mtof);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00018	50		 push	 eax
  00019	68 00 00 01 00	 push	 65536			; 00010000H
  0001e	e8 00 00 00 00	 call	 _FixedDiv
  00023	83 c4 08	 add	 esp, 8
  00026	a3 00 00 00 00	 mov	 DWORD PTR _scale_ftom, eax

; 496  : 	AM_activateNewScale();

  0002b	e8 00 00 00 00	 call	 _AM_activateNewScale
  00030	90		 npad	 1

; 497  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AM_maxOutWindowScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_minOutWindowScale
_TEXT	SEGMENT
_AM_minOutWindowScale PROC				; COMDAT

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 484  : 	scale_mtof = min_scale_mtof;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _min_scale_mtof
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _scale_mtof, eax

; 485  : 	scale_ftom = FixedDiv(FRACUNIT, scale_mtof);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  00018	50		 push	 eax
  00019	68 00 00 01 00	 push	 65536			; 00010000H
  0001e	e8 00 00 00 00	 call	 _FixedDiv
  00023	83 c4 08	 add	 esp, 8
  00026	a3 00 00 00 00	 mov	 DWORD PTR _scale_ftom, eax

; 486  : 	AM_activateNewScale();

  0002b	e8 00 00 00 00	 call	 _AM_activateNewScale
  00030	90		 npad	 1

; 487  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AM_minOutWindowScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_Start
_TEXT	SEGMENT
_AM_Start PROC						; COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 464  : 	static INT32 lastlevel = -1;
; 465  : 
; 466  : 	if (!stopped)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _stopped, 0
  00010	75 06		 jne	 SHORT $LN2@AM_Start

; 467  : 		AM_Stop();

  00012	e8 00 00 00 00	 call	 _AM_Stop
  00017	90		 npad	 1
$LN2@AM_Start:

; 468  : 	stopped = false;

  00018	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _stopped, 0

; 469  : 	if (lastlevel != gamemap || am_recalc) // screen size changed

  00022	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00029	39 05 00 00 00
	00		 cmp	 DWORD PTR ?lastlevel@?1??AM_Start@@9@9, eax
  0002f	75 09		 jne	 SHORT $LN4@AM_Start
  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _am_recalc, 0
  00038	74 1c		 je	 SHORT $LN3@AM_Start
$LN4@AM_Start:

; 470  : 	{
; 471  : 		am_recalc = false;

  0003a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _am_recalc, 0

; 472  : 
; 473  : 		AM_LevelInit();

  00044	e8 00 00 00 00	 call	 _AM_LevelInit
  00049	90		 npad	 1

; 474  : 		lastlevel = gamemap;

  0004a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00051	a3 00 00 00 00	 mov	 DWORD PTR ?lastlevel@?1??AM_Start@@9@9, eax
$LN3@AM_Start:

; 475  : 	}
; 476  : 	AM_initVariables();

  00056	e8 00 00 00 00	 call	 _AM_initVariables
  0005b	90		 npad	 1

; 477  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_AM_Start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_LevelInit
_TEXT	SEGMENT
_AM_LevelInit PROC					; COMDAT

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 424  : 	leveljuststarted = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _leveljuststarted, 0

; 425  : 
; 426  : 	f_x = f_y = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _f_y, 0
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_y
  00022	a3 00 00 00 00	 mov	 DWORD PTR _f_x, eax

; 427  : 	f_w = vid.width;

  00027	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  0002c	a3 00 00 00 00	 mov	 DWORD PTR _f_w, eax

; 428  : 	f_h = vid.height;

  00031	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00036	a3 00 00 00 00	 mov	 DWORD PTR _f_h, eax

; 429  : 
; 430  : 	if (rendermode == render_soft)

  0003b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00042	75 0c		 jne	 SHORT $LN2@AM_LevelIn

; 431  : 		AM_drawFline = AM_drawFline_soft;

  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _AM_drawFline, OFFSET _AM_drawFline_soft
  0004e	eb 22		 jmp	 SHORT $LN5@AM_LevelIn
$LN2@AM_LevelIn:

; 432  : #ifdef HWRENDER // not win32 only 19990829 by Kin
; 433  : 	else if (rendermode != render_none)

  00050	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00057	74 0c		 je	 SHORT $LN4@AM_LevelIn

; 434  : 		AM_drawFline = HWR_drawAMline;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _AM_drawFline, OFFSET _HWR_drawAMline
  00063	eb 0d		 jmp	 SHORT $LN5@AM_LevelIn
$LN4@AM_LevelIn:

; 435  : #endif
; 436  : 	else
; 437  : 		I_Error("Automap can't run without a render system");

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EINOJIMG@Automap?5can?8t?5run?5without?5a?5ren@
  0006a	e8 00 00 00 00	 call	 _I_Error
  0006f	83 c4 04	 add	 esp, 4
$LN5@AM_LevelIn:

; 438  : 
; 439  : 	AM_clearMarks();

  00072	e8 00 00 00 00	 call	 _AM_clearMarks
  00077	90		 npad	 1

; 440  : 
; 441  : 	AM_findMinMaxBoundaries();

  00078	e8 00 00 00 00	 call	 _AM_findMinMaxBoundaries
  0007d	90		 npad	 1

; 442  : 	scale_mtof = FixedDiv(min_scale_mtof*10, 7*FRACUNIT);

  0007e	68 00 00 07 00	 push	 458752			; 00070000H
  00083	6b 05 00 00 00
	00 0a		 imul	 eax, DWORD PTR _min_scale_mtof, 10
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _FixedDiv
  00090	83 c4 08	 add	 esp, 8
  00093	a3 00 00 00 00	 mov	 DWORD PTR _scale_mtof, eax

; 443  : 	if (scale_mtof > max_scale_mtof)

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  0009d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _max_scale_mtof
  000a3	7e 0a		 jle	 SHORT $LN6@AM_LevelIn

; 444  : 		scale_mtof = min_scale_mtof;

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _min_scale_mtof
  000aa	a3 00 00 00 00	 mov	 DWORD PTR _scale_mtof, eax
$LN6@AM_LevelIn:

; 445  : 	scale_ftom = FixedDiv(FRACUNIT, scale_mtof);

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  000b4	50		 push	 eax
  000b5	68 00 00 01 00	 push	 65536			; 00010000H
  000ba	e8 00 00 00 00	 call	 _FixedDiv
  000bf	83 c4 08	 add	 esp, 8
  000c2	a3 00 00 00 00	 mov	 DWORD PTR _scale_ftom, eax

; 446  : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_AM_LevelInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_clearMarks
_TEXT	SEGMENT
_i$ = -4						; size = 4
_AM_clearMarks PROC					; COMDAT

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 411  : 	INT32 i;
; 412  : 
; 413  : 	for (i = 0; i < AM_NUMMARKPOINTS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@AM_clearMa
$LN2@AM_clearMa:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AM_clearMa:
  0001b	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0001f	7d 10		 jge	 SHORT $LN3@AM_clearMa

; 414  : 		markpoints[i].x = -1; // means empty

  00021	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00024	c7 04 c5 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR _markpoints[eax*8], -1
  0002f	eb e1		 jmp	 SHORT $LN2@AM_clearMa
$LN3@AM_clearMa:

; 415  : 	markpointnum = 0;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _markpointnum, 0

; 416  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_AM_clearMarks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_initVariables
_TEXT	SEGMENT
_pnum$ = -4						; size = 4
_AM_initVariables PROC					; COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 371  : 	INT32 pnum;
; 372  : 
; 373  : 	automapactive = true;

  00009	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _automapactive, 1

; 374  : 	fb = screens[0];

  00013	b8 04 00 00 00	 mov	 eax, 4
  00018	6b c8 00	 imul	 ecx, eax, 0
  0001b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _screens[ecx]
  00021	89 15 00 00 00
	00		 mov	 DWORD PTR _fb, edx

; 375  : 
; 376  : 	f_oldloc.x = INT32_MAX;

  00027	c7 05 00 00 00
	00 ff ff ff 7f	 mov	 DWORD PTR _f_oldloc, 2147483647 ; 7fffffffH

; 377  : 	amclock = 0;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _amclock, 0

; 378  : 	lightlev = 0;

  0003b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _lightlev, 0

; 379  : 
; 380  : 	m_paninc.x = m_paninc.y = 0;

  00045	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_paninc+4, 0
  0004f	a1 04 00 00 00	 mov	 eax, DWORD PTR _m_paninc+4
  00054	a3 00 00 00 00	 mov	 DWORD PTR _m_paninc, eax

; 381  : 	ftom_zoommul = FRACUNIT;

  00059	c7 05 00 00 00
	00 00 00 01 00	 mov	 DWORD PTR _ftom_zoommul, 65536 ; 00010000H

; 382  : 	mtof_zoommul = FRACUNIT;

  00063	c7 05 00 00 00
	00 00 00 01 00	 mov	 DWORD PTR _mtof_zoommul, 65536 ; 00010000H

; 383  : 
; 384  : 	m_w = FTOM(f_w);

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  00072	50		 push	 eax
  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_w
  00079	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 _FixedMul
  00082	83 c4 08	 add	 esp, 8
  00085	a3 00 00 00 00	 mov	 DWORD PTR _m_w, eax

; 385  : 	m_h = FTOM(f_h);

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  0008f	50		 push	 eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_h
  00096	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 _FixedMul
  0009f	83 c4 08	 add	 esp, 8
  000a2	a3 00 00 00 00	 mov	 DWORD PTR _m_h, eax

; 386  : 
; 387  : 	// find player to center on initially
; 388  : 	if (!playeringame[pnum = consoleplayer])

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  000ac	89 45 fc	 mov	 DWORD PTR _pnum$[ebp], eax
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _pnum$[ebp]
  000b2	83 3c 8d 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[ecx*4], 0
  000ba	75 29		 jne	 SHORT $LN3@AM_initVar

; 389  : 		for (pnum = 0; pnum < MAXPLAYERS; pnum++)

  000bc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pnum$[ebp], 0
  000c3	eb 09		 jmp	 SHORT $LN4@AM_initVar
$LN2@AM_initVar:
  000c5	8b 45 fc	 mov	 eax, DWORD PTR _pnum$[ebp]
  000c8	83 c0 01	 add	 eax, 1
  000cb	89 45 fc	 mov	 DWORD PTR _pnum$[ebp], eax
$LN4@AM_initVar:
  000ce	83 7d fc 20	 cmp	 DWORD PTR _pnum$[ebp], 32 ; 00000020H
  000d2	7d 11		 jge	 SHORT $LN3@AM_initVar

; 390  : 			if (playeringame[pnum])

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _pnum$[ebp]
  000d7	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000df	74 02		 je	 SHORT $LN6@AM_initVar

; 391  : 				break;

  000e1	eb 02		 jmp	 SHORT $LN3@AM_initVar
$LN6@AM_initVar:
  000e3	eb e0		 jmp	 SHORT $LN2@AM_initVar
$LN3@AM_initVar:

; 392  : 
; 393  : 	plr = &players[pnum];

  000e5	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _pnum$[ebp], 508
  000ec	05 00 00 00 00	 add	 eax, OFFSET _players
  000f1	a3 00 00 00 00	 mov	 DWORD PTR _plr, eax

; 394  : 	m_x = plr->mo->x - m_w/2;

  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00102	99		 cdq
  00103	2b c2		 sub	 eax, edx
  00105	d1 f8		 sar	 eax, 1
  00107	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010a	2b d0		 sub	 edx, eax
  0010c	89 15 00 00 00
	00		 mov	 DWORD PTR _m_x, edx

; 395  : 	m_y = plr->mo->y - m_h/2;

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  00117	8b 08		 mov	 ecx, DWORD PTR [eax]
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  0011e	99		 cdq
  0011f	2b c2		 sub	 eax, edx
  00121	d1 f8		 sar	 eax, 1
  00123	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00126	2b d0		 sub	 edx, eax
  00128	89 15 00 00 00
	00		 mov	 DWORD PTR _m_y, edx

; 396  : 	AM_changeWindowLoc();

  0012e	e8 00 00 00 00	 call	 _AM_changeWindowLoc
  00133	90		 npad	 1

; 397  : 
; 398  : 	// for saving & restoring
; 399  : 	old_m_x = m_x;

  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  00139	a3 00 00 00 00	 mov	 DWORD PTR _old_m_x, eax

; 400  : 	old_m_y = m_y;

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  00143	a3 00 00 00 00	 mov	 DWORD PTR _old_m_y, eax

; 401  : 	old_m_w = m_w;

  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  0014d	a3 00 00 00 00	 mov	 DWORD PTR _old_m_w, eax

; 402  : 	old_m_h = m_h;

  00152	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  00157	a3 00 00 00 00	 mov	 DWORD PTR _old_m_h, eax

; 403  : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
_AM_initVariables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_changeWindowLoc
_TEXT	SEGMENT
_AM_changeWindowLoc PROC				; COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 346  : 	if (m_paninc.x || m_paninc.y)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _m_paninc, 0
  00010	75 09		 jne	 SHORT $LN3@AM_changeW
  00012	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _m_paninc+4, 0
  00019	74 14		 je	 SHORT $LN2@AM_changeW
$LN3@AM_changeW:

; 347  : 	{
; 348  : 		followplayer = 0;

  0001b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _followplayer, 0

; 349  : 		f_oldloc.x = INT32_MAX;

  00025	c7 05 00 00 00
	00 ff ff ff 7f	 mov	 DWORD PTR _f_oldloc, 2147483647 ; 7fffffffH
$LN2@AM_changeW:

; 350  : 	}
; 351  : 
; 352  : 	m_x += m_paninc.x;

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  00034	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_paninc
  0003a	a3 00 00 00 00	 mov	 DWORD PTR _m_x, eax

; 353  : 	m_y += m_paninc.y;

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  00044	03 05 04 00 00
	00		 add	 eax, DWORD PTR _m_paninc+4
  0004a	a3 00 00 00 00	 mov	 DWORD PTR _m_y, eax

; 354  : 
; 355  : 	if (m_x + m_w/2 > max_x)

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00054	99		 cdq
  00055	2b c2		 sub	 eax, edx
  00057	d1 f8		 sar	 eax, 1
  00059	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_x
  0005f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _max_x
  00065	7e 1a		 jle	 SHORT $LN4@AM_changeW

; 356  : 		m_x = max_x - m_w/2;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  0006c	99		 cdq
  0006d	2b c2		 sub	 eax, edx
  0006f	d1 f8		 sar	 eax, 1
  00071	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _max_x
  00077	2b c8		 sub	 ecx, eax
  00079	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_x, ecx
  0007f	eb 30		 jmp	 SHORT $LN6@AM_changeW
$LN4@AM_changeW:

; 357  : 	else if (m_x + m_w/2 < min_x)

  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00086	99		 cdq
  00087	2b c2		 sub	 eax, edx
  00089	d1 f8		 sar	 eax, 1
  0008b	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_x
  00091	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _min_x
  00097	7d 18		 jge	 SHORT $LN6@AM_changeW

; 358  : 		m_x = min_x - m_w/2;

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  0009e	99		 cdq
  0009f	2b c2		 sub	 eax, edx
  000a1	d1 f8		 sar	 eax, 1
  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _min_x
  000a9	2b c8		 sub	 ecx, eax
  000ab	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_x, ecx
$LN6@AM_changeW:

; 359  : 
; 360  : 	if (m_y + m_h/2 > max_y)

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  000b6	99		 cdq
  000b7	2b c2		 sub	 eax, edx
  000b9	d1 f8		 sar	 eax, 1
  000bb	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_y
  000c1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _max_y
  000c7	7e 1a		 jle	 SHORT $LN7@AM_changeW

; 361  : 		m_y = max_y - m_h/2;

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  000ce	99		 cdq
  000cf	2b c2		 sub	 eax, edx
  000d1	d1 f8		 sar	 eax, 1
  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _max_y
  000d9	2b c8		 sub	 ecx, eax
  000db	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_y, ecx
  000e1	eb 30		 jmp	 SHORT $LN9@AM_changeW
$LN7@AM_changeW:

; 362  : 	else if (m_y + m_h/2 < min_y)

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  000e8	99		 cdq
  000e9	2b c2		 sub	 eax, edx
  000eb	d1 f8		 sar	 eax, 1
  000ed	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_y
  000f3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _min_y
  000f9	7d 18		 jge	 SHORT $LN9@AM_changeW

; 363  : 		m_y = min_y - m_h/2;

  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  00100	99		 cdq
  00101	2b c2		 sub	 eax, edx
  00103	d1 f8		 sar	 eax, 1
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _min_y
  0010b	2b c8		 sub	 ecx, eax
  0010d	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_y, ecx
$LN9@AM_changeW:

; 364  : 
; 365  : 	m_x2 = m_x + m_w;

  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  00118	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_w
  0011e	a3 00 00 00 00	 mov	 DWORD PTR _m_x2, eax

; 366  : 	m_y2 = m_y + m_h;

  00123	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  00128	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_h
  0012e	a3 00 00 00 00	 mov	 DWORD PTR _m_y2, eax

; 367  : }

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
_AM_changeWindowLoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_findMinMaxBoundaries
_TEXT	SEGMENT
tv137 = -80						; size = 4
_b$ = -12						; size = 4
_a$ = -8						; size = 4
_i$ = -4						; size = 4
_AM_findMinMaxBoundaries PROC				; COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 311  : 	size_t i;
; 312  : 	fixed_t a;
; 313  : 	fixed_t b;
; 314  : 
; 315  : 	min_x = min_y = +INT32_MAX;

  00009	c7 05 00 00 00
	00 ff ff ff 7f	 mov	 DWORD PTR _min_y, 2147483647 ; 7fffffffH
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _min_y
  00018	a3 00 00 00 00	 mov	 DWORD PTR _min_x, eax

; 316  : 	max_x = max_y = -INT32_MAX;

  0001d	c7 05 00 00 00
	00 01 00 00 80	 mov	 DWORD PTR _max_y, -2147483647 ; 80000001H
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR _max_y
  0002c	a3 00 00 00 00	 mov	 DWORD PTR _max_x, eax

; 317  : 
; 318  : 	for (i = 0; i < numvertexes; i++)

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN4@AM_findMin
$LN2@AM_findMin:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@AM_findMin:
  00043	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00046	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numvertexes
  0004c	0f 83 ad 00 00
	00		 jae	 $LN3@AM_findMin

; 319  : 	{
; 320  : 		if (vertexes[i].x < min_x)

  00052	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  0005c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0005f	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _min_x
  00065	7d 15		 jge	 SHORT $LN5@AM_findMin

; 321  : 			min_x = vertexes[i].x;

  00067	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  00071	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00074	89 15 00 00 00
	00		 mov	 DWORD PTR _min_x, edx
  0007a	eb 28		 jmp	 SHORT $LN7@AM_findMin
$LN5@AM_findMin:

; 322  : 		else if (vertexes[i].x > max_x)

  0007c	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00080	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  00086	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00089	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _max_x
  0008f	7e 13		 jle	 SHORT $LN7@AM_findMin

; 323  : 			max_x = vertexes[i].x;

  00091	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  0009b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0009e	89 15 00 00 00
	00		 mov	 DWORD PTR _max_x, edx
$LN7@AM_findMin:

; 324  : 
; 325  : 		if (vertexes[i].y < min_y)

  000a4	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  000ae	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000b2	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _min_y
  000b8	7d 16		 jge	 SHORT $LN8@AM_findMin

; 326  : 			min_y = vertexes[i].y;

  000ba	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  000c4	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000c8	89 15 00 00 00
	00		 mov	 DWORD PTR _min_y, edx
  000ce	eb 2a		 jmp	 SHORT $LN10@AM_findMin
$LN8@AM_findMin:

; 327  : 		else if (vertexes[i].y > max_y)

  000d0	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  000da	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000de	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _max_y
  000e4	7e 14		 jle	 SHORT $LN10@AM_findMin

; 328  : 			max_y = vertexes[i].y;

  000e6	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _vertexes
  000f0	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000f4	89 15 00 00 00
	00		 mov	 DWORD PTR _max_y, edx
$LN10@AM_findMin:

; 329  : 	}

  000fa	e9 3b ff ff ff	 jmp	 $LN2@AM_findMin
$LN3@AM_findMin:

; 330  : 
; 331  : 	max_w = max_x - min_x;

  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _max_x
  00104	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _min_x
  0010a	a3 00 00 00 00	 mov	 DWORD PTR _max_w, eax

; 332  : 	max_h = max_y - min_y;

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR _max_y
  00114	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _min_y
  0011a	a3 00 00 00 00	 mov	 DWORD PTR _max_h, eax

; 333  : 
; 334  : 	min_w = 2*PLAYERRADIUS; // const? never changed?

  0011f	c7 05 00 00 00
	00 00 00 20 00	 mov	 DWORD PTR _min_w, 2097152 ; 00200000H

; 335  : 	min_h = 2*PLAYERRADIUS;

  00129	c7 05 00 00 00
	00 00 00 20 00	 mov	 DWORD PTR _min_h, 2097152 ; 00200000H

; 336  : 
; 337  : 	a = FixedDiv(f_w<<FRACBITS, max_w);

  00133	a1 00 00 00 00	 mov	 eax, DWORD PTR _max_w
  00138	50		 push	 eax
  00139	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_w
  0013f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 _FixedDiv
  00148	83 c4 08	 add	 esp, 8
  0014b	89 45 f8	 mov	 DWORD PTR _a$[ebp], eax

; 338  : 	b = FixedDiv(f_h<<FRACBITS, max_h);

  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR _max_h
  00153	50		 push	 eax
  00154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_h
  0015a	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 _FixedDiv
  00163	83 c4 08	 add	 esp, 8
  00166	89 45 f4	 mov	 DWORD PTR _b$[ebp], eax

; 339  : 
; 340  : 	min_scale_mtof = a < b ? a : b;

  00169	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  0016c	3b 45 f4	 cmp	 eax, DWORD PTR _b$[ebp]
  0016f	7d 08		 jge	 SHORT $LN12@AM_findMin
  00171	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  00174	89 4d b0	 mov	 DWORD PTR tv137[ebp], ecx
  00177	eb 06		 jmp	 SHORT $LN13@AM_findMin
$LN12@AM_findMin:
  00179	8b 55 f4	 mov	 edx, DWORD PTR _b$[ebp]
  0017c	89 55 b0	 mov	 DWORD PTR tv137[ebp], edx
$LN13@AM_findMin:
  0017f	8b 45 b0	 mov	 eax, DWORD PTR tv137[ebp]
  00182	a3 00 00 00 00	 mov	 DWORD PTR _min_scale_mtof, eax

; 341  : 	max_scale_mtof = FixedDiv(f_h<<FRACBITS, 2*PLAYERRADIUS);

  00187	68 00 00 20 00	 push	 2097152			; 00200000H
  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR _f_h
  00191	c1 e0 10	 shl	 eax, 16			; 00000010H
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 _FixedDiv
  0019a	83 c4 08	 add	 esp, 8
  0019d	a3 00 00 00 00	 mov	 DWORD PTR _max_scale_mtof, eax

; 342  : }

  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c3		 ret	 0
_AM_findMinMaxBoundaries ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_addMark
_TEXT	SEGMENT
_AM_addMark PROC					; COMDAT

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 301  : 	markpoints[markpointnum].x = m_x + m_w/2;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  0000e	99		 cdq
  0000f	2b c2		 sub	 eax, edx
  00011	d1 f8		 sar	 eax, 1
  00013	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_x
  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _markpointnum
  0001f	89 04 cd 00 00
	00 00		 mov	 DWORD PTR _markpoints[ecx*8], eax

; 302  : 	markpoints[markpointnum].y = m_y + m_h/2;

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  0002b	99		 cdq
  0002c	2b c2		 sub	 eax, edx
  0002e	d1 f8		 sar	 eax, 1
  00030	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_y
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _markpointnum
  0003c	89 04 cd 04 00
	00 00		 mov	 DWORD PTR _markpoints[ecx*8+4], eax

; 303  : 	markpointnum = (markpointnum + 1) % AM_NUMMARKPOINTS;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _markpointnum
  00048	83 c0 01	 add	 eax, 1
  0004b	99		 cdq
  0004c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00051	f7 f9		 idiv	 ecx
  00053	89 15 00 00 00
	00		 mov	 DWORD PTR _markpointnum, edx

; 304  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_AM_addMark ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_restoreScaleAndLoc
_TEXT	SEGMENT
_AM_restoreScaleAndLoc PROC				; COMDAT

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 277  : 	m_w = old_m_w;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _old_m_w
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _m_w, eax

; 278  : 	m_h = old_m_h;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _old_m_h
  00018	a3 00 00 00 00	 mov	 DWORD PTR _m_h, eax

; 279  : 	if (!followplayer)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  00024	75 16		 jne	 SHORT $LN2@AM_restore

; 280  : 	{
; 281  : 		m_x = old_m_x;

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR _old_m_x
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _m_x, eax

; 282  : 		m_y = old_m_y;

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR _old_m_y
  00035	a3 00 00 00 00	 mov	 DWORD PTR _m_y, eax

; 283  : 	}

  0003a	eb 38		 jmp	 SHORT $LN3@AM_restore
$LN2@AM_restore:

; 284  : 	else
; 285  : 	{
; 286  : 		m_x = plr->mo->x - m_w/2;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00048	99		 cdq
  00049	2b c2		 sub	 eax, edx
  0004b	d1 f8		 sar	 eax, 1
  0004d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00050	2b d0		 sub	 edx, eax
  00052	89 15 00 00 00
	00		 mov	 DWORD PTR _m_x, edx

; 287  : 		m_y = plr->mo->y - m_h/2;

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR _plr
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  00064	99		 cdq
  00065	2b c2		 sub	 eax, edx
  00067	d1 f8		 sar	 eax, 1
  00069	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0006c	2b d0		 sub	 edx, eax
  0006e	89 15 00 00 00
	00		 mov	 DWORD PTR _m_y, edx
$LN3@AM_restore:

; 288  : 	}
; 289  : 	m_x2 = m_x + m_w;

  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  00079	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_w
  0007f	a3 00 00 00 00	 mov	 DWORD PTR _m_x2, eax

; 290  : 	m_y2 = m_y + m_h;

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  00089	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_h
  0008f	a3 00 00 00 00	 mov	 DWORD PTR _m_y2, eax

; 291  : 
; 292  : 	// Change the scaling multipliers
; 293  : 	scale_mtof = FixedDiv(f_w<<FRACBITS, m_w);

  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00099	50		 push	 eax
  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_w
  000a0	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 _FixedDiv
  000a9	83 c4 08	 add	 esp, 8
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _scale_mtof, eax

; 294  : 	scale_ftom = FixedDiv(FRACUNIT, scale_mtof);

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_mtof
  000b6	50		 push	 eax
  000b7	68 00 00 01 00	 push	 65536			; 00010000H
  000bc	e8 00 00 00 00	 call	 _FixedDiv
  000c1	83 c4 08	 add	 esp, 8
  000c4	a3 00 00 00 00	 mov	 DWORD PTR _scale_ftom, eax

; 295  : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_AM_restoreScaleAndLoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_saveScaleAndLoc
_TEXT	SEGMENT
_AM_saveScaleAndLoc PROC				; COMDAT

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 269  : 	old_m_x = m_x;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _old_m_x, eax

; 270  : 	old_m_y = m_y;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  00018	a3 00 00 00 00	 mov	 DWORD PTR _old_m_y, eax

; 271  : 	old_m_w = m_w;

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00022	a3 00 00 00 00	 mov	 DWORD PTR _old_m_w, eax

; 272  : 	old_m_h = m_h;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  0002c	a3 00 00 00 00	 mov	 DWORD PTR _old_m_h, eax

; 273  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AM_saveScaleAndLoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_activateNewScale
_TEXT	SEGMENT
_AM_activateNewScale PROC				; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 257  : 	m_x += m_w/2;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  0000e	99		 cdq
  0000f	2b c2		 sub	 eax, edx
  00011	d1 f8		 sar	 eax, 1
  00013	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_x
  00019	a3 00 00 00 00	 mov	 DWORD PTR _m_x, eax

; 258  : 	m_y += m_h/2;

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  00023	99		 cdq
  00024	2b c2		 sub	 eax, edx
  00026	d1 f8		 sar	 eax, 1
  00028	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_y
  0002e	a3 00 00 00 00	 mov	 DWORD PTR _m_y, eax

; 259  : 	m_w = FTOM(f_w);

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  00038	50		 push	 eax
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_w
  0003f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _FixedMul
  00048	83 c4 08	 add	 esp, 8
  0004b	a3 00 00 00 00	 mov	 DWORD PTR _m_w, eax

; 260  : 	m_h = FTOM(f_h);

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  00055	50		 push	 eax
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _f_h
  0005c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _FixedMul
  00065	83 c4 08	 add	 esp, 8
  00068	a3 00 00 00 00	 mov	 DWORD PTR _m_h, eax

; 261  : 	m_x -= m_w/2;

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_w
  00072	99		 cdq
  00073	2b c2		 sub	 eax, edx
  00075	d1 f8		 sar	 eax, 1
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _m_x
  0007d	2b c8		 sub	 ecx, eax
  0007f	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_x, ecx

; 262  : 	m_y -= m_h/2;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_h
  0008a	99		 cdq
  0008b	2b c2		 sub	 eax, edx
  0008d	d1 f8		 sar	 eax, 1
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _m_y
  00095	2b c8		 sub	 ecx, eax
  00097	89 0d 00 00 00
	00		 mov	 DWORD PTR _m_y, ecx

; 263  : 	m_x2 = m_x + m_w;

  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_x
  000a2	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_w
  000a8	a3 00 00 00 00	 mov	 DWORD PTR _m_x2, eax

; 264  : 	m_y2 = m_y + m_h;

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR _m_y
  000b2	03 05 00 00 00
	00		 add	 eax, DWORD PTR _m_h
  000b8	a3 00 00 00 00	 mov	 DWORD PTR _m_y2, eax

; 265  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_AM_activateNewScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_drawFline_soft
_TEXT	SEGMENT
tv81 = -104						; size = 4
tv89 = -104						; size = 4
tv92 = -104						; size = 4
tv130 = -104						; size = 4
tv133 = -104						; size = 4
_d$ = -36						; size = 4
_ay$ = -32						; size = 4
_ax$ = -28						; size = 4
_sy$ = -24						; size = 4
_sx$ = -20						; size = 4
_dy$ = -16						; size = 4
_dx$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_fl$ = 8						; size = 4
_color$ = 12						; size = 4
_AM_drawFline_soft PROC					; COMDAT

; 879  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 	register INT32 x, y, dx, dy, sx, sy, ax, ay, d;
; 881  : 
; 882  : #ifdef _DEBUG
; 883  : 	static INT32 num = 0;
; 884  : 
; 885  : 	// For debugging only
; 886  : 	if (fl->a.x < 0 || fl->a.x >= f_w
; 887  : 	|| fl->a.y < 0 || fl->a.y >= f_h
; 888  : 	|| fl->b.x < 0 || fl->b.x >= f_w
; 889  : 	|| fl->b.y < 0 || fl->b.y >= f_h)

  00009	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	7c 52		 jl	 SHORT $LN9@AM_drawFli
  00011	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_w
  0001c	7d 45		 jge	 SHORT $LN9@AM_drawFli
  0001e	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00021	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00025	7c 3c		 jl	 SHORT $LN9@AM_drawFli
  00027	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_h
  00033	7d 2e		 jge	 SHORT $LN9@AM_drawFli
  00035	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00038	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003c	7c 25		 jl	 SHORT $LN9@AM_drawFli
  0003e	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00041	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00044	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_w
  0004a	7d 17		 jge	 SHORT $LN9@AM_drawFli
  0004c	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  0004f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00053	7c 0e		 jl	 SHORT $LN9@AM_drawFli
  00055	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00058	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _f_h
  00061	7c 2d		 jl	 SHORT $LN8@AM_drawFli
$LN9@AM_drawFli:

; 890  : 	{
; 891  : 		CONS_Printf("line clipping problem %d\n", num++);

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num@?1??AM_drawFline_soft@@9@9
  00068	89 45 98	 mov	 DWORD PTR tv81[ebp], eax
  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?num@?1??AM_drawFline_soft@@9@9
  00071	83 c1 01	 add	 ecx, 1
  00074	89 0d 00 00 00
	00		 mov	 DWORD PTR ?num@?1??AM_drawFline_soft@@9@9, ecx
  0007a	8b 55 98	 mov	 edx, DWORD PTR tv81[ebp]
  0007d	52		 push	 edx
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HMEJDKMM@line?5clipping?5problem?5?$CFd?6@
  00083	e8 00 00 00 00	 call	 _CONS_Printf
  00088	83 c4 08	 add	 esp, 8

; 892  : 		return;

  0008b	e9 6b 01 00 00	 jmp	 $LN6@AM_drawFli
$LN8@AM_drawFli:

; 893  : 	}
; 894  : #endif
; 895  : 
; 896  : #define PUTDOT(xx,yy,cc) fb[(yy)*f_w + (xx)]=(UINT8)(cc)
; 897  : 
; 898  : 	dx = fl->b.x - fl->a.x;

  00090	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _fl$[ebp]
  00096	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00099	2b 11		 sub	 edx, DWORD PTR [ecx]
  0009b	89 55 f4	 mov	 DWORD PTR _dx$[ebp], edx

; 899  : 	ax = 2 * (dx < 0 ? -dx : dx);

  0009e	79 0a		 jns	 SHORT $LN17@AM_drawFli
  000a0	8b 45 f4	 mov	 eax, DWORD PTR _dx$[ebp]
  000a3	f7 d8		 neg	 eax
  000a5	89 45 98	 mov	 DWORD PTR tv89[ebp], eax
  000a8	eb 06		 jmp	 SHORT $LN18@AM_drawFli
$LN17@AM_drawFli:
  000aa	8b 4d f4	 mov	 ecx, DWORD PTR _dx$[ebp]
  000ad	89 4d 98	 mov	 DWORD PTR tv89[ebp], ecx
$LN18@AM_drawFli:
  000b0	8b 55 98	 mov	 edx, DWORD PTR tv89[ebp]
  000b3	d1 e2		 shl	 edx, 1
  000b5	89 55 e4	 mov	 DWORD PTR _ax$[ebp], edx

; 900  : 	sx = dx < 0 ? -1 : 1;

  000b8	83 7d f4 00	 cmp	 DWORD PTR _dx$[ebp], 0
  000bc	7d 09		 jge	 SHORT $LN19@AM_drawFli
  000be	c7 45 98 ff ff
	ff ff		 mov	 DWORD PTR tv92[ebp], -1
  000c5	eb 07		 jmp	 SHORT $LN20@AM_drawFli
$LN19@AM_drawFli:
  000c7	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv92[ebp], 1
$LN20@AM_drawFli:
  000ce	8b 45 98	 mov	 eax, DWORD PTR tv92[ebp]
  000d1	89 45 ec	 mov	 DWORD PTR _sx$[ebp], eax

; 901  : 
; 902  : 	dy = fl->b.y - fl->a.y;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _fl$[ebp]
  000da	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000dd	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  000e0	89 55 f0	 mov	 DWORD PTR _dy$[ebp], edx

; 903  : 	ay = 2 * (dy < 0 ? -dy : dy);

  000e3	79 0a		 jns	 SHORT $LN21@AM_drawFli
  000e5	8b 45 f0	 mov	 eax, DWORD PTR _dy$[ebp]
  000e8	f7 d8		 neg	 eax
  000ea	89 45 98	 mov	 DWORD PTR tv130[ebp], eax
  000ed	eb 06		 jmp	 SHORT $LN22@AM_drawFli
$LN21@AM_drawFli:
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _dy$[ebp]
  000f2	89 4d 98	 mov	 DWORD PTR tv130[ebp], ecx
$LN22@AM_drawFli:
  000f5	8b 55 98	 mov	 edx, DWORD PTR tv130[ebp]
  000f8	d1 e2		 shl	 edx, 1
  000fa	89 55 e0	 mov	 DWORD PTR _ay$[ebp], edx

; 904  : 	sy = dy < 0 ? -1 : 1;

  000fd	83 7d f0 00	 cmp	 DWORD PTR _dy$[ebp], 0
  00101	7d 09		 jge	 SHORT $LN23@AM_drawFli
  00103	c7 45 98 ff ff
	ff ff		 mov	 DWORD PTR tv133[ebp], -1
  0010a	eb 07		 jmp	 SHORT $LN24@AM_drawFli
$LN23@AM_drawFli:
  0010c	c7 45 98 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
$LN24@AM_drawFli:
  00113	8b 45 98	 mov	 eax, DWORD PTR tv133[ebp]
  00116	89 45 e8	 mov	 DWORD PTR _sy$[ebp], eax

; 905  : 
; 906  : 	x = fl->a.x;

  00119	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  0011c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 907  : 	y = fl->a.y;

  00121	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00124	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00127	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 908  : 
; 909  : 	if (ax > ay)

  0012a	8b 45 e4	 mov	 eax, DWORD PTR _ax$[ebp]
  0012d	3b 45 e0	 cmp	 eax, DWORD PTR _ay$[ebp]
  00130	7e 67		 jle	 SHORT $LN10@AM_drawFli

; 910  : 	{
; 911  : 		d = ay - ax/2;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _ax$[ebp]
  00135	99		 cdq
  00136	2b c2		 sub	 eax, edx
  00138	d1 f8		 sar	 eax, 1
  0013a	8b 4d e0	 mov	 ecx, DWORD PTR _ay$[ebp]
  0013d	2b c8		 sub	 ecx, eax
  0013f	89 4d dc	 mov	 DWORD PTR _d$[ebp], ecx
$LN2@AM_drawFli:

; 912  : 		for (;;)
; 913  : 		{
; 914  : 			PUTDOT(x, y, color);

  00142	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00145	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _f_w
  0014c	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _fb
  00155	8a 55 0c	 mov	 dl, BYTE PTR _color$[ebp]
  00158	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 915  : 			if (x == fl->b.x)

  0015b	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00161	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00164	75 05		 jne	 SHORT $LN12@AM_drawFli

; 916  : 				return;

  00166	e9 90 00 00 00	 jmp	 $LN6@AM_drawFli
$LN12@AM_drawFli:

; 917  : 			if (d >= 0)

  0016b	83 7d dc 00	 cmp	 DWORD PTR _d$[ebp], 0
  0016f	7c 12		 jl	 SHORT $LN13@AM_drawFli

; 918  : 			{
; 919  : 				y += sy;

  00171	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00174	03 45 e8	 add	 eax, DWORD PTR _sy$[ebp]
  00177	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 920  : 				d -= ax;

  0017a	8b 45 dc	 mov	 eax, DWORD PTR _d$[ebp]
  0017d	2b 45 e4	 sub	 eax, DWORD PTR _ax$[ebp]
  00180	89 45 dc	 mov	 DWORD PTR _d$[ebp], eax
$LN13@AM_drawFli:

; 921  : 			}
; 922  : 			x += sx;

  00183	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00186	03 45 ec	 add	 eax, DWORD PTR _sx$[ebp]
  00189	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 923  : 			d += ay;

  0018c	8b 45 dc	 mov	 eax, DWORD PTR _d$[ebp]
  0018f	03 45 e0	 add	 eax, DWORD PTR _ay$[ebp]
  00192	89 45 dc	 mov	 DWORD PTR _d$[ebp], eax

; 924  : 		}

  00195	eb ab		 jmp	 SHORT $LN2@AM_drawFli

; 925  : 	}

  00197	eb 62		 jmp	 SHORT $LN6@AM_drawFli
$LN10@AM_drawFli:

; 926  : 	else
; 927  : 	{
; 928  : 		d = ax - ay/2;

  00199	8b 45 e0	 mov	 eax, DWORD PTR _ay$[ebp]
  0019c	99		 cdq
  0019d	2b c2		 sub	 eax, edx
  0019f	d1 f8		 sar	 eax, 1
  001a1	8b 4d e4	 mov	 ecx, DWORD PTR _ax$[ebp]
  001a4	2b c8		 sub	 ecx, eax
  001a6	89 4d dc	 mov	 DWORD PTR _d$[ebp], ecx
$LN5@AM_drawFli:

; 929  : 		for (;;)
; 930  : 		{
; 931  : 			PUTDOT(x, y, color);

  001a9	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001ac	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _f_w
  001b3	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  001b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _fb
  001bc	8a 55 0c	 mov	 dl, BYTE PTR _color$[ebp]
  001bf	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 932  : 			if (y == fl->b.y)

  001c2	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  001c5	8b 4d f8	 mov	 ecx, DWORD PTR _y$[ebp]
  001c8	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  001cb	75 02		 jne	 SHORT $LN14@AM_drawFli

; 933  : 				return;

  001cd	eb 2c		 jmp	 SHORT $LN6@AM_drawFli
$LN14@AM_drawFli:

; 934  : 			if (d >= 0)

  001cf	83 7d dc 00	 cmp	 DWORD PTR _d$[ebp], 0
  001d3	7c 12		 jl	 SHORT $LN15@AM_drawFli

; 935  : 			{
; 936  : 				x += sx;

  001d5	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  001d8	03 45 ec	 add	 eax, DWORD PTR _sx$[ebp]
  001db	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 937  : 				d -= ay;

  001de	8b 45 dc	 mov	 eax, DWORD PTR _d$[ebp]
  001e1	2b 45 e0	 sub	 eax, DWORD PTR _ay$[ebp]
  001e4	89 45 dc	 mov	 DWORD PTR _d$[ebp], eax
$LN15@AM_drawFli:

; 938  : 			}
; 939  : 			y += sy;

  001e7	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  001ea	03 45 e8	 add	 eax, DWORD PTR _sy$[ebp]
  001ed	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 940  : 			d += ax;

  001f0	8b 45 dc	 mov	 eax, DWORD PTR _d$[ebp]
  001f3	03 45 e4	 add	 eax, DWORD PTR _ax$[ebp]
  001f6	89 45 dc	 mov	 DWORD PTR _d$[ebp], eax

; 941  : 		}

  001f9	eb ae		 jmp	 SHORT $LN5@AM_drawFli
$LN6@AM_drawFli:

; 942  : 	}
; 943  : }

  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c3		 ret	 0
_AM_drawFline_soft ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_Stop
_TEXT	SEGMENT
_AM_Stop PROC						; COMDAT

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 454  : 	automapactive = false;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _automapactive, 0

; 455  : 	stopped = true;

  00013	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _stopped, 1

; 456  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_AM_Stop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_Drawer
_TEXT	SEGMENT
_AM_Drawer PROC						; COMDAT

; 1163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1164 : 	if (!automapactive)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  00010	75 02		 jne	 SHORT $LN2@AM_Drawer

; 1165 : 		return;

  00012	eb 71		 jmp	 SHORT $LN1@AM_Drawer
$LN2@AM_Drawer:

; 1166 : 
; 1167 : 	AM_clearFB(BACKGROUND);

  00014	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _DBLACK
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _AM_clearFB
  00021	83 c4 04	 add	 esp, 4

; 1168 : 	if (grid)

  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _grid, 0
  0002b	74 1e		 je	 SHORT $LN3@AM_Drawer

; 1169 : 		AM_drawGrid(GRIDCOLORS);

  0002d	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _GRAYS
  00034	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _GRAYSRANGE
  0003b	99		 cdq
  0003c	2b c2		 sub	 eax, edx
  0003e	d1 f8		 sar	 eax, 1
  00040	03 c8		 add	 ecx, eax
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _AM_drawGrid
  00048	83 c4 04	 add	 esp, 4
$LN3@AM_Drawer:

; 1170 : 	AM_drawWalls();

  0004b	e8 00 00 00 00	 call	 _AM_drawWalls
  00050	90		 npad	 1

; 1171 : 	AM_drawPlayers();

  00051	e8 00 00 00 00	 call	 _AM_drawPlayers
  00056	90		 npad	 1

; 1172 : 	AM_drawThings(THINGCOLORS, THINGRANGE);

  00057	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _GREENRANGE
  0005e	50		 push	 eax
  0005f	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _GREENS
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 _AM_drawThings
  0006c	83 c4 08	 add	 esp, 8

; 1173 : 
; 1174 : 	AM_drawCrosshair(XHAIRCOLORS);

  0006f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _GRAYS
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _AM_drawCrosshair
  0007c	83 c4 04	 add	 esp, 4

; 1175 : 
; 1176 : 	AM_drawMarks();

  0007f	e8 00 00 00 00	 call	 _AM_drawMarks
  00084	90		 npad	 1
$LN1@AM_Drawer:

; 1177 : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_AM_Drawer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_Ticker
_TEXT	SEGMENT
_AM_Ticker PROC						; COMDAT

; 653  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 654  : 	if (!cv_debug)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00010	75 06		 jne	 SHORT $LN2@AM_Ticker

; 655  : 		AM_Stop();

  00012	e8 00 00 00 00	 call	 _AM_Stop
  00017	90		 npad	 1
$LN2@AM_Ticker:

; 656  : 
; 657  : 	if (dedicated || !automapactive)

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  0001f	75 09		 jne	 SHORT $LN4@AM_Ticker
  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  00028	75 02		 jne	 SHORT $LN3@AM_Ticker
$LN4@AM_Ticker:

; 658  : 		return;

  0002a	eb 46		 jmp	 SHORT $LN7@AM_Ticker
$LN3@AM_Ticker:

; 659  : 
; 660  : 	amclock++;

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR _amclock
  00031	83 c0 01	 add	 eax, 1
  00034	a3 00 00 00 00	 mov	 DWORD PTR _amclock, eax

; 661  : 
; 662  : 	if (followplayer)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  00040	74 06		 je	 SHORT $LN5@AM_Ticker

; 663  : 		AM_doFollowPlayer();

  00042	e8 00 00 00 00	 call	 _AM_doFollowPlayer
  00047	90		 npad	 1
$LN5@AM_Ticker:

; 664  : 
; 665  : 	// Change the zoom if necessary
; 666  : 	if (ftom_zoommul != FRACUNIT)

  00048	81 3d 00 00 00
	00 00 00 01 00	 cmp	 DWORD PTR _ftom_zoommul, 65536 ; 00010000H
  00052	74 06		 je	 SHORT $LN6@AM_Ticker

; 667  : 		AM_changeWindowScale();

  00054	e8 00 00 00 00	 call	 _AM_changeWindowScale
  00059	90		 npad	 1
$LN6@AM_Ticker:

; 668  : 
; 669  : 	// Change x,y location
; 670  : 	if (m_paninc.x || m_paninc.y)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _m_paninc, 0
  00061	75 09		 jne	 SHORT $LN8@AM_Ticker
  00063	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR _m_paninc+4, 0
  0006a	74 06		 je	 SHORT $LN7@AM_Ticker
$LN8@AM_Ticker:

; 671  : 		AM_changeWindowLoc();

  0006c	e8 00 00 00 00	 call	 _AM_changeWindowLoc
  00071	90		 npad	 1
$LN7@AM_Ticker:

; 672  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_AM_Ticker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\am_map.c
;	COMDAT _AM_Responder
_TEXT	SEGMENT
tv82 = -72						; size = 4
tv134 = -72						; size = 4
tv137 = -72						; size = 4
tv139 = -72						; size = 4
tv145 = -72						; size = 4
_rc$ = -4						; size = 4
_ev$ = 8						; size = 4
_AM_Responder PROC					; COMDAT

; 505  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 506  : 	INT32 rc = false;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0

; 507  : 
; 508  : 	if (devparm || cv_debug) // only automap in Debug Tails 01-19-2001

  00010	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00017	75 0d		 jne	 SHORT $LN7@AM_Respond
  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00020	0f 84 c4 02 00
	00		 je	 $LN4@AM_Respond
$LN7@AM_Respond:

; 509  : 	{
; 510  : 		if (!automapactive)

  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  0002d	75 59		 jne	 SHORT $LN8@AM_Respond

; 511  : 		{
; 512  : 			if (ev->type == ev_keydown && ev->data1 == AM_STARTKEY)

  0002f	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00032	83 38 00	 cmp	 DWORD PTR [eax], 0
  00035	75 4c		 jne	 SHORT $LN11@AM_Respond
  00037	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0003a	83 78 04 09	 cmp	 DWORD PTR [eax+4], 9
  0003e	75 43		 jne	 SHORT $LN11@AM_Respond

; 513  : 			{
; 514  : 				//faB: prevent alt-tab in win32 version to activate automap just before
; 515  : 				//     minimizing the app; doesn't do any harm to the DOS version
; 516  : 				if (!gamekeydown[KEY_LALT]  && !gamekeydown[KEY_RALT])

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	69 c8 b8 00 00
	00		 imul	 ecx, eax, 184
  0004b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00052	85 d2		 test	 edx, edx
  00054	75 2d		 jne	 SHORT $LN11@AM_Respond
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	69 c8 b9 00 00
	00		 imul	 ecx, eax, 185
  00061	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _gamekeydown[ecx]
  00068	85 d2		 test	 edx, edx
  0006a	75 17		 jne	 SHORT $LN11@AM_Respond

; 517  : 				{
; 518  : 					bigstate = 0; //added : 24-01-98 : toggle off large view

  0006c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bigstate, 0

; 519  : 					AM_Start();

  00076	e8 00 00 00 00	 call	 _AM_Start
  0007b	90		 npad	 1

; 520  : 					rc = true;

  0007c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 1
$LN11@AM_Respond:

; 521  : 				}
; 522  : 			}
; 523  : 		}

  00083	e9 62 02 00 00	 jmp	 $LN4@AM_Respond
$LN8@AM_Respond:

; 524  : 
; 525  : 		else if (ev->type == ev_keydown)

  00088	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0008b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0008e	0f 85 dd 01 00
	00		 jne	 $LN12@AM_Respond

; 526  : 		{
; 527  : 
; 528  : 			rc = true;

  00094	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 1

; 529  : 			switch (ev->data1)

  0009b	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	89 4d b8	 mov	 DWORD PTR tv82[ebp], ecx
  000a4	8b 55 b8	 mov	 edx, DWORD PTR tv82[ebp]
  000a7	83 ea 09	 sub	 edx, 9
  000aa	89 55 b8	 mov	 DWORD PTR tv82[ebp], edx
  000ad	81 7d b8 e5 00
	00 00		 cmp	 DWORD PTR tv82[ebp], 229 ; 000000e5H
  000b4	0f 87 ae 01 00
	00		 ja	 $LN36@AM_Respond
  000ba	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  000bd	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN53@AM_Respond[eax]
  000c4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN54@AM_Respond[ecx*4]
$LN14@AM_Respond:

; 530  : 			{
; 531  : 				case AM_PANRIGHTKEY: // pan right
; 532  : 					if (!followplayer)

  000cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  000d2	75 1a		 jne	 SHORT $LN15@AM_Respond

; 533  : 						m_paninc.x = FTOM(F_PANINC);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  000d9	50		 push	 eax
  000da	68 00 00 04 00	 push	 262144			; 00040000H
  000df	e8 00 00 00 00	 call	 _FixedMul
  000e4	83 c4 08	 add	 esp, 8
  000e7	a3 00 00 00 00	 mov	 DWORD PTR _m_paninc, eax
  000ec	eb 07		 jmp	 SHORT $LN16@AM_Respond
$LN15@AM_Respond:

; 534  : 					else
; 535  : 						rc = false;

  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0
$LN16@AM_Respond:

; 536  : 					break;

  000f5	e9 75 01 00 00	 jmp	 $LN2@AM_Respond
$LN17@AM_Respond:

; 537  : 				case AM_PANLEFTKEY: // pan left
; 538  : 					if (!followplayer)

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  00101	75 1c		 jne	 SHORT $LN18@AM_Respond

; 539  : 						m_paninc.x = -FTOM(F_PANINC);

  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  00108	50		 push	 eax
  00109	68 00 00 04 00	 push	 262144			; 00040000H
  0010e	e8 00 00 00 00	 call	 _FixedMul
  00113	83 c4 08	 add	 esp, 8
  00116	f7 d8		 neg	 eax
  00118	a3 00 00 00 00	 mov	 DWORD PTR _m_paninc, eax
  0011d	eb 07		 jmp	 SHORT $LN19@AM_Respond
$LN18@AM_Respond:

; 540  : 					else
; 541  : 						rc = false;

  0011f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0
$LN19@AM_Respond:

; 542  : 					break;

  00126	e9 44 01 00 00	 jmp	 $LN2@AM_Respond
$LN20@AM_Respond:

; 543  : 				case AM_PANUPKEY: // pan up
; 544  : 					if (!followplayer)

  0012b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  00132	75 1a		 jne	 SHORT $LN21@AM_Respond

; 545  : 						m_paninc.y = FTOM(F_PANINC);

  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  00139	50		 push	 eax
  0013a	68 00 00 04 00	 push	 262144			; 00040000H
  0013f	e8 00 00 00 00	 call	 _FixedMul
  00144	83 c4 08	 add	 esp, 8
  00147	a3 04 00 00 00	 mov	 DWORD PTR _m_paninc+4, eax
  0014c	eb 07		 jmp	 SHORT $LN22@AM_Respond
$LN21@AM_Respond:

; 546  : 					else
; 547  : 						rc = false;

  0014e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0
$LN22@AM_Respond:

; 548  : 					break;

  00155	e9 15 01 00 00	 jmp	 $LN2@AM_Respond
$LN23@AM_Respond:

; 549  : 				case AM_PANDOWNKEY: // pan down
; 550  : 					if (!followplayer)

  0015a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  00161	75 1c		 jne	 SHORT $LN24@AM_Respond

; 551  : 						m_paninc.y = -FTOM(F_PANINC);

  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR _scale_ftom
  00168	50		 push	 eax
  00169	68 00 00 04 00	 push	 262144			; 00040000H
  0016e	e8 00 00 00 00	 call	 _FixedMul
  00173	83 c4 08	 add	 esp, 8
  00176	f7 d8		 neg	 eax
  00178	a3 04 00 00 00	 mov	 DWORD PTR _m_paninc+4, eax
  0017d	eb 07		 jmp	 SHORT $LN25@AM_Respond
$LN24@AM_Respond:

; 552  : 					else
; 553  : 						rc = false;

  0017f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0
$LN25@AM_Respond:

; 554  : 					break;

  00186	e9 e4 00 00 00	 jmp	 $LN2@AM_Respond
$LN26@AM_Respond:

; 555  : 				case AM_ZOOMOUTKEY: // zoom out
; 556  : 					mtof_zoommul = M_ZOOMOUT;

  0018b	c7 05 00 00 00
	00 fa fa 00 00	 mov	 DWORD PTR _mtof_zoommul, 64250 ; 0000fafaH

; 557  : 					ftom_zoommul = M_ZOOMIN;

  00195	c7 05 00 00 00
	00 1e 05 01 00	 mov	 DWORD PTR _ftom_zoommul, 66846 ; 0001051eH

; 558  : 					break;

  0019f	e9 cb 00 00 00	 jmp	 $LN2@AM_Respond
$LN27@AM_Respond:

; 559  : 				case AM_ZOOMINKEY: // zoom in
; 560  : 					mtof_zoommul = M_ZOOMIN;

  001a4	c7 05 00 00 00
	00 1e 05 01 00	 mov	 DWORD PTR _mtof_zoommul, 66846 ; 0001051eH

; 561  : 					ftom_zoommul = M_ZOOMOUT;

  001ae	c7 05 00 00 00
	00 fa fa 00 00	 mov	 DWORD PTR _ftom_zoommul, 64250 ; 0000fafaH

; 562  : 					break;

  001b8	e9 b2 00 00 00	 jmp	 $LN2@AM_Respond
$LN28@AM_Respond:

; 563  : 				case AM_ENDKEY:
; 564  : 					AM_Stop();

  001bd	e8 00 00 00 00	 call	 _AM_Stop
  001c2	90		 npad	 1

; 565  : 					break;

  001c3	e9 a7 00 00 00	 jmp	 $LN2@AM_Respond
$LN29@AM_Respond:

; 566  : 				case AM_GOBIGKEY:
; 567  : 					bigstate = !bigstate;

  001c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bigstate, 0
  001cf	75 09		 jne	 SHORT $LN47@AM_Respond
  001d1	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv134[ebp], 1
  001d8	eb 07		 jmp	 SHORT $LN48@AM_Respond
$LN47@AM_Respond:
  001da	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$LN48@AM_Respond:
  001e1	8b 45 b8	 mov	 eax, DWORD PTR tv134[ebp]
  001e4	a3 00 00 00 00	 mov	 DWORD PTR _bigstate, eax

; 568  : 					if (bigstate)

  001e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bigstate, 0
  001f0	74 0e		 je	 SHORT $LN30@AM_Respond

; 569  : 					{
; 570  : 						AM_saveScaleAndLoc();

  001f2	e8 00 00 00 00	 call	 _AM_saveScaleAndLoc
  001f7	90		 npad	 1

; 571  : 						AM_minOutWindowScale();

  001f8	e8 00 00 00 00	 call	 _AM_minOutWindowScale
  001fd	90		 npad	 1

; 572  : 					}

  001fe	eb 06		 jmp	 SHORT $LN31@AM_Respond
$LN30@AM_Respond:

; 573  : 					else
; 574  : 						AM_restoreScaleAndLoc();

  00200	e8 00 00 00 00	 call	 _AM_restoreScaleAndLoc
  00205	90		 npad	 1
$LN31@AM_Respond:

; 575  : 					break;

  00206	eb 67		 jmp	 SHORT $LN2@AM_Respond
$LN32@AM_Respond:

; 576  : 				case AM_FOLLOWKEY:
; 577  : 					followplayer = !followplayer;

  00208	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  0020f	75 09		 jne	 SHORT $LN49@AM_Respond
  00211	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  00218	eb 07		 jmp	 SHORT $LN50@AM_Respond
$LN49@AM_Respond:
  0021a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN50@AM_Respond:
  00221	8b 45 b8	 mov	 eax, DWORD PTR tv137[ebp]
  00224	a3 00 00 00 00	 mov	 DWORD PTR _followplayer, eax

; 578  : 					f_oldloc.x = INT32_MAX;

  00229	c7 05 00 00 00
	00 ff ff ff 7f	 mov	 DWORD PTR _f_oldloc, 2147483647 ; 7fffffffH

; 579  : 					break;

  00233	eb 3a		 jmp	 SHORT $LN2@AM_Respond
$LN33@AM_Respond:

; 580  : 				case AM_GRIDKEY:
; 581  : 					grid = !grid;

  00235	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _grid, 0
  0023c	75 09		 jne	 SHORT $LN51@AM_Respond
  0023e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00245	eb 07		 jmp	 SHORT $LN52@AM_Respond
$LN51@AM_Respond:
  00247	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN52@AM_Respond:
  0024e	8b 45 b8	 mov	 eax, DWORD PTR tv139[ebp]
  00251	a3 00 00 00 00	 mov	 DWORD PTR _grid, eax

; 582  : 					break;

  00256	eb 17		 jmp	 SHORT $LN2@AM_Respond
$LN34@AM_Respond:

; 583  : 				case AM_MARKKEY:
; 584  : 					AM_addMark();

  00258	e8 00 00 00 00	 call	 _AM_addMark
  0025d	90		 npad	 1

; 585  : 					break;

  0025e	eb 0f		 jmp	 SHORT $LN2@AM_Respond
$LN35@AM_Respond:

; 586  : 				case AM_CLEARMARKKEY:
; 587  : 					AM_clearMarks();

  00260	e8 00 00 00 00	 call	 _AM_clearMarks
  00265	90		 npad	 1

; 588  : 					break;

  00266	eb 07		 jmp	 SHORT $LN2@AM_Respond
$LN36@AM_Respond:

; 589  : 				default:
; 590  : 					rc = false;

  00268	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0
$LN2@AM_Respond:

; 591  : 			}
; 592  : 		}

  0026f	eb 79		 jmp	 SHORT $LN4@AM_Respond
$LN12@AM_Respond:

; 593  : 
; 594  : 		else if (ev->type == ev_keyup)

  00271	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00274	83 38 01	 cmp	 DWORD PTR [eax], 1
  00277	75 71		 jne	 SHORT $LN4@AM_Respond

; 595  : 		{
; 596  : 			rc = false;

  00279	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0

; 597  : 			switch (ev->data1)

  00280	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00283	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00286	89 4d b8	 mov	 DWORD PTR tv145[ebp], ecx
  00289	8b 55 b8	 mov	 edx, DWORD PTR tv145[ebp]
  0028c	83 ea 2d	 sub	 edx, 45			; 0000002dH
  0028f	89 55 b8	 mov	 DWORD PTR tv145[ebp], edx
  00292	81 7d b8 c1 00
	00 00		 cmp	 DWORD PTR tv145[ebp], 193 ; 000000c1H
  00299	77 4f		 ja	 SHORT $LN4@AM_Respond
  0029b	8b 45 b8	 mov	 eax, DWORD PTR tv145[ebp]
  0029e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN55@AM_Respond[eax]
  002a5	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN56@AM_Respond[ecx*4]
$LN38@AM_Respond:

; 598  : 			{
; 599  : 				case AM_PANRIGHTKEY:
; 600  : 				case AM_PANLEFTKEY:
; 601  : 					if (!followplayer)

  002ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  002b3	75 0a		 jne	 SHORT $LN40@AM_Respond

; 602  : 						m_paninc.x = 0;

  002b5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_paninc, 0
$LN40@AM_Respond:

; 603  : 					break;

  002bf	eb 29		 jmp	 SHORT $LN4@AM_Respond
$LN41@AM_Respond:

; 604  : 				case AM_PANUPKEY:
; 605  : 				case AM_PANDOWNKEY:
; 606  : 					if (!followplayer)

  002c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _followplayer, 0
  002c8	75 0a		 jne	 SHORT $LN43@AM_Respond

; 607  : 						m_paninc.y = 0;

  002ca	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _m_paninc+4, 0
$LN43@AM_Respond:

; 608  : 					break;

  002d4	eb 14		 jmp	 SHORT $LN4@AM_Respond
$LN44@AM_Respond:

; 609  : 				case AM_ZOOMOUTKEY:
; 610  : 				case AM_ZOOMINKEY:
; 611  : 					mtof_zoommul = FRACUNIT;

  002d6	c7 05 00 00 00
	00 00 00 01 00	 mov	 DWORD PTR _mtof_zoommul, 65536 ; 00010000H

; 612  : 					ftom_zoommul = FRACUNIT;

  002e0	c7 05 00 00 00
	00 00 00 01 00	 mov	 DWORD PTR _ftom_zoommul, 65536 ; 00010000H
$LN4@AM_Respond:

; 613  : 					break;
; 614  : 			}
; 615  : 		}
; 616  : 	}
; 617  : 
; 618  : 	return rc;

  002ea	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]

; 619  : }

  002ed	5f		 pop	 edi
  002ee	5e		 pop	 esi
  002ef	5b		 pop	 ebx
  002f0	8b e5		 mov	 esp, ebp
  002f2	5d		 pop	 ebp
  002f3	c3		 ret	 0
$LN54@AM_Respond:
  002f4	00 00 00 00	 DD	 $LN28@AM_Respond
  002f8	00 00 00 00	 DD	 $LN26@AM_Respond
  002fc	00 00 00 00	 DD	 $LN29@AM_Respond
  00300	00 00 00 00	 DD	 $LN27@AM_Respond
  00304	00 00 00 00	 DD	 $LN35@AM_Respond
  00308	00 00 00 00	 DD	 $LN32@AM_Respond
  0030c	00 00 00 00	 DD	 $LN33@AM_Respond
  00310	00 00 00 00	 DD	 $LN34@AM_Respond
  00314	00 00 00 00	 DD	 $LN20@AM_Respond
  00318	00 00 00 00	 DD	 $LN17@AM_Respond
  0031c	00 00 00 00	 DD	 $LN14@AM_Respond
  00320	00 00 00 00	 DD	 $LN23@AM_Respond
  00324	00 00 00 00	 DD	 $LN36@AM_Respond
$LN53@AM_Respond:
  00328	00		 DB	 0
  00329	0c		 DB	 12			; 0000000cH
  0032a	0c		 DB	 12			; 0000000cH
  0032b	0c		 DB	 12			; 0000000cH
  0032c	0c		 DB	 12			; 0000000cH
  0032d	0c		 DB	 12			; 0000000cH
  0032e	0c		 DB	 12			; 0000000cH
  0032f	0c		 DB	 12			; 0000000cH
  00330	0c		 DB	 12			; 0000000cH
  00331	0c		 DB	 12			; 0000000cH
  00332	0c		 DB	 12			; 0000000cH
  00333	0c		 DB	 12			; 0000000cH
  00334	0c		 DB	 12			; 0000000cH
  00335	0c		 DB	 12			; 0000000cH
  00336	0c		 DB	 12			; 0000000cH
  00337	0c		 DB	 12			; 0000000cH
  00338	0c		 DB	 12			; 0000000cH
  00339	0c		 DB	 12			; 0000000cH
  0033a	0c		 DB	 12			; 0000000cH
  0033b	0c		 DB	 12			; 0000000cH
  0033c	0c		 DB	 12			; 0000000cH
  0033d	0c		 DB	 12			; 0000000cH
  0033e	0c		 DB	 12			; 0000000cH
  0033f	0c		 DB	 12			; 0000000cH
  00340	0c		 DB	 12			; 0000000cH
  00341	0c		 DB	 12			; 0000000cH
  00342	0c		 DB	 12			; 0000000cH
  00343	0c		 DB	 12			; 0000000cH
  00344	0c		 DB	 12			; 0000000cH
  00345	0c		 DB	 12			; 0000000cH
  00346	0c		 DB	 12			; 0000000cH
  00347	0c		 DB	 12			; 0000000cH
  00348	0c		 DB	 12			; 0000000cH
  00349	0c		 DB	 12			; 0000000cH
  0034a	0c		 DB	 12			; 0000000cH
  0034b	0c		 DB	 12			; 0000000cH
  0034c	01		 DB	 1
  0034d	0c		 DB	 12			; 0000000cH
  0034e	0c		 DB	 12			; 0000000cH
  0034f	02		 DB	 2
  00350	0c		 DB	 12			; 0000000cH
  00351	0c		 DB	 12			; 0000000cH
  00352	0c		 DB	 12			; 0000000cH
  00353	0c		 DB	 12			; 0000000cH
  00354	0c		 DB	 12			; 0000000cH
  00355	0c		 DB	 12			; 0000000cH
  00356	0c		 DB	 12			; 0000000cH
  00357	0c		 DB	 12			; 0000000cH
  00358	0c		 DB	 12			; 0000000cH
  00359	0c		 DB	 12			; 0000000cH
  0035a	0c		 DB	 12			; 0000000cH
  0035b	0c		 DB	 12			; 0000000cH
  0035c	03		 DB	 3
  0035d	0c		 DB	 12			; 0000000cH
  0035e	0c		 DB	 12			; 0000000cH
  0035f	0c		 DB	 12			; 0000000cH
  00360	0c		 DB	 12			; 0000000cH
  00361	0c		 DB	 12			; 0000000cH
  00362	0c		 DB	 12			; 0000000cH
  00363	0c		 DB	 12			; 0000000cH
  00364	0c		 DB	 12			; 0000000cH
  00365	0c		 DB	 12			; 0000000cH
  00366	0c		 DB	 12			; 0000000cH
  00367	0c		 DB	 12			; 0000000cH
  00368	0c		 DB	 12			; 0000000cH
  00369	0c		 DB	 12			; 0000000cH
  0036a	0c		 DB	 12			; 0000000cH
  0036b	0c		 DB	 12			; 0000000cH
  0036c	0c		 DB	 12			; 0000000cH
  0036d	0c		 DB	 12			; 0000000cH
  0036e	0c		 DB	 12			; 0000000cH
  0036f	0c		 DB	 12			; 0000000cH
  00370	0c		 DB	 12			; 0000000cH
  00371	0c		 DB	 12			; 0000000cH
  00372	0c		 DB	 12			; 0000000cH
  00373	0c		 DB	 12			; 0000000cH
  00374	0c		 DB	 12			; 0000000cH
  00375	0c		 DB	 12			; 0000000cH
  00376	0c		 DB	 12			; 0000000cH
  00377	0c		 DB	 12			; 0000000cH
  00378	0c		 DB	 12			; 0000000cH
  00379	0c		 DB	 12			; 0000000cH
  0037a	0c		 DB	 12			; 0000000cH
  0037b	0c		 DB	 12			; 0000000cH
  0037c	0c		 DB	 12			; 0000000cH
  0037d	0c		 DB	 12			; 0000000cH
  0037e	0c		 DB	 12			; 0000000cH
  0037f	0c		 DB	 12			; 0000000cH
  00380	0c		 DB	 12			; 0000000cH
  00381	0c		 DB	 12			; 0000000cH
  00382	04		 DB	 4
  00383	0c		 DB	 12			; 0000000cH
  00384	0c		 DB	 12			; 0000000cH
  00385	05		 DB	 5
  00386	06		 DB	 6
  00387	0c		 DB	 12			; 0000000cH
  00388	0c		 DB	 12			; 0000000cH
  00389	0c		 DB	 12			; 0000000cH
  0038a	0c		 DB	 12			; 0000000cH
  0038b	0c		 DB	 12			; 0000000cH
  0038c	07		 DB	 7
  0038d	0c		 DB	 12			; 0000000cH
  0038e	0c		 DB	 12			; 0000000cH
  0038f	0c		 DB	 12			; 0000000cH
  00390	0c		 DB	 12			; 0000000cH
  00391	0c		 DB	 12			; 0000000cH
  00392	0c		 DB	 12			; 0000000cH
  00393	0c		 DB	 12			; 0000000cH
  00394	0c		 DB	 12			; 0000000cH
  00395	0c		 DB	 12			; 0000000cH
  00396	0c		 DB	 12			; 0000000cH
  00397	0c		 DB	 12			; 0000000cH
  00398	0c		 DB	 12			; 0000000cH
  00399	0c		 DB	 12			; 0000000cH
  0039a	0c		 DB	 12			; 0000000cH
  0039b	0c		 DB	 12			; 0000000cH
  0039c	0c		 DB	 12			; 0000000cH
  0039d	0c		 DB	 12			; 0000000cH
  0039e	0c		 DB	 12			; 0000000cH
  0039f	0c		 DB	 12			; 0000000cH
  003a0	0c		 DB	 12			; 0000000cH
  003a1	0c		 DB	 12			; 0000000cH
  003a2	0c		 DB	 12			; 0000000cH
  003a3	0c		 DB	 12			; 0000000cH
  003a4	0c		 DB	 12			; 0000000cH
  003a5	0c		 DB	 12			; 0000000cH
  003a6	0c		 DB	 12			; 0000000cH
  003a7	0c		 DB	 12			; 0000000cH
  003a8	0c		 DB	 12			; 0000000cH
  003a9	0c		 DB	 12			; 0000000cH
  003aa	0c		 DB	 12			; 0000000cH
  003ab	0c		 DB	 12			; 0000000cH
  003ac	0c		 DB	 12			; 0000000cH
  003ad	0c		 DB	 12			; 0000000cH
  003ae	0c		 DB	 12			; 0000000cH
  003af	0c		 DB	 12			; 0000000cH
  003b0	0c		 DB	 12			; 0000000cH
  003b1	0c		 DB	 12			; 0000000cH
  003b2	0c		 DB	 12			; 0000000cH
  003b3	0c		 DB	 12			; 0000000cH
  003b4	0c		 DB	 12			; 0000000cH
  003b5	0c		 DB	 12			; 0000000cH
  003b6	0c		 DB	 12			; 0000000cH
  003b7	0c		 DB	 12			; 0000000cH
  003b8	0c		 DB	 12			; 0000000cH
  003b9	0c		 DB	 12			; 0000000cH
  003ba	0c		 DB	 12			; 0000000cH
  003bb	0c		 DB	 12			; 0000000cH
  003bc	0c		 DB	 12			; 0000000cH
  003bd	0c		 DB	 12			; 0000000cH
  003be	0c		 DB	 12			; 0000000cH
  003bf	0c		 DB	 12			; 0000000cH
  003c0	0c		 DB	 12			; 0000000cH
  003c1	0c		 DB	 12			; 0000000cH
  003c2	0c		 DB	 12			; 0000000cH
  003c3	0c		 DB	 12			; 0000000cH
  003c4	0c		 DB	 12			; 0000000cH
  003c5	0c		 DB	 12			; 0000000cH
  003c6	0c		 DB	 12			; 0000000cH
  003c7	0c		 DB	 12			; 0000000cH
  003c8	0c		 DB	 12			; 0000000cH
  003c9	0c		 DB	 12			; 0000000cH
  003ca	0c		 DB	 12			; 0000000cH
  003cb	0c		 DB	 12			; 0000000cH
  003cc	0c		 DB	 12			; 0000000cH
  003cd	0c		 DB	 12			; 0000000cH
  003ce	0c		 DB	 12			; 0000000cH
  003cf	0c		 DB	 12			; 0000000cH
  003d0	0c		 DB	 12			; 0000000cH
  003d1	0c		 DB	 12			; 0000000cH
  003d2	0c		 DB	 12			; 0000000cH
  003d3	0c		 DB	 12			; 0000000cH
  003d4	0c		 DB	 12			; 0000000cH
  003d5	0c		 DB	 12			; 0000000cH
  003d6	0c		 DB	 12			; 0000000cH
  003d7	0c		 DB	 12			; 0000000cH
  003d8	0c		 DB	 12			; 0000000cH
  003d9	0c		 DB	 12			; 0000000cH
  003da	0c		 DB	 12			; 0000000cH
  003db	0c		 DB	 12			; 0000000cH
  003dc	0c		 DB	 12			; 0000000cH
  003dd	0c		 DB	 12			; 0000000cH
  003de	0c		 DB	 12			; 0000000cH
  003df	0c		 DB	 12			; 0000000cH
  003e0	0c		 DB	 12			; 0000000cH
  003e1	0c		 DB	 12			; 0000000cH
  003e2	0c		 DB	 12			; 0000000cH
  003e3	0c		 DB	 12			; 0000000cH
  003e4	0c		 DB	 12			; 0000000cH
  003e5	0c		 DB	 12			; 0000000cH
  003e6	0c		 DB	 12			; 0000000cH
  003e7	0c		 DB	 12			; 0000000cH
  003e8	0c		 DB	 12			; 0000000cH
  003e9	0c		 DB	 12			; 0000000cH
  003ea	0c		 DB	 12			; 0000000cH
  003eb	0c		 DB	 12			; 0000000cH
  003ec	0c		 DB	 12			; 0000000cH
  003ed	0c		 DB	 12			; 0000000cH
  003ee	0c		 DB	 12			; 0000000cH
  003ef	0c		 DB	 12			; 0000000cH
  003f0	0c		 DB	 12			; 0000000cH
  003f1	0c		 DB	 12			; 0000000cH
  003f2	0c		 DB	 12			; 0000000cH
  003f3	0c		 DB	 12			; 0000000cH
  003f4	0c		 DB	 12			; 0000000cH
  003f5	0c		 DB	 12			; 0000000cH
  003f6	0c		 DB	 12			; 0000000cH
  003f7	0c		 DB	 12			; 0000000cH
  003f8	0c		 DB	 12			; 0000000cH
  003f9	0c		 DB	 12			; 0000000cH
  003fa	0c		 DB	 12			; 0000000cH
  003fb	0c		 DB	 12			; 0000000cH
  003fc	0c		 DB	 12			; 0000000cH
  003fd	0c		 DB	 12			; 0000000cH
  003fe	0c		 DB	 12			; 0000000cH
  003ff	0c		 DB	 12			; 0000000cH
  00400	0c		 DB	 12			; 0000000cH
  00401	0c		 DB	 12			; 0000000cH
  00402	0c		 DB	 12			; 0000000cH
  00403	0c		 DB	 12			; 0000000cH
  00404	0c		 DB	 12			; 0000000cH
  00405	08		 DB	 8
  00406	0c		 DB	 12			; 0000000cH
  00407	0c		 DB	 12			; 0000000cH
  00408	09		 DB	 9
  00409	0c		 DB	 12			; 0000000cH
  0040a	0a		 DB	 10			; 0000000aH
  0040b	0c		 DB	 12			; 0000000cH
  0040c	0c		 DB	 12			; 0000000cH
  0040d	0b		 DB	 11			; 0000000bH
  0040e	66 90		 npad	 2
$LN56@AM_Respond:
  00410	00 00 00 00	 DD	 $LN44@AM_Respond
  00414	00 00 00 00	 DD	 $LN41@AM_Respond
  00418	00 00 00 00	 DD	 $LN38@AM_Respond
  0041c	00 00 00 00	 DD	 $LN4@AM_Respond
$LN55@AM_Respond:
  00420	00		 DB	 0
  00421	03		 DB	 3
  00422	03		 DB	 3
  00423	03		 DB	 3
  00424	03		 DB	 3
  00425	03		 DB	 3
  00426	03		 DB	 3
  00427	03		 DB	 3
  00428	03		 DB	 3
  00429	03		 DB	 3
  0042a	03		 DB	 3
  0042b	03		 DB	 3
  0042c	03		 DB	 3
  0042d	03		 DB	 3
  0042e	03		 DB	 3
  0042f	03		 DB	 3
  00430	00		 DB	 0
  00431	03		 DB	 3
  00432	03		 DB	 3
  00433	03		 DB	 3
  00434	03		 DB	 3
  00435	03		 DB	 3
  00436	03		 DB	 3
  00437	03		 DB	 3
  00438	03		 DB	 3
  00439	03		 DB	 3
  0043a	03		 DB	 3
  0043b	03		 DB	 3
  0043c	03		 DB	 3
  0043d	03		 DB	 3
  0043e	03		 DB	 3
  0043f	03		 DB	 3
  00440	03		 DB	 3
  00441	03		 DB	 3
  00442	03		 DB	 3
  00443	03		 DB	 3
  00444	03		 DB	 3
  00445	03		 DB	 3
  00446	03		 DB	 3
  00447	03		 DB	 3
  00448	03		 DB	 3
  00449	03		 DB	 3
  0044a	03		 DB	 3
  0044b	03		 DB	 3
  0044c	03		 DB	 3
  0044d	03		 DB	 3
  0044e	03		 DB	 3
  0044f	03		 DB	 3
  00450	03		 DB	 3
  00451	03		 DB	 3
  00452	03		 DB	 3
  00453	03		 DB	 3
  00454	03		 DB	 3
  00455	03		 DB	 3
  00456	03		 DB	 3
  00457	03		 DB	 3
  00458	03		 DB	 3
  00459	03		 DB	 3
  0045a	03		 DB	 3
  0045b	03		 DB	 3
  0045c	03		 DB	 3
  0045d	03		 DB	 3
  0045e	03		 DB	 3
  0045f	03		 DB	 3
  00460	03		 DB	 3
  00461	03		 DB	 3
  00462	03		 DB	 3
  00463	03		 DB	 3
  00464	03		 DB	 3
  00465	03		 DB	 3
  00466	03		 DB	 3
  00467	03		 DB	 3
  00468	03		 DB	 3
  00469	03		 DB	 3
  0046a	03		 DB	 3
  0046b	03		 DB	 3
  0046c	03		 DB	 3
  0046d	03		 DB	 3
  0046e	03		 DB	 3
  0046f	03		 DB	 3
  00470	03		 DB	 3
  00471	03		 DB	 3
  00472	03		 DB	 3
  00473	03		 DB	 3
  00474	03		 DB	 3
  00475	03		 DB	 3
  00476	03		 DB	 3
  00477	03		 DB	 3
  00478	03		 DB	 3
  00479	03		 DB	 3
  0047a	03		 DB	 3
  0047b	03		 DB	 3
  0047c	03		 DB	 3
  0047d	03		 DB	 3
  0047e	03		 DB	 3
  0047f	03		 DB	 3
  00480	03		 DB	 3
  00481	03		 DB	 3
  00482	03		 DB	 3
  00483	03		 DB	 3
  00484	03		 DB	 3
  00485	03		 DB	 3
  00486	03		 DB	 3
  00487	03		 DB	 3
  00488	03		 DB	 3
  00489	03		 DB	 3
  0048a	03		 DB	 3
  0048b	03		 DB	 3
  0048c	03		 DB	 3
  0048d	03		 DB	 3
  0048e	03		 DB	 3
  0048f	03		 DB	 3
  00490	03		 DB	 3
  00491	03		 DB	 3
  00492	03		 DB	 3
  00493	03		 DB	 3
  00494	03		 DB	 3
  00495	03		 DB	 3
  00496	03		 DB	 3
  00497	03		 DB	 3
  00498	03		 DB	 3
  00499	03		 DB	 3
  0049a	03		 DB	 3
  0049b	03		 DB	 3
  0049c	03		 DB	 3
  0049d	03		 DB	 3
  0049e	03		 DB	 3
  0049f	03		 DB	 3
  004a0	03		 DB	 3
  004a1	03		 DB	 3
  004a2	03		 DB	 3
  004a3	03		 DB	 3
  004a4	03		 DB	 3
  004a5	03		 DB	 3
  004a6	03		 DB	 3
  004a7	03		 DB	 3
  004a8	03		 DB	 3
  004a9	03		 DB	 3
  004aa	03		 DB	 3
  004ab	03		 DB	 3
  004ac	03		 DB	 3
  004ad	03		 DB	 3
  004ae	03		 DB	 3
  004af	03		 DB	 3
  004b0	03		 DB	 3
  004b1	03		 DB	 3
  004b2	03		 DB	 3
  004b3	03		 DB	 3
  004b4	03		 DB	 3
  004b5	03		 DB	 3
  004b6	03		 DB	 3
  004b7	03		 DB	 3
  004b8	03		 DB	 3
  004b9	03		 DB	 3
  004ba	03		 DB	 3
  004bb	03		 DB	 3
  004bc	03		 DB	 3
  004bd	03		 DB	 3
  004be	03		 DB	 3
  004bf	03		 DB	 3
  004c0	03		 DB	 3
  004c1	03		 DB	 3
  004c2	03		 DB	 3
  004c3	03		 DB	 3
  004c4	03		 DB	 3
  004c5	03		 DB	 3
  004c6	03		 DB	 3
  004c7	03		 DB	 3
  004c8	03		 DB	 3
  004c9	03		 DB	 3
  004ca	03		 DB	 3
  004cb	03		 DB	 3
  004cc	03		 DB	 3
  004cd	03		 DB	 3
  004ce	03		 DB	 3
  004cf	03		 DB	 3
  004d0	03		 DB	 3
  004d1	03		 DB	 3
  004d2	03		 DB	 3
  004d3	03		 DB	 3
  004d4	03		 DB	 3
  004d5	03		 DB	 3
  004d6	03		 DB	 3
  004d7	03		 DB	 3
  004d8	03		 DB	 3
  004d9	01		 DB	 1
  004da	03		 DB	 3
  004db	03		 DB	 3
  004dc	02		 DB	 2
  004dd	03		 DB	 3
  004de	02		 DB	 2
  004df	03		 DB	 3
  004e0	03		 DB	 3
  004e1	01		 DB	 1
_AM_Responder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
END
