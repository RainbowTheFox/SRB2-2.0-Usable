; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\w_wad.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_numwadfiles:WORD
COMM	_wadfiles:DWORD:030H
_DATA	ENDS
PUBLIC	_W_Shutdown
PUBLIC	_W_LoadWadFile
PUBLIC	_W_UnloadWadFile
PUBLIC	_W_InitMultipleFiles
PUBLIC	_W_CheckNameForNumPwad
PUBLIC	_W_CheckNameForNum
PUBLIC	_W_CheckNumForNamePwad
PUBLIC	_W_CheckNumForName
PUBLIC	_W_GetNumForName
PUBLIC	_W_LumpLengthPwad
PUBLIC	_W_LumpLength
PUBLIC	_W_ReadLumpHeaderPwad
PUBLIC	_W_ReadLumpHeader
PUBLIC	_W_ReadLumpPwad
PUBLIC	_W_ReadLump
PUBLIC	_W_CacheLumpNumPwad
PUBLIC	_W_CacheLumpNum
PUBLIC	_W_CacheLumpNumForce
PUBLIC	_W_IsLumpCached
PUBLIC	_W_CacheLumpName
PUBLIC	_W_CachePatchName
PUBLIC	_W_CachePatchNum
PUBLIC	_W_VerifyFileMD5
PUBLIC	_W_VerifyNMUSlumps
PUBLIC	??_C@_07EHCDOLII@MAINCFG@			; `string'
PUBLIC	??_C@_0BN@IDPJCMBM@Loading?5main?5config?5from?5?$CFs?6@ ; `string'
PUBLIC	??_C@_08JFMPAGIK@OBJCTCFG@			; `string'
PUBLIC	??_C@_0BP@JGDGLBLD@Loading?5object?5config?5from?5?$CFs?6@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BD@JDKIKHCM@Making?5MD5?5for?5?$CFs?6@	; `string'
PUBLIC	??_C@_0CB@GGKDMGKM@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5seconds@ ; `string'
PUBLIC	??_C@_0BL@KJPBHEDA@Maximum?5wad?5files?5reached?6@ ; `string'
PUBLIC	??_C@_0P@EFONNJHN@Can?8t?5open?5?$CFs?6@	; `string'
PUBLIC	??_C@_0BE@BELJCLHI@File?5?$CFs?5not?5found?4?6@	; `string'
PUBLIC	??_C@_04DDPNCCIM@?4soc@				; `string'
PUBLIC	??_C@_0CK@DJJHNLAP@Can?8t?5read?5wad?5header?5from?5?$CFs?5b@ ; `string'
PUBLIC	??_C@_04PIOJIFGF@ZWAD@				; `string'
PUBLIC	??_C@_04NPKJGIDH@IWAD@				; `string'
PUBLIC	??_C@_04LCFJJNME@PWAD@				; `string'
PUBLIC	??_C@_04HHFEAGDO@SDLL@				; `string'
PUBLIC	??_C@_0CB@FLMINAJN@?$CFs?5doesn?8t?5have?5IWAD?5or?5PWAD?5id@ ; `string'
PUBLIC	??_C@_0CL@NFFJIIAK@?$CFs?5wadfile?5directory?5is?5corrupt@ ; `string'
PUBLIC	??_C@_0CG@NHDFFDEH@corrupt?5compressed?5file?3?5?$CFs?$DL?5ma@ ; `string'
PUBLIC	??_C@_0BK@HHHAPELO@Added?5file?5?$CFs?5?$CI?$CFu?5lumps?$CJ?6@ ; `string'
PUBLIC	??_C@_0BP@NLBKFCHO@You?5can?8t?5remove?5the?5IWAD?5?$CFs?$CB?6@ ; `string'
PUBLIC	??_C@_0BE@DDHBAPDF@Removing?5WAD?5?$CFs?4?4?4?6@ ; `string'
PUBLIC	??_C@_0BF@KDOEMCKC@?5done?5unloading?5WAD?6@	; `string'
PUBLIC	??_C@_0CE@DLHIMDKB@W_InitMultipleFiles?3?5no?5files?5f@ ; `string'
PUBLIC	??_C@_0CA@PCKMDCJK@W_GetNumForName?3?5?$CFs?5not?5found?$CB?6@ ; `string'
PUBLIC	??_C@_0CN@JDJOJKOM@wad?5?$CFd?0?5lump?5?$CFd?3?5cannot?5read?5co@ ; `string'
PUBLIC	??_C@_0DL@FHCDJEAD@wad?5?$CFd?0?5lump?5?$CFd?3?5compressed?5dat@ ; `string'
PUBLIC	??_C@_0CJ@NCMJIGPL@wad?5?$CFd?0?5lump?5?$CFd?3?5invalid?5compre@ ; `string'
PUBLIC	??_C@_0EP@NBHIELLO@wad?5?$CFd?0?5lump?5?$CFd?3?5decompressed?5t@ ; `string'
PUBLIC	??_C@_07DNMOPJGG@BRDR_MM@			; `string'
PUBLIC	??_C@_0EB@JIFDHAA@?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02@ ; `string'
PUBLIC	??_C@_0EG@PCCKNMNG@File?5is?5corrupt?5or?5has?5been?5mod@ ; `string'
PUBLIC	??_C@_0BF@ELAIJKIO@No?5checklist?5for?5?$CFs?6@	; `string'
PUBLIC	??_C@_02EKAOECGK@D_@				; `string'
PUBLIC	??_C@_02EGFLKNIL@O_@				; `string'
PUBLIC	??_C@_02OGLLANGG@DS@				; `string'
PUBLIC	??_C@_06BBOHFMBE@ENDOOM@			; `string'
PUBLIC	??_C@_07FLMOFAHC@PLAYPAL@			; `string'
PUBLIC	??_C@_08JDLPAFIO@COLORMAP@			; `string'
PUBLIC	??_C@_03DICCMILP@PAL@				; `string'
PUBLIC	??_C@_03GLENJCNM@CLM@				; `string'
PUBLIC	__real@420c0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__errno:PROC
EXTRN	_fclose:PROC
EXTRN	_ferror:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_lzf_decompress:PROC
EXTRN	_isupper:PROC
EXTRN	_isdigit:PROC
EXTRN	_memcmp:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strerror:PROC
EXTRN	_strlen:PROC
EXTRN	_strncmp:PROC
EXTRN	_strncpy:PROC
EXTRN	_stricmp:PROC
EXTRN	_strupr:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_strlcpy:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_Z_ChangeTag2:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_MallocAlign:PROC
EXTRN	_Z_CallocAlign:PROC
EXTRN	_Z_StrDup:PROC
EXTRN	_findfile:PROC
EXTRN	_nameonly:PROC
EXTRN	_nameonlylength:PROC
EXTRN	_DEH_UnloadDehackedWad:PROC
EXTRN	_DEH_LoadDehackedLumpPwad:PROC
EXTRN	_I_GetTime:PROC
EXTRN	_md5_stream:PROC
EXTRN	_HWR_MakePatch:PROC
EXTRN	_HWR_FreeTextureCache:PROC
EXTRN	___snprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_M_Memcpy:DWORD
EXTRN	_devparm:DWORD
EXTRN	_rendermode:DWORD
EXTRN	_sprnames:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_filenamebuf DB	080H DUP (?)
?uname@?1??W_CheckNumForNamePwad@@9@9 DB 09H DUP (?)	; `W_CheckNumForNamePwad'::`2'::uname
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT ??_C@_03GLENJCNM@CLM@
CONST	SEGMENT
??_C@_03GLENJCNM@CLM@ DB 'CLM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DICCMILP@PAL@
CONST	SEGMENT
??_C@_03DICCMILP@PAL@ DB 'PAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JDLPAFIO@COLORMAP@
CONST	SEGMENT
??_C@_08JDLPAFIO@COLORMAP@ DB 'COLORMAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLMOFAHC@PLAYPAL@
CONST	SEGMENT
??_C@_07FLMOFAHC@PLAYPAL@ DB 'PLAYPAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBOHFMBE@ENDOOM@
CONST	SEGMENT
??_C@_06BBOHFMBE@ENDOOM@ DB 'ENDOOM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OGLLANGG@DS@
CONST	SEGMENT
??_C@_02OGLLANGG@DS@ DB 'DS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGFLKNIL@O_@
CONST	SEGMENT
??_C@_02EGFLKNIL@O_@ DB 'O_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EKAOECGK@D_@
CONST	SEGMENT
??_C@_02EKAOECGK@D_@ DB 'D_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ELAIJKIO@No?5checklist?5for?5?$CFs?6@
CONST	SEGMENT
??_C@_0BF@ELAIJKIO@No?5checklist?5for?5?$CFs?6@ DB 'No checklist for %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@PCCKNMNG@File?5is?5corrupt?5or?5has?5been?5mod@
CONST	SEGMENT
??_C@_0EG@PCCKNMNG@File?5is?5corrupt?5or?5has?5been?5mod@ DB 'File is cor'
	DB	'rupt or has been modified: %s (found md5: %s, wanted: %s)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JIFDHAA@?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02@
CONST	SEGMENT
??_C@_0EB@JIFDHAA@?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02@ DB '%'
	DB	'02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%0'
	DB	'2x', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07DNMOPJGG@BRDR_MM@
CONST	SEGMENT
??_C@_07DNMOPJGG@BRDR_MM@ DB 'BRDR_MM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NBHIELLO@wad?5?$CFd?0?5lump?5?$CFd?3?5decompressed?5t@
CONST	SEGMENT
??_C@_0EP@NBHIELLO@wad?5?$CFd?0?5lump?5?$CFd?3?5decompressed?5t@ DB 'wad '
	DB	'%d, lump %d: decompressed to wrong number of bytes (expected '
	DB	'%Iu, got %Iu)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NCMJIGPL@wad?5?$CFd?0?5lump?5?$CFd?3?5invalid?5compre@
CONST	SEGMENT
??_C@_0CJ@NCMJIGPL@wad?5?$CFd?0?5lump?5?$CFd?3?5invalid?5compre@ DB 'wad '
	DB	'%d, lump %d: invalid compressed data', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@FHCDJEAD@wad?5?$CFd?0?5lump?5?$CFd?3?5compressed?5dat@
CONST	SEGMENT
??_C@_0DL@FHCDJEAD@wad?5?$CFd?0?5lump?5?$CFd?3?5compressed?5dat@ DB 'wad '
	DB	'%d, lump %d: compressed data too big (bigger than %Iu)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JDJOJKOM@wad?5?$CFd?0?5lump?5?$CFd?3?5cannot?5read?5co@
CONST	SEGMENT
??_C@_0CN@JDJOJKOM@wad?5?$CFd?0?5lump?5?$CFd?3?5cannot?5read?5co@ DB 'wad'
	DB	' %d, lump %d: cannot read compressed data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PCKMDCJK@W_GetNumForName?3?5?$CFs?5not?5found?$CB?6@
CONST	SEGMENT
??_C@_0CA@PCKMDCJK@W_GetNumForName?3?5?$CFs?5not?5found?$CB?6@ DB 'W_GetN'
	DB	'umForName: %s not found!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DLHIMDKB@W_InitMultipleFiles?3?5no?5files?5f@
CONST	SEGMENT
??_C@_0CE@DLHIMDKB@W_InitMultipleFiles?3?5no?5files?5f@ DB 'W_InitMultipl'
	DB	'eFiles: no files found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KDOEMCKC@?5done?5unloading?5WAD?6@
CONST	SEGMENT
??_C@_0BF@KDOEMCKC@?5done?5unloading?5WAD?6@ DB ' done unloading WAD', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DDHBAPDF@Removing?5WAD?5?$CFs?4?4?4?6@
CONST	SEGMENT
??_C@_0BE@DDHBAPDF@Removing?5WAD?5?$CFs?4?4?4?6@ DB 'Removing WAD %s...', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NLBKFCHO@You?5can?8t?5remove?5the?5IWAD?5?$CFs?$CB?6@
CONST	SEGMENT
??_C@_0BP@NLBKFCHO@You?5can?8t?5remove?5the?5IWAD?5?$CFs?$CB?6@ DB 'You c'
	DB	'an''t remove the IWAD %s!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HHHAPELO@Added?5file?5?$CFs?5?$CI?$CFu?5lumps?$CJ?6@
CONST	SEGMENT
??_C@_0BK@HHHAPELO@Added?5file?5?$CFs?5?$CI?$CFu?5lumps?$CJ?6@ DB 'Added '
	DB	'file %s (%u lumps)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NHDFFDEH@corrupt?5compressed?5file?3?5?$CFs?$DL?5ma@
CONST	SEGMENT
??_C@_0CG@NHDFFDEH@corrupt?5compressed?5file?3?5?$CFs?$DL?5ma@ DB 'corrup'
	DB	't compressed file: %s; maybe %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NFFJIIAK@?$CFs?5wadfile?5directory?5is?5corrupt@
CONST	SEGMENT
??_C@_0CL@NFFJIIAK@?$CFs?5wadfile?5directory?5is?5corrupt@ DB '%s wadfile'
	DB	' directory is corrupt; maybe %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FLMINAJN@?$CFs?5doesn?8t?5have?5IWAD?5or?5PWAD?5id@
CONST	SEGMENT
??_C@_0CB@FLMINAJN@?$CFs?5doesn?8t?5have?5IWAD?5or?5PWAD?5id@ DB '%s does'
	DB	'n''t have IWAD or PWAD id', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHFEAGDO@SDLL@
CONST	SEGMENT
??_C@_04HHFEAGDO@SDLL@ DB 'SDLL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCFJJNME@PWAD@
CONST	SEGMENT
??_C@_04LCFJJNME@PWAD@ DB 'PWAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NPKJGIDH@IWAD@
CONST	SEGMENT
??_C@_04NPKJGIDH@IWAD@ DB 'IWAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PIOJIFGF@ZWAD@
CONST	SEGMENT
??_C@_04PIOJIFGF@ZWAD@ DB 'ZWAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DJJHNLAP@Can?8t?5read?5wad?5header?5from?5?$CFs?5b@
CONST	SEGMENT
??_C@_0CK@DJJHNLAP@Can?8t?5read?5wad?5header?5from?5?$CFs?5b@ DB 'Can''t '
	DB	'read wad header from %s because %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDPNCCIM@?4soc@
CONST	SEGMENT
??_C@_04DDPNCCIM@?4soc@ DB '.soc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BELJCLHI@File?5?$CFs?5not?5found?4?6@
CONST	SEGMENT
??_C@_0BE@BELJCLHI@File?5?$CFs?5not?5found?4?6@ DB 'File %s not found.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EFONNJHN@Can?8t?5open?5?$CFs?6@
CONST	SEGMENT
??_C@_0P@EFONNJHN@Can?8t?5open?5?$CFs?6@ DB 'Can''t open %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KJPBHEDA@Maximum?5wad?5files?5reached?6@
CONST	SEGMENT
??_C@_0BL@KJPBHEDA@Maximum?5wad?5files?5reached?6@ DB 'Maximum wad files '
	DB	'reached', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GGKDMGKM@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5seconds@
CONST	SEGMENT
??_C@_0CB@GGKDMGKM@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5seconds@ DB 'MD5 c'
	DB	'alc for %s took %f seconds', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDKIKHCM@Making?5MD5?5for?5?$CFs?6@
CONST	SEGMENT
??_C@_0BD@JDKIKHCM@Making?5MD5?5for?5?$CFs?6@ DB 'Making MD5 for %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JGDGLBLD@Loading?5object?5config?5from?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@JGDGLBLD@Loading?5object?5config?5from?5?$CFs?6@ DB 'Loading ob'
	DB	'ject config from %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFMPAGIK@OBJCTCFG@
CONST	SEGMENT
??_C@_08JFMPAGIK@OBJCTCFG@ DB 'OBJCTCFG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IDPJCMBM@Loading?5main?5config?5from?5?$CFs?6@
CONST	SEGMENT
??_C@_0BN@IDPJCMBM@Loading?5main?5config?5from?5?$CFs?6@ DB 'Loading main'
	DB	' config from %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EHCDOLII@MAINCFG@
CONST	SEGMENT
??_C@_07EHCDOLII@MAINCFG@ DB 'MAINCFG', 00H		; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	02f2H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0a9H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	010fH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	064eH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_VerifyFile
_TEXT	SEGMENT
tv202 = -116						; size = 4
_lumpinfo$1 = -48					; size = 16
_header$2 = -32						; size = 12
_goodfile$ = -20					; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_handle$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_checklist$ = 12					; size = 4
_status$ = 16						; size = 4
_W_VerifyFile PROC					; COMDAT

; 967  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 968  : 	FILE *handle;
; 969  : 	size_t i, j;
; 970  : 	int goodfile = false;

  00013	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _goodfile$[ebp], 0

; 971  : 
; 972  : 	if (!checklist) I_Error("No checklist for %s\n", filename);

  0001a	83 7d 0c 00	 cmp	 DWORD PTR _checklist$[ebp], 0
  0001e	75 11		 jne	 SHORT $LN11@W_VerifyFi
  00020	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ELAIJKIO@No?5checklist?5for?5?$CFs?6@
  00029	e8 00 00 00 00	 call	 _I_Error
  0002e	83 c4 08	 add	 esp, 8
$LN11@W_VerifyFi:

; 973  : 	strlcpy(filenamebuf, filename, MAX_WADPATH);

  00031	68 80 00 00 00	 push	 128			; 00000080H
  00036	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET _filenamebuf
  0003f	e8 00 00 00 00	 call	 _strlcpy
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 974  : 	filename = filenamebuf;

  00047	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp], OFFSET _filenamebuf

; 975  : 	// open wad file
; 976  : 	if ((handle = fopen(filename, "rb")) == NULL)

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00053	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _fopen
  0005c	83 c4 08	 add	 esp, 8
  0005f	89 45 f8	 mov	 DWORD PTR _handle$[ebp], eax
  00062	83 7d f8 00	 cmp	 DWORD PTR _handle$[ebp], 0
  00066	75 4e		 jne	 SHORT $LN14@W_VerifyFi

; 977  : 	{
; 978  : 		nameonly(filenamebuf); // leave full path here

  00068	68 00 00 00 00	 push	 OFFSET _filenamebuf
  0006d	e8 00 00 00 00	 call	 _nameonly
  00072	83 c4 04	 add	 esp, 4

; 979  : 		if (findfile(filenamebuf, NULL, true))

  00075	6a 01		 push	 1
  00077	6a 00		 push	 0
  00079	68 00 00 00 00	 push	 OFFSET _filenamebuf
  0007e	e8 00 00 00 00	 call	 _findfile
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	85 c0		 test	 eax, eax
  00088	74 24		 je	 SHORT $LN13@W_VerifyFi

; 980  : 		{
; 981  : 			if ((handle = fopen(filename, "rb")) == NULL)

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0008f	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _fopen
  00098	83 c4 08	 add	 esp, 8
  0009b	89 45 f8	 mov	 DWORD PTR _handle$[ebp], eax
  0009e	83 7d f8 00	 cmp	 DWORD PTR _handle$[ebp], 0
  000a2	75 08		 jne	 SHORT $LN15@W_VerifyFi

; 982  : 				return -1;

  000a4	83 c8 ff	 or	 eax, -1
  000a7	e9 43 02 00 00	 jmp	 $LN1@W_VerifyFi
$LN15@W_VerifyFi:

; 983  : 		}

  000ac	eb 08		 jmp	 SHORT $LN14@W_VerifyFi
$LN13@W_VerifyFi:

; 984  : 		else
; 985  : 			return -1;

  000ae	83 c8 ff	 or	 eax, -1
  000b1	e9 39 02 00 00	 jmp	 $LN1@W_VerifyFi
$LN14@W_VerifyFi:

; 986  : 	}
; 987  : 
; 988  : 	// detect dehacked file with the "soc" extension
; 989  : 	if (stricmp(&filename[strlen(filename) - 4], ".soc") != 0)

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_04DDPNCCIM@?4soc@
  000bb	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _strlen
  000c4	83 c4 04	 add	 esp, 4
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  000ca	8d 54 01 fc	 lea	 edx, DWORD PTR [ecx+eax-4]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _stricmp
  000d4	83 c4 08	 add	 esp, 8
  000d7	85 c0		 test	 eax, eax
  000d9	0f 84 01 02 00
	00		 je	 $LN3@W_VerifyFi

; 990  : 	{
; 991  : 		// assume wad file
; 992  : 		wadinfo_t header;
; 993  : 		filelump_t lumpinfo;
; 994  : 
; 995  : 		// read the header
; 996  : 		if (fread(&header, 1, sizeof header, handle) == sizeof header
; 997  : 			&& header.numlumps < INT16_MAX
; 998  : 			&& strncmp(header.identification, "ZWAD", 4)
; 999  : 			&& strncmp(header.identification, "IWAD", 4)
; 1000 : 			&& strncmp(header.identification, "PWAD", 4)
; 1001 : 			&& strncmp(header.identification, "SDLL", 4))

  000df	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  000e2	50		 push	 eax
  000e3	6a 0c		 push	 12			; 0000000cH
  000e5	6a 01		 push	 1
  000e7	8d 4d e0	 lea	 ecx, DWORD PTR _header$2[ebp]
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 _fread
  000f0	83 c4 10	 add	 esp, 16			; 00000010H
  000f3	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  000f6	75 7b		 jne	 SHORT $LN17@W_VerifyFi
  000f8	81 7d e4 ff 7f
	00 00		 cmp	 DWORD PTR _header$2[ebp+4], 32767 ; 00007fffH
  000ff	73 72		 jae	 SHORT $LN17@W_VerifyFi
  00101	6a 04		 push	 4
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_04PIOJIFGF@ZWAD@
  00108	8d 45 e0	 lea	 eax, DWORD PTR _header$2[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _strncmp
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	85 c0		 test	 eax, eax
  00116	74 5b		 je	 SHORT $LN17@W_VerifyFi
  00118	6a 04		 push	 4
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_04NPKJGIDH@IWAD@
  0011f	8d 45 e0	 lea	 eax, DWORD PTR _header$2[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 _strncmp
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	85 c0		 test	 eax, eax
  0012d	74 44		 je	 SHORT $LN17@W_VerifyFi
  0012f	6a 04		 push	 4
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_04LCFJJNME@PWAD@
  00136	8d 45 e0	 lea	 eax, DWORD PTR _header$2[ebp]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _strncmp
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	85 c0		 test	 eax, eax
  00144	74 2d		 je	 SHORT $LN17@W_VerifyFi
  00146	6a 04		 push	 4
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_04HHFEAGDO@SDLL@
  0014d	8d 45 e0	 lea	 eax, DWORD PTR _header$2[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _strncmp
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
  00159	85 c0		 test	 eax, eax
  0015b	74 16		 je	 SHORT $LN17@W_VerifyFi

; 1002 : 		{
; 1003 : 			fclose(handle);

  0015d	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _fclose
  00166	83 c4 04	 add	 esp, 4

; 1004 : 			return true;

  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	e9 7c 01 00 00	 jmp	 $LN1@W_VerifyFi
$LN17@W_VerifyFi:

; 1005 : 		}
; 1006 : 
; 1007 : 		header.numlumps = LONG(header.numlumps);

  00173	8b 45 e4	 mov	 eax, DWORD PTR _header$2[ebp+4]
  00176	89 45 e4	 mov	 DWORD PTR _header$2[ebp+4], eax

; 1008 : 		header.infotableofs = LONG(header.infotableofs);

  00179	8b 45 e8	 mov	 eax, DWORD PTR _header$2[ebp+8]
  0017c	89 45 e8	 mov	 DWORD PTR _header$2[ebp+8], eax

; 1009 : 
; 1010 : 		// let seek to the lumpinfo list
; 1011 : 		if (fseek(handle, header.infotableofs, SEEK_SET) == -1)

  0017f	6a 00		 push	 0
  00181	8b 45 e8	 mov	 eax, DWORD PTR _header$2[ebp+8]
  00184	50		 push	 eax
  00185	8b 4d f8	 mov	 ecx, DWORD PTR _handle$[ebp]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 _fseek
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00191	83 f8 ff	 cmp	 eax, -1
  00194	75 13		 jne	 SHORT $LN18@W_VerifyFi

; 1012 : 		{
; 1013 : 			fclose(handle);

  00196	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 _fclose
  0019f	83 c4 04	 add	 esp, 4

; 1014 : 			return false;

  001a2	33 c0		 xor	 eax, eax
  001a4	e9 46 01 00 00	 jmp	 $LN1@W_VerifyFi
$LN18@W_VerifyFi:

; 1015 : 		}
; 1016 : 
; 1017 : 		goodfile = true;

  001a9	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _goodfile$[ebp], 1

; 1018 : 		for (i = 0; i < header.numlumps; i++)

  001b0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001b7	eb 09		 jmp	 SHORT $LN4@W_VerifyFi
$LN2@W_VerifyFi:
  001b9	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001bc	83 c0 01	 add	 eax, 1
  001bf	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@W_VerifyFi:
  001c2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001c5	3b 45 e4	 cmp	 eax, DWORD PTR _header$2[ebp+4]
  001c8	0f 83 12 01 00
	00		 jae	 $LN3@W_VerifyFi

; 1019 : 		{
; 1020 : 			// fill in lumpinfo for this wad file directory
; 1021 : 			if (fread(&lumpinfo, sizeof (lumpinfo), 1 , handle) != 1)

  001ce	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  001d1	50		 push	 eax
  001d2	6a 01		 push	 1
  001d4	6a 10		 push	 16			; 00000010H
  001d6	8d 4d d0	 lea	 ecx, DWORD PTR _lumpinfo$1[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _fread
  001df	83 c4 10	 add	 esp, 16			; 00000010H
  001e2	83 f8 01	 cmp	 eax, 1
  001e5	74 14		 je	 SHORT $LN19@W_VerifyFi

; 1022 : 			{
; 1023 : 				fclose(handle);

  001e7	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 _fclose
  001f0	83 c4 04	 add	 esp, 4

; 1024 : 				return -1;

  001f3	83 c8 ff	 or	 eax, -1
  001f6	e9 f4 00 00 00	 jmp	 $LN1@W_VerifyFi
$LN19@W_VerifyFi:

; 1025 : 			}
; 1026 : 
; 1027 : 			lumpinfo.filepos = LONG(lumpinfo.filepos);

  001fb	8b 45 d0	 mov	 eax, DWORD PTR _lumpinfo$1[ebp]
  001fe	89 45 d0	 mov	 DWORD PTR _lumpinfo$1[ebp], eax

; 1028 : 			lumpinfo.size = LONG(lumpinfo.size);

  00201	8b 45 d4	 mov	 eax, DWORD PTR _lumpinfo$1[ebp+4]
  00204	89 45 d4	 mov	 DWORD PTR _lumpinfo$1[ebp+4], eax

; 1029 : 
; 1030 : 			if (lumpinfo.size == 0)

  00207	83 7d d4 00	 cmp	 DWORD PTR _lumpinfo$1[ebp+4], 0
  0020b	75 02		 jne	 SHORT $LN20@W_VerifyFi

; 1031 : 				continue;

  0020d	eb aa		 jmp	 SHORT $LN2@W_VerifyFi
$LN20@W_VerifyFi:

; 1032 : 
; 1033 : 			for (j = 0; j < NUMSPRITES; j++)

  0020f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00216	eb 09		 jmp	 SHORT $LN7@W_VerifyFi
$LN5@W_VerifyFi:
  00218	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0021b	83 c0 01	 add	 eax, 1
  0021e	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN7@W_VerifyFi:
  00221	81 7d f0 73 01
	00 00		 cmp	 DWORD PTR _j$[ebp], 371	; 00000173H
  00228	73 2b		 jae	 SHORT $LN6@W_VerifyFi

; 1034 : 				if (sprnames[j] && !strncmp(lumpinfo.name, sprnames[j], 4)) // Sprites

  0022a	6b 45 f0 05	 imul	 eax, DWORD PTR _j$[ebp], 5
  0022e	05 00 00 00 00	 add	 eax, OFFSET _sprnames
  00233	74 1e		 je	 SHORT $LN21@W_VerifyFi
  00235	6a 04		 push	 4
  00237	6b 45 f0 05	 imul	 eax, DWORD PTR _j$[ebp], 5
  0023b	05 00 00 00 00	 add	 eax, OFFSET _sprnames
  00240	50		 push	 eax
  00241	8d 4d d8	 lea	 ecx, DWORD PTR _lumpinfo$1[ebp+8]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 _strncmp
  0024a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024d	85 c0		 test	 eax, eax
  0024f	75 02		 jne	 SHORT $LN21@W_VerifyFi

; 1035 : 					continue;

  00251	eb c5		 jmp	 SHORT $LN5@W_VerifyFi
$LN21@W_VerifyFi:
  00253	eb c3		 jmp	 SHORT $LN5@W_VerifyFi
$LN6@W_VerifyFi:

; 1036 : 
; 1037 : 			goodfile = false;

  00255	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _goodfile$[ebp], 0

; 1038 : 			for (j = 0; checklist[j].len && checklist[j].name && !goodfile; j++)

  0025c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00263	eb 09		 jmp	 SHORT $LN10@W_VerifyFi
$LN8@W_VerifyFi:
  00265	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00268	83 c0 01	 add	 eax, 1
  0026b	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN10@W_VerifyFi:
  0026e	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _checklist$[ebp]
  00274	83 7c c1 04 00	 cmp	 DWORD PTR [ecx+eax*8+4], 0
  00279	74 58		 je	 SHORT $LN9@W_VerifyFi
  0027b	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0027e	8b 4d 0c	 mov	 ecx, DWORD PTR _checklist$[ebp]
  00281	83 3c c1 00	 cmp	 DWORD PTR [ecx+eax*8], 0
  00285	74 4c		 je	 SHORT $LN9@W_VerifyFi
  00287	83 7d ec 00	 cmp	 DWORD PTR _goodfile$[ebp], 0
  0028b	75 46		 jne	 SHORT $LN9@W_VerifyFi

; 1039 : 				if ((strncmp(lumpinfo.name, checklist[j].name, checklist[j].len) != false) == status)

  0028d	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00290	8b 4d 0c	 mov	 ecx, DWORD PTR _checklist$[ebp]
  00293	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  00297	52		 push	 edx
  00298	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0029b	8b 4d 0c	 mov	 ecx, DWORD PTR _checklist$[ebp]
  0029e	8b 14 c1	 mov	 edx, DWORD PTR [ecx+eax*8]
  002a1	52		 push	 edx
  002a2	8d 45 d8	 lea	 eax, DWORD PTR _lumpinfo$1[ebp+8]
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 _strncmp
  002ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ae	85 c0		 test	 eax, eax
  002b0	74 09		 je	 SHORT $LN25@W_VerifyFi
  002b2	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv202[ebp], 1
  002b9	eb 07		 jmp	 SHORT $LN26@W_VerifyFi
$LN25@W_VerifyFi:
  002bb	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv202[ebp], 0
$LN26@W_VerifyFi:
  002c2	8b 4d 8c	 mov	 ecx, DWORD PTR tv202[ebp]
  002c5	3b 4d 10	 cmp	 ecx, DWORD PTR _status$[ebp]
  002c8	75 07		 jne	 SHORT $LN22@W_VerifyFi

; 1040 : 					goodfile = true;

  002ca	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _goodfile$[ebp], 1
$LN22@W_VerifyFi:
  002d1	eb 92		 jmp	 SHORT $LN8@W_VerifyFi
$LN9@W_VerifyFi:

; 1041 : 
; 1042 : 			if (!goodfile)

  002d3	83 7d ec 00	 cmp	 DWORD PTR _goodfile$[ebp], 0
  002d7	75 02		 jne	 SHORT $LN23@W_VerifyFi

; 1043 : 				break;

  002d9	eb 05		 jmp	 SHORT $LN3@W_VerifyFi
$LN23@W_VerifyFi:

; 1044 : 		}

  002db	e9 d9 fe ff ff	 jmp	 $LN2@W_VerifyFi
$LN3@W_VerifyFi:

; 1045 : 	}
; 1046 : 	fclose(handle);

  002e0	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 _fclose
  002e9	83 c4 04	 add	 esp, 4

; 1047 : 	return goodfile;

  002ec	8b 45 ec	 mov	 eax, DWORD PTR _goodfile$[ebp]
$LN1@W_VerifyFi:

; 1048 : }

  002ef	5f		 pop	 edi
  002f0	5e		 pop	 esi
  002f1	5b		 pop	 ebx
  002f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f5	33 cd		 xor	 ecx, ebp
  002f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fc	8b e5		 mov	 esp, ebp
  002fe	5d		 pop	 ebp
  002ff	c3		 ret	 0
_W_VerifyFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _PrintMD5String
_TEXT	SEGMENT
_md5$ = 8						; size = 4
_buf$ = 12						; size = 4
_PrintMD5String PROC					; COMDAT

; 900  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 901  : 	_snprintf(buf, 2*MD5_LEN+1, MD5_FORMAT,

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 0f	 imul	 ecx, eax, 15
  00011	8b 55 08	 mov	 edx, DWORD PTR _md5$[ebp]
  00014	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00018	50		 push	 eax
  00019	b9 01 00 00 00	 mov	 ecx, 1
  0001e	6b d1 0e	 imul	 edx, ecx, 14
  00021	8b 45 08	 mov	 eax, DWORD PTR _md5$[ebp]
  00024	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00028	51		 push	 ecx
  00029	ba 01 00 00 00	 mov	 edx, 1
  0002e	6b c2 0d	 imul	 eax, edx, 13
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _md5$[ebp]
  00034	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00038	52		 push	 edx
  00039	b8 01 00 00 00	 mov	 eax, 1
  0003e	6b c8 0c	 imul	 ecx, eax, 12
  00041	8b 55 08	 mov	 edx, DWORD PTR _md5$[ebp]
  00044	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00048	50		 push	 eax
  00049	b9 01 00 00 00	 mov	 ecx, 1
  0004e	6b d1 0b	 imul	 edx, ecx, 11
  00051	8b 45 08	 mov	 eax, DWORD PTR _md5$[ebp]
  00054	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00058	51		 push	 ecx
  00059	ba 01 00 00 00	 mov	 edx, 1
  0005e	6b c2 0a	 imul	 eax, edx, 10
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _md5$[ebp]
  00064	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00068	52		 push	 edx
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	6b c8 09	 imul	 ecx, eax, 9
  00071	8b 55 08	 mov	 edx, DWORD PTR _md5$[ebp]
  00074	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00078	50		 push	 eax
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	c1 e1 03	 shl	 ecx, 3
  00081	8b 55 08	 mov	 edx, DWORD PTR _md5$[ebp]
  00084	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00088	50		 push	 eax
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	6b d1 07	 imul	 edx, ecx, 7
  00091	8b 45 08	 mov	 eax, DWORD PTR _md5$[ebp]
  00094	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00098	51		 push	 ecx
  00099	ba 01 00 00 00	 mov	 edx, 1
  0009e	6b c2 06	 imul	 eax, edx, 6
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _md5$[ebp]
  000a4	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  000a8	52		 push	 edx
  000a9	b8 01 00 00 00	 mov	 eax, 1
  000ae	6b c8 05	 imul	 ecx, eax, 5
  000b1	8b 55 08	 mov	 edx, DWORD PTR _md5$[ebp]
  000b4	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000b8	50		 push	 eax
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	c1 e1 02	 shl	 ecx, 2
  000c1	8b 55 08	 mov	 edx, DWORD PTR _md5$[ebp]
  000c4	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000c8	50		 push	 eax
  000c9	b9 01 00 00 00	 mov	 ecx, 1
  000ce	6b d1 03	 imul	 edx, ecx, 3
  000d1	8b 45 08	 mov	 eax, DWORD PTR _md5$[ebp]
  000d4	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  000d8	51		 push	 ecx
  000d9	ba 01 00 00 00	 mov	 edx, 1
  000de	d1 e2		 shl	 edx, 1
  000e0	8b 45 08	 mov	 eax, DWORD PTR _md5$[ebp]
  000e3	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  000e7	51		 push	 ecx
  000e8	ba 01 00 00 00	 mov	 edx, 1
  000ed	c1 e2 00	 shl	 edx, 0
  000f0	8b 45 08	 mov	 eax, DWORD PTR _md5$[ebp]
  000f3	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  000f7	51		 push	 ecx
  000f8	ba 01 00 00 00	 mov	 edx, 1
  000fd	6b c2 00	 imul	 eax, edx, 0
  00100	8b 4d 08	 mov	 ecx, DWORD PTR _md5$[ebp]
  00103	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00107	52		 push	 edx
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@JIFDHAA@?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02x?$CF02@
  0010d	6a 21		 push	 33			; 00000021H
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ___snprintf
  00118	83 c4 4c	 add	 esp, 76			; 0000004cH

; 902  : 		md5[0], md5[1], md5[2], md5[3],
; 903  : 		md5[4], md5[5], md5[6], md5[7],
; 904  : 		md5[8], md5[9], md5[10], md5[11],
; 905  : 		md5[12], md5[13], md5[14], md5[15]);
; 906  : }

  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
_PrintMD5String ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CachePatchNumPwad
_TEXT	SEGMENT
_ptr$1 = -8						; size = 4
_grPatch$ = -4						; size = 4
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_tag$ = 16						; size = 4
_W_CachePatchNumPwad PROC				; COMDAT

; 838  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 839  : 	GLPatch_t *grPatch;
; 840  : 
; 841  : 	if (rendermode == render_soft || rendermode == render_none)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  00010	74 09		 je	 SHORT $LN3@W_CachePat
  00012	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  00019	75 1b		 jne	 SHORT $LN2@W_CachePat
$LN3@W_CachePat:

; 842  : 		return W_CacheLumpNumPwad(wad, lump, tag);

  0001b	8b 45 10	 mov	 eax, DWORD PTR _tag$[ebp]
  0001e	50		 push	 eax
  0001f	0f b7 4d 0c	 movzx	 ecx, WORD PTR _lump$[ebp]
  00023	51		 push	 ecx
  00024	0f b7 55 08	 movzx	 edx, WORD PTR _wad$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 _W_CacheLumpNumPwad
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	e9 97 00 00 00	 jmp	 $LN1@W_CachePat
$LN2@W_CachePat:

; 843  : 
; 844  : 	if (!TestValidLump(wad, lump))

  00036	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0003a	50		 push	 eax
  0003b	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _TestValidLump
  00045	83 c4 08	 add	 esp, 8
  00048	85 c0		 test	 eax, eax
  0004a	75 04		 jne	 SHORT $LN4@W_CachePat

; 845  : 		return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 7d		 jmp	 SHORT $LN1@W_CachePat
$LN4@W_CachePat:

; 846  : 
; 847  : 	grPatch = &(wadfiles[wad]->hwrcache[lump]);

  00050	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0005b	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  0005f	c1 e2 06	 shl	 edx, 6
  00062	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
  00065	89 55 fc	 mov	 DWORD PTR _grPatch$[ebp], edx

; 848  : 
; 849  : 	if (grPatch->mipmap.grInfo.data)

  00068	8b 45 fc	 mov	 eax, DWORD PTR _grPatch$[ebp]
  0006b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0006f	74 22		 je	 SHORT $LN5@W_CachePat

; 850  : 	{
; 851  : 		if (tag == PU_CACHE)

  00071	83 7d 10 65	 cmp	 DWORD PTR _tag$[ebp], 101 ; 00000065H
  00075	75 07		 jne	 SHORT $LN7@W_CachePat

; 852  : 			tag = PU_HWRCACHE;

  00077	c7 45 10 66 00
	00 00		 mov	 DWORD PTR _tag$[ebp], 102 ; 00000066H
$LN7@W_CachePat:

; 853  : 		Z_ChangeTag(grPatch->mipmap.grInfo.data, tag);

  0007e	8b 45 10	 mov	 eax, DWORD PTR _tag$[ebp]
  00081	50		 push	 eax
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _grPatch$[ebp]
  00085	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _Z_ChangeTag2
  0008e	83 c4 08	 add	 esp, 8

; 854  : 	}

  00091	eb 37		 jmp	 SHORT $LN6@W_CachePat
$LN5@W_CachePat:

; 855  : 	else
; 856  : 	{
; 857  : 		// first time init grPatch fields
; 858  : 		// we need patch w,h,offset,...
; 859  : 		// this code will be executed latter in GetPatch, anyway
; 860  : 		// do it now
; 861  : 		patch_t *ptr = W_CacheLumpNum(grPatch->patchlump, PU_STATIC);

  00093	6a 01		 push	 1
  00095	8b 45 fc	 mov	 eax, DWORD PTR _grPatch$[ebp]
  00098	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 _W_CacheLumpNum
  000a1	83 c4 08	 add	 esp, 8
  000a4	89 45 f8	 mov	 DWORD PTR _ptr$1[ebp], eax

; 862  : 		HWR_MakePatch(ptr, grPatch, &grPatch->mipmap);

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _grPatch$[ebp]
  000aa	83 c0 14	 add	 eax, 20			; 00000014H
  000ad	50		 push	 eax
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _grPatch$[ebp]
  000b1	51		 push	 ecx
  000b2	8b 55 f8	 mov	 edx, DWORD PTR _ptr$1[ebp]
  000b5	52		 push	 edx
  000b6	e8 00 00 00 00	 call	 _HWR_MakePatch
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 863  : 		Z_Free(ptr);

  000be	8b 45 f8	 mov	 eax, DWORD PTR _ptr$1[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _Z_Free
  000c7	83 c4 04	 add	 esp, 4
$LN6@W_CachePat:

; 864  : 	}
; 865  : 
; 866  : 	// return GLPatch_t, which can be casted to (patch_t) with valid patch header info
; 867  : 	return (void *)grPatch;

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _grPatch$[ebp]
$LN1@W_CachePat:

; 868  : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_W_CachePatchNumPwad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_IsLumpCachedPWAD
_TEXT	SEGMENT
_lcache$ = -4						; size = 4
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_ptr$ = 16						; size = 4
_W_IsLumpCachedPWAD PROC				; COMDAT

; 788  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 789  : 	void *lcache;
; 790  : 
; 791  : 	if (!TestValidLump(wad, lump))

  00009	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0000d	50		 push	 eax
  0000e	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _TestValidLump
  00018	83 c4 08	 add	 esp, 8
  0001b	85 c0		 test	 eax, eax
  0001d	75 04		 jne	 SHORT $LN2@W_IsLumpCa

; 792  : 		return false;

  0001f	33 c0		 xor	 eax, eax
  00021	eb 3e		 jmp	 SHORT $LN1@W_IsLumpCa
$LN2@W_IsLumpCa:

; 793  : 
; 794  : 	lcache = wadfiles[wad]->lumpcache[lump];

  00023	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  00027	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0002e	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  00032	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00035	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00038	89 4d fc	 mov	 DWORD PTR _lcache$[ebp], ecx

; 795  : 
; 796  : 	if (ptr)

  0003b	83 7d 10 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  0003f	74 11		 je	 SHORT $LN3@W_IsLumpCa

; 797  : 	{
; 798  : 		if (ptr == lcache)

  00041	8b 45 10	 mov	 eax, DWORD PTR _ptr$[ebp]
  00044	3b 45 fc	 cmp	 eax, DWORD PTR _lcache$[ebp]
  00047	75 07		 jne	 SHORT $LN5@W_IsLumpCa

; 799  : 			return true;

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	eb 11		 jmp	 SHORT $LN1@W_IsLumpCa
$LN5@W_IsLumpCa:

; 800  : 	}

  00050	eb 0d		 jmp	 SHORT $LN6@W_IsLumpCa
$LN3@W_IsLumpCa:

; 801  : 	else if (lcache)

  00052	83 7d fc 00	 cmp	 DWORD PTR _lcache$[ebp], 0
  00056	74 07		 je	 SHORT $LN6@W_IsLumpCa

; 802  : 		return true;

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	eb 02		 jmp	 SHORT $LN1@W_IsLumpCa
$LN6@W_IsLumpCa:

; 803  : 
; 804  : 	return false;

  0005f	33 c0		 xor	 eax, eax
$LN1@W_IsLumpCa:

; 805  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_W_IsLumpCachedPWAD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_ReadCompressedLump
_TEXT	SEGMENT
_retval$ = -16						; size = 4
_l$ = -12						; size = 4
_data$ = -8						; size = 4
_compressed$ = -4					; size = 4
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_W_ReadCompressedLump PROC				; COMDAT

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 628  : #ifdef ZWAD
; 629  : 	char *compressed, *data;
; 630  : 	const lumpinfo_t *l = &wadfiles[wad]->lumpinfo[lump];

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  0000d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00014	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  00018	6b c2 1c	 imul	 eax, edx, 28
  0001b	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0001e	89 45 f4	 mov	 DWORD PTR _l$[ebp], eax

; 631  : 	size_t retval;
; 632  : 
; 633  : 	compressed = Z_Malloc(l->disksize, PU_STATIC, NULL);

  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 01		 push	 1
  00027	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _Z_MallocAlign
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	89 45 fc	 mov	 DWORD PTR _compressed$[ebp], eax

; 634  : 	data = Z_Malloc(l->size, PU_STATIC, NULL);

  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	6a 01		 push	 1
  0003f	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  00042	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 _Z_MallocAlign
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	89 45 f8	 mov	 DWORD PTR _data$[ebp], eax

; 635  : 	if (W_RawReadLumpHeader(wad, lump, compressed, l->disksize, 0)
; 636  : 		< l->disksize)

  00051	6a 00		 push	 0
  00053	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	51		 push	 ecx
  0005a	8b 55 fc	 mov	 edx, DWORD PTR _compressed$[ebp]
  0005d	52		 push	 edx
  0005e	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  00062	50		 push	 eax
  00063	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 _W_RawReadLumpHeader
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
  00070	8b 55 f4	 mov	 edx, DWORD PTR _l$[ebp]
  00073	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00076	73 17		 jae	 SHORT $LN2@W_ReadComp

; 637  : 	{
; 638  : 		I_Error("wad %d, lump %d: cannot read compressed data",

  00078	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0007c	50		 push	 eax
  0007d	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00081	51		 push	 ecx
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@JDJOJKOM@wad?5?$CFd?0?5lump?5?$CFd?3?5cannot?5read?5co@
  00087	e8 00 00 00 00	 call	 _I_Error
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@W_ReadComp:

; 639  : 			wad, lump);
; 640  : 	}
; 641  : 
; 642  : 	retval = lzf_decompress(compressed, l->disksize, data, l->size);

  0008f	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  00092	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00095	51		 push	 ecx
  00096	8b 55 f8	 mov	 edx, DWORD PTR _data$[ebp]
  00099	52		 push	 edx
  0009a	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a0	51		 push	 ecx
  000a1	8b 55 fc	 mov	 edx, DWORD PTR _compressed$[ebp]
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 _lzf_decompress
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	89 45 f0	 mov	 DWORD PTR _retval$[ebp], eax

; 643  : #ifndef AVOID_ERRNO
; 644  : 	if (retval == 0 && errno == E2BIG)

  000b0	83 7d f0 00	 cmp	 DWORD PTR _retval$[ebp], 0
  000b4	75 2a		 jne	 SHORT $LN3@W_ReadComp
  000b6	e8 00 00 00 00	 call	 __errno
  000bb	83 38 07	 cmp	 DWORD PTR [eax], 7
  000be	75 20		 jne	 SHORT $LN3@W_ReadComp

; 645  : 	{
; 646  : 		I_Error("wad %d, lump %d: compressed data too big "

  000c0	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  000c3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c6	51		 push	 ecx
  000c7	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  000cb	52		 push	 edx
  000cc	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@FHCDJEAD@wad?5?$CFd?0?5lump?5?$CFd?3?5compressed?5dat@
  000d6	e8 00 00 00 00	 call	 _I_Error
  000db	83 c4 10	 add	 esp, 16			; 00000010H

; 647  : 			"(bigger than %"PRIdS")", wad, lump, l->size);
; 648  : 	}

  000de	eb 56		 jmp	 SHORT $LN7@W_ReadComp
$LN3@W_ReadComp:

; 649  : 	else if (retval == 0 && errno == EINVAL)

  000e0	83 7d f0 00	 cmp	 DWORD PTR _retval$[ebp], 0
  000e4	75 23		 jne	 SHORT $LN5@W_ReadComp
  000e6	e8 00 00 00 00	 call	 __errno
  000eb	83 38 16	 cmp	 DWORD PTR [eax], 22	; 00000016H
  000ee	75 19		 jne	 SHORT $LN5@W_ReadComp

; 650  : 		I_Error("wad %d, lump %d: invalid compressed data", wad, lump);

  000f0	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  000f4	50		 push	 eax
  000f5	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  000f9	51		 push	 ecx
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NCMJIGPL@wad?5?$CFd?0?5lump?5?$CFd?3?5invalid?5compre@
  000ff	e8 00 00 00 00	 call	 _I_Error
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	eb 2d		 jmp	 SHORT $LN7@W_ReadComp
$LN5@W_ReadComp:

; 651  : 	else
; 652  : #endif
; 653  : 	if (retval != l->size)

  00109	8b 45 f4	 mov	 eax, DWORD PTR _l$[ebp]
  0010c	8b 4d f0	 mov	 ecx, DWORD PTR _retval$[ebp]
  0010f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00112	74 22		 je	 SHORT $LN7@W_ReadComp

; 654  : 	{
; 655  : 		I_Error("wad %d, lump %d: decompressed to wrong number of "

  00114	8b 45 f0	 mov	 eax, DWORD PTR _retval$[ebp]
  00117	50		 push	 eax
  00118	8b 4d f4	 mov	 ecx, DWORD PTR _l$[ebp]
  0011b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0011e	52		 push	 edx
  0011f	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  00123	50		 push	 eax
  00124	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00128	51		 push	 ecx
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@NBHIELLO@wad?5?$CFd?0?5lump?5?$CFd?3?5decompressed?5t@
  0012e	e8 00 00 00 00	 call	 _I_Error
  00133	83 c4 14	 add	 esp, 20			; 00000014H
$LN7@W_ReadComp:

; 656  : 			"bytes (expected %"PRIdS", got %"PRIdS")", wad, lump,
; 657  : 			l->size, retval);
; 658  : 	}
; 659  : 	Z_Free(compressed);

  00136	8b 45 fc	 mov	 eax, DWORD PTR _compressed$[ebp]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _Z_Free
  0013f	83 c4 04	 add	 esp, 4

; 660  : 	return data;

  00142	8b 45 f8	 mov	 eax, DWORD PTR _data$[ebp]

; 661  : #else
; 662  : 	(void)wad;
; 663  : 	(void)lump;
; 664  : 	//I_Error("ZWAD files not supported on this platform.");
; 665  : 	return NULL;
; 666  : #endif
; 667  : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
_W_ReadCompressedLump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_RawReadLumpHeader
_TEXT	SEGMENT
_handle$ = -12						; size = 4
_l$ = -8						; size = 4
_bytesread$ = -4					; size = 4
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_dest$ = 16						; size = 4
_size$ = 20						; size = 4
_offset$ = 24						; size = 4
_W_RawReadLumpHeader PROC				; COMDAT

; 609  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 610  : 	size_t bytesread;
; 611  : 	lumpinfo_t *l;
; 612  : 	FILE *handle;
; 613  : 
; 614  : 	l = wadfiles[wad]->lumpinfo + lump;

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  0000d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00014	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  00018	6b c2 1c	 imul	 eax, edx, 28
  0001b	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0001e	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 615  : 
; 616  : 	handle = wadfiles[wad]->handle;

  00021	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  00025	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0002c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002f	89 55 f4	 mov	 DWORD PTR _handle$[ebp], edx

; 617  : 
; 618  : 	fseek(handle, (long)(l->position + offset), SEEK_SET);

  00032	6a 00		 push	 0
  00034	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	03 4d 18	 add	 ecx, DWORD PTR _offset$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 f4	 mov	 edx, DWORD PTR _handle$[ebp]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _fseek
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  : 	bytesread = fread(dest, 1, size, handle);

  00049	8b 45 f4	 mov	 eax, DWORD PTR _handle$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00050	51		 push	 ecx
  00051	6a 01		 push	 1
  00053	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _fread
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	89 45 fc	 mov	 DWORD PTR _bytesread$[ebp], eax

; 620  : 
; 621  : 	return bytesread;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _bytesread$[ebp]

; 622  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_W_RawReadLumpHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _TestValidLump
_TEXT	SEGMENT
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_TestValidLump PROC					; COMDAT

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 480  : 	I_Assert(wad < MAX_WADFILES);
; 481  : 	if (!wadfiles[wad]) // make sure the wad file exists

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  0000d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _wadfiles[eax*4], 0
  00015	75 04		 jne	 SHORT $LN2@TestValidL

; 482  : 		return false;

  00017	33 c0		 xor	 eax, eax
  00019	eb 20		 jmp	 SHORT $LN1@TestValidL
$LN2@TestValidL:

; 483  : 
; 484  : 	I_Assert(lump < wadfiles[wad]->numlumps);
; 485  : 	if (lump >= wadfiles[wad]->numlumps) // make sure the lump exists

  0001b	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0001f	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00023	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _wadfiles[ecx*4]
  0002a	0f b7 4a 10	 movzx	 ecx, WORD PTR [edx+16]
  0002e	3b c1		 cmp	 eax, ecx
  00030	7c 04		 jl	 SHORT $LN3@TestValidL

; 486  : 		return false;

  00032	33 c0		 xor	 eax, eax
  00034	eb 05		 jmp	 SHORT $LN1@TestValidL
$LN3@TestValidL:

; 487  : 
; 488  : 	return true;

  00036	b8 01 00 00 00	 mov	 eax, 1
$LN1@TestValidL:

; 489  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_TestValidLump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_MakeFileMD5
_TEXT	SEGMENT
tv130 = -84						; size = 8
tv95 = -76						; size = 4
_t$1 = -8						; size = 4
_fhandle$ = -4						; size = 4
_filename$ = 8						; size = 4
_resblock$ = 12						; size = 4
_W_MakeFileMD5 PROC					; COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 162  : #ifdef NOMD5
; 163  : 	(void)filename;
; 164  : 	memset(resblock, 0x00, 16);
; 165  : #else
; 166  : 	FILE *fhandle;
; 167  : 
; 168  : 	if ((fhandle = fopen(filename, "rb")) != NULL)

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000e	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _fopen
  00017	83 c4 08	 add	 esp, 8
  0001a	89 45 fc	 mov	 DWORD PTR _fhandle$[ebp], eax
  0001d	83 7d fc 00	 cmp	 DWORD PTR _fhandle$[ebp], 0
  00021	0f 84 a5 00 00
	00		 je	 $LN2@W_MakeFile

; 169  : 	{
; 170  : 		tic_t t = I_GetTime();

  00027	e8 00 00 00 00	 call	 _I_GetTime
  0002c	89 45 f8	 mov	 DWORD PTR _t$1[ebp], eax

; 171  : #ifndef _arch_dreamcast
; 172  : 		if (devparm)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00036	74 11		 je	 SHORT $LN3@W_MakeFile

; 173  : #endif
; 174  : 		CONS_Printf("Making MD5 for %s\n",filename);

  00038	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JDKIKHCM@Making?5MD5?5for?5?$CFs?6@
  00041	e8 00 00 00 00	 call	 _CONS_Printf
  00046	83 c4 08	 add	 esp, 8
$LN3@W_MakeFile:

; 175  : 		if (md5_stream(fhandle, resblock) == 1)

  00049	8b 45 0c	 mov	 eax, DWORD PTR _resblock$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _fhandle$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _md5_stream
  00056	83 c4 08	 add	 esp, 8
  00059	83 f8 01	 cmp	 eax, 1
  0005c	75 07		 jne	 SHORT $LN4@W_MakeFile

; 176  : 			return 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	eb 6c		 jmp	 SHORT $LN1@W_MakeFile
$LN4@W_MakeFile:

; 177  : #ifndef _arch_dreamcast
; 178  : 		if (devparm)

  00065	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  0006c	74 4e		 je	 SHORT $LN5@W_MakeFile

; 179  : #endif
; 180  : 		CONS_Printf("MD5 calc for %s took %f seconds\n",

  0006e	e8 00 00 00 00	 call	 _I_GetTime
  00073	2b 45 f8	 sub	 eax, DWORD PTR _t$1[ebp]
  00076	89 45 b4	 mov	 DWORD PTR tv95[ebp], eax
  00079	f2 0f 2a 45 b4	 cvtsi2sd xmm0, DWORD PTR tv95[ebp]
  0007e	8b 45 b4	 mov	 eax, DWORD PTR tv95[ebp]
  00081	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00084	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0008d	f2 0f 11 45 ac	 movsd	 QWORD PTR tv130[ebp], xmm0
  00092	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv130[ebp]
  00097	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@420c0000
  0009f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000a3	83 ec 08	 sub	 esp, 8
  000a6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  000ae	51		 push	 ecx
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GGKDMGKM@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5seconds@
  000b4	e8 00 00 00 00	 call	 _CONS_Printf
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@W_MakeFile:

; 181  : 			filename, (float)(I_GetTime() - t)/TICRATE);
; 182  : 		fclose(fhandle);

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _fhandle$[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _fclose
  000c5	83 c4 04	 add	 esp, 4

; 183  : 		return 0;

  000c8	33 c0		 xor	 eax, eax
  000ca	eb 05		 jmp	 SHORT $LN1@W_MakeFile
$LN2@W_MakeFile:

; 184  : 	}
; 185  : #endif
; 186  : 	return 1;

  000cc	b8 01 00 00 00	 mov	 eax, 1
$LN1@W_MakeFile:

; 187  : }

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_W_MakeFileMD5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_LoadDehackedLumps
_TEXT	SEGMENT
_lump$ = -4						; size = 2
_wadnum$ = 8						; size = 2
_W_LoadDehackedLumps PROC				; COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 128  : 	UINT16 lump;
; 129  : 
; 130  : 	// Check for MAINCFG
; 131  : 	for (lump = 0;lump != INT16_MAX;lump++)

  00009	33 c0		 xor	 eax, eax
  0000b	66 89 45 fc	 mov	 WORD PTR _lump$[ebp], ax
  0000f	eb 0c		 jmp	 SHORT $LN4@W_LoadDeha
$LN2@W_LoadDeha:
  00011	66 8b 45 fc	 mov	 ax, WORD PTR _lump$[ebp]
  00015	66 83 c0 01	 add	 ax, 1
  00019	66 89 45 fc	 mov	 WORD PTR _lump$[ebp], ax
$LN4@W_LoadDeha:
  0001d	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  00021	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00026	74 57		 je	 SHORT $LN3@W_LoadDeha

; 132  : 	{
; 133  : 		lump = W_CheckNumForNamePwad("MAINCFG", wadnum, lump);

  00028	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  0002c	50		 push	 eax
  0002d	0f b7 4d 08	 movzx	 ecx, WORD PTR _wadnum$[ebp]
  00031	51		 push	 ecx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_07EHCDOLII@MAINCFG@
  00037	e8 00 00 00 00	 call	 _W_CheckNumForNamePwad
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	66 89 45 fc	 mov	 WORD PTR _lump$[ebp], ax

; 134  : 		if (lump == INT16_MAX)

  00043	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  00047	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0004c	75 02		 jne	 SHORT $LN8@W_LoadDeha

; 135  : 			break;

  0004e	eb 2f		 jmp	 SHORT $LN3@W_LoadDeha
$LN8@W_LoadDeha:

; 136  : 		CONS_Printf("Loading main config from %s\n", wadfiles[wadnum]->filename);

  00050	0f b7 45 08	 movzx	 eax, WORD PTR _wadnum$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IDPJCMBM@Loading?5main?5config?5from?5?$CFs?6@
  00063	e8 00 00 00 00	 call	 _CONS_Printf
  00068	83 c4 08	 add	 esp, 8

; 137  : 		DEH_LoadDehackedLumpPwad(wadnum, lump);

  0006b	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  0006f	50		 push	 eax
  00070	0f b7 4d 08	 movzx	 ecx, WORD PTR _wadnum$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _DEH_LoadDehackedLumpPwad
  0007a	83 c4 08	 add	 esp, 8

; 138  : 	}

  0007d	eb 92		 jmp	 SHORT $LN2@W_LoadDeha
$LN3@W_LoadDeha:

; 139  : 
; 140  : 	// Check for OBJCTCFG
; 141  : 	for (lump = 0;lump < INT16_MAX;lump++)

  0007f	33 c0		 xor	 eax, eax
  00081	66 89 45 fc	 mov	 WORD PTR _lump$[ebp], ax
  00085	eb 0c		 jmp	 SHORT $LN7@W_LoadDeha
$LN5@W_LoadDeha:
  00087	66 8b 45 fc	 mov	 ax, WORD PTR _lump$[ebp]
  0008b	66 83 c0 01	 add	 ax, 1
  0008f	66 89 45 fc	 mov	 WORD PTR _lump$[ebp], ax
$LN7@W_LoadDeha:
  00093	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  00097	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0009c	7d 57		 jge	 SHORT $LN6@W_LoadDeha

; 142  : 	{
; 143  : 		lump = W_CheckNumForNamePwad("OBJCTCFG", wadnum, lump);

  0009e	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  000a2	50		 push	 eax
  000a3	0f b7 4d 08	 movzx	 ecx, WORD PTR _wadnum$[ebp]
  000a7	51		 push	 ecx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_08JFMPAGIK@OBJCTCFG@
  000ad	e8 00 00 00 00	 call	 _W_CheckNumForNamePwad
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	66 89 45 fc	 mov	 WORD PTR _lump$[ebp], ax

; 144  : 		if (lump == INT16_MAX)

  000b9	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  000bd	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  000c2	75 02		 jne	 SHORT $LN9@W_LoadDeha

; 145  : 			break;

  000c4	eb 2f		 jmp	 SHORT $LN6@W_LoadDeha
$LN9@W_LoadDeha:

; 146  : 		CONS_Printf("Loading object config from %s\n", wadfiles[wadnum]->filename);

  000c6	0f b7 45 08	 movzx	 eax, WORD PTR _wadnum$[ebp]
  000ca	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	52		 push	 edx
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JGDGLBLD@Loading?5object?5config?5from?5?$CFs?6@
  000d9	e8 00 00 00 00	 call	 _CONS_Printf
  000de	83 c4 08	 add	 esp, 8

; 147  : 		DEH_LoadDehackedLumpPwad(wadnum, lump);

  000e1	0f b7 45 fc	 movzx	 eax, WORD PTR _lump$[ebp]
  000e5	50		 push	 eax
  000e6	0f b7 4d 08	 movzx	 ecx, WORD PTR _wadnum$[ebp]
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 _DEH_LoadDehackedLumpPwad
  000f0	83 c4 08	 add	 esp, 8

; 148  : 	}

  000f3	eb 92		 jmp	 SHORT $LN5@W_LoadDeha
$LN6@W_LoadDeha:

; 149  : }

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
_W_LoadDehackedLumps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_VerifyNMUSlumps
_TEXT	SEGMENT
_NMUSlist$ = -76					; size = 72
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_W_VerifyNMUSlumps PROC					; COMDAT

; 1063 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1064 : 	// MIDI, MOD/S3M/IT/XM/OGG/MP3/WAV, WAVE SFX
; 1065 : 	// ENDOOM text and palette lumps
; 1066 : 	lumpchecklist_t NMUSlist[] =

  00016	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp], OFFSET ??_C@_02EKAOECGK@D_@
  0001d	c7 45 b8 02 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+4], 2
  00024	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+8], OFFSET ??_C@_02EGFLKNIL@O_@
  0002b	c7 45 c0 02 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+12], 2
  00032	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+16], OFFSET ??_C@_02OGLLANGG@DS@
  00039	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+20], 2
  00040	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+24], OFFSET ??_C@_06BBOHFMBE@ENDOOM@
  00047	c7 45 d0 06 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+28], 6
  0004e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+32], OFFSET ??_C@_07FLMOFAHC@PLAYPAL@
  00055	c7 45 d8 07 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+36], 7
  0005c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+40], OFFSET ??_C@_08JDLPAFIO@COLORMAP@
  00063	c7 45 e0 08 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+44], 8
  0006a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+48], OFFSET ??_C@_03DICCMILP@PAL@
  00071	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+52], 3
  00078	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+56], OFFSET ??_C@_03GLENJCNM@CLM@
  0007f	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+60], 3
  00086	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+64], 0
  0008d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _NMUSlist$[ebp+68], 0

; 1067 : 	{
; 1068 : 		{"D_", 2},
; 1069 : 		{"O_", 2},
; 1070 : 		{"DS", 2},
; 1071 : 		{"ENDOOM", 6},
; 1072 : 		{"PLAYPAL", 7},
; 1073 : 		{"COLORMAP", 8},
; 1074 : 		{"PAL", 3},
; 1075 : 		{"CLM", 3},
; 1076 : 		{NULL, 0},
; 1077 : 	};
; 1078 : 	return W_VerifyFile(filename, NMUSlist, false);

  00094	6a 00		 push	 0
  00096	8d 45 b4	 lea	 eax, DWORD PTR _NMUSlist$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 _W_VerifyFile
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1079 : }

  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	33 cd		 xor	 ecx, ebp
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_W_VerifyNMUSlumps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_VerifyFileMD5
_TEXT	SEGMENT
_actualmd5text$1 = -68					; size = 33
_c$2 = -32						; size = 4
_n$3 = -28						; size = 4
_ix$ = -24						; size = 4
_realmd5$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_wadfilenum$ = 8					; size = 2
_matchmd5$ = 12						; size = 4
_W_VerifyFileMD5 PROC					; COMDAT

; 919  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 920  : #ifdef NOMD5
; 921  : 	(void)wadfilenum;
; 922  : 	(void)matchmd5;
; 923  : #else
; 924  : 	UINT8 realmd5[MD5_LEN];
; 925  : 	INT32 ix;
; 926  : 
; 927  : 	I_Assert(strlen(matchmd5) == 2*MD5_LEN);
; 928  : 	I_Assert(wadfilenum < numwadfiles);
; 929  : 	// Convert an md5 string like "7d355827fa8f981482246d6c95f9bd48"
; 930  : 	// into a real md5.
; 931  : 	for (ix = 0; ix < 2*MD5_LEN; ix++)

  00016	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ix$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@W_VerifyFi
$LN2@W_VerifyFi:
  0001f	8b 45 e8	 mov	 eax, DWORD PTR _ix$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 e8	 mov	 DWORD PTR _ix$[ebp], eax
$LN4@W_VerifyFi:
  00028	83 7d e8 20	 cmp	 DWORD PTR _ix$[ebp], 32	; 00000020H
  0002c	7d 7f		 jge	 SHORT $LN3@W_VerifyFi

; 932  : 	{
; 933  : 		INT32 n, c = matchmd5[ix];

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _matchmd5$[ebp]
  00031	03 45 e8	 add	 eax, DWORD PTR _ix$[ebp]
  00034	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00037	89 4d e0	 mov	 DWORD PTR _c$2[ebp], ecx

; 934  : 		if (isdigit(c))

  0003a	8b 45 e0	 mov	 eax, DWORD PTR _c$2[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _isdigit
  00043	83 c4 04	 add	 esp, 4
  00046	85 c0		 test	 eax, eax
  00048	74 0b		 je	 SHORT $LN5@W_VerifyFi

; 935  : 			n = c - '0';

  0004a	8b 45 e0	 mov	 eax, DWORD PTR _c$2[ebp]
  0004d	83 e8 30	 sub	 eax, 48			; 00000030H
  00050	89 45 e4	 mov	 DWORD PTR _n$3[ebp], eax
  00053	eb 24		 jmp	 SHORT $LN8@W_VerifyFi
$LN5@W_VerifyFi:

; 936  : 		else
; 937  : 		{
; 938  : 			I_Assert(isxdigit(c));
; 939  : 			if (isupper(c)) n = c - 'A' + 10;

  00055	8b 45 e0	 mov	 eax, DWORD PTR _c$2[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _isupper
  0005e	83 c4 04	 add	 esp, 4
  00061	85 c0		 test	 eax, eax
  00063	74 0b		 je	 SHORT $LN7@W_VerifyFi
  00065	8b 45 e0	 mov	 eax, DWORD PTR _c$2[ebp]
  00068	83 e8 37	 sub	 eax, 55			; 00000037H
  0006b	89 45 e4	 mov	 DWORD PTR _n$3[ebp], eax
  0006e	eb 09		 jmp	 SHORT $LN8@W_VerifyFi
$LN7@W_VerifyFi:

; 940  : 			else n = c - 'a' + 10;

  00070	8b 45 e0	 mov	 eax, DWORD PTR _c$2[ebp]
  00073	83 e8 57	 sub	 eax, 87			; 00000057H
  00076	89 45 e4	 mov	 DWORD PTR _n$3[ebp], eax
$LN8@W_VerifyFi:

; 941  : 		}
; 942  : 		if (ix & 1) realmd5[ix>>1] = (UINT8)(realmd5[ix>>1]+n);

  00079	8b 45 e8	 mov	 eax, DWORD PTR _ix$[ebp]
  0007c	83 e0 01	 and	 eax, 1
  0007f	74 18		 je	 SHORT $LN9@W_VerifyFi
  00081	8b 45 e8	 mov	 eax, DWORD PTR _ix$[ebp]
  00084	d1 f8		 sar	 eax, 1
  00086	0f b6 4c 05 ec	 movzx	 ecx, BYTE PTR _realmd5$[ebp+eax]
  0008b	03 4d e4	 add	 ecx, DWORD PTR _n$3[ebp]
  0008e	8b 55 e8	 mov	 edx, DWORD PTR _ix$[ebp]
  00091	d1 fa		 sar	 edx, 1
  00093	88 4c 15 ec	 mov	 BYTE PTR _realmd5$[ebp+edx], cl
  00097	eb 0f		 jmp	 SHORT $LN10@W_VerifyFi
$LN9@W_VerifyFi:

; 943  : 		else realmd5[ix>>1] = (UINT8)(n<<4);

  00099	8b 45 e4	 mov	 eax, DWORD PTR _n$3[ebp]
  0009c	c1 e0 04	 shl	 eax, 4
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _ix$[ebp]
  000a2	d1 f9		 sar	 ecx, 1
  000a4	88 44 0d ec	 mov	 BYTE PTR _realmd5$[ebp+ecx], al
$LN10@W_VerifyFi:

; 944  : 	}

  000a8	e9 72 ff ff ff	 jmp	 $LN2@W_VerifyFi
$LN3@W_VerifyFi:

; 945  : 
; 946  : 	if (memcmp(realmd5, wadfiles[wadfilenum]->md5sum, 16))

  000ad	6a 10		 push	 16			; 00000010H
  000af	0f b7 45 08	 movzx	 eax, WORD PTR _wadfilenum$[ebp]
  000b3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  000ba	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000bd	51		 push	 ecx
  000be	8d 55 ec	 lea	 edx, DWORD PTR _realmd5$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _memcmp
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	85 c0		 test	 eax, eax
  000cc	74 3e		 je	 SHORT $LN11@W_VerifyFi

; 947  : 	{
; 948  : 		char actualmd5text[2*MD5_LEN+1];
; 949  : 		PrintMD5String(wadfiles[wadfilenum]->md5sum, actualmd5text);

  000ce	8d 45 bc	 lea	 eax, DWORD PTR _actualmd5text$1[ebp]
  000d1	50		 push	 eax
  000d2	0f b7 4d 08	 movzx	 ecx, WORD PTR _wadfilenum$[ebp]
  000d6	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _wadfiles[ecx*4]
  000dd	83 c2 1c	 add	 edx, 28			; 0000001cH
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _PrintMD5String
  000e6	83 c4 08	 add	 esp, 8

; 950  : #ifdef _DEBUG
; 951  : 		CONS_Printf

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _matchmd5$[ebp]
  000ec	50		 push	 eax
  000ed	8d 4d bc	 lea	 ecx, DWORD PTR _actualmd5text$1[ebp]
  000f0	51		 push	 ecx
  000f1	0f b7 55 08	 movzx	 edx, WORD PTR _wadfilenum$[ebp]
  000f5	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _wadfiles[edx*4]
  000fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fe	51		 push	 ecx
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@PCCKNMNG@File?5is?5corrupt?5or?5has?5been?5mod@
  00104	e8 00 00 00 00	 call	 _CONS_Printf
  00109	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@W_VerifyFi:

; 952  : #else
; 953  : 		I_Error
; 954  : #endif
; 955  : 			("File is corrupt or has been modified: %s "
; 956  : 			"(found md5: %s, wanted: %s)\n",
; 957  : 			wadfiles[wadfilenum]->filename,
; 958  : 			actualmd5text, matchmd5);
; 959  : 	}
; 960  : #endif
; 961  : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00112	33 cd		 xor	 ecx, ebp
  00114	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
_W_VerifyFileMD5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CachePatchNum
_TEXT	SEGMENT
_lumpnum$ = 8						; size = 4
_tag$ = 12						; size = 4
_W_CachePatchNum PROC					; COMDAT

; 871  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 872  : 	return W_CachePatchNumPwad(WADFILENUM(lumpnum),LUMPNUM(lumpnum),tag);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _tag$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _lumpnum$[ebp]
  00010	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _lumpnum$[ebp]
  0001a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 _W_CachePatchNumPwad
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 873  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_W_CachePatchNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CachePatchName
_TEXT	SEGMENT
_num$ = -4						; size = 4
_name$ = 8						; size = 4
_tag$ = 12						; size = 4
_W_CachePatchName PROC					; COMDAT

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 879  : 	lumpnum_t num;
; 880  : 
; 881  : 	num = W_CheckNumForName(name);

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _W_CheckNumForName
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR _num$[ebp], eax

; 882  : 
; 883  : 	if (num == LUMPERROR)

  00018	83 7d fc ff	 cmp	 DWORD PTR _num$[ebp], -1
  0001c	75 1c		 jne	 SHORT $LN2@W_CachePat

; 884  : 		return W_CachePatchNum(W_GetNumForName("BRDR_MM"), tag);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _tag$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_07DNMOPJGG@BRDR_MM@
  00027	e8 00 00 00 00	 call	 _W_GetNumForName
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _W_CachePatchNum
  00035	83 c4 08	 add	 esp, 8
  00038	eb 10		 jmp	 SHORT $LN1@W_CachePat
$LN2@W_CachePat:

; 885  : 	return W_CachePatchNum(num, tag);

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _tag$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _num$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _W_CachePatchNum
  00047	83 c4 08	 add	 esp, 8
$LN1@W_CachePat:

; 886  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_W_CachePatchName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CacheLumpName
_TEXT	SEGMENT
_name$ = 8						; size = 4
_tag$ = 12						; size = 4
_W_CacheLumpName PROC					; COMDAT

; 816  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 817  : 	return W_CacheLumpNum(W_GetNumForName(name), tag);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _tag$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _W_GetNumForName
  00016	83 c4 04	 add	 esp, 4
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _W_CacheLumpNum
  0001f	83 c4 08	 add	 esp, 8

; 818  : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_W_CacheLumpName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_IsLumpCached
_TEXT	SEGMENT
_lumpnum$ = 8						; size = 4
_ptr$ = 12						; size = 4
_W_IsLumpCached PROC					; COMDAT

; 808  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 809  : 	return W_IsLumpCachedPWAD(WADFILENUM(lumpnum),LUMPNUM(lumpnum), ptr);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _ptr$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _lumpnum$[ebp]
  00010	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _lumpnum$[ebp]
  0001a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 _W_IsLumpCachedPWAD
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 810  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_W_IsLumpCached ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CacheLumpNumForce
_TEXT	SEGMENT
_ptr$ = -12						; size = 4
_lump$ = -8						; size = 2
_wad$ = -4						; size = 2
_lumpnum$ = 8						; size = 4
_tag$ = 12						; size = 4
_W_CacheLumpNumForce PROC				; COMDAT

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  : 	UINT16 wad, lump;
; 766  : 	void *ptr;
; 767  : 
; 768  : 	wad = WADFILENUM(lumpnum);

  00009	8b 45 08	 mov	 eax, DWORD PTR _lumpnum$[ebp]
  0000c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0000f	66 89 45 fc	 mov	 WORD PTR _wad$[ebp], ax

; 769  : 	lump = LUMPNUM(lumpnum);

  00013	8b 45 08	 mov	 eax, DWORD PTR _lumpnum$[ebp]
  00016	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001b	66 89 45 f8	 mov	 WORD PTR _lump$[ebp], ax

; 770  : 
; 771  : 	if (!TestValidLump(wad,lump))

  0001f	0f b7 45 f8	 movzx	 eax, WORD PTR _lump$[ebp]
  00023	50		 push	 eax
  00024	0f b7 4d fc	 movzx	 ecx, WORD PTR _wad$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _TestValidLump
  0002e	83 c4 08	 add	 esp, 8
  00031	85 c0		 test	 eax, eax
  00033	75 04		 jne	 SHORT $LN2@W_CacheLum

; 772  : 		return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 43		 jmp	 SHORT $LN1@W_CacheLum
$LN2@W_CacheLum:

; 773  : 
; 774  : 	ptr = Z_Malloc(W_LumpLengthPwad(wad, lump), tag, NULL);

  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	8b 45 0c	 mov	 eax, DWORD PTR _tag$[ebp]
  00040	50		 push	 eax
  00041	0f b7 4d f8	 movzx	 ecx, WORD PTR _lump$[ebp]
  00045	51		 push	 ecx
  00046	0f b7 55 fc	 movzx	 edx, WORD PTR _wad$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 _W_LumpLengthPwad
  00050	83 c4 08	 add	 esp, 8
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _Z_MallocAlign
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	89 45 f4	 mov	 DWORD PTR _ptr$[ebp], eax

; 775  : 	W_ReadLumpHeaderPwad(wad, lump, ptr, 0, 0);  // read the lump in full

  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	8b 45 f4	 mov	 eax, DWORD PTR _ptr$[ebp]
  00066	50		 push	 eax
  00067	0f b7 4d f8	 movzx	 ecx, WORD PTR _lump$[ebp]
  0006b	51		 push	 ecx
  0006c	0f b7 55 fc	 movzx	 edx, WORD PTR _wad$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 _W_ReadLumpHeaderPwad
  00076	83 c4 14	 add	 esp, 20			; 00000014H

; 776  : 
; 777  : 	return ptr;

  00079	8b 45 f4	 mov	 eax, DWORD PTR _ptr$[ebp]
$LN1@W_CacheLum:

; 778  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_W_CacheLumpNumForce ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CacheLumpNum
_TEXT	SEGMENT
_lumpnum$ = 8						; size = 4
_tag$ = 12						; size = 4
_W_CacheLumpNum PROC					; COMDAT

; 753  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 754  : 
; 755  : 	return W_CacheLumpNumPwad(WADFILENUM(lumpnum),LUMPNUM(lumpnum),tag);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _tag$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _lumpnum$[ebp]
  00010	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _lumpnum$[ebp]
  0001a	c1 ea 10	 shr	 edx, 16			; 00000010H
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 _W_CacheLumpNumPwad
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 756  : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_W_CacheLumpNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CacheLumpNumPwad
_TEXT	SEGMENT
_ptr$1 = -8						; size = 4
_lumpcache$ = -4					; size = 4
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_tag$ = 16						; size = 4
_W_CacheLumpNumPwad PROC				; COMDAT

; 734  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 735  : 	lumpcache_t *lumpcache;
; 736  : 
; 737  : 	if (!TestValidLump(wad,lump))

  00009	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0000d	50		 push	 eax
  0000e	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _TestValidLump
  00018	83 c4 08	 add	 esp, 8
  0001b	85 c0		 test	 eax, eax
  0001d	75 07		 jne	 SHORT $LN2@W_CacheLum

; 738  : 		return NULL;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 8a 00 00 00	 jmp	 $LN1@W_CacheLum
$LN2@W_CacheLum:

; 739  : 
; 740  : 	lumpcache = wadfiles[wad]->lumpcache;

  00026	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  0002a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00031	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00034	89 55 fc	 mov	 DWORD PTR _lumpcache$[ebp], edx

; 741  : 	if (!lumpcache[lump])

  00037	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _lumpcache$[ebp]
  0003e	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00042	75 4b		 jne	 SHORT $LN3@W_CacheLum

; 742  : 	{
; 743  : 		void *ptr = Z_Malloc(W_LumpLengthPwad(wad, lump), tag, &lumpcache[lump]);

  00044	6a 00		 push	 0
  00046	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _lumpcache$[ebp]
  0004d	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00050	52		 push	 edx
  00051	8b 45 10	 mov	 eax, DWORD PTR _tag$[ebp]
  00054	50		 push	 eax
  00055	0f b7 4d 0c	 movzx	 ecx, WORD PTR _lump$[ebp]
  00059	51		 push	 ecx
  0005a	0f b7 55 08	 movzx	 edx, WORD PTR _wad$[ebp]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 _W_LumpLengthPwad
  00064	83 c4 08	 add	 esp, 8
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _Z_MallocAlign
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	89 45 f8	 mov	 DWORD PTR _ptr$1[ebp], eax

; 744  : 		W_ReadLumpHeaderPwad(wad, lump, ptr, 0, 0);  // read the lump in full

  00073	6a 00		 push	 0
  00075	6a 00		 push	 0
  00077	8b 45 f8	 mov	 eax, DWORD PTR _ptr$1[ebp]
  0007a	50		 push	 eax
  0007b	0f b7 4d 0c	 movzx	 ecx, WORD PTR _lump$[ebp]
  0007f	51		 push	 ecx
  00080	0f b7 55 08	 movzx	 edx, WORD PTR _wad$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _W_ReadLumpHeaderPwad
  0008a	83 c4 14	 add	 esp, 20			; 00000014H

; 745  : 	}

  0008d	eb 17		 jmp	 SHORT $LN4@W_CacheLum
$LN3@W_CacheLum:

; 746  : 	else
; 747  : 		Z_ChangeTag(lumpcache[lump], tag);

  0008f	8b 45 10	 mov	 eax, DWORD PTR _tag$[ebp]
  00092	50		 push	 eax
  00093	0f b7 4d 0c	 movzx	 ecx, WORD PTR _lump$[ebp]
  00097	8b 55 fc	 mov	 edx, DWORD PTR _lumpcache$[ebp]
  0009a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _Z_ChangeTag2
  000a3	83 c4 08	 add	 esp, 8
$LN4@W_CacheLum:

; 748  : 
; 749  : 	return lumpcache[lump];

  000a6	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _lumpcache$[ebp]
  000ad	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
$LN1@W_CacheLum:

; 750  : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_W_CacheLumpNumPwad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_ReadLump
_TEXT	SEGMENT
_lumpnum$ = 8						; size = 4
_dest$ = 12						; size = 4
_W_ReadLump PROC					; COMDAT

; 721  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 722  : 	W_ReadLumpHeaderPwad(WADFILENUM(lumpnum),LUMPNUM(lumpnum),dest,0,0);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _lumpnum$[ebp]
  00014	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _lumpnum$[ebp]
  0001e	c1 ea 10	 shr	 edx, 16			; 00000010H
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 _W_ReadLumpHeaderPwad
  00027	83 c4 14	 add	 esp, 20			; 00000014H

; 723  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_W_ReadLump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_ReadLumpPwad
_TEXT	SEGMENT
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_dest$ = 16						; size = 4
_W_ReadLumpPwad PROC					; COMDAT

; 726  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 727  : 	W_ReadLumpHeaderPwad(wad, lump, dest, 0, 0);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00010	50		 push	 eax
  00011	0f b7 4d 0c	 movzx	 ecx, WORD PTR _lump$[ebp]
  00015	51		 push	 ecx
  00016	0f b7 55 08	 movzx	 edx, WORD PTR _wad$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _W_ReadLumpHeaderPwad
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 728  : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_W_ReadLumpPwad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_ReadLumpHeader
_TEXT	SEGMENT
_lumpnum$ = 8						; size = 4
_dest$ = 12						; size = 4
_size$ = 16						; size = 4
_offset$ = 20						; size = 4
_W_ReadLumpHeader PROC					; COMDAT

; 709  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 710  : 	return W_ReadLumpHeaderPwad(WADFILENUM(lumpnum), LUMPNUM(lumpnum), dest, size, offset);

  00009	8b 45 14	 mov	 eax, DWORD PTR _offset$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _lumpnum$[ebp]
  00018	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _lumpnum$[ebp]
  00021	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _W_ReadLumpHeaderPwad
  0002a	83 c4 14	 add	 esp, 20			; 00000014H

; 711  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_W_ReadLumpHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_ReadLumpHeaderPwad
_TEXT	SEGMENT
_data$1 = -8						; size = 4
_lumpsize$ = -4						; size = 4
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_dest$ = 16						; size = 4
_size$ = 20						; size = 4
_offset$ = 24						; size = 4
_W_ReadLumpHeaderPwad PROC				; COMDAT

; 680  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 681  : 	size_t lumpsize;
; 682  : 
; 683  : 	if (!TestValidLump(wad,lump))

  00009	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0000d	50		 push	 eax
  0000e	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _TestValidLump
  00018	83 c4 08	 add	 esp, 8
  0001b	85 c0		 test	 eax, eax
  0001d	75 07		 jne	 SHORT $LN2@W_ReadLump

; 684  : 		return 0;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 cf 00 00 00	 jmp	 $LN8@W_ReadLump
$LN2@W_ReadLump:

; 685  : 
; 686  : 	lumpsize = wadfiles[wad]->lumpinfo[lump].size;

  00026	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  0002a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00031	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  00035	6b c2 1c	 imul	 eax, edx, 28
  00038	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003b	8b 54 01 14	 mov	 edx, DWORD PTR [ecx+eax+20]
  0003f	89 55 fc	 mov	 DWORD PTR _lumpsize$[ebp], edx

; 687  : 	// empty resource (usually markers like S_START, F_END ..)
; 688  : 	if (!lumpsize || lumpsize<offset)

  00042	83 7d fc 00	 cmp	 DWORD PTR _lumpsize$[ebp], 0
  00046	74 08		 je	 SHORT $LN4@W_ReadLump
  00048	8b 45 fc	 mov	 eax, DWORD PTR _lumpsize$[ebp]
  0004b	3b 45 18	 cmp	 eax, DWORD PTR _offset$[ebp]
  0004e	73 07		 jae	 SHORT $LN3@W_ReadLump
$LN4@W_ReadLump:

; 689  : 		return 0;

  00050	33 c0		 xor	 eax, eax
  00052	e9 9e 00 00 00	 jmp	 $LN8@W_ReadLump
$LN3@W_ReadLump:

; 690  : 
; 691  : 	// zero size means read all the lump
; 692  : 	if (!size || size+offset > lumpsize)

  00057	83 7d 14 00	 cmp	 DWORD PTR _size$[ebp], 0
  0005b	74 0b		 je	 SHORT $LN6@W_ReadLump
  0005d	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00060	03 45 18	 add	 eax, DWORD PTR _offset$[ebp]
  00063	3b 45 fc	 cmp	 eax, DWORD PTR _lumpsize$[ebp]
  00066	76 09		 jbe	 SHORT $LN5@W_ReadLump
$LN6@W_ReadLump:

; 693  : 		size = lumpsize - offset;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _lumpsize$[ebp]
  0006b	2b 45 18	 sub	 eax, DWORD PTR _offset$[ebp]
  0006e	89 45 14	 mov	 DWORD PTR _size$[ebp], eax
$LN5@W_ReadLump:

; 694  : 
; 695  : 	if (wadfiles[wad]->lumpinfo[lump].compressed)

  00071	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  00075	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0007c	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  00080	6b c2 1c	 imul	 eax, edx, 28
  00083	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00086	83 7c 01 18 00	 cmp	 DWORD PTR [ecx+eax+24], 0
  0008b	74 4a		 je	 SHORT $LN7@W_ReadLump

; 696  : 	{
; 697  : 		UINT8 *data;
; 698  : 		data = W_ReadCompressedLump(wad, lump);

  0008d	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  00091	50		 push	 eax
  00092	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _W_ReadCompressedLump
  0009c	83 c4 08	 add	 esp, 8
  0009f	89 45 f8	 mov	 DWORD PTR _data$1[ebp], eax

; 699  : 		if (!data) return 0;

  000a2	83 7d f8 00	 cmp	 DWORD PTR _data$1[ebp], 0
  000a6	75 04		 jne	 SHORT $LN9@W_ReadLump
  000a8	33 c0		 xor	 eax, eax
  000aa	eb 49		 jmp	 SHORT $LN8@W_ReadLump
$LN9@W_ReadLump:

; 700  : 		M_Memcpy(dest, data+offset, size);

  000ac	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _data$1[ebp]
  000b3	03 4d 18	 add	 ecx, DWORD PTR _offset$[ebp]
  000b6	51		 push	 ecx
  000b7	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000ba	52		 push	 edx
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  : 		Z_Free(data);

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _data$1[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _Z_Free
  000cd	83 c4 04	 add	 esp, 4

; 702  : 		return size;

  000d0	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  000d3	eb 20		 jmp	 SHORT $LN8@W_ReadLump

; 703  : 	}

  000d5	eb 1e		 jmp	 SHORT $LN8@W_ReadLump
$LN7@W_ReadLump:

; 704  : 	else
; 705  : 		return W_RawReadLumpHeader(wad, lump, dest, size, offset);

  000d7	8b 45 18	 mov	 eax, DWORD PTR _offset$[ebp]
  000da	50		 push	 eax
  000db	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  000de	51		 push	 ecx
  000df	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000e2	52		 push	 edx
  000e3	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  000e7	50		 push	 eax
  000e8	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _W_RawReadLumpHeader
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@W_ReadLump:

; 706  : }

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
_W_ReadLumpHeaderPwad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_LumpLength
_TEXT	SEGMENT
_lumpnum$ = 8						; size = 4
_W_LumpLength PROC					; COMDAT

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 595  : 	return W_LumpLengthPwad(WADFILENUM(lumpnum),LUMPNUM(lumpnum));

  00009	8b 45 08	 mov	 eax, DWORD PTR _lumpnum$[ebp]
  0000c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _lumpnum$[ebp]
  00015	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _W_LumpLengthPwad
  0001e	83 c4 08	 add	 esp, 8

; 596  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_W_LumpLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_LumpLengthPwad
_TEXT	SEGMENT
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_W_LumpLengthPwad PROC					; COMDAT

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 583  : 	if (!TestValidLump(wad, lump))

  00009	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0000d	50		 push	 eax
  0000e	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _TestValidLump
  00018	83 c4 08	 add	 esp, 8
  0001b	85 c0		 test	 eax, eax
  0001d	75 04		 jne	 SHORT $LN2@W_LumpLeng

; 584  : 		return 0;

  0001f	33 c0		 xor	 eax, eax
  00021	eb 19		 jmp	 SHORT $LN1@W_LumpLeng
$LN2@W_LumpLeng:

; 585  : 	return wadfiles[wad]->lumpinfo[lump].size;

  00023	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  00027	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0002e	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  00032	6b c2 1c	 imul	 eax, edx, 28
  00035	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00038	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
$LN1@W_LumpLeng:

; 586  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_W_LumpLengthPwad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_GetNumForName
_TEXT	SEGMENT
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_W_GetNumForName PROC					; COMDAT

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 571  : 	lumpnum_t i;
; 572  : 
; 573  : 	i = W_CheckNumForName(name);

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _W_CheckNumForName
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 574  : 
; 575  : 	if (i == LUMPERROR)

  00018	83 7d fc ff	 cmp	 DWORD PTR _i$[ebp], -1
  0001c	75 11		 jne	 SHORT $LN2@W_GetNumFo

; 576  : 		I_Error("W_GetNumForName: %s not found!\n", name);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PCKMDCJK@W_GetNumForName?3?5?$CFs?5not?5found?$CB?6@
  00027	e8 00 00 00 00	 call	 _I_Error
  0002c	83 c4 08	 add	 esp, 8
$LN2@W_GetNumFo:

; 577  : 
; 578  : 	return i;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]

; 579  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_W_GetNumForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CheckNumForName
_TEXT	SEGMENT
_check$ = -8						; size = 4
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_W_CheckNumForName PROC					; COMDAT

; 549  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 550  : 	INT32 i;
; 551  : 	lumpnum_t check = INT16_MAX;

  00009	c7 45 f8 ff 7f
	00 00		 mov	 DWORD PTR _check$[ebp], 32767 ; 00007fffH

; 552  : 
; 553  : 	// scan wad files backwards so patch lump files take precedence
; 554  : 	for (i = numwadfiles - 1; i >= 0; i--)

  00010	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  00017	83 e8 01	 sub	 eax, 1
  0001a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  0001d	eb 09		 jmp	 SHORT $LN4@W_CheckNum
$LN2@W_CheckNum:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00022	83 e8 01	 sub	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@W_CheckNum:
  00028	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  0002c	7c 26		 jl	 SHORT $LN3@W_CheckNum

; 555  : 	{
; 556  : 		check = W_CheckNumForNamePwad(name,(UINT16)i,0);

  0002e	6a 00		 push	 0
  00030	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _W_CheckNumForNamePwad
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	0f b7 d0	 movzx	 edx, ax
  00044	89 55 f8	 mov	 DWORD PTR _check$[ebp], edx

; 557  : 		if (check != INT16_MAX)

  00047	81 7d f8 ff 7f
	00 00		 cmp	 DWORD PTR _check$[ebp], 32767 ; 00007fffH
  0004e	74 02		 je	 SHORT $LN5@W_CheckNum

; 558  : 			break; //found it

  00050	eb 02		 jmp	 SHORT $LN3@W_CheckNum
$LN5@W_CheckNum:

; 559  : 	}

  00052	eb cb		 jmp	 SHORT $LN2@W_CheckNum
$LN3@W_CheckNum:

; 560  : 	if (check == INT16_MAX) return LUMPERROR;

  00054	81 7d f8 ff 7f
	00 00		 cmp	 DWORD PTR _check$[ebp], 32767 ; 00007fffH
  0005b	75 07		 jne	 SHORT $LN6@W_CheckNum
  0005d	83 c8 ff	 or	 eax, -1
  00060	eb 0b		 jmp	 SHORT $LN7@W_CheckNum
  00062	eb 09		 jmp	 SHORT $LN7@W_CheckNum
$LN6@W_CheckNum:

; 561  : 	else return (i<<16)+check;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00067	c1 e0 10	 shl	 eax, 16			; 00000010H
  0006a	03 45 f8	 add	 eax, DWORD PTR _check$[ebp]
$LN7@W_CheckNum:

; 562  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_W_CheckNumForName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CheckNumForNamePwad
_TEXT	SEGMENT
$T1 = -76						; size = 4
_lump_p$2 = -8						; size = 4
_i$ = -4						; size = 2
_name$ = 8						; size = 4
_wad$ = 12						; size = 2
_startlump$ = 16					; size = 2
_W_CheckNumForNamePwad PROC				; COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 514  : 	UINT16 i;
; 515  : 	static char uname[9];
; 516  : 
; 517  : 	memset(uname, 0x00, sizeof uname);

  00009	6a 09		 push	 9
  0000b	6a 00		 push	 0
  0000d	68 00 00 00 00	 push	 OFFSET ?uname@?1??W_CheckNumForNamePwad@@9@9
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 518  : 	strncpy(uname, name, 8);

  0001a	6a 08		 push	 8
  0001c	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ?uname@?1??W_CheckNumForNamePwad@@9@9
  00025	e8 00 00 00 00	 call	 _strncpy
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 519  : 	uname[8] = 0;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	c1 e0 03	 shl	 eax, 3
  00035	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00038	83 7d b4 09	 cmp	 DWORD PTR $T1[ebp], 9
  0003c	73 02		 jae	 SHORT $LN9@W_CheckNum
  0003e	eb 06		 jmp	 SHORT $LN10@W_CheckNum
$LN9@W_CheckNum:
  00040	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00045	90		 npad	 1
$LN10@W_CheckNum:
  00046	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00049	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?uname@?1??W_CheckNumForNamePwad@@9@9[ecx], 0

; 520  : 	strupr(uname);

  00050	68 00 00 00 00	 push	 OFFSET ?uname@?1??W_CheckNumForNamePwad@@9@9
  00055	e8 00 00 00 00	 call	 _strupr
  0005a	83 c4 04	 add	 esp, 4

; 521  : 
; 522  : 	if (!TestValidLump(wad,0))

  0005d	6a 00		 push	 0
  0005f	0f b7 45 0c	 movzx	 eax, WORD PTR _wad$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _TestValidLump
  00069	83 c4 08	 add	 esp, 8
  0006c	85 c0		 test	 eax, eax
  0006e	75 0a		 jne	 SHORT $LN5@W_CheckNum

; 523  : 		return INT16_MAX;

  00070	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00075	e9 8c 00 00 00	 jmp	 $LN1@W_CheckNum
$LN5@W_CheckNum:

; 524  : 
; 525  : 	//
; 526  : 	// scan forward
; 527  : 	// start at 'startlump', useful parameter when there are multiple
; 528  : 	//                       resources with the same name
; 529  : 	//
; 530  : 	if (startlump < wadfiles[wad]->numlumps)

  0007a	0f b7 45 10	 movzx	 eax, WORD PTR _startlump$[ebp]
  0007e	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wad$[ebp]
  00082	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _wadfiles[ecx*4]
  00089	0f b7 4a 10	 movzx	 ecx, WORD PTR [edx+16]
  0008d	3b c1		 cmp	 eax, ecx
  0008f	7d 70		 jge	 SHORT $LN3@W_CheckNum

; 531  : 	{
; 532  : 		lumpinfo_t *lump_p = wadfiles[wad]->lumpinfo + startlump;

  00091	0f b7 45 0c	 movzx	 eax, WORD PTR _wad$[ebp]
  00095	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0009c	0f b7 55 10	 movzx	 edx, WORD PTR _startlump$[ebp]
  000a0	6b c2 1c	 imul	 eax, edx, 28
  000a3	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000a6	89 45 f8	 mov	 DWORD PTR _lump_p$2[ebp], eax

; 533  : 		for (i = startlump; i < wadfiles[wad]->numlumps; i++, lump_p++)

  000a9	66 8b 45 10	 mov	 ax, WORD PTR _startlump$[ebp]
  000ad	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  000b1	eb 15		 jmp	 SHORT $LN4@W_CheckNum
$LN2@W_CheckNum:
  000b3	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  000b7	66 83 c0 01	 add	 ax, 1
  000bb	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  000bf	8b 4d f8	 mov	 ecx, DWORD PTR _lump_p$2[ebp]
  000c2	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000c5	89 4d f8	 mov	 DWORD PTR _lump_p$2[ebp], ecx
$LN4@W_CheckNum:
  000c8	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  000cc	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wad$[ebp]
  000d0	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _wadfiles[ecx*4]
  000d7	0f b7 4a 10	 movzx	 ecx, WORD PTR [edx+16]
  000db	3b c1		 cmp	 eax, ecx
  000dd	7d 22		 jge	 SHORT $LN3@W_CheckNum

; 534  : 		{
; 535  : 			if (memcmp(lump_p->name,uname,8) == 0)

  000df	6a 08		 push	 8
  000e1	68 00 00 00 00	 push	 OFFSET ?uname@?1??W_CheckNumForNamePwad@@9@9
  000e6	8b 45 f8	 mov	 eax, DWORD PTR _lump_p$2[ebp]
  000e9	83 c0 08	 add	 eax, 8
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _memcmp
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	85 c0		 test	 eax, eax
  000f7	75 06		 jne	 SHORT $LN7@W_CheckNum

; 536  : 				return i;

  000f9	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  000fd	eb 07		 jmp	 SHORT $LN1@W_CheckNum
$LN7@W_CheckNum:

; 537  : 		}

  000ff	eb b2		 jmp	 SHORT $LN2@W_CheckNum
$LN3@W_CheckNum:

; 538  : 	}
; 539  : 
; 540  : 	// not found.
; 541  : 	return INT16_MAX;

  00101	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
$LN1@W_CheckNum:

; 542  : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
_W_CheckNumForNamePwad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CheckNameForNum
_TEXT	SEGMENT
_lumpnum$ = 8						; size = 4
_W_CheckNameForNum PROC					; COMDAT

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 502  : 	return W_CheckNameForNumPwad(WADFILENUM(lumpnum),LUMPNUM(lumpnum));

  00009	8b 45 08	 mov	 eax, DWORD PTR _lumpnum$[ebp]
  0000c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _lumpnum$[ebp]
  00015	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _W_CheckNameForNumPwad
  0001e	83 c4 08	 add	 esp, 8

; 503  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_W_CheckNameForNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_CheckNameForNumPwad
_TEXT	SEGMENT
_wad$ = 8						; size = 2
_lump$ = 12						; size = 2
_W_CheckNameForNumPwad PROC				; COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 494  : 	if (lump >= wadfiles[wad]->numlumps || !TestValidLump(wad, 0))

  00009	0f b7 45 0c	 movzx	 eax, WORD PTR _lump$[ebp]
  0000d	0f b7 4d 08	 movzx	 ecx, WORD PTR _wad$[ebp]
  00011	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _wadfiles[ecx*4]
  00018	0f b7 4a 10	 movzx	 ecx, WORD PTR [edx+16]
  0001c	3b c1		 cmp	 eax, ecx
  0001e	7d 13		 jge	 SHORT $LN3@W_CheckNam
  00020	6a 00		 push	 0
  00022	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _TestValidLump
  0002c	83 c4 08	 add	 esp, 8
  0002f	85 c0		 test	 eax, eax
  00031	75 04		 jne	 SHORT $LN2@W_CheckNam
$LN3@W_CheckNam:

; 495  : 		return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 19		 jmp	 SHORT $LN1@W_CheckNam
$LN2@W_CheckNam:

; 496  : 
; 497  : 	return wadfiles[wad]->lumpinfo[lump].name;

  00037	0f b7 45 08	 movzx	 eax, WORD PTR _wad$[ebp]
  0003b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00042	0f b7 55 0c	 movzx	 edx, WORD PTR _lump$[ebp]
  00046	6b c2 1c	 imul	 eax, edx, 28
  00049	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004c	8d 44 01 08	 lea	 eax, DWORD PTR [ecx+eax+8]
$LN1@W_CheckNam:

; 498  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_W_CheckNameForNumPwad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_InitMultipleFiles
_TEXT	SEGMENT
tv70 = -72						; size = 4
_rc$ = -4						; size = 4
_filenames$ = 8						; size = 4
_W_InitMultipleFiles PROC				; COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 457  : 	INT32 rc = 1;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 1

; 458  : 
; 459  : 	// open all the files, load headers, and count lumps
; 460  : 	numwadfiles = 0;

  00010	33 c0		 xor	 eax, eax
  00012	66 a3 00 00 00
	00		 mov	 WORD PTR _numwadfiles, ax

; 461  : 
; 462  : 	// will be realloced as lumps are added
; 463  : 	for (; *filenames; filenames++)

  00018	eb 09		 jmp	 SHORT $LN4@W_InitMult
$LN2@W_InitMult:
  0001a	8b 45 08	 mov	 eax, DWORD PTR _filenames$[ebp]
  0001d	83 c0 04	 add	 eax, 4
  00020	89 45 08	 mov	 DWORD PTR _filenames$[ebp], eax
$LN4@W_InitMult:
  00023	8b 45 08	 mov	 eax, DWORD PTR _filenames$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	74 34		 je	 SHORT $LN3@W_InitMult

; 464  : 	{
; 465  : 		//CONS_Printf("Loading %s\n", *filenames);
; 466  : 		rc &= (W_LoadWadFile(*filenames) != INT16_MAX) ? 1 : 0;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _filenames$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _W_LoadWadFile
  00036	83 c4 04	 add	 esp, 4
  00039	0f b7 d0	 movzx	 edx, ax
  0003c	81 fa ff 7f 00
	00		 cmp	 edx, 32767		; 00007fffH
  00042	74 09		 je	 SHORT $LN7@W_InitMult
  00044	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  0004b	eb 07		 jmp	 SHORT $LN8@W_InitMult
$LN7@W_InitMult:
  0004d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN8@W_InitMult:
  00054	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]
  00057	23 45 b8	 and	 eax, DWORD PTR tv70[ebp]
  0005a	89 45 fc	 mov	 DWORD PTR _rc$[ebp], eax

; 467  : 	}

  0005d	eb bb		 jmp	 SHORT $LN2@W_InitMult
$LN3@W_InitMult:

; 468  : 
; 469  : 	if (!numwadfiles)

  0005f	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  00066	85 c0		 test	 eax, eax
  00068	75 0d		 jne	 SHORT $LN5@W_InitMult

; 470  : 		I_Error("W_InitMultipleFiles: no files found");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DLHIMDKB@W_InitMultipleFiles?3?5no?5files?5f@
  0006f	e8 00 00 00 00	 call	 _I_Error
  00074	83 c4 04	 add	 esp, 4
$LN5@W_InitMult:

; 471  : 
; 472  : 	return rc;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _rc$[ebp]

; 473  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_W_InitMultipleFiles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_UnloadWadFile
_TEXT	SEGMENT
_lumpcache$ = -12					; size = 4
_delwad$ = -8						; size = 4
_i$ = -4						; size = 4
_num$ = 8						; size = 2
_W_UnloadWadFile PROC					; COMDAT

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 412  : 	INT32 i;
; 413  : 	wadfile_t *delwad = wadfiles[num];

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _num$[ebp]
  0000d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00014	89 4d f8	 mov	 DWORD PTR _delwad$[ebp], ecx

; 414  : 	lumpcache_t *lumpcache;
; 415  : 	if (num == 0)

  00017	0f b7 45 08	 movzx	 eax, WORD PTR _num$[ebp]
  0001b	85 c0		 test	 eax, eax
  0001d	75 25		 jne	 SHORT $LN5@W_UnloadWa

; 416  : 	{
; 417  : 		CONS_Printf("You can't remove the IWAD %s!\n", wadfiles[0]->filename);

  0001f	b8 04 00 00 00	 mov	 eax, 4
  00024	6b c8 00	 imul	 ecx, eax, 0
  00027	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _wadfiles[ecx]
  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NLBKFCHO@You?5can?8t?5remove?5the?5IWAD?5?$CFs?$CB?6@
  00035	e8 00 00 00 00	 call	 _CONS_Printf
  0003a	83 c4 08	 add	 esp, 8

; 418  : 		return;

  0003d	e9 f7 00 00 00	 jmp	 $LN1@W_UnloadWa

; 419  : 	}

  00042	eb 1b		 jmp	 SHORT $LN6@W_UnloadWa
$LN5@W_UnloadWa:

; 420  : 	else
; 421  : 		CONS_Printf("Removing WAD %s...\n", wadfiles[num]->filename);

  00044	0f b7 45 08	 movzx	 eax, WORD PTR _num$[ebp]
  00048	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	52		 push	 edx
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DDHBAPDF@Removing?5WAD?5?$CFs?4?4?4?6@
  00057	e8 00 00 00 00	 call	 _CONS_Printf
  0005c	83 c4 08	 add	 esp, 8
$LN6@W_UnloadWa:

; 422  : 
; 423  : 	DEH_UnloadDehackedWad(num);

  0005f	0f b7 45 08	 movzx	 eax, WORD PTR _num$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _DEH_UnloadDehackedWad
  00069	83 c4 04	 add	 esp, 4

; 424  : 	wadfiles[num] = NULL;

  0006c	0f b7 45 08	 movzx	 eax, WORD PTR _num$[ebp]
  00070	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _wadfiles[eax*4], 0

; 425  : 	lumpcache = delwad->lumpcache;

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _delwad$[ebp]
  0007e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00081	89 4d f4	 mov	 DWORD PTR _lumpcache$[ebp], ecx

; 426  : 	numwadfiles--;

  00084	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _numwadfiles
  0008a	66 83 e8 01	 sub	 ax, 1
  0008e	66 a3 00 00 00
	00		 mov	 WORD PTR _numwadfiles, ax

; 427  : #ifdef HWRENDER
; 428  : 	if (rendermode != render_soft && rendermode != render_none)

  00094	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _rendermode, 1
  0009b	74 0f		 je	 SHORT $LN7@W_UnloadWa
  0009d	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _rendermode, 3
  000a4	74 06		 je	 SHORT $LN7@W_UnloadWa

; 429  : 		HWR_FreeTextureCache();

  000a6	e8 00 00 00 00	 call	 _HWR_FreeTextureCache
  000ab	90		 npad	 1
$LN7@W_UnloadWa:

; 430  : 	Z_Free(delwad->hwrcache);

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _delwad$[ebp]
  000af	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _Z_Free
  000b8	83 c4 04	 add	 esp, 4

; 431  : #endif
; 432  : 	if (*lumpcache)

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _lumpcache$[ebp]
  000be	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c1	74 34		 je	 SHORT $LN3@W_UnloadWa

; 433  : 	{
; 434  : 		for (i = 0;i < delwad->numlumps;i++)

  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ca	eb 09		 jmp	 SHORT $LN4@W_UnloadWa
$LN2@W_UnloadWa:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000cf	83 c0 01	 add	 eax, 1
  000d2	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@W_UnloadWa:
  000d5	8b 45 f8	 mov	 eax, DWORD PTR _delwad$[ebp]
  000d8	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  000dc	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  000df	7d 16		 jge	 SHORT $LN3@W_UnloadWa

; 435  : 			Z_ChangeTag(lumpcache[i], PU_PURGELEVEL);

  000e1	6a 64		 push	 100			; 00000064H
  000e3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR _lumpcache$[ebp]
  000e9	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 _Z_ChangeTag2
  000f2	83 c4 08	 add	 esp, 8
  000f5	eb d5		 jmp	 SHORT $LN2@W_UnloadWa
$LN3@W_UnloadWa:

; 436  : 	}
; 437  : 	Z_Free(lumpcache);

  000f7	8b 45 f4	 mov	 eax, DWORD PTR _lumpcache$[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _Z_Free
  00100	83 c4 04	 add	 esp, 4

; 438  : 	fclose(delwad->handle);

  00103	8b 45 f8	 mov	 eax, DWORD PTR _delwad$[ebp]
  00106	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _fclose
  0010f	83 c4 04	 add	 esp, 4

; 439  : 	Z_Free(delwad->filename);

  00112	8b 45 f8	 mov	 eax, DWORD PTR _delwad$[ebp]
  00115	8b 08		 mov	 ecx, DWORD PTR [eax]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 _Z_Free
  0011d	83 c4 04	 add	 esp, 4

; 440  : 	Z_Free(delwad);

  00120	8b 45 f8	 mov	 eax, DWORD PTR _delwad$[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _Z_Free
  00129	83 c4 04	 add	 esp, 4

; 441  : 	CONS_Printf(" done unloading WAD\n");

  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KDOEMCKC@?5done?5unloading?5WAD?6@
  00131	e8 00 00 00 00	 call	 _CONS_Printf
  00136	83 c4 04	 add	 esp, 4
$LN1@W_UnloadWa:

; 442  : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
_W_UnloadWadFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_LoadWadFile
_TEXT	SEGMENT
$T1 = -136						; size = 4
_realsize$2 = -68					; size = 4
_fileinfov$3 = -64					; size = 4
_fileinfo$4 = -60					; size = 4
_lump_p$5 = -56						; size = 4
_header$6 = -52						; size = 12
_dummycheck$ = -40					; size = 4
_packetsize$ = -36					; size = 4
_compressed$ = -32					; size = 4
_grPatch$ = -28						; size = 4
_i$ = -24						; size = 4
_numlumps$ = -20					; size = 4
_wadfile$ = -16						; size = 4
_lumpinfo$ = -12					; size = 4
_handle$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_W_LoadWadFile PROC					; COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 202  : 	FILE *handle;
; 203  : 	lumpinfo_t *lumpinfo;
; 204  : 	wadfile_t *wadfile;
; 205  : 	UINT32 numlumps;
; 206  : 	size_t i;
; 207  : #ifdef HWRENDER
; 208  : 	GLPatch_t *grPatch;
; 209  : #endif
; 210  : 	INT32 compressed = 0;

  00016	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _compressed$[ebp], 0

; 211  : 	size_t packetsize = 0;

  0001d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _packetsize$[ebp], 0

; 212  : 	serverinfo_pak *dummycheck = NULL;

  00024	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _dummycheck$[ebp], 0

; 213  : 
; 214  : 	// Shut the compiler up.
; 215  : 	(void)dummycheck;
; 216  : 
; 217  : 	//CONS_Printf("Loading %s\n", filename);
; 218  : 	//
; 219  : 	// check if limit of active wadfiles
; 220  : 	//
; 221  : 	if (numwadfiles >= MAX_WADFILES)

  0002b	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  00032	83 f8 30	 cmp	 eax, 48			; 00000030H
  00035	7c 17		 jl	 SHORT $LN11@W_LoadWadF

; 222  : 	{
; 223  : 		CONS_Printf("Maximum wad files reached\n");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KJPBHEDA@Maximum?5wad?5files?5reached?6@
  0003c	e8 00 00 00 00	 call	 _CONS_Printf
  00041	83 c4 04	 add	 esp, 4

; 224  : 		return INT16_MAX;

  00044	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00049	e9 fd 05 00 00	 jmp	 $LN1@W_LoadWadF
$LN11@W_LoadWadF:

; 225  : 	}
; 226  : 
; 227  : 	strncpy(filenamebuf, filename, MAX_WADPATH);

  0004e	68 80 00 00 00	 push	 128			; 00000080H
  00053	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET _filenamebuf
  0005c	e8 00 00 00 00	 call	 _strncpy
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH

; 228  : 	filenamebuf[MAX_WADPATH - 1] = '\0';

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	6b c8 7f	 imul	 ecx, eax, 127
  0006c	89 8d 78 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00072	81 bd 78 ff ff
	ff 80 00 00 00	 cmp	 DWORD PTR $T1[ebp], 128	; 00000080H
  0007c	73 02		 jae	 SHORT $LN33@W_LoadWadF
  0007e	eb 06		 jmp	 SHORT $LN34@W_LoadWadF
$LN33@W_LoadWadF:
  00080	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00085	90		 npad	 1
$LN34@W_LoadWadF:
  00086	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0008c	c6 82 00 00 00
	00 00		 mov	 BYTE PTR _filenamebuf[edx], 0

; 229  : 	filename = filenamebuf;

  00093	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp], OFFSET _filenamebuf

; 230  : 
; 231  : 	// open wad file
; 232  : 	if ((handle = fopen(filename, "rb")) == NULL)

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0009f	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _fopen
  000a8	83 c4 08	 add	 esp, 8
  000ab	89 45 f8	 mov	 DWORD PTR _handle$[ebp], eax
  000ae	83 7d f8 00	 cmp	 DWORD PTR _handle$[ebp], 0
  000b2	75 74		 jne	 SHORT $LN14@W_LoadWadF

; 233  : 	{
; 234  : 		// If we failed to load the file with the path as specified by
; 235  : 		// the user, strip the directories and search for the file.
; 236  : 		nameonly(filenamebuf);

  000b4	68 00 00 00 00	 push	 OFFSET _filenamebuf
  000b9	e8 00 00 00 00	 call	 _nameonly
  000be	83 c4 04	 add	 esp, 4

; 237  : 
; 238  : 		// If findfile finds the file, the full path will be returned
; 239  : 		// in filenamebuf == filename.
; 240  : 		if (findfile(filenamebuf, NULL, true))

  000c1	6a 01		 push	 1
  000c3	6a 00		 push	 0
  000c5	68 00 00 00 00	 push	 OFFSET _filenamebuf
  000ca	e8 00 00 00 00	 call	 _findfile
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	85 c0		 test	 eax, eax
  000d4	74 37		 je	 SHORT $LN13@W_LoadWadF

; 241  : 		{
; 242  : 			if ((handle = fopen(filename, "rb")) == NULL)

  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  000db	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _fopen
  000e4	83 c4 08	 add	 esp, 8
  000e7	89 45 f8	 mov	 DWORD PTR _handle$[ebp], eax
  000ea	83 7d f8 00	 cmp	 DWORD PTR _handle$[ebp], 0
  000ee	75 1b		 jne	 SHORT $LN15@W_LoadWadF

; 243  : 			{
; 244  : 				CONS_Printf("Can't open %s\n", filename);

  000f0	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EFONNJHN@Can?8t?5open?5?$CFs?6@
  000f9	e8 00 00 00 00	 call	 _CONS_Printf
  000fe	83 c4 08	 add	 esp, 8

; 245  : 				return INT16_MAX;

  00101	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00106	e9 40 05 00 00	 jmp	 $LN1@W_LoadWadF
$LN15@W_LoadWadF:

; 246  : 			}
; 247  : 		}

  0010b	eb 1b		 jmp	 SHORT $LN14@W_LoadWadF
$LN13@W_LoadWadF:

; 248  : 		else
; 249  : 		{
; 250  : 			CONS_Printf("File %s not found.\n", filename);

  0010d	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00110	50		 push	 eax
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BELJCLHI@File?5?$CFs?5not?5found?4?6@
  00116	e8 00 00 00 00	 call	 _CONS_Printf
  0011b	83 c4 08	 add	 esp, 8

; 251  : 			return INT16_MAX;

  0011e	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00123	e9 23 05 00 00	 jmp	 $LN1@W_LoadWadF
$LN14@W_LoadWadF:

; 252  : 		}
; 253  : 	}
; 254  : 
; 255  : 	// Check if wad files will overflow fileneededbuffer. Only the filename part
; 256  : 	// is send in the packet; cf.
; 257  : 	for (i = 0; i < numwadfiles; i++)

  00128	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0012f	eb 09		 jmp	 SHORT $LN4@W_LoadWadF
$LN2@W_LoadWadF:
  00131	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00134	83 c0 01	 add	 eax, 1
  00137	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@W_LoadWadF:
  0013a	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  00141	39 45 e8	 cmp	 DWORD PTR _i$[ebp], eax
  00144	73 26		 jae	 SHORT $LN3@W_LoadWadF

; 258  : 	{
; 259  : 		packetsize += nameonlylength(wadfiles[i]->filename);

  00146	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00149	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00150	8b 11		 mov	 edx, DWORD PTR [ecx]
  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 _nameonlylength
  00158	83 c4 04	 add	 esp, 4
  0015b	03 45 dc	 add	 eax, DWORD PTR _packetsize$[ebp]
  0015e	89 45 dc	 mov	 DWORD PTR _packetsize$[ebp], eax

; 260  : 		packetsize += 22; // MD5, etc.

  00161	8b 45 dc	 mov	 eax, DWORD PTR _packetsize$[ebp]
  00164	83 c0 16	 add	 eax, 22			; 00000016H
  00167	89 45 dc	 mov	 DWORD PTR _packetsize$[ebp], eax

; 261  : 	}

  0016a	eb c5		 jmp	 SHORT $LN2@W_LoadWadF
$LN3@W_LoadWadF:

; 262  : 
; 263  : 	packetsize += nameonlylength(filename);

  0016c	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 _nameonlylength
  00175	83 c4 04	 add	 esp, 4
  00178	03 45 dc	 add	 eax, DWORD PTR _packetsize$[ebp]
  0017b	89 45 dc	 mov	 DWORD PTR _packetsize$[ebp], eax

; 264  : 	packetsize += 22;

  0017e	8b 45 dc	 mov	 eax, DWORD PTR _packetsize$[ebp]
  00181	83 c0 16	 add	 eax, 22			; 00000016H
  00184	89 45 dc	 mov	 DWORD PTR _packetsize$[ebp], eax

; 265  : 
; 266  : 	if (packetsize > sizeof(dummycheck->fileneeded))

  00187	81 7d dc 93 03
	00 00		 cmp	 DWORD PTR _packetsize$[ebp], 915 ; 00000393H
  0018e	76 29		 jbe	 SHORT $LN16@W_LoadWadF

; 267  : 	{
; 268  : 		CONS_Printf("Maximum wad files reached\n");

  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KJPBHEDA@Maximum?5wad?5files?5reached?6@
  00195	e8 00 00 00 00	 call	 _CONS_Printf
  0019a	83 c4 04	 add	 esp, 4

; 269  : 		if (handle)

  0019d	83 7d f8 00	 cmp	 DWORD PTR _handle$[ebp], 0
  001a1	74 0c		 je	 SHORT $LN17@W_LoadWadF

; 270  : 			fclose(handle);

  001a3	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 _fclose
  001ac	83 c4 04	 add	 esp, 4
$LN17@W_LoadWadF:

; 271  : 		return INT16_MAX;

  001af	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  001b4	e9 92 04 00 00	 jmp	 $LN1@W_LoadWadF
$LN16@W_LoadWadF:

; 272  : 	}
; 273  : 
; 274  : 	// detect dehacked file with the "soc" extension
; 275  : 	if (!stricmp(&filename[strlen(filename) - 4], ".soc"))

  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_04DDPNCCIM@?4soc@
  001be	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 _strlen
  001c7	83 c4 04	 add	 esp, 4
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  001cd	8d 54 01 fc	 lea	 edx, DWORD PTR [ecx+eax-4]
  001d1	52		 push	 edx
  001d2	e8 00 00 00 00	 call	 _stricmp
  001d7	83 c4 08	 add	 esp, 8
  001da	85 c0		 test	 eax, eax
  001dc	75 6e		 jne	 SHORT $LN18@W_LoadWadF

; 276  : 	{
; 277  : 		// This code emulates a wadfile with one lump name "OBJCTCFG"
; 278  : 		// at position 0 and size of the whole file.
; 279  : 		// This allows soc files to be like all wads, copied by network and loaded at the console.
; 280  : 		numlumps = 1;

  001de	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _numlumps$[ebp], 1

; 281  : 		lumpinfo = Z_Calloc(sizeof (*lumpinfo), PU_STATIC, NULL);

  001e5	6a 00		 push	 0
  001e7	6a 00		 push	 0
  001e9	6a 01		 push	 1
  001eb	6a 1c		 push	 28			; 0000001cH
  001ed	e8 00 00 00 00	 call	 _Z_CallocAlign
  001f2	83 c4 10	 add	 esp, 16			; 00000010H
  001f5	89 45 f4	 mov	 DWORD PTR _lumpinfo$[ebp], eax

; 282  : 		lumpinfo->position = 0;

  001f8	8b 45 f4	 mov	 eax, DWORD PTR _lumpinfo$[ebp]
  001fb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 283  : 		fseek(handle, 0, SEEK_END);

  00201	6a 02		 push	 2
  00203	6a 00		 push	 0
  00205	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 _fseek
  0020e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 284  : 		lumpinfo->size = ftell(handle);

  00211	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 _ftell
  0021a	83 c4 04	 add	 esp, 4
  0021d	8b 4d f4	 mov	 ecx, DWORD PTR _lumpinfo$[ebp]
  00220	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 285  : 		fseek(handle, 0, SEEK_SET);

  00223	6a 00		 push	 0
  00225	6a 00		 push	 0
  00227	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 _fseek
  00230	83 c4 0c	 add	 esp, 12			; 0000000cH

; 286  : 		strcpy(lumpinfo->name, "OBJCTCFG");

  00233	68 00 00 00 00	 push	 OFFSET ??_C@_08JFMPAGIK@OBJCTCFG@
  00238	8b 45 f4	 mov	 eax, DWORD PTR _lumpinfo$[ebp]
  0023b	83 c0 08	 add	 eax, 8
  0023e	50		 push	 eax
  0023f	e8 00 00 00 00	 call	 _strcpy
  00244	83 c4 08	 add	 esp, 8

; 287  : 	}

  00247	e9 cc 02 00 00	 jmp	 $LN19@W_LoadWadF
$LN18@W_LoadWadF:

; 288  : 	else
; 289  : 	{
; 290  : 		// assume wad file
; 291  : 		wadinfo_t header;
; 292  : 		lumpinfo_t *lump_p;
; 293  : 		filelump_t *fileinfo;
; 294  : 		void *fileinfov;
; 295  : 
; 296  : 		// read the header
; 297  : 		if (fread(&header, 1, sizeof header, handle) < sizeof header)

  0024c	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  0024f	50		 push	 eax
  00250	6a 0c		 push	 12			; 0000000cH
  00252	6a 01		 push	 1
  00254	8d 4d cc	 lea	 ecx, DWORD PTR _header$6[ebp]
  00257	51		 push	 ecx
  00258	e8 00 00 00 00	 call	 _fread
  0025d	83 c4 10	 add	 esp, 16			; 00000010H
  00260	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00263	73 31		 jae	 SHORT $LN20@W_LoadWadF

; 298  : 		{
; 299  : 			CONS_Printf("Can't read wad header from %s because %s\n", filename, strerror(ferror(handle)));

  00265	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 _ferror
  0026e	83 c4 04	 add	 esp, 4
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 _strerror
  00277	83 c4 04	 add	 esp, 4
  0027a	50		 push	 eax
  0027b	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0027e	51		 push	 ecx
  0027f	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@DJJHNLAP@Can?8t?5read?5wad?5header?5from?5?$CFs?5b@
  00284	e8 00 00 00 00	 call	 _CONS_Printf
  00289	83 c4 0c	 add	 esp, 12			; 0000000cH

; 300  : 			return INT16_MAX;

  0028c	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00291	e9 b5 03 00 00	 jmp	 $LN1@W_LoadWadF
$LN20@W_LoadWadF:

; 301  : 		}
; 302  : 
; 303  : 		if (memcmp(header.identification, "ZWAD", 4) == 0)

  00296	6a 04		 push	 4
  00298	68 00 00 00 00	 push	 OFFSET ??_C@_04PIOJIFGF@ZWAD@
  0029d	8d 45 cc	 lea	 eax, DWORD PTR _header$6[ebp]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 _memcmp
  002a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a9	85 c0		 test	 eax, eax
  002ab	75 09		 jne	 SHORT $LN21@W_LoadWadF

; 304  : 			compressed = 1;

  002ad	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _compressed$[ebp], 1
  002b4	eb 60		 jmp	 SHORT $LN23@W_LoadWadF
$LN21@W_LoadWadF:

; 305  : 		else if (memcmp(header.identification, "IWAD", 4) != 0
; 306  : 			&& memcmp(header.identification, "PWAD", 4) != 0
; 307  : 			&& memcmp(header.identification, "SDLL", 4) != 0)

  002b6	6a 04		 push	 4
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_04NPKJGIDH@IWAD@
  002bd	8d 45 cc	 lea	 eax, DWORD PTR _header$6[ebp]
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 _memcmp
  002c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c9	85 c0		 test	 eax, eax
  002cb	74 49		 je	 SHORT $LN23@W_LoadWadF
  002cd	6a 04		 push	 4
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_04LCFJJNME@PWAD@
  002d4	8d 45 cc	 lea	 eax, DWORD PTR _header$6[ebp]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 _memcmp
  002dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e0	85 c0		 test	 eax, eax
  002e2	74 32		 je	 SHORT $LN23@W_LoadWadF
  002e4	6a 04		 push	 4
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_04HHFEAGDO@SDLL@
  002eb	8d 45 cc	 lea	 eax, DWORD PTR _header$6[ebp]
  002ee	50		 push	 eax
  002ef	e8 00 00 00 00	 call	 _memcmp
  002f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f7	85 c0		 test	 eax, eax
  002f9	74 1b		 je	 SHORT $LN23@W_LoadWadF

; 308  : 		{
; 309  : 			CONS_Printf("%s doesn't have IWAD or PWAD id\n", filename);

  002fb	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  002fe	50		 push	 eax
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FLMINAJN@?$CFs?5doesn?8t?5have?5IWAD?5or?5PWAD?5id@
  00304	e8 00 00 00 00	 call	 _CONS_Printf
  00309	83 c4 08	 add	 esp, 8

; 310  : 			return INT16_MAX;

  0030c	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  00311	e9 35 03 00 00	 jmp	 $LN1@W_LoadWadF
$LN23@W_LoadWadF:

; 311  : 		}
; 312  : 
; 313  : 		header.numlumps = LONG(header.numlumps);

  00316	8b 45 d0	 mov	 eax, DWORD PTR _header$6[ebp+4]
  00319	89 45 d0	 mov	 DWORD PTR _header$6[ebp+4], eax

; 314  : 		header.infotableofs = LONG(header.infotableofs);

  0031c	8b 45 d4	 mov	 eax, DWORD PTR _header$6[ebp+8]
  0031f	89 45 d4	 mov	 DWORD PTR _header$6[ebp+8], eax

; 315  : 
; 316  : 		// read wad file directory
; 317  : 		i = header.numlumps * sizeof (*fileinfo);

  00322	8b 45 d0	 mov	 eax, DWORD PTR _header$6[ebp+4]
  00325	c1 e0 04	 shl	 eax, 4
  00328	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax

; 318  : 		fileinfov = fileinfo = malloc(i);

  0032b	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 _malloc
  00334	83 c4 04	 add	 esp, 4
  00337	89 45 c4	 mov	 DWORD PTR _fileinfo$4[ebp], eax
  0033a	8b 4d c4	 mov	 ecx, DWORD PTR _fileinfo$4[ebp]
  0033d	89 4d c0	 mov	 DWORD PTR _fileinfov$3[ebp], ecx

; 319  : 		if (fseek(handle, header.infotableofs, SEEK_SET) == -1
; 320  : 			|| fread(fileinfo, 1, i, handle) < i)

  00340	6a 00		 push	 0
  00342	8b 45 d4	 mov	 eax, DWORD PTR _header$6[ebp+8]
  00345	50		 push	 eax
  00346	8b 4d f8	 mov	 ecx, DWORD PTR _handle$[ebp]
  00349	51		 push	 ecx
  0034a	e8 00 00 00 00	 call	 _fseek
  0034f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00352	83 f8 ff	 cmp	 eax, -1
  00355	74 1b		 je	 SHORT $LN25@W_LoadWadF
  00357	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  0035a	50		 push	 eax
  0035b	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0035e	51		 push	 ecx
  0035f	6a 01		 push	 1
  00361	8b 55 c4	 mov	 edx, DWORD PTR _fileinfo$4[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 _fread
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	3b 45 e8	 cmp	 eax, DWORD PTR _i$[ebp]
  00370	73 3d		 jae	 SHORT $LN24@W_LoadWadF
$LN25@W_LoadWadF:

; 321  : 		{
; 322  : 			CONS_Printf("%s wadfile directory is corrupt; maybe %s\n", filename, strerror(ferror(handle)));

  00372	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00375	50		 push	 eax
  00376	e8 00 00 00 00	 call	 _ferror
  0037b	83 c4 04	 add	 esp, 4
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 _strerror
  00384	83 c4 04	 add	 esp, 4
  00387	50		 push	 eax
  00388	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0038b	51		 push	 ecx
  0038c	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NFFJIIAK@?$CFs?5wadfile?5directory?5is?5corrupt@
  00391	e8 00 00 00 00	 call	 _CONS_Printf
  00396	83 c4 0c	 add	 esp, 12			; 0000000cH

; 323  : 			free(fileinfov);

  00399	8b 45 c0	 mov	 eax, DWORD PTR _fileinfov$3[ebp]
  0039c	50		 push	 eax
  0039d	e8 00 00 00 00	 call	 _free
  003a2	83 c4 04	 add	 esp, 4

; 324  : 			return INT16_MAX;

  003a5	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  003aa	e9 9c 02 00 00	 jmp	 $LN1@W_LoadWadF
$LN24@W_LoadWadF:

; 325  : 		}
; 326  : 
; 327  : 		numlumps = header.numlumps;

  003af	8b 45 d0	 mov	 eax, DWORD PTR _header$6[ebp+4]
  003b2	89 45 ec	 mov	 DWORD PTR _numlumps$[ebp], eax

; 328  : 
; 329  : 		// fill in lumpinfo for this wad
; 330  : 		lump_p = lumpinfo = Z_Malloc(numlumps * sizeof (*lumpinfo), PU_STATIC, NULL);

  003b5	6a 00		 push	 0
  003b7	6a 00		 push	 0
  003b9	6a 01		 push	 1
  003bb	6b 45 ec 1c	 imul	 eax, DWORD PTR _numlumps$[ebp], 28
  003bf	50		 push	 eax
  003c0	e8 00 00 00 00	 call	 _Z_MallocAlign
  003c5	83 c4 10	 add	 esp, 16			; 00000010H
  003c8	89 45 f4	 mov	 DWORD PTR _lumpinfo$[ebp], eax
  003cb	8b 4d f4	 mov	 ecx, DWORD PTR _lumpinfo$[ebp]
  003ce	89 4d c8	 mov	 DWORD PTR _lump_p$5[ebp], ecx

; 331  : 		for (i = 0; i < numlumps; i++, lump_p++, fileinfo++)

  003d1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  003d8	eb 1b		 jmp	 SHORT $LN7@W_LoadWadF
$LN5@W_LoadWadF:
  003da	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  003dd	83 c0 01	 add	 eax, 1
  003e0	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
  003e3	8b 4d c8	 mov	 ecx, DWORD PTR _lump_p$5[ebp]
  003e6	83 c1 1c	 add	 ecx, 28			; 0000001cH
  003e9	89 4d c8	 mov	 DWORD PTR _lump_p$5[ebp], ecx
  003ec	8b 55 c4	 mov	 edx, DWORD PTR _fileinfo$4[ebp]
  003ef	83 c2 10	 add	 edx, 16			; 00000010H
  003f2	89 55 c4	 mov	 DWORD PTR _fileinfo$4[ebp], edx
$LN7@W_LoadWadF:
  003f5	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  003f8	3b 45 ec	 cmp	 eax, DWORD PTR _numlumps$[ebp]
  003fb	0f 83 0b 01 00
	00		 jae	 $LN6@W_LoadWadF

; 332  : 		{
; 333  : 			lump_p->position = LONG(fileinfo->filepos);

  00401	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  00404	8b 4d c4	 mov	 ecx, DWORD PTR _fileinfo$4[ebp]
  00407	8b 11		 mov	 edx, DWORD PTR [ecx]
  00409	89 10		 mov	 DWORD PTR [eax], edx

; 334  : 			lump_p->size = lump_p->disksize = LONG(fileinfo->size);

  0040b	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  0040e	8b 4d c4	 mov	 ecx, DWORD PTR _fileinfo$4[ebp]
  00411	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00414	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00417	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  0041a	8b 4d c8	 mov	 ecx, DWORD PTR _lump_p$5[ebp]
  0041d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00420	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 335  : 			if (compressed) // wad is compressed, lump might be

  00423	83 7d e0 00	 cmp	 DWORD PTR _compressed$[ebp], 0
  00427	0f 84 b8 00 00
	00		 je	 $LN26@W_LoadWadF

; 336  : 			{
; 337  : 				UINT32 realsize = 0;

  0042d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _realsize$2[ebp], 0

; 338  : 
; 339  : 				if (fseek(handle, lump_p->position, SEEK_SET)
; 340  : 					== -1 || fread(&realsize, 1, sizeof realsize,

  00434	6a 00		 push	 0
  00436	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  00439	8b 08		 mov	 ecx, DWORD PTR [eax]
  0043b	51		 push	 ecx
  0043c	8b 55 f8	 mov	 edx, DWORD PTR _handle$[ebp]
  0043f	52		 push	 edx
  00440	e8 00 00 00 00	 call	 _fseek
  00445	83 c4 0c	 add	 esp, 12			; 0000000cH
  00448	83 f8 ff	 cmp	 eax, -1
  0044b	74 19		 je	 SHORT $LN29@W_LoadWadF
  0044d	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00450	50		 push	 eax
  00451	6a 04		 push	 4
  00453	6a 01		 push	 1
  00455	8d 4d bc	 lea	 ecx, DWORD PTR _realsize$2[ebp]
  00458	51		 push	 ecx
  00459	e8 00 00 00 00	 call	 _fread
  0045e	83 c4 10	 add	 esp, 16			; 00000010H
  00461	83 f8 04	 cmp	 eax, 4
  00464	73 27		 jae	 SHORT $LN28@W_LoadWadF
$LN29@W_LoadWadF:

; 341  : 					handle) < sizeof realsize)
; 342  : 				{
; 343  : 					I_Error("corrupt compressed file: %s; maybe %s",

  00466	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 _ferror
  0046f	83 c4 04	 add	 esp, 4
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 _strerror
  00478	83 c4 04	 add	 esp, 4
  0047b	50		 push	 eax
  0047c	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0047f	51		 push	 ecx
  00480	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NHDFFDEH@corrupt?5compressed?5file?3?5?$CFs?$DL?5ma@
  00485	e8 00 00 00 00	 call	 _I_Error
  0048a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN28@W_LoadWadF:

; 344  : 						filename, strerror(ferror(handle)));
; 345  : 				}
; 346  : 				realsize = LONG(realsize);

  0048d	8b 45 bc	 mov	 eax, DWORD PTR _realsize$2[ebp]
  00490	89 45 bc	 mov	 DWORD PTR _realsize$2[ebp], eax

; 347  : 				if (realsize != 0)

  00493	83 7d bc 00	 cmp	 DWORD PTR _realsize$2[ebp], 0
  00497	74 15		 je	 SHORT $LN30@W_LoadWadF

; 348  : 				{
; 349  : 					lump_p->size = realsize;

  00499	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  0049c	8b 4d bc	 mov	 ecx, DWORD PTR _realsize$2[ebp]
  0049f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 350  : 					lump_p->compressed = 1;

  004a2	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  004a5	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1

; 351  : 				}

  004ac	eb 19		 jmp	 SHORT $LN31@W_LoadWadF
$LN30@W_LoadWadF:

; 352  : 				else
; 353  : 				{
; 354  : 					lump_p->size -= 4;

  004ae	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  004b1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004b4	83 e9 04	 sub	 ecx, 4
  004b7	8b 55 c8	 mov	 edx, DWORD PTR _lump_p$5[ebp]
  004ba	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 355  : 					lump_p->compressed = 0;

  004bd	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  004c0	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN31@W_LoadWadF:

; 356  : 				}
; 357  : 
; 358  : 				lump_p->position += 4;

  004c7	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  004ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  004cc	83 c1 04	 add	 ecx, 4
  004cf	8b 55 c8	 mov	 edx, DWORD PTR _lump_p$5[ebp]
  004d2	89 0a		 mov	 DWORD PTR [edx], ecx

; 359  : 				lump_p->disksize -= 4;

  004d4	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  004d7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004da	83 e9 04	 sub	 ecx, 4
  004dd	8b 55 c8	 mov	 edx, DWORD PTR _lump_p$5[ebp]
  004e0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 360  : 			}

  004e3	eb 0a		 jmp	 SHORT $LN27@W_LoadWadF
$LN26@W_LoadWadF:

; 361  : 			else lump_p->compressed = 0;

  004e5	8b 45 c8	 mov	 eax, DWORD PTR _lump_p$5[ebp]
  004e8	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN27@W_LoadWadF:

; 362  : 			strncpy(lump_p->name, fileinfo->name, 8);

  004ef	6a 08		 push	 8
  004f1	8b 45 c4	 mov	 eax, DWORD PTR _fileinfo$4[ebp]
  004f4	83 c0 08	 add	 eax, 8
  004f7	50		 push	 eax
  004f8	8b 4d c8	 mov	 ecx, DWORD PTR _lump_p$5[ebp]
  004fb	83 c1 08	 add	 ecx, 8
  004fe	51		 push	 ecx
  004ff	e8 00 00 00 00	 call	 _strncpy
  00504	83 c4 0c	 add	 esp, 12			; 0000000cH

; 363  : 		}

  00507	e9 ce fe ff ff	 jmp	 $LN5@W_LoadWadF
$LN6@W_LoadWadF:

; 364  : 		free(fileinfov);

  0050c	8b 45 c0	 mov	 eax, DWORD PTR _fileinfov$3[ebp]
  0050f	50		 push	 eax
  00510	e8 00 00 00 00	 call	 _free
  00515	83 c4 04	 add	 esp, 4
$LN19@W_LoadWadF:

; 365  : 	}
; 366  : 	//
; 367  : 	// link wad file to search files
; 368  : 	//
; 369  : 	wadfile = Z_Malloc(sizeof (*wadfile), PU_STATIC, NULL);

  00518	6a 00		 push	 0
  0051a	6a 00		 push	 0
  0051c	6a 01		 push	 1
  0051e	6a 2c		 push	 44			; 0000002cH
  00520	e8 00 00 00 00	 call	 _Z_MallocAlign
  00525	83 c4 10	 add	 esp, 16			; 00000010H
  00528	89 45 f0	 mov	 DWORD PTR _wadfile$[ebp], eax

; 370  : 	wadfile->filename = Z_StrDup(filename);

  0052b	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 _Z_StrDup
  00534	83 c4 04	 add	 esp, 4
  00537	8b 4d f0	 mov	 ecx, DWORD PTR _wadfile$[ebp]
  0053a	89 01		 mov	 DWORD PTR [ecx], eax

; 371  : 	wadfile->handle = handle;

  0053c	8b 45 f0	 mov	 eax, DWORD PTR _wadfile$[ebp]
  0053f	8b 4d f8	 mov	 ecx, DWORD PTR _handle$[ebp]
  00542	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 372  : 	wadfile->numlumps = (UINT16)numlumps;

  00545	8b 45 f0	 mov	 eax, DWORD PTR _wadfile$[ebp]
  00548	66 8b 4d ec	 mov	 cx, WORD PTR _numlumps$[ebp]
  0054c	66 89 48 10	 mov	 WORD PTR [eax+16], cx

; 373  : 	wadfile->lumpinfo = lumpinfo;

  00550	8b 45 f0	 mov	 eax, DWORD PTR _wadfile$[ebp]
  00553	8b 4d f4	 mov	 ecx, DWORD PTR _lumpinfo$[ebp]
  00556	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 374  : 	fseek(handle, 0, SEEK_END);

  00559	6a 02		 push	 2
  0055b	6a 00		 push	 0
  0055d	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  00560	50		 push	 eax
  00561	e8 00 00 00 00	 call	 _fseek
  00566	83 c4 0c	 add	 esp, 12			; 0000000cH

; 375  : 	wadfile->filesize = (unsigned)ftell(handle);

  00569	8b 45 f8	 mov	 eax, DWORD PTR _handle$[ebp]
  0056c	50		 push	 eax
  0056d	e8 00 00 00 00	 call	 _ftell
  00572	83 c4 04	 add	 esp, 4
  00575	8b 4d f0	 mov	 ecx, DWORD PTR _wadfile$[ebp]
  00578	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 376  : 
; 377  : 	//
; 378  : 	// generate md5sum
; 379  : 	//
; 380  : 	W_MakeFileMD5(filename, wadfile->md5sum);

  0057b	8b 45 f0	 mov	 eax, DWORD PTR _wadfile$[ebp]
  0057e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00581	50		 push	 eax
  00582	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  00585	51		 push	 ecx
  00586	e8 00 00 00 00	 call	 _W_MakeFileMD5
  0058b	83 c4 08	 add	 esp, 8

; 381  : 
; 382  : 	//
; 383  : 	// set up caching
; 384  : 	//
; 385  : 	Z_Calloc(numlumps * sizeof (*wadfile->lumpcache), PU_STATIC, &wadfile->lumpcache);

  0058e	6a 00		 push	 0
  00590	8b 45 f0	 mov	 eax, DWORD PTR _wadfile$[ebp]
  00593	83 c0 08	 add	 eax, 8
  00596	50		 push	 eax
  00597	6a 01		 push	 1
  00599	8b 4d ec	 mov	 ecx, DWORD PTR _numlumps$[ebp]
  0059c	c1 e1 02	 shl	 ecx, 2
  0059f	51		 push	 ecx
  005a0	e8 00 00 00 00	 call	 _Z_CallocAlign
  005a5	83 c4 10	 add	 esp, 16			; 00000010H

; 386  : 
; 387  : #ifdef HWRENDER
; 388  : 	// allocates GLPatch info structures STATIC from the start,
; 389  : 	// because these were causing a lot of fragmentation of the heap,
; 390  : 	// considering they are never freed.
; 391  : 	grPatch = Z_Calloc(numlumps * sizeof (*grPatch), PU_HWRPATCHINFO, &(wadfile->hwrcache)); // never freed

  005a8	6a 00		 push	 0
  005aa	8b 45 f0	 mov	 eax, DWORD PTR _wadfile$[ebp]
  005ad	83 c0 0c	 add	 eax, 12			; 0000000cH
  005b0	50		 push	 eax
  005b1	6a 05		 push	 5
  005b3	8b 4d ec	 mov	 ecx, DWORD PTR _numlumps$[ebp]
  005b6	c1 e1 06	 shl	 ecx, 6
  005b9	51		 push	 ecx
  005ba	e8 00 00 00 00	 call	 _Z_CallocAlign
  005bf	83 c4 10	 add	 esp, 16			; 00000010H
  005c2	89 45 e4	 mov	 DWORD PTR _grPatch$[ebp], eax

; 392  : 	for (i = 0; i < numlumps; i++)

  005c5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  005cc	eb 09		 jmp	 SHORT $LN10@W_LoadWadF
$LN8@W_LoadWadF:
  005ce	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  005d1	83 c0 01	 add	 eax, 1
  005d4	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@W_LoadWadF:
  005d7	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  005da	3b 45 ec	 cmp	 eax, DWORD PTR _numlumps$[ebp]
  005dd	73 1f		 jae	 SHORT $LN9@W_LoadWadF

; 393  : 	{
; 394  : 		// store the software patch lump number for each GLPatch
; 395  : 		grPatch[i].patchlump = (numwadfiles<<16) + (UINT16)i;

  005df	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  005e6	c1 e0 10	 shl	 eax, 16			; 00000010H
  005e9	0f b7 4d e8	 movzx	 ecx, WORD PTR _i$[ebp]
  005ed	03 c1		 add	 eax, ecx
  005ef	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  005f2	c1 e2 06	 shl	 edx, 6
  005f5	8b 4d e4	 mov	 ecx, DWORD PTR _grPatch$[ebp]
  005f8	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 396  : 	}

  005fc	eb d0		 jmp	 SHORT $LN8@W_LoadWadF
$LN9@W_LoadWadF:

; 397  : #endif
; 398  : 
; 399  : 	//
; 400  : 	// add the wadfile
; 401  : 	//
; 402  : 	CONS_Printf("Added file %s (%u lumps)\n", filename, numlumps);

  005fe	8b 45 ec	 mov	 eax, DWORD PTR _numlumps$[ebp]
  00601	50		 push	 eax
  00602	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  00605	51		 push	 ecx
  00606	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HHHAPELO@Added?5file?5?$CFs?5?$CI?$CFu?5lumps?$CJ?6@
  0060b	e8 00 00 00 00	 call	 _CONS_Printf
  00610	83 c4 0c	 add	 esp, 12			; 0000000cH

; 403  : 	wadfiles[numwadfiles] = wadfile;

  00613	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  0061a	8b 4d f0	 mov	 ecx, DWORD PTR _wadfile$[ebp]
  0061d	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _wadfiles[eax*4], ecx

; 404  : 	W_LoadDehackedLumps(numwadfiles);

  00624	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  0062b	50		 push	 eax
  0062c	e8 00 00 00 00	 call	 _W_LoadDehackedLumps
  00631	83 c4 04	 add	 esp, 4

; 405  : 
; 406  : 	numwadfiles++;

  00634	66 a1 00 00 00
	00		 mov	 ax, WORD PTR _numwadfiles
  0063a	66 83 c0 01	 add	 ax, 1
  0063e	66 a3 00 00 00
	00		 mov	 WORD PTR _numwadfiles, ax

; 407  : 	return wadfile->numlumps;

  00644	8b 45 f0	 mov	 eax, DWORD PTR _wadfile$[ebp]
  00647	66 8b 40 10	 mov	 ax, WORD PTR [eax+16]
$LN1@W_LoadWadF:

; 408  : }

  0064b	5f		 pop	 edi
  0064c	5e		 pop	 esi
  0064d	5b		 pop	 ebx
  0064e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00651	33 cd		 xor	 ecx, ebp
  00653	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00658	8b e5		 mov	 esp, ebp
  0065a	5d		 pop	 ebp
  0065b	c3		 ret	 0
_W_LoadWadFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\w_wad.c
;	COMDAT _W_Shutdown
_TEXT	SEGMENT
tv67 = -68						; size = 4
_W_Shutdown PROC					; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@W_Shutdown:

; 107  : 	while (numwadfiles--)

  00009	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  00010	89 45 bc	 mov	 DWORD PTR tv67[ebp], eax
  00013	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _numwadfiles
  0001a	66 83 e9 01	 sub	 cx, 1
  0001e	66 89 0d 00 00
	00 00		 mov	 WORD PTR _numwadfiles, cx
  00025	83 7d bc 00	 cmp	 DWORD PTR tv67[ebp], 0
  00029	74 1c		 je	 SHORT $LN3@W_Shutdown

; 108  : 		fclose(wadfiles[numwadfiles]->handle);

  0002b	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  00032	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  00039	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _fclose
  00042	83 c4 04	 add	 esp, 4
  00045	eb c2		 jmp	 SHORT $LN2@W_Shutdown
$LN3@W_Shutdown:

; 109  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_W_Shutdown ENDP
_TEXT	ENDS
END
