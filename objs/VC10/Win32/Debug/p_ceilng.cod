; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\p_ceilng.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ceilmovesound
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
_BSS	SEGMENT
_ceilmovesound DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_EV_DoCeiling
PUBLIC	_EV_DoCrush
PUBLIC	_T_CrushCeiling
PUBLIC	_T_MoveCeiling
EXTRN	_abs:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_AddThinker:PROC
EXTRN	_P_RemoveThinker:PROC
EXTRN	_P_FreezeObjectplace:PROC
EXTRN	_P_FindLowestCeilingSurrounding:PROC
EXTRN	_P_FindHighestCeilingSurrounding:PROC
EXTRN	_P_FindSectorFromLineTag:PROC
EXTRN	_P_LinedefExecute:PROC
EXTRN	_T_MovePlane:PROC
EXTRN	_R_PointToDist2:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_Z_CallocAlign:PROC
EXTRN	_sectors:DWORD
EXTRN	_lines:DWORD
EXTRN	_sides:DWORD
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_ceilng.c
;	COMDAT _T_MoveCeiling
_TEXT	SEGMENT
tv73 = -116						; size = 4
tv161 = -116						; size = 4
tv231 = -116						; size = 4
tv247 = -116						; size = 4
tv323 = -116						; size = 4
tv394 = -116						; size = 4
tv410 = -116						; size = 4
tv432 = -116						; size = 4
_dest$1 = -48						; size = 4
_dest$2 = -44						; size = 4
_bs$3 = -40						; size = 4
_fs$4 = -36						; size = 4
_origspeed$5 = -32					; size = 4
_dest$6 = -28						; size = 4
_dest$7 = -24						; size = 4
_bs$8 = -20						; size = 4
_fs$9 = -16						; size = 4
_origspeed$10 = -12					; size = 4
_dontupdate$ = -8					; size = 4
_res$ = -4						; size = 4
_ceiling$ = 8						; size = 4
_T_MoveCeiling PROC					; COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 42   : 	result_e res;
; 43   : 	boolean dontupdate = false;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 0

; 44   : 
; 45   : 	if (P_FreezeObjectplace())

  00010	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  00015	85 c0		 test	 eax, eax
  00017	74 05		 je	 SHORT $LN10@T_MoveCeil

; 46   : 		return;

  00019	e9 e5 07 00 00	 jmp	 $LN69@T_MoveCeil
$LN10@T_MoveCeil:

; 47   : 
; 48   : 	if (ceiling->delaytimer)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00021	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00025	74 14		 je	 SHORT $LN11@T_MoveCeil

; 49   : 	{
; 50   : 		ceiling->delaytimer--;

  00027	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0002a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0002d	83 e9 01	 sub	 ecx, 1
  00030	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00033	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 51   : 		return;

  00036	e9 c8 07 00 00	 jmp	 $LN69@T_MoveCeil
$LN11@T_MoveCeil:

; 52   : 	}
; 53   : 
; 54   : 	switch (ceiling->direction)

  0003b	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0003e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00041	89 4d 8c	 mov	 DWORD PTR tv73[ebp], ecx
  00044	83 7d 8c ff	 cmp	 DWORD PTR tv73[ebp], -1
  00048	0f 84 a8 03 00
	00		 je	 $LN37@T_MoveCeil
  0004e	83 7d 8c 01	 cmp	 DWORD PTR tv73[ebp], 1
  00052	74 0a		 je	 SHORT $LN13@T_MoveCeil
  00054	e9 79 07 00 00	 jmp	 $LN2@T_MoveCeil

; 55   : 	{
; 56   : 		case 0: // IN STASIS
; 57   : 			break;

  00059	e9 74 07 00 00	 jmp	 $LN2@T_MoveCeil
$LN13@T_MoveCeil:

; 58   : 		case 1: // UP
; 59   : 			res = T_MovePlane(ceiling->sector, ceiling->speed, ceiling->topheight, false,

  0005e	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00061	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00064	51		 push	 ecx
  00065	6a 01		 push	 1
  00067	6a 00		 push	 0
  00069	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0006c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00073	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00076	52		 push	 edx
  00077	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0007a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _T_MovePlane
  00083	83 c4 18	 add	 esp, 24			; 00000018H
  00086	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 60   : 				1, ceiling->direction);
; 61   : 
; 62   : 			if (ceiling->type == bounceCeiling)

  00089	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0008c	83 78 10 0e	 cmp	 DWORD PTR [eax+16], 14	; 0000000eH
  00090	0f 85 c4 00 00
	00		 jne	 $LN14@T_MoveCeil

; 63   : 			{
; 64   : 				const fixed_t origspeed = FixedDiv(ceiling->origspeed,(ELEVATORSPEED/2));

  00096	68 00 00 02 00	 push	 131072			; 00020000H
  0009b	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0009e	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _FixedDiv
  000a7	83 c4 08	 add	 esp, 8
  000aa	89 45 f4	 mov	 DWORD PTR _origspeed$10[ebp], eax

; 65   : 				const fixed_t fs = abs(ceiling->sector->ceilingheight - lines[ceiling->texture].frontsector->ceilingheight);

  000ad	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000b0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b3	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  000b6	6b 42 34 4c	 imul	 eax, DWORD PTR [edx+52], 76
  000ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  000c0	8b 44 02 30	 mov	 eax, DWORD PTR [edx+eax+48]
  000c4	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c7	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 _abs
  000d0	83 c4 04	 add	 esp, 4
  000d3	89 45 f0	 mov	 DWORD PTR _fs$9[ebp], eax

; 66   : 				const fixed_t bs = abs(ceiling->sector->ceilingheight - lines[ceiling->texture].backsector->ceilingheight);

  000d6	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000d9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000dc	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  000df	6b 42 34 4c	 imul	 eax, DWORD PTR [edx+52], 76
  000e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  000e9	8b 44 02 34	 mov	 eax, DWORD PTR [edx+eax+52]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 _abs
  000f9	83 c4 04	 add	 esp, 4
  000fc	89 45 ec	 mov	 DWORD PTR _bs$8[ebp], eax

; 67   : 				if (fs < bs)

  000ff	8b 45 f0	 mov	 eax, DWORD PTR _fs$9[ebp]
  00102	3b 45 ec	 cmp	 eax, DWORD PTR _bs$8[ebp]
  00105	7d 1e		 jge	 SHORT $LN15@T_MoveCeil

; 68   : 					ceiling->speed = FixedDiv(fs,25*FRACUNIT) + FRACUNIT/4;

  00107	68 00 00 19 00	 push	 1638400			; 00190000H
  0010c	8b 45 f0	 mov	 eax, DWORD PTR _fs$9[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _FixedDiv
  00115	83 c4 08	 add	 esp, 8
  00118	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00120	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00123	eb 1c		 jmp	 SHORT $LN16@T_MoveCeil
$LN15@T_MoveCeil:

; 69   : 				else
; 70   : 					ceiling->speed = FixedDiv(bs,25*FRACUNIT) + FRACUNIT/4;

  00125	68 00 00 19 00	 push	 1638400			; 00190000H
  0012a	8b 45 ec	 mov	 eax, DWORD PTR _bs$8[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _FixedDiv
  00133	83 c4 08	 add	 esp, 8
  00136	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0013e	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$LN16@T_MoveCeil:

; 71   : 
; 72   : 				ceiling->speed = FixedMul(ceiling->speed,origspeed);

  00141	8b 45 f4	 mov	 eax, DWORD PTR _origspeed$10[ebp]
  00144	50		 push	 eax
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00148	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 _FixedMul
  00151	83 c4 08	 add	 esp, 8
  00154	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00157	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$LN14@T_MoveCeil:

; 73   : 			}
; 74   : 
; 75   : 			if (res == pastdest)

  0015a	83 7d fc 02	 cmp	 DWORD PTR _res$[ebp], 2
  0015e	0f 85 8d 02 00
	00		 jne	 $LN4@T_MoveCeil

; 76   : 			{
; 77   : 				switch (ceiling->type)

  00164	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00167	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0016a	89 4d 8c	 mov	 DWORD PTR tv161[ebp], ecx
  0016d	83 7d 8c 0f	 cmp	 DWORD PTR tv161[ebp], 15 ; 0000000fH
  00171	0f 87 7a 02 00
	00		 ja	 $LN36@T_MoveCeil
  00177	8b 55 8c	 mov	 edx, DWORD PTR tv161[ebp]
  0017a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN71@T_MoveCeil[edx]
  00181	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN72@T_MoveCeil[eax*4]
$LN18@T_MoveCeil:

; 78   : 				{
; 79   : 					case instantMoveCeilingByFrontSector:
; 80   : 						ceiling->sector->ceilingpic = ceiling->texture;

  00188	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0018b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0018e	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00191	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00194	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 81   : 						ceiling->sector->ceilingdata = NULL;

  00197	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0019a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0019d	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 82   : 						ceiling->sector->ceilspeed = 0;

  001a4	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001a7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001aa	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 83   : 						P_RemoveThinker(&ceiling->thinker);

  001b4	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _P_RemoveThinker
  001bd	83 c4 04	 add	 esp, 4

; 84   : 						dontupdate = true;

  001c0	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 1

; 85   : 						break;

  001c7	e9 25 02 00 00	 jmp	 $LN4@T_MoveCeil
$LN19@T_MoveCeil:

; 86   : 					case moveCeilingByFrontSector:
; 87   : 						if (ceiling->texture < -1) // chained linedef executing

  001cc	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001cf	83 78 34 ff	 cmp	 DWORD PTR [eax+52], -1
  001d3	7d 19		 jge	 SHORT $LN20@T_MoveCeil

; 88   : 							P_LinedefExecute(ceiling->texture + INT16_MAX + 2, NULL, NULL);

  001d5	6a 00		 push	 0
  001d7	6a 00		 push	 0
  001d9	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001dc	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  001df	81 c1 01 80 00
	00		 add	 ecx, 32769		; 00008001H
  001e5	51		 push	 ecx
  001e6	e8 00 00 00 00	 call	 _P_LinedefExecute
  001eb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@T_MoveCeil:

; 89   : 						if (ceiling->texture > -1) // flat changing

  001ee	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001f1	83 78 34 ff	 cmp	 DWORD PTR [eax+52], -1
  001f5	7e 0f		 jle	 SHORT $LN21@T_MoveCeil

; 90   : 							ceiling->sector->ceilingpic = ceiling->texture;

  001f7	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001fa	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001fd	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00200	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00203	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN21@T_MoveCeil:

; 91   : 						// don't break
; 92   : 					case raiseToHighest:
; 93   : 					case raiseCeilingByLine:
; 94   : 						ceiling->sector->ceilingdata = NULL;

  00206	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00209	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0020c	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 95   : 						ceiling->sector->ceilspeed = 0;

  00213	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00216	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00219	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 96   : 						P_RemoveThinker(&ceiling->thinker);

  00223	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 _P_RemoveThinker
  0022c	83 c4 04	 add	 esp, 4

; 97   : 						dontupdate = true;

  0022f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 1

; 98   : 						break;

  00236	e9 b6 01 00 00	 jmp	 $LN4@T_MoveCeil
$LN24@T_MoveCeil:

; 99   : 
; 100  : 					case fastCrushAndRaise:
; 101  : 					case crushAndRaise:
; 102  : 						ceiling->direction = -1;

  0023b	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0023e	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 103  : 						break;

  00245	e9 a7 01 00 00	 jmp	 $LN4@T_MoveCeil
$LN26@T_MoveCeil:

; 104  : 
; 105  : 					case bounceCeiling:
; 106  : 					{
; 107  : 						fixed_t dest = ceiling->topheight;

  0024a	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0024d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00250	89 4d e8	 mov	 DWORD PTR _dest$7[ebp], ecx

; 108  : 
; 109  : 						if (dest == lines[ceiling->texture].frontsector->ceilingheight)

  00253	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00256	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  0025a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00260	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  00264	8b 4d e8	 mov	 ecx, DWORD PTR _dest$7[ebp]
  00267	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0026a	75 19		 jne	 SHORT $LN27@T_MoveCeil

; 110  : 							dest = lines[ceiling->texture].backsector->ceilingheight;

  0026c	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0026f	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  00273	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00279	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  0027d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00280	89 4d e8	 mov	 DWORD PTR _dest$7[ebp], ecx
  00283	eb 17		 jmp	 SHORT $LN28@T_MoveCeil
$LN27@T_MoveCeil:

; 111  : 						else
; 112  : 							dest = lines[ceiling->texture].frontsector->ceilingheight;

  00285	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00288	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  0028c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00292	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  00296	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00299	89 4d e8	 mov	 DWORD PTR _dest$7[ebp], ecx
$LN28@T_MoveCeil:

; 113  : 
; 114  : 						if (dest < ceiling->sector->ceilingheight) // must move down

  0029c	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0029f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002a2	8b 55 e8	 mov	 edx, DWORD PTR _dest$7[ebp]
  002a5	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  002a8	7d 15		 jge	 SHORT $LN29@T_MoveCeil

; 115  : 						{
; 116  : 							ceiling->direction = -1;

  002aa	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002ad	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 117  : 							ceiling->bottomheight = dest;

  002b4	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002b7	8b 4d e8	 mov	 ecx, DWORD PTR _dest$7[ebp]
  002ba	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 118  : 						}

  002bd	eb 13		 jmp	 SHORT $LN30@T_MoveCeil
$LN29@T_MoveCeil:

; 119  : 						else // must move up
; 120  : 						{
; 121  : 							ceiling->direction = 1;

  002bf	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002c2	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 122  : 							ceiling->topheight = dest;

  002c9	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002cc	8b 4d e8	 mov	 ecx, DWORD PTR _dest$7[ebp]
  002cf	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN30@T_MoveCeil:

; 123  : 						}
; 124  : 
; 125  : 						ceiling->delaytimer = ceiling->delay;

  002d2	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002d5	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  002d8	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  002db	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 126  : 
; 127  : 						// That's it. Do not set dontupdate, do not remove the thinker.
; 128  : 						break;

  002de	e9 0e 01 00 00	 jmp	 $LN4@T_MoveCeil
$LN31@T_MoveCeil:

; 129  : 					}
; 130  : 
; 131  : 					case bounceCeilingCrush:
; 132  : 					{
; 133  : 						fixed_t dest = ceiling->topheight;

  002e3	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002e6	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002e9	89 4d e4	 mov	 DWORD PTR _dest$6[ebp], ecx

; 134  : 
; 135  : 						if (dest == lines[ceiling->texture].frontsector->ceilingheight)

  002ec	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002ef	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  002f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  002f9	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  002fd	8b 4d e4	 mov	 ecx, DWORD PTR _dest$6[ebp]
  00300	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00303	75 56		 jne	 SHORT $LN32@T_MoveCeil

; 136  : 						{
; 137  : 							dest = lines[ceiling->texture].backsector->ceilingheight;

  00305	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00308	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  0030c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00312	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  00316	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00319	89 4d e4	 mov	 DWORD PTR _dest$6[ebp], ecx

; 138  : 							ceiling->speed = ceiling->origspeed = FixedDiv(abs(lines[ceiling->texture].dy),4*FRACUNIT); // return trip, use dy

  0031c	68 00 00 04 00	 push	 262144			; 00040000H
  00321	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00324	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0032e	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 _abs
  00338	83 c4 04	 add	 esp, 4
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 _FixedDiv
  00341	83 c4 08	 add	 esp, 8
  00344	89 45 8c	 mov	 DWORD PTR tv231[ebp], eax
  00347	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0034a	8b 55 8c	 mov	 edx, DWORD PTR tv231[ebp]
  0034d	89 51 44	 mov	 DWORD PTR [ecx+68], edx
  00350	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00353	8b 4d 8c	 mov	 ecx, DWORD PTR tv231[ebp]
  00356	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 139  : 						}

  00359	eb 54		 jmp	 SHORT $LN33@T_MoveCeil
$LN32@T_MoveCeil:

; 140  : 						else
; 141  : 						{
; 142  : 							dest = lines[ceiling->texture].frontsector->ceilingheight;

  0035b	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0035e	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  00362	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00368	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  0036c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0036f	89 4d e4	 mov	 DWORD PTR _dest$6[ebp], ecx

; 143  : 							ceiling->speed = ceiling->origspeed = FixedDiv(abs(lines[ceiling->texture].dx),4*FRACUNIT); // going frontways, use dx

  00372	68 00 00 04 00	 push	 262144			; 00040000H
  00377	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0037a	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  0037e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00384	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  00388	50		 push	 eax
  00389	e8 00 00 00 00	 call	 _abs
  0038e	83 c4 04	 add	 esp, 4
  00391	50		 push	 eax
  00392	e8 00 00 00 00	 call	 _FixedDiv
  00397	83 c4 08	 add	 esp, 8
  0039a	89 45 8c	 mov	 DWORD PTR tv247[ebp], eax
  0039d	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  003a0	8b 55 8c	 mov	 edx, DWORD PTR tv247[ebp]
  003a3	89 51 44	 mov	 DWORD PTR [ecx+68], edx
  003a6	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003a9	8b 4d 8c	 mov	 ecx, DWORD PTR tv247[ebp]
  003ac	89 48 20	 mov	 DWORD PTR [eax+32], ecx
$LN33@T_MoveCeil:

; 144  : 						}
; 145  : 
; 146  : 						if (dest < ceiling->sector->ceilingheight) // must move down

  003af	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003b2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003b5	8b 55 e4	 mov	 edx, DWORD PTR _dest$6[ebp]
  003b8	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  003bb	7d 15		 jge	 SHORT $LN34@T_MoveCeil

; 147  : 						{
; 148  : 							ceiling->direction = -1;

  003bd	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003c0	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 149  : 							ceiling->bottomheight = dest;

  003c7	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003ca	8b 4d e4	 mov	 ecx, DWORD PTR _dest$6[ebp]
  003cd	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 150  : 						}

  003d0	eb 13		 jmp	 SHORT $LN35@T_MoveCeil
$LN34@T_MoveCeil:

; 151  : 						else // must move up
; 152  : 						{
; 153  : 							ceiling->direction = 1;

  003d2	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003d5	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 154  : 							ceiling->topheight = dest;

  003dc	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003df	8b 4d e4	 mov	 ecx, DWORD PTR _dest$6[ebp]
  003e2	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN35@T_MoveCeil:

; 155  : 						}
; 156  : 
; 157  : 						ceiling->delaytimer = ceiling->delay;

  003e5	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003e8	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  003eb	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  003ee	89 50 2c	 mov	 DWORD PTR [eax+44], edx
$LN36@T_MoveCeil:
$LN4@T_MoveCeil:

; 158  : 
; 159  : 						// That's it. Do not set dontupdate, do not remove the thinker.
; 160  : 						break;
; 161  : 					}
; 162  : 
; 163  : 					default:
; 164  : 						break;
; 165  : 				}
; 166  : 			}
; 167  : 			break;

  003f1	e9 dc 03 00 00	 jmp	 $LN2@T_MoveCeil
$LN37@T_MoveCeil:

; 168  : 
; 169  : 		case -1: // DOWN
; 170  : 			res = T_MovePlane(ceiling->sector, ceiling->speed, ceiling->bottomheight,

  003f6	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003f9	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  003fc	51		 push	 ecx
  003fd	6a 01		 push	 1
  003ff	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00402	0f b6 42 30	 movzx	 eax, BYTE PTR [edx+48]
  00406	50		 push	 eax
  00407	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0040a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0040d	52		 push	 edx
  0040e	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00411	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00414	51		 push	 ecx
  00415	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00418	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0041b	50		 push	 eax
  0041c	e8 00 00 00 00	 call	 _T_MovePlane
  00421	83 c4 18	 add	 esp, 24			; 00000018H
  00424	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 171  : 				ceiling->crush, 1, ceiling->direction);
; 172  : 
; 173  : 			if (ceiling->type == bounceCeiling)

  00427	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0042a	83 78 10 0e	 cmp	 DWORD PTR [eax+16], 14	; 0000000eH
  0042e	0f 85 c4 00 00
	00		 jne	 $LN38@T_MoveCeil

; 174  : 			{
; 175  : 				const fixed_t origspeed = FixedDiv(ceiling->origspeed,(ELEVATORSPEED/2));

  00434	68 00 00 02 00	 push	 131072			; 00020000H
  00439	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0043c	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0043f	51		 push	 ecx
  00440	e8 00 00 00 00	 call	 _FixedDiv
  00445	83 c4 08	 add	 esp, 8
  00448	89 45 e0	 mov	 DWORD PTR _origspeed$5[ebp], eax

; 176  : 				const fixed_t fs = abs(ceiling->sector->ceilingheight - lines[ceiling->texture].frontsector->ceilingheight);

  0044b	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0044e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00451	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00454	6b 42 34 4c	 imul	 eax, DWORD PTR [edx+52], 76
  00458	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0045e	8b 44 02 30	 mov	 eax, DWORD PTR [edx+eax+48]
  00462	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00465	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00468	51		 push	 ecx
  00469	e8 00 00 00 00	 call	 _abs
  0046e	83 c4 04	 add	 esp, 4
  00471	89 45 dc	 mov	 DWORD PTR _fs$4[ebp], eax

; 177  : 				const fixed_t bs = abs(ceiling->sector->ceilingheight - lines[ceiling->texture].backsector->ceilingheight);

  00474	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00477	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0047a	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0047d	6b 42 34 4c	 imul	 eax, DWORD PTR [edx+52], 76
  00481	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00487	8b 44 02 34	 mov	 eax, DWORD PTR [edx+eax+52]
  0048b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0048e	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00491	51		 push	 ecx
  00492	e8 00 00 00 00	 call	 _abs
  00497	83 c4 04	 add	 esp, 4
  0049a	89 45 d8	 mov	 DWORD PTR _bs$3[ebp], eax

; 178  : 				if (fs < bs)

  0049d	8b 45 dc	 mov	 eax, DWORD PTR _fs$4[ebp]
  004a0	3b 45 d8	 cmp	 eax, DWORD PTR _bs$3[ebp]
  004a3	7d 1e		 jge	 SHORT $LN39@T_MoveCeil

; 179  : 					ceiling->speed = FixedDiv(fs,25*FRACUNIT) + FRACUNIT/4;

  004a5	68 00 00 19 00	 push	 1638400			; 00190000H
  004aa	8b 45 dc	 mov	 eax, DWORD PTR _fs$4[ebp]
  004ad	50		 push	 eax
  004ae	e8 00 00 00 00	 call	 _FixedDiv
  004b3	83 c4 08	 add	 esp, 8
  004b6	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  004bb	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  004be	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  004c1	eb 1c		 jmp	 SHORT $LN40@T_MoveCeil
$LN39@T_MoveCeil:

; 180  : 				else
; 181  : 					ceiling->speed = FixedDiv(bs,25*FRACUNIT) + FRACUNIT/4;

  004c3	68 00 00 19 00	 push	 1638400			; 00190000H
  004c8	8b 45 d8	 mov	 eax, DWORD PTR _bs$3[ebp]
  004cb	50		 push	 eax
  004cc	e8 00 00 00 00	 call	 _FixedDiv
  004d1	83 c4 08	 add	 esp, 8
  004d4	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  004d9	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  004dc	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$LN40@T_MoveCeil:

; 182  : 				ceiling->speed = FixedMul(ceiling->speed,origspeed);

  004df	8b 45 e0	 mov	 eax, DWORD PTR _origspeed$5[ebp]
  004e2	50		 push	 eax
  004e3	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  004e6	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  004e9	52		 push	 edx
  004ea	e8 00 00 00 00	 call	 _FixedMul
  004ef	83 c4 08	 add	 esp, 8
  004f2	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  004f5	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$LN38@T_MoveCeil:

; 183  : 			}
; 184  : 
; 185  : 			if (res == pastdest)

  004f8	83 7d fc 02	 cmp	 DWORD PTR _res$[ebp], 2
  004fc	0f 85 9b 02 00
	00		 jne	 $LN41@T_MoveCeil

; 186  : 			{
; 187  : 				switch (ceiling->type)

  00502	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00505	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00508	89 4d 8c	 mov	 DWORD PTR tv323[ebp], ecx
  0050b	8b 55 8c	 mov	 edx, DWORD PTR tv323[ebp]
  0050e	83 ea 01	 sub	 edx, 1
  00511	89 55 8c	 mov	 DWORD PTR tv323[ebp], edx
  00514	83 7d 8c 0e	 cmp	 DWORD PTR tv323[ebp], 14 ; 0000000eH
  00518	0f 87 7d 02 00
	00		 ja	 $LN63@T_MoveCeil
  0051e	8b 45 8c	 mov	 eax, DWORD PTR tv323[ebp]
  00521	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN73@T_MoveCeil[eax*4]
$LN43@T_MoveCeil:

; 188  : 				{
; 189  : 					// make platform stop at bottom of all crusher strokes
; 190  : 					// except generalized ones, reset speed, start back up
; 191  : 					case crushAndRaise:
; 192  : 						ceiling->speed = CEILSPEED;

  00528	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0052b	c7 40 20 00 00
	01 00		 mov	 DWORD PTR [eax+32], 65536 ; 00010000H
$LN44@T_MoveCeil:

; 193  : 					case fastCrushAndRaise:
; 194  : 						ceiling->direction = 1;

  00532	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00535	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 195  : 						break;

  0053c	e9 5a 02 00 00	 jmp	 $LN6@T_MoveCeil
$LN45@T_MoveCeil:

; 196  : 
; 197  : 					case instantMoveCeilingByFrontSector:
; 198  : 						ceiling->sector->ceilingpic = ceiling->texture;

  00541	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00544	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00547	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0054a	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0054d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 199  : 						ceiling->sector->ceilingdata = NULL;

  00550	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00553	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00556	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 200  : 						ceiling->sector->ceilspeed = 0;

  0055d	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00560	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00563	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 201  : 						P_RemoveThinker(&ceiling->thinker);

  0056d	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00570	50		 push	 eax
  00571	e8 00 00 00 00	 call	 _P_RemoveThinker
  00576	83 c4 04	 add	 esp, 4

; 202  : 						dontupdate = true;

  00579	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 1

; 203  : 						break;

  00580	e9 16 02 00 00	 jmp	 $LN6@T_MoveCeil
$LN46@T_MoveCeil:

; 204  : 
; 205  : 					case moveCeilingByFrontSector:
; 206  : 						if (ceiling->texture < -1) // chained linedef executing

  00585	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00588	83 78 34 ff	 cmp	 DWORD PTR [eax+52], -1
  0058c	7d 19		 jge	 SHORT $LN47@T_MoveCeil

; 207  : 							P_LinedefExecute(ceiling->texture + INT16_MAX + 2, NULL, NULL);

  0058e	6a 00		 push	 0
  00590	6a 00		 push	 0
  00592	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00595	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00598	81 c1 01 80 00
	00		 add	 ecx, 32769		; 00008001H
  0059e	51		 push	 ecx
  0059f	e8 00 00 00 00	 call	 _P_LinedefExecute
  005a4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@T_MoveCeil:

; 208  : 						if (ceiling->texture > -1) // flat changing

  005a7	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005aa	83 78 34 ff	 cmp	 DWORD PTR [eax+52], -1
  005ae	7e 0f		 jle	 SHORT $LN48@T_MoveCeil

; 209  : 							ceiling->sector->ceilingpic = ceiling->texture;

  005b0	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005b3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005b6	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  005b9	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  005bc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN48@T_MoveCeil:

; 210  : 						// don't break
; 211  : 
; 212  : 					// in all other cases, just remove the active ceiling
; 213  : 					case lowerAndCrush:
; 214  : 					case lowerToLowest:
; 215  : 					case raiseToLowest:
; 216  : 					case lowerCeilingByLine:
; 217  : 						ceiling->sector->ceilingdata = NULL;

  005bf	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005c2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005c5	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 218  : 						ceiling->sector->ceilspeed = 0;

  005cc	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005cf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005d2	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 219  : 						P_RemoveThinker(&ceiling->thinker);

  005dc	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 _P_RemoveThinker
  005e5	83 c4 04	 add	 esp, 4

; 220  : 						dontupdate = true;

  005e8	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dontupdate$[ebp], 1

; 221  : 						break;

  005ef	e9 a7 01 00 00	 jmp	 $LN6@T_MoveCeil
$LN53@T_MoveCeil:

; 222  : 					case bounceCeiling:
; 223  : 					{
; 224  : 						fixed_t dest = ceiling->bottomheight;

  005f4	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005f7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  005fa	89 4d d4	 mov	 DWORD PTR _dest$2[ebp], ecx

; 225  : 
; 226  : 						if (dest == lines[ceiling->texture].frontsector->ceilingheight)

  005fd	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00600	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  00604	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0060a	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  0060e	8b 4d d4	 mov	 ecx, DWORD PTR _dest$2[ebp]
  00611	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00614	75 19		 jne	 SHORT $LN54@T_MoveCeil

; 227  : 							dest = lines[ceiling->texture].backsector->ceilingheight;

  00616	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00619	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  0061d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00623	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  00627	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0062a	89 4d d4	 mov	 DWORD PTR _dest$2[ebp], ecx
  0062d	eb 17		 jmp	 SHORT $LN55@T_MoveCeil
$LN54@T_MoveCeil:

; 228  : 						else
; 229  : 							dest = lines[ceiling->texture].frontsector->ceilingheight;

  0062f	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00632	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  00636	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0063c	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  00640	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00643	89 4d d4	 mov	 DWORD PTR _dest$2[ebp], ecx
$LN55@T_MoveCeil:

; 230  : 
; 231  : 						if (dest < ceiling->sector->ceilingheight) // must move down

  00646	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00649	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0064c	8b 55 d4	 mov	 edx, DWORD PTR _dest$2[ebp]
  0064f	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00652	7d 15		 jge	 SHORT $LN56@T_MoveCeil

; 232  : 						{
; 233  : 							ceiling->direction = -1;

  00654	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00657	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 234  : 							ceiling->bottomheight = dest;

  0065e	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00661	8b 4d d4	 mov	 ecx, DWORD PTR _dest$2[ebp]
  00664	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 235  : 						}

  00667	eb 13		 jmp	 SHORT $LN57@T_MoveCeil
$LN56@T_MoveCeil:

; 236  : 						else // must move up
; 237  : 						{
; 238  : 							ceiling->direction = 1;

  00669	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0066c	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 239  : 							ceiling->topheight = dest;

  00673	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00676	8b 4d d4	 mov	 ecx, DWORD PTR _dest$2[ebp]
  00679	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN57@T_MoveCeil:

; 240  : 						}
; 241  : 
; 242  : 						ceiling->delaytimer = ceiling->delay;

  0067c	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0067f	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00682	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00685	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 243  : 
; 244  : 						// That's it. Do not set dontupdate, do not remove the thinker.
; 245  : 						break;

  00688	e9 0e 01 00 00	 jmp	 $LN6@T_MoveCeil
$LN58@T_MoveCeil:

; 246  : 					}
; 247  : 
; 248  : 					case bounceCeilingCrush:
; 249  : 					{
; 250  : 						fixed_t dest = ceiling->bottomheight;

  0068d	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00690	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00693	89 4d d0	 mov	 DWORD PTR _dest$1[ebp], ecx

; 251  : 
; 252  : 						if (dest == lines[ceiling->texture].frontsector->ceilingheight)

  00696	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00699	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  0069d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  006a3	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  006a7	8b 4d d0	 mov	 ecx, DWORD PTR _dest$1[ebp]
  006aa	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  006ad	75 56		 jne	 SHORT $LN59@T_MoveCeil

; 253  : 						{
; 254  : 							dest = lines[ceiling->texture].backsector->ceilingheight;

  006af	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  006b2	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  006b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  006bc	8b 44 0a 34	 mov	 eax, DWORD PTR [edx+ecx+52]
  006c0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006c3	89 4d d0	 mov	 DWORD PTR _dest$1[ebp], ecx

; 255  : 							ceiling->speed = ceiling->origspeed = FixedDiv(abs(lines[ceiling->texture].dy),4*FRACUNIT); // return trip, use dy

  006c6	68 00 00 04 00	 push	 262144			; 00040000H
  006cb	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  006ce	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  006d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  006d8	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  006dc	50		 push	 eax
  006dd	e8 00 00 00 00	 call	 _abs
  006e2	83 c4 04	 add	 esp, 4
  006e5	50		 push	 eax
  006e6	e8 00 00 00 00	 call	 _FixedDiv
  006eb	83 c4 08	 add	 esp, 8
  006ee	89 45 8c	 mov	 DWORD PTR tv394[ebp], eax
  006f1	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  006f4	8b 55 8c	 mov	 edx, DWORD PTR tv394[ebp]
  006f7	89 51 44	 mov	 DWORD PTR [ecx+68], edx
  006fa	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  006fd	8b 4d 8c	 mov	 ecx, DWORD PTR tv394[ebp]
  00700	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 256  : 						}

  00703	eb 54		 jmp	 SHORT $LN60@T_MoveCeil
$LN59@T_MoveCeil:

; 257  : 						else
; 258  : 						{
; 259  : 							dest = lines[ceiling->texture].frontsector->ceilingheight;

  00705	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00708	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  0070c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00712	8b 44 0a 30	 mov	 eax, DWORD PTR [edx+ecx+48]
  00716	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00719	89 4d d0	 mov	 DWORD PTR _dest$1[ebp], ecx

; 260  : 							ceiling->speed = ceiling->origspeed = FixedDiv(abs(lines[ceiling->texture].dx),4*FRACUNIT); // going frontways, use dx

  0071c	68 00 00 04 00	 push	 262144			; 00040000H
  00721	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00724	6b 48 34 4c	 imul	 ecx, DWORD PTR [eax+52], 76
  00728	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  0072e	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  00732	50		 push	 eax
  00733	e8 00 00 00 00	 call	 _abs
  00738	83 c4 04	 add	 esp, 4
  0073b	50		 push	 eax
  0073c	e8 00 00 00 00	 call	 _FixedDiv
  00741	83 c4 08	 add	 esp, 8
  00744	89 45 8c	 mov	 DWORD PTR tv410[ebp], eax
  00747	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0074a	8b 55 8c	 mov	 edx, DWORD PTR tv410[ebp]
  0074d	89 51 44	 mov	 DWORD PTR [ecx+68], edx
  00750	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00753	8b 4d 8c	 mov	 ecx, DWORD PTR tv410[ebp]
  00756	89 48 20	 mov	 DWORD PTR [eax+32], ecx
$LN60@T_MoveCeil:

; 261  : 						}
; 262  : 
; 263  : 						if (dest < ceiling->sector->ceilingheight) // must move down

  00759	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0075c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0075f	8b 55 d0	 mov	 edx, DWORD PTR _dest$1[ebp]
  00762	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00765	7d 15		 jge	 SHORT $LN61@T_MoveCeil

; 264  : 						{
; 265  : 							ceiling->direction = -1;

  00767	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0076a	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 266  : 							ceiling->bottomheight = dest;

  00771	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00774	8b 4d d0	 mov	 ecx, DWORD PTR _dest$1[ebp]
  00777	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 267  : 						}

  0077a	eb 13		 jmp	 SHORT $LN62@T_MoveCeil
$LN61@T_MoveCeil:

; 268  : 						else // must move up
; 269  : 						{
; 270  : 							ceiling->direction = 1;

  0077c	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0077f	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 271  : 							ceiling->topheight = dest;

  00786	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00789	8b 4d d0	 mov	 ecx, DWORD PTR _dest$1[ebp]
  0078c	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN62@T_MoveCeil:

; 272  : 						}
; 273  : 
; 274  : 						ceiling->delaytimer = ceiling->delay;

  0078f	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00792	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00795	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00798	89 50 2c	 mov	 DWORD PTR [eax+44], edx
$LN63@T_MoveCeil:
$LN6@T_MoveCeil:

; 275  : 
; 276  : 						// That's it. Do not set dontupdate, do not remove the thinker.
; 277  : 						break;
; 278  : 					}
; 279  : 
; 280  : 					default:
; 281  : 						break;
; 282  : 				}
; 283  : 			}

  0079b	eb 35		 jmp	 SHORT $LN8@T_MoveCeil
$LN41@T_MoveCeil:

; 284  : 			else if (res == crushed)

  0079d	83 7d fc 01	 cmp	 DWORD PTR _res$[ebp], 1
  007a1	75 2f		 jne	 SHORT $LN8@T_MoveCeil

; 285  : 			{
; 286  : 				switch (ceiling->type)

  007a3	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  007a6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  007a9	89 4d 8c	 mov	 DWORD PTR tv432[ebp], ecx
  007ac	83 7d 8c 05	 cmp	 DWORD PTR tv432[ebp], 5
  007b0	74 08		 je	 SHORT $LN65@T_MoveCeil
  007b2	83 7d 8c 06	 cmp	 DWORD PTR tv432[ebp], 6
  007b6	74 02		 je	 SHORT $LN65@T_MoveCeil
  007b8	eb 18		 jmp	 SHORT $LN67@T_MoveCeil
$LN65@T_MoveCeil:

; 287  : 				{
; 288  : 					case crushAndRaise:
; 289  : 					case lowerAndCrush:
; 290  : 						ceiling->speed = FixedDiv(CEILSPEED,8*FRACUNIT);

  007ba	68 00 00 08 00	 push	 524288			; 00080000H
  007bf	68 00 00 01 00	 push	 65536			; 00010000H
  007c4	e8 00 00 00 00	 call	 _FixedDiv
  007c9	83 c4 08	 add	 esp, 8
  007cc	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  007cf	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$LN67@T_MoveCeil:
$LN8@T_MoveCeil:
$LN2@T_MoveCeil:

; 291  : 						break;
; 292  : 
; 293  : 					default:
; 294  : 						break;
; 295  : 				}
; 296  : 			}
; 297  : 		break;
; 298  : 	}
; 299  : 	if (!dontupdate)

  007d2	83 7d f8 00	 cmp	 DWORD PTR _dontupdate$[ebp], 0
  007d6	75 1b		 jne	 SHORT $LN68@T_MoveCeil

; 300  : 		ceiling->sector->ceilspeed = ceiling->speed*ceiling->direction;

  007d8	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  007db	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  007de	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  007e1	0f af 51 38	 imul	 edx, DWORD PTR [ecx+56]
  007e5	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  007e8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  007eb	89 91 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], edx
  007f1	eb 10		 jmp	 SHORT $LN69@T_MoveCeil
$LN68@T_MoveCeil:

; 301  : 	else
; 302  : 		ceiling->sector->ceilspeed = 0;

  007f3	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  007f6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  007f9	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0
$LN69@T_MoveCeil:

; 303  : }

  00803	5f		 pop	 edi
  00804	5e		 pop	 esi
  00805	5b		 pop	 ebx
  00806	8b e5		 mov	 esp, ebp
  00808	5d		 pop	 ebp
  00809	c3		 ret	 0
  0080a	66 90		 npad	 2
$LN72@T_MoveCeil:
  0080c	00 00 00 00	 DD	 $LN21@T_MoveCeil
  00810	00 00 00 00	 DD	 $LN24@T_MoveCeil
  00814	00 00 00 00	 DD	 $LN19@T_MoveCeil
  00818	00 00 00 00	 DD	 $LN18@T_MoveCeil
  0081c	00 00 00 00	 DD	 $LN26@T_MoveCeil
  00820	00 00 00 00	 DD	 $LN31@T_MoveCeil
  00824	00 00 00 00	 DD	 $LN36@T_MoveCeil
$LN71@T_MoveCeil:
  00828	00		 DB	 0
  00829	06		 DB	 6
  0082a	06		 DB	 6
  0082b	06		 DB	 6
  0082c	06		 DB	 6
  0082d	06		 DB	 6
  0082e	01		 DB	 1
  0082f	01		 DB	 1
  00830	06		 DB	 6
  00831	06		 DB	 6
  00832	02		 DB	 2
  00833	03		 DB	 3
  00834	06		 DB	 6
  00835	00		 DB	 0
  00836	04		 DB	 4
  00837	05		 DB	 5
$LN73@T_MoveCeil:
  00838	00 00 00 00	 DD	 $LN48@T_MoveCeil
  0083c	00 00 00 00	 DD	 $LN48@T_MoveCeil
  00840	00 00 00 00	 DD	 $LN63@T_MoveCeil
  00844	00 00 00 00	 DD	 $LN63@T_MoveCeil
  00848	00 00 00 00	 DD	 $LN48@T_MoveCeil
  0084c	00 00 00 00	 DD	 $LN43@T_MoveCeil
  00850	00 00 00 00	 DD	 $LN44@T_MoveCeil
  00854	00 00 00 00	 DD	 $LN63@T_MoveCeil
  00858	00 00 00 00	 DD	 $LN63@T_MoveCeil
  0085c	00 00 00 00	 DD	 $LN46@T_MoveCeil
  00860	00 00 00 00	 DD	 $LN45@T_MoveCeil
  00864	00 00 00 00	 DD	 $LN48@T_MoveCeil
  00868	00 00 00 00	 DD	 $LN63@T_MoveCeil
  0086c	00 00 00 00	 DD	 $LN53@T_MoveCeil
  00870	00 00 00 00	 DD	 $LN58@T_MoveCeil
_T_MoveCeiling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_ceilng.c
;	COMDAT _T_CrushCeiling
_TEXT	SEGMENT
tv67 = -76						; size = 4
tv147 = -76						; size = 4
_mp$1 = -8						; size = 4
_res$ = -4						; size = 4
_ceiling$ = 8						; size = 4
_T_CrushCeiling PROC					; COMDAT

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 312  : 	result_e res;
; 313  : 
; 314  : 	if (P_FreezeObjectplace())

  00009	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  0000e	85 c0		 test	 eax, eax
  00010	74 05		 je	 SHORT $LN6@T_CrushCei

; 315  : 		return;

  00012	e9 7d 02 00 00	 jmp	 $LN1@T_CrushCei
$LN6@T_CrushCei:

; 316  : 
; 317  : 	switch (ceiling->direction)

  00017	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0001a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0001d	89 4d b4	 mov	 DWORD PTR tv67[ebp], ecx
  00020	83 7d b4 ff	 cmp	 DWORD PTR tv67[ebp], -1
  00024	0f 84 50 01 00
	00		 je	 $LN18@T_CrushCei
  0002a	83 7d b4 01	 cmp	 DWORD PTR tv67[ebp], 1
  0002e	74 0a		 je	 SHORT $LN8@T_CrushCei
  00030	e9 22 02 00 00	 jmp	 $LN2@T_CrushCei

; 318  : 	{
; 319  : 		case 0: // IN STASIS
; 320  : 			break;

  00035	e9 1d 02 00 00	 jmp	 $LN2@T_CrushCei
$LN8@T_CrushCei:

; 321  : 		case 1: // UP
; 322  : 			if (ceiling->type == crushBothOnce)

  0003a	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0003d	83 78 10 09	 cmp	 DWORD PTR [eax+16], 9
  00041	75 38		 jne	 SHORT $LN9@T_CrushCei

; 323  : 			{
; 324  : 				// Move the floor
; 325  : 				T_MovePlane(ceiling->sector, ceiling->speed, ceiling->bottomheight-(ceiling->topheight-ceiling->bottomheight), false, 0, -ceiling->direction);

  00043	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00046	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00049	f7 d9		 neg	 ecx
  0004b	51		 push	 ecx
  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00053	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00056	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00059	2b 48 18	 sub	 ecx, DWORD PTR [eax+24]
  0005c	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0005f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00062	2b c1		 sub	 eax, ecx
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0006b	52		 push	 edx
  0006c	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0006f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 _T_MovePlane
  00078	83 c4 18	 add	 esp, 24			; 00000018H
$LN9@T_CrushCei:

; 326  : 			}
; 327  : 
; 328  : 			res = T_MovePlane(ceiling->sector, ceiling->speed, ceiling->topheight,

  0007b	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0007e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00081	51		 push	 ecx
  00082	6a 01		 push	 1
  00084	6a 00		 push	 0
  00086	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00089	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00090	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00093	52		 push	 edx
  00094	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00097	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 _T_MovePlane
  000a0	83 c4 18	 add	 esp, 24			; 00000018H
  000a3	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 329  : 				false, 1, ceiling->direction);
; 330  : 
; 331  : 			if (res == pastdest)

  000a6	83 7d fc 02	 cmp	 DWORD PTR _res$[ebp], 2
  000aa	0f 85 c5 00 00
	00		 jne	 $LN13@T_CrushCei

; 332  : 			{
; 333  : 				ceiling->direction = -1;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000b3	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 334  : 
; 335  : 				if (lines[ceiling->sourceline].flags & ML_EFFECT4)

  000ba	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000bd	6b 48 48 4c	 imul	 ecx, DWORD PTR [eax+72], 76
  000c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  000c7	0f bf 44 0a 10	 movsx	 eax, WORD PTR [edx+ecx+16]
  000cc	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000d1	74 0e		 je	 SHORT $LN11@T_CrushCei

; 336  : 					ceiling->speed = ceiling->oldspeed;

  000d3	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  000d9	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000dc	89 50 20	 mov	 DWORD PTR [eax+32], edx
  000df	eb 0e		 jmp	 SHORT $LN12@T_CrushCei
$LN11@T_CrushCei:

; 337  : 				else
; 338  : 					ceiling->speed = ceiling->oldspeed*2;

  000e1	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000e4	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000e7	d1 e1		 shl	 ecx, 1
  000e9	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  000ec	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN12@T_CrushCei:

; 339  : 
; 340  : 				if (ceiling->type == crushCeilOnce
; 341  : 					|| ceiling->type == crushBothOnce)

  000ef	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000f2	83 78 10 08	 cmp	 DWORD PTR [eax+16], 8
  000f6	74 09		 je	 SHORT $LN14@T_CrushCei
  000f8	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000fb	83 78 10 09	 cmp	 DWORD PTR [eax+16], 9
  000ff	75 74		 jne	 SHORT $LN13@T_CrushCei
$LN14@T_CrushCei:

; 342  : 				{
; 343  : 					// Remove
; 344  : 					switch(ceiling->type)

  00101	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00104	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00107	89 4d b4	 mov	 DWORD PTR tv147[ebp], ecx
  0010a	83 7d b4 08	 cmp	 DWORD PTR tv147[ebp], 8
  0010e	74 08		 je	 SHORT $LN15@T_CrushCei
  00110	83 7d b4 09	 cmp	 DWORD PTR tv147[ebp], 9
  00114	74 21		 je	 SHORT $LN16@T_CrushCei
  00116	eb 4c		 jmp	 SHORT $LN17@T_CrushCei
$LN15@T_CrushCei:

; 345  : 					{
; 346  : 						case crushCeilOnce:
; 347  : 							ceiling->sector->ceilspeed = 0;

  00118	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0011b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0011e	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 348  : 							ceiling->sector->ceilingdata = NULL;

  00128	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0012b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0012e	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 349  : 							break;

  00135	eb 2d		 jmp	 SHORT $LN4@T_CrushCei
$LN16@T_CrushCei:

; 350  : 						case crushBothOnce:
; 351  : 							ceiling->sector->floorspeed = 0;

  00137	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0013a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0013d	c7 81 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+232], 0

; 352  : 							ceiling->sector->ceilspeed = 0;

  00147	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0014a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0014d	c7 81 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+236], 0

; 353  : 							ceiling->sector->ceilingdata = NULL;

  00157	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0015a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0015d	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
$LN17@T_CrushCei:
$LN4@T_CrushCei:

; 354  : 							break;
; 355  : 						default:
; 356  : 							break;
; 357  : 					}
; 358  : 					P_RemoveThinker(&ceiling->thinker);

  00164	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 _P_RemoveThinker
  0016d	83 c4 04	 add	 esp, 4

; 359  : 					return;

  00170	e9 1f 01 00 00	 jmp	 $LN1@T_CrushCei
$LN13@T_CrushCei:

; 360  : 				}
; 361  : 			}
; 362  : 			break;

  00175	e9 dd 00 00 00	 jmp	 $LN2@T_CrushCei
$LN18@T_CrushCei:

; 363  : 
; 364  : 		case -1: // DOWN
; 365  : 			if (ceiling->type == crushBothOnce)

  0017a	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0017d	83 78 10 09	 cmp	 DWORD PTR [eax+16], 9
  00181	75 30		 jne	 SHORT $LN19@T_CrushCei

; 366  : 			{
; 367  : 				// Move the floor
; 368  : 				T_MovePlane(ceiling->sector, ceiling->speed, ceiling->bottomheight, ceiling->crush, 0, -ceiling->direction);

  00183	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00186	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00189	f7 d9		 neg	 ecx
  0018b	51		 push	 ecx
  0018c	6a 00		 push	 0
  0018e	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00191	0f b6 42 30	 movzx	 eax, BYTE PTR [edx+48]
  00195	50		 push	 eax
  00196	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00199	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0019c	52		 push	 edx
  0019d	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001a0	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001a3	51		 push	 ecx
  001a4	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  001a7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _T_MovePlane
  001b0	83 c4 18	 add	 esp, 24			; 00000018H
$LN19@T_CrushCei:

; 369  : 			}
; 370  : 
; 371  : 			res = T_MovePlane(ceiling->sector, ceiling->speed, ceiling->bottomheight,

  001b3	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001b6	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001b9	51		 push	 ecx
  001ba	6a 01		 push	 1
  001bc	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  001bf	0f b6 42 30	 movzx	 eax, BYTE PTR [edx+48]
  001c3	50		 push	 eax
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  001c7	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  001ca	52		 push	 edx
  001cb	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001ce	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001d1	51		 push	 ecx
  001d2	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  001d5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 _T_MovePlane
  001de	83 c4 18	 add	 esp, 24			; 00000018H
  001e1	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 372  : 				ceiling->crush, 1, ceiling->direction);
; 373  : 
; 374  : 			if (res == pastdest)

  001e4	83 7d fc 02	 cmp	 DWORD PTR _res$[ebp], 2
  001e8	75 6d		 jne	 SHORT $LN20@T_CrushCei

; 375  : 			{
; 376  : 				mobj_t *mp = (void *)&ceiling->sector->soundorg;

  001ea	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001ed	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001f0	83 c1 20	 add	 ecx, 32			; 00000020H
  001f3	89 4d f8	 mov	 DWORD PTR _mp$1[ebp], ecx

; 377  : 				ceiling->sector->soundorg.z = ceiling->sector->floorheight;

  001f6	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001f9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001fc	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  001ff	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00202	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00204	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 378  : 				S_StartSound(mp,sfx_pstop);

  00207	6a 7a		 push	 122			; 0000007aH
  00209	8b 45 f8	 mov	 eax, DWORD PTR _mp$1[ebp]
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _S_StartSound
  00212	83 c4 08	 add	 esp, 8

; 379  : 
; 380  : 				if (lines[ceiling->sourceline].flags & ML_EFFECT4)

  00215	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00218	6b 48 48 4c	 imul	 ecx, DWORD PTR [eax+72], 76
  0021c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lines
  00222	0f bf 44 0a 10	 movsx	 eax, WORD PTR [edx+ecx+16]
  00227	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0022c	74 0e		 je	 SHORT $LN21@T_CrushCei

; 381  : 					ceiling->speed = ceiling->oldspeed;

  0022e	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00231	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00234	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00237	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0023a	eb 11		 jmp	 SHORT $LN22@T_CrushCei
$LN21@T_CrushCei:

; 382  : 				else
; 383  : 					ceiling->speed = ceiling->oldspeed/2;

  0023c	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0023f	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00242	99		 cdq
  00243	2b c2		 sub	 eax, edx
  00245	d1 f8		 sar	 eax, 1
  00247	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0024a	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$LN22@T_CrushCei:

; 384  : 
; 385  : 				ceiling->direction = 1;

  0024d	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00250	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1
$LN20@T_CrushCei:
$LN2@T_CrushCei:

; 386  : 			}
; 387  : 			break;
; 388  : 	}
; 389  : 
; 390  : 	if (ceiling->type == crushBothOnce)

  00257	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0025a	83 78 10 09	 cmp	 DWORD PTR [eax+16], 9
  0025e	75 1b		 jne	 SHORT $LN23@T_CrushCei

; 391  : 		ceiling->sector->floorspeed = ceiling->speed*(-ceiling->direction);

  00260	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00263	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00266	f7 d9		 neg	 ecx
  00268	8b 55 08	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0026b	0f af 4a 20	 imul	 ecx, DWORD PTR [edx+32]
  0026f	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00272	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00275	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx
$LN23@T_CrushCei:

; 392  : 
; 393  : 	ceiling->sector->ceilspeed = ceiling->speed*ceiling->direction;

  0027b	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0027e	8b 4d 08	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00281	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00284	0f af 51 38	 imul	 edx, DWORD PTR [ecx+56]
  00288	8b 45 08	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0028b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0028e	89 91 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], edx
$LN1@T_CrushCei:

; 394  : }

  00294	5f		 pop	 edi
  00295	5e		 pop	 esi
  00296	5b		 pop	 ebx
  00297	8b e5		 mov	 esp, ebp
  00299	5d		 pop	 ebp
  0029a	c3		 ret	 0
_T_CrushCeiling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_ceilng.c
;	COMDAT _EV_DoCrush
_TEXT	SEGMENT
tv144 = -84						; size = 4
_ceiling$ = -16						; size = 4
_sec$ = -12						; size = 4
_secnum$ = -8						; size = 4
_rtn$ = -4						; size = 4
_line$ = 8						; size = 4
_type$ = 12						; size = 4
_EV_DoCrush PROC					; COMDAT

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 609  : 	INT32 rtn = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 0

; 610  : 	INT32 secnum = -1;

  00010	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _secnum$[ebp], -1
$LN18@EV_DoCrush:

; 611  : 	sector_t *sec;
; 612  : 	ceiling_t *ceiling;
; 613  : 
; 614  : 	while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)

  00017	8b 45 f8	 mov	 eax, DWORD PTR _secnum$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _P_FindSectorFromLineTag
  00024	83 c4 08	 add	 esp, 8
  00027	89 45 f8	 mov	 DWORD PTR _secnum$[ebp], eax
  0002a	83 7d f8 00	 cmp	 DWORD PTR _secnum$[ebp], 0
  0002e	0f 8c 14 02 00
	00		 jl	 $LN3@EV_DoCrush

; 615  : 	{
; 616  : 		sec = &sectors[secnum];

  00034	69 45 f8 f8 00
	00 00		 imul	 eax, DWORD PTR _secnum$[ebp], 248
  0003b	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00041	89 45 f4	 mov	 DWORD PTR _sec$[ebp], eax

; 617  : 
; 618  : 		if (sec->ceilingdata)

  00044	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00047	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0004b	74 02		 je	 SHORT $LN6@EV_DoCrush

; 619  : 			continue;

  0004d	eb c8		 jmp	 SHORT $LN18@EV_DoCrush
$LN6@EV_DoCrush:

; 620  : 
; 621  : 		// new door thinker
; 622  : 		rtn = 1;

  0004f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 1

; 623  : 		ceiling = Z_Calloc(sizeof (*ceiling), PU_LEVSPEC, NULL);

  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	6a 33		 push	 51			; 00000033H
  0005c	6a 4c		 push	 76			; 0000004cH
  0005e	e8 00 00 00 00	 call	 _Z_CallocAlign
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	89 45 f0	 mov	 DWORD PTR _ceiling$[ebp], eax

; 624  : 		P_AddThinker(&ceiling->thinker);

  00069	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _P_AddThinker
  00072	83 c4 04	 add	 esp, 4

; 625  : 		sec->ceilingdata = ceiling;

  00075	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0007b	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 626  : 		ceiling->thinker.function.acp1 = (actionf_p1)T_CrushCeiling;

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00081	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_CrushCeiling

; 627  : 		ceiling->sector = sec;

  00088	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  0008e	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 628  : 		ceiling->crush = true;

  00091	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00094	c6 40 30 01	 mov	 BYTE PTR [eax+48], 1

; 629  : 		ceiling->sourceline = (INT32)(line-lines);

  00098	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0009b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  000a1	99		 cdq
  000a2	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  000a7	f7 f9		 idiv	 ecx
  000a9	8b 55 f0	 mov	 edx, DWORD PTR _ceiling$[ebp]
  000ac	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 630  : 
; 631  : 		if (line->flags & ML_EFFECT4)

  000af	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  000b2	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  000b6	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000bc	74 25		 je	 SHORT $LN7@EV_DoCrush

; 632  : 			ceiling->oldspeed = FixedDiv(abs(line->dx),NEWTICRATERATIO*4*FRACUNIT);

  000be	68 00 00 04 00	 push	 262144			; 00040000H
  000c3	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  000c6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _abs
  000cf	83 c4 04	 add	 esp, 4
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 _FixedDiv
  000d8	83 c4 08	 add	 esp, 8
  000db	8b 55 f0	 mov	 edx, DWORD PTR _ceiling$[ebp]
  000de	89 42 24	 mov	 DWORD PTR [edx+36], eax
  000e1	eb 3b		 jmp	 SHORT $LN8@EV_DoCrush
$LN7@EV_DoCrush:

; 633  : 		else
; 634  : 			ceiling->oldspeed = (R_PointToDist2(line->v2->x, line->v2->y, line->v1->x, line->v1->y)/16)/NEWTICRATERATIO;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000eb	52		 push	 edx
  000ec	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f3	52		 push	 edx
  000f4	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  000f7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000fa	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000fd	52		 push	 edx
  000fe	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00101	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00104	8b 11		 mov	 edx, DWORD PTR [ecx]
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 _R_PointToDist2
  0010c	83 c4 10	 add	 esp, 16			; 00000010H
  0010f	99		 cdq
  00110	83 e2 0f	 and	 edx, 15			; 0000000fH
  00113	03 c2		 add	 eax, edx
  00115	c1 f8 04	 sar	 eax, 4
  00118	8b 4d f0	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0011b	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN8@EV_DoCrush:

; 635  : 
; 636  : 		switch(type)

  0011e	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00121	89 45 ac	 mov	 DWORD PTR tv144[ebp], eax
  00124	83 7d ac 07	 cmp	 DWORD PTR tv144[ebp], 7
  00128	74 15		 je	 SHORT $LN9@EV_DoCrush
  0012a	83 7d ac 08	 cmp	 DWORD PTR tv144[ebp], 8
  0012e	0f 84 a7 00 00
	00		 je	 $LN13@EV_DoCrush
  00134	83 7d ac 09	 cmp	 DWORD PTR tv144[ebp], 9
  00138	74 43		 je	 SHORT $LN10@EV_DoCrush
  0013a	e9 9c 00 00 00	 jmp	 $LN13@EV_DoCrush
$LN9@EV_DoCrush:

; 637  : 		{
; 638  : 			case fastCrushAndRaise: // Up and then down
; 639  : 				ceiling->topheight = P_FindHighestCeilingSurrounding(sec);

  0013f	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 _P_FindHighestCeilingSurrounding
  00148	83 c4 04	 add	 esp, 4
  0014b	8b 4d f0	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0014e	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 640  : 				ceiling->direction = 1;

  00151	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00154	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 641  : 				ceiling->speed = ceiling->oldspeed;

  0015b	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00161	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00164	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 642  : 				ceiling->bottomheight = sec->floorheight + FRACUNIT;

  00167	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	81 c1 00 00 01
	00		 add	 ecx, 65536		; 00010000H
  00172	8b 55 f0	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00175	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 643  : 				break;

  00178	e9 b0 00 00 00	 jmp	 $LN4@EV_DoCrush
$LN10@EV_DoCrush:

; 644  : 			case crushBothOnce:
; 645  : 				ceiling->topheight = sec->ceilingheight;

  0017d	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00180	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  00183	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00186	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 646  : 				ceiling->bottomheight = sec->floorheight + (sec->ceilingheight-sec->floorheight)/2;

  00189	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  0018c	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  0018f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00192	2b 01		 sub	 eax, DWORD PTR [ecx]
  00194	99		 cdq
  00195	2b c2		 sub	 eax, edx
  00197	d1 f8		 sar	 eax, 1
  00199	8b 55 f4	 mov	 edx, DWORD PTR _sec$[ebp]
  0019c	03 02		 add	 eax, DWORD PTR [edx]
  0019e	8b 4d f0	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  001a1	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 647  : 				ceiling->direction = -1;

  001a4	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001a7	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 648  : 
; 649  : 				if (line->flags & ML_EFFECT4)

  001ae	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  001b1	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  001b5	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  001bb	74 0e		 je	 SHORT $LN11@EV_DoCrush

; 650  : 					ceiling->speed = ceiling->oldspeed;

  001bd	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001c0	8b 4d f0	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  001c3	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001c6	89 50 20	 mov	 DWORD PTR [eax+32], edx
  001c9	eb 0e		 jmp	 SHORT $LN12@EV_DoCrush
$LN11@EV_DoCrush:

; 651  : 				else
; 652  : 					ceiling->speed = ceiling->oldspeed*2;

  001cb	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001ce	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001d1	d1 e1		 shl	 ecx, 1
  001d3	8b 55 f0	 mov	 edx, DWORD PTR _ceiling$[ebp]
  001d6	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN12@EV_DoCrush:

; 653  : 
; 654  : 				break;

  001d9	eb 52		 jmp	 SHORT $LN4@EV_DoCrush
$LN13@EV_DoCrush:

; 655  : 			case crushCeilOnce:
; 656  : 			default: // Down and then up.
; 657  : 				ceiling->topheight = sec->ceilingheight;

  001db	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001de	8b 4d f4	 mov	 ecx, DWORD PTR _sec$[ebp]
  001e1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001e4	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 658  : 				ceiling->direction = -1;

  001e7	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001ea	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 659  : 
; 660  : 				if (line->flags & ML_EFFECT4)

  001f1	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  001f4	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  001f8	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  001fe	74 0e		 je	 SHORT $LN15@EV_DoCrush

; 661  : 					ceiling->speed = ceiling->oldspeed;

  00200	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00203	8b 4d f0	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00206	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00209	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0020c	eb 0e		 jmp	 SHORT $LN16@EV_DoCrush
$LN15@EV_DoCrush:

; 662  : 				else
; 663  : 					ceiling->speed = ceiling->oldspeed*2;

  0020e	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00211	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00214	d1 e1		 shl	 ecx, 1
  00216	8b 55 f0	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00219	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
$LN16@EV_DoCrush:

; 664  : 
; 665  : 				ceiling->bottomheight = sec->floorheight + FRACUNIT;

  0021c	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  0021f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00221	81 c1 00 00 01
	00		 add	 ecx, 65536		; 00010000H
  00227	8b 55 f0	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0022a	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN4@EV_DoCrush:

; 666  : 				break;
; 667  : 		}
; 668  : 
; 669  : 		ceiling->tag = sec->tag;

  0022d	8b 45 f4	 mov	 eax, DWORD PTR _sec$[ebp]
  00230	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  00234	8b 55 f0	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00237	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 670  : 		ceiling->type = type;

  0023a	8b 45 f0	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0023d	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00240	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 671  : 	}

  00243	e9 cf fd ff ff	 jmp	 $LN18@EV_DoCrush
$LN3@EV_DoCrush:

; 672  : 	return rtn;

  00248	8b 45 fc	 mov	 eax, DWORD PTR _rtn$[ebp]

; 673  : }

  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	5b		 pop	 ebx
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
_EV_DoCrush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\p_ceilng.c
;	COMDAT _EV_DoCeiling
_TEXT	SEGMENT
tv88 = -88						; size = 4
_ceiling$ = -20						; size = 4
_sec$ = -16						; size = 4
_secnum$ = -12						; size = 4
_firstone$ = -8						; size = 4
_rtn$ = -4						; size = 4
_line$ = 8						; size = 4
_type$ = 12						; size = 4
_EV_DoCeiling PROC					; COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 405  : 	INT32 rtn = 0, firstone = 1;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 0
  00010	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _firstone$[ebp], 1

; 406  : 	INT32 secnum = -1;

  00017	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _secnum$[ebp], -1

; 407  : 	sector_t *sec;
; 408  : 	ceiling_t *ceiling;
; 409  : 
; 410  : 	if (P_FreezeObjectplace())

  0001e	e8 00 00 00 00	 call	 _P_FreezeObjectplace
  00023	85 c0		 test	 eax, eax
  00025	74 07		 je	 SHORT $LN6@EV_DoCeili

; 411  : 		return false;

  00027	33 c0		 xor	 eax, eax
  00029	e9 2a 06 00 00	 jmp	 $LN1@EV_DoCeili
$LN6@EV_DoCeili:

; 412  : 
; 413  : 	while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)

  0002e	8b 45 f4	 mov	 eax, DWORD PTR _secnum$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _P_FindSectorFromLineTag
  0003b	83 c4 08	 add	 esp, 8
  0003e	89 45 f4	 mov	 DWORD PTR _secnum$[ebp], eax
  00041	83 7d f4 00	 cmp	 DWORD PTR _secnum$[ebp], 0
  00045	0f 8c 0a 06 00
	00		 jl	 $LN3@EV_DoCeili

; 414  : 	{
; 415  : 		sec = &sectors[secnum];

  0004b	69 45 f4 f8 00
	00 00		 imul	 eax, DWORD PTR _secnum$[ebp], 248
  00052	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sectors
  00058	89 45 f0	 mov	 DWORD PTR _sec$[ebp], eax

; 416  : 
; 417  : 		if (sec->ceilingdata)

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  0005e	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00062	74 02		 je	 SHORT $LN7@EV_DoCeili

; 418  : 			continue;

  00064	eb c8		 jmp	 SHORT $LN6@EV_DoCeili
$LN7@EV_DoCeili:

; 419  : 
; 420  : 		// new door thinker
; 421  : 		rtn = 1;

  00066	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _rtn$[ebp], 1

; 422  : 		ceiling = Z_Calloc(sizeof (*ceiling), PU_LEVSPEC, NULL);

  0006d	6a 00		 push	 0
  0006f	6a 00		 push	 0
  00071	6a 33		 push	 51			; 00000033H
  00073	6a 4c		 push	 76			; 0000004cH
  00075	e8 00 00 00 00	 call	 _Z_CallocAlign
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	89 45 ec	 mov	 DWORD PTR _ceiling$[ebp], eax

; 423  : 		P_AddThinker(&ceiling->thinker);

  00080	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _P_AddThinker
  00089	83 c4 04	 add	 esp, 4

; 424  : 		sec->ceilingdata = ceiling;

  0008c	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00092	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 425  : 		ceiling->thinker.function.acp1 = (actionf_p1)T_MoveCeiling;

  00095	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00098	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _T_MoveCeiling

; 426  : 		ceiling->sector = sec;

  0009f	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  000a5	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 427  : 		ceiling->crush = false;

  000a8	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000ab	c6 40 30 00	 mov	 BYTE PTR [eax+48], 0

; 428  : 		ceiling->sourceline = (INT32)(line-lines);

  000af	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  000b2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  000b8	99		 cdq
  000b9	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  000be	f7 f9		 idiv	 ecx
  000c0	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  000c3	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 429  : 
; 430  : 		switch (type)

  000c6	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  000c9	89 45 a8	 mov	 DWORD PTR tv88[ebp], eax
  000cc	83 7d a8 0f	 cmp	 DWORD PTR tv88[ebp], 15	; 0000000fH
  000d0	0f 87 5d 05 00
	00		 ja	 $LN36@EV_DoCeili
  000d6	8b 4d a8	 mov	 ecx, DWORD PTR tv88[ebp]
  000d9	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN39@EV_DoCeili[ecx*4]
$LN8@EV_DoCeili:

; 431  : 		{
; 432  : 			case fastCrushAndRaise:
; 433  : 				ceiling->crush = true;

  000e0	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000e3	c6 40 30 01	 mov	 BYTE PTR [eax+48], 1

; 434  : 				ceiling->topheight = sec->ceilingheight;

  000e7	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  000ea	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  000ed	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f0	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 435  : 				ceiling->bottomheight = sec->floorheight + (8*FRACUNIT);

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  000f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f8	81 c1 00 00 08
	00		 add	 ecx, 524288		; 00080000H
  000fe	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00101	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 436  : 				ceiling->direction = -1;

  00104	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00107	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 437  : 				ceiling->speed = CEILSPEED * 2;

  0010e	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00111	c7 40 20 00 00
	02 00		 mov	 DWORD PTR [eax+32], 131072 ; 00020000H

; 438  : 				break;

  00118	e9 16 05 00 00	 jmp	 $LN4@EV_DoCeili
$LN9@EV_DoCeili:

; 439  : 
; 440  : 			case crushAndRaise:
; 441  : 				ceiling->crush = true;

  0011d	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00120	c6 40 30 01	 mov	 BYTE PTR [eax+48], 1

; 442  : 				ceiling->topheight = sec->ceilingheight;

  00124	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00127	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  0012a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012d	89 50 1c	 mov	 DWORD PTR [eax+28], edx
$LN10@EV_DoCeili:

; 443  : 			case lowerAndCrush:
; 444  : 				ceiling->bottomheight = sec->floorheight;

  00130	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00133	8b 4d f0	 mov	 ecx, DWORD PTR _sec$[ebp]
  00136	8b 11		 mov	 edx, DWORD PTR [ecx]
  00138	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 445  : 				ceiling->bottomheight += 4*FRACUNIT;

  0013b	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0013e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00141	81 c1 00 00 04
	00		 add	 ecx, 262144		; 00040000H
  00147	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0014a	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 446  : 				ceiling->direction = -1;

  0014d	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00150	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 447  : 				ceiling->speed = line->dx;

  00157	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  0015d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00160	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 448  : 				break;

  00163	e9 cb 04 00 00	 jmp	 $LN4@EV_DoCeili
$LN11@EV_DoCeili:

; 449  : 
; 450  : 			case raiseToHighest:
; 451  : 				ceiling->topheight = P_FindHighestCeilingSurrounding(sec);

  00168	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _P_FindHighestCeilingSurrounding
  00171	83 c4 04	 add	 esp, 4
  00174	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00177	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 452  : 				ceiling->direction = 1;

  0017a	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0017d	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 453  : 				ceiling->speed = CEILSPEED;

  00184	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00187	c7 40 20 00 00
	01 00		 mov	 DWORD PTR [eax+32], 65536 ; 00010000H

; 454  : 				break;

  0018e	e9 a0 04 00 00	 jmp	 $LN4@EV_DoCeili
$LN12@EV_DoCeili:

; 455  : 
; 456  : 			//SoM: 3/6/2000: Added Boom types
; 457  : 			case lowerToLowest:
; 458  : 				ceiling->bottomheight = P_FindLowestCeilingSurrounding(sec);

  00193	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 _P_FindLowestCeilingSurrounding
  0019c	83 c4 04	 add	 esp, 4
  0019f	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  001a2	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 459  : 				ceiling->direction = -1;

  001a5	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001a8	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 460  : 				ceiling->speed = CEILSPEED;

  001af	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001b2	c7 40 20 00 00
	01 00		 mov	 DWORD PTR [eax+32], 65536 ; 00010000H

; 461  : 				break;

  001b9	e9 75 04 00 00	 jmp	 $LN4@EV_DoCeili
$LN13@EV_DoCeili:

; 462  : 
; 463  : 			case raiseToLowest: // Graue 09-07-2004
; 464  : 				ceiling->topheight = P_FindLowestCeilingSurrounding(sec) - 4*FRACUNIT;

  001be	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 _P_FindLowestCeilingSurrounding
  001c7	83 c4 04	 add	 esp, 4
  001ca	2d 00 00 04 00	 sub	 eax, 262144		; 00040000H
  001cf	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  001d2	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 465  : 				ceiling->direction = 1;

  001d5	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001d8	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 466  : 				ceiling->speed = line->dx; // hack

  001df	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  001e2	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  001e5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001e8	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 467  : 				break;

  001eb	e9 43 04 00 00	 jmp	 $LN4@EV_DoCeili
$LN14@EV_DoCeili:

; 468  : 
; 469  : 			case lowerToLowestFast:
; 470  : 				ceiling->bottomheight = P_FindLowestCeilingSurrounding(sec);

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 _P_FindLowestCeilingSurrounding
  001f9	83 c4 04	 add	 esp, 4
  001fc	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  001ff	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 471  : 				ceiling->direction = -1;

  00202	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00205	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 472  : 				ceiling->speed = FixedDiv(4*FRACUNIT,NEWTICRATERATIO*FRACUNIT);

  0020c	68 00 00 01 00	 push	 65536			; 00010000H
  00211	68 00 00 04 00	 push	 262144			; 00040000H
  00216	e8 00 00 00 00	 call	 _FixedDiv
  0021b	83 c4 08	 add	 esp, 8
  0021e	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00221	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 473  : 				break;

  00224	e9 0a 04 00 00	 jmp	 $LN4@EV_DoCeili
$LN15@EV_DoCeili:

; 474  : 
; 475  : 			case instantRaise:
; 476  : 				ceiling->topheight = P_FindHighestCeilingSurrounding(sec);

  00229	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  0022c	50		 push	 eax
  0022d	e8 00 00 00 00	 call	 _P_FindHighestCeilingSurrounding
  00232	83 c4 04	 add	 esp, 4
  00235	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00238	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 477  : 				ceiling->direction = 1;

  0023b	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0023e	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 478  : 				ceiling->speed = INT32_MAX/2;

  00245	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00248	c7 40 20 ff ff
	ff 3f		 mov	 DWORD PTR [eax+32], 1073741823 ; 3fffffffH

; 479  : 				break;

  0024f	e9 df 03 00 00	 jmp	 $LN4@EV_DoCeili
$LN16@EV_DoCeili:

; 480  : 
; 481  : 			//  Linedef executor excellence
; 482  : 			case moveCeilingByFrontSector:
; 483  : 				ceiling->speed = P_AproxDistance(line->dx, line->dy);

  00254	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00257	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0025a	51		 push	 ecx
  0025b	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  0025e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _P_AproxDistance
  00267	83 c4 08	 add	 esp, 8
  0026a	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0026d	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 484  : 				ceiling->speed = FixedDiv(ceiling->speed,8*FRACUNIT);

  00270	68 00 00 08 00	 push	 524288			; 00080000H
  00275	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00278	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0027b	51		 push	 ecx
  0027c	e8 00 00 00 00	 call	 _FixedDiv
  00281	83 c4 08	 add	 esp, 8
  00284	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00287	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 485  : 				if (line->frontsector->ceilingheight >= sec->ceilingheight) // Move up

  0028a	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0028d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00290	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  00293	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00296	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00299	7c 1b		 jl	 SHORT $LN17@EV_DoCeili

; 486  : 				{
; 487  : 					ceiling->direction = 1;

  0029b	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0029e	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 488  : 					ceiling->topheight = line->frontsector->ceilingheight;

  002a5	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  002a8	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  002ab	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  002ae	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002b1	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 489  : 				}

  002b4	eb 19		 jmp	 SHORT $LN18@EV_DoCeili
$LN17@EV_DoCeili:

; 490  : 				else // Move down
; 491  : 				{
; 492  : 					ceiling->direction = -1;

  002b6	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  002b9	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 493  : 					ceiling->bottomheight = line->frontsector->ceilingheight;

  002c0	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  002c3	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  002c6	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  002c9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002cc	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN18@EV_DoCeili:

; 494  : 				}
; 495  : 
; 496  : 				// chained linedef executing ability
; 497  : 				if (line->flags & ML_BLOCKMONSTERS)

  002cf	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  002d2	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  002d6	83 e1 02	 and	 ecx, 2
  002d9	74 5d		 je	 SHORT $LN19@EV_DoCeili

; 498  : 				{
; 499  : 					// only set it on ONE of the moving sectors (the smallest numbered)
; 500  : 					// and front side x offset must be positive
; 501  : 					if (firstone && sides[line->sidenum[0]].textureoffset > 0)

  002db	83 7d f8 00	 cmp	 DWORD PTR _firstone$[ebp], 0
  002df	74 4b		 je	 SHORT $LN21@EV_DoCeili
  002e1	b8 02 00 00 00	 mov	 eax, 2
  002e6	6b c8 00	 imul	 ecx, eax, 0
  002e9	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  002ec	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  002f1	6b c8 1c	 imul	 ecx, eax, 28
  002f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  002fa	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  002fe	7e 2c		 jle	 SHORT $LN21@EV_DoCeili

; 502  : 						ceiling->texture = (sides[line->sidenum[0]].textureoffset>>FRACBITS) - 32769;

  00300	b8 02 00 00 00	 mov	 eax, 2
  00305	6b c8 00	 imul	 ecx, eax, 0
  00308	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  0030b	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00310	6b c8 1c	 imul	 ecx, eax, 28
  00313	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00319	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0031c	c1 f8 10	 sar	 eax, 16			; 00000010H
  0031f	2d 01 80 00 00	 sub	 eax, 32769		; 00008001H
  00324	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00327	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  0032a	eb 0a		 jmp	 SHORT $LN22@EV_DoCeili
$LN21@EV_DoCeili:

; 503  : 					else
; 504  : 						ceiling->texture = -1;

  0032c	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0032f	c7 40 34 ff ff
	ff ff		 mov	 DWORD PTR [eax+52], -1
$LN22@EV_DoCeili:

; 505  : 				}

  00336	eb 27		 jmp	 SHORT $LN24@EV_DoCeili
$LN19@EV_DoCeili:

; 506  : 
; 507  : 				// flat changing ability
; 508  : 				else if (line->flags & ML_NOCLIMB)

  00338	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0033b	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0033f	83 e1 40	 and	 ecx, 64			; 00000040H
  00342	74 11		 je	 SHORT $LN23@EV_DoCeili

; 509  : 					ceiling->texture = line->frontsector->ceilingpic;

  00344	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00347	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0034a	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0034d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00350	89 42 34	 mov	 DWORD PTR [edx+52], eax
  00353	eb 0a		 jmp	 SHORT $LN24@EV_DoCeili
$LN23@EV_DoCeili:

; 510  : 				else
; 511  : 					ceiling->texture = -1;

  00355	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00358	c7 40 34 ff ff
	ff ff		 mov	 DWORD PTR [eax+52], -1
$LN24@EV_DoCeili:

; 512  : 				break;

  0035f	e9 cf 02 00 00	 jmp	 $LN4@EV_DoCeili
$LN25@EV_DoCeili:

; 513  : 
; 514  : 			// More linedef executor junk
; 515  : 			case instantMoveCeilingByFrontSector:
; 516  : 				ceiling->speed = INT32_MAX/2;

  00364	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00367	c7 40 20 ff ff
	ff 3f		 mov	 DWORD PTR [eax+32], 1073741823 ; 3fffffffH

; 517  : 
; 518  : 				if (line->frontsector->ceilingheight >= sec->ceilingheight) // Move up

  0036e	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00371	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00374	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  00377	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0037a	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0037d	7c 1b		 jl	 SHORT $LN26@EV_DoCeili

; 519  : 				{
; 520  : 					ceiling->direction = 1;

  0037f	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00382	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 521  : 					ceiling->topheight = line->frontsector->ceilingheight;

  00389	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0038c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0038f	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00392	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00395	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 522  : 				}

  00398	eb 19		 jmp	 SHORT $LN27@EV_DoCeili
$LN26@EV_DoCeili:

; 523  : 				else // Move down
; 524  : 				{
; 525  : 					ceiling->direction = -1;

  0039a	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0039d	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 526  : 					ceiling->bottomheight = line->frontsector->ceilingheight;

  003a4	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  003a7	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003aa	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  003ad	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  003b0	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN27@EV_DoCeili:

; 527  : 				}
; 528  : 				ceiling->texture = line->frontsector->ceilingpic;

  003b3	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  003b6	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003b9	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  003bc	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  003bf	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 529  : 				break;

  003c2	e9 6c 02 00 00	 jmp	 $LN4@EV_DoCeili
$LN28@EV_DoCeili:

; 530  : 
; 531  : 			case lowerCeilingByLine:
; 532  : 				ceiling->speed = FixedDiv(abs(line->dx),8*FRACUNIT);

  003c7	68 00 00 08 00	 push	 524288			; 00080000H
  003cc	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  003cf	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003d2	51		 push	 ecx
  003d3	e8 00 00 00 00	 call	 _abs
  003d8	83 c4 04	 add	 esp, 4
  003db	50		 push	 eax
  003dc	e8 00 00 00 00	 call	 _FixedDiv
  003e1	83 c4 08	 add	 esp, 8
  003e4	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  003e7	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 533  : 				ceiling->direction = -1; // Move down

  003ea	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  003ed	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 534  : 				ceiling->bottomheight = sec->ceilingheight - abs(line->dy);

  003f4	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  003f7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003fa	51		 push	 ecx
  003fb	e8 00 00 00 00	 call	 _abs
  00400	83 c4 04	 add	 esp, 4
  00403	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  00406	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00409	2b c8		 sub	 ecx, eax
  0040b	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0040e	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 535  : 				break;

  00411	e9 1d 02 00 00	 jmp	 $LN4@EV_DoCeili
$LN29@EV_DoCeili:

; 536  : 
; 537  : 			case raiseCeilingByLine:
; 538  : 				ceiling->speed = FixedDiv(abs(line->dx),8*FRACUNIT);

  00416	68 00 00 08 00	 push	 524288			; 00080000H
  0041b	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0041e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00421	51		 push	 ecx
  00422	e8 00 00 00 00	 call	 _abs
  00427	83 c4 04	 add	 esp, 4
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 _FixedDiv
  00430	83 c4 08	 add	 esp, 8
  00433	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00436	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 539  : 				ceiling->direction = 1; // Move up

  00439	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0043c	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 540  : 				ceiling->topheight = sec->ceilingheight + abs(line->dy);

  00443	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00446	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00449	51		 push	 ecx
  0044a	e8 00 00 00 00	 call	 _abs
  0044f	83 c4 04	 add	 esp, 4
  00452	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  00455	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00458	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0045b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 541  : 				break;

  0045e	e9 d0 01 00 00	 jmp	 $LN4@EV_DoCeili
$LN30@EV_DoCeili:

; 542  : 
; 543  : 			case bounceCeiling:
; 544  : 				ceiling->speed = P_AproxDistance(line->dx, line->dy); // same speed as elevateContinuous

  00463	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00466	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00469	51		 push	 ecx
  0046a	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  0046d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 _P_AproxDistance
  00476	83 c4 08	 add	 esp, 8
  00479	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0047c	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 545  : 				ceiling->speed = FixedDiv(ceiling->speed,NEWTICRATERATIO*4*FRACUNIT);

  0047f	68 00 00 04 00	 push	 262144			; 00040000H
  00484	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00487	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0048a	51		 push	 ecx
  0048b	e8 00 00 00 00	 call	 _FixedDiv
  00490	83 c4 08	 add	 esp, 8
  00493	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00496	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 546  : 				ceiling->origspeed = ceiling->speed;

  00499	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0049c	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0049f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  004a2	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 547  : 				if (line->frontsector->ceilingheight >= sec->ceilingheight) // Move up

  004a5	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  004a8	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004ab	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  004ae	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004b1	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  004b4	7c 1b		 jl	 SHORT $LN31@EV_DoCeili

; 548  : 				{
; 549  : 					ceiling->direction = 1;

  004b6	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  004b9	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 550  : 					ceiling->topheight = line->frontsector->ceilingheight;

  004c0	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  004c3	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004c6	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  004c9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004cc	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 551  : 				}

  004cf	eb 19		 jmp	 SHORT $LN32@EV_DoCeili
$LN31@EV_DoCeili:

; 552  : 				else // Move down
; 553  : 				{
; 554  : 					ceiling->direction = -1;

  004d1	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  004d4	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 555  : 					ceiling->bottomheight = line->frontsector->ceilingheight;

  004db	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  004de	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004e1	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  004e4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004e7	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN32@EV_DoCeili:

; 556  : 				}
; 557  : 
; 558  : 				// Any delay?
; 559  : 				ceiling->delay = sides[line->sidenum[0]].textureoffset >> FRACBITS;

  004ea	b8 02 00 00 00	 mov	 eax, 2
  004ef	6b c8 00	 imul	 ecx, eax, 0
  004f2	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  004f5	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  004fa	6b c8 1c	 imul	 ecx, eax, 28
  004fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00503	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00506	c1 f8 10	 sar	 eax, 16			; 00000010H
  00509	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  0050c	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 560  : 				ceiling->delaytimer = sides[line->sidenum[0]].rowoffset >> FRACBITS; // Initial delay

  0050f	b8 02 00 00 00	 mov	 eax, 2
  00514	6b c8 00	 imul	 ecx, eax, 0
  00517	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  0051a	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  0051f	6b c8 1c	 imul	 ecx, eax, 28
  00522	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  00528	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0052c	c1 f8 10	 sar	 eax, 16			; 00000010H
  0052f	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00532	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 561  : 
; 562  : 				ceiling->texture = (fixed_t)(line - lines); // hack: use texture to store sourceline number

  00535	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00538	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  0053e	99		 cdq
  0053f	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00544	f7 f9		 idiv	 ecx
  00546	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00549	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 563  : 				break;

  0054c	e9 e2 00 00 00	 jmp	 $LN4@EV_DoCeili
$LN33@EV_DoCeili:

; 564  : 
; 565  : 			case bounceCeilingCrush:
; 566  : 				ceiling->speed = abs(line->dx); // same speed as elevateContinuous

  00551	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00554	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00557	51		 push	 ecx
  00558	e8 00 00 00 00	 call	 _abs
  0055d	83 c4 04	 add	 esp, 4
  00560	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00563	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 567  : 				ceiling->speed = FixedDiv(ceiling->speed,NEWTICRATERATIO*4*FRACUNIT);

  00566	68 00 00 04 00	 push	 262144			; 00040000H
  0056b	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  0056e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00571	51		 push	 ecx
  00572	e8 00 00 00 00	 call	 _FixedDiv
  00577	83 c4 08	 add	 esp, 8
  0057a	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0057d	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 568  : 				ceiling->origspeed = ceiling->speed;

  00580	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00583	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00586	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00589	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 569  : 				if (line->frontsector->ceilingheight >= sec->ceilingheight) // Move up

  0058c	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0058f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00592	8b 55 f0	 mov	 edx, DWORD PTR _sec$[ebp]
  00595	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00598	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0059b	7c 1b		 jl	 SHORT $LN34@EV_DoCeili

; 570  : 				{
; 571  : 					ceiling->direction = 1;

  0059d	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005a0	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 572  : 					ceiling->topheight = line->frontsector->ceilingheight;

  005a7	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  005aa	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  005ad	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  005b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  005b3	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 573  : 				}

  005b6	eb 19		 jmp	 SHORT $LN35@EV_DoCeili
$LN34@EV_DoCeili:

; 574  : 				else // Move down
; 575  : 				{
; 576  : 					ceiling->direction = -1;

  005b8	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  005bb	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 577  : 					ceiling->bottomheight = line->frontsector->ceilingheight;

  005c2	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  005c5	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  005c8	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  005cb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  005ce	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN35@EV_DoCeili:

; 578  : 				}
; 579  : 
; 580  : 				// Any delay?
; 581  : 				ceiling->delay = sides[line->sidenum[0]].textureoffset >> FRACBITS;

  005d1	b8 02 00 00 00	 mov	 eax, 2
  005d6	6b c8 00	 imul	 ecx, eax, 0
  005d9	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  005dc	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  005e1	6b c8 1c	 imul	 ecx, eax, 28
  005e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  005ea	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005ed	c1 f8 10	 sar	 eax, 16			; 00000010H
  005f0	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  005f3	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 582  : 				ceiling->delaytimer = sides[line->sidenum[0]].rowoffset >> FRACBITS; // Initial delay

  005f6	b8 02 00 00 00	 mov	 eax, 2
  005fb	6b c8 00	 imul	 ecx, eax, 0
  005fe	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00601	0f b7 44 0a 16	 movzx	 eax, WORD PTR [edx+ecx+22]
  00606	6b c8 1c	 imul	 ecx, eax, 28
  00609	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sides
  0060f	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00613	c1 f8 10	 sar	 eax, 16			; 00000010H
  00616	8b 4d ec	 mov	 ecx, DWORD PTR _ceiling$[ebp]
  00619	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 583  : 
; 584  : 				ceiling->texture = (fixed_t)(line - lines); // hack: use texture to store sourceline number

  0061c	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0061f	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _lines
  00625	99		 cdq
  00626	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0062b	f7 f9		 idiv	 ecx
  0062d	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  00630	89 42 34	 mov	 DWORD PTR [edx+52], eax
$LN36@EV_DoCeili:
$LN4@EV_DoCeili:

; 585  : 				break;
; 586  : 
; 587  : 			default:
; 588  : 				break;
; 589  : 
; 590  : 		}
; 591  : 
; 592  : 		ceiling->tag = sec->tag;

  00633	8b 45 f0	 mov	 eax, DWORD PTR _sec$[ebp]
  00636	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  0063a	8b 55 ec	 mov	 edx, DWORD PTR _ceiling$[ebp]
  0063d	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 593  : 		ceiling->type = type;

  00640	8b 45 ec	 mov	 eax, DWORD PTR _ceiling$[ebp]
  00643	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00646	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 594  : 		firstone = 0;

  00649	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _firstone$[ebp], 0

; 595  : 	}

  00650	e9 d9 f9 ff ff	 jmp	 $LN6@EV_DoCeili
$LN3@EV_DoCeili:

; 596  : 	return rtn;

  00655	8b 45 fc	 mov	 eax, DWORD PTR _rtn$[ebp]
$LN1@EV_DoCeili:

; 597  : }

  00658	5f		 pop	 edi
  00659	5e		 pop	 esi
  0065a	5b		 pop	 ebx
  0065b	8b e5		 mov	 esp, ebp
  0065d	5d		 pop	 ebp
  0065e	c3		 ret	 0
  0065f	90		 npad	 1
$LN39@EV_DoCeili:
  00660	00 00 00 00	 DD	 $LN11@EV_DoCeili
  00664	00 00 00 00	 DD	 $LN12@EV_DoCeili
  00668	00 00 00 00	 DD	 $LN13@EV_DoCeili
  0066c	00 00 00 00	 DD	 $LN14@EV_DoCeili
  00670	00 00 00 00	 DD	 $LN15@EV_DoCeili
  00674	00 00 00 00	 DD	 $LN10@EV_DoCeili
  00678	00 00 00 00	 DD	 $LN9@EV_DoCeili
  0067c	00 00 00 00	 DD	 $LN8@EV_DoCeili
  00680	00 00 00 00	 DD	 $LN36@EV_DoCeili
  00684	00 00 00 00	 DD	 $LN36@EV_DoCeili
  00688	00 00 00 00	 DD	 $LN16@EV_DoCeili
  0068c	00 00 00 00	 DD	 $LN25@EV_DoCeili
  00690	00 00 00 00	 DD	 $LN28@EV_DoCeili
  00694	00 00 00 00	 DD	 $LN29@EV_DoCeili
  00698	00 00 00 00	 DD	 $LN30@EV_DoCeili
  0069c	00 00 00 00	 DD	 $LN33@EV_DoCeili
_EV_DoCeiling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
END
