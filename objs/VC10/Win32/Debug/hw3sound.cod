; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\hw3sound.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_hws_mode
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_hw3ds_driver:BYTE:04cH
_DATA	ENDS
_BSS	SEGMENT
_hws_mode DD	01H DUP (?)
_BSS	ENDS
PUBLIC	_HW3S_Init
PUBLIC	_HW3S_Shutdown
PUBLIC	_HW3S_GetVersion
PUBLIC	_HW3S_StartSound
PUBLIC	_S_StartAttackSound
PUBLIC	_S_StartScreamSound
PUBLIC	_HW3S_I_StartSound
PUBLIC	_HW3S_StopSoundByNum
PUBLIC	_HW3S_StopSound
PUBLIC	_HW3S_StopSounds
PUBLIC	_HW3S_BeginFrameUpdate
PUBLIC	_HW3S_EndFrameUpdate
PUBLIC	_HW3S_UpdateSources
PUBLIC	_HW3S_SetSfxVolume
PUBLIC	_HW3S_SoundIsPlaying
PUBLIC	_HW3S_SetSourcesNum
PUBLIC	_HW3S_SoundPlaying
PUBLIC	_HW3S_GetSfx
PUBLIC	_HW3S_FreeSfx
PUBLIC	??_C@_0EE@OEJPNFDL@HW3S_SetSourcesNum?3?5Number?5of?5s@ ; `string'
PUBLIC	__real@4166c16c16c16c17
PUBLIC	__real@41800000
PUBLIC	__real@43200000
PUBLIC	__real@44960000
PUBLIC	__real@47800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memset:PROC
EXTRN	_I_Error:PROC
EXTRN	_FixedMul:PROC
EXTRN	_S_GetSfxLumpNum:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_W_LumpLength:PROC
EXTRN	_W_ReadLump:PROC
EXTRN	_Z_ChangeTag2:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_MallocAlign:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_M_Memcpy:DWORD
EXTRN	_S_sfx:BYTE
EXTRN	_cv_numChannels:BYTE
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_mobjinfo:BYTE
EXTRN	_splitscreen:DWORD
EXTRN	_nosound:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_players:BYTE
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
EXTRN	_camera:BYTE
EXTRN	_camera2:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_p_attack_source DB 010H DUP (?)
_p_attack_source2 DB 010H DUP (?)
_p_scream_source DB 010H DUP (?)
_p_scream_source2 DB 010H DUP (?)
_ambient_source DB 020H DUP (?)
_ambient_sdata DB 050H DUP (?)
_sources DD	01H DUP (?)
_num_sources DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@44960000
CONST	SEGMENT
__real@44960000 DD 044960000r			; 1200
CONST	ENDS
;	COMDAT __real@43200000
CONST	SEGMENT
__real@43200000 DD 043200000r			; 160
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@4166c16c16c16c17
CONST	SEGMENT
__real@4166c16c16c16c17 DQ 04166c16c16c16c17r	; 1.19305e+07
CONST	ENDS
;	COMDAT ??_C@_0EE@OEJPNFDL@HW3S_SetSourcesNum?3?5Number?5of?5s@
CONST	SEGMENT
??_C@_0EE@OEJPNFDL@HW3S_SetSourcesNum?3?5Number?5of?5s@ DB 'HW3S_SetSourc'
	DB	'esNum: Number of sound sources cannot be less than %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	049H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0273H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0268H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	01a9H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	06abH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0246H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_Update3DSource
_TEXT	SEGMENT
_data$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_HW3S_Update3DSource PROC				; COMDAT

; 903  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 904  : 	source3D_data_t data;
; 905  : 	data.permanent = 0;

  00013	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _data$[ebp+12], 0

; 906  : 	HW3S_FillSourceParameters(src->origin, &data, src->type);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0001d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00020	51		 push	 ecx
  00021	8d 55 d4	 lea	 edx, DWORD PTR _data$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00028	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _HW3S_FillSourceParameters
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 907  : 	HW3DS.pfnUpdate3DSource(src->handle, &data.pos);

  00034	8d 45 e4	 lea	 eax, DWORD PTR _data$[ebp+16]
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _src$[ebp]
  0003b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003e	52		 push	 edx
  0003f	ff 15 34 00 00
	00		 call	 DWORD PTR _hw3ds_driver+52
  00045	90		 npad	 1

; 908  : 
; 909  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	33 cd		 xor	 ecx, ebp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_HW3S_Update3DSource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_UpdateListener2
_TEXT	SEGMENT
tv206 = -136						; size = 4
tv211 = -136						; size = 4
tv221 = -136						; size = 4
tv227 = -136						; size = 4
_data$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_listener$ = 8						; size = 4
_HW3S_UpdateListener2 PROC				; COMDAT

; 857  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 858  : 	listener_data_t data;
; 859  : 
; 860  : 	if (!listener || !listener->player)

  00016	83 7d 08 00	 cmp	 DWORD PTR _listener$[ebp], 0
  0001a	74 0c		 je	 SHORT $LN3@HW3S_Updat
  0001c	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  0001f	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00026	75 10		 jne	 SHORT $LN2@HW3S_Updat
$LN3@HW3S_Updat:

; 861  : 	{
; 862  : 		HW3DS.pfnUpdateListener(NULL, 2);

  00028	6a 02		 push	 2
  0002a	6a 00		 push	 0
  0002c	ff 15 24 00 00
	00		 call	 DWORD PTR _hw3ds_driver+36
  00032	90		 npad	 1

; 863  : 		return;

  00033	e9 38 02 00 00	 jmp	 $LN1@HW3S_Updat
$LN2@HW3S_Updat:

; 864  : 	}
; 865  : 
; 866  : 	if (camera2.chase)

  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera2, 0
  0003f	0f 84 0d 01 00
	00		 je	 $LN4@HW3S_Updat

; 867  : 	{
; 868  : 		data.x = FIXED_TO_FLOAT(camera2.x);

  00045	f3 0f 2a 05 10
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera2+16
  0004d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00055	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00059	f2 0f 11 45 bc	 movsd	 QWORD PTR _data$[ebp], xmm0

; 869  : 		data.y = FIXED_TO_FLOAT(camera2.y);

  0005e	f3 0f 2a 05 14
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera2+20
  00066	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0006e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00072	f2 0f 11 45 c4	 movsd	 QWORD PTR _data$[ebp+8], xmm0

; 870  : 		data.z = FIXED_TO_FLOAT(camera2.z + camera2.height - (5 * FRACUNIT));

  00077	a1 30 00 00 00	 mov	 eax, DWORD PTR _camera2+48
  0007c	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _camera2+24
  00082	8d 94 01 00 00
	fb ff		 lea	 edx, DWORD PTR [ecx+eax-327680]
  00089	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0008d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00095	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00099	f2 0f 11 45 cc	 movsd	 QWORD PTR _data$[ebp+16], xmm0

; 871  : 
; 872  : 		data.f_angle = ANGLE2DEG(camera2.angle);

  0009e	a1 1c 00 00 00	 mov	 eax, DWORD PTR _camera2+28
  000a3	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv206[ebp], eax
  000a9	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv206[ebp]
  000b1	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv206[ebp]
  000b7	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000ba	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000c3	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  000cb	f2 0f 11 45 d4	 movsd	 QWORD PTR _data$[ebp+24], xmm0

; 873  : 		data.h_angle = ANGLE2DEG(camera2.aiming);

  000d0	a1 04 00 00 00	 mov	 eax, DWORD PTR _camera2+4
  000d5	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv211[ebp], eax
  000db	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv211[ebp]
  000e3	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv211[ebp]
  000e9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000ec	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000f5	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  000fd	f2 0f 11 45 dc	 movsd	 QWORD PTR _data$[ebp+32], xmm0

; 874  : 
; 875  : 		data.momx = TPS(FIXED_TO_FLOAT(camera2.momx));

  00102	f3 0f 2a 05 38
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera2+56
  0010a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00112	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00116	f2 0f 11 45 e4	 movsd	 QWORD PTR _data$[ebp+40], xmm0

; 876  : 		data.momy = TPS(FIXED_TO_FLOAT(camera2.momy));

  0011b	f3 0f 2a 05 3c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera2+60
  00123	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0012b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0012f	f2 0f 11 45 ec	 movsd	 QWORD PTR _data$[ebp+48], xmm0

; 877  : 		data.momz = TPS(FIXED_TO_FLOAT(camera2.momz));

  00134	f3 0f 2a 05 40
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera2+64
  0013c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00144	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00148	f2 0f 11 45 f4	 movsd	 QWORD PTR _data$[ebp+56], xmm0

; 878  : 	}

  0014d	e9 11 01 00 00	 jmp	 $LN5@HW3S_Updat
$LN4@HW3S_Updat:

; 879  : 	else
; 880  : 	{
; 881  : 		data.x = FIXED_TO_FLOAT(listener->x);

  00152	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  00155	f3 0f 2a 40 10	 cvtsi2ss xmm0, DWORD PTR [eax+16]
  0015a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00162	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00166	f2 0f 11 45 bc	 movsd	 QWORD PTR _data$[ebp], xmm0

; 882  : 		data.y = FIXED_TO_FLOAT(listener->y);

  0016b	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  0016e	f3 0f 2a 40 14	 cvtsi2ss xmm0, DWORD PTR [eax+20]
  00173	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0017b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0017f	f2 0f 11 45 c4	 movsd	 QWORD PTR _data$[ebp+8], xmm0

; 883  : 		data.z = FIXED_TO_FLOAT(listener->z + listener->height - (5 * FRACUNIT));

  00184	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  00187	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0018a	8b 55 08	 mov	 edx, DWORD PTR _listener$[ebp]
  0018d	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00190	8d 8c 01 00 00
	fb ff		 lea	 ecx, DWORD PTR [ecx+eax-327680]
  00197	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0019b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  001a3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001a7	f2 0f 11 45 cc	 movsd	 QWORD PTR _data$[ebp+16], xmm0

; 884  : 
; 885  : 		data.f_angle = ANGLE2DEG(listener->angle);

  001ac	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  001af	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001b2	89 8d 78 ff ff
	ff		 mov	 DWORD PTR tv221[ebp], ecx
  001b8	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv221[ebp]
  001c0	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv221[ebp]
  001c6	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  001c9	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  001d2	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  001da	f2 0f 11 45 d4	 movsd	 QWORD PTR _data$[ebp+24], xmm0

; 886  : 		data.h_angle = ANGLE2DEG(listener->player->aiming);

  001df	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  001e2	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001e8	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001eb	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv227[ebp], edx
  001f1	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv227[ebp]
  001f9	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv227[ebp]
  001ff	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00202	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0020b	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  00213	f2 0f 11 45 dc	 movsd	 QWORD PTR _data$[ebp+32], xmm0

; 887  : 
; 888  : 		data.momx = TPS(FIXED_TO_FLOAT(listener->momx));

  00218	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  0021b	f3 0f 2a 40 48	 cvtsi2ss xmm0, DWORD PTR [eax+72]
  00220	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00228	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0022c	f2 0f 11 45 e4	 movsd	 QWORD PTR _data$[ebp+40], xmm0

; 889  : 		data.momy = TPS(FIXED_TO_FLOAT(listener->momy));

  00231	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  00234	f3 0f 2a 40 4c	 cvtsi2ss xmm0, DWORD PTR [eax+76]
  00239	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00241	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00245	f2 0f 11 45 ec	 movsd	 QWORD PTR _data$[ebp+48], xmm0

; 890  : 		data.momz = TPS(FIXED_TO_FLOAT(listener->momz));

  0024a	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  0024d	f3 0f 2a 40 50	 cvtsi2ss xmm0, DWORD PTR [eax+80]
  00252	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0025a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025e	f2 0f 11 45 f4	 movsd	 QWORD PTR _data$[ebp+56], xmm0
$LN5@HW3S_Updat:

; 891  : 	}
; 892  : 
; 893  : 	HW3DS.pfnUpdateListener(&data, 2);

  00263	6a 02		 push	 2
  00265	8d 45 bc	 lea	 eax, DWORD PTR _data$[ebp]
  00268	50		 push	 eax
  00269	ff 15 24 00 00
	00		 call	 DWORD PTR _hw3ds_driver+36
  0026f	90		 npad	 1
$LN1@HW3S_Updat:

; 894  : }

  00270	5f		 pop	 edi
  00271	5e		 pop	 esi
  00272	5b		 pop	 ebx
  00273	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00276	33 cd		 xor	 ecx, ebp
  00278	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027d	8b e5		 mov	 esp, ebp
  0027f	5d		 pop	 ebp
  00280	c3		 ret	 0
_HW3S_UpdateListener2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_UpdateListener
_TEXT	SEGMENT
tv204 = -136						; size = 4
tv209 = -136						; size = 4
tv219 = -136						; size = 4
tv225 = -136						; size = 4
_data$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_listener$ = 8						; size = 4
_HW3S_UpdateListener PROC				; COMDAT

; 821  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 822  : 	listener_data_t data;
; 823  : 
; 824  : 	if (!listener || !listener->player)

  00016	83 7d 08 00	 cmp	 DWORD PTR _listener$[ebp], 0
  0001a	74 0c		 je	 SHORT $LN3@HW3S_Updat
  0001c	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  0001f	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00026	75 05		 jne	 SHORT $LN2@HW3S_Updat
$LN3@HW3S_Updat:

; 825  : 		return;

  00028	e9 38 02 00 00	 jmp	 $LN1@HW3S_Updat
$LN2@HW3S_Updat:

; 826  : 
; 827  : 	if (camera.chase)

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _camera, 0
  00034	0f 84 0d 01 00
	00		 je	 $LN4@HW3S_Updat

; 828  : 	{
; 829  : 		data.x = FIXED_TO_FLOAT(camera.x);

  0003a	f3 0f 2a 05 10
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera+16
  00042	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0004a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0004e	f2 0f 11 45 bc	 movsd	 QWORD PTR _data$[ebp], xmm0

; 830  : 		data.y = FIXED_TO_FLOAT(camera.y);

  00053	f3 0f 2a 05 14
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera+20
  0005b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00063	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00067	f2 0f 11 45 c4	 movsd	 QWORD PTR _data$[ebp+8], xmm0

; 831  : 		data.z = FIXED_TO_FLOAT(camera.z + camera.height - (5 * FRACUNIT));

  0006c	a1 30 00 00 00	 mov	 eax, DWORD PTR _camera+48
  00071	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _camera+24
  00077	8d 94 01 00 00
	fb ff		 lea	 edx, DWORD PTR [ecx+eax-327680]
  0007e	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00082	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0008a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0008e	f2 0f 11 45 cc	 movsd	 QWORD PTR _data$[ebp+16], xmm0

; 832  : 
; 833  : 		data.f_angle = ANGLE2DEG(camera.angle);

  00093	a1 1c 00 00 00	 mov	 eax, DWORD PTR _camera+28
  00098	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv204[ebp], eax
  0009e	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv204[ebp]
  000a6	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv204[ebp]
  000ac	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000af	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000b8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  000c0	f2 0f 11 45 d4	 movsd	 QWORD PTR _data$[ebp+24], xmm0

; 834  : 		data.h_angle = ANGLE2DEG(camera.aiming);

  000c5	a1 04 00 00 00	 mov	 eax, DWORD PTR _camera+4
  000ca	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv209[ebp], eax
  000d0	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv209[ebp]
  000d8	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv209[ebp]
  000de	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000e1	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000ea	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  000f2	f2 0f 11 45 dc	 movsd	 QWORD PTR _data$[ebp+32], xmm0

; 835  : 
; 836  : 		data.momx = TPS(FIXED_TO_FLOAT(camera.momx));

  000f7	f3 0f 2a 05 38
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera+56
  000ff	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00107	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0010b	f2 0f 11 45 e4	 movsd	 QWORD PTR _data$[ebp+40], xmm0

; 837  : 		data.momy = TPS(FIXED_TO_FLOAT(camera.momy));

  00110	f3 0f 2a 05 3c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera+60
  00118	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00120	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00124	f2 0f 11 45 ec	 movsd	 QWORD PTR _data$[ebp+48], xmm0

; 838  : 		data.momz = TPS(FIXED_TO_FLOAT(camera.momz));

  00129	f3 0f 2a 05 40
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _camera+64
  00131	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00139	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0013d	f2 0f 11 45 f4	 movsd	 QWORD PTR _data$[ebp+56], xmm0

; 839  : 	}

  00142	e9 11 01 00 00	 jmp	 $LN5@HW3S_Updat
$LN4@HW3S_Updat:

; 840  : 	else
; 841  : 	{
; 842  : 		data.x = FIXED_TO_FLOAT(listener->x);

  00147	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  0014a	f3 0f 2a 40 10	 cvtsi2ss xmm0, DWORD PTR [eax+16]
  0014f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00157	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0015b	f2 0f 11 45 bc	 movsd	 QWORD PTR _data$[ebp], xmm0

; 843  : 		data.y = FIXED_TO_FLOAT(listener->y);

  00160	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  00163	f3 0f 2a 40 14	 cvtsi2ss xmm0, DWORD PTR [eax+20]
  00168	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00170	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00174	f2 0f 11 45 c4	 movsd	 QWORD PTR _data$[ebp+8], xmm0

; 844  : 		data.z = FIXED_TO_FLOAT(listener->z + listener->height - (5 * FRACUNIT));

  00179	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  0017c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0017f	8b 55 08	 mov	 edx, DWORD PTR _listener$[ebp]
  00182	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00185	8d 8c 01 00 00
	fb ff		 lea	 ecx, DWORD PTR [ecx+eax-327680]
  0018c	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00190	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00198	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0019c	f2 0f 11 45 cc	 movsd	 QWORD PTR _data$[ebp+16], xmm0

; 845  : 
; 846  : 		data.f_angle = ANGLE2DEG(listener->angle);

  001a1	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  001a4	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001a7	89 8d 78 ff ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  001ad	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv219[ebp]
  001b5	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv219[ebp]
  001bb	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  001be	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  001c7	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  001cf	f2 0f 11 45 d4	 movsd	 QWORD PTR _data$[ebp+24], xmm0

; 847  : 		data.h_angle = ANGLE2DEG(listener->player->aiming);

  001d4	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  001d7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001dd	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001e0	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv225[ebp], edx
  001e6	f2 0f 2a 85 78
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv225[ebp]
  001ee	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv225[ebp]
  001f4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001f7	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00200	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4166c16c16c16c17
  00208	f2 0f 11 45 dc	 movsd	 QWORD PTR _data$[ebp+32], xmm0

; 848  : 
; 849  : 		data.momx = TPS(FIXED_TO_FLOAT(listener->momx));

  0020d	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  00210	f3 0f 2a 40 48	 cvtsi2ss xmm0, DWORD PTR [eax+72]
  00215	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0021d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00221	f2 0f 11 45 e4	 movsd	 QWORD PTR _data$[ebp+40], xmm0

; 850  : 		data.momy = TPS(FIXED_TO_FLOAT(listener->momy));

  00226	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  00229	f3 0f 2a 40 4c	 cvtsi2ss xmm0, DWORD PTR [eax+76]
  0022e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00236	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0023a	f2 0f 11 45 ec	 movsd	 QWORD PTR _data$[ebp+48], xmm0

; 851  : 		data.momz = TPS(FIXED_TO_FLOAT(listener->momz));

  0023f	8b 45 08	 mov	 eax, DWORD PTR _listener$[ebp]
  00242	f3 0f 2a 40 50	 cvtsi2ss xmm0, DWORD PTR [eax+80]
  00247	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0024f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00253	f2 0f 11 45 f4	 movsd	 QWORD PTR _data$[ebp+56], xmm0
$LN5@HW3S_Updat:

; 852  : 	}
; 853  : 	HW3DS.pfnUpdateListener(&data, 1);

  00258	6a 01		 push	 1
  0025a	8d 45 bc	 lea	 eax, DWORD PTR _data$[ebp]
  0025d	50		 push	 eax
  0025e	ff 15 24 00 00
	00		 call	 DWORD PTR _hw3ds_driver+36
  00264	90		 npad	 1
$LN1@HW3S_Updat:

; 854  : }

  00265	5f		 pop	 edi
  00266	5e		 pop	 esi
  00267	5b		 pop	 ebx
  00268	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026b	33 cd		 xor	 ecx, ebp
  0026d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00272	8b e5		 mov	 esp, ebp
  00274	5d		 pop	 ebp
  00275	c3		 ret	 0
_HW3S_UpdateListener ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _AmbientPos
_TEXT	SEGMENT
tv78 = -72						; size = 4
_fm$ = -4						; size = 4
_an$ = 8						; size = 4
_AmbientPos PROC					; COMDAT

; 699  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 700  : 	const fixed_t fm = FixedMul(FLOAT_TO_FIXED(MIN_DISTANCE), FINESINE(an>>ANGLETOFINESHIFT));

  00009	8b 45 08	 mov	 eax, DWORD PTR _an$[ebp]
  0000c	c1 e8 13	 shr	 eax, 19			; 00000013H
  0000f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00016	51		 push	 ecx
  00017	68 00 00 a0 00	 push	 10485760		; 00a00000H
  0001c	e8 00 00 00 00	 call	 _FixedMul
  00021	83 c4 08	 add	 esp, 8
  00024	89 45 fc	 mov	 DWORD PTR _fm$[ebp], eax

; 701  : 	return FIXED_TO_FLOAT(fm);

  00027	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _fm$[ebp]
  0002c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00034	f3 0f 11 45 b8	 movss	 DWORD PTR tv78[ebp], xmm0
  00039	d9 45 b8	 fld	 DWORD PTR tv78[ebp]

; 702  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_AmbientPos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_FillSourceParameters
_TEXT	SEGMENT
_an$1 = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_origin$ = 8						; size = 4
_data$ = 12						; size = 4
_c_type$ = 16						; size = 4
_HW3S_FillSourceParameters PROC				; COMDAT

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 314  : 	fixed_t x = 0, y = 0, z = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0

; 315  : 
; 316  : 	data->max_distance = MAX_DISTANCE;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44960000
  00029	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 317  : 	data->min_distance = MIN_DISTANCE;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43200000
  00039	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 318  : 
; 319  : 	if (origin && origin != players[displayplayer].mo)

  0003d	83 7d 08 00	 cmp	 DWORD PTR _origin$[ebp], 0
  00041	0f 84 01 01 00
	00		 je	 $LN2@HW3S_FillS
  00047	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _origin$[ebp]
  00054	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax]
  0005a	0f 84 e8 00 00
	00		 je	 $LN2@HW3S_FillS

; 320  : 	{
; 321  : 		data->head_relative = false;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00063	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 322  : 
; 323  : 		data->pos.momx = TPS(FIXED_TO_FLOAT(origin->momx));

  0006a	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  0006d	f3 0f 2a 40 48	 cvtsi2ss xmm0, DWORD PTR [eax+72]
  00072	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  0007a	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  0007d	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 324  : 		data->pos.momy = TPS(FIXED_TO_FLOAT(origin->momy));

  00082	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  00085	f3 0f 2a 40 4c	 cvtsi2ss xmm0, DWORD PTR [eax+76]
  0008a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00095	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 325  : 		data->pos.momz = TPS(FIXED_TO_FLOAT(origin->momz));

  0009a	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  0009d	f3 0f 2a 40 50	 cvtsi2ss xmm0, DWORD PTR [eax+80]
  000a2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  000ad	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0

; 326  : 
; 327  : 		x = origin->x;

  000b2	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  000b5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b8	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 328  : 		y = origin->y;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  000be	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c1	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 329  : 		z = origin->z;

  000c4	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  000c7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ca	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 330  : 
; 331  : 		if (c_type == CT_ATTACK)

  000cd	83 7d 10 01	 cmp	 DWORD PTR _c_type$[ebp], 1
  000d1	75 5a		 jne	 SHORT $LN4@HW3S_FillS

; 332  : 		{
; 333  : 			const angle_t an = origin->angle >> ANGLETOFINESHIFT;

  000d3	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  000d6	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000d9	c1 e9 13	 shr	 ecx, 19			; 00000013H
  000dc	89 4d f0	 mov	 DWORD PTR _an$1[ebp], ecx

; 334  : 			x += FixedMul(16*FRACUNIT, FINECOSINE(an));

  000df	8b 45 f0	 mov	 eax, DWORD PTR _an$1[ebp]
  000e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  000e8	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000eb	52		 push	 edx
  000ec	68 00 00 10 00	 push	 1048576			; 00100000H
  000f1	e8 00 00 00 00	 call	 _FixedMul
  000f6	83 c4 08	 add	 esp, 8
  000f9	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  000fc	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 335  : 			y += FixedMul(16*FRACUNIT, FINESINE(an));

  000ff	8b 45 f0	 mov	 eax, DWORD PTR _an$1[ebp]
  00102	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00109	51		 push	 ecx
  0010a	68 00 00 10 00	 push	 1048576			; 00100000H
  0010f	e8 00 00 00 00	 call	 _FixedMul
  00114	83 c4 08	 add	 esp, 8
  00117	03 45 f8	 add	 eax, DWORD PTR _y$[ebp]
  0011a	89 45 f8	 mov	 DWORD PTR _y$[ebp], eax

; 336  : 			z += origin->height >> 1;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  00120	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00123	d1 f9		 sar	 ecx, 1
  00125	03 4d f4	 add	 ecx, DWORD PTR _z$[ebp]
  00128	89 4d f4	 mov	 DWORD PTR _z$[ebp], ecx

; 337  : 		}

  0012b	eb 19		 jmp	 SHORT $LN6@HW3S_FillS
$LN4@HW3S_FillS:

; 338  : 
; 339  : 		else if (c_type == CT_SCREAM)

  0012d	83 7d 10 02	 cmp	 DWORD PTR _c_type$[ebp], 2
  00131	75 13		 jne	 SHORT $LN6@HW3S_FillS

; 340  : 			z += origin->height - (5 * FRACUNIT);

  00133	8b 45 08	 mov	 eax, DWORD PTR _origin$[ebp]
  00136	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00139	8b 55 f4	 mov	 edx, DWORD PTR _z$[ebp]
  0013c	8d 84 0a 00 00
	fb ff		 lea	 eax, DWORD PTR [edx+ecx-327680]
  00143	89 45 f4	 mov	 DWORD PTR _z$[ebp], eax
$LN6@HW3S_FillS:

; 341  : 	}

  00146	eb 2b		 jmp	 SHORT $LN3@HW3S_FillS
$LN2@HW3S_FillS:

; 342  : 	else
; 343  : 	{
; 344  : 		data->head_relative = true;

  00148	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0014b	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 345  : 
; 346  : 		data->pos.momx = 0.0f;

  00152	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00155	0f 57 c0	 xorps	 xmm0, xmm0
  00158	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 347  : 		data->pos.momy = 0.0f;

  0015d	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00160	0f 57 c0	 xorps	 xmm0, xmm0
  00163	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0

; 348  : 		data->pos.momz = 0.0f;

  00168	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0016b	0f 57 c0	 xorps	 xmm0, xmm0
  0016e	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0
$LN3@HW3S_FillS:

; 349  : 	}
; 350  : 	data->pos.x = FIXED_TO_FLOAT(x);

  00173	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _x$[ebp]
  00178	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00180	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00183	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 351  : 	data->pos.y = FIXED_TO_FLOAT(y);

  00188	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _y$[ebp]
  0018d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00195	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00198	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 352  : 	data->pos.z = FIXED_TO_FLOAT(z);

  0019d	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _z$[ebp]
  001a2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  001aa	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  001ad	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0

; 353  : }

  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
_HW3S_FillSourceParameters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_GetSource
_TEXT	SEGMENT
_listener$ = -44					; size = 16
_listenmobj$ = -28					; size = 4
_volume$ = -24						; size = 4
_pitch$ = -20						; size = 4
_sep$ = -16						; size = 4
_src$ = -12						; size = 4
_snum$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_origin$ = 8						; size = 4
_sfxinfo$ = 12						; size = 4
_splitsound$ = 16					; size = 4
_HW3S_GetSource PROC					; COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 216  : 	//
; 217  : 	//   If none available, return -1.  Otherwise source #.
; 218  : 	//   source number to use
; 219  : 
; 220  : 	INT32         snum;
; 221  : 	source_t *  src;
; 222  : 	INT32 sep = NORM_SEP, pitch = NORM_PITCH, volume = 255;

  00013	c7 45 f0 80 00
	00 00		 mov	 DWORD PTR _sep$[ebp], 128 ; 00000080H
  0001a	c7 45 ec 80 00
	00 00		 mov	 DWORD PTR _pitch$[ebp], 128 ; 00000080H
  00021	c7 45 e8 ff 00
	00 00		 mov	 DWORD PTR _volume$[ebp], 255 ; 000000ffH

; 223  : 
; 224  : 	mobj_t *listenmobj;
; 225  : 	listener_t listener  = {0,0,0,0};

  00028	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp], 0
  0002f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp+4], 0
  00036	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp+8], 0
  0003d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp+12], 0

; 226  : 
; 227  : 	if (splitsound)

  00044	83 7d 10 00	 cmp	 DWORD PTR _splitsound$[ebp], 0
  00048	74 15		 je	 SHORT $LN8@HW3S_GetSo

; 228  : 		listenmobj = players[displayplayer].mo;

  0004a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00054	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0005a	89 4d e4	 mov	 DWORD PTR _listenmobj$[ebp], ecx
  0005d	eb 13		 jmp	 SHORT $LN9@HW3S_GetSo
$LN8@HW3S_GetSo:

; 229  : 	else
; 230  : 		listenmobj = players[secondarydisplayplayer].mo;

  0005f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00069	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0006f	89 4d e4	 mov	 DWORD PTR _listenmobj$[ebp], ecx
$LN9@HW3S_GetSo:

; 231  : 
; 232  : 	if (splitsound && cv_chasecam2.value)

  00072	83 7d 10 00	 cmp	 DWORD PTR _splitsound$[ebp], 0
  00076	74 2b		 je	 SHORT $LN10@HW3S_GetSo
  00078	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0007f	74 22		 je	 SHORT $LN10@HW3S_GetSo

; 233  : 	{
; 234  : 		listener.x = camera2.x;

  00081	a1 10 00 00 00	 mov	 eax, DWORD PTR _camera2+16
  00086	89 45 d4	 mov	 DWORD PTR _listener$[ebp], eax

; 235  : 		listener.y = camera2.y;

  00089	a1 14 00 00 00	 mov	 eax, DWORD PTR _camera2+20
  0008e	89 45 d8	 mov	 DWORD PTR _listener$[ebp+4], eax

; 236  : 		listener.z = camera2.z;

  00091	a1 18 00 00 00	 mov	 eax, DWORD PTR _camera2+24
  00096	89 45 dc	 mov	 DWORD PTR _listener$[ebp+8], eax

; 237  : 		listener.angle = camera2.angle;

  00099	a1 1c 00 00 00	 mov	 eax, DWORD PTR _camera2+28
  0009e	89 45 e0	 mov	 DWORD PTR _listener$[ebp+12], eax

; 238  : 	}

  000a1	eb 5b		 jmp	 SHORT $LN14@HW3S_GetSo
$LN10@HW3S_GetSo:

; 239  : 	else if (!splitsound && cv_chasecam.value)

  000a3	83 7d 10 00	 cmp	 DWORD PTR _splitsound$[ebp], 0
  000a7	75 2b		 jne	 SHORT $LN12@HW3S_GetSo
  000a9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  000b0	74 22		 je	 SHORT $LN12@HW3S_GetSo

; 240  : 	{
; 241  : 		listener.x = camera.x;

  000b2	a1 10 00 00 00	 mov	 eax, DWORD PTR _camera+16
  000b7	89 45 d4	 mov	 DWORD PTR _listener$[ebp], eax

; 242  : 		listener.y = camera.y;

  000ba	a1 14 00 00 00	 mov	 eax, DWORD PTR _camera+20
  000bf	89 45 d8	 mov	 DWORD PTR _listener$[ebp+4], eax

; 243  : 		listener.z = camera.z;

  000c2	a1 18 00 00 00	 mov	 eax, DWORD PTR _camera+24
  000c7	89 45 dc	 mov	 DWORD PTR _listener$[ebp+8], eax

; 244  : 		listener.angle = camera.angle;

  000ca	a1 1c 00 00 00	 mov	 eax, DWORD PTR _camera+28
  000cf	89 45 e0	 mov	 DWORD PTR _listener$[ebp+12], eax

; 245  : 	}

  000d2	eb 2a		 jmp	 SHORT $LN14@HW3S_GetSo
$LN12@HW3S_GetSo:

; 246  : 	else if (listenmobj)

  000d4	83 7d e4 00	 cmp	 DWORD PTR _listenmobj$[ebp], 0
  000d8	74 24		 je	 SHORT $LN14@HW3S_GetSo

; 247  : 	{
; 248  : 		listener.x = listenmobj->x;

  000da	8b 45 e4	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000dd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e0	89 4d d4	 mov	 DWORD PTR _listener$[ebp], ecx

; 249  : 		listener.y = listenmobj->y;

  000e3	8b 45 e4	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000e9	89 4d d8	 mov	 DWORD PTR _listener$[ebp+4], ecx

; 250  : 		listener.z = listenmobj->z;

  000ec	8b 45 e4	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000ef	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000f2	89 4d dc	 mov	 DWORD PTR _listener$[ebp+8], ecx

; 251  : 		listener.angle = listenmobj->angle;

  000f5	8b 45 e4	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000f8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000fb	89 4d e0	 mov	 DWORD PTR _listener$[ebp+12], ecx
$LN14@HW3S_GetSo:

; 252  : 	}
; 253  : 
; 254  : 	// Find an open source
; 255  : 	for (snum = 0, src = sources; snum < num_sources; src++, snum++)

  000fe	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR _sources
  0010a	89 45 f4	 mov	 DWORD PTR _src$[ebp], eax
  0010d	eb 12		 jmp	 SHORT $LN4@HW3S_GetSo
$LN2@HW3S_GetSo:
  0010f	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  00112	83 c0 10	 add	 eax, 16			; 00000010H
  00115	89 45 f4	 mov	 DWORD PTR _src$[ebp], eax
  00118	8b 4d f8	 mov	 ecx, DWORD PTR _snum$[ebp]
  0011b	83 c1 01	 add	 ecx, 1
  0011e	89 4d f8	 mov	 DWORD PTR _snum$[ebp], ecx
$LN4@HW3S_GetSo:
  00121	8b 45 f8	 mov	 eax, DWORD PTR _snum$[ebp]
  00124	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  0012a	7d 0c		 jge	 SHORT $LN3@HW3S_GetSo

; 256  : 	{
; 257  : 		if (!src->sfxinfo)

  0012c	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  0012f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00132	75 02		 jne	 SHORT $LN15@HW3S_GetSo

; 258  : 			break;

  00134	eb 02		 jmp	 SHORT $LN3@HW3S_GetSo
$LN15@HW3S_GetSo:

; 259  : 
; 260  : #if 0
; 261  : 		if (origin && src->origin ==  origin)
; 262  : 		{
; 263  : 			HW3S_KillSource(snum);
; 264  : 			break;
; 265  : 		}
; 266  : #endif
; 267  : 	}

  00136	eb d7		 jmp	 SHORT $LN2@HW3S_GetSo
$LN3@HW3S_GetSo:

; 268  : 
; 269  : #if 0
; 270  : 	// Check to see if it is audible
; 271  : 	if (origin && origin != listenmobj)
; 272  : 	{
; 273  : 		INT32 rc;
; 274  : 		rc = S_AdjustSoundParams(listenmobj, origin, &volume, &sep, &pitch, sfxinfo);
; 275  : 		if (!rc)
; 276  : 			return -1;
; 277  : 	}
; 278  : #else
; 279  : 	(void)origin;
; 280  : 	(void)pitch;
; 281  : 	(void)volume;
; 282  : 	(void)sep;
; 283  : #endif
; 284  : 
; 285  : 	// None available
; 286  : 	if (snum == num_sources)

  00138	8b 45 f8	 mov	 eax, DWORD PTR _snum$[ebp]
  0013b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00141	75 60		 jne	 SHORT $LN19@HW3S_GetSo

; 287  : 	{
; 288  : 		// Look for lower priority
; 289  : 		for (snum = 0, src = sources; snum < num_sources; src++, snum++)

  00143	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  0014a	a1 00 00 00 00	 mov	 eax, DWORD PTR _sources
  0014f	89 45 f4	 mov	 DWORD PTR _src$[ebp], eax
  00152	eb 12		 jmp	 SHORT $LN7@HW3S_GetSo
$LN5@HW3S_GetSo:
  00154	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  00157	83 c0 10	 add	 eax, 16			; 00000010H
  0015a	89 45 f4	 mov	 DWORD PTR _src$[ebp], eax
  0015d	8b 4d f8	 mov	 ecx, DWORD PTR _snum$[ebp]
  00160	83 c1 01	 add	 ecx, 1
  00163	89 4d f8	 mov	 DWORD PTR _snum$[ebp], ecx
$LN7@HW3S_GetSo:
  00166	8b 45 f8	 mov	 eax, DWORD PTR _snum$[ebp]
  00169	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  0016f	7d 14		 jge	 SHORT $LN6@HW3S_GetSo

; 290  : 			if (src->sfxinfo->priority >= sfxinfo->priority)

  00171	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  00174	8b 08		 mov	 ecx, DWORD PTR [eax]
  00176	8b 55 0c	 mov	 edx, DWORD PTR _sfxinfo$[ebp]
  00179	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0017c	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0017f	7c 02		 jl	 SHORT $LN17@HW3S_GetSo

; 291  : 				break;

  00181	eb 02		 jmp	 SHORT $LN6@HW3S_GetSo
$LN17@HW3S_GetSo:
  00183	eb cf		 jmp	 SHORT $LN5@HW3S_GetSo
$LN6@HW3S_GetSo:

; 292  : 
; 293  : 		if (snum == num_sources)

  00185	8b 45 f8	 mov	 eax, DWORD PTR _snum$[ebp]
  00188	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  0018e	75 07		 jne	 SHORT $LN18@HW3S_GetSo

; 294  : 		{
; 295  : 			// FUCK!  No lower priority.  Sorry, Charlie.
; 296  : 			return -1;

  00190	83 c8 ff	 or	 eax, -1
  00193	eb 11		 jmp	 SHORT $LN1@HW3S_GetSo

; 297  : 		}

  00195	eb 0c		 jmp	 SHORT $LN19@HW3S_GetSo
$LN18@HW3S_GetSo:

; 298  : 		else
; 299  : 		{
; 300  : 			// Otherwise, kick out lower priority
; 301  : 			HW3S_KillSource(snum);

  00197	8b 45 f8	 mov	 eax, DWORD PTR _snum$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _HW3S_KillSource
  001a0	83 c4 04	 add	 esp, 4
$LN19@HW3S_GetSo:

; 302  : 		}
; 303  : 	}
; 304  : 	return snum;

  001a3	8b 45 f8	 mov	 eax, DWORD PTR _snum$[ebp]
$LN1@HW3S_GetSo:

; 305  : }

  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ac	33 cd		 xor	 ecx, ebp
  001ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
_HW3S_GetSource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_KillSource
_TEXT	SEGMENT
_s$ = -4						; size = 4
_snum$ = 8						; size = 4
_HW3S_KillSource PROC					; COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 134  : 	source_t *  s = &sources[snum];

  00009	8b 45 08	 mov	 eax, DWORD PTR _snum$[ebp]
  0000c	c1 e0 04	 shl	 eax, 4
  0000f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sources
  00015	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 135  : 
; 136  : 	if (s->sfxinfo)

  00018	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	74 4c		 je	 SHORT $LN2@HW3S_KillS

; 137  : 	{
; 138  : 		HW3DS.pfnStopSource(s->handle);

  00020	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00023	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00026	51		 push	 ecx
  00027	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  0002d	90		 npad	 1

; 139  : 		HW3DS.pfnKillSource(s->handle);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00031	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00034	51		 push	 ecx
  00035	ff 15 3c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+60
  0003b	90		 npad	 1

; 140  : 		s->handle = -1;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0003f	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 141  : 		s->sfxinfo->usefulness--;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0004e	83 ea 01	 sub	 edx, 1
  00051	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 142  : 		s->origin = NULL;

  00059	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0005c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 143  : 		s->sfxinfo = NULL;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00066	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN2@HW3S_KillS:

; 144  : 	}
; 145  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_HW3S_KillSource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_FreeSfx
_TEXT	SEGMENT
_snum$ = -4						; size = 4
_sfx$ = 8						; size = 4
_HW3S_FreeSfx PROC					; COMDAT

; 1008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1009 : 	INT32 snum;
; 1010 : 
; 1011 : 	for (snum = 0; snum < num_sources; snum++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@HW3S_FreeS
$LN2@HW3S_FreeS:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _snum$[ebp], eax
$LN4@HW3S_FreeS:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00024	7d 24		 jge	 SHORT $LN3@HW3S_FreeS

; 1012 : 	{
; 1013 : 		if (sources[snum].sfxinfo == sfx)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00029	c1 e0 04	 shl	 eax, 4
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  00032	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00035	3b 55 08	 cmp	 edx, DWORD PTR _sfx$[ebp]
  00038	75 0e		 jne	 SHORT $LN5@HW3S_FreeS

; 1014 : 		{
; 1015 : 			HW3S_KillSource(snum);

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _HW3S_KillSource
  00043	83 c4 04	 add	 esp, 4

; 1016 : 			break;

  00046	eb 02		 jmp	 SHORT $LN3@HW3S_FreeS
$LN5@HW3S_FreeS:

; 1017 : 		}
; 1018 : 	}

  00048	eb c8		 jmp	 SHORT $LN2@HW3S_FreeS
$LN3@HW3S_FreeS:

; 1019 : 
; 1020 : 	if (sfx->length > 0)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  0004d	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00051	76 0e		 jbe	 SHORT $LN6@HW3S_FreeS

; 1021 : 		HW3DS.pfnKillSfx((u_int)sfx->length);

  00053	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00056	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00059	51		 push	 ecx
  0005a	ff 15 40 00 00
	00		 call	 DWORD PTR _hw3ds_driver+64
  00060	90		 npad	 1
$LN6@HW3S_FreeS:

; 1022 : 	sfx->length = 0;

  00061	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00064	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1023 : 
; 1024 : 	sfx->lumpnum = LUMPERROR;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  0006e	c7 40 24 ff ff
	ff ff		 mov	 DWORD PTR [eax+36], -1

; 1025 : 
; 1026 : 	Z_Free(sfx->data);

  00075	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00078	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 _Z_Free
  00081	83 c4 04	 add	 esp, 4

; 1027 : 	sfx->data = NULL;

  00084	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00087	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1028 : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
_HW3S_FreeSfx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_GetSfx
_TEXT	SEGMENT
_sfx_data$ = -16					; size = 16
_sfx$ = 8						; size = 4
_HW3S_GetSfx PROC					; COMDAT

; 989  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 990  : 	sfx_data_t      sfx_data;
; 991  : 
; 992  : 	if (sfx->lumpnum == LUMPERROR)

  00009	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  0000c	83 78 24 ff	 cmp	 DWORD PTR [eax+36], -1
  00010	75 12		 jne	 SHORT $LN2@HW3S_GetSf

; 993  : 		sfx->lumpnum = S_GetSfxLumpNum (sfx);

  00012	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _S_GetSfxLumpNum
  0001b	83 c4 04	 add	 esp, 4
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _sfx$[ebp]
  00021	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN2@HW3S_GetSf:

; 994  : 
; 995  : 	sfx_data.length = W_LumpLength(sfx->lumpnum);

  00024	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00027	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 _W_LumpLength
  00030	83 c4 04	 add	 esp, 4
  00033	89 45 f0	 mov	 DWORD PTR _sfx_data$[ebp], eax

; 996  : 	sfx_data.data = Z_Malloc(sfx_data.length, PU_SOUND, &sfx->data);

  00036	6a 00		 push	 0
  00038	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  0003b	83 c0 14	 add	 eax, 20			; 00000014H
  0003e	50		 push	 eax
  0003f	6a 02		 push	 2
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _sfx_data$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _Z_MallocAlign
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	89 45 f4	 mov	 DWORD PTR _sfx_data$[ebp+4], eax

; 997  : 	W_ReadLump(sfx->lumpnum, sfx_data.data);

  00050	8b 45 f4	 mov	 eax, DWORD PTR _sfx_data$[ebp+4]
  00053	50		 push	 eax
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _sfx$[ebp]
  00057	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 _W_ReadLump
  00060	83 c4 08	 add	 esp, 8

; 998  : 	sfx_data.priority = sfx->priority;

  00063	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00066	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00069	89 4d f8	 mov	 DWORD PTR _sfx_data$[ebp+8], ecx

; 999  : 
; 1000 : 	sfx->length = HW3DS.pfnAddSfx(&sfx_data);

  0006c	8d 45 f0	 lea	 eax, DWORD PTR _sfx_data$[ebp]
  0006f	50		 push	 eax
  00070	ff 15 04 00 00
	00		 call	 DWORD PTR _hw3ds_driver+4
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _sfx$[ebp]
  00079	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1001 : 
; 1002 : 	Z_ChangeTag(sfx->data, PU_CACHE);

  0007c	6a 65		 push	 101			; 00000065H
  0007e	8b 45 08	 mov	 eax, DWORD PTR _sfx$[ebp]
  00081	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _Z_ChangeTag2
  0008a	83 c4 08	 add	 esp, 8

; 1003 : 
; 1004 : 	return sfx_data.data;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _sfx_data$[ebp+4]

; 1005 : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_HW3S_GetSfx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_SoundPlaying
_TEXT	SEGMENT
_snum$ = -4						; size = 4
_origin$ = 8						; size = 4
_id$ = 12						; size = 4
_HW3S_SoundPlaying PROC					; COMDAT

; 806  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 807  : 	INT32         snum;
; 808  : 
; 809  : 	for (snum = 0; snum < num_sources; snum++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@HW3S_Sound
$LN2@HW3S_Sound:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _snum$[ebp], eax
$LN4@HW3S_Sound:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00024	7d 55		 jge	 SHORT $LN3@HW3S_Sound

; 810  : 	{
; 811  : 		if (origin &&  sources[snum].origin ==  origin)

  00026	83 7d 08 00	 cmp	 DWORD PTR _origin$[ebp], 0
  0002a	74 1c		 je	 SHORT $LN5@HW3S_Sound
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0002f	c1 e0 04	 shl	 eax, 4
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  00038	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0003c	3b 55 08	 cmp	 edx, DWORD PTR _origin$[ebp]
  0003f	75 07		 jne	 SHORT $LN5@HW3S_Sound

; 812  : 			return 1;

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	eb 35		 jmp	 SHORT $LN1@HW3S_Sound
$LN5@HW3S_Sound:

; 813  : 		if (id != NUMSFX && (size_t)(sources[snum].sfxinfo - S_sfx) == (size_t)id)

  00048	81 7d 0c 63 07
	00 00		 cmp	 DWORD PTR _id$[ebp], 1891 ; 00000763H
  0004f	74 28		 je	 SHORT $LN6@HW3S_Sound
  00051	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00054	c1 e0 04	 shl	 eax, 4
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  0005d	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00060	2d 00 00 00 00	 sub	 eax, OFFSET _S_sfx
  00065	99		 cdq
  00066	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0006b	f7 f9		 idiv	 ecx
  0006d	3b 45 0c	 cmp	 eax, DWORD PTR _id$[ebp]
  00070	75 07		 jne	 SHORT $LN6@HW3S_Sound

; 814  : 			return 1;

  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	eb 04		 jmp	 SHORT $LN1@HW3S_Sound
$LN6@HW3S_Sound:

; 815  : 	}

  00079	eb 97		 jmp	 SHORT $LN2@HW3S_Sound
$LN3@HW3S_Sound:

; 816  : 	return 0;

  0007b	33 c0		 xor	 eax, eax
$LN1@HW3S_Sound:

; 817  : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_HW3S_SoundPlaying ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_SetSourcesNum
_TEXT	SEGMENT
_i$ = -4						; size = 4
_HW3S_SetSourcesNum PROC				; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 105  : 	INT32 i;
; 106  : 
; 107  : 	// Allocating the internal channels for mixing
; 108  : 	// (the maximum number of sounds rendered
; 109  : 	// simultaneously) within zone memory.
; 110  : 	if (sources)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sources, 0
  00010	74 06		 je	 SHORT $LN5@HW3S_SetSo

; 111  : 		HW3S_StopSounds();

  00012	e8 00 00 00 00	 call	 _HW3S_StopSounds
  00017	90		 npad	 1
$LN5@HW3S_SetSo:

; 112  : 	Z_Free(sources);

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _sources
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _Z_Free
  00023	83 c4 04	 add	 esp, 4

; 113  : 
; 114  : 	if (cv_numChannels.value <= STATIC_SOURCES_NUM)

  00026	83 3d 14 00 00
	00 06		 cmp	 DWORD PTR _cv_numChannels+20, 6
  0002d	7f 0f		 jg	 SHORT $LN6@HW3S_SetSo

; 115  : 		I_Error("HW3S_SetSourcesNum: Number of sound sources cannot be less than %d\n", STATIC_SOURCES_NUM + 1);

  0002f	6a 07		 push	 7
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@OEJPNFDL@HW3S_SetSourcesNum?3?5Number?5of?5s@
  00036	e8 00 00 00 00	 call	 _I_Error
  0003b	83 c4 08	 add	 esp, 8
$LN6@HW3S_SetSo:

; 116  : 
; 117  : 	num_sources = cv_numChannels.value - STATIC_SOURCES_NUM;

  0003e	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_numChannels+20
  00043	83 e8 06	 sub	 eax, 6
  00046	a3 00 00 00 00	 mov	 DWORD PTR _num_sources, eax

; 118  : 
; 119  : 	sources = (source_t *) Z_Malloc(num_sources * sizeof (*sources), PU_STATIC, 0);

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 01		 push	 1
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _num_sources
  00056	c1 e0 04	 shl	 eax, 4
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _Z_MallocAlign
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	a3 00 00 00 00	 mov	 DWORD PTR _sources, eax

; 120  : 
; 121  : 	// Free all channels for use
; 122  : 	for (i = 0; i < num_sources; i++)

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN4@HW3S_SetSo
$LN2@HW3S_SetSo:
  00070	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00073	83 c0 01	 add	 eax, 1
  00076	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@HW3S_SetSo:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00082	7d 3d		 jge	 SHORT $LN3@HW3S_SetSo

; 123  : 	{
; 124  : 		sources[i].sfxinfo = NULL;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00087	c1 e0 04	 shl	 eax, 4
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  00090	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 125  : 		sources[i].type = CT_NORMAL;

  00097	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0009a	c1 e0 04	 shl	 eax, 4
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  000a3	c7 44 01 0c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+12], 0

; 126  : 		sources[i].handle = -1;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ae	c1 e0 04	 shl	 eax, 4
  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  000b7	c7 44 01 08 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax+8], -1

; 127  : 	}

  000bf	eb af		 jmp	 SHORT $LN2@HW3S_SetSo
$LN3@HW3S_SetSo:

; 128  : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
_HW3S_SetSourcesNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_SoundIsPlaying
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_HW3S_SoundIsPlaying PROC				; COMDAT

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 802  : 	return HW3DS.pfnIsPlaying(handle);

  00009	8b 45 08	 mov	 eax, DWORD PTR _handle$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 20 00 00
	00		 call	 DWORD PTR _hw3ds_driver+32

; 803  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_HW3S_SoundIsPlaying ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_SetSfxVolume
_TEXT	SEGMENT
_volume$ = 8						; size = 4
_HW3S_SetSfxVolume PROC					; COMDAT

; 897  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 898  : 	HW3DS.pfnSetGlobalSfxVolume(volume);

  00009	8b 45 08	 mov	 eax, DWORD PTR _volume$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 2c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+44
  00013	90		 npad	 1

; 899  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_HW3S_SetSfxVolume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_UpdateSources
_TEXT	SEGMENT
_snum$ = -20						; size = 4
_src$ = -12						; size = 4
_listener2$ = -8					; size = 4
_listener$ = -4						; size = 4
_HW3S_UpdateSources PROC				; COMDAT

; 912  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 913  : 	mobj_t *listener = players[displayplayer].mo;

  00009	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00013	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00019	89 4d fc	 mov	 DWORD PTR _listener$[ebp], ecx

; 914  : 	mobj_t *listener2 = NULL;

  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _listener2$[ebp], 0

; 915  : 	source_t    *src;
; 916  : 	INT32 audible, snum, volume, sep, pitch;
; 917  : 
; 918  : 	if (splitscreen) listener2 = players[secondarydisplayplayer].mo;

  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0002a	74 13		 je	 SHORT $LN5@HW3S_Updat
  0002c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00036	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0003c	89 4d f8	 mov	 DWORD PTR _listener2$[ebp], ecx
$LN5@HW3S_Updat:

; 919  : 
; 920  : 	HW3S_UpdateListener2(listener2);

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _listener2$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _HW3S_UpdateListener2
  00048	83 c4 04	 add	 esp, 4

; 921  : 	HW3S_UpdateListener(listener);

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _listener$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _HW3S_UpdateListener
  00054	83 c4 04	 add	 esp, 4

; 922  : 
; 923  : 	for (snum = 0, src = sources; snum < num_sources; src++, snum++)

  00057	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _sources
  00063	89 45 f4	 mov	 DWORD PTR _src$[ebp], eax
  00066	eb 12		 jmp	 SHORT $LN4@HW3S_Updat
$LN2@HW3S_Updat:
  00068	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  0006b	83 c0 10	 add	 eax, 16			; 00000010H
  0006e	89 45 f4	 mov	 DWORD PTR _src$[ebp], eax
  00071	8b 4d ec	 mov	 ecx, DWORD PTR _snum$[ebp]
  00074	83 c1 01	 add	 ecx, 1
  00077	89 4d ec	 mov	 DWORD PTR _snum$[ebp], ecx
$LN4@HW3S_Updat:
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _snum$[ebp]
  0007d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00083	7d 3b		 jge	 SHORT $LN3@HW3S_Updat

; 924  : 	{
; 925  : 		if (src->sfxinfo)

  00085	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  00088	83 38 00	 cmp	 DWORD PTR [eax], 0
  0008b	74 31		 je	 SHORT $LN7@HW3S_Updat

; 926  : 		{
; 927  : #if 0
; 928  : 			if (HW3DS.pfnIsPlaying(src->handle))
; 929  : 			{
; 930  : 				if (src->origin)
; 931  : 				{
; 932  : 					// initialize parameters
; 933  : 					volume = 255; // 8 bits internal volume precision
; 934  : 					pitch = NORM_PITCH;
; 935  : 					sep = NORM_SEP;
; 936  : 
; 937  : 					// check non-local sounds for distance clipping
; 938  : 					//  or modify their params
; 939  : 					if (src->origin && listener != src->origin && !(listener2 && src->origin == listener2))
; 940  : 					{
; 941  : 						INT32 audible2;
; 942  : 						INT32 volume2 = volume, sep2 = sep, pitch2 = pitch;
; 943  : 						audible = S_AdjustSoundParams(listener, src->origin, &volume, &sep, &pitch,
; 944  : 							src->sfxinfo);
; 945  : 
; 946  : 						if (listener2)
; 947  : 						{
; 948  : 							audible2 = S_AdjustSoundParams(listener2,
; 949  : 								src->origin, &volume2, &sep2, &pitch2, src->sfxinfo);
; 950  : 							if (audible2 && (!audible || (audible && volume2 > volume)))
; 951  : 							{
; 952  : 								audible = true;
; 953  : 								volume = volume2;
; 954  : 								sep = sep2;
; 955  : 								pitch = pitch2;
; 956  : 							}
; 957  : 						}
; 958  : 
; 959  : 						if (audible)
; 960  : 							HW3S_Update3DSource(src); // Update positional sources
; 961  : 						else
; 962  : 							HW3S_KillSource(snum); //Kill it!
; 963  : 					}
; 964  : 				}
; 965  : 			}
; 966  : 			else
; 967  : 			{
; 968  : 				// Source allocated but stopped. Kill.
; 969  : 				HW3S_KillSource(snum);
; 970  : 			}
; 971  : #else
; 972  : 			if (src->origin && listener != src->origin && !(listener2 && src->origin == listener2))

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  00090	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00094	74 28		 je	 SHORT $LN7@HW3S_Updat
  00096	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _listener$[ebp]
  0009c	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0009f	74 1d		 je	 SHORT $LN7@HW3S_Updat
  000a1	83 7d f8 00	 cmp	 DWORD PTR _listener2$[ebp], 0
  000a5	74 0b		 je	 SHORT $LN8@HW3S_Updat
  000a7	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  000aa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ad	3b 4d f8	 cmp	 ecx, DWORD PTR _listener2$[ebp]
  000b0	74 0c		 je	 SHORT $LN7@HW3S_Updat
$LN8@HW3S_Updat:

; 973  : 				HW3S_Update3DSource(src); // Update positional sources

  000b2	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _HW3S_Update3DSource
  000bb	83 c4 04	 add	 esp, 4
$LN7@HW3S_Updat:

; 974  : 			(void)pitch;
; 975  : 			(void)sep;
; 976  : 			(void)volume;
; 977  : 			(void)audible;
; 978  : #endif
; 979  : 		}
; 980  : 	}

  000be	eb a8		 jmp	 SHORT $LN2@HW3S_Updat
$LN3@HW3S_Updat:

; 981  : }

  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
_HW3S_UpdateSources ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_EndFrameUpdate
_TEXT	SEGMENT
_HW3S_EndFrameUpdate PROC				; COMDAT

; 792  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 793  : 	if (hws_mode != HWS_DEFAULT_MODE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hws_mode, 0
  00010	74 07		 je	 SHORT $LN2@HW3S_EndFr

; 794  : 		HW3DS.pfnEndFrameUpdate();

  00012	ff 15 1c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+28
  00018	90		 npad	 1
$LN2@HW3S_EndFr:

; 795  : }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_HW3S_EndFrameUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_BeginFrameUpdate
_TEXT	SEGMENT
_HW3S_BeginFrameUpdate PROC				; COMDAT

; 784  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 785  : 	if (hws_mode != HWS_DEFAULT_MODE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hws_mode, 0
  00010	74 07		 je	 SHORT $LN2@HW3S_Begin

; 786  : 		HW3DS.pfnBeginFrameUpdate();

  00012	ff 15 18 00 00
	00		 call	 DWORD PTR _hw3ds_driver+24
  00018	90		 npad	 1
$LN2@HW3S_Begin:

; 787  : }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_HW3S_BeginFrameUpdate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_StopSounds
_TEXT	SEGMENT
_snum$ = -4						; size = 4
_HW3S_StopSounds PROC					; COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 195  : 	INT32 snum;
; 196  : 
; 197  : 	// kill all playing sounds at start of level
; 198  : 	//  (trust me - a good idea)
; 199  : 	for (snum = 0; snum < num_sources; snum++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@HW3S_StopS
$LN2@HW3S_StopS:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _snum$[ebp], eax
$LN4@HW3S_StopS:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00024	7d 20		 jge	 SHORT $LN3@HW3S_StopS

; 200  : 		if (sources[snum].sfxinfo)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00029	c1 e0 04	 shl	 eax, 4
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  00032	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00036	74 0c		 je	 SHORT $LN5@HW3S_StopS

; 201  : 			HW3S_KillSource(snum);

  00038	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _HW3S_KillSource
  00041	83 c4 04	 add	 esp, 4
$LN5@HW3S_StopS:
  00044	eb cc		 jmp	 SHORT $LN2@HW3S_StopS
$LN3@HW3S_StopS:

; 202  : 
; 203  : 	// Also stop all static sources
; 204  : 	HW3DS.pfnStopSource(p_attack_source.handle);

  00046	a1 08 00 00 00	 mov	 eax, DWORD PTR _p_attack_source+8
  0004b	50		 push	 eax
  0004c	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  00052	90		 npad	 1

; 205  : 	HW3DS.pfnStopSource(p_attack_source2.handle);

  00053	a1 08 00 00 00	 mov	 eax, DWORD PTR _p_attack_source2+8
  00058	50		 push	 eax
  00059	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  0005f	90		 npad	 1

; 206  : 	HW3DS.pfnStopSource(p_scream_source.handle);

  00060	a1 08 00 00 00	 mov	 eax, DWORD PTR _p_scream_source+8
  00065	50		 push	 eax
  00066	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  0006c	90		 npad	 1

; 207  : 	HW3DS.pfnStopSource(p_scream_source2.handle);

  0006d	a1 08 00 00 00	 mov	 eax, DWORD PTR _p_scream_source2+8
  00072	50		 push	 eax
  00073	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  00079	90		 npad	 1

; 208  : 	HW3DS.pfnStopSource(ambient_source.left.handle);

  0007a	a1 08 00 00 00	 mov	 eax, DWORD PTR _ambient_source+8
  0007f	50		 push	 eax
  00080	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  00086	90		 npad	 1

; 209  : 	HW3DS.pfnStopSource(ambient_source.right.handle);

  00087	a1 18 00 00 00	 mov	 eax, DWORD PTR _ambient_source+24
  0008c	50		 push	 eax
  0008d	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  00093	90		 npad	 1

; 210  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_HW3S_StopSounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_StopSound
_TEXT	SEGMENT
_snum$ = -4						; size = 4
_origin$ = 8						; size = 4
_HW3S_StopSound PROC					; COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 166  : 	INT32 snum;
; 167  : 
; 168  : 	for (snum = 0; snum < num_sources; snum++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@HW3S_StopS
$LN2@HW3S_StopS:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _snum$[ebp], eax
$LN4@HW3S_StopS:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00024	7d 37		 jge	 SHORT $LN3@HW3S_StopS

; 169  : 	{
; 170  : 		if (sources[snum].sfxinfo && sources[snum].origin == origin)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00029	c1 e0 04	 shl	 eax, 4
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  00032	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00036	74 23		 je	 SHORT $LN5@HW3S_StopS
  00038	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0003b	c1 e0 04	 shl	 eax, 4
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sources
  00044	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00048	3b 55 08	 cmp	 edx, DWORD PTR _origin$[ebp]
  0004b	75 0e		 jne	 SHORT $LN5@HW3S_StopS

; 171  : 		{
; 172  : 			HW3S_KillSource(snum);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _HW3S_KillSource
  00056	83 c4 04	 add	 esp, 4

; 173  : 			break;

  00059	eb 02		 jmp	 SHORT $LN3@HW3S_StopS
$LN5@HW3S_StopS:

; 174  : 		}
; 175  : 	}

  0005b	eb b5		 jmp	 SHORT $LN2@HW3S_StopS
$LN3@HW3S_StopS:

; 176  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_HW3S_StopSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_StopSoundByNum
_TEXT	SEGMENT
_snum$ = -4						; size = 4
_sfxnum$ = 8						; size = 4
_HW3S_StopSoundByNum PROC				; COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 180  : 	INT32 snum;
; 181  : 
; 182  : 	for (snum = 0; snum < num_sources; snum++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _snum$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@HW3S_StopS
$LN2@HW3S_StopS:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _snum$[ebp], eax
$LN4@HW3S_StopS:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _num_sources
  00024	7d 2b		 jge	 SHORT $LN3@HW3S_StopS

; 183  : 	{
; 184  : 		if (sources[snum].sfxinfo == &S_sfx[sfxnum])

  00026	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00029	c1 e0 04	 shl	 eax, 4
  0002c	6b 4d 08 2c	 imul	 ecx, DWORD PTR _sfxnum$[ebp], 44
  00030	81 c1 00 00 00
	00		 add	 ecx, OFFSET _S_sfx
  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sources
  0003c	39 0c 02	 cmp	 DWORD PTR [edx+eax], ecx
  0003f	75 0e		 jne	 SHORT $LN5@HW3S_StopS

; 185  : 		{
; 186  : 			HW3S_KillSource(snum);

  00041	8b 45 fc	 mov	 eax, DWORD PTR _snum$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _HW3S_KillSource
  0004a	83 c4 04	 add	 esp, 4

; 187  : 			break;

  0004d	eb 02		 jmp	 SHORT $LN3@HW3S_StopS
$LN5@HW3S_StopS:

; 188  : 		}
; 189  : 	}

  0004f	eb c1		 jmp	 SHORT $LN2@HW3S_StopS
$LN3@HW3S_StopS:

; 190  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_HW3S_StopSoundByNum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_I_StartSound
_TEXT	SEGMENT
tv212 = -168						; size = 4
tv244 = -168						; size = 4
tv321 = -168						; size = 4
tv353 = -168						; size = 4
_listener2$ = -100					; size = 16
_listener$ = -84					; size = 16
_listenmobj2$ = -68					; size = 4
_listenmobj$ = -64					; size = 4
_source$ = -60						; size = 4
_s_num$ = -56						; size = 4
_source3d_data$ = -52					; size = 40
_origin$ = -12						; size = 4
_sfx$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_origin_p$ = 8						; size = 4
_source_parm$ = 12					; size = 4
_c_type$ = 16						; size = 4
_sfx_id$ = 20						; size = 4
_volume$ = 24						; size = 4
_pitch$ = 28						; size = 4
_sep$ = 32						; size = 4
_HW3S_I_StartSound PROC					; COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 374  : 	sfxinfo_t       *sfx;
; 375  : 	const mobj_t    *origin = (const mobj_t *)origin_p;

  00016	8b 45 08	 mov	 eax, DWORD PTR _origin_p$[ebp]
  00019	89 45 f4	 mov	 DWORD PTR _origin$[ebp], eax

; 376  : 	source3D_data_t source3d_data;
; 377  : 	INT32             s_num = 0;

  0001c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _s_num$[ebp], 0

; 378  : 	source_t        *source = NULL;

  00023	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], 0

; 379  : 	mobj_t *listenmobj = players[displayplayer].mo;

  0002a	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00034	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0003a	89 4d c0	 mov	 DWORD PTR _listenmobj$[ebp], ecx

; 380  : 	mobj_t *listenmobj2 = NULL;

  0003d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _listenmobj2$[ebp], 0

; 381  : 	listener_t listener  = {0,0,0,0};

  00044	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp], 0
  0004b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp+4], 0
  00052	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp+8], 0
  00059	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _listener$[ebp+12], 0

; 382  : 	listener_t listener2 = {0,0,0,0};

  00060	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _listener2$[ebp], 0
  00067	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _listener2$[ebp+4], 0
  0006e	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _listener2$[ebp+8], 0
  00075	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _listener2$[ebp+12], 0

; 383  : 
; 384  : 	if (splitscreen) listenmobj2 = players[secondarydisplayplayer].mo;

  0007c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00083	74 13		 je	 SHORT $LN2@HW3S_I_Sta
  00085	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0008f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00095	89 4d bc	 mov	 DWORD PTR _listenmobj2$[ebp], ecx
$LN2@HW3S_I_Sta:

; 385  : 
; 386  : 	if (nosound)

  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nosound, 0
  0009f	74 08		 je	 SHORT $LN3@HW3S_I_Sta

; 387  : 		return -1;

  000a1	83 c8 ff	 or	 eax, -1
  000a4	e9 ff 05 00 00	 jmp	 $LN1@HW3S_I_Sta
$LN3@HW3S_I_Sta:

; 388  : 
; 389  : 	if (cv_chasecam.value)

  000a9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  000b0	74 22		 je	 SHORT $LN4@HW3S_I_Sta

; 390  : 	{
; 391  : 		listener.x = camera.x;

  000b2	a1 10 00 00 00	 mov	 eax, DWORD PTR _camera+16
  000b7	89 45 ac	 mov	 DWORD PTR _listener$[ebp], eax

; 392  : 		listener.y = camera.y;

  000ba	a1 14 00 00 00	 mov	 eax, DWORD PTR _camera+20
  000bf	89 45 b0	 mov	 DWORD PTR _listener$[ebp+4], eax

; 393  : 		listener.z = camera.z;

  000c2	a1 18 00 00 00	 mov	 eax, DWORD PTR _camera+24
  000c7	89 45 b4	 mov	 DWORD PTR _listener$[ebp+8], eax

; 394  : 		listener.angle = camera.angle;

  000ca	a1 1c 00 00 00	 mov	 eax, DWORD PTR _camera+28
  000cf	89 45 b8	 mov	 DWORD PTR _listener$[ebp+12], eax

; 395  : 	}

  000d2	eb 3a		 jmp	 SHORT $LN8@HW3S_I_Sta
$LN4@HW3S_I_Sta:

; 396  : 	else if (listenmobj)

  000d4	83 7d c0 00	 cmp	 DWORD PTR _listenmobj$[ebp], 0
  000d8	74 26		 je	 SHORT $LN6@HW3S_I_Sta

; 397  : 	{
; 398  : 		listener.x = listenmobj->x;

  000da	8b 45 c0	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000dd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e0	89 4d ac	 mov	 DWORD PTR _listener$[ebp], ecx

; 399  : 		listener.y = listenmobj->y;

  000e3	8b 45 c0	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000e9	89 4d b0	 mov	 DWORD PTR _listener$[ebp+4], ecx

; 400  : 		listener.z = listenmobj->z;

  000ec	8b 45 c0	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000ef	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000f2	89 4d b4	 mov	 DWORD PTR _listener$[ebp+8], ecx

; 401  : 		listener.angle = listenmobj->angle;

  000f5	8b 45 c0	 mov	 eax, DWORD PTR _listenmobj$[ebp]
  000f8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000fb	89 4d b8	 mov	 DWORD PTR _listener$[ebp+12], ecx

; 402  : 	}

  000fe	eb 0e		 jmp	 SHORT $LN8@HW3S_I_Sta
$LN6@HW3S_I_Sta:

; 403  : 	else if (origin)

  00100	83 7d f4 00	 cmp	 DWORD PTR _origin$[ebp], 0
  00104	74 08		 je	 SHORT $LN8@HW3S_I_Sta

; 404  : 		return -1;

  00106	83 c8 ff	 or	 eax, -1
  00109	e9 9a 05 00 00	 jmp	 $LN1@HW3S_I_Sta
$LN8@HW3S_I_Sta:

; 405  : 
; 406  : 	if (listenmobj2)

  0010e	83 7d bc 00	 cmp	 DWORD PTR _listenmobj2$[ebp], 0
  00112	74 4f		 je	 SHORT $LN11@HW3S_I_Sta

; 407  : 	{
; 408  : 		if (cv_chasecam2.value)

  00114	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0011b	74 22		 je	 SHORT $LN10@HW3S_I_Sta

; 409  : 		{
; 410  : 			listener2.x = camera2.x;

  0011d	a1 10 00 00 00	 mov	 eax, DWORD PTR _camera2+16
  00122	89 45 9c	 mov	 DWORD PTR _listener2$[ebp], eax

; 411  : 			listener2.y = camera2.y;

  00125	a1 14 00 00 00	 mov	 eax, DWORD PTR _camera2+20
  0012a	89 45 a0	 mov	 DWORD PTR _listener2$[ebp+4], eax

; 412  : 			listener2.z = camera2.z;

  0012d	a1 18 00 00 00	 mov	 eax, DWORD PTR _camera2+24
  00132	89 45 a4	 mov	 DWORD PTR _listener2$[ebp+8], eax

; 413  : 			listener2.angle = camera2.angle;

  00135	a1 1c 00 00 00	 mov	 eax, DWORD PTR _camera2+28
  0013a	89 45 a8	 mov	 DWORD PTR _listener2$[ebp+12], eax

; 414  : 		}

  0013d	eb 24		 jmp	 SHORT $LN11@HW3S_I_Sta
$LN10@HW3S_I_Sta:

; 415  : 		else
; 416  : 		{
; 417  : 			listener2.x = listenmobj2->x;

  0013f	8b 45 bc	 mov	 eax, DWORD PTR _listenmobj2$[ebp]
  00142	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00145	89 4d 9c	 mov	 DWORD PTR _listener2$[ebp], ecx

; 418  : 			listener2.y = listenmobj2->y;

  00148	8b 45 bc	 mov	 eax, DWORD PTR _listenmobj2$[ebp]
  0014b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0014e	89 4d a0	 mov	 DWORD PTR _listener2$[ebp+4], ecx

; 419  : 			listener2.z = listenmobj2->z;

  00151	8b 45 bc	 mov	 eax, DWORD PTR _listenmobj2$[ebp]
  00154	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00157	89 4d a4	 mov	 DWORD PTR _listener2$[ebp+8], ecx

; 420  : 			listener2.angle = listenmobj2->angle;

  0015a	8b 45 bc	 mov	 eax, DWORD PTR _listenmobj2$[ebp]
  0015d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00160	89 4d a8	 mov	 DWORD PTR _listener2$[ebp+12], ecx
$LN11@HW3S_I_Sta:

; 421  : 		}
; 422  : 	}
; 423  : 
; 424  : 	sfx = &S_sfx[sfx_id];

  00163	6b 45 14 2c	 imul	 eax, DWORD PTR _sfx_id$[ebp], 44
  00167	05 00 00 00 00	 add	 eax, OFFSET _S_sfx
  0016c	89 45 f8	 mov	 DWORD PTR _sfx$[ebp], eax

; 425  : 
; 426  : 	if (sfx->skinsound!=-1 && origin && origin->skin)

  0016f	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00172	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  00176	74 31		 je	 SHORT $LN12@HW3S_I_Sta
  00178	83 7d f4 00	 cmp	 DWORD PTR _origin$[ebp], 0
  0017c	74 2b		 je	 SHORT $LN12@HW3S_I_Sta
  0017e	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  00181	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  00185	74 22		 je	 SHORT $LN12@HW3S_I_Sta

; 427  : 	{
; 428  : 		// it redirect player sound to the sound in the skin table
; 429  : 		sfx_id = ((skin_t *)origin->skin)->soundsid[sfx->skinsound];

  00187	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  0018a	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  0018d	8b 55 f8	 mov	 edx, DWORD PTR _sfx$[ebp]
  00190	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00193	8b 8c 81 88 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+136]
  0019a	89 4d 14	 mov	 DWORD PTR _sfx_id$[ebp], ecx

; 430  : 		sfx    = &S_sfx[sfx_id];

  0019d	6b 45 14 2c	 imul	 eax, DWORD PTR _sfx_id$[ebp], 44
  001a1	05 00 00 00 00	 add	 eax, OFFSET _S_sfx
  001a6	89 45 f8	 mov	 DWORD PTR _sfx$[ebp], eax
$LN12@HW3S_I_Sta:

; 431  : 	}
; 432  : 
; 433  : 	if (!sfx->data)

  001a9	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  001ac	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  001b0	75 12		 jne	 SHORT $LN13@HW3S_I_Sta

; 434  : 		sfx->data = HW3S_GetSfx(sfx);

  001b2	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 _HW3S_GetSfx
  001bb	83 c4 04	 add	 esp, 4
  001be	8b 4d f8	 mov	 ecx, DWORD PTR _sfx$[ebp]
  001c1	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN13@HW3S_I_Sta:

; 435  : 
; 436  : 	// judgecutor 08-16-2002
; 437  : 	// Sound pitching for both Doom and Heretic
; 438  : #if 0
; 439  : 	if (cv_rndsoundpitch.value)
; 440  : 	{
; 441  : 		/*if (gamemode != heretic)
; 442  : 		{
; 443  : 			if (sfx_id >= sfx_sawup && sfx_id <= sfx_sawhit)
; 444  : 				pitch += 8 - (M_Random()&15);
; 445  : 			else if (sfx_id != sfx_itemup && sfx_id != sfx_tink)
; 446  : 				pitch += 16 - (M_Random()&31);
; 447  : 		}
; 448  : 		else*/
; 449  : 			pitch = 128 + (M_Random() & 7) - (M_Random() & 7);
; 450  : 	}
; 451  : #endif
; 452  : 
; 453  : 	if (pitch < 0)

  001c4	83 7d 1c 00	 cmp	 DWORD PTR _pitch$[ebp], 0
  001c8	7d 07		 jge	 SHORT $LN14@HW3S_I_Sta

; 454  : 		pitch = NORMAL_PITCH;

  001ca	c7 45 1c 80 00
	00 00		 mov	 DWORD PTR _pitch$[ebp], 128 ; 00000080H
$LN14@HW3S_I_Sta:

; 455  : 
; 456  : 	if (pitch > 255)

  001d1	81 7d 1c ff 00
	00 00		 cmp	 DWORD PTR _pitch$[ebp], 255 ; 000000ffH
  001d8	7e 07		 jle	 SHORT $LN15@HW3S_I_Sta

; 457  : 		pitch = 255;

  001da	c7 45 1c ff 00
	00 00		 mov	 DWORD PTR _pitch$[ebp], 255 ; 000000ffH
$LN15@HW3S_I_Sta:

; 458  : 
; 459  : 	if (sep < 0)

  001e1	83 7d 20 00	 cmp	 DWORD PTR _sep$[ebp], 0
  001e5	7d 07		 jge	 SHORT $LN16@HW3S_I_Sta

; 460  : 		sep = 128;

  001e7	c7 45 20 80 00
	00 00		 mov	 DWORD PTR _sep$[ebp], 128 ; 00000080H
$LN16@HW3S_I_Sta:

; 461  : 
; 462  : 	if (splitscreen && listenmobj2) // Copy the sound for the split player

  001ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  001f5	0f 84 56 02 00
	00		 je	 $LN17@HW3S_I_Sta
  001fb	83 7d bc 00	 cmp	 DWORD PTR _listenmobj2$[ebp], 0
  001ff	0f 84 4c 02 00
	00		 je	 $LN17@HW3S_I_Sta

; 463  : 	{
; 464  : 		if (c_type != CT_NORMAL && origin && (origin == listenmobj2))

  00205	83 7d 10 00	 cmp	 DWORD PTR _c_type$[ebp], 0
  00209	74 7d		 je	 SHORT $LN18@HW3S_I_Sta
  0020b	83 7d f4 00	 cmp	 DWORD PTR _origin$[ebp], 0
  0020f	74 77		 je	 SHORT $LN18@HW3S_I_Sta
  00211	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  00214	3b 45 bc	 cmp	 eax, DWORD PTR _listenmobj2$[ebp]
  00217	75 6f		 jne	 SHORT $LN18@HW3S_I_Sta

; 465  : 		{
; 466  : 			if (c_type == CT_ATTACK)

  00219	83 7d 10 01	 cmp	 DWORD PTR _c_type$[ebp], 1
  0021d	75 1a		 jne	 SHORT $LN20@HW3S_I_Sta

; 467  : 			{
; 468  : 				if (origin == listenmobj2)

  0021f	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  00222	3b 45 bc	 cmp	 eax, DWORD PTR _listenmobj2$[ebp]
  00225	75 09		 jne	 SHORT $LN22@HW3S_I_Sta

; 469  : 					source = &p_attack_source;

  00227	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_attack_source
  0022e	eb 07		 jmp	 SHORT $LN23@HW3S_I_Sta
$LN22@HW3S_I_Sta:

; 470  : 				else
; 471  : 					source = &p_attack_source2;

  00230	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_attack_source2
$LN23@HW3S_I_Sta:

; 472  : 			}

  00237	eb 18		 jmp	 SHORT $LN25@HW3S_I_Sta
$LN20@HW3S_I_Sta:

; 473  : 			else
; 474  : 			{
; 475  : 				if (origin == listenmobj2)

  00239	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  0023c	3b 45 bc	 cmp	 eax, DWORD PTR _listenmobj2$[ebp]
  0023f	75 09		 jne	 SHORT $LN24@HW3S_I_Sta

; 476  : 					source = &p_scream_source;

  00241	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_scream_source
  00248	eb 07		 jmp	 SHORT $LN25@HW3S_I_Sta
$LN24@HW3S_I_Sta:

; 477  : 				else
; 478  : 					source = &p_scream_source2;

  0024a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_scream_source2
$LN25@HW3S_I_Sta:

; 479  : 			}
; 480  : 
; 481  : 			if (source->sfxinfo != sfx)

  00251	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  00254	8b 08		 mov	 ecx, DWORD PTR [eax]
  00256	3b 4d f8	 cmp	 ecx, DWORD PTR _sfx$[ebp]
  00259	74 28		 je	 SHORT $LN26@HW3S_I_Sta

; 482  : 			{
; 483  : 				HW3DS.pfnStopSource(source->handle);

  0025b	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  0025e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00261	51		 push	 ecx
  00262	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  00268	90		 npad	 1

; 484  : 				source->handle = HW3DS.pfnReloadSource(source->handle, sfx->volume);

  00269	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  0026c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0026f	51		 push	 ecx
  00270	8b 55 c4	 mov	 edx, DWORD PTR _source$[ebp]
  00273	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00276	50		 push	 eax
  00277	ff 15 38 00 00
	00		 call	 DWORD PTR _hw3ds_driver+56
  0027d	8b 4d c4	 mov	 ecx, DWORD PTR _source$[ebp]
  00280	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN26@HW3S_I_Sta:

; 485  : 				//CONS_Printf("PlayerSound data reloaded\n");
; 486  : 			}
; 487  : 		}

  00283	e9 7c 01 00 00	 jmp	 $LN33@HW3S_I_Sta
$LN18@HW3S_I_Sta:

; 488  : 		else if (c_type == CT_AMBIENT)

  00288	83 7d 10 03	 cmp	 DWORD PTR _c_type$[ebp], 3
  0028c	0f 85 df 00 00
	00		 jne	 $LN27@HW3S_I_Sta

; 489  : 		{
; 490  : 	//        sfx_data_t  outphased_sfx;
; 491  : 
; 492  : 			if (ambient_source.left.sfxinfo != sfx)

  00292	a1 00 00 00 00	 mov	 eax, DWORD PTR _ambient_source
  00297	3b 45 f8	 cmp	 eax, DWORD PTR _sfx$[ebp]
  0029a	74 60		 je	 SHORT $LN29@HW3S_I_Sta

; 493  : 			{
; 494  : 				HW3DS.pfnStopSource(ambient_source.left.handle);

  0029c	a1 08 00 00 00	 mov	 eax, DWORD PTR _ambient_source+8
  002a1	50		 push	 eax
  002a2	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  002a8	90		 npad	 1

; 495  : 				HW3DS.pfnStopSource(ambient_source.right.handle);

  002a9	a1 18 00 00 00	 mov	 eax, DWORD PTR _ambient_source+24
  002ae	50		 push	 eax
  002af	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  002b5	90		 npad	 1

; 496  : 
; 497  : 				// judgecutor:
; 498  : 				// Outphased sfx's temporarily not used!!!
; 499  : 	/*
; 500  : 					outphased_sfx.data = Z_Malloc(sfx_data.length, PU_STATIC, 0);
; 501  : 					make_outphase_sfx(outphased_sfx.data, sfx_data.data, sfx_data.length);
; 502  : 					outphased_sfx.length = sfx_data.length;
; 503  : 					outphased_sfx.id = sfx_data.id;
; 504  : 	*/
; 505  : 				ambient_source.left.handle = HW3DS.pfnReloadSource(ambient_source.left.handle, (u_int)sfx->length);

  002b6	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  002b9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002bc	51		 push	 ecx
  002bd	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _ambient_source+8
  002c3	52		 push	 edx
  002c4	ff 15 38 00 00
	00		 call	 DWORD PTR _hw3ds_driver+56
  002ca	a3 08 00 00 00	 mov	 DWORD PTR _ambient_source+8, eax

; 506  : 				//ambient_source.right.handle = HW3DS.pfnReloadSource(ambient_source.right.handle, &outphased_sfx);
; 507  : 				ambient_source.right.handle = HW3DS.pfnReloadSource(ambient_source.right.handle, (u_int)sfx->length);

  002cf	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  002d2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002d5	51		 push	 ecx
  002d6	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _ambient_source+24
  002dc	52		 push	 edx
  002dd	ff 15 38 00 00
	00		 call	 DWORD PTR _hw3ds_driver+56
  002e3	a3 18 00 00 00	 mov	 DWORD PTR _ambient_source+24, eax

; 508  : 				ambient_source.left.sfxinfo = ambient_source.right.sfxinfo = sfx;

  002e8	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  002eb	a3 10 00 00 00	 mov	 DWORD PTR _ambient_source+16, eax
  002f0	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _ambient_source+16
  002f6	89 0d 00 00 00
	00		 mov	 DWORD PTR _ambient_source, ecx
$LN29@HW3S_I_Sta:

; 509  : 				//Z_Free(outphased_sfx.data);
; 510  : 			}
; 511  : 
; 512  : 			HW3DS.pfnUpdateSourceParms(ambient_source.left.handle, volume, -1);

  002fc	6a ff		 push	 -1
  002fe	8b 45 18	 mov	 eax, DWORD PTR _volume$[ebp]
  00301	50		 push	 eax
  00302	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _ambient_source+8
  00308	51		 push	 ecx
  00309	ff 15 28 00 00
	00		 call	 DWORD PTR _hw3ds_driver+40
  0030f	90		 npad	 1

; 513  : 			HW3DS.pfnUpdateSourceParms(ambient_source.right.handle, volume, -1);

  00310	6a ff		 push	 -1
  00312	8b 45 18	 mov	 eax, DWORD PTR _volume$[ebp]
  00315	50		 push	 eax
  00316	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _ambient_source+24
  0031c	51		 push	 ecx
  0031d	ff 15 28 00 00
	00		 call	 DWORD PTR _hw3ds_driver+40
  00323	90		 npad	 1

; 514  : 
; 515  : 			if (sfx->usefulness++ < 0)

  00324	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00327	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0032a	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv212[ebp], ecx
  00330	8b 55 f8	 mov	 edx, DWORD PTR _sfx$[ebp]
  00333	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00336	83 c0 01	 add	 eax, 1
  00339	8b 4d f8	 mov	 ecx, DWORD PTR _sfx$[ebp]
  0033c	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0033f	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR tv212[ebp], 0
  00346	7d 0a		 jge	 SHORT $LN30@HW3S_I_Sta

; 516  : 				sfx->usefulness = -1;

  00348	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  0034b	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
$LN30@HW3S_I_Sta:

; 517  : 
; 518  : 			// Ambient sound is special case
; 519  : 			HW3DS.pfnStartSource(ambient_source.left.handle);

  00352	a1 08 00 00 00	 mov	 eax, DWORD PTR _ambient_source+8
  00357	50		 push	 eax
  00358	ff 15 0c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+12
  0035e	90		 npad	 1

; 520  : 			HW3DS.pfnStartSource(ambient_source.right.handle);

  0035f	a1 18 00 00 00	 mov	 eax, DWORD PTR _ambient_source+24
  00364	50		 push	 eax
  00365	ff 15 0c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+12
  0036b	90		 npad	 1

; 521  : 		}

  0036c	e9 93 00 00 00	 jmp	 $LN33@HW3S_I_Sta
$LN27@HW3S_I_Sta:

; 522  : 		else
; 523  : 		{
; 524  : 			s_num = HW3S_GetSource(origin, sfx, true);

  00371	6a 01		 push	 1
  00373	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00376	50		 push	 eax
  00377	8b 4d f4	 mov	 ecx, DWORD PTR _origin$[ebp]
  0037a	51		 push	 ecx
  0037b	e8 00 00 00 00	 call	 _HW3S_GetSource
  00380	83 c4 0c	 add	 esp, 12			; 0000000cH
  00383	89 45 c8	 mov	 DWORD PTR _s_num$[ebp], eax

; 525  : 
; 526  : 			if (s_num  < 0)

  00386	83 7d c8 00	 cmp	 DWORD PTR _s_num$[ebp], 0
  0038a	7d 08		 jge	 SHORT $LN31@HW3S_I_Sta

; 527  : 			{
; 528  : 				//CONS_Printf("No free source, aborting\n");
; 529  : 				return -1;

  0038c	83 c8 ff	 or	 eax, -1
  0038f	e9 14 03 00 00	 jmp	 $LN1@HW3S_I_Sta
$LN31@HW3S_I_Sta:

; 530  : 			}
; 531  : 
; 532  : 			source = &sources[s_num];

  00394	8b 45 c8	 mov	 eax, DWORD PTR _s_num$[ebp]
  00397	c1 e0 04	 shl	 eax, 4
  0039a	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sources
  003a0	89 45 c4	 mov	 DWORD PTR _source$[ebp], eax

; 533  : 
; 534  : 			if (origin && c_type == CT_NORMAL)

  003a3	83 7d f4 00	 cmp	 DWORD PTR _origin$[ebp], 0
  003a7	74 46		 je	 SHORT $LN32@HW3S_I_Sta
  003a9	83 7d 10 00	 cmp	 DWORD PTR _c_type$[ebp], 0
  003ad	75 40		 jne	 SHORT $LN32@HW3S_I_Sta

; 535  : 			{
; 536  : 				if (!source_parm)

  003af	83 7d 0c 00	 cmp	 DWORD PTR _source_parm$[ebp], 0
  003b3	75 21		 jne	 SHORT $LN34@HW3S_I_Sta

; 537  : 				{
; 538  : 					source_parm = &source3d_data;

  003b5	8d 45 cc	 lea	 eax, DWORD PTR _source3d_data$[ebp]
  003b8	89 45 0c	 mov	 DWORD PTR _source_parm$[ebp], eax

; 539  : 					source3d_data.permanent = 0;

  003bb	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _source3d_data$[ebp+12], 0

; 540  : 					HW3S_FillSourceParameters(origin, source_parm, c_type);

  003c2	8b 45 10	 mov	 eax, DWORD PTR _c_type$[ebp]
  003c5	50		 push	 eax
  003c6	8b 4d 0c	 mov	 ecx, DWORD PTR _source_parm$[ebp]
  003c9	51		 push	 ecx
  003ca	8b 55 f4	 mov	 edx, DWORD PTR _origin$[ebp]
  003cd	52		 push	 edx
  003ce	e8 00 00 00 00	 call	 _HW3S_FillSourceParameters
  003d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@HW3S_I_Sta:

; 541  : 				}
; 542  : 
; 543  : 				source->handle = HW3DS.pfnAddSource(source_parm, (u_int)sfx->length);

  003d6	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  003d9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003dc	51		 push	 ecx
  003dd	8b 55 0c	 mov	 edx, DWORD PTR _source_parm$[ebp]
  003e0	52		 push	 edx
  003e1	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  003e7	8b 4d c4	 mov	 ecx, DWORD PTR _source$[ebp]
  003ea	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 544  : 			}

  003ed	eb 15		 jmp	 SHORT $LN33@HW3S_I_Sta
$LN32@HW3S_I_Sta:

; 545  : 			else
; 546  : 				source->handle = HW3DS.pfnAddSource(NULL, (u_int)sfx->length);

  003ef	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  003f2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  003f5	51		 push	 ecx
  003f6	6a 00		 push	 0
  003f8	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  003fe	8b 55 c4	 mov	 edx, DWORD PTR _source$[ebp]
  00401	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN33@HW3S_I_Sta:

; 547  : 		}
; 548  : 
; 549  : 		// increase the usefulness
; 550  : 		if (sfx->usefulness++ < 0)

  00404	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00407	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0040a	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv244[ebp], ecx
  00410	8b 55 f8	 mov	 edx, DWORD PTR _sfx$[ebp]
  00413	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00416	83 c0 01	 add	 eax, 1
  00419	8b 4d f8	 mov	 ecx, DWORD PTR _sfx$[ebp]
  0041c	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0041f	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR tv244[ebp], 0
  00426	7d 0a		 jge	 SHORT $LN35@HW3S_I_Sta

; 551  : 			sfx->usefulness = -1;

  00428	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  0042b	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
$LN35@HW3S_I_Sta:

; 552  : 
; 553  : 		source->sfxinfo = sfx;

  00432	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  00435	8b 4d f8	 mov	 ecx, DWORD PTR _sfx$[ebp]
  00438	89 08		 mov	 DWORD PTR [eax], ecx

; 554  : 		source->origin = origin;

  0043a	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  0043d	8b 4d f4	 mov	 ecx, DWORD PTR _origin$[ebp]
  00440	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 555  : 		HW3DS.pfnStartSource(source->handle);

  00443	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  00446	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00449	51		 push	 ecx
  0044a	ff 15 0c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+12
  00450	90		 npad	 1
$LN17@HW3S_I_Sta:

; 556  : 	}
; 557  : 
; 558  : 	if (c_type != CT_NORMAL && origin && (origin == listenmobj))

  00451	83 7d 10 00	 cmp	 DWORD PTR _c_type$[ebp], 0
  00455	74 7d		 je	 SHORT $LN36@HW3S_I_Sta
  00457	83 7d f4 00	 cmp	 DWORD PTR _origin$[ebp], 0
  0045b	74 77		 je	 SHORT $LN36@HW3S_I_Sta
  0045d	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  00460	3b 45 c0	 cmp	 eax, DWORD PTR _listenmobj$[ebp]
  00463	75 6f		 jne	 SHORT $LN36@HW3S_I_Sta

; 559  : 	{
; 560  : 		if (c_type == CT_ATTACK)

  00465	83 7d 10 01	 cmp	 DWORD PTR _c_type$[ebp], 1
  00469	75 1a		 jne	 SHORT $LN38@HW3S_I_Sta

; 561  : 		{
; 562  : 			if (origin == listenmobj)

  0046b	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  0046e	3b 45 c0	 cmp	 eax, DWORD PTR _listenmobj$[ebp]
  00471	75 09		 jne	 SHORT $LN40@HW3S_I_Sta

; 563  : 				source = &p_attack_source;

  00473	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_attack_source
  0047a	eb 07		 jmp	 SHORT $LN41@HW3S_I_Sta
$LN40@HW3S_I_Sta:

; 564  : 			else
; 565  : 				source = &p_attack_source2;

  0047c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_attack_source2
$LN41@HW3S_I_Sta:

; 566  : 		}

  00483	eb 18		 jmp	 SHORT $LN43@HW3S_I_Sta
$LN38@HW3S_I_Sta:

; 567  : 		else
; 568  : 		{
; 569  : 			if (origin == listenmobj)

  00485	8b 45 f4	 mov	 eax, DWORD PTR _origin$[ebp]
  00488	3b 45 c0	 cmp	 eax, DWORD PTR _listenmobj$[ebp]
  0048b	75 09		 jne	 SHORT $LN42@HW3S_I_Sta

; 570  : 				source = &p_scream_source;

  0048d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_scream_source
  00494	eb 07		 jmp	 SHORT $LN43@HW3S_I_Sta
$LN42@HW3S_I_Sta:

; 571  : 			else
; 572  : 				source = &p_scream_source2;

  00496	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _source$[ebp], OFFSET _p_scream_source2
$LN43@HW3S_I_Sta:

; 573  : 		}
; 574  : 
; 575  : 		if (source->sfxinfo != sfx)

  0049d	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  004a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  004a2	3b 4d f8	 cmp	 ecx, DWORD PTR _sfx$[ebp]
  004a5	74 28		 je	 SHORT $LN44@HW3S_I_Sta

; 576  : 		{
; 577  : 			HW3DS.pfnStopSource(source->handle);

  004a7	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  004aa	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004ad	51		 push	 ecx
  004ae	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  004b4	90		 npad	 1

; 578  : 			source->handle = HW3DS.pfnReloadSource(source->handle, sfx->volume);

  004b5	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  004b8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  004bb	51		 push	 ecx
  004bc	8b 55 c4	 mov	 edx, DWORD PTR _source$[ebp]
  004bf	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004c2	50		 push	 eax
  004c3	ff 15 38 00 00
	00		 call	 DWORD PTR _hw3ds_driver+56
  004c9	8b 4d c4	 mov	 ecx, DWORD PTR _source$[ebp]
  004cc	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN44@HW3S_I_Sta:

; 579  : 			//CONS_Printf("PlayerSound data reloaded\n");
; 580  : 		}
; 581  : 	}

  004cf	e9 84 01 00 00	 jmp	 $LN51@HW3S_I_Sta
$LN36@HW3S_I_Sta:

; 582  : 	else if (c_type == CT_AMBIENT)

  004d4	83 7d 10 03	 cmp	 DWORD PTR _c_type$[ebp], 3
  004d8	0f 85 e7 00 00
	00		 jne	 $LN45@HW3S_I_Sta

; 583  : 	{
; 584  : //        sfx_data_t  outphased_sfx;
; 585  : 
; 586  : 		if (ambient_source.left.sfxinfo != sfx)

  004de	a1 00 00 00 00	 mov	 eax, DWORD PTR _ambient_source
  004e3	3b 45 f8	 cmp	 eax, DWORD PTR _sfx$[ebp]
  004e6	74 60		 je	 SHORT $LN47@HW3S_I_Sta

; 587  : 		{
; 588  : 			HW3DS.pfnStopSource(ambient_source.left.handle);

  004e8	a1 08 00 00 00	 mov	 eax, DWORD PTR _ambient_source+8
  004ed	50		 push	 eax
  004ee	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  004f4	90		 npad	 1

; 589  : 			HW3DS.pfnStopSource(ambient_source.right.handle);

  004f5	a1 18 00 00 00	 mov	 eax, DWORD PTR _ambient_source+24
  004fa	50		 push	 eax
  004fb	ff 15 10 00 00
	00		 call	 DWORD PTR _hw3ds_driver+16
  00501	90		 npad	 1

; 590  : 
; 591  : 			// judgecutor:
; 592  : 			// Outphased sfx's temporarily not used!!!
; 593  : /*
; 594  : 				outphased_sfx.data = Z_Malloc(sfx_data.length, PU_STATIC, 0);
; 595  : 				make_outphase_sfx(outphased_sfx.data, sfx_data.data, sfx_data.length);
; 596  : 				outphased_sfx.length = sfx_data.length;
; 597  : 				outphased_sfx.id = sfx_data.id;
; 598  : */
; 599  : 			ambient_source.left.handle = HW3DS.pfnReloadSource(ambient_source.left.handle, (u_int)sfx->length);

  00502	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00505	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00508	51		 push	 ecx
  00509	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _ambient_source+8
  0050f	52		 push	 edx
  00510	ff 15 38 00 00
	00		 call	 DWORD PTR _hw3ds_driver+56
  00516	a3 08 00 00 00	 mov	 DWORD PTR _ambient_source+8, eax

; 600  : 			//ambient_source.right.handle = HW3DS.pfnReloadSource(ambient_source.right.handle, &outphased_sfx);
; 601  : 			ambient_source.right.handle = HW3DS.pfnReloadSource(ambient_source.right.handle, (u_int)sfx->length);

  0051b	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  0051e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00521	51		 push	 ecx
  00522	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _ambient_source+24
  00528	52		 push	 edx
  00529	ff 15 38 00 00
	00		 call	 DWORD PTR _hw3ds_driver+56
  0052f	a3 18 00 00 00	 mov	 DWORD PTR _ambient_source+24, eax

; 602  : 			ambient_source.left.sfxinfo = ambient_source.right.sfxinfo = sfx;

  00534	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00537	a3 10 00 00 00	 mov	 DWORD PTR _ambient_source+16, eax
  0053c	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _ambient_source+16
  00542	89 0d 00 00 00
	00		 mov	 DWORD PTR _ambient_source, ecx
$LN47@HW3S_I_Sta:

; 603  : 			//Z_Free(outphased_sfx.data);
; 604  : 		}
; 605  : 
; 606  : 		HW3DS.pfnUpdateSourceParms(ambient_source.left.handle, volume, -1);

  00548	6a ff		 push	 -1
  0054a	8b 45 18	 mov	 eax, DWORD PTR _volume$[ebp]
  0054d	50		 push	 eax
  0054e	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _ambient_source+8
  00554	51		 push	 ecx
  00555	ff 15 28 00 00
	00		 call	 DWORD PTR _hw3ds_driver+40
  0055b	90		 npad	 1

; 607  : 		HW3DS.pfnUpdateSourceParms(ambient_source.right.handle, volume, -1);

  0055c	6a ff		 push	 -1
  0055e	8b 45 18	 mov	 eax, DWORD PTR _volume$[ebp]
  00561	50		 push	 eax
  00562	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _ambient_source+24
  00568	51		 push	 ecx
  00569	ff 15 28 00 00
	00		 call	 DWORD PTR _hw3ds_driver+40
  0056f	90		 npad	 1

; 608  : 
; 609  : 		if (sfx->usefulness++ < 0)

  00570	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00573	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00576	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv321[ebp], ecx
  0057c	8b 55 f8	 mov	 edx, DWORD PTR _sfx$[ebp]
  0057f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00582	83 c0 01	 add	 eax, 1
  00585	8b 4d f8	 mov	 ecx, DWORD PTR _sfx$[ebp]
  00588	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0058b	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR tv321[ebp], 0
  00592	7d 0a		 jge	 SHORT $LN48@HW3S_I_Sta

; 610  : 			sfx->usefulness = -1;

  00594	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00597	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
$LN48@HW3S_I_Sta:

; 611  : 
; 612  : 		// Ambient sound is special case
; 613  : 		HW3DS.pfnStartSource(ambient_source.left.handle);

  0059e	a1 08 00 00 00	 mov	 eax, DWORD PTR _ambient_source+8
  005a3	50		 push	 eax
  005a4	ff 15 0c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+12
  005aa	90		 npad	 1

; 614  : 		HW3DS.pfnStartSource(ambient_source.right.handle);

  005ab	a1 18 00 00 00	 mov	 eax, DWORD PTR _ambient_source+24
  005b0	50		 push	 eax
  005b1	ff 15 0c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+12
  005b7	90		 npad	 1

; 615  : 		return -1;

  005b8	83 c8 ff	 or	 eax, -1
  005bb	e9 e8 00 00 00	 jmp	 $LN1@HW3S_I_Sta

; 616  : 	}

  005c0	e9 93 00 00 00	 jmp	 $LN51@HW3S_I_Sta
$LN45@HW3S_I_Sta:

; 617  : 	else
; 618  : 	{
; 619  : 		s_num = HW3S_GetSource(origin, sfx, false);

  005c5	6a 00		 push	 0
  005c7	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  005ca	50		 push	 eax
  005cb	8b 4d f4	 mov	 ecx, DWORD PTR _origin$[ebp]
  005ce	51		 push	 ecx
  005cf	e8 00 00 00 00	 call	 _HW3S_GetSource
  005d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  005d7	89 45 c8	 mov	 DWORD PTR _s_num$[ebp], eax

; 620  : 
; 621  : 		if (s_num  < 0)

  005da	83 7d c8 00	 cmp	 DWORD PTR _s_num$[ebp], 0
  005de	7d 08		 jge	 SHORT $LN49@HW3S_I_Sta

; 622  : 		{
; 623  : 			//CONS_Printf("No free source, aborting\n");
; 624  : 			return -1;

  005e0	83 c8 ff	 or	 eax, -1
  005e3	e9 c0 00 00 00	 jmp	 $LN1@HW3S_I_Sta
$LN49@HW3S_I_Sta:

; 625  : 		}
; 626  : 
; 627  : 		source = &sources[s_num];

  005e8	8b 45 c8	 mov	 eax, DWORD PTR _s_num$[ebp]
  005eb	c1 e0 04	 shl	 eax, 4
  005ee	03 05 00 00 00
	00		 add	 eax, DWORD PTR _sources
  005f4	89 45 c4	 mov	 DWORD PTR _source$[ebp], eax

; 628  : 
; 629  : 		if (origin && c_type == CT_NORMAL)

  005f7	83 7d f4 00	 cmp	 DWORD PTR _origin$[ebp], 0
  005fb	74 46		 je	 SHORT $LN50@HW3S_I_Sta
  005fd	83 7d 10 00	 cmp	 DWORD PTR _c_type$[ebp], 0
  00601	75 40		 jne	 SHORT $LN50@HW3S_I_Sta

; 630  : 		{
; 631  : 			if (!source_parm)

  00603	83 7d 0c 00	 cmp	 DWORD PTR _source_parm$[ebp], 0
  00607	75 21		 jne	 SHORT $LN52@HW3S_I_Sta

; 632  : 			{
; 633  : 				source_parm = &source3d_data;

  00609	8d 45 cc	 lea	 eax, DWORD PTR _source3d_data$[ebp]
  0060c	89 45 0c	 mov	 DWORD PTR _source_parm$[ebp], eax

; 634  : 				source3d_data.permanent = 0;

  0060f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _source3d_data$[ebp+12], 0

; 635  : 				HW3S_FillSourceParameters(origin, source_parm, c_type);

  00616	8b 45 10	 mov	 eax, DWORD PTR _c_type$[ebp]
  00619	50		 push	 eax
  0061a	8b 4d 0c	 mov	 ecx, DWORD PTR _source_parm$[ebp]
  0061d	51		 push	 ecx
  0061e	8b 55 f4	 mov	 edx, DWORD PTR _origin$[ebp]
  00621	52		 push	 edx
  00622	e8 00 00 00 00	 call	 _HW3S_FillSourceParameters
  00627	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@HW3S_I_Sta:

; 636  : 			}
; 637  : 
; 638  : 			source->handle = HW3DS.pfnAddSource(source_parm, (u_int)sfx->length);

  0062a	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  0062d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00630	51		 push	 ecx
  00631	8b 55 0c	 mov	 edx, DWORD PTR _source_parm$[ebp]
  00634	52		 push	 edx
  00635	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  0063b	8b 4d c4	 mov	 ecx, DWORD PTR _source$[ebp]
  0063e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 639  : 		}

  00641	eb 15		 jmp	 SHORT $LN51@HW3S_I_Sta
$LN50@HW3S_I_Sta:

; 640  : 		else
; 641  : 			source->handle = HW3DS.pfnAddSource(NULL, (u_int)sfx->length);

  00643	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  00646	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00649	51		 push	 ecx
  0064a	6a 00		 push	 0
  0064c	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  00652	8b 55 c4	 mov	 edx, DWORD PTR _source$[ebp]
  00655	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN51@HW3S_I_Sta:

; 642  : 
; 643  : 	}
; 644  : 
; 645  : 	// increase the usefulness
; 646  : 	if (sfx->usefulness++ < 0)

  00658	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  0065b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0065e	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv353[ebp], ecx
  00664	8b 55 f8	 mov	 edx, DWORD PTR _sfx$[ebp]
  00667	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0066a	83 c0 01	 add	 eax, 1
  0066d	8b 4d f8	 mov	 ecx, DWORD PTR _sfx$[ebp]
  00670	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00673	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR tv353[ebp], 0
  0067a	7d 0a		 jge	 SHORT $LN53@HW3S_I_Sta

; 647  : 		sfx->usefulness = -1;

  0067c	8b 45 f8	 mov	 eax, DWORD PTR _sfx$[ebp]
  0067f	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
$LN53@HW3S_I_Sta:

; 648  : 
; 649  : 	source->sfxinfo = sfx;

  00686	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  00689	8b 4d f8	 mov	 ecx, DWORD PTR _sfx$[ebp]
  0068c	89 08		 mov	 DWORD PTR [eax], ecx

; 650  : 	source->origin = origin;

  0068e	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  00691	8b 4d f4	 mov	 ecx, DWORD PTR _origin$[ebp]
  00694	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 651  : 	HW3DS.pfnStartSource(source->handle);

  00697	8b 45 c4	 mov	 eax, DWORD PTR _source$[ebp]
  0069a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0069d	51		 push	 ecx
  0069e	ff 15 0c 00 00
	00		 call	 DWORD PTR _hw3ds_driver+12
  006a4	90		 npad	 1

; 652  : 	return s_num;

  006a5	8b 45 c8	 mov	 eax, DWORD PTR _s_num$[ebp]
$LN1@HW3S_I_Sta:

; 653  : 
; 654  : }

  006a8	5f		 pop	 edi
  006a9	5e		 pop	 esi
  006aa	5b		 pop	 ebx
  006ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006ae	33 cd		 xor	 ecx, ebp
  006b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006b5	8b e5		 mov	 esp, ebp
  006b7	5d		 pop	 ebp
  006b8	c3		 ret	 0
_HW3S_I_StartSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _S_StartScreamSound
_TEXT	SEGMENT
_origin$ = 8						; size = 4
_sfx_id$ = 12						; size = 4
_S_StartScreamSound PROC				; COMDAT

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 676  : 	if (hws_mode != HWS_DEFAULT_MODE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hws_mode, 0
  00010	74 25		 je	 SHORT $LN2@S_StartScr

; 677  : 		HW3S_I_StartSound(origin, NULL, CT_SCREAM, sfx_id, 255, NORMAL_PITCH, NORMAL_SEP);

  00012	68 80 00 00 00	 push	 128			; 00000080H
  00017	68 80 00 00 00	 push	 128			; 00000080H
  0001c	68 ff 00 00 00	 push	 255			; 000000ffH
  00021	8b 45 0c	 mov	 eax, DWORD PTR _sfx_id$[ebp]
  00024	50		 push	 eax
  00025	6a 02		 push	 2
  00027	6a 00		 push	 0
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _origin$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _HW3S_I_StartSound
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	eb 10		 jmp	 SHORT $LN3@S_StartScr
$LN2@S_StartScr:

; 678  : 	else
; 679  : 		S_StartSound(origin, sfx_id);

  00037	8b 45 0c	 mov	 eax, DWORD PTR _sfx_id$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _origin$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _S_StartSound
  00044	83 c4 08	 add	 esp, 8
$LN3@S_StartScr:

; 680  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_S_StartScreamSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _S_StartAttackSound
_TEXT	SEGMENT
_origin$ = 8						; size = 4
_sfx_id$ = 12						; size = 4
_S_StartAttackSound PROC				; COMDAT

; 667  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 668  : 	if (hws_mode != HWS_DEFAULT_MODE)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hws_mode, 0
  00010	74 25		 je	 SHORT $LN2@S_StartAtt

; 669  : 		HW3S_I_StartSound(origin, NULL, CT_ATTACK, sfx_id, 255, NORMAL_PITCH, NORMAL_SEP);

  00012	68 80 00 00 00	 push	 128			; 00000080H
  00017	68 80 00 00 00	 push	 128			; 00000080H
  0001c	68 ff 00 00 00	 push	 255			; 000000ffH
  00021	8b 45 0c	 mov	 eax, DWORD PTR _sfx_id$[ebp]
  00024	50		 push	 eax
  00025	6a 01		 push	 1
  00027	6a 00		 push	 0
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _origin$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _HW3S_I_StartSound
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	eb 10		 jmp	 SHORT $LN3@S_StartAtt
$LN2@S_StartAtt:

; 670  : 	else
; 671  : 		S_StartSound(origin, sfx_id);

  00037	8b 45 0c	 mov	 eax, DWORD PTR _sfx_id$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _origin$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _S_StartSound
  00044	83 c4 08	 add	 esp, 8
$LN3@S_StartAtt:

; 672  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_S_StartAttackSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_StartSound
_TEXT	SEGMENT
_origin$ = 8						; size = 4
_sfx_id$ = 12						; size = 4
_HW3S_StartSound PROC					; COMDAT

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 661  : 	HW3S_I_StartSound(origin, NULL, CT_NORMAL, sfx_id, 255, NORMAL_PITCH, NORMAL_SEP);

  00009	68 80 00 00 00	 push	 128			; 00000080H
  0000e	68 80 00 00 00	 push	 128			; 00000080H
  00013	68 ff 00 00 00	 push	 255			; 000000ffH
  00018	8b 45 0c	 mov	 eax, DWORD PTR _sfx_id$[ebp]
  0001b	50		 push	 eax
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _origin$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 _HW3S_I_StartSound
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH

; 662  : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_HW3S_StartSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_GetVersion
_TEXT	SEGMENT
_HW3S_GetVersion PROC					; COMDAT

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 778  : 	return HW3DS.pfnGetHW3DSVersion();

  00009	ff 15 14 00 00
	00		 call	 DWORD PTR _hw3ds_driver+20

; 779  : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_HW3S_GetVersion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_Shutdown
_TEXT	SEGMENT
_HW3S_Shutdown PROC					; COMDAT

; 984  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 985  : 	HW3DS.pfnShutdown();

  00009	ff 15 44 00 00
	00		 call	 DWORD PTR _hw3ds_driver+68
  0000f	90		 npad	 1

; 986  : }

  00010	5f		 pop	 edi
  00011	5e		 pop	 esi
  00012	5b		 pop	 ebx
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_HW3S_Shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\hardware\hw3sound.c
;	COMDAT _HW3S_Init
_TEXT	SEGMENT
tv148 = -116						; size = 4
_source_data$ = -48					; size = 40
_succ$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_FatalErrorFunction$ = 8				; size = 4
_snd_dev$ = 12						; size = 4
_HW3S_Init PROC						; COMDAT

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 708  : 	INT32                succ;
; 709  : 	source3D_data_t    source_data;
; 710  : 
; 711  : 	if (HW3DS.pfnStartup(FatalErrorFunction, snd_dev))

  00013	8b 45 0c	 mov	 eax, DWORD PTR _snd_dev$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _FatalErrorFunction$[ebp]
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR _hw3ds_driver
  00021	85 c0		 test	 eax, eax
  00023	0f 84 18 02 00
	00		 je	 $LN2@HW3S_Init

; 712  : 	{
; 713  : 		// Attack source
; 714  : 		source_data.head_relative = 1;

  00029	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _source_data$[ebp+8], 1

; 715  : 		source_data.pos.x = 0.0f;

  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	f3 0f 11 45 e0	 movss	 DWORD PTR _source_data$[ebp+16], xmm0

; 716  : 		source_data.pos.y = 16.0f;

  00038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41800000
  00040	f3 0f 11 45 e4	 movss	 DWORD PTR _source_data$[ebp+20], xmm0

; 717  : 		source_data.pos.z = -FIXED_TO_FLOAT(mobjinfo[MT_PLAYER].height >> 1);

  00045	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  0004a	6b c8 00	 imul	 ecx, eax, 0
  0004d	8b 91 44 00 00
	00		 mov	 edx, DWORD PTR _mobjinfo[ecx+68]
  00053	d1 fa		 sar	 edx, 1
  00055	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00059	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  00061	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00068	f3 0f 11 45 e8	 movss	 DWORD PTR _source_data$[ebp+24], xmm0

; 718  : 		source_data.pos.momx = 0.0f;

  0006d	0f 57 c0	 xorps	 xmm0, xmm0
  00070	f3 0f 11 45 ec	 movss	 DWORD PTR _source_data$[ebp+28], xmm0

; 719  : 		source_data.pos.momy = 0.0f;

  00075	0f 57 c0	 xorps	 xmm0, xmm0
  00078	f3 0f 11 45 f0	 movss	 DWORD PTR _source_data$[ebp+32], xmm0

; 720  : 		source_data.pos.momz = 0.0f;

  0007d	0f 57 c0	 xorps	 xmm0, xmm0
  00080	f3 0f 11 45 f4	 movss	 DWORD PTR _source_data$[ebp+36], xmm0

; 721  : 		source_data.min_distance = MIN_DISTANCE;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43200000
  0008d	f3 0f 11 45 d0	 movss	 DWORD PTR _source_data$[ebp], xmm0

; 722  : 		source_data.max_distance = MAX_DISTANCE;

  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44960000
  0009a	f3 0f 11 45 d4	 movss	 DWORD PTR _source_data$[ebp+4], xmm0

; 723  : 		source_data.permanent = 1;

  0009f	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _source_data$[ebp+12], 1

; 724  : 
; 725  : 		p_attack_source.sfxinfo = NULL;

  000a6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _p_attack_source, 0

; 726  : 
; 727  : 		M_Memcpy(&p_attack_source2, &p_attack_source, sizeof (source_t));

  000b0	6a 10		 push	 16			; 00000010H
  000b2	68 00 00 00 00	 push	 OFFSET _p_attack_source
  000b7	68 00 00 00 00	 push	 OFFSET _p_attack_source2
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 728  : 
; 729  : 		p_attack_source.handle = HW3DS.pfnAddSource(&source_data, sfx_None);

  000c5	6a 00		 push	 0
  000c7	8d 45 d0	 lea	 eax, DWORD PTR _source_data$[ebp]
  000ca	50		 push	 eax
  000cb	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  000d1	a3 08 00 00 00	 mov	 DWORD PTR _p_attack_source+8, eax

; 730  : 		p_attack_source2.handle = HW3DS.pfnAddSource(&source_data, sfx_None);

  000d6	6a 00		 push	 0
  000d8	8d 45 d0	 lea	 eax, DWORD PTR _source_data$[ebp]
  000db	50		 push	 eax
  000dc	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  000e2	a3 08 00 00 00	 mov	 DWORD PTR _p_attack_source2+8, eax

; 731  : 
; 732  : 		// Scream source
; 733  : 		source_data.pos.y = 0;

  000e7	0f 57 c0	 xorps	 xmm0, xmm0
  000ea	f3 0f 11 45 e4	 movss	 DWORD PTR _source_data$[ebp+20], xmm0

; 734  : 		source_data.pos.z = 0;

  000ef	0f 57 c0	 xorps	 xmm0, xmm0
  000f2	f3 0f 11 45 e8	 movss	 DWORD PTR _source_data$[ebp+24], xmm0

; 735  : 
; 736  : 		p_scream_source.sfxinfo = NULL;

  000f7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _p_scream_source, 0

; 737  : 
; 738  : 		M_Memcpy(&p_scream_source2, &p_scream_source, sizeof (source_t));

  00101	6a 10		 push	 16			; 00000010H
  00103	68 00 00 00 00	 push	 OFFSET _p_scream_source
  00108	68 00 00 00 00	 push	 OFFSET _p_scream_source2
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH

; 739  : 
; 740  : 		p_scream_source.handle = HW3DS.pfnAddSource(&source_data, sfx_None);

  00116	6a 00		 push	 0
  00118	8d 45 d0	 lea	 eax, DWORD PTR _source_data$[ebp]
  0011b	50		 push	 eax
  0011c	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  00122	a3 08 00 00 00	 mov	 DWORD PTR _p_scream_source+8, eax

; 741  : 		p_scream_source2.handle = HW3DS.pfnAddSource(&source_data, sfx_None);

  00127	6a 00		 push	 0
  00129	8d 45 d0	 lea	 eax, DWORD PTR _source_data$[ebp]
  0012c	50		 push	 eax
  0012d	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  00133	a3 08 00 00 00	 mov	 DWORD PTR _p_scream_source2+8, eax

; 742  : 
; 743  : 		//FIXED_TO_FLOAT(mobjinfo[MT_PLAYER].height - (5 * FRACUNIT));
; 744  : 
; 745  : 		// Ambient sources (left and right) at 210 and 330 degree
; 746  : 		// relative to listener
; 747  : 		memset(&ambient_sdata, 0, sizeof (ambient_sdata));

  00138	6a 50		 push	 80			; 00000050H
  0013a	6a 00		 push	 0
  0013c	68 00 00 00 00	 push	 OFFSET _ambient_sdata
  00141	e8 00 00 00 00	 call	 _memset
  00146	83 c4 0c	 add	 esp, 12			; 0000000cH

; 748  : 
; 749  : 		ambient_sdata.left.head_relative = 1;

  00149	c7 05 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR _ambient_sdata+8, 1

; 750  : 		ambient_sdata.left.pos.x = ambient_sdata.left.pos.y = AmbientPos(ANG210);

  00153	68 55 55 55 95	 push	 -1789569707		; 95555555H
  00158	e8 00 00 00 00	 call	 _AmbientPos
  0015d	83 c4 04	 add	 esp, 4
  00160	d9 1d 14 00 00
	00		 fstp	 DWORD PTR _ambient_sdata+20
  00166	f3 0f 10 05 14
	00 00 00	 movss	 xmm0, DWORD PTR _ambient_sdata+20
  0016e	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR _ambient_sdata+16, xmm0

; 751  : 		ambient_sdata.left.max_distance = MAX_DISTANCE;

  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44960000
  0017e	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _ambient_sdata+4, xmm0

; 752  : 		ambient_sdata.left.min_distance = MIN_DISTANCE;

  00186	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43200000
  0018e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _ambient_sdata, xmm0

; 753  : 
; 754  : 		ambient_sdata.left.permanent = 1;

  00196	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR _ambient_sdata+12, 1

; 755  : 
; 756  : 		M_Memcpy(&ambient_sdata.right, &ambient_sdata.left, sizeof (source3D_data_t));

  001a0	6a 28		 push	 40			; 00000028H
  001a2	68 00 00 00 00	 push	 OFFSET _ambient_sdata
  001a7	68 28 00 00 00	 push	 OFFSET _ambient_sdata+40
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 757  : 
; 758  : 		ambient_sdata.right.pos.x = -ambient_sdata.left.pos.x;

  001b5	f3 0f 10 05 10
	00 00 00	 movss	 xmm0, DWORD PTR _ambient_sdata+16
  001bd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001c4	f3 0f 11 05 38
	00 00 00	 movss	 DWORD PTR _ambient_sdata+56, xmm0

; 759  : 		ambient_source.left.handle = HW3DS.pfnAddSource(&ambient_sdata.left, sfx_None);

  001cc	6a 00		 push	 0
  001ce	68 00 00 00 00	 push	 OFFSET _ambient_sdata
  001d3	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  001d9	a3 08 00 00 00	 mov	 DWORD PTR _ambient_source+8, eax

; 760  : 		ambient_source.right.handle = HW3DS.pfnAddSource(&ambient_sdata.right, sfx_None);

  001de	6a 00		 push	 0
  001e0	68 28 00 00 00	 push	 OFFSET _ambient_sdata+40
  001e5	ff 15 08 00 00
	00		 call	 DWORD PTR _hw3ds_driver+8
  001eb	a3 18 00 00 00	 mov	 DWORD PTR _ambient_source+24, eax

; 761  : 
; 762  : 		succ = p_attack_source.handle > -1 && p_scream_source.handle > -1 &&

  001f0	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR _p_attack_source+8, -1
  001f7	7e 36		 jle	 SHORT $LN4@HW3S_Init
  001f9	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR _p_scream_source+8, -1
  00200	7e 2d		 jle	 SHORT $LN4@HW3S_Init
  00202	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR _p_attack_source2+8, -1
  00209	7e 24		 jle	 SHORT $LN4@HW3S_Init
  0020b	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR _p_scream_source2+8, -1
  00212	7e 1b		 jle	 SHORT $LN4@HW3S_Init
  00214	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR _ambient_source+8, -1
  0021b	7e 12		 jle	 SHORT $LN4@HW3S_Init
  0021d	83 3d 18 00 00
	00 ff		 cmp	 DWORD PTR _ambient_source+24, -1
  00224	7e 09		 jle	 SHORT $LN4@HW3S_Init
  00226	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR tv148[ebp], 1
  0022d	eb 07		 jmp	 SHORT $LN5@HW3S_Init
$LN4@HW3S_Init:
  0022f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv148[ebp], 0
$LN5@HW3S_Init:
  00236	8b 45 8c	 mov	 eax, DWORD PTR tv148[ebp]
  00239	89 45 f8	 mov	 DWORD PTR _succ$[ebp], eax

; 763  : 			p_attack_source2.handle > -1 && p_scream_source2.handle > -1 &&
; 764  : 			ambient_source.left.handle > -1 && ambient_source.right.handle > -1;
; 765  : 
; 766  : 		//CONS_Printf("Player handles: attack %d, default %d\n", p_attack_source.handle, p_scream_source.handle);
; 767  : 		return succ;

  0023c	8b 45 f8	 mov	 eax, DWORD PTR _succ$[ebp]
  0023f	eb 02		 jmp	 SHORT $LN1@HW3S_Init
$LN2@HW3S_Init:

; 768  : 	}
; 769  : 	return 0;

  00241	33 c0		 xor	 eax, eax
$LN1@HW3S_Init:

; 770  : }

  00243	5f		 pop	 edi
  00244	5e		 pop	 esi
  00245	5b		 pop	 ebx
  00246	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00249	33 cd		 xor	 ecx, ebp
  0024b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c3		 ret	 0
_HW3S_Init ENDP
_TEXT	ENDS
END
