; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\objs\VC10\Win32\Debug\m_queue.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_M_QueueInit
PUBLIC	_M_QueueInsert
PUBLIC	_M_QueueIterator
PUBLIC	_M_QueueResetIterator
PUBLIC	_M_QueueFree
EXTRN	_free:PROC
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_queue.c
;	COMDAT _M_QueueFree
_TEXT	SEGMENT
_next$1 = -8						; size = 4
_rover$ = -4						; size = 4
_queue$ = 8						; size = 4
_M_QueueFree PROC					; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 90   : 	mqueueitem_t *rover = queue->head.next;

  00009	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _rover$[ebp], ecx
$LN2@M_QueueFre:

; 91   : 
; 92   : 	while (rover)

  00011	83 7d fc 00	 cmp	 DWORD PTR _rover$[ebp], 0
  00015	74 1c		 je	 SHORT $LN3@M_QueueFre

; 93   : 	{
; 94   : 		mqueueitem_t *next = rover->next;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d f8	 mov	 DWORD PTR _next$1[ebp], ecx

; 95   : 		free(rover);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _rover$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _free
  00028	83 c4 04	 add	 esp, 4

; 96   : 
; 97   : 		rover = next;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _next$1[ebp]
  0002e	89 45 fc	 mov	 DWORD PTR _rover$[ebp], eax

; 98   : 	}

  00031	eb de		 jmp	 SHORT $LN2@M_QueueFre
$LN3@M_QueueFre:

; 99   : 
; 100  : 	M_QueueInit(queue);

  00033	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _M_QueueInit
  0003c	83 c4 04	 add	 esp, 4

; 101  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_M_QueueFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_queue.c
;	COMDAT _M_QueueResetIterator
_TEXT	SEGMENT
_queue$ = 8						; size = 4
_M_QueueResetIterator PROC				; COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 80   : 	queue->rover = &(queue->head);

  00009	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _queue$[ebp]
  0000f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 81   : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
_M_QueueResetIterator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_queue.c
;	COMDAT _M_QueueIterator
_TEXT	SEGMENT
_queue$ = 8						; size = 4
_M_QueueIterator PROC					; COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 67   : 	if (queue->rover == NULL)

  00009	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	75 04		 jne	 SHORT $LN2@M_QueueIte

; 68   : 		return NULL;

  00012	33 c0		 xor	 eax, eax
  00014	eb 14		 jmp	 SHORT $LN1@M_QueueIte
$LN2@M_QueueIte:

; 69   : 
; 70   : 	return (queue->rover = queue->rover->next);

  00016	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  00019	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001c	8b 55 08	 mov	 edx, DWORD PTR _queue$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _queue$[ebp]
  00027	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
$LN1@M_QueueIte:

; 71   : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_M_QueueIterator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_queue.c
;	COMDAT _M_QueueInsert
_TEXT	SEGMENT
_item$ = 8						; size = 4
_queue$ = 12						; size = 4
_M_QueueInsert PROC					; COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 54   : 	// link in at the tail (this works even for the first node!)
; 55   : 	queue->tail = queue->tail->next = item;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _queue$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _item$[ebp]
  00012	89 11		 mov	 DWORD PTR [ecx], edx
  00014	8b 45 0c	 mov	 eax, DWORD PTR _queue$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _item$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 56   : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_M_QueueInsert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Desktop\SRB2-Public-master (1)\SRB2-Public-master\src\m_queue.c
;	COMDAT _M_QueueInit
_TEXT	SEGMENT
_queue$ = 8						; size = 4
_M_QueueInit PROC					; COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 42   : 	queue->head.next = NULL;

  00009	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 43   : 	queue->tail = &(queue->head);

  00012	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _queue$[ebp]
  00018	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 44   : 	queue->rover = &(queue->head);

  0001b	8b 45 08	 mov	 eax, DWORD PTR _queue$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _queue$[ebp]
  00021	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 45   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_M_QueueInit ENDP
_TEXT	ENDS
END
