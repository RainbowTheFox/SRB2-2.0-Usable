; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\screen.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_SCR_ChangeFullscreen
PUBLIC	_R_ASM
PUBLIC	_R_486
PUBLIC	_R_586
PUBLIC	_R_MMX
PUBLIC	_R_3DNow
PUBLIC	_R_MMXExt
PUBLIC	_R_SSE2
PUBLIC	_cv_scr_width
PUBLIC	_cv_scr_height
PUBLIC	_cv_scr_depth
PUBLIC	_cv_renderview
PUBLIC	_cv_fullscreen
PUBLIC	??_C@_06MIFLIJP@8?5bits@			; `string'
PUBLIC	??_C@_07ONJDJADG@16?5bits@			; `string'
PUBLIC	??_C@_07PEIDIGPM@24?5bits@			; `string'
PUBLIC	??_C@_07FLPJLDFI@32?5bits@			; `string'
PUBLIC	??_C@_09JHJAHCPC@scr_width@			; `string'
PUBLIC	??_C@_03MEIMHAKB@320@				; `string'
PUBLIC	??_C@_0L@EEBPKPCM@scr_height@			; `string'
PUBLIC	??_C@_03HPLEMDKK@200@				; `string'
PUBLIC	??_C@_09IFJCPAO@scr_depth@			; `string'
PUBLIC	??_C@_0L@EEECBKPG@renderview@			; `string'
PUBLIC	??_C@_02IAAGKKDJ@On@				; `string'
PUBLIC	??_C@_0L@GIACNHMO@fullscreen@			; `string'
PUBLIC	??_C@_02JINPPBEP@No@				; `string'
EXTRN	_CV_OnOff:BYTE
EXTRN	_CV_YesNo:BYTE
EXTRN	_CV_Unsigned:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
COMM	_wallcolfunc:DWORD
COMM	_colfunc:DWORD
COMM	_basecolfunc:DWORD
COMM	_fuzzcolfunc:DWORD
COMM	_transcolfunc:DWORD
COMM	_shadecolfunc:DWORD
COMM	_spanfunc:DWORD
COMM	_basespanfunc:DWORD
COMM	_splatfunc:DWORD
COMM	_transtransfunc:DWORD
_DATA	ENDS
_BSS	SEGMENT
_R_486	DD	01H DUP (?)
_R_586	DD	01H DUP (?)
_R_MMX	DD	01H DUP (?)
_R_3DNow DD	01H DUP (?)
_R_MMXExt DD	01H DUP (?)
_R_SSE2	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_vid:BYTE:03cH
COMM	_setmodeneeded:DWORD
COMM	_scr_bpp:DWORD
COMM	_scr_borderpatch:DWORD
COMM	_walldrawerfunc:DWORD
_DATA	ENDS
;	COMDAT ??_C@_02JINPPBEP@No@
CONST	SEGMENT
??_C@_02JINPPBEP@No@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GIACNHMO@fullscreen@
CONST	SEGMENT
??_C@_0L@GIACNHMO@fullscreen@ DB 'fullscreen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEECBKPG@renderview@
CONST	SEGMENT
??_C@_0L@EEECBKPG@renderview@ DB 'renderview', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IFJCPAO@scr_depth@
CONST	SEGMENT
??_C@_09IFJCPAO@scr_depth@ DB 'scr_depth', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPLEMDKK@200@
CONST	SEGMENT
??_C@_03HPLEMDKK@200@ DB '200', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEBPKPCM@scr_height@
CONST	SEGMENT
??_C@_0L@EEBPKPCM@scr_height@ DB 'scr_height', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEIMHAKB@320@
CONST	SEGMENT
??_C@_03MEIMHAKB@320@ DB '320', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JHJAHCPC@scr_width@
CONST	SEGMENT
??_C@_09JHJAHCPC@scr_width@ DB 'scr_width', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLPJLDFI@32?5bits@
CONST	SEGMENT
??_C@_07FLPJLDFI@32?5bits@ DB '32 bits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEIDIGPM@24?5bits@
CONST	SEGMENT
??_C@_07PEIDIGPM@24?5bits@ DB '24 bits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ONJDJADG@16?5bits@
CONST	SEGMENT
??_C@_07ONJDJADG@16?5bits@ DB '16 bits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIFLIJP@8?5bits@
CONST	SEGMENT
??_C@_06MIFLIJP@8?5bits@ DB '8 bits', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_R_ASM	DD	01H
_cv_scr_width DD FLAT:??_C@_09JHJAHCPC@scr_width@
	DD	FLAT:??_C@_03MEIMHAKB@320@
	DD	01H
	DD	FLAT:_CV_Unsigned
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_scr_height DD FLAT:??_C@_0L@EEBPKPCM@scr_height@
	DD	FLAT:??_C@_03HPLEMDKK@200@
	DD	01H
	DD	FLAT:_CV_Unsigned
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_scr_depth DD FLAT:??_C@_09IFJCPAO@scr_depth@
	DD	FLAT:??_C@_06MIFLIJP@8?5bits@
	DD	01H
	DD	FLAT:_scr_depth_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_renderview DD FLAT:??_C@_0L@EEECBKPG@renderview@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	00H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_fullscreen DD FLAT:??_C@_0L@GIACNHMO@fullscreen@
	DD	FLAT:??_C@_02JINPPBEP@No@
	DD	03H
	DD	FLAT:_CV_YesNo
	DD	FLAT:_SCR_ChangeFullscreen
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_scr_depth_cons_t DD 08H
	DD	FLAT:??_C@_06MIFLIJP@8?5bits@
	DD	010H
	DD	FLAT:??_C@_07ONJDJADG@16?5bits@
	DD	018H
	DD	FLAT:??_C@_07PEIDIGPM@24?5bits@
	DD	020H
	DD	FLAT:??_C@_07FLPJLDFI@32?5bits@
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	_SCR_SetMode
PUBLIC	_SCR_Recalc
PUBLIC	_SCR_CheckDefaultMode
PUBLIC	_SCR_SetDefaultMode
PUBLIC	_SCR_Startup
PUBLIC	??_C@_0CB@GKCJNMFB@unknown?5bytes?5per?5pixel?5mode?5?$CFd@ ; `string'
PUBLIC	??_C@_0EE@CLCBJEDO@WARNING?3?5Resolution?5is?5not?5aspe@ ; `string'
PUBLIC	??_C@_08ECEOCPDN@?9NOCPUID@			; `string'
PUBLIC	??_C@_0EG@CHCPGGJC@CPU?5Info?3?5486?3?5?$CFi?0?5586?3?5?$CFi?0?5MMX@ ; `string'
PUBLIC	??_C@_06ONOAGIJC@?9noASM@			; `string'
PUBLIC	??_C@_04NMKBKJPM@?9486@				; `string'
PUBLIC	??_C@_04GEBNMOJJ@?9586@				; `string'
PUBLIC	??_C@_04GDNCKKHI@?9MMX@				; `string'
PUBLIC	??_C@_06LLFKLPHF@?93DNow@			; `string'
PUBLIC	??_C@_07NLKMPDAF@?9MMXExt@			; `string'
PUBLIC	??_C@_05MICFEGLJ@?9SSE2@			; `string'
PUBLIC	??_C@_0BF@GHJEOHAG@NUMBER_OF_PROCESSORS@	; `string'
PUBLIC	??_C@_04IAJHNKO@?9ASM@				; `string'
PUBLIC	??_C@_0BE@IOIIPGHP@Disabling?5ASM?5code?6@	; `string'
PUBLIC	??_C@_06EGEBBOP@?9width@			; `string'
PUBLIC	??_C@_07CHIKDHJG@?9height@			; `string'
PUBLIC	??_C@_0BL@BBIIBFFP@Using?5resolution?3?5?$CFd?5x?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CH@IHEDKCEC@Default?5resolution?3?5?$CFd?5x?5?$CFd?5?$CI?$CFd@ ; `string'
PUBLIC	__real@43480000
PUBLIC	__real@43a00000
EXTRN	_abs:PROC
EXTRN	_atoi:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_CV_RegisterVar:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_AM_Stop:PROC
EXTRN	_I_CPUInfo:PROC
EXTRN	_I_GetEnv:PROC
EXTRN	_VID_GetModeForSize:PROC
EXTRN	_VID_SetMode:PROC
EXTRN	_R_SetViewSize:PROC
EXTRN	_R_DrawColumn_8:PROC
EXTRN	_R_DrawWallColumn_8:PROC
EXTRN	_R_DrawShadeColumn_8:PROC
EXTRN	_R_DrawTranslucentColumn_8:PROC
EXTRN	_R_DrawShadeColumn_8_ASM:PROC
EXTRN	_R_DrawTranslatedColumn_8:PROC
EXTRN	_R_DrawTranslatedTranslucentColumn_8:PROC
EXTRN	_R_DrawSpan_8:PROC
EXTRN	_R_DrawSplat_8:PROC
EXTRN	_M_CheckParm:PROC
EXTRN	_M_IsNextParm:PROC
EXTRN	_M_GetNextParm:PROC
EXTRN	_M_SetupMemcpy:PROC
EXTRN	_V_Init:PROC
EXTRN	_V_SetPalette:PROC
EXTRN	_ASM_PatchRowBytes:PROC
EXTRN	_dedicated:DWORD
EXTRN	_con_recalc:DWORD
EXTRN	_am_recalc:DWORD
EXTRN	_automapactive:DWORD
EXTRN	_cv_ticrate:BYTE
EXTRN	_WipeInAction:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT ??_C@_0CH@IHEDKCEC@Default?5resolution?3?5?$CFd?5x?5?$CFd?5?$CI?$CFd@
CONST	SEGMENT
??_C@_0CH@IHEDKCEC@Default?5resolution?3?5?$CFd?5x?5?$CFd?5?$CI?$CFd@ DB 'D'
	DB	'efault resolution: %d x %d (%d bits)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BBIIBFFP@Using?5resolution?3?5?$CFd?5x?5?$CFd?6@
CONST	SEGMENT
??_C@_0BL@BBIIBFFP@Using?5resolution?3?5?$CFd?5x?5?$CFd?6@ DB 'Using reso'
	DB	'lution: %d x %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CHIKDHJG@?9height@
CONST	SEGMENT
??_C@_07CHIKDHJG@?9height@ DB '-height', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGEBBOP@?9width@
CONST	SEGMENT
??_C@_06EGEBBOP@?9width@ DB '-width', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IOIIPGHP@Disabling?5ASM?5code?6@
CONST	SEGMENT
??_C@_0BE@IOIIPGHP@Disabling?5ASM?5code?6@ DB 'Disabling ASM code', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAJHNKO@?9ASM@
CONST	SEGMENT
??_C@_04IAJHNKO@?9ASM@ DB '-ASM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHJEOHAG@NUMBER_OF_PROCESSORS@
CONST	SEGMENT
??_C@_0BF@GHJEOHAG@NUMBER_OF_PROCESSORS@ DB 'NUMBER_OF_PROCESSORS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MICFEGLJ@?9SSE2@
CONST	SEGMENT
??_C@_05MICFEGLJ@?9SSE2@ DB '-SSE2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NLKMPDAF@?9MMXExt@
CONST	SEGMENT
??_C@_07NLKMPDAF@?9MMXExt@ DB '-MMXExt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLFKLPHF@?93DNow@
CONST	SEGMENT
??_C@_06LLFKLPHF@?93DNow@ DB '-3DNow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDNCKKHI@?9MMX@
CONST	SEGMENT
??_C@_04GDNCKKHI@?9MMX@ DB '-MMX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GEBNMOJJ@?9586@
CONST	SEGMENT
??_C@_04GEBNMOJJ@?9586@ DB '-586', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMKBKJPM@?9486@
CONST	SEGMENT
??_C@_04NMKBKJPM@?9486@ DB '-486', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONOAGIJC@?9noASM@
CONST	SEGMENT
??_C@_06ONOAGIJC@?9noASM@ DB '-noASM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@CHCPGGJC@CPU?5Info?3?5486?3?5?$CFi?0?5586?3?5?$CFi?0?5MMX@
CONST	SEGMENT
??_C@_0EG@CHCPGGJC@CPU?5Info?3?5486?3?5?$CFi?0?5586?3?5?$CFi?0?5MMX@ DB 'C'
	DB	'PU Info: 486: %i, 586: %i, MMX: %i, 3DNow: %i, MMXExt: %i, SS'
	DB	'E2: %i', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08ECEOCPDN@?9NOCPUID@
CONST	SEGMENT
??_C@_08ECEOCPDN@?9NOCPUID@ DB '-NOCPUID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@CLCBJEDO@WARNING?3?5Resolution?5is?5not?5aspe@
CONST	SEGMENT
??_C@_0EE@CLCBJEDO@WARNING?3?5Resolution?5is?5not?5aspe@ DB 'WARNING: Res'
	DB	'olution is not aspect-correct!', 0aH, 'Use a multiple of %dx%'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GKCJNMFB@unknown?5bytes?5per?5pixel?5mode?5?$CFd@
CONST	SEGMENT
??_C@_0CB@GKCJNMFB@unknown?5bytes?5per?5pixel?5mode?5?$CFd@ DB 'unknown b'
	DB	'ytes per pixel mode %d', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\screen.c
;	COMDAT _SCR_ChangeFullscreen
_TEXT	SEGMENT
_SCR_ChangeFullscreen PROC				; COMDAT

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 361  : #ifdef DIRECTFULLSCREEN
; 362  : 	// allow_fullscreen is set by VID_PrepareModeList
; 363  : 	// it is used to prevent switching to fullscreen during startup
; 364  : 	if (!allow_fullscreen)
; 365  : 		return;
; 366  : 
; 367  : 	if (graphics_started)
; 368  : 	{
; 369  : 		VID_PrepareModeList();
; 370  : 		setmodeneeded = VID_GetModeForSize(vid.width, vid.height) + 1;
; 371  : 	}
; 372  : 	return;
; 373  : #endif
; 374  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_SCR_ChangeFullscreen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\screen.c
;	COMDAT _SCR_Startup
_TEXT	SEGMENT
_cNOP$1 = -8						; size = 4
_RCpuInfo$ = -4						; size = 4
_SCR_Startup PROC					; COMDAT

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 179  : 	const CPUInfoFlags *RCpuInfo = I_CPUInfo();

  00009	e8 00 00 00 00	 call	 _I_CPUInfo
  0000e	89 45 fc	 mov	 DWORD PTR _RCpuInfo$[ebp], eax

; 180  : 	if (!M_CheckParm("-NOCPUID") && RCpuInfo)

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_08ECEOCPDN@?9NOCPUID@
  00016	e8 00 00 00 00	 call	 _M_CheckParm
  0001b	83 c4 04	 add	 esp, 4
  0001e	85 c0		 test	 eax, eax
  00020	0f 85 e0 00 00
	00		 jne	 $LN2@SCR_Startu
  00026	83 7d fc 00	 cmp	 DWORD PTR _RCpuInfo$[ebp], 0
  0002a	0f 84 d6 00 00
	00		 je	 $LN2@SCR_Startu

; 181  : 	{
; 182  : #if defined (__i386__) || defined (_M_IX86) || defined (__WATCOMC__)
; 183  : 		R_486 = true;

  00030	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_486, 1

; 184  : #endif
; 185  : 		if (RCpuInfo->RDTSC)

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _RCpuInfo$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	c1 e1 1d	 shl	 ecx, 29			; 0000001dH
  00042	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00045	85 c9		 test	 ecx, ecx
  00047	74 0a		 je	 SHORT $LN3@SCR_Startu

; 186  : 			R_586 = true;

  00049	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_586, 1
$LN3@SCR_Startu:

; 187  : 		if (RCpuInfo->MMX)

  00053	8b 45 fc	 mov	 eax, DWORD PTR _RCpuInfo$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	c1 e1 1c	 shl	 ecx, 28			; 0000001cH
  0005b	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0005e	85 c9		 test	 ecx, ecx
  00060	74 0a		 je	 SHORT $LN4@SCR_Startu

; 188  : 			R_MMX = true;

  00062	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_MMX, 1
$LN4@SCR_Startu:

; 189  : 		if (RCpuInfo->AMD3DNow)

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _RCpuInfo$[ebp]
  0006f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00071	c1 e1 19	 shl	 ecx, 25			; 00000019H
  00074	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00077	85 c9		 test	 ecx, ecx
  00079	74 0a		 je	 SHORT $LN5@SCR_Startu

; 190  : 			R_3DNow = true;

  0007b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_3DNow, 1
$LN5@SCR_Startu:

; 191  : 		if (RCpuInfo->MMXExt)

  00085	8b 45 fc	 mov	 eax, DWORD PTR _RCpuInfo$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	c1 e1 1b	 shl	 ecx, 27			; 0000001bH
  0008d	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00090	85 c9		 test	 ecx, ecx
  00092	74 0a		 je	 SHORT $LN6@SCR_Startu

; 192  : 			R_MMXExt = true;

  00094	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_MMXExt, 1
$LN6@SCR_Startu:

; 193  : 		if (RCpuInfo->SSE2)

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _RCpuInfo$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	c1 e1 16	 shl	 ecx, 22			; 00000016H
  000a6	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  000a9	85 c9		 test	 ecx, ecx
  000ab	74 0a		 je	 SHORT $LN7@SCR_Startu

; 194  : 			R_SSE2 = true;

  000ad	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_SSE2, 1
$LN7@SCR_Startu:

; 195  : 
; 196  : 		if (RCpuInfo->CPUs > 1)

  000b7	8b 45 fc	 mov	 eax, DWORD PTR _RCpuInfo$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	c1 e1 00	 shl	 ecx, 0
  000bf	c1 f9 18	 sar	 ecx, 24			; 00000018H
  000c2	83 f9 01	 cmp	 ecx, 1
  000c5	7e 0a		 jle	 SHORT $LN8@SCR_Startu

; 197  : 		{
; 198  : 			R_ASM = false; //with more than 1 CPU, ASM go BOOM!

  000c7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _R_ASM, 0
$LN8@SCR_Startu:

; 199  : 		}
; 200  : 		CONS_Printf("CPU Info: 486: %i, 586: %i, MMX: %i, 3DNow: %i, MMXExt: %i, SSE2: %i\n",

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _R_SSE2
  000d6	50		 push	 eax
  000d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _R_MMXExt
  000dd	51		 push	 ecx
  000de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _R_3DNow
  000e4	52		 push	 edx
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _R_MMX
  000ea	50		 push	 eax
  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _R_586
  000f1	51		 push	 ecx
  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _R_486
  000f8	52		 push	 edx
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@CHCPGGJC@CPU?5Info?3?5486?3?5?$CFi?0?5586?3?5?$CFi?0?5MMX@
  000fe	e8 00 00 00 00	 call	 _CONS_Printf
  00103	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@SCR_Startu:

; 201  : 		            R_486, R_586, R_MMX, R_3DNow, R_MMXExt, R_SSE2);
; 202  : 	}
; 203  : 
; 204  : 	if (M_CheckParm("-noASM"))

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_06ONOAGIJC@?9noASM@
  0010b	e8 00 00 00 00	 call	 _M_CheckParm
  00110	83 c4 04	 add	 esp, 4
  00113	85 c0		 test	 eax, eax
  00115	74 0a		 je	 SHORT $LN9@SCR_Startu

; 205  : 		R_ASM = false;

  00117	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _R_ASM, 0
$LN9@SCR_Startu:

; 206  : 	if (M_CheckParm("-486"))

  00121	68 00 00 00 00	 push	 OFFSET ??_C@_04NMKBKJPM@?9486@
  00126	e8 00 00 00 00	 call	 _M_CheckParm
  0012b	83 c4 04	 add	 esp, 4
  0012e	85 c0		 test	 eax, eax
  00130	74 0a		 je	 SHORT $LN10@SCR_Startu

; 207  : 		R_486 = true;

  00132	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_486, 1
$LN10@SCR_Startu:

; 208  : 	if (M_CheckParm("-586"))

  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_04GEBNMOJJ@?9586@
  00141	e8 00 00 00 00	 call	 _M_CheckParm
  00146	83 c4 04	 add	 esp, 4
  00149	85 c0		 test	 eax, eax
  0014b	74 0a		 je	 SHORT $LN11@SCR_Startu

; 209  : 		R_586 = true;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_586, 1
$LN11@SCR_Startu:

; 210  : 	if (M_CheckParm("-MMX"))

  00157	68 00 00 00 00	 push	 OFFSET ??_C@_04GDNCKKHI@?9MMX@
  0015c	e8 00 00 00 00	 call	 _M_CheckParm
  00161	83 c4 04	 add	 esp, 4
  00164	85 c0		 test	 eax, eax
  00166	74 0a		 je	 SHORT $LN12@SCR_Startu

; 211  : 		R_MMX = true;

  00168	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_MMX, 1
$LN12@SCR_Startu:

; 212  : 	if (M_CheckParm("-3DNow"))

  00172	68 00 00 00 00	 push	 OFFSET ??_C@_06LLFKLPHF@?93DNow@
  00177	e8 00 00 00 00	 call	 _M_CheckParm
  0017c	83 c4 04	 add	 esp, 4
  0017f	85 c0		 test	 eax, eax
  00181	74 0a		 je	 SHORT $LN13@SCR_Startu

; 213  : 		R_3DNow = true;

  00183	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_3DNow, 1
$LN13@SCR_Startu:

; 214  : 	if (M_CheckParm("-MMXExt"))

  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_07NLKMPDAF@?9MMXExt@
  00192	e8 00 00 00 00	 call	 _M_CheckParm
  00197	83 c4 04	 add	 esp, 4
  0019a	85 c0		 test	 eax, eax
  0019c	74 0a		 je	 SHORT $LN14@SCR_Startu

; 215  : 		R_MMXExt = true;

  0019e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_MMXExt, 1
$LN14@SCR_Startu:

; 216  : 	if (M_CheckParm("-SSE2"))

  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_05MICFEGLJ@?9SSE2@
  001ad	e8 00 00 00 00	 call	 _M_CheckParm
  001b2	83 c4 04	 add	 esp, 4
  001b5	85 c0		 test	 eax, eax
  001b7	74 0a		 je	 SHORT $LN15@SCR_Startu

; 217  : 		R_SSE2 = true;

  001b9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _R_SSE2, 1
$LN15@SCR_Startu:

; 218  : 
; 219  : #if defined (_WIN32) && !defined (_WIN32_WCE) && !defined (_XBOX)
; 220  : 	if (!RCpuInfo || !RCpuInfo->CPUs) //bad CPUID code?

  001c3	83 7d fc 00	 cmp	 DWORD PTR _RCpuInfo$[ebp], 0
  001c7	74 0f		 je	 SHORT $LN17@SCR_Startu
  001c9	8b 45 fc	 mov	 eax, DWORD PTR _RCpuInfo$[ebp]
  001cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ce	c1 e1 00	 shl	 ecx, 0
  001d1	c1 f9 18	 sar	 ecx, 24			; 00000018H
  001d4	85 c9		 test	 ecx, ecx
  001d6	75 4f		 jne	 SHORT $LN18@SCR_Startu
$LN17@SCR_Startu:

; 221  : 	{
; 222  : 		LPCSTR cNOP = I_GetEnv("NUMBER_OF_PROCESSORS");

  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GHJEOHAG@NUMBER_OF_PROCESSORS@
  001dd	e8 00 00 00 00	 call	 _I_GetEnv
  001e2	83 c4 04	 add	 esp, 4
  001e5	89 45 f8	 mov	 DWORD PTR _cNOP$1[ebp], eax

; 223  : 		if (cNOP && atoi(cNOP) > 1 && !M_CheckParm("-ASM"))

  001e8	83 7d f8 00	 cmp	 DWORD PTR _cNOP$1[ebp], 0
  001ec	74 39		 je	 SHORT $LN18@SCR_Startu
  001ee	8b 45 f8	 mov	 eax, DWORD PTR _cNOP$1[ebp]
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 _atoi
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 01	 cmp	 eax, 1
  001fd	7e 28		 jle	 SHORT $LN18@SCR_Startu
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_04IAJHNKO@?9ASM@
  00204	e8 00 00 00 00	 call	 _M_CheckParm
  00209	83 c4 04	 add	 esp, 4
  0020c	85 c0		 test	 eax, eax
  0020e	75 17		 jne	 SHORT $LN18@SCR_Startu

; 224  : 		{
; 225  : 			R_ASM = false;

  00210	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _R_ASM, 0

; 226  : 			CONS_Printf("Disabling ASM code\n");

  0021a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IOIIPGHP@Disabling?5ASM?5code?6@
  0021f	e8 00 00 00 00	 call	 _CONS_Printf
  00224	83 c4 04	 add	 esp, 4
$LN18@SCR_Startu:

; 227  : 		}
; 228  : 	}
; 229  : #endif
; 230  : 
; 231  : 	M_SetupMemcpy();

  00227	e8 00 00 00 00	 call	 _M_SetupMemcpy
  0022c	90		 npad	 1

; 232  : 
; 233  : 	if (dedicated)

  0022d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00234	74 15		 je	 SHORT $LN19@SCR_Startu

; 234  : 	{
; 235  : 		V_Init();

  00236	e8 00 00 00 00	 call	 _V_Init
  0023b	90		 npad	 1

; 236  : 		V_SetPalette(0);

  0023c	6a 00		 push	 0
  0023e	e8 00 00 00 00	 call	 _V_SetPalette
  00243	83 c4 04	 add	 esp, 4

; 237  : 		return;

  00246	e9 92 00 00 00	 jmp	 $LN1@SCR_Startu
$LN19@SCR_Startu:

; 238  : 	}
; 239  : 
; 240  : 	vid.modenum = 0;

  0024b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _vid, 0

; 241  : 
; 242  : 	vid.fdupx = (float)vid.width/BASEVIDWIDTH;

  00255	f3 0f 2a 05 0c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _vid+12
  0025d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43a00000
  00265	f3 0f 11 05 28
	00 00 00	 movss	 DWORD PTR _vid+40, xmm0

; 243  : 	vid.fdupy = (float)vid.height/BASEVIDHEIGHT;

  0026d	f3 0f 2a 05 10
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _vid+16
  00275	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43480000
  0027d	f3 0f 11 05 2c
	00 00 00	 movss	 DWORD PTR _vid+44, xmm0

; 244  : 	vid.dupx = (INT32)vid.fdupx;

  00285	f3 0f 2c 05 28
	00 00 00	 cvttss2si eax, DWORD PTR _vid+40
  0028d	a3 20 00 00 00	 mov	 DWORD PTR _vid+32, eax

; 245  : 	vid.dupy = (INT32)vid.fdupy;

  00292	f3 0f 2c 05 2c
	00 00 00	 cvttss2si eax, DWORD PTR _vid+44
  0029a	a3 24 00 00 00	 mov	 DWORD PTR _vid+36, eax

; 246  : 
; 247  : 	vid.baseratio = FRACUNIT;

  0029f	c7 05 34 00 00
	00 00 00 01 00	 mov	 DWORD PTR _vid+52, 65536 ; 00010000H

; 248  : 
; 249  : #ifdef RUSEASM
; 250  : 	if (R_ASM)

  002a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _R_ASM, 0
  002b0	74 0e		 je	 SHORT $LN20@SCR_Startu

; 251  : 		ASM_PatchRowBytes(vid.rowbytes);

  002b2	a1 08 00 00 00	 mov	 eax, DWORD PTR _vid+8
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 _ASM_PatchRowBytes
  002bd	83 c4 04	 add	 esp, 4
$LN20@SCR_Startu:

; 252  : //	if (R_486 || R_586 || R_MMX)
; 253  : //		MMX_PatchRowBytes(vid.rowbytes);
; 254  : #endif
; 255  : 
; 256  : 	V_Init();

  002c0	e8 00 00 00 00	 call	 _V_Init
  002c5	90		 npad	 1

; 257  : 	CV_RegisterVar(&cv_ticrate);

  002c6	68 00 00 00 00	 push	 OFFSET _cv_ticrate
  002cb	e8 00 00 00 00	 call	 _CV_RegisterVar
  002d0	83 c4 04	 add	 esp, 4

; 258  : 
; 259  : 	V_SetPalette(0);

  002d3	6a 00		 push	 0
  002d5	e8 00 00 00 00	 call	 _V_SetPalette
  002da	83 c4 04	 add	 esp, 4
$LN1@SCR_Startu:

; 260  : }

  002dd	5f		 pop	 edi
  002de	5e		 pop	 esi
  002df	5b		 pop	 ebx
  002e0	8b e5		 mov	 esp, ebp
  002e2	5d		 pop	 ebp
  002e3	c3		 ret	 0
_SCR_Startup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\screen.c
;	COMDAT _SCR_SetDefaultMode
_TEXT	SEGMENT
_SCR_SetDefaultMode PROC				; COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 352  : 	// remember the default screen size
; 353  : 	CV_SetValue(&cv_scr_width, vid.width);

  00009	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  0000e	50		 push	 eax
  0000f	68 00 00 00 00	 push	 OFFSET _cv_scr_width
  00014	e8 00 00 00 00	 call	 _CV_SetValue
  00019	83 c4 08	 add	 esp, 8

; 354  : 	CV_SetValue(&cv_scr_height, vid.height);

  0001c	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET _cv_scr_height
  00027	e8 00 00 00 00	 call	 _CV_SetValue
  0002c	83 c4 08	 add	 esp, 8

; 355  : 	CV_SetValue(&cv_scr_depth, vid.bpp*8);

  0002f	a1 30 00 00 00	 mov	 eax, DWORD PTR _vid+48
  00034	c1 e0 03	 shl	 eax, 3
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET _cv_scr_depth
  0003d	e8 00 00 00 00	 call	 _CV_SetValue
  00042	83 c4 08	 add	 esp, 8

; 356  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_SCR_SetDefaultMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\screen.c
;	COMDAT _SCR_CheckDefaultMode
_TEXT	SEGMENT
_scr_forcey$ = -8					; size = 4
_scr_forcex$ = -4					; size = 4
_SCR_CheckDefaultMode PROC				; COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 320  : 	INT32 scr_forcex, scr_forcey; // resolution asked from the cmd-line
; 321  : 
; 322  : 	if (dedicated)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00010	74 05		 je	 SHORT $LN2@SCR_CheckD

; 323  : 		return;

  00012	e9 dc 00 00 00	 jmp	 $LN6@SCR_CheckD
$LN2@SCR_CheckD:

; 324  : 
; 325  : 	// 0 means not set at the cmd-line
; 326  : 	scr_forcex = scr_forcey = 0;

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _scr_forcey$[ebp], 0
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _scr_forcey$[ebp]
  00021	89 45 fc	 mov	 DWORD PTR _scr_forcex$[ebp], eax

; 327  : 
; 328  : 	if (M_CheckParm("-width") && M_IsNextParm())

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_06EGEBBOP@?9width@
  00029	e8 00 00 00 00	 call	 _M_CheckParm
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 1a		 je	 SHORT $LN3@SCR_CheckD
  00035	e8 00 00 00 00	 call	 _M_IsNextParm
  0003a	85 c0		 test	 eax, eax
  0003c	74 11		 je	 SHORT $LN3@SCR_CheckD

; 329  : 		scr_forcex = atoi(M_GetNextParm());

  0003e	e8 00 00 00 00	 call	 _M_GetNextParm
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _atoi
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 fc	 mov	 DWORD PTR _scr_forcex$[ebp], eax
$LN3@SCR_CheckD:

; 330  : 
; 331  : 	if (M_CheckParm("-height") && M_IsNextParm())

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_07CHIKDHJG@?9height@
  00054	e8 00 00 00 00	 call	 _M_CheckParm
  00059	83 c4 04	 add	 esp, 4
  0005c	85 c0		 test	 eax, eax
  0005e	74 1a		 je	 SHORT $LN4@SCR_CheckD
  00060	e8 00 00 00 00	 call	 _M_IsNextParm
  00065	85 c0		 test	 eax, eax
  00067	74 11		 je	 SHORT $LN4@SCR_CheckD

; 332  : 		scr_forcey = atoi(M_GetNextParm());

  00069	e8 00 00 00 00	 call	 _M_GetNextParm
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _atoi
  00074	83 c4 04	 add	 esp, 4
  00077	89 45 f8	 mov	 DWORD PTR _scr_forcey$[ebp], eax
$LN4@SCR_CheckD:

; 333  : 
; 334  : 	if (scr_forcex && scr_forcey)

  0007a	83 7d fc 00	 cmp	 DWORD PTR _scr_forcex$[ebp], 0
  0007e	74 35		 je	 SHORT $LN5@SCR_CheckD
  00080	83 7d f8 00	 cmp	 DWORD PTR _scr_forcey$[ebp], 0
  00084	74 2f		 je	 SHORT $LN5@SCR_CheckD

; 335  : 	{
; 336  : 		CONS_Printf("Using resolution: %d x %d\n", scr_forcex, scr_forcey);

  00086	8b 45 f8	 mov	 eax, DWORD PTR _scr_forcey$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _scr_forcex$[ebp]
  0008d	51		 push	 ecx
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BBIIBFFP@Using?5resolution?3?5?$CFd?5x?5?$CFd?6@
  00093	e8 00 00 00 00	 call	 _CONS_Printf
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH

; 337  : 		// returns -1 if not found, thus will be 0 (no mode change) if not found
; 338  : 		setmodeneeded = VID_GetModeForSize(scr_forcex, scr_forcey) + 1;

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _scr_forcey$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _scr_forcex$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _VID_GetModeForSize
  000a8	83 c4 08	 add	 esp, 8
  000ab	83 c0 01	 add	 eax, 1
  000ae	a3 00 00 00 00	 mov	 DWORD PTR _setmodeneeded, eax

; 339  : 	}

  000b3	eb 3e		 jmp	 SHORT $LN6@SCR_CheckD
$LN5@SCR_CheckD:

; 340  : 	else
; 341  : 	{
; 342  : 		CONS_Printf("Default resolution: %d x %d (%d bits)\n", cv_scr_width.value,

  000b5	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_scr_depth+20
  000ba	50		 push	 eax
  000bb	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_scr_height+20
  000c1	51		 push	 ecx
  000c2	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_scr_width+20
  000c8	52		 push	 edx
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IHEDKCEC@Default?5resolution?3?5?$CFd?5x?5?$CFd?5?$CI?$CFd@
  000ce	e8 00 00 00 00	 call	 _CONS_Printf
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 343  : 			cv_scr_height.value, cv_scr_depth.value);
; 344  : 		// see note above
; 345  : 		setmodeneeded = VID_GetModeForSize(cv_scr_width.value, cv_scr_height.value) + 1;

  000d6	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_scr_height+20
  000db	50		 push	 eax
  000dc	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_scr_width+20
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 _VID_GetModeForSize
  000e8	83 c4 08	 add	 esp, 8
  000eb	83 c0 01	 add	 eax, 1
  000ee	a3 00 00 00 00	 mov	 DWORD PTR _setmodeneeded, eax
$LN6@SCR_CheckD:

; 346  : 	}
; 347  : }

  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_SCR_CheckDefaultMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\screen.c
;	COMDAT _SCR_Recalc
_TEXT	SEGMENT
_SCR_Recalc PROC					; COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 266  : 	if (dedicated)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00010	74 05		 je	 SHORT $LN2@SCR_Recalc

; 267  : 		return;

  00012	e9 bf 00 00 00	 jmp	 $LN1@SCR_Recalc
$LN2@SCR_Recalc:

; 268  : 
; 269  : 	// bytes per pixel quick access
; 270  : 	scr_bpp = vid.bpp;

  00017	a1 30 00 00 00	 mov	 eax, DWORD PTR _vid+48
  0001c	a3 00 00 00 00	 mov	 DWORD PTR _scr_bpp, eax

; 271  : 
; 272  : 	// scale 1,2,3 times in x and y the patches for the menus and overlays...
; 273  : 	// calculated once and for all, used by routines in v_video.c
; 274  : 	vid.dupx = vid.width / BASEVIDWIDTH;

  00021	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  00026	99		 cdq
  00027	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  0002c	f7 f9		 idiv	 ecx
  0002e	a3 20 00 00 00	 mov	 DWORD PTR _vid+32, eax

; 275  : 	vid.dupy = vid.height / BASEVIDHEIGHT;

  00033	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  00038	99		 cdq
  00039	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  0003e	f7 f9		 idiv	 ecx
  00040	a3 24 00 00 00	 mov	 DWORD PTR _vid+36, eax

; 276  : 	vid.fdupx = (float)vid.width / BASEVIDWIDTH;

  00045	f3 0f 2a 05 0c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _vid+12
  0004d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43a00000
  00055	f3 0f 11 05 28
	00 00 00	 movss	 DWORD PTR _vid+40, xmm0

; 277  : 	vid.fdupy = (float)vid.height / BASEVIDHEIGHT;

  0005d	f3 0f 2a 05 10
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _vid+16
  00065	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43480000
  0006d	f3 0f 11 05 2c
	00 00 00	 movss	 DWORD PTR _vid+44, xmm0

; 278  : 	vid.baseratio = FixedDiv(vid.height << FRACBITS, BASEVIDHEIGHT << FRACBITS);

  00075	68 00 00 c8 00	 push	 13107200		; 00c80000H
  0007a	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  0007f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _FixedDiv
  00088	83 c4 08	 add	 esp, 8
  0008b	a3 34 00 00 00	 mov	 DWORD PTR _vid+52, eax

; 279  : 
; 280  : 	// patch the asm code depending on vid buffer rowbytes
; 281  : #ifdef RUSEASM
; 282  : 	if (R_ASM)

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _R_ASM, 0
  00097	74 0e		 je	 SHORT $LN3@SCR_Recalc

; 283  : 		ASM_PatchRowBytes(vid.rowbytes);

  00099	a1 08 00 00 00	 mov	 eax, DWORD PTR _vid+8
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _ASM_PatchRowBytes
  000a4	83 c4 04	 add	 esp, 4
$LN3@SCR_Recalc:

; 284  : //	if (R_486 || R_586 || R_MMX)
; 285  : //		MMX_PatchRowBytes(vid.rowbytes);
; 286  : #endif
; 287  : 
; 288  : 	// toggle off automap because some screensize-dependent values will
; 289  : 	// be calculated next time the automap is activated.
; 290  : 	if (automapactive)

  000a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  000ae	74 06		 je	 SHORT $LN4@SCR_Recalc

; 291  : 		AM_Stop();

  000b0	e8 00 00 00 00	 call	 _AM_Stop
  000b5	90		 npad	 1
$LN4@SCR_Recalc:

; 292  : 
; 293  : 	// r_plane stuff: visplanes, openings, floorclip, ceilingclip, spanstart,
; 294  : 	//                spanstop, yslope, distscale, cachedheight, cacheddistance,
; 295  : 	//                cachedxstep, cachedystep
; 296  : 	//             -> allocated at the maximum vidsize, static.
; 297  : 
; 298  : 	// r_main: xtoviewangle, allocated at the maximum size.
; 299  : 	// r_things: negonearray, screenheightarray allocated max. size.
; 300  : 
; 301  : 	// set the screen[x] ptrs on the new vidbuffers
; 302  : 	V_Init();

  000b6	e8 00 00 00 00	 call	 _V_Init
  000bb	90		 npad	 1

; 303  : 
; 304  : 	// scr_viewsize doesn't change, neither detailLevel, but the pixels
; 305  : 	// per screenblock is different now, since we've changed resolution.
; 306  : 	R_SetViewSize(); //just set setsizeneeded true now ..

  000bc	e8 00 00 00 00	 call	 _R_SetViewSize
  000c1	90		 npad	 1

; 307  : 
; 308  : 	// vid.recalc lasts only for the next refresh...
; 309  : 	con_recalc = true;

  000c2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _con_recalc, 1

; 310  : 	am_recalc = true;

  000cc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _am_recalc, 1
$LN1@SCR_Recalc:

; 311  : }

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_SCR_Recalc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\screen.c
;	COMDAT _SCR_SetMode
_TEXT	SEGMENT
_SCR_SetMode PROC					; COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 102  : 	if (dedicated)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  00010	74 05		 je	 SHORT $LN2@SCR_SetMod

; 103  : 		return;

  00012	e9 15 01 00 00	 jmp	 $LN1@SCR_SetMod
$LN2@SCR_SetMod:

; 104  : 
; 105  : 	if (!setmodeneeded || WipeInAction)

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _setmodeneeded, 0
  0001e	74 09		 je	 SHORT $LN4@SCR_SetMod
  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _WipeInAction, 0
  00027	74 05		 je	 SHORT $LN3@SCR_SetMod
$LN4@SCR_SetMod:

; 106  : 		return; // should never happen and don't change it during a wipe, BAD!

  00029	e9 fe 00 00 00	 jmp	 $LN1@SCR_SetMod
$LN3@SCR_SetMod:

; 107  : 
; 108  : 	VID_SetMode(--setmodeneeded);

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR _setmodeneeded
  00033	83 e8 01	 sub	 eax, 1
  00036	a3 00 00 00 00	 mov	 DWORD PTR _setmodeneeded, eax
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _setmodeneeded
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _VID_SetMode
  00047	83 c4 04	 add	 esp, 4

; 109  : 
; 110  : 	V_SetPalette(0);

  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 _V_SetPalette
  00051	83 c4 04	 add	 esp, 4

; 111  : 
; 112  : 	//
; 113  : 	//  setup the right draw routines for either 8bpp or 16bpp
; 114  : 	//
; 115  : 	if (true)//vid.bpp == 1) //Always run in 8bpp. todo: remove all 16bpp code?

  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 79		 je	 SHORT $LN5@SCR_SetMod

; 116  : 	{
; 117  : 		basespanfunc = R_DrawSpan_8;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _basespanfunc, OFFSET _R_DrawSpan_8

; 118  : 		spanfunc = basespanfunc;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR _basespanfunc
  0006c	a3 00 00 00 00	 mov	 DWORD PTR _spanfunc, eax

; 119  : 		splatfunc = R_DrawSplat_8;

  00071	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _splatfunc, OFFSET _R_DrawSplat_8

; 120  : 		transcolfunc = R_DrawTranslatedColumn_8;

  0007b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _transcolfunc, OFFSET _R_DrawTranslatedColumn_8

; 121  : 		transtransfunc = R_DrawTranslatedTranslucentColumn_8;

  00085	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _transtransfunc, OFFSET _R_DrawTranslatedTranslucentColumn_8

; 122  : 
; 123  : 		colfunc = basecolfunc = R_DrawColumn_8;

  0008f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _basecolfunc, OFFSET _R_DrawColumn_8
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR _basecolfunc
  0009e	a3 00 00 00 00	 mov	 DWORD PTR _colfunc, eax

; 124  : 		shadecolfunc = R_DrawShadeColumn_8;

  000a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _shadecolfunc, OFFSET _R_DrawShadeColumn_8

; 125  : 		fuzzcolfunc = R_DrawTranslucentColumn_8;

  000ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _fuzzcolfunc, OFFSET _R_DrawTranslucentColumn_8

; 126  : 		walldrawerfunc = R_DrawWallColumn_8;

  000b7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _walldrawerfunc, OFFSET _R_DrawWallColumn_8

; 127  : #ifdef RUSEASM
; 128  : 		if (R_ASM)

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _R_ASM, 0
  000c8	74 0a		 je	 SHORT $LN7@SCR_SetMod

; 129  : 		{
; 130  : 			//colfunc = basecolfunc = R_DrawColumn_8_ASM;
; 131  : 			shadecolfunc = R_DrawShadeColumn_8_ASM;

  000ca	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _shadecolfunc, OFFSET _R_DrawShadeColumn_8_ASM
$LN7@SCR_SetMod:

; 132  : //			fuzzcolfunc = R_DrawTranslucentColumn_8_ASM;
; 133  : 			//walldrawerfunc = R_DrawWallColumn_8_ASM;
; 134  : 		}
; 135  : /*		if (R_486)
; 136  : 		{
; 137  : 			colfunc = basecolfunc = R_DrawColumn_8_NOMMX;
; 138  : 			CONS_Printf("using 486 code\n");
; 139  : 		}
; 140  : 		if (R_586)
; 141  : 		{
; 142  : 			colfunc = basecolfunc = R_DrawColumn_8_Pentium;
; 143  : 			CONS_Printf("upgrading to 586 code\n");
; 144  : 		}
; 145  : 		if (R_MMX)
; 146  : 		{
; 147  : 			colfunc = basecolfunc = R_DrawColumn_8_K6_MMX;
; 148  : 			CONS_Printf("now using cool MMX code\n");
; 149  : 		}*/
; 150  : #endif
; 151  : 	}

  000d4	eb 13		 jmp	 SHORT $LN6@SCR_SetMod
$LN5@SCR_SetMod:

; 152  : /*	else if (vid.bpp > 1)
; 153  : 	{
; 154  : 		CONS_Printf("using highcolor mode\n");
; 155  : 		spanfunc = basespanfunc = R_DrawSpan_16;
; 156  : 		transcolfunc = R_DrawTranslatedColumn_16;
; 157  : 		transtransfunc = R_DrawTranslucentColumn_16; // No 16bit operation for this function
; 158  : 
; 159  : 		colfunc = basecolfunc = R_DrawColumn_16;
; 160  : 		shadecolfunc = NULL; // detect error if used somewhere..
; 161  : 		fuzzcolfunc = R_DrawTranslucentColumn_16;
; 162  : 		walldrawerfunc = R_DrawWallColumn_16;
; 163  : 	}*/
; 164  : 	else
; 165  : 		I_Error("unknown bytes per pixel mode %d\n", vid.bpp);

  000d6	a1 30 00 00 00	 mov	 eax, DWORD PTR _vid+48
  000db	50		 push	 eax
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GKCJNMFB@unknown?5bytes?5per?5pixel?5mode?5?$CFd@
  000e1	e8 00 00 00 00	 call	 _I_Error
  000e6	83 c4 08	 add	 esp, 8
$LN6@SCR_SetMod:

; 166  : #ifndef DC
; 167  : 	if (vid.width % BASEVIDWIDTH || vid.height % BASEVIDHEIGHT)

  000e9	a1 0c 00 00 00	 mov	 eax, DWORD PTR _vid+12
  000ee	99		 cdq
  000ef	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  000f4	f7 f9		 idiv	 ecx
  000f6	85 d2		 test	 edx, edx
  000f8	75 11		 jne	 SHORT $LN9@SCR_SetMod
  000fa	a1 10 00 00 00	 mov	 eax, DWORD PTR _vid+16
  000ff	99		 cdq
  00100	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00105	f7 f9		 idiv	 ecx
  00107	85 d2		 test	 edx, edx
  00109	74 17		 je	 SHORT $LN8@SCR_SetMod
$LN9@SCR_SetMod:

; 168  : 		CONS_Printf("WARNING: Resolution is not aspect-correct!\n"

  0010b	68 c8 00 00 00	 push	 200			; 000000c8H
  00110	68 40 01 00 00	 push	 320			; 00000140H
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CLCBJEDO@WARNING?3?5Resolution?5is?5not?5aspe@
  0011a	e8 00 00 00 00	 call	 _CONS_Printf
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@SCR_SetMod:

; 169  : 			"Use a multiple of %dx%d\n", BASEVIDWIDTH, BASEVIDHEIGHT);
; 170  : #endif
; 171  : 	// set the apprpriate drawer for the sky (tall or INT16)
; 172  : 	setmodeneeded = 0;

  00122	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _setmodeneeded, 0
$LN1@SCR_SetMod:

; 173  : }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
_SCR_SetMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
END
