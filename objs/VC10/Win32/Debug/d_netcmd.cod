; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\d_netcmd.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ObjectPlace_OnChange
PUBLIC	_gametype
PUBLIC	_splitscreen
PUBLIC	_circuitmap
PUBLIC	_cv_playername
PUBLIC	_cv_playercolor
PUBLIC	_cv_seenames
PUBLIC	_cv_allowseenames
PUBLIC	_cv_usemouse
PUBLIC	_cv_usejoystick
PUBLIC	_cv_usejoystick2
PUBLIC	_cv_joyscale
PUBLIC	_cv_joyscale2
PUBLIC	_cv_mouse2port
PUBLIC	_cv_usemouse2
PUBLIC	_cv_skin
PUBLIC	_cv_playername2
PUBLIC	_cv_playercolor2
PUBLIC	_cv_skin2
PUBLIC	_cv_tagtype
PUBLIC	_cv_touchtag
PUBLIC	_cv_hidetime
PUBLIC	_cv_matchtype
PUBLIC	_cv_friendlyfire
PUBLIC	_cv_pointlimit
PUBLIC	_cv_timelimit
PUBLIC	_cv_numlaps
PUBLIC	_timelimitintics
PUBLIC	_cv_allowexitlevel
PUBLIC	_cv_cheats
PUBLIC	_cv_autobalance
PUBLIC	_cv_teamscramble
PUBLIC	_cv_scrambleonchange
PUBLIC	_cv_netstat
PUBLIC	_cv_countdowntime
PUBLIC	_cv_runscripts
PUBLIC	_cv_mute
PUBLIC	_cv_killingdead
PUBLIC	_cv_pause
PUBLIC	_cv_allowteamchange
PUBLIC	_cv_teleporters
PUBLIC	_cv_superring
PUBLIC	_cv_supersneakers
PUBLIC	_cv_invincibility
PUBLIC	_cv_jumpshield
PUBLIC	_cv_watershield
PUBLIC	_cv_ringshield
PUBLIC	_cv_forceshield
PUBLIC	_cv_bombshield
PUBLIC	_cv_1up
PUBLIC	_cv_eggmanbox
PUBLIC	_cv_questionbox
PUBLIC	_cv_recycler
PUBLIC	_cv_objectplace
PUBLIC	_cv_objflags
PUBLIC	_cv_mapthingnum
PUBLIC	_cv_speed
PUBLIC	_cv_snapto
PUBLIC	_cv_grid
PUBLIC	_cv_inttime
PUBLIC	_cv_advancemap
PUBLIC	_cv_playersforexit
PUBLIC	_cv_match_scoring
PUBLIC	_cv_overtime
PUBLIC	_cv_realnames
PUBLIC	_cv_resetmusic
PUBLIC	_cv_autoaim
PUBLIC	_cv_autoaim2
PUBLIC	_cv_ringslinger
PUBLIC	_cv_setrings
PUBLIC	_cv_setlives
PUBLIC	_cv_setcontinues
PUBLIC	_cv_soundtest
PUBLIC	_cv_specialrings
PUBLIC	_cv_powerstones
PUBLIC	_cv_matchboxes
PUBLIC	_cv_racetype
PUBLIC	_cv_raceitemboxes
PUBLIC	_cv_maxping
PUBLIC	_cv_dummyteam
PUBLIC	_cv_dummyscramble
PUBLIC	_cv_skipmapcheck
PUBLIC	_cv_sleep
PUBLIC	_mapchangepending
PUBLIC	_cv_timetic
PUBLIC	_cv_forceskin
PUBLIC	_cv_downloading
PUBLIC	_adminplayer
PUBLIC	_cv_gravity
PUBLIC	??_C@_03GCDBBDDL@Off@				; `string'
PUBLIC	??_C@_02IAAGKKDJ@On@				; `string'
PUBLIC	??_C@_05BPHDNFDN@Force@				; `string'
PUBLIC	??_C@_04FLOGHLDB@COM1@				; `string'
PUBLIC	??_C@_04HAMLCIPC@COM2@				; `string'
PUBLIC	??_C@_04GJNABJLD@COM3@				; `string'
PUBLIC	??_C@_04CGJBIPHE@COM4@				; `string'
PUBLIC	??_C@_06EFAGIKOH@Normal@			; `string'
PUBLIC	??_C@_04GBPANCCF@Team@				; `string'
PUBLIC	??_C@_0O@NNDKJCLH@Hide?5and?5Seek@		; `string'
PUBLIC	??_C@_03KGHEHEMH@MIN@				; `string'
PUBLIC	??_C@_03LEPPJAKI@MAX@				; `string'
PUBLIC	??_C@_06BEOPDEGP@Random@			; `string'
PUBLIC	??_C@_06KANFALAM@Points@			; `string'
PUBLIC	??_C@_07HMFPECFA@Classic@			; `string'
PUBLIC	??_C@_09GCCIMMBF@Teleports@			; `string'
PUBLIC	??_C@_04OHJIHAFH@None@				; `string'
PUBLIC	??_C@_0L@LAAEBKFI@Non?9Random@			; `string'
PUBLIC	??_C@_03CMIMKEEK@Low@				; `string'
PUBLIC	??_C@_06LHIDHMIE@Medium@			; `string'
PUBLIC	??_C@_04PHMMJPOJ@High@				; `string'
PUBLIC	??_C@_05PGDJFNFN@Floor@				; `string'
PUBLIC	??_C@_07LJKDOBMH@Ceiling@			; `string'
PUBLIC	??_C@_07GFCAAINO@Halfway@			; `string'
PUBLIC	??_C@_06LGMEBDBC@Server@			; `string'
PUBLIC	??_C@_03HFJGAJFE@All@				; `string'
PUBLIC	??_C@_04DKAKODEK@Full@				; `string'
PUBLIC	??_C@_0N@NECPPEGC@dummyconsvar@			; `string'
PUBLIC	??_C@_09BCJOCADI@Spectator@			; `string'
PUBLIC	??_C@_03PADCEAKC@Red@				; `string'
PUBLIC	??_C@_04CAKOHOCJ@Blue@				; `string'
PUBLIC	??_C@_09GKADIEJM@dummyteam@			; `string'
PUBLIC	??_C@_0O@LNNADFHB@dummyscramble@		; `string'
PUBLIC	??_C@_0BA@FBFMLEKC@allowteamchange@		; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes@				; `string'
PUBLIC	??_C@_08GPJLDGBN@racetype@			; `string'
PUBLIC	??_C@_0P@DHKGKGMJ@race_itemboxes@		; `string'
PUBLIC	??_C@_09FEONCBCM@Colorless@			; `string'
PUBLIC	??_C@_08JBIPJPLC@Ally?1Foe@			; `string'
PUBLIC	??_C@_08IELDOFCL@seenames@			; `string'
PUBLIC	??_C@_0O@MMHLFICO@allowseenames@		; `string'
PUBLIC	??_C@_04MEMAJGDJ@name@				; `string'
PUBLIC	??_C@_05NGKIMGC@Sonic@				; `string'
PUBLIC	??_C@_05PEENBMOG@color@				; `string'
PUBLIC	??_C@_04NHPAFEHJ@skin@				; `string'
PUBLIC	??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ ; `string'
PUBLIC	??_C@_07KHNCKFFH@autoaim@			; `string'
PUBLIC	??_C@_08BINIECID@autoaim2@			; `string'
PUBLIC	??_C@_05LCLBBMOP@name2@				; `string'
PUBLIC	??_C@_05HOIBOKLI@Tails@				; `string'
PUBLIC	??_C@_06KEONFOCA@color2@			; `string'
PUBLIC	??_C@_06LMIDBFFB@Orange@			; `string'
PUBLIC	??_C@_05MEHOGNLN@skin2@				; `string'
PUBLIC	??_C@_0N@MJOCNLLF@skipmapcheck@			; `string'
PUBLIC	??_C@_09DFHJPEJJ@use_mouse@			; `string'
PUBLIC	??_C@_0L@GEJGAGGF@use_mouse2@			; `string'
PUBLIC	??_C@_0N@NPDMKIHI@use_joystick@			; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_0O@LDHBJBNH@use_joystick2@		; `string'
PUBLIC	??_C@_08CJHJIILG@joyscale@			; `string'
PUBLIC	??_C@_01HIHLOKLC@1@				; `string'
PUBLIC	??_C@_09MPFLDLEA@joyscale2@			; `string'
PUBLIC	??_C@_0L@KBLCBIIK@mouse2port@			; `string'
PUBLIC	??_C@_0L@MALECICB@matchboxes@			; `string'
PUBLIC	??_C@_0N@CIIANCNH@specialrings@			; `string'
PUBLIC	??_C@_0M@EIPONAEO@powerstones@			; `string'
PUBLIC	??_C@_08DFKMPDDF@recycler@			; `string'
PUBLIC	??_C@_0M@JLEDEPBH@teleporters@			; `string'
PUBLIC	??_C@_09CFMCGBPM@superring@			; `string'
PUBLIC	??_C@_0O@EPPABEFI@supersneakers@		; `string'
PUBLIC	??_C@_0O@PJGLLNIM@invincibility@		; `string'
PUBLIC	??_C@_0L@NGLOPAHL@jumpshield@			; `string'
PUBLIC	??_C@_0M@KDCAKGJM@watershield@			; `string'
PUBLIC	??_C@_0L@LAOKLAGE@ringshield@			; `string'
PUBLIC	??_C@_0M@GOJBBNPG@forceshield@			; `string'
PUBLIC	??_C@_0L@GCGPDGEJ@bombshield@			; `string'
PUBLIC	??_C@_03OLCJGMGK@1up@				; `string'
PUBLIC	??_C@_08HKGBCIMG@eggmantv@			; `string'
PUBLIC	??_C@_08GLLNALGN@randomtv@			; `string'
PUBLIC	??_C@_0M@CDKKMLB@ringslinger@			; `string'
PUBLIC	??_C@_02JINPPBEP@No@				; `string'
PUBLIC	??_C@_08BAEPIAPA@setrings@			; `string'
PUBLIC	??_C@_08LPLKEIAF@setlives@			; `string'
PUBLIC	??_C@_0N@HCOFMAAH@setcontinues@			; `string'
PUBLIC	??_C@_07GFBFDLBM@gravity@			; `string'
PUBLIC	??_C@_03LOHCHBBO@0?45@				; `string'
PUBLIC	??_C@_09DDMDCJKC@soundtest@			; `string'
PUBLIC	??_C@_0O@LHBOJGLO@countdowntime@		; `string'
PUBLIC	??_C@_02PPBOIJDM@60@				; `string'
PUBLIC	??_C@_07NMOJJJOE@tagtype@			; `string'
PUBLIC	??_C@_08KDPEBONH@touchtag@			; `string'
PUBLIC	??_C@_08ENALMHF@hidetime@			; `string'
PUBLIC	??_C@_02PJNFELNH@30@				; `string'
PUBLIC	??_C@_0M@CJFJJHDB@autobalance@			; `string'
PUBLIC	??_C@_0N@JKLBGCI@teamscramble@			; `string'
PUBLIC	??_C@_0BB@HMPCJPOH@scrambleonchange@		; `string'
PUBLIC	??_C@_09FDIJJHCA@matchtype@			; `string'
PUBLIC	??_C@_0N@DFCDFDEL@friendlyfire@			; `string'
PUBLIC	??_C@_07KENKKNHD@timetic@			; `string'
PUBLIC	??_C@_0M@MGEHALFC@objectplace@			; `string'
PUBLIC	??_C@_06LJMIHJCM@cheats@			; `string'
PUBLIC	??_C@_06PDBNMNJI@snapto@			; `string'
PUBLIC	??_C@_05HJCMGBKF@speed@				; `string'
PUBLIC	??_C@_02KMALDIDP@16@				; `string'
PUBLIC	??_C@_08GPFLAALE@objflags@			; `string'
PUBLIC	??_C@_0M@KFNHECOB@mapthingnum@			; `string'
PUBLIC	??_C@_04JFGOJFKE@grid@				; `string'
PUBLIC	??_C@_0O@ILENJHOI@match_scoring@		; `string'
PUBLIC	??_C@_08HNIOMLKM@overtime@			; `string'
PUBLIC	??_C@_09LNIELMIE@realnames@			; `string'
PUBLIC	??_C@_0L@LJPOHLGA@resetmusic@			; `string'
PUBLIC	??_C@_0L@EJDNILMN@pointlimit@			; `string'
PUBLIC	??_C@_09KPHKOKCC@timelimit@			; `string'
PUBLIC	??_C@_07NKDNDJFI@numlaps@			; `string'
PUBLIC	??_C@_01FAMBOPH@4@				; `string'
PUBLIC	??_C@_09KBGJKPCM@forceskin@			; `string'
PUBLIC	??_C@_02PGHGPEOM@?91@				; `string'
PUBLIC	??_C@_0M@JHBNOPIH@downloading@			; `string'
PUBLIC	??_C@_0P@CAIFKPNG@allowexitlevel@		; `string'
PUBLIC	??_C@_0M@KOONKFKH@killingdead@			; `string'
PUBLIC	??_C@_07EOOIAOLL@netstat@			; `string'
PUBLIC	_cv_nettimeout
PUBLIC	??_C@_0L@KFPLCNDJ@nettimeout@			; `string'
PUBLIC	??_C@_03JMJANLDI@525@				; `string'
PUBLIC	??_C@_07MMIKBOAN@maxping@			; `string'
PUBLIC	??_C@_07MLKNKHO@inttime@			; `string'
PUBLIC	??_C@_02IHCGGLPM@15@				; `string'
PUBLIC	??_C@_04MDFHGMOB@Next@				; `string'
PUBLIC	??_C@_0L@OJILPMNF@advancemap@			; `string'
PUBLIC	??_C@_03EHAPBBEA@One@				; `string'
PUBLIC	??_C@_0P@CGFDBFCI@playersforexit@		; `string'
PUBLIC	??_C@_0L@MAGLICBD@runscripts@			; `string'
PUBLIC	??_C@_0BA@GBICBCMH@pausepermission@		; `string'
PUBLIC	??_C@_04EPOMLENO@mute@				; `string'
PUBLIC	??_C@_08NCLHKKAD@cpusleep@			; `string'
EXTRN	_I_InitJoystick:PROC
EXTRN	_I_InitJoystick2:PROC
EXTRN	_I_StartupMouse:PROC
EXTRN	_I_StartupMouse2:PROC
EXTRN	_MatchType_OnChange:PROC
EXTRN	_CV_OnOff:BYTE
EXTRN	_CV_YesNo:BYTE
EXTRN	_CV_Unsigned:BYTE
EXTRN	_Color_cons_t:BYTE
_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
_BSS	SEGMENT
_gametype DW	01H DUP (?)
	ALIGN	4

_splitscreen DD	01H DUP (?)
_circuitmap DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_cv_debug:DWORD
_DATA	ENDS
_BSS	SEGMENT
_timelimitintics DD 01H DUP (?)
_mapchangepending DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_08NCLHKKAD@cpusleep@
CONST	SEGMENT
??_C@_08NCLHKKAD@cpusleep@ DB 'cpusleep', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EPOMLENO@mute@
CONST	SEGMENT
??_C@_04EPOMLENO@mute@ DB 'mute', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GBICBCMH@pausepermission@
CONST	SEGMENT
??_C@_0BA@GBICBCMH@pausepermission@ DB 'pausepermission', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MAGLICBD@runscripts@
CONST	SEGMENT
??_C@_0L@MAGLICBD@runscripts@ DB 'runscripts', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGFDBFCI@playersforexit@
CONST	SEGMENT
??_C@_0P@CGFDBFCI@playersforexit@ DB 'playersforexit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03EHAPBBEA@One@
CONST	SEGMENT
??_C@_03EHAPBBEA@One@ DB 'One', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJILPMNF@advancemap@
CONST	SEGMENT
??_C@_0L@OJILPMNF@advancemap@ DB 'advancemap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDFHGMOB@Next@
CONST	SEGMENT
??_C@_04MDFHGMOB@Next@ DB 'Next', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IHCGGLPM@15@
CONST	SEGMENT
??_C@_02IHCGGLPM@15@ DB '15', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MLKNKHO@inttime@
CONST	SEGMENT
??_C@_07MLKNKHO@inttime@ DB 'inttime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMIKBOAN@maxping@
CONST	SEGMENT
??_C@_07MMIKBOAN@maxping@ DB 'maxping', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMJANLDI@525@
CONST	SEGMENT
??_C@_03JMJANLDI@525@ DB '525', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFPLCNDJ@nettimeout@
CONST	SEGMENT
??_C@_0L@KFPLCNDJ@nettimeout@ DB 'nettimeout', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EOOIAOLL@netstat@
CONST	SEGMENT
??_C@_07EOOIAOLL@netstat@ DB 'netstat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KOONKFKH@killingdead@
CONST	SEGMENT
??_C@_0M@KOONKFKH@killingdead@ DB 'killingdead', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CAIFKPNG@allowexitlevel@
CONST	SEGMENT
??_C@_0P@CAIFKPNG@allowexitlevel@ DB 'allowexitlevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JHBNOPIH@downloading@
CONST	SEGMENT
??_C@_0M@JHBNOPIH@downloading@ DB 'downloading', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PGHGPEOM@?91@
CONST	SEGMENT
??_C@_02PGHGPEOM@?91@ DB '-1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBGJKPCM@forceskin@
CONST	SEGMENT
??_C@_09KBGJKPCM@forceskin@ DB 'forceskin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4@
CONST	SEGMENT
??_C@_01FAMBOPH@4@ DB '4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07NKDNDJFI@numlaps@
CONST	SEGMENT
??_C@_07NKDNDJFI@numlaps@ DB 'numlaps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPHKOKCC@timelimit@
CONST	SEGMENT
??_C@_09KPHKOKCC@timelimit@ DB 'timelimit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EJDNILMN@pointlimit@
CONST	SEGMENT
??_C@_0L@EJDNILMN@pointlimit@ DB 'pointlimit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LJPOHLGA@resetmusic@
CONST	SEGMENT
??_C@_0L@LJPOHLGA@resetmusic@ DB 'resetmusic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LNIELMIE@realnames@
CONST	SEGMENT
??_C@_09LNIELMIE@realnames@ DB 'realnames', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HNIOMLKM@overtime@
CONST	SEGMENT
??_C@_08HNIOMLKM@overtime@ DB 'overtime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ILENJHOI@match_scoring@
CONST	SEGMENT
??_C@_0O@ILENJHOI@match_scoring@ DB 'match_scoring', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFGOJFKE@grid@
CONST	SEGMENT
??_C@_04JFGOJFKE@grid@ DB 'grid', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KFNHECOB@mapthingnum@
CONST	SEGMENT
??_C@_0M@KFNHECOB@mapthingnum@ DB 'mapthingnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPFLAALE@objflags@
CONST	SEGMENT
??_C@_08GPFLAALE@objflags@ DB 'objflags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMALDIDP@16@
CONST	SEGMENT
??_C@_02KMALDIDP@16@ DB '16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HJCMGBKF@speed@
CONST	SEGMENT
??_C@_05HJCMGBKF@speed@ DB 'speed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDBNMNJI@snapto@
CONST	SEGMENT
??_C@_06PDBNMNJI@snapto@ DB 'snapto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJMIHJCM@cheats@
CONST	SEGMENT
??_C@_06LJMIHJCM@cheats@ DB 'cheats', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MGEHALFC@objectplace@
CONST	SEGMENT
??_C@_0M@MGEHALFC@objectplace@ DB 'objectplace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KENKKNHD@timetic@
CONST	SEGMENT
??_C@_07KENKKNHD@timetic@ DB 'timetic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFCDFDEL@friendlyfire@
CONST	SEGMENT
??_C@_0N@DFCDFDEL@friendlyfire@ DB 'friendlyfire', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDIJJHCA@matchtype@
CONST	SEGMENT
??_C@_09FDIJJHCA@matchtype@ DB 'matchtype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HMPCJPOH@scrambleonchange@
CONST	SEGMENT
??_C@_0BB@HMPCJPOH@scrambleonchange@ DB 'scrambleonchange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKLBGCI@teamscramble@
CONST	SEGMENT
??_C@_0N@JKLBGCI@teamscramble@ DB 'teamscramble', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJFJJHDB@autobalance@
CONST	SEGMENT
??_C@_0M@CJFJJHDB@autobalance@ DB 'autobalance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJNFELNH@30@
CONST	SEGMENT
??_C@_02PJNFELNH@30@ DB '30', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENALMHF@hidetime@
CONST	SEGMENT
??_C@_08ENALMHF@hidetime@ DB 'hidetime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KDPEBONH@touchtag@
CONST	SEGMENT
??_C@_08KDPEBONH@touchtag@ DB 'touchtag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMOJJJOE@tagtype@
CONST	SEGMENT
??_C@_07NMOJJJOE@tagtype@ DB 'tagtype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PPBOIJDM@60@
CONST	SEGMENT
??_C@_02PPBOIJDM@60@ DB '60', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LHBOJGLO@countdowntime@
CONST	SEGMENT
??_C@_0O@LHBOJGLO@countdowntime@ DB 'countdowntime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DDMDCJKC@soundtest@
CONST	SEGMENT
??_C@_09DDMDCJKC@soundtest@ DB 'soundtest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOHCHBBO@0?45@
CONST	SEGMENT
??_C@_03LOHCHBBO@0?45@ DB '0.5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFBFDLBM@gravity@
CONST	SEGMENT
??_C@_07GFBFDLBM@gravity@ DB 'gravity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HCOFMAAH@setcontinues@
CONST	SEGMENT
??_C@_0N@HCOFMAAH@setcontinues@ DB 'setcontinues', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPLKEIAF@setlives@
CONST	SEGMENT
??_C@_08LPLKEIAF@setlives@ DB 'setlives', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BAEPIAPA@setrings@
CONST	SEGMENT
??_C@_08BAEPIAPA@setrings@ DB 'setrings', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No@
CONST	SEGMENT
??_C@_02JINPPBEP@No@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDKKMLB@ringslinger@
CONST	SEGMENT
??_C@_0M@CDKKMLB@ringslinger@ DB 'ringslinger', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GLLNALGN@randomtv@
CONST	SEGMENT
??_C@_08GLLNALGN@randomtv@ DB 'randomtv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKGBCIMG@eggmantv@
CONST	SEGMENT
??_C@_08HKGBCIMG@eggmantv@ DB 'eggmantv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OLCJGMGK@1up@
CONST	SEGMENT
??_C@_03OLCJGMGK@1up@ DB '1up', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCGPDGEJ@bombshield@
CONST	SEGMENT
??_C@_0L@GCGPDGEJ@bombshield@ DB 'bombshield', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GOJBBNPG@forceshield@
CONST	SEGMENT
??_C@_0M@GOJBBNPG@forceshield@ DB 'forceshield', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LAOKLAGE@ringshield@
CONST	SEGMENT
??_C@_0L@LAOKLAGE@ringshield@ DB 'ringshield', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDCAKGJM@watershield@
CONST	SEGMENT
??_C@_0M@KDCAKGJM@watershield@ DB 'watershield', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NGLOPAHL@jumpshield@
CONST	SEGMENT
??_C@_0L@NGLOPAHL@jumpshield@ DB 'jumpshield', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJGLLNIM@invincibility@
CONST	SEGMENT
??_C@_0O@PJGLLNIM@invincibility@ DB 'invincibility', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EPPABEFI@supersneakers@
CONST	SEGMENT
??_C@_0O@EPPABEFI@supersneakers@ DB 'supersneakers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CFMCGBPM@superring@
CONST	SEGMENT
??_C@_09CFMCGBPM@superring@ DB 'superring', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JLEDEPBH@teleporters@
CONST	SEGMENT
??_C@_0M@JLEDEPBH@teleporters@ DB 'teleporters', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DFKMPDDF@recycler@
CONST	SEGMENT
??_C@_08DFKMPDDF@recycler@ DB 'recycler', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EIPONAEO@powerstones@
CONST	SEGMENT
??_C@_0M@EIPONAEO@powerstones@ DB 'powerstones', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CIIANCNH@specialrings@
CONST	SEGMENT
??_C@_0N@CIIANCNH@specialrings@ DB 'specialrings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MALECICB@matchboxes@
CONST	SEGMENT
??_C@_0L@MALECICB@matchboxes@ DB 'matchboxes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KBLCBIIK@mouse2port@
CONST	SEGMENT
??_C@_0L@KBLCBIIK@mouse2port@ DB 'mouse2port', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MPFLDLEA@joyscale2@
CONST	SEGMENT
??_C@_09MPFLDLEA@joyscale2@ DB 'joyscale2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1@
CONST	SEGMENT
??_C@_01HIHLOKLC@1@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08CJHJIILG@joyscale@
CONST	SEGMENT
??_C@_08CJHJIILG@joyscale@ DB 'joyscale', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDHBJBNH@use_joystick2@
CONST	SEGMENT
??_C@_0O@LDHBJBNH@use_joystick2@ DB 'use_joystick2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPDMKIHI@use_joystick@
CONST	SEGMENT
??_C@_0N@NPDMKIHI@use_joystick@ DB 'use_joystick', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GEJGAGGF@use_mouse2@
CONST	SEGMENT
??_C@_0L@GEJGAGGF@use_mouse2@ DB 'use_mouse2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DFHJPEJJ@use_mouse@
CONST	SEGMENT
??_C@_09DFHJPEJJ@use_mouse@ DB 'use_mouse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MJOCNLLF@skipmapcheck@
CONST	SEGMENT
??_C@_0N@MJOCNLLF@skipmapcheck@ DB 'skipmapcheck', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHOGNLN@skin2@
CONST	SEGMENT
??_C@_05MEHOGNLN@skin2@ DB 'skin2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMIDBFFB@Orange@
CONST	SEGMENT
??_C@_06LMIDBFFB@Orange@ DB 'Orange', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KEONFOCA@color2@
CONST	SEGMENT
??_C@_06KEONFOCA@color2@ DB 'color2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HOIBOKLI@Tails@
CONST	SEGMENT
??_C@_05HOIBOKLI@Tails@ DB 'Tails', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCLBBMOP@name2@
CONST	SEGMENT
??_C@_05LCLBBMOP@name2@ DB 'name2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BINIECID@autoaim2@
CONST	SEGMENT
??_C@_08BINIECID@autoaim2@ DB 'autoaim2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KHNCKFFH@autoaim@
CONST	SEGMENT
??_C@_07KHNCKFFH@autoaim@ DB 'autoaim', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
CONST	SEGMENT
??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@ DB 'son'
	DB	'ic', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NHPAFEHJ@skin@
CONST	SEGMENT
??_C@_04NHPAFEHJ@skin@ DB 'skin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEENBMOG@color@
CONST	SEGMENT
??_C@_05PEENBMOG@color@ DB 'color', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGKIMGC@Sonic@
CONST	SEGMENT
??_C@_05NGKIMGC@Sonic@ DB 'Sonic', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name@ DB 'name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MMHLFICO@allowseenames@
CONST	SEGMENT
??_C@_0O@MMHLFICO@allowseenames@ DB 'allowseenames', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IELDOFCL@seenames@
CONST	SEGMENT
??_C@_08IELDOFCL@seenames@ DB 'seenames', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JBIPJPLC@Ally?1Foe@
CONST	SEGMENT
??_C@_08JBIPJPLC@Ally?1Foe@ DB 'Ally/Foe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEONCBCM@Colorless@
CONST	SEGMENT
??_C@_09FEONCBCM@Colorless@ DB 'Colorless', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DHKGKGMJ@race_itemboxes@
CONST	SEGMENT
??_C@_0P@DHKGKGMJ@race_itemboxes@ DB 'race_itemboxes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPJLDGBN@racetype@
CONST	SEGMENT
??_C@_08GPJLDGBN@racetype@ DB 'racetype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FBFMLEKC@allowteamchange@
CONST	SEGMENT
??_C@_0BA@FBFMLEKC@allowteamchange@ DB 'allowteamchange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LNNADFHB@dummyscramble@
CONST	SEGMENT
??_C@_0O@LNNADFHB@dummyscramble@ DB 'dummyscramble', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GKADIEJM@dummyteam@
CONST	SEGMENT
??_C@_09GKADIEJM@dummyteam@ DB 'dummyteam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CAKOHOCJ@Blue@
CONST	SEGMENT
??_C@_04CAKOHOCJ@Blue@ DB 'Blue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PADCEAKC@Red@
CONST	SEGMENT
??_C@_03PADCEAKC@Red@ DB 'Red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BCJOCADI@Spectator@
CONST	SEGMENT
??_C@_09BCJOCADI@Spectator@ DB 'Spectator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NECPPEGC@dummyconsvar@
CONST	SEGMENT
??_C@_0N@NECPPEGC@dummyconsvar@ DB 'dummyconsvar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DKAKODEK@Full@
CONST	SEGMENT
??_C@_04DKAKODEK@Full@ DB 'Full', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HFJGAJFE@All@
CONST	SEGMENT
??_C@_03HFJGAJFE@All@ DB 'All', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGMEBDBC@Server@
CONST	SEGMENT
??_C@_06LGMEBDBC@Server@ DB 'Server', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFCAAINO@Halfway@
CONST	SEGMENT
??_C@_07GFCAAINO@Halfway@ DB 'Halfway', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJKDOBMH@Ceiling@
CONST	SEGMENT
??_C@_07LJKDOBMH@Ceiling@ DB 'Ceiling', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PGDJFNFN@Floor@
CONST	SEGMENT
??_C@_05PGDJFNFN@Floor@ DB 'Floor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHMMJPOJ@High@
CONST	SEGMENT
??_C@_04PHMMJPOJ@High@ DB 'High', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LHIDHMIE@Medium@
CONST	SEGMENT
??_C@_06LHIDHMIE@Medium@ DB 'Medium', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CMIMKEEK@Low@
CONST	SEGMENT
??_C@_03CMIMKEEK@Low@ DB 'Low', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LAAEBKFI@Non?9Random@
CONST	SEGMENT
??_C@_0L@LAAEBKFI@Non?9Random@ DB 'Non-Random', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None@
CONST	SEGMENT
??_C@_04OHJIHAFH@None@ DB 'None', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GCCIMMBF@Teleports@
CONST	SEGMENT
??_C@_09GCCIMMBF@Teleports@ DB 'Teleports', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HMFPECFA@Classic@
CONST	SEGMENT
??_C@_07HMFPECFA@Classic@ DB 'Classic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KANFALAM@Points@
CONST	SEGMENT
??_C@_06KANFALAM@Points@ DB 'Points', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEOPDEGP@Random@
CONST	SEGMENT
??_C@_06BEOPDEGP@Random@ DB 'Random', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LEPPJAKI@MAX@
CONST	SEGMENT
??_C@_03LEPPJAKI@MAX@ DB 'MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KGHEHEMH@MIN@
CONST	SEGMENT
??_C@_03KGHEHEMH@MIN@ DB 'MIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNDKJCLH@Hide?5and?5Seek@
CONST	SEGMENT
??_C@_0O@NNDKJCLH@Hide?5and?5Seek@ DB 'Hide and Seek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBPANCCF@Team@
CONST	SEGMENT
??_C@_04GBPANCCF@Team@ DB 'Team', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFAGIKOH@Normal@
CONST	SEGMENT
??_C@_06EFAGIKOH@Normal@ DB 'Normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGJBIPHE@COM4@
CONST	SEGMENT
??_C@_04CGJBIPHE@COM4@ DB 'COM4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJNABJLD@COM3@
CONST	SEGMENT
??_C@_04GJNABJLD@COM3@ DB 'COM3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HAMLCIPC@COM2@
CONST	SEGMENT
??_C@_04HAMLCIPC@COM2@ DB 'COM2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FLOGHLDB@COM1@
CONST	SEGMENT
??_C@_04FLOGHLDB@COM1@ DB 'COM1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BPHDNFDN@Force@
CONST	SEGMENT
??_C@_05BPHDNFDN@Force@ DB 'Force', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCDBBDDL@Off@
CONST	SEGMENT
??_C@_03GCDBBDDL@Off@ DB 'Off', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_cv_playername DD FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_05NGKIMGC@Sonic@
	DD	0bH
	DD	00H
	DD	FLAT:_Name_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_playercolor DD FLAT:??_C@_05PEENBMOG@color@
	DD	FLAT:??_C@_04CAKOHOCJ@Blue@
	DD	0aH
	DD	FLAT:_Color_cons_t
	DD	FLAT:_Color_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_seenames DD	FLAT:??_C@_08IELDOFCL@seenames@
	DD	FLAT:??_C@_08JBIPJPLC@Ally?1Foe@
	DD	01H
	DD	FLAT:_seenames_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_allowseenames DD FLAT:??_C@_0O@MMHLFICO@allowseenames@
	DD	FLAT:??_C@_03CCLAEDDF@Yes@
	DD	04H
	DD	FLAT:_CV_YesNo
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_usemouse DD	FLAT:??_C@_09DFHJPEJJ@use_mouse@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	03H
	DD	FLAT:_usemouse_cons_t
	DD	FLAT:_I_StartupMouse
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_usejoystick DD FLAT:??_C@_0N@NPDMKIHI@use_joystick@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	03H
	DD	00H
	DD	FLAT:_I_InitJoystick
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_usejoystick2 DD FLAT:??_C@_0O@LDHBJBNH@use_joystick2@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	03H
	DD	00H
	DD	FLAT:_I_InitJoystick2
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_joyscale DD	FLAT:??_C@_08CJHJIILG@joyscale@
	DD	FLAT:??_C@_01HIHLOKLC@1@
	DD	0401H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_joyscale2 DD FLAT:??_C@_09MPFLDLEA@joyscale2@
	DD	FLAT:??_C@_01HIHLOKLC@1@
	DD	0401H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_mouse2port DD FLAT:??_C@_0L@KBLCBIIK@mouse2port@
	DD	FLAT:??_C@_04HAMLCIPC@COM2@
	DD	01H
	DD	FLAT:_mouse2port_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_usemouse2 DD FLAT:??_C@_0L@GEJGAGGF@use_mouse2@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	03H
	DD	FLAT:_usemouse_cons_t
	DD	FLAT:_I_StartupMouse2
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_skin DD	FLAT:??_C@_04NHPAFEHJ@skin@
	DD	FLAT:??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
	DD	0aH
	DD	00H
	DD	FLAT:_Skin_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_playername2 DD FLAT:??_C@_05LCLBBMOP@name2@
	DD	FLAT:??_C@_05HOIBOKLI@Tails@
	DD	0bH
	DD	00H
	DD	FLAT:_Name2_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_playercolor2 DD FLAT:??_C@_06KEONFOCA@color2@
	DD	FLAT:??_C@_06LMIDBFFB@Orange@
	DD	0aH
	DD	FLAT:_Color_cons_t
	DD	FLAT:_Color2_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_skin2 DD	FLAT:??_C@_05MEHOGNLN@skin2@
	DD	FLAT:??_C@_05HOIBOKLI@Tails@
	DD	0aH
	DD	00H
	DD	FLAT:_Skin2_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_tagtype DD	FLAT:??_C@_07NMOJJJOE@tagtype@
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	06H
	DD	FLAT:_tagtype_cons_t
	DD	FLAT:_Tagtype_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_touchtag DD	FLAT:??_C@_08KDPEBONH@touchtag@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_hidetime DD	FLAT:??_C@_08ENALMHF@hidetime@
	DD	FLAT:??_C@_02PJNFELNH@30@
	DD	06H
	DD	FLAT:_minitimelimit_cons_t
	DD	FLAT:_Hidetime_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_matchtype DD FLAT:??_C@_09FDIJJHCA@matchtype@
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	06H
	DD	FLAT:_matchtype_cons_t
	DD	FLAT:_MatchType_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_friendlyfire DD FLAT:??_C@_0N@DFCDFDEL@friendlyfire@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_pointlimit DD FLAT:??_C@_0L@EJDNILMN@pointlimit@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	0eH
	DD	FLAT:_pointlimit_cons_t
	DD	FLAT:_PointLimit_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_timelimit DD FLAT:??_C@_09KPHKOKCC@timelimit@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	0eH
	DD	FLAT:_timelimit_cons_t
	DD	FLAT:_TimeLimit_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_numlaps DD	FLAT:??_C@_07NKDNDJFI@numlaps@
	DD	FLAT:??_C@_01FAMBOPH@4@
	DD	0eH
	DD	FLAT:_numlump_cons_t
	DD	FLAT:_NumLaps_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_allowexitlevel DD FLAT:??_C@_0P@CAIFKPNG@allowexitlevel@
	DD	FLAT:??_C@_02JINPPBEP@No@
	DD	04H
	DD	FLAT:_CV_YesNo
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_cheats DD	FLAT:??_C@_06LJMIHJCM@cheats@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	06H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_Cheats_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_autobalance DD FLAT:??_C@_0M@CJFJJHDB@autobalance@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	06H
	DD	FLAT:_autobalance_cons_t
	DD	FLAT:_AutoBalance_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_teamscramble DD FLAT:??_C@_0N@JKLBGCI@teamscramble@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	0eH
	DD	FLAT:_teamscramble_cons_t
	DD	FLAT:_TeamScramble_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_scrambleonchange DD FLAT:??_C@_0BB@HMPCJPOH@scrambleonchange@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	04H
	DD	FLAT:_teamscramble_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_netstat DD	FLAT:??_C@_07EOOIAOLL@netstat@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	00H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_countdowntime DD FLAT:??_C@_0O@LHBOJGLO@countdowntime@
	DD	FLAT:??_C@_02PPBOIJDM@60@
	DD	04H
	DD	FLAT:_minitimelimit_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_runscripts DD FLAT:??_C@_0L@MAGLICBD@runscripts@
	DD	FLAT:??_C@_03CCLAEDDF@Yes@
	DD	00H
	DD	FLAT:_CV_YesNo
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_mute DD	FLAT:??_C@_04EPOMLENO@mute@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	06H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_Mute_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_killingdead DD FLAT:??_C@_0M@KOONKFKH@killingdead@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_pause DD	FLAT:??_C@_0BA@GBICBCMH@pausepermission@
	DD	FLAT:??_C@_06LGMEBDBC@Server@
	DD	04H
	DD	FLAT:_pause_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_allowteamchange DD FLAT:??_C@_0BA@FBFMLEKC@allowteamchange@
	DD	FLAT:??_C@_03CCLAEDDF@Yes@
	DD	04H
	DD	FLAT:_CV_YesNo
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_teleporters DD FLAT:??_C@_0M@JLEDEPBH@teleporters@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_superring DD FLAT:??_C@_09CFMCGBPM@superring@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_supersneakers DD FLAT:??_C@_0O@EPPABEFI@supersneakers@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_invincibility DD FLAT:??_C@_0O@PJGLLNIM@invincibility@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_jumpshield DD FLAT:??_C@_0L@NGLOPAHL@jumpshield@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_watershield DD FLAT:??_C@_0M@KDCAKGJM@watershield@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_ringshield DD FLAT:??_C@_0L@LAOKLAGE@ringshield@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_forceshield DD FLAT:??_C@_0M@GOJBBNPG@forceshield@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_bombshield DD FLAT:??_C@_0L@GCGPDGEJ@bombshield@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_1up	DD	FLAT:??_C@_03OLCJGMGK@1up@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_eggmanbox DD FLAT:??_C@_08HKGBCIMG@eggmantv@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_questionbox DD FLAT:??_C@_08GLLNALGN@randomtv@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_recycler DD	FLAT:??_C@_08DFKMPDDF@recycler@
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	0804H
	DD	FLAT:_chances_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_objectplace DD FLAT:??_C@_0M@MGEHALFC@objectplace@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	02H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_ObjectPlace_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_objflags DD	FLAT:??_C@_08GPFLAALE@objflags@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_mapthingnum DD FLAT:??_C@_0M@KFNHECOB@mapthingnum@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_speed DD	FLAT:??_C@_05HJCMGBKF@speed@
	DD	FLAT:??_C@_02KMALDIDP@16@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_snapto DD	FLAT:??_C@_06PDBNMNJI@snapto@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	00H
	DD	FLAT:_snapto_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_grid DD	FLAT:??_C@_04JFGOJFKE@grid@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_inttime DD	FLAT:??_C@_07MLKNKHO@inttime@
	DD	FLAT:??_C@_02IHCGGLPM@15@
	DD	04H
	DD	FLAT:_inttime_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_advancemap DD FLAT:??_C@_0L@OJILPMNF@advancemap@
	DD	FLAT:??_C@_04MDFHGMOB@Next@
	DD	04H
	DD	FLAT:_advancemap_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_playersforexit DD FLAT:??_C@_0P@CGFDBFCI@playersforexit@
	DD	FLAT:??_C@_03EHAPBBEA@One@
	DD	04H
	DD	FLAT:_playersforexit_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_match_scoring DD FLAT:??_C@_0O@ILENJHOI@match_scoring@
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	04H
	DD	FLAT:_match_scoring_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_overtime DD	FLAT:??_C@_08HNIOMLKM@overtime@
	DD	FLAT:??_C@_03CCLAEDDF@Yes@
	DD	04H
	DD	FLAT:_CV_YesNo
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_realnames DD FLAT:??_C@_09LNIELMIE@realnames@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	0200H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_resetmusic DD FLAT:??_C@_0L@LJPOHLGA@resetmusic@
	DD	FLAT:??_C@_02JINPPBEP@No@
	DD	01H
	DD	FLAT:_CV_YesNo
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_autoaim DD	FLAT:??_C@_07KHNCKFFH@autoaim@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	0aH
	DD	FLAT:_CV_OnOff
	DD	FLAT:_SendWeaponPref
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_autoaim2 DD	FLAT:??_C@_08BINIECID@autoaim2@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	0aH
	DD	FLAT:_CV_OnOff
	DD	FLAT:_SendWeaponPref
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_ringslinger DD FLAT:??_C@_0M@CDKKMLB@ringslinger@
	DD	FLAT:??_C@_02JINPPBEP@No@
	DD	0a06H
	DD	FLAT:_CV_YesNo
	DD	FLAT:_Ringslinger_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_setrings DD	FLAT:??_C@_08BAEPIAPA@setrings@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	0a06H
	DD	FLAT:_ringlimit_cons_t
	DD	FLAT:_Setrings_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_setlives DD	FLAT:??_C@_08LPLKEIAF@setlives@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	0a06H
	DD	FLAT:_liveslimit_cons_t
	DD	FLAT:_Setlives_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_setcontinues DD FLAT:??_C@_0N@HCOFMAAH@setcontinues@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	0a06H
	DD	FLAT:_liveslimit_cons_t
	DD	FLAT:_Setcontinues_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_soundtest DD FLAT:??_C@_09DDMDCJKC@soundtest@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	02H
	DD	00H
	DD	FLAT:_SoundTest_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_specialrings DD FLAT:??_C@_0N@CIIANCNH@specialrings@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_powerstones DD FLAT:??_C@_0M@EIPONAEO@powerstones@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	04H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_matchboxes DD FLAT:??_C@_0L@MALECICB@matchboxes@
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	04H
	DD	FLAT:_matchboxes_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_racetype DD	FLAT:??_C@_08GPJLDGBN@racetype@
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	04H
	DD	FLAT:_racetype_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_raceitemboxes DD FLAT:??_C@_0P@DHKGKGMJ@race_itemboxes@
	DD	FLAT:??_C@_06BEOPDEGP@Random@
	DD	04H
	DD	FLAT:_raceitemboxes_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_maxping DD	FLAT:??_C@_07MMIKBOAN@maxping@
	DD	FLAT:??_C@_01GBGANLPD@0@
	DD	01H
	DD	FLAT:_CV_Unsigned
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_dummyteam DD FLAT:??_C@_09GKADIEJM@dummyteam@
	DD	FLAT:??_C@_09BCJOCADI@Spectator@
	DD	0400H
	DD	FLAT:_dummyteam_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_dummyscramble DD FLAT:??_C@_0O@LNNADFHB@dummyscramble@
	DD	FLAT:??_C@_06BEOPDEGP@Random@
	DD	0400H
	DD	FLAT:_dummyscramble_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_skipmapcheck DD FLAT:??_C@_0N@MJOCNLLF@skipmapcheck@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_sleep DD	FLAT:??_C@_08NCLHKKAD@cpusleep@
	DD	FLAT:??_C@_02PGHGPEOM@?91@
	DD	01H
	DD	FLAT:_sleeping_cons_t
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_timetic DD	FLAT:??_C@_07KENKKNHD@timetic@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	00H
	DD	FLAT:_timetic_cons_t
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_forceskin DD FLAT:??_C@_09KBGJKPCM@forceskin@
	DD	FLAT:??_C@_02PGHGPEOM@?91@
	DD	06H
	DD	00H
	DD	FLAT:_ForceSkin_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_cv_downloading DD FLAT:??_C@_0M@JHBNOPIH@downloading@
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	00H
	DD	FLAT:_CV_OnOff
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_adminplayer DD	0ffffffffH
_cv_gravity DD	FLAT:??_C@_07GFBFDLBM@gravity@
	DD	FLAT:??_C@_03LOHCHBBO@0?45@
	DD	016H
	DD	00H
	DD	FLAT:_Gravity_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_usemouse_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	02H
	DD	FLAT:??_C@_05BPHDNFDN@Force@
	DD	00H
	DD	00H
_mouse2port_cons_t DD 01H
	DD	FLAT:??_C@_04FLOGHLDB@COM1@
	DD	02H
	DD	FLAT:??_C@_04HAMLCIPC@COM2@
	DD	03H
	DD	FLAT:??_C@_04GJNABJLD@COM3@
	DD	04H
	DD	FLAT:??_C@_04CGJBIPHE@COM4@
	DD	00H
	DD	00H
_matchtype_cons_t DD 00H
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	01H
	DD	FLAT:??_C@_04GBPANCCF@Team@
	DD	00H
	DD	00H
_tagtype_cons_t DD 00H
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	01H
	DD	FLAT:??_C@_0O@NNDKJCLH@Hide?5and?5Seek@
	DD	00H
	DD	00H
_autobalance_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	04H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_teamscramble_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_06BEOPDEGP@Random@
	DD	02H
	DD	FLAT:??_C@_06KANFALAM@Points@
	DD	00H
	DD	00H
_ringlimit_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	0270fH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_liveslimit_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	063H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_sleeping_cons_t DD 0ffffffffH
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	01cH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_racetype_cons_t DD 00H
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	01H
	DD	FLAT:??_C@_07HMFPECFA@Classic@
	DD	00H
	DD	00H
_raceitemboxes_cons_t DD 00H
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	01H
	DD	FLAT:??_C@_06BEOPDEGP@Random@
	DD	02H
	DD	FLAT:??_C@_09GCCIMMBF@Teleports@
	DD	03H
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	00H
	DD	00H
_matchboxes_cons_t DD 00H
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	01H
	DD	FLAT:??_C@_06BEOPDEGP@Random@
	DD	02H
	DD	FLAT:??_C@_0L@LAAEBKFI@Non?9Random@
	DD	03H
	DD	FLAT:??_C@_04OHJIHAFH@None@
	DD	00H
	DD	00H
_chances_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_03CMIMKEEK@Low@
	DD	02H
	DD	FLAT:??_C@_06LHIDHMIE@Medium@
	DD	03H
	DD	FLAT:??_C@_04PHMMJPOJ@High@
	DD	00H
	DD	00H
_snapto_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_05PGDJFNFN@Floor@
	DD	02H
	DD	FLAT:??_C@_07LJKDOBMH@Ceiling@
	DD	03H
	DD	FLAT:??_C@_07GFCAAINO@Halfway@
	DD	00H
	DD	00H
_match_scoring_cons_t DD 00H
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	01H
	DD	FLAT:??_C@_07HMFPECFA@Classic@
	DD	00H
	DD	00H
_pause_cons_t DD 00H
	DD	FLAT:??_C@_06LGMEBDBC@Server@
	DD	01H
	DD	FLAT:??_C@_03HFJGAJFE@All@
	DD	00H
	DD	00H
_timetic_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_02IAAGKKDJ@On@
	DD	02H
	DD	FLAT:??_C@_04DKAKODEK@Full@
	DD	00H
	DD	00H
_dummyteam_cons_t DD 00H
	DD	FLAT:??_C@_09BCJOCADI@Spectator@
	DD	01H
	DD	FLAT:??_C@_03PADCEAKC@Red@
	DD	02H
	DD	FLAT:??_C@_04CAKOHOCJ@Blue@
	DD	00H
	DD	00H
_dummyscramble_cons_t DD 00H
	DD	FLAT:??_C@_06BEOPDEGP@Random@
	DD	01H
	DD	FLAT:??_C@_06KANFALAM@Points@
	DD	00H
	DD	00H
_seenames_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_09FEONCBCM@Colorless@
	DD	02H
	DD	FLAT:??_C@_04GBPANCCF@Team@
	DD	03H
	DD	FLAT:??_C@_08JBIPJPLC@Ally?1Foe@
	DD	00H
	DD	00H
_minitimelimit_cons_t DD 0fH
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	0270fH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_pointlimit_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	03b9ac9f6H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_timelimit_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	01eH
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_numlump_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	032H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_nettimeout_cons_t DD 05H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	0834H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_cv_nettimeout DD FLAT:??_C@_0L@KFPLCNDJ@nettimeout@
	DD	FLAT:??_C@_03JMJANLDI@525@
	DD	03H
	DD	FLAT:_nettimeout_cons_t
	DD	FLAT:_NetTimeout_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_inttime_cons_t DD 00H
	DD	FLAT:??_C@_03KGHEHEMH@MIN@
	DD	0e10H
	DD	FLAT:??_C@_03LEPPJAKI@MAX@
	DD	00H
	DD	00H
_advancemap_cons_t DD 00H
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	01H
	DD	FLAT:??_C@_04MDFHGMOB@Next@
	DD	02H
	DD	FLAT:??_C@_06BEOPDEGP@Random@
	DD	00H
	DD	00H
_playersforexit_cons_t DD 00H
	DD	FLAT:??_C@_03EHAPBBEA@One@
	DD	01H
	DD	FLAT:??_C@_03HFJGAJFE@All@
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_D_RegisterServerCommands
PUBLIC	_D_RegisterClientCommands
PUBLIC	_D_SendPlayerConfig
PUBLIC	_Command_ExitGame_f
PUBLIC	_D_GameTypeChanged
PUBLIC	_D_MapChange
PUBLIC	??_C@_08NLHBPEGP@password@			; `string'
PUBLIC	??_C@_05DAOAAINN@login@				; `string'
PUBLIC	??_C@_06MCIJCFHC@verify@			; `string'
PUBLIC	??_C@_04GJFDDCGE@motd@				; `string'
PUBLIC	??_C@_0BB@CPEHKEFO@serverchangeteam@		; `string'
PUBLIC	??_C@_0M@NADBFDJO@clearscores@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map@				; `string'
PUBLIC	??_C@_08OCHBPNE@exitgame@			; `string'
PUBLIC	??_C@_09FAKHJDOE@exitlevel@			; `string'
PUBLIC	??_C@_07BNGNMCAI@showmap@			; `string'
PUBLIC	??_C@_07GDBLDCML@addfile@			; `string'
PUBLIC	??_C@_07DMDPDCKF@listwad@			; `string'
PUBLIC	??_C@_06BAFIAPNG@runsoc@			; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
PUBLIC	??_C@_08NJPDEKHO@gametype@			; `string'
PUBLIC	??_C@_0L@JPFHHMLD@jumptoaxis@			; `string'
PUBLIC	??_C@_07CPCPJPKL@version@			; `string'
PUBLIC	??_C@_0M@DOCDGAPE@mod_details@			; `string'
PUBLIC	??_C@_04KNNLNNGO@quit@				; `string'
PUBLIC	??_C@_0L@MACGIGOE@saveconfig@			; `string'
PUBLIC	??_C@_0L@OHOKKJHM@loadconfig@			; `string'
PUBLIC	??_C@_0N@IFJIKNFJ@changeconfig@			; `string'
PUBLIC	??_C@_0P@NKDKPOM@isgamemodified@		; `string'
PUBLIC	??_C@_0L@NHHNPEKO@showscores@			; `string'
PUBLIC	??_C@_08KKPGJHCN@showtime@			; `string'
PUBLIC	??_C@_0P@NHDLJFMO@togglemodified@		; `string'
PUBLIC	??_C@_04OONEELOO@ping@				; `string'
PUBLIC	??_C@_0M@NNMJGOFK@numthinkers@			; `string'
PUBLIC	??_C@_0L@GFKFIGKP@countmobjs@			; `string'
PUBLIC	??_C@_0L@JOMDMEIB@changeteam@			; `string'
PUBLIC	??_C@_0M@HHFBCEAD@changeteam2@			; `string'
PUBLIC	??_C@_08KNNNHPIP@playdemo@			; `string'
PUBLIC	??_C@_08LGFIIHD@timedemo@			; `string'
PUBLIC	??_C@_08EMDOEDEB@stopdemo@			; `string'
PUBLIC	??_C@_08LOCMGIHJ@teleport@			; `string'
PUBLIC	??_C@_09EJBDEBAE@rteleport@			; `string'
PUBLIC	??_C@_09GNGODOFP@playintro@			; `string'
PUBLIC	??_C@_0M@JANBLCPG@writethings@			; `string'
PUBLIC	??_C@_0L@PJJJCJFI@orderpizza@			; `string'
PUBLIC	??_C@_0M@HBHHKBAJ@resetcamera@			; `string'
PUBLIC	??_C@_0L@DPPKFENM@setcontrol@			; `string'
PUBLIC	??_C@_0M@GCCKDANK@setcontrol2@			; `string'
PUBLIC	??_C@_0L@CMHOPIGK@screenshot@			; `string'
PUBLIC	??_C@_0O@NOFHBALH@displayplayer@		; `string'
PUBLIC	??_C@_05HOELNNPK@tunes@				; `string'
PUBLIC	??_C@_06HAHCKIHB@skynum@			; `string'
PUBLIC	??_C@_06IHODGGMJ@noclip@			; `string'
PUBLIC	??_C@_03DKFAMNOH@god@				; `string'
PUBLIC	??_C@_0P@PNNCGAFH@getallemeralds@		; `string'
PUBLIC	??_C@_0O@OHHMDFIH@resetemeralds@		; `string'
PUBLIC	??_C@_09JJDLHLK@unlockall@			; `string'
PUBLIC	??_C@_07JPDKKLPO@devmode@			; `string'
PUBLIC	??_C@_0P@BBGMFKMO@savecheckpoint@		; `string'
PUBLIC	??_C@_05MHMEBBGO@scale@				; `string'
PUBLIC	??_C@_08DAIAHLFD@gravflip@			; `string'
PUBLIC	??_C@_06LOOPPNIE@hurtme@			; `string'
PUBLIC	??_C@_0M@EJPLPHIF@charability@			; `string'
PUBLIC	??_C@_09JBLJFFJI@charspeed@			; `string'
PUBLIC	??_C@_0L@LHMIBJLE@causecfail@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0DP@DPLFIEPI@consoleplayer?5color?5received?5as@ ; `string'
PUBLIC	??_C@_0EJ@IEGONDHC@secondarydisplayplayer?5color?5re@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_02NHMNAAKA@?9x@				; `string'
PUBLIC	??_C@_02MONGDBOB@?9y@				; `string'
PUBLIC	??_C@_02OFPLGCCC@?9z@				; `string'
PUBLIC	??_C@_0BA@GHJOCIHF@?9noresetplayers@		; `string'
PUBLIC	??_C@_09GGNDLOMG@?9gametype@			; `string'
PUBLIC	??_C@_06JKBLPGIK@?9force@			; `string'
PUBLIC	??_C@_0EE@BADIJMIP@Warping?5to?5?$CFs?5?$FLresetplayer?$DN?$CFd?5l@ ; `string'
PUBLIC	??_C@_05KJNJLLGA@level@				; `string'
PUBLIC	??_C@_06HNFCPEFM@SERVER@			; `string'
PUBLIC	??_C@_09FNMDCDOI@spectator@			; `string'
PUBLIC	??_C@_07GDCKGKBF@playing@			; `string'
PUBLIC	??_C@_03FAAAOPJM@red@				; `string'
PUBLIC	??_C@_04OBGPFBCN@blue@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2@				; `string'
PUBLIC	??_C@_0CH@BGAHPOLH@Invalid?5gametype?5after?5initial?5@ ; `string'
PUBLIC	??_C@_02MOLGKLA@it@				; `string'
PUBLIC	??_C@_05IPKJKLHM@notit@				; `string'
PUBLIC	??_C@_01EKENIIDA@3@				; `string'
PUBLIC	??_C@_0L@IDIHJHPM@verify?5?$CFd?6@		; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_0BF@FEEJDHML@Could?5not?5find?5SOC?4?6@	; `string'
PUBLIC	??_C@_04DDPNCCIM@?4soc@				; `string'
PUBLIC	??_C@_0DP@DAAIOMIP@The?5server?5added?5a?5file?6?$CI?$CFs?$CJ?6th@ ; `string'
PUBLIC	??_C@_0EM@GINKBHOL@Unknown?5error?5trying?5to?5load?5a?5@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0CA@LLNFENHL@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5second?6@ ; `string'
PUBLIC	??_C@_0BM@NHLGBBJO@The?5server?5doesn?8t?5have?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BJ@ODIFBIEN@Checksum?5mismatch?5on?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0CF@EOHHNGNJ@Unknown?5error?5finding?5wad?5file?5@ ; `string'
PUBLIC	??_C@_0M@IGLENAGE@sayto?5?$CFd?5?$CFs@		; `string'
PUBLIC	??_C@_0M@BFLONAK@addfile?5?$CFs?6@		; `string'
PUBLIC	??_C@_0EA@GPFKMICG@The?5server?5added?5a?5file?5?6?$CI?$CFs?$CJ?6t@ ; `string'
PUBLIC	??_C@_0GM@HBOPCHNP@Checksum?5mismatch?5while?5loading@ ; `string'
PUBLIC	??_C@_0EN@CHMPEMGG@Unknown?5error?5trying?5to?5load?5a?5@ ; `string'
PUBLIC	??_C@_07IJKPKDGN@?5v2?40?47@			; `string'
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_07DLHCIBDH@default@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@4041800000000000
PUBLIC	__real@420c0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_isdigit:PROC
EXTRN	_isprint:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strstr:PROC
EXTRN	_strcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_strncpy:PROC
EXTRN	_stricmp:PROC
EXTRN	_atof:PROC
EXTRN	_atoi:PROC
EXTRN	_strlcat:PROC
EXTRN	_strlcpy:PROC
EXTRN	_fclose:PROC
EXTRN	_fflush:PROC
EXTRN	_fopen:PROC
EXTRN	_fputs:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_I_Error:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_COM_AddCommand:PROC
EXTRN	_COM_Argc:PROC
EXTRN	_COM_Argv:PROC
EXTRN	_COM_CheckParm:PROC
EXTRN	_COM_BufAddText:PROC
EXTRN	_COM_BufInsertText:PROC
EXTRN	_CV_RegisterVar:PROC
EXTRN	_CV_ClearChangedFlags:PROC
EXTRN	_CV_Set:PROC
EXTRN	_CV_SetValue:PROC
EXTRN	_CV_StealthSetValue:PROC
EXTRN	_CV_StealthSet:PROC
EXTRN	_CV_ResetCheatNetVars:PROC
EXTRN	_CON_ToggleOff:PROC
EXTRN	_FixedMul:PROC
EXTRN	_I_GetTime:PROC
EXTRN	_I_Quit:PROC
EXTRN	_I_OutputMsg:PROC
EXTRN	_I_GetUserName:PROC
EXTRN	_Command_Ping_f:PROC
EXTRN	_RegisterNetXCmd:PROC
EXTRN	_SendNetXCmd:PROC
EXTRN	_SendNetXCmd2:PROC
EXTRN	_SV_SpawnServer:PROC
EXTRN	_CL_Reset:PROC
EXTRN	_CL_ClearPlayer:PROC
EXTRN	_D_QuitNetGame:PROC
EXTRN	_G_BuildMapName:PROC
EXTRN	_G_InitNew:PROC
EXTRN	_G_DoPlayDemo:PROC
EXTRN	_G_TimeDemo:PROC
EXTRN	_G_DoneLevelLoad:PROC
EXTRN	_G_StopDemo:PROC
EXTRN	_G_CheckDemoStatus:PROC
EXTRN	_G_ExitLevel:PROC
EXTRN	_W_CheckNumForName:PROC
EXTRN	_W_GetNumForName:PROC
EXTRN	_W_VerifyNMUSlumps:PROC
EXTRN	_HU_SetCEchoDuration:PROC
EXTRN	_HU_SetCEchoFlags:PROC
EXTRN	_HU_DoCEcho:PROC
EXTRN	_Command_Setcontrol_f:PROC
EXTRN	_Command_Setcontrol2_f:PROC
EXTRN	_M_StartMessage:PROC
EXTRN	_R_PointInSubsector:PROC
EXTRN	_SetPlayerSkin:PROC
EXTRN	_SetPlayerSkinByNum:PROC
EXTRN	_R_SkinAvailable:PROC
EXTRN	_SplitScreen_OnChange:PROC
EXTRN	_Command_Numthinkers_f:PROC
EXTRN	_Command_CountMobjs_f:PROC
EXTRN	_P_ResetCamera:PROC
EXTRN	_P_IsLocalPlayer:PROC
EXTRN	_P_GivePlayerLives:PROC
EXTRN	_P_TransferToAxis:PROC
EXTRN	_P_PlayerMoving:PROC
EXTRN	_P_SetMobjState:PROC
EXTRN	_P_MapStart:PROC
EXTRN	_P_MapEnd:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_TeleportMove:PROC
EXTRN	_P_DamageMobj:PROC
EXTRN	_P_CheckSurvivors:PROC
EXTRN	_P_SetupLevelSky:PROC
EXTRN	_P_AddWadFile:PROC
EXTRN	_P_RunSOC:PROC
EXTRN	_P_WriteThings:PROC
EXTRN	_S_StopSounds:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_S_SpeedMusic:PROC
EXTRN	_S_StopMusic:PROC
EXTRN	_S_PauseSound:PROC
EXTRN	_S_ResumeSound:PROC
EXTRN	_M_MapNumber:PROC
EXTRN	_M_ScreenShot:PROC
EXTRN	_Command_SaveConfig_f:PROC
EXTRN	_Command_LoadConfig_f:PROC
EXTRN	_Command_ChangeConfig_f:PROC
EXTRN	_findfile:PROC
EXTRN	_nameonly:PROC
EXTRN	_Command_CheatNoClip_f:PROC
EXTRN	_Command_CheatGod_f:PROC
EXTRN	_Command_Savecheckpoint_f:PROC
EXTRN	_Command_Getallemeralds_f:PROC
EXTRN	_Command_Resetemeralds_f:PROC
EXTRN	_Command_Unlockall_f:PROC
EXTRN	_Command_Devmode_f:PROC
EXTRN	_Command_Scale_f:PROC
EXTRN	_Command_Gravflip_f:PROC
EXTRN	_Command_Hurtme_f:PROC
EXTRN	_Command_Charability_f:PROC
EXTRN	_Command_Charspeed_f:PROC
EXTRN	_Command_CauseCfail_f:PROC
EXTRN	_D_StartTitle:PROC
EXTRN	_M_Random:PROC
EXTRN	_P_SetRandIndex:PROC
EXTRN	_F_StartIntro:PROC
EXTRN	_AddMServCommands:PROC
EXTRN	_md5_stream:PROC
EXTRN	_Z_Free:PROC
EXTRN	_Z_StrDup:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_gamestate:DWORD
EXTRN	_ultimatemode:BYTE
EXTRN	_gameaction:DWORD
EXTRN	_M_Memcpy:DWORD
EXTRN	_devparm:DWORD
EXTRN	_compdate:DWORD
EXTRN	_comptime:DWORD
EXTRN	_comprevision:DWORD
EXTRN	_text:BYTE
EXTRN	_Color_Names:ZWORD
EXTRN	_gamemap:WORD
EXTRN	_mapmusic:DWORD
EXTRN	_modifiedgame:DWORD
EXTRN	_mainwads:WORD
EXTRN	_savemoddata:DWORD
EXTRN	_timeattacking:DWORD
EXTRN	_netgame:DWORD
EXTRN	_addedtogame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_fromlevelselect:DWORD
EXTRN	_menuactive:DWORD
EXTRN	_paused:BYTE
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_mapheaderinfo:BYTE
EXTRN	_emeralds:WORD
EXTRN	_totalplaytime:DWORD
EXTRN	_gravity:DWORD
EXTRN	_autobalance:WORD
EXTRN	_teamscramble:WORD
EXTRN	_scrambleplayers:ZWORD
EXTRN	_scrambleteams:ZWORD
EXTRN	_scrambletotal:WORD
EXTRN	_scramblecount:WORD
EXTRN	_cheats:DWORD
EXTRN	_tagtype:DWORD
EXTRN	_hidetime:DWORD
EXTRN	_grade:DWORD
EXTRN	_debugfile:DWORD
EXTRN	_precache:DWORD
EXTRN	_cv_controlperkey:BYTE
EXTRN	_cv_invertmouse2:BYTE
EXTRN	_cv_alwaysfreelook2:BYTE
EXTRN	_cv_mousemove2:BYTE
EXTRN	_cv_mousesens2:BYTE
EXTRN	_cv_mlooksens2:BYTE
EXTRN	_cv_itemrespawntime:BYTE
EXTRN	_cv_itemrespawn:BYTE
EXTRN	_cv_flagtime:BYTE
EXTRN	_cv_suddendeath:BYTE
EXTRN	_cv_useranalog:BYTE
EXTRN	_cv_useranalog2:BYTE
EXTRN	_cv_analog:BYTE
EXTRN	_cv_analog2:BYTE
EXTRN	_cv_translucency:BYTE
EXTRN	_cv_splats:BYTE
EXTRN	_cv_screenshot_option:BYTE
EXTRN	_cv_screenshot_folder:BYTE
EXTRN	_cv_zlib_level:BYTE
EXTRN	_cv_zlib_memory:BYTE
EXTRN	_cv_zlib_strategy:BYTE
EXTRN	_cv_zlib_window_bits:BYTE
EXTRN	_cv_zlib_levela:BYTE
EXTRN	_cv_zlib_memorya:BYTE
EXTRN	_cv_zlib_strategya:BYTE
EXTRN	_cv_zlib_window_bitsa:BYTE
EXTRN	_cv_apng_disable:BYTE
EXTRN	_cv_playdemospeed:BYTE
EXTRN	_server:DWORD
EXTRN	_dedicated:DWORD
EXTRN	_connectiontimeout:DWORD
EXTRN	_cv_maxplayers:BYTE
EXTRN	_cv_maxsend:BYTE
EXTRN	_adminpassword:BYTE
EXTRN	_motd:BYTE
EXTRN	_serverplayer:DWORD
EXTRN	_player_names:BYTE
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_demoplayback:DWORD
EXTRN	_timingdemo:DWORD
EXTRN	_cv_crosshair:BYTE
EXTRN	_cv_crosshair2:BYTE
EXTRN	_cv_invertmouse:BYTE
EXTRN	_cv_alwaysfreelook:BYTE
EXTRN	_cv_mousemove:BYTE
EXTRN	_cv_sideaxis:BYTE
EXTRN	_cv_turnaxis:BYTE
EXTRN	_cv_moveaxis:BYTE
EXTRN	_cv_lookaxis:BYTE
EXTRN	_cv_fireaxis:BYTE
EXTRN	_cv_firenaxis:BYTE
EXTRN	_cv_sideaxis2:BYTE
EXTRN	_cv_turnaxis2:BYTE
EXTRN	_cv_moveaxis2:BYTE
EXTRN	_cv_lookaxis2:BYTE
EXTRN	_cv_fireaxis2:BYTE
EXTRN	_cv_firenaxis2:BYTE
EXTRN	_cv_scr_width:BYTE
EXTRN	_cv_scr_height:BYTE
EXTRN	_cv_scr_depth:BYTE
EXTRN	_cv_renderview:BYTE
EXTRN	_cv_fullscreen:BYTE
EXTRN	_numwadfiles:WORD
EXTRN	_wadfiles:BYTE
EXTRN	_cv_mousesens:BYTE
EXTRN	_cv_mlooksens:BYTE
EXTRN	_cv_allowautoaim:BYTE
EXTRN	_cv_chooseskin:BYTE
EXTRN	_gametype_cons_t:BYTE
EXTRN	_numskins:DWORD
EXTRN	_skins:BYTE
EXTRN	_leveltime:DWORD
EXTRN	_camera:BYTE
EXTRN	_cv_soundvolume:BYTE
EXTRN	_cv_digmusicvolume:BYTE
EXTRN	_cv_midimusicvolume:BYTE
EXTRN	_cv_numChannels:BYTE
EXTRN	_cd_volume:BYTE
EXTRN	_cdUpdate:BYTE
EXTRN	_cv_usegamma:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_triggerforcedskin DD 01H DUP (?)
_snacpending DD	01H DUP (?)
_snac2pending DD 01H DUP (?)
_chmappending DD 01H DUP (?)
?buf@?1??D_MapChange@@9@9 DB 086H DUP (?)		; `D_MapChange'::`2'::buf
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@4041800000000000
CONST	SEGMENT
__real@4041800000000000 DQ 04041800000000000r	; 35
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default@
CONST	SEGMENT
??_C@_07DLHCIBDH@default@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07IJKPKDGN@?5v2?40?47@
CONST	SEGMENT
??_C@_07IJKPKDGN@?5v2?40?47@ DB ' v2.0.7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@CHMPEMGG@Unknown?5error?5trying?5to?5load?5a?5@
CONST	SEGMENT
??_C@_0EN@CHMPEMGG@Unknown?5error?5trying?5to?5load?5a?5@ DB 'Unknown err'
	DB	'or trying to load a file', 0aH, 'that the server added ', 0aH
	DB	'(%s).', 0aH, 0aH, 'Press ESC', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@HBOPCHNP@Checksum?5mismatch?5while?5loading@
CONST	SEGMENT
??_C@_0GM@HBOPCHNP@Checksum?5mismatch?5while?5loading@ DB 'Checksum misma'
	DB	'tch while loading ', 0aH, '%s.', 0aH, 'The server seems to ha'
	DB	've a', 0aH, 'different version of this file.', 0aH, 0aH, 'Pre'
	DB	'ss ESC', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@GPFKMICG@The?5server?5added?5a?5file?5?6?$CI?$CFs?$CJ?6t@
CONST	SEGMENT
??_C@_0EA@GPFKMICG@The?5server?5added?5a?5file?5?6?$CI?$CFs?$CJ?6t@ DB 'T'
	DB	'he server added a file ', 0aH, '(%s)', 0aH, 'that you do not '
	DB	'have.', 0aH, 0aH, 'Press ESC', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BFLONAK@addfile?5?$CFs?6@
CONST	SEGMENT
??_C@_0M@BFLONAK@addfile?5?$CFs?6@ DB 'addfile %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGLENAGE@sayto?5?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0M@IGLENAGE@sayto?5?$CFd?5?$CFs@ DB 'sayto %d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EOHHNGNJ@Unknown?5error?5finding?5wad?5file?5@
CONST	SEGMENT
??_C@_0CF@EOHHNGNJ@Unknown?5error?5finding?5wad?5file?5@ DB 'Unknown erro'
	DB	'r finding wad file (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ODIFBIEN@Checksum?5mismatch?5on?5?$CFs?6@
CONST	SEGMENT
??_C@_0BJ@ODIFBIEN@Checksum?5mismatch?5on?5?$CFs?6@ DB 'Checksum mismatch'
	DB	' on %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NHLGBBJO@The?5server?5doesn?8t?5have?5?$CFs?6@
CONST	SEGMENT
??_C@_0BM@NHLGBBJO@The?5server?5doesn?8t?5have?5?$CFs?6@ DB 'The server d'
	DB	'oesn''t have %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LLNFENHL@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5second?6@
CONST	SEGMENT
??_C@_0CA@LLNFENHL@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5second?6@ DB 'MD5 '
	DB	'calc for %s took %f second', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@GINKBHOL@Unknown?5error?5trying?5to?5load?5a?5@
CONST	SEGMENT
??_C@_0EM@GINKBHOL@Unknown?5error?5trying?5to?5load?5a?5@ DB 'Unknown err'
	DB	'or trying to load a file', 0aH, 'that the server added', 0aH, '('
	DB	'%s).', 0aH, 0aH, 'Press ESC', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DAAIOMIP@The?5server?5added?5a?5file?6?$CI?$CFs?$CJ?6th@
CONST	SEGMENT
??_C@_0DP@DAAIOMIP@The?5server?5added?5a?5file?6?$CI?$CFs?$CJ?6th@ DB 'Th'
	DB	'e server added a file', 0aH, '(%s)', 0aH, 'that you do not ha'
	DB	've.', 0aH, 0aH, 'Press ESC', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDPNCCIM@?4soc@
CONST	SEGMENT
??_C@_04DDPNCCIM@?4soc@ DB '.soc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FEEJDHML@Could?5not?5find?5SOC?4?6@
CONST	SEGMENT
??_C@_0BF@FEEJDHML@Could?5not?5find?5SOC?4?6@ DB 'Could not find SOC.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IDIHJHPM@verify?5?$CFd?6@
CONST	SEGMENT
??_C@_0L@IDIHJHPM@verify?5?$CFd?6@ DB 'verify %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3@
CONST	SEGMENT
??_C@_01EKENIIDA@3@ DB '3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPKJKLHM@notit@
CONST	SEGMENT
??_C@_05IPKJKLHM@notit@ DB 'notit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MOLGKLA@it@
CONST	SEGMENT
??_C@_02MOLGKLA@it@ DB 'it', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BGAHPOLH@Invalid?5gametype?5after?5initial?5@
CONST	SEGMENT
??_C@_0CH@BGAHPOLH@Invalid?5gametype?5after?5initial?5@ DB 'Invalid gamet'
	DB	'ype after initial checks!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2@
CONST	SEGMENT
??_C@_01FDFGLJHB@2@ DB '2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04OBGPFBCN@blue@
CONST	SEGMENT
??_C@_04OBGPFBCN@blue@ DB 'blue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FAAAOPJM@red@
CONST	SEGMENT
??_C@_03FAAAOPJM@red@ DB 'red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GDCKGKBF@playing@
CONST	SEGMENT
??_C@_07GDCKGKBF@playing@ DB 'playing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNMDCDOI@spectator@
CONST	SEGMENT
??_C@_09FNMDCDOI@spectator@ DB 'spectator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNFCPEFM@SERVER@
CONST	SEGMENT
??_C@_06HNFCPEFM@SERVER@ DB 'SERVER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level@
CONST	SEGMENT
??_C@_05KJNJLLGA@level@ DB 'level', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@BADIJMIP@Warping?5to?5?$CFs?5?$FLresetplayer?$DN?$CFd?5l@
CONST	SEGMENT
??_C@_0EE@BADIJMIP@Warping?5to?5?$CFs?5?$FLresetplayer?$DN?$CFd?5l@ DB 'W'
	DB	'arping to %s [resetplayer=%d lastgametype=%d gametype=%d cpnd'
	DB	'=%d]', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06JKBLPGIK@?9force@
CONST	SEGMENT
??_C@_06JKBLPGIK@?9force@ DB '-force', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGNDLOMG@?9gametype@
CONST	SEGMENT
??_C@_09GGNDLOMG@?9gametype@ DB '-gametype', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHJOCIHF@?9noresetplayers@
CONST	SEGMENT
??_C@_0BA@GHJOCIHF@?9noresetplayers@ DB '-noresetplayers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02OFPLGCCC@?9z@
CONST	SEGMENT
??_C@_02OFPLGCCC@?9z@ DB '-z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MONGDBOB@?9y@
CONST	SEGMENT
??_C@_02MONGDBOB@?9y@ DB '-y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NHMNAAKA@?9x@
CONST	SEGMENT
??_C@_02NHMNAAKA@?9x@ DB '-x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@IEGONDHC@secondarydisplayplayer?5color?5re@
CONST	SEGMENT
??_C@_0EJ@IEGONDHC@secondarydisplayplayer?5color?5re@ DB 'secondarydispla'
	DB	'yplayer color received as %d, cv_playercolor2.value is %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DPLFIEPI@consoleplayer?5color?5received?5as@
CONST	SEGMENT
??_C@_0DP@DPLFIEPI@consoleplayer?5color?5received?5as@ DB 'consoleplayer '
	DB	'color received as %d, cv_playercolor.value is %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LHMIBJLE@causecfail@
CONST	SEGMENT
??_C@_0L@LHMIBJLE@causecfail@ DB 'causecfail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBLJFFJI@charspeed@
CONST	SEGMENT
??_C@_09JBLJFFJI@charspeed@ DB 'charspeed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EJPLPHIF@charability@
CONST	SEGMENT
??_C@_0M@EJPLPHIF@charability@ DB 'charability', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LOOPPNIE@hurtme@
CONST	SEGMENT
??_C@_06LOOPPNIE@hurtme@ DB 'hurtme', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DAIAHLFD@gravflip@
CONST	SEGMENT
??_C@_08DAIAHLFD@gravflip@ DB 'gravflip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHMEBBGO@scale@
CONST	SEGMENT
??_C@_05MHMEBBGO@scale@ DB 'scale', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BBGMFKMO@savecheckpoint@
CONST	SEGMENT
??_C@_0P@BBGMFKMO@savecheckpoint@ DB 'savecheckpoint', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPDKKLPO@devmode@
CONST	SEGMENT
??_C@_07JPDKKLPO@devmode@ DB 'devmode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JJDLHLK@unlockall@
CONST	SEGMENT
??_C@_09JJDLHLK@unlockall@ DB 'unlockall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OHHMDFIH@resetemeralds@
CONST	SEGMENT
??_C@_0O@OHHMDFIH@resetemeralds@ DB 'resetemeralds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PNNCGAFH@getallemeralds@
CONST	SEGMENT
??_C@_0P@PNNCGAFH@getallemeralds@ DB 'getallemeralds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKFAMNOH@god@
CONST	SEGMENT
??_C@_03DKFAMNOH@god@ DB 'god', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IHODGGMJ@noclip@
CONST	SEGMENT
??_C@_06IHODGGMJ@noclip@ DB 'noclip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HAHCKIHB@skynum@
CONST	SEGMENT
??_C@_06HAHCKIHB@skynum@ DB 'skynum', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HOELNNPK@tunes@
CONST	SEGMENT
??_C@_05HOELNNPK@tunes@ DB 'tunes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NOFHBALH@displayplayer@
CONST	SEGMENT
??_C@_0O@NOFHBALH@displayplayer@ DB 'displayplayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CMHOPIGK@screenshot@
CONST	SEGMENT
??_C@_0L@CMHOPIGK@screenshot@ DB 'screenshot', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GCCKDANK@setcontrol2@
CONST	SEGMENT
??_C@_0M@GCCKDANK@setcontrol2@ DB 'setcontrol2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPPKFENM@setcontrol@
CONST	SEGMENT
??_C@_0L@DPPKFENM@setcontrol@ DB 'setcontrol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HBHHKBAJ@resetcamera@
CONST	SEGMENT
??_C@_0M@HBHHKBAJ@resetcamera@ DB 'resetcamera', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJJJCJFI@orderpizza@
CONST	SEGMENT
??_C@_0L@PJJJCJFI@orderpizza@ DB 'orderpizza', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JANBLCPG@writethings@
CONST	SEGMENT
??_C@_0M@JANBLCPG@writethings@ DB 'writethings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GNGODOFP@playintro@
CONST	SEGMENT
??_C@_09GNGODOFP@playintro@ DB 'playintro', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJBDEBAE@rteleport@
CONST	SEGMENT
??_C@_09EJBDEBAE@rteleport@ DB 'rteleport', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOCMGIHJ@teleport@
CONST	SEGMENT
??_C@_08LOCMGIHJ@teleport@ DB 'teleport', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMDOEDEB@stopdemo@
CONST	SEGMENT
??_C@_08EMDOEDEB@stopdemo@ DB 'stopdemo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGFIIHD@timedemo@
CONST	SEGMENT
??_C@_08LGFIIHD@timedemo@ DB 'timedemo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KNNNHPIP@playdemo@
CONST	SEGMENT
??_C@_08KNNNHPIP@playdemo@ DB 'playdemo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HHFBCEAD@changeteam2@
CONST	SEGMENT
??_C@_0M@HHFBCEAD@changeteam2@ DB 'changeteam2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JOMDMEIB@changeteam@
CONST	SEGMENT
??_C@_0L@JOMDMEIB@changeteam@ DB 'changeteam', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GFKFIGKP@countmobjs@
CONST	SEGMENT
??_C@_0L@GFKFIGKP@countmobjs@ DB 'countmobjs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NNMJGOFK@numthinkers@
CONST	SEGMENT
??_C@_0M@NNMJGOFK@numthinkers@ DB 'numthinkers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OONEELOO@ping@
CONST	SEGMENT
??_C@_04OONEELOO@ping@ DB 'ping', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NHDLJFMO@togglemodified@
CONST	SEGMENT
??_C@_0P@NHDLJFMO@togglemodified@ DB 'togglemodified', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKPGJHCN@showtime@
CONST	SEGMENT
??_C@_08KKPGJHCN@showtime@ DB 'showtime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHHNPEKO@showscores@
CONST	SEGMENT
??_C@_0L@NHHNPEKO@showscores@ DB 'showscores', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NKDKPOM@isgamemodified@
CONST	SEGMENT
??_C@_0P@NKDKPOM@isgamemodified@ DB 'isgamemodified', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IFJIKNFJ@changeconfig@
CONST	SEGMENT
??_C@_0N@IFJIKNFJ@changeconfig@ DB 'changeconfig', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OHOKKJHM@loadconfig@
CONST	SEGMENT
??_C@_0L@OHOKKJHM@loadconfig@ DB 'loadconfig', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MACGIGOE@saveconfig@
CONST	SEGMENT
??_C@_0L@MACGIGOE@saveconfig@ DB 'saveconfig', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KNNLNNGO@quit@
CONST	SEGMENT
??_C@_04KNNLNNGO@quit@ DB 'quit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DOCDGAPE@mod_details@
CONST	SEGMENT
??_C@_0M@DOCDGAPE@mod_details@ DB 'mod_details', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version@
CONST	SEGMENT
??_C@_07CPCPJPKL@version@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JPFHHMLD@jumptoaxis@
CONST	SEGMENT
??_C@_0L@JPFHHMLD@jumptoaxis@ DB 'jumptoaxis', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NJPDEKHO@gametype@
CONST	SEGMENT
??_C@_08NJPDEKHO@gametype@ DB 'gametype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAFIAPNG@runsoc@
CONST	SEGMENT
??_C@_06BAFIAPNG@runsoc@ DB 'runsoc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DMDPDCKF@listwad@
CONST	SEGMENT
??_C@_07DMDPDCKF@listwad@ DB 'listwad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GDBLDCML@addfile@
CONST	SEGMENT
??_C@_07GDBLDCML@addfile@ DB 'addfile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNGNMCAI@showmap@
CONST	SEGMENT
??_C@_07BNGNMCAI@showmap@ DB 'showmap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FAKHJDOE@exitlevel@
CONST	SEGMENT
??_C@_09FAKHJDOE@exitlevel@ DB 'exitlevel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCHBPNE@exitgame@
CONST	SEGMENT
??_C@_08OCHBPNE@exitgame@ DB 'exitgame', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map@
CONST	SEGMENT
??_C@_03HBNNNHNM@map@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NADBFDJO@clearscores@
CONST	SEGMENT
??_C@_0M@NADBFDJO@clearscores@ DB 'clearscores', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CPEHKEFO@serverchangeteam@
CONST	SEGMENT
??_C@_0BB@CPEHKEFO@serverchangeteam@ DB 'serverchangeteam', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJFDDCGE@motd@
CONST	SEGMENT
??_C@_04GJFDDCGE@motd@ DB 'motd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCIJCFHC@verify@
CONST	SEGMENT
??_C@_06MCIJCFHC@verify@ DB 'verify', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DAOAAINN@login@
CONST	SEGMENT
??_C@_05DAOAAINN@login@ DB 'login', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password@
CONST	SEGMENT
??_C@_08NLHBPEGP@password@ DB 'password', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_cv_dummyconsvar DD FLAT:??_C@_0N@NECPPEGC@dummyconsvar@
	DD	FLAT:??_C@_03GCDBBDDL@Off@
	DD	0202H
	DD	FLAT:_CV_OnOff
	DD	FLAT:_DummyConsvar_OnChange
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	DB	00H
	ORG $+1
	DD	00H
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	06c4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	083bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01d5H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	01adH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0daH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0e2H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0f5H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0154H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0324H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0563H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0c4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0c4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02b2H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0227H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0288H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02d7H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	057bH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _SendNameAndColor2
_TEXT	SEGMENT
tv204 = -188						; size = 4
_p_tmp$1 = -120						; size = 4
_p_tmp$2 = -116						; size = 4
_tmp_i$3 = -112						; size = 4
_p_tmp$4 = -108						; size = 4
_p_tmp$5 = -104						; size = 4
_tmp_i$6 = -100						; size = 4
_p_tmp$7 = -96						; size = 4
_p_tmp$8 = -92						; size = 4
_tmp_i$9 = -88						; size = 4
_p_tmp$10 = -84						; size = 4
_p_tmp$11 = -80						; size = 4
_tmp_i$12 = -76						; size = 4
_p_tmp$13 = -72						; size = 4
_notsame$14 = -68					; size = 4
_forcedskin$15 = -64					; size = 4
_foundskin$16 = -60					; size = 4
_extrainfo$ = -53					; size = 1
_secondplaya$ = -52					; size = 4
_p$ = -48						; size = 4
_buf$ = -44						; size = 39
__$ArrayPad$ = -4					; size = 4
_SendNameAndColor2 PROC					; COMDAT

; 1252 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1253 : 	XBOXSTATIC char buf[MAXPLAYERNAME+1+SKINNAMESIZE+1];
; 1254 : 	char *p;
; 1255 : 	INT32 secondplaya;
; 1256 : 	UINT8 extrainfo = 0;

  00016	c6 45 cb 00	 mov	 BYTE PTR _extrainfo$[ebp], 0

; 1257 : 
; 1258 : 	if (!splitscreen)

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00021	75 05		 jne	 SHORT $LN41@SendNameAn

; 1259 : 		return; // can happen if skin2/color2/name2 changed

  00023	e9 99 06 00 00	 jmp	 $LN1@SendNameAn
$LN41@SendNameAn:

; 1260 : 
; 1261 : 	if (netgame)

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0002f	74 0a		 je	 SHORT $LN42@SendNameAn

; 1262 : 		secondplaya = secondarydisplayplayer;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _secondarydisplayplayer
  00036	89 45 cc	 mov	 DWORD PTR _secondplaya$[ebp], eax
  00039	eb 07		 jmp	 SHORT $LN43@SendNameAn
$LN42@SendNameAn:

; 1263 : 	else
; 1264 : 		secondplaya = 1;

  0003b	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _secondplaya$[ebp], 1
$LN43@SendNameAn:

; 1265 : 
; 1266 : 	p = buf;

  00042	8d 45 d4	 lea	 eax, DWORD PTR _buf$[ebp]
  00045	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax

; 1267 : 
; 1268 : 	// normal player colors
; 1269 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  00048	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0004f	83 f8 04	 cmp	 eax, 4
  00052	74 15		 je	 SHORT $LN45@SendNameAn
  00054	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0005b	83 f8 01	 cmp	 eax, 1
  0005e	75 5b		 jne	 SHORT $LN48@SendNameAn
  00060	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00067	74 52		 je	 SHORT $LN48@SendNameAn
$LN45@SendNameAn:

; 1270 : 	{
; 1271 : 		if (players[secondplaya].ctfteam == 1 && cv_playercolor2.value != 6)

  00069	69 45 cc fc 01
	00 00		 imul	 eax, DWORD PTR _secondplaya$[ebp], 508
  00070	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR _players[eax+352], 1
  00077	75 1a		 jne	 SHORT $LN46@SendNameAn
  00079	83 3d 14 00 00
	00 06		 cmp	 DWORD PTR _cv_playercolor2+20, 6
  00080	74 11		 je	 SHORT $LN46@SendNameAn

; 1272 : 			CV_StealthSetValue(&cv_playercolor2, 6);

  00082	6a 06		 push	 6
  00084	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  00089	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0008e	83 c4 08	 add	 esp, 8
  00091	eb 28		 jmp	 SHORT $LN48@SendNameAn
$LN46@SendNameAn:

; 1273 : 		else if (players[secondplaya].ctfteam == 2 && cv_playercolor2.value != 7)

  00093	69 45 cc fc 01
	00 00		 imul	 eax, DWORD PTR _secondplaya$[ebp], 508
  0009a	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR _players[eax+352], 2
  000a1	75 18		 jne	 SHORT $LN48@SendNameAn
  000a3	83 3d 14 00 00
	00 07		 cmp	 DWORD PTR _cv_playercolor2+20, 7
  000aa	74 0f		 je	 SHORT $LN48@SendNameAn

; 1274 : 			CV_StealthSetValue(&cv_playercolor2, 7);

  000ac	6a 07		 push	 7
  000ae	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  000b3	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000b8	83 c4 08	 add	 esp, 8
$LN48@SendNameAn:

; 1275 : 	}
; 1276 : 
; 1277 : 	// disallow the use of yellow in Match/Team Match/CTF
; 1278 : 	if (gametype == GT_MATCH || gametype == GT_CTF)

  000bb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000c2	83 f8 01	 cmp	 eax, 1
  000c5	74 0c		 je	 SHORT $LN50@SendNameAn
  000c7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000ce	83 f8 04	 cmp	 eax, 4
  000d1	75 24		 jne	 SHORT $LN51@SendNameAn
$LN50@SendNameAn:

; 1279 : 	{
; 1280 : 		if (cv_playercolor2.value == 15) //yellow

  000d3	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR _cv_playercolor2+20, 15 ; 0000000fH
  000da	75 1b		 jne	 SHORT $LN51@SendNameAn

; 1281 : 			CV_StealthSetValue(&cv_playercolor2, players[secondplaya].skincolor);

  000dc	69 45 cc fc 01
	00 00		 imul	 eax, DWORD PTR _secondplaya$[ebp], 508
  000e3	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  000e9	51		 push	 ecx
  000ea	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  000ef	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000f4	83 c4 08	 add	 esp, 8
$LN51@SendNameAn:

; 1282 : 	}
; 1283 : 
; 1284 : 	// never allow the color "none"
; 1285 : 	if (!cv_playercolor2.value)

  000f7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_playercolor2+20, 0
  000fe	75 6d		 jne	 SHORT $LN56@SendNameAn

; 1286 : 	{
; 1287 : 		if (players[secondplaya].skincolor)

  00100	69 45 cc fc 01
	00 00		 imul	 eax, DWORD PTR _secondplaya$[ebp], 508
  00107	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR _players[eax+180], 0
  0010e	74 1d		 je	 SHORT $LN53@SendNameAn

; 1288 : 			CV_StealthSetValue(&cv_playercolor2, players[secondplaya].skincolor);

  00110	69 45 cc fc 01
	00 00		 imul	 eax, DWORD PTR _secondplaya$[ebp], 508
  00117	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  0011d	51		 push	 ecx
  0011e	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  00123	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00128	83 c4 08	 add	 esp, 8
  0012b	eb 40		 jmp	 SHORT $LN56@SendNameAn
$LN53@SendNameAn:

; 1289 : 		else if (players[secondplaya].prefcolor)

  0012d	69 45 cc fc 01
	00 00		 imul	 eax, DWORD PTR _secondplaya$[ebp], 508
  00134	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR _players[eax+252], 0
  0013b	74 1d		 je	 SHORT $LN55@SendNameAn

; 1290 : 			CV_StealthSetValue(&cv_playercolor2, players[secondplaya].prefcolor);

  0013d	69 45 cc fc 01
	00 00		 imul	 eax, DWORD PTR _secondplaya$[ebp], 508
  00144	8b 88 fc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+252]
  0014a	51		 push	 ecx
  0014b	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  00150	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00155	83 c4 08	 add	 esp, 8
  00158	eb 13		 jmp	 SHORT $LN56@SendNameAn
$LN55@SendNameAn:

; 1291 : 		else
; 1292 : 			CV_StealthSet(&cv_playercolor2, cv_playercolor2.defaultvalue);

  0015a	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_playercolor2+4
  0015f	50		 push	 eax
  00160	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  00165	e8 00 00 00 00	 call	 _CV_StealthSet
  0016a	83 c4 08	 add	 esp, 8
$LN56@SendNameAn:

; 1293 : 	}
; 1294 : 
; 1295 : 	extrainfo = (UINT8)cv_playercolor2.value; // do this after, because the above might've changed it

  0016d	a0 14 00 00 00	 mov	 al, BYTE PTR _cv_playercolor2+20
  00172	88 45 cb	 mov	 BYTE PTR _extrainfo$[ebp], al

; 1296 : 
; 1297 : 	// If you're not in a netgame, merely update the skin, color, and name.
; 1298 : 	if (!netgame || (server && secondplaya == consoleplayer))

  00175	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0017c	74 1c		 je	 SHORT $LN59@SendNameAn
  0017e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00185	0f 84 40 02 00
	00		 je	 $LN57@SendNameAn
  0018b	8b 45 cc	 mov	 eax, DWORD PTR _secondplaya$[ebp]
  0018e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00194	0f 85 31 02 00
	00		 jne	 $LN57@SendNameAn
$LN59@SendNameAn:

; 1299 : 	{
; 1300 : 		INT32 foundskin;
; 1301 : 		// don't use secondarydisplayplayer: the second player must be 1
; 1302 : 		players[1].skincolor = cv_playercolor2.value;

  0019a	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0019f	c1 e0 00	 shl	 eax, 0
  001a2	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_playercolor2+20
  001a8	89 88 b4 00 00
	00		 mov	 DWORD PTR _players[eax+180], ecx

; 1303 : 		if (players[1].mo)

  001ae	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  001b3	c1 e0 00	 shl	 eax, 0
  001b6	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  001bd	74 47		 je	 SHORT $LN60@SendNameAn

; 1304 : 		{
; 1305 : 			players[1].mo->flags |= MF_TRANSLATION;

  001bf	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  001c4	c1 e0 00	 shl	 eax, 0
  001c7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  001cd	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  001d0	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  001d6	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  001db	c1 e0 00	 shl	 eax, 0
  001de	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  001e4	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1306 : 			players[1].mo->color = (UINT8)players[1].skincolor;

  001e7	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  001ec	c1 e0 00	 shl	 eax, 0
  001ef	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001f4	c1 e1 00	 shl	 ecx, 0
  001f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  001fd	8a 80 b4 00 00
	00		 mov	 al, BYTE PTR _players[eax+180]
  00203	88 42 68	 mov	 BYTE PTR [edx+104], al
$LN60@SendNameAn:

; 1307 : 		}
; 1308 : 
; 1309 : 		if (cv_mute.value) //server doesn't want name changes.

  00206	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  0020d	74 38		 je	 SHORT $LN61@SendNameAn

; 1310 : 		{
; 1311 : 			CV_StealthSet(&cv_playername2, player_names[secondarydisplayplayer]);

  0020f	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _secondarydisplayplayer, 22
  00216	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0021b	50		 push	 eax
  0021c	68 00 00 00 00	 push	 OFFSET _cv_playername2
  00221	e8 00 00 00 00	 call	 _CV_StealthSet
  00226	83 c4 08	 add	 esp, 8

; 1312 : 			SetPlayerName(secondarydisplayplayer, player_names[secondarydisplayplayer]);

  00229	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _secondarydisplayplayer, 22
  00230	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00235	50		 push	 eax
  00236	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _secondarydisplayplayer
  0023c	51		 push	 ecx
  0023d	e8 00 00 00 00	 call	 _SetPlayerName
  00242	83 c4 08	 add	 esp, 8

; 1313 : 		}

  00245	eb 20		 jmp	 SHORT $LN62@SendNameAn
$LN61@SendNameAn:

; 1314 : 		else
; 1315 : 		{
; 1316 : 			CleanupPlayerName(1, cv_playername2.zstring);

  00247	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_playername2+28
  0024c	50		 push	 eax
  0024d	6a 01		 push	 1
  0024f	e8 00 00 00 00	 call	 _CleanupPlayerName
  00254	83 c4 08	 add	 esp, 8

; 1317 : 			SetPlayerName(1, cv_playername2.zstring);

  00257	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_playername2+28
  0025c	50		 push	 eax
  0025d	6a 01		 push	 1
  0025f	e8 00 00 00 00	 call	 _SetPlayerName
  00264	83 c4 08	 add	 esp, 8
$LN62@SendNameAn:

; 1318 : 		}
; 1319 : 
; 1320 : 		if (cv_forceskin.value >= 0 && (netgame || multiplayer)) // Server wants everyone to use the same player

  00267	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_forceskin+20, 0
  0026e	7c 4c		 jl	 SHORT $LN63@SendNameAn
  00270	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00277	75 09		 jne	 SHORT $LN65@SendNameAn
  00279	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00280	74 3a		 je	 SHORT $LN63@SendNameAn
$LN65@SendNameAn:

; 1321 : 		{
; 1322 : 			const INT32 forcedskin = cv_forceskin.value;

  00282	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_forceskin+20
  00287	89 45 c0	 mov	 DWORD PTR _forcedskin$15[ebp], eax

; 1323 : 
; 1324 : 			SetPlayerSkinByNum(consoleplayer, forcedskin);

  0028a	8b 45 c0	 mov	 eax, DWORD PTR _forcedskin$15[ebp]
  0028d	50		 push	 eax
  0028e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 _SetPlayerSkinByNum
  0029a	83 c4 08	 add	 esp, 8

; 1325 : 			CV_StealthSet(&cv_skin, skins[forcedskin].name);

  0029d	69 45 c0 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$15[ebp], 236
  002a4	05 00 00 00 00	 add	 eax, OFFSET _skins
  002a9	50		 push	 eax
  002aa	68 00 00 00 00	 push	 OFFSET _cv_skin
  002af	e8 00 00 00 00	 call	 _CV_StealthSet
  002b4	83 c4 08	 add	 esp, 8

; 1326 : 		}

  002b7	e9 08 01 00 00	 jmp	 $LN68@SendNameAn
$LN63@SendNameAn:

; 1327 : 		else if ((foundskin = R_SkinAvailable(cv_skin2.string)) != -1)

  002bc	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin2+24
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 _R_SkinAvailable
  002c7	83 c4 04	 add	 esp, 4
  002ca	89 45 c4	 mov	 DWORD PTR _foundskin$16[ebp], eax
  002cd	83 7d c4 ff	 cmp	 DWORD PTR _foundskin$16[ebp], -1
  002d1	0f 84 ed 00 00
	00		 je	 $LN68@SendNameAn

; 1328 : 		{
; 1329 : 			boolean notsame;
; 1330 : 
; 1331 : 			cv_skin2.value = foundskin;

  002d7	8b 45 c4	 mov	 eax, DWORD PTR _foundskin$16[ebp]
  002da	a3 14 00 00 00	 mov	 DWORD PTR _cv_skin2+20, eax

; 1332 : 
; 1333 : 			notsame = (cv_skin2.value != players[1].skin);

  002df	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  002e4	c1 e0 00	 shl	 eax, 0
  002e7	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_skin2+20
  002ed	3b 88 b8 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax+184]
  002f3	74 0c		 je	 SHORT $LN78@SendNameAn
  002f5	c7 85 44 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv204[ebp], 1
  002ff	eb 0a		 jmp	 SHORT $LN79@SendNameAn
$LN78@SendNameAn:
  00301	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv204[ebp], 0
$LN79@SendNameAn:
  0030b	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv204[ebp]
  00311	89 55 bc	 mov	 DWORD PTR _notsame$14[ebp], edx

; 1334 : 
; 1335 : 			SetPlayerSkin(1, cv_skin2.string);

  00314	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin2+24
  00319	50		 push	 eax
  0031a	6a 01		 push	 1
  0031c	e8 00 00 00 00	 call	 _SetPlayerSkin
  00321	83 c4 08	 add	 esp, 8

; 1336 : 
; 1337 : 			if (notsame)

  00324	83 7d bc 00	 cmp	 DWORD PTR _notsame$14[ebp], 0
  00328	0f 84 96 00 00
	00		 je	 $LN68@SendNameAn

; 1338 : 			{
; 1339 : 				CV_StealthSetValue(&cv_playercolor2, players[1].prefcolor);

  0032e	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00333	c1 e0 00	 shl	 eax, 0
  00336	8b 88 fc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+252]
  0033c	51		 push	 ecx
  0033d	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  00342	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00347	83 c4 08	 add	 esp, 8

; 1340 : 
; 1341 : 				players[1].skincolor = (cv_playercolor2.value&31) % MAXSKINCOLORS;

  0034a	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_playercolor2+20
  0034f	83 e0 1f	 and	 eax, 31			; 0000001fH
  00352	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  00357	79 05		 jns	 SHORT $LN80@SendNameAn
  00359	48		 dec	 eax
  0035a	83 c8 f0	 or	 eax, -16		; fffffff0H
  0035d	40		 inc	 eax
$LN80@SendNameAn:
  0035e	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00363	c1 e1 00	 shl	 ecx, 0
  00366	89 81 b4 00 00
	00		 mov	 DWORD PTR _players[ecx+180], eax

; 1342 : 
; 1343 : 				if (players[1].mo)

  0036c	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00371	c1 e0 00	 shl	 eax, 0
  00374	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0037b	74 47		 je	 SHORT $LN68@SendNameAn

; 1344 : 				{
; 1345 : 					players[1].mo->flags |= MF_TRANSLATION;

  0037d	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00382	c1 e0 00	 shl	 eax, 0
  00385	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  0038b	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0038e	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00394	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00399	c1 e0 00	 shl	 eax, 0
  0039c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  003a2	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1346 : 					players[1].mo->color = (UINT8)players[1].skincolor;

  003a5	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  003aa	c1 e0 00	 shl	 eax, 0
  003ad	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  003b2	c1 e1 00	 shl	 ecx, 0
  003b5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  003bb	8a 80 b4 00 00
	00		 mov	 al, BYTE PTR _players[eax+180]
  003c1	88 42 68	 mov	 BYTE PTR [edx+104], al
$LN68@SendNameAn:

; 1347 : 				}
; 1348 : 			}
; 1349 : 		}
; 1350 : 		return;

  003c4	e9 f8 02 00 00	 jmp	 $LN1@SendNameAn

; 1351 : 	}

  003c9	eb 19		 jmp	 SHORT $LN69@SendNameAn
$LN57@SendNameAn:

; 1352 : 	else if (!addedtogame || secondplaya == consoleplayer)

  003cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _addedtogame, 0
  003d2	74 0b		 je	 SHORT $LN70@SendNameAn
  003d4	8b 45 cc	 mov	 eax, DWORD PTR _secondplaya$[ebp]
  003d7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  003dd	75 05		 jne	 SHORT $LN69@SendNameAn
$LN70@SendNameAn:

; 1353 : 		return;

  003df	e9 dd 02 00 00	 jmp	 $LN1@SendNameAn
$LN69@SendNameAn:

; 1354 : 
; 1355 : 	snac2pending++;

  003e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _snac2pending
  003e9	83 c0 01	 add	 eax, 1
  003ec	a3 00 00 00 00	 mov	 DWORD PTR _snac2pending, eax
$LN4@SendNameAn:

; 1356 : 
; 1357 : 	WRITEUINT8(p, extrainfo);

  003f1	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  003f4	89 45 b8	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  003f7	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  003fa	8a 4d cb	 mov	 cl, BYTE PTR _extrainfo$[ebp]
  003fd	88 08		 mov	 BYTE PTR [eax], cl
  003ff	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00402	83 c0 01	 add	 eax, 1
  00405	89 45 b8	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00408	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0040b	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  0040e	33 c0		 xor	 eax, eax
  00410	75 df		 jne	 SHORT $LN4@SendNameAn

; 1358 : 
; 1359 : 	if (cv_mute.value)

  00412	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00419	0f 84 b0 00 00
	00		 je	 $LN71@SendNameAn

; 1360 : 	{
; 1361 : 		WRITESTRING(p, player_names[secondarydisplayplayer]);

  0041f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _tmp_i$12[ebp], 0
  00426	eb 09		 jmp	 SHORT $LN7@SendNameAn
$LN5@SendNameAn:
  00428	8b 45 b4	 mov	 eax, DWORD PTR _tmp_i$12[ebp]
  0042b	83 c0 01	 add	 eax, 1
  0042e	89 45 b4	 mov	 DWORD PTR _tmp_i$12[ebp], eax
$LN7@SendNameAn:
  00431	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _secondarydisplayplayer, 22
  00438	8b 4d b4	 mov	 ecx, DWORD PTR _tmp_i$12[ebp]
  0043b	0f be 94 08 00
	00 00 00	 movsx	 edx, BYTE PTR _player_names[eax+ecx]
  00443	85 d2		 test	 edx, edx
  00445	74 31		 je	 SHORT $LN6@SendNameAn
$LN10@SendNameAn:
  00447	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0044a	89 45 b0	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  0044d	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _secondarydisplayplayer, 22
  00454	8b 4d b0	 mov	 ecx, DWORD PTR _p_tmp$11[ebp]
  00457	8b 55 b4	 mov	 edx, DWORD PTR _tmp_i$12[ebp]
  0045a	8a 84 10 00 00
	00 00		 mov	 al, BYTE PTR _player_names[eax+edx]
  00461	88 01		 mov	 BYTE PTR [ecx], al
  00463	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  00466	83 c0 01	 add	 eax, 1
  00469	89 45 b0	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  0046c	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  0046f	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  00472	33 c0		 xor	 eax, eax
  00474	75 d1		 jne	 SHORT $LN10@SendNameAn
  00476	eb b0		 jmp	 SHORT $LN5@SendNameAn
$LN6@SendNameAn:
  00478	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0047b	89 45 ac	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  0047e	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00481	c6 00 00	 mov	 BYTE PTR [eax], 0
  00484	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00487	83 c0 01	 add	 eax, 1
  0048a	89 45 ac	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  0048d	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  00490	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  00493	33 c0		 xor	 eax, eax
  00495	75 e1		 jne	 SHORT $LN6@SendNameAn

; 1362 : 		CV_StealthSet(&cv_playername2, player_names[secondarydisplayplayer]);

  00497	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _secondarydisplayplayer, 22
  0049e	05 00 00 00 00	 add	 eax, OFFSET _player_names
  004a3	50		 push	 eax
  004a4	68 00 00 00 00	 push	 OFFSET _cv_playername2
  004a9	e8 00 00 00 00	 call	 _CV_StealthSet
  004ae	83 c4 08	 add	 esp, 8

; 1363 : 		SetPlayerName(secondarydisplayplayer, player_names[secondarydisplayplayer]);

  004b1	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _secondarydisplayplayer, 22
  004b8	05 00 00 00 00	 add	 eax, OFFSET _player_names
  004bd	50		 push	 eax
  004be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _secondarydisplayplayer
  004c4	51		 push	 ecx
  004c5	e8 00 00 00 00	 call	 _SetPlayerName
  004ca	83 c4 08	 add	 esp, 8

; 1364 : 	}

  004cd	eb 7f		 jmp	 SHORT $LN21@SendNameAn
$LN71@SendNameAn:

; 1365 : 	else
; 1366 : 	{
; 1367 : 		// As before, CleanupPlayerName truncates the string for us if need be,
; 1368 : 		// so no need to check here.
; 1369 : 		CleanupPlayerName(secondarydisplayplayer, cv_playername2.zstring);

  004cf	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_playername2+28
  004d4	50		 push	 eax
  004d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _secondarydisplayplayer
  004db	51		 push	 ecx
  004dc	e8 00 00 00 00	 call	 _CleanupPlayerName
  004e1	83 c4 08	 add	 esp, 8

; 1370 : 		WRITESTRING(p, cv_playername2.string);

  004e4	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _tmp_i$9[ebp], 0
  004eb	eb 09		 jmp	 SHORT $LN16@SendNameAn
$LN14@SendNameAn:
  004ed	8b 45 a8	 mov	 eax, DWORD PTR _tmp_i$9[ebp]
  004f0	83 c0 01	 add	 eax, 1
  004f3	89 45 a8	 mov	 DWORD PTR _tmp_i$9[ebp], eax
$LN16@SendNameAn:
  004f6	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_playername2+24
  004fb	03 45 a8	 add	 eax, DWORD PTR _tmp_i$9[ebp]
  004fe	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00501	85 c9		 test	 ecx, ecx
  00503	74 2a		 je	 SHORT $LN15@SendNameAn
$LN19@SendNameAn:
  00505	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00508	89 45 a4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0050b	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_playername2+24
  00510	03 45 a8	 add	 eax, DWORD PTR _tmp_i$9[ebp]
  00513	8b 4d a4	 mov	 ecx, DWORD PTR _p_tmp$8[ebp]
  00516	8a 10		 mov	 dl, BYTE PTR [eax]
  00518	88 11		 mov	 BYTE PTR [ecx], dl
  0051a	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  0051d	83 c0 01	 add	 eax, 1
  00520	89 45 a4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00523	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00526	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  00529	33 c0		 xor	 eax, eax
  0052b	75 d8		 jne	 SHORT $LN19@SendNameAn
  0052d	eb be		 jmp	 SHORT $LN14@SendNameAn
$LN15@SendNameAn:
  0052f	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00532	89 45 a0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00535	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00538	c6 00 00	 mov	 BYTE PTR [eax], 0
  0053b	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  0053e	83 c0 01	 add	 eax, 1
  00541	89 45 a0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  00544	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  00547	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  0054a	33 c0		 xor	 eax, eax
  0054c	75 e1		 jne	 SHORT $LN15@SendNameAn
$LN21@SendNameAn:

; 1371 : 	}
; 1372 : 
; 1373 : 	// Don't change skin if the server doesn't want you to.
; 1374 : 	// Note: Splitscreen player is never serverplayer. No exceptions!
; 1375 : 	if (cv_forceskin.value != -1 && (netgame || multiplayer))

  0054e	83 3d 14 00 00
	00 ff		 cmp	 DWORD PTR _cv_forceskin+20, -1
  00555	74 2e		 je	 SHORT $LN73@SendNameAn
  00557	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0055e	75 09		 jne	 SHORT $LN74@SendNameAn
  00560	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00567	74 1c		 je	 SHORT $LN73@SendNameAn
$LN74@SendNameAn:

; 1376 : 	{
; 1377 : 		SendNetXCmd2(XD_NAMEANDCOLOR, buf, p - buf);

  00569	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0056c	8d 4d d4	 lea	 ecx, DWORD PTR _buf$[ebp]
  0056f	2b c1		 sub	 eax, ecx
  00571	50		 push	 eax
  00572	8d 55 d4	 lea	 edx, DWORD PTR _buf$[ebp]
  00575	52		 push	 edx
  00576	6a 01		 push	 1
  00578	e8 00 00 00 00	 call	 _SendNetXCmd2
  0057d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1378 : 		return;

  00580	e9 3c 01 00 00	 jmp	 $LN1@SendNameAn
$LN73@SendNameAn:

; 1379 : 	}
; 1380 : 
; 1381 : 	// check if player has the skin loaded (cv_skin may have
; 1382 : 	// the name of a skin that was available in the previous game)
; 1383 : 	cv_skin2.value = R_SkinAvailable(cv_skin2.string);

  00585	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin2+24
  0058a	50		 push	 eax
  0058b	e8 00 00 00 00	 call	 _R_SkinAvailable
  00590	83 c4 04	 add	 esp, 4
  00593	a3 14 00 00 00	 mov	 DWORD PTR _cv_skin2+20, eax

; 1384 : 	if (!cv_skin2.value)

  00598	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_skin2+20, 0
  0059f	0f 85 95 00 00
	00		 jne	 $LN75@SendNameAn

; 1385 : 	{
; 1386 : 		WRITESTRINGN(p, DEFAULTSKIN, SKINNAMESIZE);

  005a5	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _tmp_i$6[ebp], 0
  005ac	eb 09		 jmp	 SHORT $LN25@SendNameAn
$LN23@SendNameAn:
  005ae	8b 45 9c	 mov	 eax, DWORD PTR _tmp_i$6[ebp]
  005b1	83 c0 01	 add	 eax, 1
  005b4	89 45 9c	 mov	 DWORD PTR _tmp_i$6[ebp], eax
$LN25@SendNameAn:
  005b7	83 7d 9c 10	 cmp	 DWORD PTR _tmp_i$6[ebp], 16 ; 00000010H
  005bb	73 37		 jae	 SHORT $LN24@SendNameAn
  005bd	8b 45 9c	 mov	 eax, DWORD PTR _tmp_i$6[ebp]
  005c0	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@[eax]
  005c7	85 c9		 test	 ecx, ecx
  005c9	74 29		 je	 SHORT $LN24@SendNameAn
$LN28@SendNameAn:
  005cb	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  005ce	89 45 98	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  005d1	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  005d4	8b 4d 9c	 mov	 ecx, DWORD PTR _tmp_i$6[ebp]
  005d7	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@[ecx]
  005dd	88 10		 mov	 BYTE PTR [eax], dl
  005df	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  005e2	83 c0 01	 add	 eax, 1
  005e5	89 45 98	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  005e8	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  005eb	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  005ee	33 c0		 xor	 eax, eax
  005f0	75 d9		 jne	 SHORT $LN28@SendNameAn
  005f2	eb ba		 jmp	 SHORT $LN23@SendNameAn
$LN24@SendNameAn:
  005f4	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  005f7	89 45 94	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  005fa	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  005fd	c6 00 00	 mov	 BYTE PTR [eax], 0
  00600	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00603	83 c0 01	 add	 eax, 1
  00606	89 45 94	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00609	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0060c	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  0060f	33 c0		 xor	 eax, eax
  00611	75 e1		 jne	 SHORT $LN24@SendNameAn

; 1387 : 		CV_StealthSet(&cv_skin2, DEFAULTSKIN);

  00613	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
  00618	68 00 00 00 00	 push	 OFFSET _cv_skin2
  0061d	e8 00 00 00 00	 call	 _CV_StealthSet
  00622	83 c4 08	 add	 esp, 8

; 1388 : 		SetPlayerSkin(secondarydisplayplayer, DEFAULTSKIN);

  00625	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
  0062a	a1 00 00 00 00	 mov	 eax, DWORD PTR _secondarydisplayplayer
  0062f	50		 push	 eax
  00630	e8 00 00 00 00	 call	 _SetPlayerSkin
  00635	83 c4 08	 add	 esp, 8

; 1389 : 	}

  00638	eb 70		 jmp	 SHORT $LN39@SendNameAn
$LN75@SendNameAn:

; 1390 : 	else
; 1391 : 		WRITESTRINGN(p, cv_skin2.string, SKINNAMESIZE);

  0063a	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _tmp_i$3[ebp], 0
  00641	eb 09		 jmp	 SHORT $LN34@SendNameAn
$LN32@SendNameAn:
  00643	8b 45 90	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  00646	83 c0 01	 add	 eax, 1
  00649	89 45 90	 mov	 DWORD PTR _tmp_i$3[ebp], eax
$LN34@SendNameAn:
  0064c	83 7d 90 10	 cmp	 DWORD PTR _tmp_i$3[ebp], 16 ; 00000010H
  00650	73 39		 jae	 SHORT $LN33@SendNameAn
  00652	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin2+24
  00657	03 45 90	 add	 eax, DWORD PTR _tmp_i$3[ebp]
  0065a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0065d	85 c9		 test	 ecx, ecx
  0065f	74 2a		 je	 SHORT $LN33@SendNameAn
$LN37@SendNameAn:
  00661	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00664	89 45 8c	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  00667	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin2+24
  0066c	03 45 90	 add	 eax, DWORD PTR _tmp_i$3[ebp]
  0066f	8b 4d 8c	 mov	 ecx, DWORD PTR _p_tmp$2[ebp]
  00672	8a 10		 mov	 dl, BYTE PTR [eax]
  00674	88 11		 mov	 BYTE PTR [ecx], dl
  00676	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00679	83 c0 01	 add	 eax, 1
  0067c	89 45 8c	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  0067f	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  00682	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  00685	33 c0		 xor	 eax, eax
  00687	75 d8		 jne	 SHORT $LN37@SendNameAn
  00689	eb b8		 jmp	 SHORT $LN32@SendNameAn
$LN33@SendNameAn:
  0068b	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0068e	89 45 88	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00691	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00694	c6 00 00	 mov	 BYTE PTR [eax], 0
  00697	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0069a	83 c0 01	 add	 eax, 1
  0069d	89 45 88	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  006a0	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  006a3	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  006a6	33 c0		 xor	 eax, eax
  006a8	75 e1		 jne	 SHORT $LN33@SendNameAn
$LN39@SendNameAn:

; 1392 : 
; 1393 : 	SendNetXCmd2(XD_NAMEANDCOLOR, buf, p - buf);

  006aa	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  006ad	8d 4d d4	 lea	 ecx, DWORD PTR _buf$[ebp]
  006b0	2b c1		 sub	 eax, ecx
  006b2	50		 push	 eax
  006b3	8d 55 d4	 lea	 edx, DWORD PTR _buf$[ebp]
  006b6	52		 push	 edx
  006b7	6a 01		 push	 1
  006b9	e8 00 00 00 00	 call	 _SendNetXCmd2
  006be	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SendNameAn:

; 1394 : }

  006c1	5f		 pop	 edi
  006c2	5e		 pop	 esi
  006c3	5b		 pop	 ebx
  006c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006c7	33 cd		 xor	 ecx, ebp
  006c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006ce	8b e5		 mov	 esp, ebp
  006d0	5d		 pop	 ebp
  006d1	c3		 ret	 0
_SendNameAndColor2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _SendNameAndColor
_TEXT	SEGMENT
tv276 = -188						; size = 4
_p_tmp$1 = -120						; size = 4
_p_tmp$2 = -116						; size = 4
_tmp_i$3 = -112						; size = 4
_p_tmp$4 = -108						; size = 4
_p_tmp$5 = -104						; size = 4
_tmp_i$6 = -100						; size = 4
_p_tmp$7 = -96						; size = 4
_p_tmp$8 = -92						; size = 4
_tmp_i$9 = -88						; size = 4
_p_tmp$10 = -84						; size = 4
_p_tmp$11 = -80						; size = 4
_tmp_i$12 = -76						; size = 4
_p_tmp$13 = -72						; size = 4
_notsame$14 = -68					; size = 4
_i$15 = -64						; size = 4
_forcedskin$16 = -60					; size = 4
_foundskin$17 = -56					; size = 4
_extrainfo$ = -49					; size = 1
_p$ = -48						; size = 4
_buf$ = -44						; size = 39
__$ArrayPad$ = -4					; size = 4
_SendNameAndColor PROC					; COMDAT

; 1085 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1086 : 	XBOXSTATIC char buf[MAXPLAYERNAME+1+SKINNAMESIZE+1];
; 1087 : 	char *p;
; 1088 : 	UINT8 extrainfo = 0; // color and (if applicable) CTF team

  00016	c6 45 cf 00	 mov	 BYTE PTR _extrainfo$[ebp], 0

; 1089 : 
; 1090 : 	if (netgame && !addedtogame)

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00021	74 0e		 je	 SHORT $LN44@SendNameAn
  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _addedtogame, 0
  0002a	75 05		 jne	 SHORT $LN44@SendNameAn

; 1091 : 		return;

  0002c	e9 07 08 00 00	 jmp	 $LN1@SendNameAn
$LN44@SendNameAn:

; 1092 : 
; 1093 : 	p = buf;

  00031	8d 45 d4	 lea	 eax, DWORD PTR _buf$[ebp]
  00034	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax

; 1094 : 
; 1095 : 	// normal player colors in single player
; 1096 : 	if (!multiplayer && !netgame && (gamestate == GS_LEVEL || gamestate == GS_INTERMISSION || gamestate == GS_WAITINGPLAYERS))

  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0003e	75 5a		 jne	 SHORT $LN47@SendNameAn
  00040	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00047	75 51		 jne	 SHORT $LN47@SendNameAn
  00049	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00050	74 12		 je	 SHORT $LN46@SendNameAn
  00052	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  00059	74 09		 je	 SHORT $LN46@SendNameAn
  0005b	83 3d 00 00 00
	00 0d		 cmp	 DWORD PTR _gamestate, 13 ; 0000000dH
  00062	75 36		 jne	 SHORT $LN47@SendNameAn
$LN46@SendNameAn:

; 1097 : 		if (cv_playercolor.value != players[consoleplayer].prefcolor)

  00064	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0006e	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_playercolor+20
  00074	3b 88 fc 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax+252]
  0007a	74 1e		 je	 SHORT $LN47@SendNameAn

; 1098 : 			CV_StealthSetValue(&cv_playercolor, players[consoleplayer].prefcolor);

  0007c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00086	8b 88 fc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+252]
  0008c	51		 push	 ecx
  0008d	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  00092	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00097	83 c4 08	 add	 esp, 8
$LN47@SendNameAn:

; 1099 : 
; 1100 : 	// normal player colors
; 1101 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0009a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a1	83 f8 04	 cmp	 eax, 4
  000a4	74 15		 je	 SHORT $LN49@SendNameAn
  000a6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	75 61		 jne	 SHORT $LN52@SendNameAn
  000b2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  000b9	74 58		 je	 SHORT $LN52@SendNameAn
$LN49@SendNameAn:

; 1102 : 	{
; 1103 : 		if (players[consoleplayer].ctfteam == 1 && cv_playercolor.value != 6)

  000bb	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  000c5	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR _players[eax+352], 1
  000cc	75 1a		 jne	 SHORT $LN50@SendNameAn
  000ce	83 3d 14 00 00
	00 06		 cmp	 DWORD PTR _cv_playercolor+20, 6
  000d5	74 11		 je	 SHORT $LN50@SendNameAn

; 1104 : 			CV_StealthSetValue(&cv_playercolor, 6); // Red

  000d7	6a 06		 push	 6
  000d9	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  000de	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000e3	83 c4 08	 add	 esp, 8
  000e6	eb 2b		 jmp	 SHORT $LN52@SendNameAn
$LN50@SendNameAn:

; 1105 : 		else if (players[consoleplayer].ctfteam == 2 && cv_playercolor.value != 7)

  000e8	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  000f2	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR _players[eax+352], 2
  000f9	75 18		 jne	 SHORT $LN52@SendNameAn
  000fb	83 3d 14 00 00
	00 07		 cmp	 DWORD PTR _cv_playercolor+20, 7
  00102	74 0f		 je	 SHORT $LN52@SendNameAn

; 1106 : 			CV_StealthSetValue(&cv_playercolor, 7); // Blue

  00104	6a 07		 push	 7
  00106	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  0010b	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00110	83 c4 08	 add	 esp, 8
$LN52@SendNameAn:

; 1107 : 	}
; 1108 : 
; 1109 : 	// disallow the use of yellow in Match/Team Match/CTF
; 1110 : 	if (gametype == GT_MATCH || gametype == GT_CTF)

  00113	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0011a	83 f8 01	 cmp	 eax, 1
  0011d	74 0c		 je	 SHORT $LN54@SendNameAn
  0011f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00126	83 f8 04	 cmp	 eax, 4
  00129	75 27		 jne	 SHORT $LN55@SendNameAn
$LN54@SendNameAn:

; 1111 : 	{
; 1112 : 		if (cv_playercolor.value == 15) //yellow

  0012b	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR _cv_playercolor+20, 15 ; 0000000fH
  00132	75 1e		 jne	 SHORT $LN55@SendNameAn

; 1113 : 			CV_StealthSetValue(&cv_playercolor, players[consoleplayer].skincolor);

  00134	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0013e	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  00144	51		 push	 ecx
  00145	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  0014a	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0014f	83 c4 08	 add	 esp, 8
$LN55@SendNameAn:

; 1114 : 	}
; 1115 : 
; 1116 : 	// never allow the color "none"
; 1117 : 	if (!cv_playercolor.value)

  00152	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_playercolor+20, 0
  00159	75 79		 jne	 SHORT $LN60@SendNameAn

; 1118 : 	{
; 1119 : 		if (players[consoleplayer].skincolor)

  0015b	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00165	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR _players[eax+180], 0
  0016c	74 20		 je	 SHORT $LN57@SendNameAn

; 1120 : 			CV_StealthSetValue(&cv_playercolor, players[consoleplayer].skincolor);

  0016e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00178	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  0017e	51		 push	 ecx
  0017f	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  00184	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00189	83 c4 08	 add	 esp, 8
  0018c	eb 46		 jmp	 SHORT $LN60@SendNameAn
$LN57@SendNameAn:

; 1121 : 		else if (players[consoleplayer].prefcolor)

  0018e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00198	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR _players[eax+252], 0
  0019f	74 20		 je	 SHORT $LN59@SendNameAn

; 1122 : 			CV_StealthSetValue(&cv_playercolor, players[consoleplayer].prefcolor);

  001a1	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  001ab	8b 88 fc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+252]
  001b1	51		 push	 ecx
  001b2	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  001b7	e8 00 00 00 00	 call	 _CV_StealthSetValue
  001bc	83 c4 08	 add	 esp, 8
  001bf	eb 13		 jmp	 SHORT $LN60@SendNameAn
$LN59@SendNameAn:

; 1123 : 		else
; 1124 : 			CV_StealthSet(&cv_playercolor, cv_playercolor.defaultvalue);

  001c1	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_playercolor+4
  001c6	50		 push	 eax
  001c7	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  001cc	e8 00 00 00 00	 call	 _CV_StealthSet
  001d1	83 c4 08	 add	 esp, 8
$LN60@SendNameAn:

; 1125 : 	}
; 1126 : 
; 1127 : 	extrainfo = (UINT8)(extrainfo + (UINT8)cv_playercolor.value);

  001d4	0f b6 45 cf	 movzx	 eax, BYTE PTR _extrainfo$[ebp]
  001d8	0f b6 0d 14 00
	00 00		 movzx	 ecx, BYTE PTR _cv_playercolor+20
  001df	03 c1		 add	 eax, ecx
  001e1	88 45 cf	 mov	 BYTE PTR _extrainfo$[ebp], al

; 1128 : 
; 1129 : 	// If you're not in a netgame, merely update the skin, color, and name.
; 1130 : 	if (!netgame)

  001e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  001eb	0f 85 3f 03 00
	00		 jne	 $LN61@SendNameAn

; 1131 : 	{
; 1132 : 		INT32 foundskin;
; 1133 : 
; 1134 : 		players[consoleplayer].skincolor = (cv_playercolor.value&31) % MAXSKINCOLORS;

  001f1	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_playercolor+20
  001f6	83 e0 1f	 and	 eax, 31			; 0000001fH
  001f9	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  001fe	79 05		 jns	 SHORT $LN86@SendNameAn
  00200	48		 dec	 eax
  00201	83 c8 f0	 or	 eax, -16		; fffffff0H
  00204	40		 inc	 eax
$LN86@SendNameAn:
  00205	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  0020f	89 81 b4 00 00
	00		 mov	 DWORD PTR _players[ecx+180], eax

; 1135 : 
; 1136 : 		if (players[consoleplayer].mo)

  00215	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0021f	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00226	74 4f		 je	 SHORT $LN62@SendNameAn

; 1137 : 		{
; 1138 : 			players[consoleplayer].mo->flags |= MF_TRANSLATION;

  00228	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00232	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00238	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0023b	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00241	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0024b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00251	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1139 : 			players[consoleplayer].mo->color = (UINT8)players[consoleplayer].skincolor;

  00254	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0025e	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  00268	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0026e	8a 80 b4 00 00
	00		 mov	 al, BYTE PTR _players[eax+180]
  00274	88 42 68	 mov	 BYTE PTR [edx+104], al
$LN62@SendNameAn:

; 1140 : 		}
; 1141 : 
; 1142 : 		if (cv_mute.value && !(server || adminplayer == consoleplayer)) //server doesn't want name changes.

  00277	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  0027e	74 4e		 je	 SHORT $LN63@SendNameAn
  00280	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00287	75 45		 jne	 SHORT $LN63@SendNameAn
  00289	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0028e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00294	74 38		 je	 SHORT $LN63@SendNameAn

; 1143 : 		{
; 1144 : 			CV_StealthSet(&cv_playername, player_names[consoleplayer]);

  00296	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _consoleplayer, 22
  0029d	05 00 00 00 00	 add	 eax, OFFSET _player_names
  002a2	50		 push	 eax
  002a3	68 00 00 00 00	 push	 OFFSET _cv_playername
  002a8	e8 00 00 00 00	 call	 _CV_StealthSet
  002ad	83 c4 08	 add	 esp, 8

; 1145 : 			SetPlayerName(consoleplayer, player_names[consoleplayer]);

  002b0	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _consoleplayer, 22
  002b7	05 00 00 00 00	 add	 eax, OFFSET _player_names
  002bc	50		 push	 eax
  002bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  002c3	51		 push	 ecx
  002c4	e8 00 00 00 00	 call	 _SetPlayerName
  002c9	83 c4 08	 add	 esp, 8

; 1146 : 		}

  002cc	eb 2a		 jmp	 SHORT $LN64@SendNameAn
$LN63@SendNameAn:

; 1147 : 		else
; 1148 : 		{
; 1149 : 			CleanupPlayerName(consoleplayer, cv_playername.zstring);

  002ce	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_playername+28
  002d3	50		 push	 eax
  002d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 _CleanupPlayerName
  002e0	83 c4 08	 add	 esp, 8

; 1150 : 			SetPlayerName(consoleplayer, cv_playername.zstring);

  002e3	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_playername+28
  002e8	50		 push	 eax
  002e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 _SetPlayerName
  002f5	83 c4 08	 add	 esp, 8
$LN64@SendNameAn:

; 1151 : 		}
; 1152 : 
; 1153 : 		if (cv_forceskin.value >= 0 && (netgame || multiplayer)) // Server wants everyone to use the same player

  002f8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_forceskin+20, 0
  002ff	0f 8c ec 00 00
	00		 jl	 $LN65@SendNameAn
  00305	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0030c	75 0d		 jne	 SHORT $LN67@SendNameAn
  0030e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00315	0f 84 d6 00 00
	00		 je	 $LN65@SendNameAn
$LN67@SendNameAn:

; 1154 : 		{
; 1155 : 			const INT32 forcedskin = cv_forceskin.value;

  0031b	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_forceskin+20
  00320	89 45 c4	 mov	 DWORD PTR _forcedskin$16[ebp], eax

; 1156 : 
; 1157 : 			if (triggerforcedskin)

  00323	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _triggerforcedskin, 0
  0032a	0f 84 8f 00 00
	00		 je	 $LN68@SendNameAn

; 1158 : 			{
; 1159 : 				INT32 i;
; 1160 : 
; 1161 : 				for (i = 0; i < MAXPLAYERS; i++)

  00330	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$15[ebp], 0
  00337	eb 09		 jmp	 SHORT $LN4@SendNameAn
$LN2@SendNameAn:
  00339	8b 45 c0	 mov	 eax, DWORD PTR _i$15[ebp]
  0033c	83 c0 01	 add	 eax, 1
  0033f	89 45 c0	 mov	 DWORD PTR _i$15[ebp], eax
$LN4@SendNameAn:
  00342	83 7d c0 20	 cmp	 DWORD PTR _i$15[ebp], 32 ; 00000020H
  00346	7d 6b		 jge	 SHORT $LN3@SendNameAn

; 1162 : 				{
; 1163 : 					if (playeringame[i])

  00348	8b 45 c0	 mov	 eax, DWORD PTR _i$15[ebp]
  0034b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00353	74 5c		 je	 SHORT $LN73@SendNameAn

; 1164 : 					{
; 1165 : 						SetPlayerSkinByNum(i, forcedskin);

  00355	8b 45 c4	 mov	 eax, DWORD PTR _forcedskin$16[ebp]
  00358	50		 push	 eax
  00359	8b 4d c0	 mov	 ecx, DWORD PTR _i$15[ebp]
  0035c	51		 push	 ecx
  0035d	e8 00 00 00 00	 call	 _SetPlayerSkinByNum
  00362	83 c4 08	 add	 esp, 8

; 1166 : 
; 1167 : 						// If it's me (or my brother), set appropriate skin value in cv_skin/cv_skin2
; 1168 : 						if (i == consoleplayer)

  00365	8b 45 c0	 mov	 eax, DWORD PTR _i$15[ebp]
  00368	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0036e	75 1c		 jne	 SHORT $LN71@SendNameAn

; 1169 : 							CV_StealthSet(&cv_skin, skins[forcedskin].name);

  00370	69 45 c4 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$16[ebp], 236
  00377	05 00 00 00 00	 add	 eax, OFFSET _skins
  0037c	50		 push	 eax
  0037d	68 00 00 00 00	 push	 OFFSET _cv_skin
  00382	e8 00 00 00 00	 call	 _CV_StealthSet
  00387	83 c4 08	 add	 esp, 8
  0038a	eb 25		 jmp	 SHORT $LN73@SendNameAn
$LN71@SendNameAn:

; 1170 : 						else if (i == secondarydisplayplayer)

  0038c	8b 45 c0	 mov	 eax, DWORD PTR _i$15[ebp]
  0038f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  00395	75 1a		 jne	 SHORT $LN73@SendNameAn

; 1171 : 							CV_StealthSet(&cv_skin2, skins[forcedskin].name);

  00397	69 45 c4 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$16[ebp], 236
  0039e	05 00 00 00 00	 add	 eax, OFFSET _skins
  003a3	50		 push	 eax
  003a4	68 00 00 00 00	 push	 OFFSET _cv_skin2
  003a9	e8 00 00 00 00	 call	 _CV_StealthSet
  003ae	83 c4 08	 add	 esp, 8
$LN73@SendNameAn:

; 1172 : 					}
; 1173 : 				}

  003b1	eb 86		 jmp	 SHORT $LN2@SendNameAn
$LN3@SendNameAn:

; 1174 : 				triggerforcedskin = false;

  003b3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _triggerforcedskin, 0

; 1175 : 			}

  003bd	eb 2d		 jmp	 SHORT $LN69@SendNameAn
$LN68@SendNameAn:

; 1176 : 			else
; 1177 : 			{
; 1178 : 				SetPlayerSkinByNum(consoleplayer, forcedskin);

  003bf	8b 45 c4	 mov	 eax, DWORD PTR _forcedskin$16[ebp]
  003c2	50		 push	 eax
  003c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  003c9	51		 push	 ecx
  003ca	e8 00 00 00 00	 call	 _SetPlayerSkinByNum
  003cf	83 c4 08	 add	 esp, 8

; 1179 : 				CV_StealthSet(&cv_skin, skins[forcedskin].name);

  003d2	69 45 c4 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$16[ebp], 236
  003d9	05 00 00 00 00	 add	 eax, OFFSET _skins
  003de	50		 push	 eax
  003df	68 00 00 00 00	 push	 OFFSET _cv_skin
  003e4	e8 00 00 00 00	 call	 _CV_StealthSet
  003e9	83 c4 08	 add	 esp, 8
$LN69@SendNameAn:

; 1180 : 			}
; 1181 : 		}

  003ec	e9 3a 01 00 00	 jmp	 $LN76@SendNameAn
$LN65@SendNameAn:

; 1182 : 		else if ((foundskin = R_SkinAvailable(cv_skin.string)) != -1)

  003f1	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin+24
  003f6	50		 push	 eax
  003f7	e8 00 00 00 00	 call	 _R_SkinAvailable
  003fc	83 c4 04	 add	 esp, 4
  003ff	89 45 c8	 mov	 DWORD PTR _foundskin$17[ebp], eax
  00402	83 7d c8 ff	 cmp	 DWORD PTR _foundskin$17[ebp], -1
  00406	0f 84 1f 01 00
	00		 je	 $LN76@SendNameAn

; 1183 : 		{
; 1184 : 			boolean notsame;
; 1185 : 
; 1186 : 			cv_skin.value = foundskin;

  0040c	8b 45 c8	 mov	 eax, DWORD PTR _foundskin$17[ebp]
  0040f	a3 14 00 00 00	 mov	 DWORD PTR _cv_skin+20, eax

; 1187 : 
; 1188 : 			notsame = (cv_skin.value != players[consoleplayer].skin);

  00414	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0041e	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_skin+20
  00424	3b 88 b8 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax+184]
  0042a	74 0c		 je	 SHORT $LN84@SendNameAn
  0042c	c7 85 44 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv276[ebp], 1
  00436	eb 0a		 jmp	 SHORT $LN85@SendNameAn
$LN84@SendNameAn:
  00438	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv276[ebp], 0
$LN85@SendNameAn:
  00442	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv276[ebp]
  00448	89 55 bc	 mov	 DWORD PTR _notsame$14[ebp], edx

; 1189 : 
; 1190 : 			SetPlayerSkin(consoleplayer, cv_skin.string);

  0044b	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin+24
  00450	50		 push	 eax
  00451	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  00457	51		 push	 ecx
  00458	e8 00 00 00 00	 call	 _SetPlayerSkin
  0045d	83 c4 08	 add	 esp, 8

; 1191 : 			CV_StealthSet(&cv_skin, skins[cv_skin.value].name);

  00460	69 05 14 00 00
	00 ec 00 00 00	 imul	 eax, DWORD PTR _cv_skin+20, 236
  0046a	05 00 00 00 00	 add	 eax, OFFSET _skins
  0046f	50		 push	 eax
  00470	68 00 00 00 00	 push	 OFFSET _cv_skin
  00475	e8 00 00 00 00	 call	 _CV_StealthSet
  0047a	83 c4 08	 add	 esp, 8

; 1192 : 
; 1193 : 			if (notsame)

  0047d	83 7d bc 00	 cmp	 DWORD PTR _notsame$14[ebp], 0
  00481	0f 84 a4 00 00
	00		 je	 $LN76@SendNameAn

; 1194 : 			{
; 1195 : 				CV_StealthSetValue(&cv_playercolor, players[consoleplayer].prefcolor);

  00487	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00491	8b 88 fc 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+252]
  00497	51		 push	 ecx
  00498	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  0049d	e8 00 00 00 00	 call	 _CV_StealthSetValue
  004a2	83 c4 08	 add	 esp, 8

; 1196 : 
; 1197 : 				players[consoleplayer].skincolor = (cv_playercolor.value&31) % MAXSKINCOLORS;

  004a5	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_playercolor+20
  004aa	83 e0 1f	 and	 eax, 31			; 0000001fH
  004ad	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  004b2	79 05		 jns	 SHORT $LN87@SendNameAn
  004b4	48		 dec	 eax
  004b5	83 c8 f0	 or	 eax, -16		; fffffff0H
  004b8	40		 inc	 eax
$LN87@SendNameAn:
  004b9	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  004c3	89 81 b4 00 00
	00		 mov	 DWORD PTR _players[ecx+180], eax

; 1198 : 
; 1199 : 				if (players[consoleplayer].mo)

  004c9	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  004d3	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  004da	74 4f		 je	 SHORT $LN76@SendNameAn

; 1200 : 				{
; 1201 : 					players[consoleplayer].mo->flags |= MF_TRANSLATION;

  004dc	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  004e6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  004ec	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  004ef	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  004f5	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  004ff	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00505	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1202 : 					players[consoleplayer].mo->color = (UINT8)players[consoleplayer].skincolor;

  00508	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00512	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  0051c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00522	8a 80 b4 00 00
	00		 mov	 al, BYTE PTR _players[eax+180]
  00528	88 42 68	 mov	 BYTE PTR [edx+104], al
$LN76@SendNameAn:

; 1203 : 				}
; 1204 : 			}
; 1205 : 		}
; 1206 : 
; 1207 : 		return;

  0052b	e9 08 03 00 00	 jmp	 $LN1@SendNameAn
$LN61@SendNameAn:

; 1208 : 	}
; 1209 : 
; 1210 : 	snacpending++;

  00530	a1 00 00 00 00	 mov	 eax, DWORD PTR _snacpending
  00535	83 c0 01	 add	 eax, 1
  00538	a3 00 00 00 00	 mov	 DWORD PTR _snacpending, eax
$LN7@SendNameAn:

; 1211 : 
; 1212 : 	WRITEUINT8(p, extrainfo);

  0053d	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00540	89 45 b8	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00543	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00546	8a 4d cf	 mov	 cl, BYTE PTR _extrainfo$[ebp]
  00549	88 08		 mov	 BYTE PTR [eax], cl
  0054b	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  0054e	83 c0 01	 add	 eax, 1
  00551	89 45 b8	 mov	 DWORD PTR _p_tmp$13[ebp], eax
  00554	8b 45 b8	 mov	 eax, DWORD PTR _p_tmp$13[ebp]
  00557	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  0055a	33 c0		 xor	 eax, eax
  0055c	75 df		 jne	 SHORT $LN7@SendNameAn

; 1213 : 
; 1214 : 	if (cv_mute.value && !(server || adminplayer == consoleplayer))

  0055e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00565	0f 84 ce 00 00
	00		 je	 $LN77@SendNameAn
  0056b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00572	0f 85 c1 00 00
	00		 jne	 $LN77@SendNameAn
  00578	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0057d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00583	0f 84 b0 00 00
	00		 je	 $LN77@SendNameAn

; 1215 : 	{
; 1216 : 		WRITESTRING(p, player_names[consoleplayer]);

  00589	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _tmp_i$12[ebp], 0
  00590	eb 09		 jmp	 SHORT $LN10@SendNameAn
$LN8@SendNameAn:
  00592	8b 45 b4	 mov	 eax, DWORD PTR _tmp_i$12[ebp]
  00595	83 c0 01	 add	 eax, 1
  00598	89 45 b4	 mov	 DWORD PTR _tmp_i$12[ebp], eax
$LN10@SendNameAn:
  0059b	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _consoleplayer, 22
  005a2	8b 4d b4	 mov	 ecx, DWORD PTR _tmp_i$12[ebp]
  005a5	0f be 94 08 00
	00 00 00	 movsx	 edx, BYTE PTR _player_names[eax+ecx]
  005ad	85 d2		 test	 edx, edx
  005af	74 31		 je	 SHORT $LN9@SendNameAn
$LN13@SendNameAn:
  005b1	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  005b4	89 45 b0	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  005b7	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _consoleplayer, 22
  005be	8b 4d b0	 mov	 ecx, DWORD PTR _p_tmp$11[ebp]
  005c1	8b 55 b4	 mov	 edx, DWORD PTR _tmp_i$12[ebp]
  005c4	8a 84 10 00 00
	00 00		 mov	 al, BYTE PTR _player_names[eax+edx]
  005cb	88 01		 mov	 BYTE PTR [ecx], al
  005cd	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  005d0	83 c0 01	 add	 eax, 1
  005d3	89 45 b0	 mov	 DWORD PTR _p_tmp$11[ebp], eax
  005d6	8b 45 b0	 mov	 eax, DWORD PTR _p_tmp$11[ebp]
  005d9	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  005dc	33 c0		 xor	 eax, eax
  005de	75 d1		 jne	 SHORT $LN13@SendNameAn
  005e0	eb b0		 jmp	 SHORT $LN8@SendNameAn
$LN9@SendNameAn:
  005e2	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  005e5	89 45 ac	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  005e8	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  005eb	c6 00 00	 mov	 BYTE PTR [eax], 0
  005ee	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  005f1	83 c0 01	 add	 eax, 1
  005f4	89 45 ac	 mov	 DWORD PTR _p_tmp$10[ebp], eax
  005f7	8b 45 ac	 mov	 eax, DWORD PTR _p_tmp$10[ebp]
  005fa	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  005fd	33 c0		 xor	 eax, eax
  005ff	75 e1		 jne	 SHORT $LN9@SendNameAn

; 1217 : 		CV_StealthSet(&cv_playername, player_names[consoleplayer]);

  00601	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _consoleplayer, 22
  00608	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0060d	50		 push	 eax
  0060e	68 00 00 00 00	 push	 OFFSET _cv_playername
  00613	e8 00 00 00 00	 call	 _CV_StealthSet
  00618	83 c4 08	 add	 esp, 8

; 1218 : 		SetPlayerName(consoleplayer, player_names[consoleplayer]);

  0061b	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _consoleplayer, 22
  00622	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00627	50		 push	 eax
  00628	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  0062e	51		 push	 ecx
  0062f	e8 00 00 00 00	 call	 _SetPlayerName
  00634	83 c4 08	 add	 esp, 8

; 1219 : 	}

  00637	eb 7f		 jmp	 SHORT $LN24@SendNameAn
$LN77@SendNameAn:

; 1220 : 	else
; 1221 : 	{
; 1222 : 		// As before, CleanupPlayerName truncates the string for us if need be,
; 1223 : 		// so no need to check here.
; 1224 : 		CleanupPlayerName(consoleplayer, cv_playername.zstring);

  00639	a1 1c 00 00 00	 mov	 eax, DWORD PTR _cv_playername+28
  0063e	50		 push	 eax
  0063f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _consoleplayer
  00645	51		 push	 ecx
  00646	e8 00 00 00 00	 call	 _CleanupPlayerName
  0064b	83 c4 08	 add	 esp, 8

; 1225 : 		WRITESTRING(p, cv_playername.string);

  0064e	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _tmp_i$9[ebp], 0
  00655	eb 09		 jmp	 SHORT $LN19@SendNameAn
$LN17@SendNameAn:
  00657	8b 45 a8	 mov	 eax, DWORD PTR _tmp_i$9[ebp]
  0065a	83 c0 01	 add	 eax, 1
  0065d	89 45 a8	 mov	 DWORD PTR _tmp_i$9[ebp], eax
$LN19@SendNameAn:
  00660	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_playername+24
  00665	03 45 a8	 add	 eax, DWORD PTR _tmp_i$9[ebp]
  00668	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0066b	85 c9		 test	 ecx, ecx
  0066d	74 2a		 je	 SHORT $LN18@SendNameAn
$LN22@SendNameAn:
  0066f	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00672	89 45 a4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  00675	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_playername+24
  0067a	03 45 a8	 add	 eax, DWORD PTR _tmp_i$9[ebp]
  0067d	8b 4d a4	 mov	 ecx, DWORD PTR _p_tmp$8[ebp]
  00680	8a 10		 mov	 dl, BYTE PTR [eax]
  00682	88 11		 mov	 BYTE PTR [ecx], dl
  00684	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00687	83 c0 01	 add	 eax, 1
  0068a	89 45 a4	 mov	 DWORD PTR _p_tmp$8[ebp], eax
  0068d	8b 45 a4	 mov	 eax, DWORD PTR _p_tmp$8[ebp]
  00690	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  00693	33 c0		 xor	 eax, eax
  00695	75 d8		 jne	 SHORT $LN22@SendNameAn
  00697	eb be		 jmp	 SHORT $LN17@SendNameAn
$LN18@SendNameAn:
  00699	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0069c	89 45 a0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  0069f	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  006a2	c6 00 00	 mov	 BYTE PTR [eax], 0
  006a5	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  006a8	83 c0 01	 add	 eax, 1
  006ab	89 45 a0	 mov	 DWORD PTR _p_tmp$7[ebp], eax
  006ae	8b 45 a0	 mov	 eax, DWORD PTR _p_tmp$7[ebp]
  006b1	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  006b4	33 c0		 xor	 eax, eax
  006b6	75 e1		 jne	 SHORT $LN18@SendNameAn
$LN24@SendNameAn:

; 1226 : 	}
; 1227 : 
; 1228 : 	// Don't change skin if the server doesn't want you to.
; 1229 : 	if (!server && (cv_forceskin.value != -1) && !(adminplayer == consoleplayer && serverplayer == -1))

  006b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  006bf	75 3b		 jne	 SHORT $LN79@SendNameAn
  006c1	83 3d 14 00 00
	00 ff		 cmp	 DWORD PTR _cv_forceskin+20, -1
  006c8	74 32		 je	 SHORT $LN79@SendNameAn
  006ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  006cf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  006d5	75 09		 jne	 SHORT $LN80@SendNameAn
  006d7	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _serverplayer, -1
  006de	74 1c		 je	 SHORT $LN79@SendNameAn
$LN80@SendNameAn:

; 1230 : 	{
; 1231 : 		SendNetXCmd(XD_NAMEANDCOLOR, buf, p - buf);

  006e0	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  006e3	8d 4d d4	 lea	 ecx, DWORD PTR _buf$[ebp]
  006e6	2b c1		 sub	 eax, ecx
  006e8	50		 push	 eax
  006e9	8d 55 d4	 lea	 edx, DWORD PTR _buf$[ebp]
  006ec	52		 push	 edx
  006ed	6a 01		 push	 1
  006ef	e8 00 00 00 00	 call	 _SendNetXCmd
  006f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 		return;

  006f7	e9 3c 01 00 00	 jmp	 $LN1@SendNameAn
$LN79@SendNameAn:

; 1233 : 	}
; 1234 : 
; 1235 : 	// check if player has the skin loaded (cv_skin may have
; 1236 : 	// the name of a skin that was available in the previous game)
; 1237 : 	cv_skin.value = R_SkinAvailable(cv_skin.string);

  006fc	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin+24
  00701	50		 push	 eax
  00702	e8 00 00 00 00	 call	 _R_SkinAvailable
  00707	83 c4 04	 add	 esp, 4
  0070a	a3 14 00 00 00	 mov	 DWORD PTR _cv_skin+20, eax

; 1238 : 	if (!cv_skin.value)

  0070f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_skin+20, 0
  00716	0f 85 95 00 00
	00		 jne	 $LN81@SendNameAn

; 1239 : 	{
; 1240 : 		WRITESTRINGN(p, DEFAULTSKIN, SKINNAMESIZE)

  0071c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _tmp_i$6[ebp], 0
  00723	eb 09		 jmp	 SHORT $LN28@SendNameAn
$LN26@SendNameAn:
  00725	8b 45 9c	 mov	 eax, DWORD PTR _tmp_i$6[ebp]
  00728	83 c0 01	 add	 eax, 1
  0072b	89 45 9c	 mov	 DWORD PTR _tmp_i$6[ebp], eax
$LN28@SendNameAn:
  0072e	83 7d 9c 10	 cmp	 DWORD PTR _tmp_i$6[ebp], 16 ; 00000010H
  00732	73 37		 jae	 SHORT $LN27@SendNameAn
  00734	8b 45 9c	 mov	 eax, DWORD PTR _tmp_i$6[ebp]
  00737	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@[eax]
  0073e	85 c9		 test	 ecx, ecx
  00740	74 29		 je	 SHORT $LN27@SendNameAn
$LN31@SendNameAn:
  00742	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00745	89 45 98	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  00748	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  0074b	8b 4d 9c	 mov	 ecx, DWORD PTR _tmp_i$6[ebp]
  0074e	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@[ecx]
  00754	88 10		 mov	 BYTE PTR [eax], dl
  00756	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00759	83 c0 01	 add	 eax, 1
  0075c	89 45 98	 mov	 DWORD PTR _p_tmp$5[ebp], eax
  0075f	8b 45 98	 mov	 eax, DWORD PTR _p_tmp$5[ebp]
  00762	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  00765	33 c0		 xor	 eax, eax
  00767	75 d9		 jne	 SHORT $LN31@SendNameAn
  00769	eb ba		 jmp	 SHORT $LN26@SendNameAn
$LN27@SendNameAn:
  0076b	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0076e	89 45 94	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00771	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00774	c6 00 00	 mov	 BYTE PTR [eax], 0
  00777	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0077a	83 c0 01	 add	 eax, 1
  0077d	89 45 94	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00780	8b 45 94	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00783	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  00786	33 c0		 xor	 eax, eax
  00788	75 e1		 jne	 SHORT $LN27@SendNameAn

; 1241 : 		CV_StealthSet(&cv_skin, DEFAULTSKIN);

  0078a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
  0078f	68 00 00 00 00	 push	 OFFSET _cv_skin
  00794	e8 00 00 00 00	 call	 _CV_StealthSet
  00799	83 c4 08	 add	 esp, 8

; 1242 : 		SetPlayerSkin(consoleplayer, DEFAULTSKIN);

  0079c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GCLAIBNI@sonic?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA?$AA@
  007a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  007a6	50		 push	 eax
  007a7	e8 00 00 00 00	 call	 _SetPlayerSkin
  007ac	83 c4 08	 add	 esp, 8

; 1243 : 	}

  007af	eb 70		 jmp	 SHORT $LN42@SendNameAn
$LN81@SendNameAn:

; 1244 : 	else
; 1245 : 		WRITESTRINGN(p, cv_skin.string, SKINNAMESIZE);

  007b1	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _tmp_i$3[ebp], 0
  007b8	eb 09		 jmp	 SHORT $LN37@SendNameAn
$LN35@SendNameAn:
  007ba	8b 45 90	 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  007bd	83 c0 01	 add	 eax, 1
  007c0	89 45 90	 mov	 DWORD PTR _tmp_i$3[ebp], eax
$LN37@SendNameAn:
  007c3	83 7d 90 10	 cmp	 DWORD PTR _tmp_i$3[ebp], 16 ; 00000010H
  007c7	73 39		 jae	 SHORT $LN36@SendNameAn
  007c9	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin+24
  007ce	03 45 90	 add	 eax, DWORD PTR _tmp_i$3[ebp]
  007d1	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  007d4	85 c9		 test	 ecx, ecx
  007d6	74 2a		 je	 SHORT $LN36@SendNameAn
$LN40@SendNameAn:
  007d8	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  007db	89 45 8c	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  007de	a1 18 00 00 00	 mov	 eax, DWORD PTR _cv_skin+24
  007e3	03 45 90	 add	 eax, DWORD PTR _tmp_i$3[ebp]
  007e6	8b 4d 8c	 mov	 ecx, DWORD PTR _p_tmp$2[ebp]
  007e9	8a 10		 mov	 dl, BYTE PTR [eax]
  007eb	88 11		 mov	 BYTE PTR [ecx], dl
  007ed	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  007f0	83 c0 01	 add	 eax, 1
  007f3	89 45 8c	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  007f6	8b 45 8c	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  007f9	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  007fc	33 c0		 xor	 eax, eax
  007fe	75 d8		 jne	 SHORT $LN40@SendNameAn
  00800	eb b8		 jmp	 SHORT $LN35@SendNameAn
$LN36@SendNameAn:
  00802	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00805	89 45 88	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00808	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0080b	c6 00 00	 mov	 BYTE PTR [eax], 0
  0080e	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  00811	83 c0 01	 add	 eax, 1
  00814	89 45 88	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  00817	8b 45 88	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  0081a	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  0081d	33 c0		 xor	 eax, eax
  0081f	75 e1		 jne	 SHORT $LN36@SendNameAn
$LN42@SendNameAn:

; 1246 : 
; 1247 : 	SendNetXCmd(XD_NAMEANDCOLOR, buf, p - buf);

  00821	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00824	8d 4d d4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00827	2b c1		 sub	 eax, ecx
  00829	50		 push	 eax
  0082a	8d 55 d4	 lea	 edx, DWORD PTR _buf$[ebp]
  0082d	52		 push	 edx
  0082e	6a 01		 push	 1
  00830	e8 00 00 00 00	 call	 _SendNetXCmd
  00835	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SendNameAn:

; 1248 : }

  00838	5f		 pop	 edi
  00839	5e		 pop	 esi
  0083a	5b		 pop	 ebx
  0083b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0083e	33 cd		 xor	 ecx, ebp
  00840	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00845	8b e5		 mov	 esp, ebp
  00847	5d		 pop	 ebp
  00848	c3		 ret	 0
_SendNameAndColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _SetPlayerName
_TEXT	SEGMENT
_buf$1 = -4						; size = 2
_playernum$ = 8						; size = 4
_newname$ = 12						; size = 4
_SetPlayerName PROC					; COMDAT

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1056 : 	if (IsNameGood(newname, playernum))

  00009	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _newname$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _IsNameGood
  00016	83 c4 08	 add	 esp, 8
  00019	85 c0		 test	 eax, eax
  0001b	74 6b		 je	 SHORT $LN2@SetPlayerN

; 1057 : 	{
; 1058 : 		if (strcasecmp(newname, player_names[playernum]) != 0)

  0001d	6b 45 08 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00021	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _newname$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 _stricmp
  00030	83 c4 08	 add	 esp, 8
  00033	85 c0		 test	 eax, eax
  00035	74 4f		 je	 SHORT $LN4@SetPlayerN

; 1059 : 		{
; 1060 : 			if (gamestate != GS_INTRO && gamestate != GS_INTRO2)

  00037	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _gamestate, 5
  0003e	74 2f		 je	 SHORT $LN5@SetPlayerN
  00040	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _gamestate, 6
  00047	74 26		 je	 SHORT $LN5@SetPlayerN

; 1061 : 				CONS_Printf(text[RENAMED_TO],

  00049	8b 45 0c	 mov	 eax, DWORD PTR _newname$[ebp]
  0004c	50		 push	 eax
  0004d	6b 4d 08 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  00051	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00057	51		 push	 ecx
  00058	ba 04 00 00 00	 mov	 edx, 4
  0005d	6b c2 59	 imul	 eax, edx, 89
  00060	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 _CONS_Printf
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SetPlayerN:

; 1062 : 					player_names[playernum], newname);
; 1063 : 			strcpy(player_names[playernum], newname);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _newname$[ebp]
  00072	50		 push	 eax
  00073	6b 4d 08 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  00077	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _strcpy
  00083	83 c4 08	 add	 esp, 8
$LN4@SetPlayerN:

; 1064 : 		}
; 1065 : 	}

  00086	eb 5c		 jmp	 SHORT $LN6@SetPlayerN
$LN2@SetPlayerN:

; 1066 : 	else
; 1067 : 	{
; 1068 : 		CONS_Printf(text[ILLEGALNAMECMD], playernum+1);

  00088	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	50		 push	 eax
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	6b d1 5a	 imul	 edx, ecx, 90
  00097	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _CONS_Printf
  000a3	83 c4 08	 add	 esp, 8

; 1069 : 		if (server && netgame)

  000a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000ad	74 35		 je	 SHORT $LN6@SetPlayerN
  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000b6	74 2c		 je	 SHORT $LN6@SetPlayerN

; 1070 : 		{
; 1071 : 			XBOXSTATIC UINT8 buf[2];
; 1072 : 
; 1073 : 			buf[0] = (UINT8)playernum;

  000b8	b8 01 00 00 00	 mov	 eax, 1
  000bd	6b c8 00	 imul	 ecx, eax, 0
  000c0	8a 55 08	 mov	 dl, BYTE PTR _playernum$[ebp]
  000c3	88 54 0d fc	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 1074 : 			buf[1] = KICK_MSG_CON_FAIL;

  000c7	b8 01 00 00 00	 mov	 eax, 1
  000cc	c1 e0 00	 shl	 eax, 0
  000cf	c6 44 05 fc 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 1075 : 			SendNetXCmd(XD_KICK, &buf, 2);

  000d4	6a 02		 push	 2
  000d6	8d 45 fc	 lea	 eax, DWORD PTR _buf$1[ebp]
  000d9	50		 push	 eax
  000da	6a 03		 push	 3
  000dc	e8 00 00 00 00	 call	 _SendNetXCmd
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@SetPlayerN:

; 1076 : 		}
; 1077 : 	}
; 1078 : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
_SetPlayerName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _CleanupPlayerName
_TEXT	SEGMENT
_namefailed$ = -20					; size = 4
_i$ = -16						; size = 4
_tmpname$ = -12						; size = 4
_p$ = -8						; size = 4
_buf$ = -4						; size = 4
_playernum$ = 8						; size = 4
_newname$ = 12						; size = 4
_CleanupPlayerName PROC					; COMDAT

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 955  : 	char *buf;
; 956  : 	char *p;
; 957  : 	char *tmpname = NULL;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _tmpname$[ebp], 0

; 958  : 	INT32 i;
; 959  : 	boolean namefailed = true;

  00010	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _namefailed$[ebp], 1

; 960  : 
; 961  : 	buf = Z_StrDup(newname);

  00017	8b 45 0c	 mov	 eax, DWORD PTR _newname$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _Z_StrDup
  00020	83 c4 04	 add	 esp, 4
  00023	89 45 fc	 mov	 DWORD PTR _buf$[ebp], eax
$LN4@CleanupPla:

; 962  : 
; 963  : 	do
; 964  : 	{
; 965  : 		p = buf;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
  00029	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
$LN5@CleanupPla:

; 966  : 
; 967  : 		while (*p == ' ')

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0002f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00032	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00035	75 0b		 jne	 SHORT $LN6@CleanupPla

; 968  : 			p++; // remove leading spaces

  00037	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
  00040	eb ea		 jmp	 SHORT $LN5@CleanupPla
$LN6@CleanupPla:

; 969  : 
; 970  : 		if (strlen(p) == 0)

  00042	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _strlen
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 c0		 test	 eax, eax
  00050	75 05		 jne	 SHORT $LN14@CleanupPla

; 971  : 			break; // empty names not allowed

  00052	e9 44 01 00 00	 jmp	 $LN3@CleanupPla
$LN14@CleanupPla:

; 972  : 
; 973  : 		if (isdigit(*p))

  00057	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0005a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _isdigit
  00063	83 c4 04	 add	 esp, 4
  00066	85 c0		 test	 eax, eax
  00068	74 05		 je	 SHORT $LN15@CleanupPla

; 974  : 			break; // names starting with digits not allowed

  0006a	e9 2c 01 00 00	 jmp	 $LN3@CleanupPla
$LN15@CleanupPla:

; 975  : 
; 976  : 		if (*p == '@' || *p == '~')

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00072	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00075	83 f9 40	 cmp	 ecx, 64			; 00000040H
  00078	74 0b		 je	 SHORT $LN17@CleanupPla
  0007a	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0007d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00080	83 f9 7e	 cmp	 ecx, 126		; 0000007eH
  00083	75 05		 jne	 SHORT $LN16@CleanupPla
$LN17@CleanupPla:

; 977  : 			break; // names that start with @ or ~ (admin symbols) not allowed

  00085	e9 11 01 00 00	 jmp	 $LN3@CleanupPla
$LN16@CleanupPla:

; 978  : 
; 979  : 		tmpname = p;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _tmpname$[ebp], eax

; 980  : 
; 981  : 		// Remove trailing spaces.
; 982  : 		p = &tmpname[strlen(tmpname)-1]; // last character

  00090	8b 45 f4	 mov	 eax, DWORD PTR _tmpname$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _strlen
  00099	83 c4 04	 add	 esp, 4
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR _tmpname$[ebp]
  0009f	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  000a3	89 55 f8	 mov	 DWORD PTR _p$[ebp], edx
$LN7@CleanupPla:

; 983  : 		while (*p == ' ' && p >= tmpname)

  000a6	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000a9	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000ac	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000af	75 19		 jne	 SHORT $LN8@CleanupPla
  000b1	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000b4	3b 45 f4	 cmp	 eax, DWORD PTR _tmpname$[ebp]
  000b7	72 11		 jb	 SHORT $LN8@CleanupPla

; 984  : 		{
; 985  : 			*p = '\0';

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000bc	c6 00 00	 mov	 BYTE PTR [eax], 0

; 986  : 			p--;

  000bf	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000c2	83 e8 01	 sub	 eax, 1
  000c5	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 987  : 		}

  000c8	eb dc		 jmp	 SHORT $LN7@CleanupPla
$LN8@CleanupPla:

; 988  : 
; 989  : 		if (strlen(tmpname) == 0)

  000ca	8b 45 f4	 mov	 eax, DWORD PTR _tmpname$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _strlen
  000d3	83 c4 04	 add	 esp, 4
  000d6	85 c0		 test	 eax, eax
  000d8	75 05		 jne	 SHORT $LN18@CleanupPla

; 990  : 			break; // another case of an empty name

  000da	e9 bc 00 00 00	 jmp	 $LN3@CleanupPla
$LN18@CleanupPla:

; 991  : 
; 992  : 		// Truncate name if it's too long (max MAXPLAYERNAME chars
; 993  : 		// excluding NUL).
; 994  : 		if (strlen(tmpname) > MAXPLAYERNAME)

  000df	8b 45 f4	 mov	 eax, DWORD PTR _tmpname$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _strlen
  000e8	83 c4 04	 add	 esp, 4
  000eb	83 f8 15	 cmp	 eax, 21			; 00000015H
  000ee	76 0f		 jbe	 SHORT $LN19@CleanupPla

; 995  : 			tmpname[MAXPLAYERNAME] = '\0';

  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	6b c8 15	 imul	 ecx, eax, 21
  000f8	8b 55 f4	 mov	 edx, DWORD PTR _tmpname$[ebp]
  000fb	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0
$LN19@CleanupPla:

; 996  : 
; 997  : 		// Remove trailing spaces again.
; 998  : 		p = &tmpname[strlen(tmpname)-1]; // last character

  000ff	8b 45 f4	 mov	 eax, DWORD PTR _tmpname$[ebp]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _strlen
  00108	83 c4 04	 add	 esp, 4
  0010b	8b 4d f4	 mov	 ecx, DWORD PTR _tmpname$[ebp]
  0010e	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  00112	89 55 f8	 mov	 DWORD PTR _p$[ebp], edx
$LN9@CleanupPla:

; 999  : 		while (*p == ' ' && p >= tmpname)

  00115	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00118	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0011b	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0011e	75 19		 jne	 SHORT $LN10@CleanupPla
  00120	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00123	3b 45 f4	 cmp	 eax, DWORD PTR _tmpname$[ebp]
  00126	72 11		 jb	 SHORT $LN10@CleanupPla

; 1000 : 		{
; 1001 : 			*p = '\0';

  00128	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0012b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1002 : 			p--;

  0012e	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00131	83 e8 01	 sub	 eax, 1
  00134	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 1003 : 		}

  00137	eb dc		 jmp	 SHORT $LN9@CleanupPla
$LN10@CleanupPla:

; 1004 : 
; 1005 : 		// no stealing another player's name
; 1006 : 		for (i = 0; i < MAXPLAYERS; i++)

  00139	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00140	eb 09		 jmp	 SHORT $LN13@CleanupPla
$LN11@CleanupPla:
  00142	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00145	83 c0 01	 add	 eax, 1
  00148	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN13@CleanupPla:
  0014b	83 7d f0 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0014f	7d 33		 jge	 SHORT $LN12@CleanupPla

; 1007 : 		{
; 1008 : 			if (i != playernum && playeringame[i]
; 1009 : 				&& strcasecmp(tmpname, player_names[i]) == 0)

  00151	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00154	3b 45 08	 cmp	 eax, DWORD PTR _playernum$[ebp]
  00157	74 29		 je	 SHORT $LN20@CleanupPla
  00159	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0015c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00164	74 1c		 je	 SHORT $LN20@CleanupPla
  00166	6b 45 f0 16	 imul	 eax, DWORD PTR _i$[ebp], 22
  0016a	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0016f	50		 push	 eax
  00170	8b 4d f4	 mov	 ecx, DWORD PTR _tmpname$[ebp]
  00173	51		 push	 ecx
  00174	e8 00 00 00 00	 call	 _stricmp
  00179	83 c4 08	 add	 esp, 8
  0017c	85 c0		 test	 eax, eax
  0017e	75 02		 jne	 SHORT $LN20@CleanupPla

; 1010 : 			{
; 1011 : 				break;

  00180	eb 02		 jmp	 SHORT $LN12@CleanupPla
$LN20@CleanupPla:

; 1012 : 			}
; 1013 : 		}

  00182	eb be		 jmp	 SHORT $LN11@CleanupPla
$LN12@CleanupPla:

; 1014 : 
; 1015 : 		if (i < MAXPLAYERS)

  00184	83 7d f0 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00188	7d 02		 jge	 SHORT $LN21@CleanupPla

; 1016 : 			break;

  0018a	eb 0f		 jmp	 SHORT $LN3@CleanupPla
$LN21@CleanupPla:

; 1017 : 
; 1018 : 		// name is okay then
; 1019 : 		namefailed = false;

  0018c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _namefailed$[ebp], 0

; 1020 : 	} while (0);

  00193	33 c0		 xor	 eax, eax
  00195	0f 85 8b fe ff
	ff		 jne	 $LN4@CleanupPla
$LN3@CleanupPla:

; 1021 : 
; 1022 : 	if (namefailed)

  0019b	83 7d ec 00	 cmp	 DWORD PTR _namefailed$[ebp], 0
  0019f	74 0c		 je	 SHORT $LN22@CleanupPla

; 1023 : 		tmpname = player_names[playernum];

  001a1	6b 45 08 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  001a5	05 00 00 00 00	 add	 eax, OFFSET _player_names
  001aa	89 45 f4	 mov	 DWORD PTR _tmpname$[ebp], eax
$LN22@CleanupPla:

; 1024 : 
; 1025 : 	// set consvars whether namefailed or not, because even if it succeeded,
; 1026 : 	// spaces may have been removed
; 1027 : 	if (playernum == consoleplayer)

  001ad	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001b0	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  001b6	75 13		 jne	 SHORT $LN23@CleanupPla

; 1028 : 		CV_StealthSet(&cv_playername, tmpname);

  001b8	8b 45 f4	 mov	 eax, DWORD PTR _tmpname$[ebp]
  001bb	50		 push	 eax
  001bc	68 00 00 00 00	 push	 OFFSET _cv_playername
  001c1	e8 00 00 00 00	 call	 _CV_StealthSet
  001c6	83 c4 08	 add	 esp, 8
  001c9	eb 2b		 jmp	 SHORT $LN25@CleanupPla
$LN23@CleanupPla:

; 1029 : 	else if (playernum == secondarydisplayplayer
; 1030 : 		|| (!netgame && playernum == 1))

  001cb	8b 45 08	 mov	 eax, DWORD PTR _playernum$[ebp]
  001ce	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  001d4	74 0f		 je	 SHORT $LN27@CleanupPla
  001d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  001dd	75 17		 jne	 SHORT $LN25@CleanupPla
  001df	83 7d 08 01	 cmp	 DWORD PTR _playernum$[ebp], 1
  001e3	75 11		 jne	 SHORT $LN25@CleanupPla
$LN27@CleanupPla:

; 1031 : 	{
; 1032 : 		CV_StealthSet(&cv_playername2, tmpname);

  001e5	8b 45 f4	 mov	 eax, DWORD PTR _tmpname$[ebp]
  001e8	50		 push	 eax
  001e9	68 00 00 00 00	 push	 OFFSET _cv_playername2
  001ee	e8 00 00 00 00	 call	 _CV_StealthSet
  001f3	83 c4 08	 add	 esp, 8
$LN25@CleanupPla:

; 1033 : 	}
; 1034 : 	else I_Assert(((void)"CleanupPlayerName used on non-local player", 0));
; 1035 : 
; 1036 : 	Z_Free(buf);

  001f6	8b 45 fc	 mov	 eax, DWORD PTR _buf$[ebp]
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 _Z_Free
  001ff	83 c4 04	 add	 esp, 4

; 1037 : }

  00202	5f		 pop	 edi
  00203	5e		 pop	 esi
  00204	5b		 pop	 ebx
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c3		 ret	 0
_CleanupPlayerName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _IsNameGood
_TEXT	SEGMENT
_len$1 = -8						; size = 4
_ix$ = -4						; size = 4
_name$ = 8						; size = 4
_playernum$ = 12					; size = 4
_IsNameGood PROC					; COMDAT

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 879  : 	INT32 ix;
; 880  : 
; 881  : 	if (strlen(name) == 0 || strlen(name) > MAXPLAYERNAME)

  00009	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	85 c0		 test	 eax, eax
  00017	74 11		 je	 SHORT $LN9@IsNameGood
  00019	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _strlen
  00022	83 c4 04	 add	 esp, 4
  00025	83 f8 15	 cmp	 eax, 21			; 00000015H
  00028	76 07		 jbe	 SHORT $LN8@IsNameGood
$LN9@IsNameGood:

; 882  : 		return false; // Empty or too long.

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 a9 01 00 00	 jmp	 $LN1@IsNameGood
$LN8@IsNameGood:

; 883  : 	if (name[0] == ' ' || name[strlen(name)-1] == ' ')

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  0003c	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00040	83 f8 20	 cmp	 eax, 32			; 00000020H
  00043	74 19		 je	 SHORT $LN11@IsNameGood
  00045	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _strlen
  0004e	83 c4 04	 add	 esp, 4
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00054	0f be 54 01 ff	 movsx	 edx, BYTE PTR [ecx+eax-1]
  00059	83 fa 20	 cmp	 edx, 32			; 00000020H
  0005c	75 07		 jne	 SHORT $LN10@IsNameGood
$LN11@IsNameGood:

; 884  : 		return false; // Starts or ends with a space.

  0005e	33 c0		 xor	 eax, eax
  00060	e9 75 01 00 00	 jmp	 $LN1@IsNameGood
$LN10@IsNameGood:

; 885  : 	if (isdigit(name[0]))

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	6b c8 00	 imul	 ecx, eax, 0
  0006d	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00070	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _isdigit
  0007a	83 c4 04	 add	 esp, 4
  0007d	85 c0		 test	 eax, eax
  0007f	74 07		 je	 SHORT $LN12@IsNameGood

; 886  : 		return false; // Starts with a digit.

  00081	33 c0		 xor	 eax, eax
  00083	e9 52 01 00 00	 jmp	 $LN1@IsNameGood
$LN12@IsNameGood:

; 887  : 	if (name[0] == '@' || name[0] == '~')

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	6b c8 00	 imul	 ecx, eax, 0
  00090	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00093	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00097	83 f8 40	 cmp	 eax, 64			; 00000040H
  0009a	74 14		 je	 SHORT $LN14@IsNameGood
  0009c	b8 01 00 00 00	 mov	 eax, 1
  000a1	6b c8 00	 imul	 ecx, eax, 0
  000a4	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  000a7	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  000ab	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  000ae	75 07		 jne	 SHORT $LN13@IsNameGood
$LN14@IsNameGood:

; 888  : 		return false; // Starts with an admin symbol.

  000b0	33 c0		 xor	 eax, eax
  000b2	e9 23 01 00 00	 jmp	 $LN1@IsNameGood
$LN13@IsNameGood:

; 889  : 
; 890  : 	// Check if it contains a non-printing character.
; 891  : 	// Note: ANSI C isprint() considers space a printing character.
; 892  : 	// Also don't allow semicolons, since they are used as
; 893  : 	// console command separators.
; 894  : 	for (ix = 0; name[ix] != '\0'; ix++)

  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ix$[ebp], 0
  000be	eb 09		 jmp	 SHORT $LN4@IsNameGood
$LN2@IsNameGood:
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _ix$[ebp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax
$LN4@IsNameGood:
  000c9	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000cc	03 45 fc	 add	 eax, DWORD PTR _ix$[ebp]
  000cf	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000d2	85 c9		 test	 ecx, ecx
  000d4	74 2d		 je	 SHORT $LN3@IsNameGood

; 895  : 		if (!isprint(name[ix]) || name[ix] == ';')

  000d6	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000d9	03 45 fc	 add	 eax, DWORD PTR _ix$[ebp]
  000dc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 _isprint
  000e5	83 c4 04	 add	 esp, 4
  000e8	85 c0		 test	 eax, eax
  000ea	74 0e		 je	 SHORT $LN16@IsNameGood
  000ec	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000ef	03 45 fc	 add	 eax, DWORD PTR _ix$[ebp]
  000f2	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000f5	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  000f8	75 07		 jne	 SHORT $LN15@IsNameGood
$LN16@IsNameGood:

; 896  : 			return false;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 d9 00 00 00	 jmp	 $LN1@IsNameGood
$LN15@IsNameGood:
  00101	eb bd		 jmp	 SHORT $LN2@IsNameGood
$LN3@IsNameGood:

; 897  : 
; 898  : 	// Check if a player is currently using the name, case-insensitively.
; 899  : 	for (ix = 0; ix < MAXPLAYERS; ix++)

  00103	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ix$[ebp], 0
  0010a	eb 09		 jmp	 SHORT $LN7@IsNameGood
$LN5@IsNameGood:
  0010c	8b 45 fc	 mov	 eax, DWORD PTR _ix$[ebp]
  0010f	83 c0 01	 add	 eax, 1
  00112	89 45 fc	 mov	 DWORD PTR _ix$[ebp], eax
$LN7@IsNameGood:
  00115	83 7d fc 20	 cmp	 DWORD PTR _ix$[ebp], 32	; 00000020H
  00119	0f 8d b6 00 00
	00		 jge	 $LN6@IsNameGood

; 900  : 	{
; 901  : 		if (ix != playernum && playeringame[ix]
; 902  : 			&& strcasecmp(name, player_names[ix]) == 0)

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _ix$[ebp]
  00122	3b 45 0c	 cmp	 eax, DWORD PTR _playernum$[ebp]
  00125	0f 84 a5 00 00
	00		 je	 $LN22@IsNameGood
  0012b	8b 45 fc	 mov	 eax, DWORD PTR _ix$[ebp]
  0012e	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00136	0f 84 94 00 00
	00		 je	 $LN22@IsNameGood
  0013c	6b 45 fc 16	 imul	 eax, DWORD PTR _ix$[ebp], 22
  00140	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00145	50		 push	 eax
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 _stricmp
  0014f	83 c4 08	 add	 esp, 8
  00152	85 c0		 test	 eax, eax
  00154	75 7a		 jne	 SHORT $LN22@IsNameGood

; 903  : 		{
; 904  : 			// We shouldn't kick people out just because
; 905  : 			// they joined the game with the same name
; 906  : 			// as someone else -- modify the name instead.
; 907  : 			size_t len = strlen(name);

  00156	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _strlen
  0015f	83 c4 04	 add	 esp, 4
  00162	89 45 f8	 mov	 DWORD PTR _len$1[ebp], eax

; 908  : 
; 909  : 			// Recursion!
; 910  : 			// Slowly strip characters off the end of the
; 911  : 			// name until we no longer have a duplicate.
; 912  : 			if (len > 1)

  00165	83 7d f8 01	 cmp	 DWORD PTR _len$1[ebp], 1
  00169	76 24		 jbe	 SHORT $LN18@IsNameGood

; 913  : 			{
; 914  : 				name[len-1] = '\0';

  0016b	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0016e	03 45 f8	 add	 eax, DWORD PTR _len$1[ebp]
  00171	c6 40 ff 00	 mov	 BYTE PTR [eax-1], 0

; 915  : 				if (!IsNameGood (name, playernum))

  00175	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00178	50		 push	 eax
  00179	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 _IsNameGood
  00182	83 c4 08	 add	 esp, 8
  00185	85 c0		 test	 eax, eax
  00187	75 04		 jne	 SHORT $LN20@IsNameGood

; 916  : 					return false;

  00189	33 c0		 xor	 eax, eax
  0018b	eb 4d		 jmp	 SHORT $LN1@IsNameGood
$LN20@IsNameGood:

; 917  : 			}

  0018d	eb 41		 jmp	 SHORT $LN22@IsNameGood
$LN18@IsNameGood:

; 918  : 			else if (len == 1) // Agh!

  0018f	83 7d f8 01	 cmp	 DWORD PTR _len$1[ebp], 1
  00193	75 37		 jne	 SHORT $LN21@IsNameGood

; 919  : 			{
; 920  : 				// Last ditch effort...
; 921  : 				sprintf(name, "%d", M_Random() & 7);

  00195	e8 00 00 00 00	 call	 _M_Random
  0019a	0f b6 c0	 movzx	 eax, al
  0019d	83 e0 07	 and	 eax, 7
  001a0	50		 push	 eax
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 _sprintf
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 				if (!IsNameGood (name, playernum))

  001b2	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  001b5	50		 push	 eax
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  001b9	51		 push	 ecx
  001ba	e8 00 00 00 00	 call	 _IsNameGood
  001bf	83 c4 08	 add	 esp, 8
  001c2	85 c0		 test	 eax, eax
  001c4	75 04		 jne	 SHORT $LN23@IsNameGood

; 923  : 					return false;

  001c6	33 c0		 xor	 eax, eax
  001c8	eb 10		 jmp	 SHORT $LN1@IsNameGood
$LN23@IsNameGood:

; 924  : 			}

  001ca	eb 04		 jmp	 SHORT $LN22@IsNameGood
$LN21@IsNameGood:

; 925  : 			else
; 926  : 				return false;

  001cc	33 c0		 xor	 eax, eax
  001ce	eb 0a		 jmp	 SHORT $LN1@IsNameGood
$LN22@IsNameGood:

; 927  : 		}
; 928  : 	}

  001d0	e9 37 ff ff ff	 jmp	 $LN5@IsNameGood
$LN6@IsNameGood:

; 929  : 
; 930  : 	return true;

  001d5	b8 01 00 00 00	 mov	 eax, 1
$LN1@IsNameGood:

; 931  : }

  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c3		 ret	 0
_IsNameGood ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _SendWeaponPref
_TEXT	SEGMENT
_buf$ = -1						; size = 1
_SendWeaponPref PROC					; COMDAT

; 1569 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1570 : 	XBOXSTATIC SINT8 buf[1];
; 1571 : 
; 1572 : 	buf[0] = (SINT8)cv_autoaim.value;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8a 15 14 00 00
	00		 mov	 dl, BYTE PTR _cv_autoaim+20
  00017	88 54 0d ff	 mov	 BYTE PTR _buf$[ebp+ecx], dl

; 1573 : 	SendNetXCmd(XD_WEAPONPREF, buf, 1);

  0001b	6a 01		 push	 1
  0001d	8d 45 ff	 lea	 eax, DWORD PTR _buf$[ebp]
  00020	50		 push	 eax
  00021	6a 02		 push	 2
  00023	e8 00 00 00 00	 call	 _SendNetXCmd
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1574 : 
; 1575 : 	if (splitscreen)

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00032	74 22		 je	 SHORT $LN2@SendWeapon

; 1576 : 	{
; 1577 : 		buf[0] = (SINT8)cv_autoaim2.value;

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	6b c8 00	 imul	 ecx, eax, 0
  0003c	8a 15 14 00 00
	00		 mov	 dl, BYTE PTR _cv_autoaim2+20
  00042	88 54 0d ff	 mov	 BYTE PTR _buf$[ebp+ecx], dl

; 1578 : 		SendNetXCmd2(XD_WEAPONPREF, buf, 1);

  00046	6a 01		 push	 1
  00048	8d 45 ff	 lea	 eax, DWORD PTR _buf$[ebp]
  0004b	50		 push	 eax
  0004c	6a 02		 push	 2
  0004e	e8 00 00 00 00	 call	 _SendNetXCmd2
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendWeapon:

; 1579 : 	}
; 1580 : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_SendWeaponPref ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Togglemodified_f
_TEXT	SEGMENT
tv65 = -68						; size = 4
_Command_Togglemodified_f PROC				; COMDAT

; 4576 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4577 : 	modifiedgame = !modifiedgame;

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00010	75 09		 jne	 SHORT $LN3@Command_To
  00012	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@Command_To
$LN3@Command_To:
  0001b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@Command_To:
  00022	8b 45 bc	 mov	 eax, DWORD PTR tv65[ebp]
  00025	a3 00 00 00 00	 mov	 DWORD PTR _modifiedgame, eax

; 4578 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_Command_Togglemodified_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Isgamemodified_f
_TEXT	SEGMENT
_Command_Isgamemodified_f PROC				; COMDAT

; 4565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4566 : 	if (savemoddata)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00010	74 21		 je	 SHORT $LN2@Command_Is

; 4567 : 		CONS_Printf("%s", text[GAMEMODIFIEDHELP1]);

  00012	b8 04 00 00 00	 mov	 eax, 4
  00017	69 c8 c1 00 00
	00		 imul	 ecx, eax, 193
  0001d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00023	52		 push	 edx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00029	e8 00 00 00 00	 call	 _CONS_Printf
  0002e	83 c4 08	 add	 esp, 8
  00031	eb 49		 jmp	 SHORT $LN5@Command_Is
$LN2@Command_Is:

; 4568 : 	else if (modifiedgame)

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  0003a	74 21		 je	 SHORT $LN4@Command_Is

; 4569 : 		CONS_Printf("%s", text[GAMEMODIFIEDHELP2]);

  0003c	b8 04 00 00 00	 mov	 eax, 4
  00041	69 c8 c2 00 00
	00		 imul	 ecx, eax, 194
  00047	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0004d	52		 push	 edx
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00053	e8 00 00 00 00	 call	 _CONS_Printf
  00058	83 c4 08	 add	 esp, 8
  0005b	eb 1f		 jmp	 SHORT $LN5@Command_Is
$LN4@Command_Is:

; 4570 : 	else
; 4571 : 		CONS_Printf("%s", text[GAMEMODIFIEDHELP3]);

  0005d	b8 04 00 00 00	 mov	 eax, 4
  00062	69 c8 c3 00 00
	00		 imul	 ecx, eax, 195
  00068	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0006e	52		 push	 edx
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00074	e8 00 00 00 00	 call	 _CONS_Printf
  00079	83 c4 08	 add	 esp, 8
$LN5@Command_Is:

; 4572 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_Command_Isgamemodified_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ShowTime_f
_TEXT	SEGMENT
tv86 = -72						; size = 4
tv81 = -68						; size = 4
_Command_ShowTime_f PROC				; COMDAT

; 4802 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4803 : 	if (!(netgame || multiplayer))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	75 2a		 jne	 SHORT $LN2@Command_Sh
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00019	75 21		 jne	 SHORT $LN2@Command_Sh

; 4804 : 	{
; 4805 : 		CONS_Printf("%s", text[NETGAMEONLY]);

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	69 c8 fd 00 00
	00		 imul	 ecx, eax, 253
  00026	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002c	52		 push	 edx
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00032	e8 00 00 00 00	 call	 _CONS_Printf
  00037	83 c4 08	 add	 esp, 8

; 4806 : 		return;

  0003a	eb 73		 jmp	 SHORT $LN1@Command_Sh
$LN2@Command_Sh:

; 4807 : 	}
; 4808 : 
; 4809 : 	CONS_Printf(text[SHOWTIMECMD], (double)leveltime/TICRATE, (double)timelimitintics/TICRATE);

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR _timelimitintics
  00041	89 45 bc	 mov	 DWORD PTR tv81[ebp], eax
  00044	f2 0f 2a 45 bc	 cvtsi2sd xmm0, DWORD PTR tv81[ebp]
  00049	8b 4d bc	 mov	 ecx, DWORD PTR tv81[ebp]
  0004c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004f	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00058	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4041800000000000
  00060	83 ec 08	 sub	 esp, 8
  00063	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _leveltime
  0006e	89 55 b8	 mov	 DWORD PTR tv86[ebp], edx
  00071	f2 0f 2a 45 b8	 cvtsi2sd xmm0, DWORD PTR tv86[ebp]
  00076	8b 45 b8	 mov	 eax, DWORD PTR tv86[ebp]
  00079	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007c	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00085	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4041800000000000
  0008d	83 ec 08	 sub	 esp, 8
  00090	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00095	b9 04 00 00 00	 mov	 ecx, 4
  0009a	69 d1 ca 00 00
	00		 imul	 edx, ecx, 202
  000a0	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _CONS_Printf
  000ac	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Command_Sh:

; 4810 : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
_Command_ShowTime_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ShowScores_f
_TEXT	SEGMENT
_i$ = -1						; size = 1
_Command_ShowScores_f PROC				; COMDAT

; 4783 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4784 : 	UINT8 i;
; 4785 : 
; 4786 : 	if (!(netgame || multiplayer))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	75 2d		 jne	 SHORT $LN5@Command_Sh
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00019	75 24		 jne	 SHORT $LN5@Command_Sh

; 4787 : 	{
; 4788 : 		CONS_Printf("%s", text[NETGAMEONLY]);

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	69 c8 fd 00 00
	00		 imul	 ecx, eax, 253
  00026	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002c	52		 push	 edx
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00032	e8 00 00 00 00	 call	 _CONS_Printf
  00037	83 c4 08	 add	 esp, 8

; 4789 : 		return;

  0003a	e9 80 00 00 00	 jmp	 $LN1@Command_Sh
$LN5@Command_Sh:

; 4790 : 	}
; 4791 : 
; 4792 : 	for (i = 0; i < MAXPLAYERS; i++)

  0003f	c6 45 ff 00	 mov	 BYTE PTR _i$[ebp], 0
  00043	eb 08		 jmp	 SHORT $LN4@Command_Sh
$LN2@Command_Sh:
  00045	8a 45 ff	 mov	 al, BYTE PTR _i$[ebp]
  00048	04 01		 add	 al, 1
  0004a	88 45 ff	 mov	 BYTE PTR _i$[ebp], al
$LN4@Command_Sh:
  0004d	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  00051	83 f8 20	 cmp	 eax, 32			; 00000020H
  00054	7d 49		 jge	 SHORT $LN3@Command_Sh

; 4793 : 	{
; 4794 : 		if (playeringame[i])

  00056	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  0005a	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00062	74 39		 je	 SHORT $LN6@Command_Sh

; 4795 : 			CONS_Printf(text[SHOWSCORESCMD], player_names[i], players[i].score);

  00064	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  00068	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0006e	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+188]
  00074	52		 push	 edx
  00075	0f b6 45 ff	 movzx	 eax, BYTE PTR _i$[ebp]
  00079	6b c8 16	 imul	 ecx, eax, 22
  0007c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00082	51		 push	 ecx
  00083	ba 04 00 00 00	 mov	 edx, 4
  00088	69 c2 c8 00 00
	00		 imul	 eax, edx, 200
  0008e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 _CONS_Printf
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Command_Sh:

; 4796 : 	}

  0009d	eb a6		 jmp	 SHORT $LN2@Command_Sh
$LN3@Command_Sh:

; 4797 : 	CONS_Printf(text[SHOWSCORES_POINTLIMIT], cv_pointlimit.value);

  0009f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_pointlimit+20
  000a4	50		 push	 eax
  000a5	b9 04 00 00 00	 mov	 ecx, 4
  000aa	69 d1 c9 00 00
	00		 imul	 edx, ecx, 201
  000b0	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _CONS_Printf
  000bc	83 c4 08	 add	 esp, 8
$LN1@Command_Sh:

; 4798 : 
; 4799 : }

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
_Command_ShowScores_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_MotD_f
_TEXT	SEGMENT
tv74 = -348						; size = 4
$T1 = -344						; size = 4
_buf$2 = -276						; size = 2
_tmp_i$3 = -272						; size = 4
_kick$ = -268						; size = 4
_i$ = -264						; size = 4
_mymotd$ = -260						; size = 254
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_MotD_f PROC					; COMDAT

; 3090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3091 : 	XBOXSTATIC char mymotd[sizeof(motd)];
; 3092 : 	INT32 i;
; 3093 : 	boolean kick = false;

  00016	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kick$[ebp], 0

; 3094 : 
; 3095 : 	READSTRINGN(*cp, mymotd, sizeof(mymotd));

  00020	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmp_i$3[ebp], 0
  0002a	eb 0f		 jmp	 SHORT $LN4@Got_MotD_f
$LN2@Got_MotD_f:
  0002c	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _tmp_i$3[ebp], eax
$LN4@Got_MotD_f:
  0003b	81 bd f0 fe ff
	ff fe 00 00 00	 cmp	 DWORD PTR _tmp_i$3[ebp], 254 ; 000000feH
  00045	73 40		 jae	 SHORT $LN3@Got_MotD_f
  00047	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _tmp_i$3[ebp]
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	88 84 15 fc fe
	ff ff		 mov	 BYTE PTR _mymotd$[ebp+edx], al
  0005b	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _tmp_i$3[ebp]
  00061	0f be 94 0d fc
	fe ff ff	 movsx	 edx, BYTE PTR _mymotd$[ebp+ecx]
  00069	89 95 a4 fe ff
	ff		 mov	 DWORD PTR tv74[ebp], edx
  0006f	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 c1 01	 add	 ecx, 1
  00077	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  0007a	89 0a		 mov	 DWORD PTR [edx], ecx
  0007c	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR tv74[ebp], 0
  00083	74 02		 je	 SHORT $LN3@Got_MotD_f
  00085	eb a5		 jmp	 SHORT $LN2@Got_MotD_f
$LN3@Got_MotD_f:
  00087	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  0008d	89 85 a8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00093	81 bd a8 fe ff
	ff fe 00 00 00	 cmp	 DWORD PTR $T1[ebp], 254	; 000000feH
  0009d	73 02		 jae	 SHORT $LN15@Got_MotD_f
  0009f	eb 06		 jmp	 SHORT $LN16@Got_MotD_f
$LN15@Got_MotD_f:
  000a1	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000a6	90		 npad	 1
$LN16@Got_MotD_f:
  000a7	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  000ad	c6 84 0d fc fe
	ff ff 00	 mov	 BYTE PTR _mymotd$[ebp+ecx], 0

; 3096 : 
; 3097 : 	// Disallow non-printing characters and semicolons.
; 3098 : 	for (i = 0; mymotd[i] != '\0'; i++)

  000b5	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  000bf	eb 0f		 jmp	 SHORT $LN7@Got_MotD_f
$LN5@Got_MotD_f:
  000c1	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000c7	83 c0 01	 add	 eax, 1
  000ca	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN7@Got_MotD_f:
  000d0	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000d6	0f be 8c 05 fc
	fe ff ff	 movsx	 ecx, BYTE PTR _mymotd$[ebp+eax]
  000de	85 c9		 test	 ecx, ecx
  000e0	74 3a		 je	 SHORT $LN6@Got_MotD_f

; 3099 : 		if (!isprint(mymotd[i]) || mymotd[i] == ';')

  000e2	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000e8	0f be 8c 05 fc
	fe ff ff	 movsx	 ecx, BYTE PTR _mymotd$[ebp+eax]
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 _isprint
  000f6	83 c4 04	 add	 esp, 4
  000f9	85 c0		 test	 eax, eax
  000fb	74 13		 je	 SHORT $LN9@Got_MotD_f
  000fd	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00103	0f be 8c 05 fc
	fe ff ff	 movsx	 ecx, BYTE PTR _mymotd$[ebp+eax]
  0010b	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0010e	75 0a		 jne	 SHORT $LN8@Got_MotD_f
$LN9@Got_MotD_f:

; 3100 : 			kick = true;

  00110	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _kick$[ebp], 1
$LN8@Got_MotD_f:
  0011a	eb a5		 jmp	 SHORT $LN5@Got_MotD_f
$LN6@Got_MotD_f:

; 3101 : 
; 3102 : 	if ((playernum != serverplayer && playernum != adminplayer) || kick)

  0011c	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0011f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00125	74 0b		 je	 SHORT $LN12@Got_MotD_f
  00127	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0012a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00130	75 09		 jne	 SHORT $LN11@Got_MotD_f
$LN12@Got_MotD_f:
  00132	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _kick$[ebp], 0
  00139	74 64		 je	 SHORT $LN10@Got_MotD_f
$LN11@Got_MotD_f:

; 3103 : 	{
; 3104 : 		CONS_Printf(text[ILLEGALMOTDCMD], player_names[playernum]);

  0013b	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  0013f	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00144	50		 push	 eax
  00145	b9 04 00 00 00	 mov	 ecx, 4
  0014a	69 d1 9a 00 00
	00		 imul	 edx, ecx, 154
  00150	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _CONS_Printf
  0015c	83 c4 08	 add	 esp, 8

; 3105 : 		if (server)

  0015f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00166	74 35		 je	 SHORT $LN13@Got_MotD_f

; 3106 : 		{
; 3107 : 			XBOXSTATIC UINT8 buf[2];
; 3108 : 
; 3109 : 			buf[0] = (UINT8)playernum;

  00168	b8 01 00 00 00	 mov	 eax, 1
  0016d	6b c8 00	 imul	 ecx, eax, 0
  00170	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00173	88 94 0d ec fe
	ff ff		 mov	 BYTE PTR _buf$2[ebp+ecx], dl

; 3110 : 			buf[1] = KICK_MSG_CON_FAIL;

  0017a	b8 01 00 00 00	 mov	 eax, 1
  0017f	c1 e0 00	 shl	 eax, 0
  00182	c6 84 05 ec fe
	ff ff 02	 mov	 BYTE PTR _buf$2[ebp+eax], 2

; 3111 : 			SendNetXCmd(XD_KICK, &buf, 2);

  0018a	6a 02		 push	 2
  0018c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buf$2[ebp]
  00192	50		 push	 eax
  00193	6a 03		 push	 3
  00195	e8 00 00 00 00	 call	 _SendNetXCmd
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@Got_MotD_f:

; 3112 : 		}
; 3113 : 		return;

  0019d	eb 33		 jmp	 SHORT $LN1@Got_MotD_f
$LN10@Got_MotD_f:

; 3114 : 	}
; 3115 : 
; 3116 : 	strcpy(motd, mymotd);

  0019f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _mymotd$[ebp]
  001a5	50		 push	 eax
  001a6	68 00 00 00 00	 push	 OFFSET _motd
  001ab	e8 00 00 00 00	 call	 _strcpy
  001b0	83 c4 08	 add	 esp, 8

; 3117 : 
; 3118 : 	CONS_Printf("%s", text[MOTD_SET]);

  001b3	b8 04 00 00 00	 mov	 eax, 4
  001b8	69 c8 9b 00 00
	00		 imul	 ecx, eax, 155
  001be	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001c4	52		 push	 edx
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001ca	e8 00 00 00 00	 call	 _CONS_Printf
  001cf	83 c4 08	 add	 esp, 8
$LN1@Got_MotD_f:

; 3119 : }

  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d8	33 cd		 xor	 ecx, ebp
  001da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
_Got_MotD_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_MotD_f
_TEXT	SEGMENT
_mymotd$ = -268						; size = 254
_j$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Command_MotD_f PROC					; COMDAT

; 3052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3053 : 	size_t i, j;
; 3054 : 	XBOXSTATIC char mymotd[sizeof(motd)];
; 3055 : 
; 3056 : 	if ((j = COM_Argc()) < 2)

  00016	e8 00 00 00 00	 call	 _COM_Argc
  0001b	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
  0001e	83 7d f4 02	 cmp	 DWORD PTR _j$[ebp], 2
  00022	73 24		 jae	 SHORT $LN8@Command_Mo

; 3057 : 	{
; 3058 : 		CONS_Printf("%s", text[MOTD_HELP]);

  00024	b8 04 00 00 00	 mov	 eax, 4
  00029	69 c8 99 00 00
	00		 imul	 ecx, eax, 153
  0002f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00035	52		 push	 edx
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0003b	e8 00 00 00 00	 call	 _CONS_Printf
  00040	83 c4 08	 add	 esp, 8

; 3059 : 		return;

  00043	e9 62 01 00 00	 jmp	 $LN13@Command_Mo
$LN8@Command_Mo:

; 3060 : 	}
; 3061 : 
; 3062 : 	if (!(server || (adminplayer == consoleplayer)))

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0004f	75 31		 jne	 SHORT $LN9@Command_Mo
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00056	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0005c	74 24		 je	 SHORT $LN9@Command_Mo

; 3063 : 	{
; 3064 : 		CONS_Printf("%s", text[SERVERONLY]);

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	69 c8 f4 00 00
	00		 imul	 ecx, eax, 244
  00069	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0006f	52		 push	 edx
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00075	e8 00 00 00 00	 call	 _CONS_Printf
  0007a	83 c4 08	 add	 esp, 8

; 3065 : 		return;

  0007d	e9 28 01 00 00	 jmp	 $LN13@Command_Mo
$LN9@Command_Mo:

; 3066 : 	}
; 3067 : 
; 3068 : 	strlcpy(mymotd, COM_Argv(1), sizeof mymotd);

  00082	68 fe 00 00 00	 push	 254			; 000000feH
  00087	6a 01		 push	 1
  00089	e8 00 00 00 00	 call	 _COM_Argv
  0008e	83 c4 04	 add	 esp, 4
  00091	50		 push	 eax
  00092	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _mymotd$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _strlcpy
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3069 : 	for (i = 2; i < j; i++)

  000a1	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  000a8	eb 09		 jmp	 SHORT $LN4@Command_Mo
$LN2@Command_Mo:
  000aa	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ad	83 c0 01	 add	 eax, 1
  000b0	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Command_Mo:
  000b3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000b6	3b 45 f4	 cmp	 eax, DWORD PTR _j$[ebp]
  000b9	73 3c		 jae	 SHORT $LN3@Command_Mo

; 3070 : 	{
; 3071 : 		strlcat(mymotd, " ", sizeof mymotd);

  000bb	68 fe 00 00 00	 push	 254			; 000000feH
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  000c5	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _mymotd$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _strlcat
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3072 : 		strlcat(mymotd, COM_Argv(i), sizeof mymotd);

  000d4	68 fe 00 00 00	 push	 254			; 000000feH
  000d9	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _COM_Argv
  000e2	83 c4 04	 add	 esp, 4
  000e5	50		 push	 eax
  000e6	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _mymotd$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _strlcat
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3073 : 	}

  000f5	eb b3		 jmp	 SHORT $LN2@Command_Mo
$LN3@Command_Mo:

; 3074 : 
; 3075 : 	// Disallow non-printing characters and semicolons.
; 3076 : 	for (i = 0; mymotd[i] != '\0'; i++)

  000f7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000fe	eb 09		 jmp	 SHORT $LN7@Command_Mo
$LN5@Command_Mo:
  00100	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00103	83 c0 01	 add	 eax, 1
  00106	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@Command_Mo:
  00109	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0010c	0f be 8c 05 f4
	fe ff ff	 movsx	 ecx, BYTE PTR _mymotd$[ebp+eax]
  00114	85 c9		 test	 ecx, ecx
  00116	74 2c		 je	 SHORT $LN6@Command_Mo

; 3077 : 		if (!isprint(mymotd[i]) || mymotd[i] == ';')

  00118	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0011b	0f be 8c 05 f4
	fe ff ff	 movsx	 ecx, BYTE PTR _mymotd$[ebp+eax]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 _isprint
  00129	83 c4 04	 add	 esp, 4
  0012c	85 c0		 test	 eax, eax
  0012e	74 10		 je	 SHORT $LN11@Command_Mo
  00130	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00133	0f be 8c 05 f4
	fe ff ff	 movsx	 ecx, BYTE PTR _mymotd$[ebp+eax]
  0013b	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0013e	75 02		 jne	 SHORT $LN10@Command_Mo
$LN11@Command_Mo:

; 3078 : 			return;

  00140	eb 68		 jmp	 SHORT $LN13@Command_Mo
$LN10@Command_Mo:
  00142	eb bc		 jmp	 SHORT $LN5@Command_Mo
$LN6@Command_Mo:

; 3079 : 
; 3080 : 	if ((netgame || multiplayer) && !server)

  00144	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0014b	75 09		 jne	 SHORT $LN14@Command_Mo
  0014d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00154	74 21		 je	 SHORT $LN12@Command_Mo
$LN14@Command_Mo:
  00156	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0015d	75 18		 jne	 SHORT $LN12@Command_Mo

; 3081 : 		SendNetXCmd(XD_SETMOTD, mymotd, sizeof(mymotd));

  0015f	68 fe 00 00 00	 push	 254			; 000000feH
  00164	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _mymotd$[ebp]
  0016a	50		 push	 eax
  0016b	6a 14		 push	 20			; 00000014H
  0016d	e8 00 00 00 00	 call	 _SendNetXCmd
  00172	83 c4 0c	 add	 esp, 12			; 0000000cH
  00175	eb 33		 jmp	 SHORT $LN13@Command_Mo
$LN12@Command_Mo:

; 3082 : 	else
; 3083 : 	{
; 3084 : 		strcpy(motd, mymotd);

  00177	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _mymotd$[ebp]
  0017d	50		 push	 eax
  0017e	68 00 00 00 00	 push	 OFFSET _motd
  00183	e8 00 00 00 00	 call	 _strcpy
  00188	83 c4 08	 add	 esp, 8

; 3085 : 		CONS_Printf("%s", text[MOTD_SET]);

  0018b	b8 04 00 00 00	 mov	 eax, 4
  00190	69 c8 9b 00 00
	00		 imul	 ecx, eax, 155
  00196	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0019c	52		 push	 edx
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001a2	e8 00 00 00 00	 call	 _CONS_Printf
  001a7	83 c4 08	 add	 esp, 8
$LN13@Command_Mo:

; 3086 : 	}
; 3087 : }

  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b0	33 cd		 xor	 ecx, ebp
  001b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c3		 ret	 0
_Command_MotD_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Verify_f
_TEXT	SEGMENT
_p_tmp$1 = -24						; size = 4
_playernum$ = -20					; size = 4
_temp$ = -16						; size = 4
_buf$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_Command_Verify_f PROC					; COMDAT

; 2996 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 2997 : 	XBOXSTATIC char buf[8]; // Should be plenty
; 2998 : 	char *temp;
; 2999 : 	INT32 playernum;
; 3000 : 
; 3001 : 	if (!server)

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0001a	75 24		 jne	 SHORT $LN5@Command_Ve

; 3002 : 	{
; 3003 : 		CONS_Printf("%s", text[SERVER_VERIFY]);

  0001c	b8 04 00 00 00	 mov	 eax, 4
  00021	69 c8 95 00 00
	00		 imul	 ecx, eax, 149
  00027	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002d	52		 push	 edx
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	e8 00 00 00 00	 call	 _CONS_Printf
  00038	83 c4 08	 add	 esp, 8

; 3004 : 		return;

  0003b	e9 97 00 00 00	 jmp	 $LN7@Command_Ve
$LN5@Command_Ve:

; 3005 : 	}
; 3006 : 
; 3007 : 	if (COM_Argc() != 2)

  00040	e8 00 00 00 00	 call	 _COM_Argc
  00045	83 f8 02	 cmp	 eax, 2
  00048	74 21		 je	 SHORT $LN6@Command_Ve

; 3008 : 	{
; 3009 : 		CONS_Printf("%s", text[VERIFY_HELP]);

  0004a	b8 04 00 00 00	 mov	 eax, 4
  0004f	69 c8 96 00 00
	00		 imul	 ecx, eax, 150
  00055	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0005b	52		 push	 edx
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00061	e8 00 00 00 00	 call	 _CONS_Printf
  00066	83 c4 08	 add	 esp, 8

; 3010 : 		return;

  00069	eb 6c		 jmp	 SHORT $LN7@Command_Ve
$LN6@Command_Ve:

; 3011 : 	}
; 3012 : 
; 3013 : 	strlcpy(buf, COM_Argv(1), sizeof (buf));

  0006b	6a 08		 push	 8
  0006d	6a 01		 push	 1
  0006f	e8 00 00 00 00	 call	 _COM_Argv
  00074	83 c4 04	 add	 esp, 4
  00077	50		 push	 eax
  00078	8d 45 f4	 lea	 eax, DWORD PTR _buf$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _strlcpy
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3014 : 
; 3015 : 	playernum = atoi(buf);

  00084	8d 45 f4	 lea	 eax, DWORD PTR _buf$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _atoi
  0008d	83 c4 04	 add	 esp, 4
  00090	89 45 ec	 mov	 DWORD PTR _playernum$[ebp], eax

; 3016 : 
; 3017 : 	temp = buf;

  00093	8d 45 f4	 lea	 eax, DWORD PTR _buf$[ebp]
  00096	89 45 f0	 mov	 DWORD PTR _temp$[ebp], eax
$LN4@Command_Ve:

; 3018 : 
; 3019 : 	WRITEUINT8(temp, playernum);

  00099	8b 45 f0	 mov	 eax, DWORD PTR _temp$[ebp]
  0009c	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  0009f	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000a2	8a 4d ec	 mov	 cl, BYTE PTR _playernum$[ebp]
  000a5	88 08		 mov	 BYTE PTR [eax], cl
  000a7	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000b0	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000b3	89 45 f0	 mov	 DWORD PTR _temp$[ebp], eax
  000b6	33 c0		 xor	 eax, eax
  000b8	75 df		 jne	 SHORT $LN4@Command_Ve

; 3020 : 
; 3021 : 	if (playeringame[playernum])

  000ba	8b 45 ec	 mov	 eax, DWORD PTR _playernum$[ebp]
  000bd	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000c5	74 10		 je	 SHORT $LN7@Command_Ve

; 3022 : 		SendNetXCmd(XD_VERIFIED, buf, 1);

  000c7	6a 01		 push	 1
  000c9	8d 45 f4	 lea	 eax, DWORD PTR _buf$[ebp]
  000cc	50		 push	 eax
  000cd	6a 0e		 push	 14			; 0000000eH
  000cf	e8 00 00 00 00	 call	 _SendNetXCmd
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Command_Ve:

; 3023 : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dd	33 cd		 xor	 ecx, ebp
  000df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
_Command_Verify_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_Verification
_TEXT	SEGMENT
_buf$1 = -8						; size = 2
_num$ = -4						; size = 2
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_Verification PROC					; COMDAT

; 3026 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3027 : 	INT16 num = READUINT8(*cp);

  00009	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  00012	66 89 55 fc	 mov	 WORD PTR _num$[ebp], dx
  00016	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	83 c1 01	 add	 ecx, 1
  0001e	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00021	89 0a		 mov	 DWORD PTR [edx], ecx

; 3028 : 
; 3029 : 	if (playernum != serverplayer) // it's not from the server (hacker or bug)

  00023	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00026	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  0002c	74 69		 je	 SHORT $LN2@Got_Verifi

; 3030 : 	{
; 3031 : 		CONS_Printf(text[ILLEGALVERIFYCMD], player_names[playernum], player_names[serverplayer]);

  0002e	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _serverplayer, 22
  00035	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0003a	50		 push	 eax
  0003b	6b 4d 0c 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  0003f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00045	51		 push	 ecx
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	69 c2 97 00 00
	00		 imul	 eax, edx, 151
  00051	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _CONS_Printf
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3032 : 		if (server)

  00060	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00067	74 2c		 je	 SHORT $LN3@Got_Verifi

; 3033 : 		{
; 3034 : 			XBOXSTATIC UINT8 buf[2];
; 3035 : 
; 3036 : 			buf[0] = (UINT8)playernum;

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	6b c8 00	 imul	 ecx, eax, 0
  00071	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00074	88 54 0d f8	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 3037 : 			buf[1] = KICK_MSG_CON_FAIL;

  00078	b8 01 00 00 00	 mov	 eax, 1
  0007d	c1 e0 00	 shl	 eax, 0
  00080	c6 44 05 f8 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 3038 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00085	6a 02		 push	 2
  00087	8d 45 f8	 lea	 eax, DWORD PTR _buf$1[ebp]
  0008a	50		 push	 eax
  0008b	6a 03		 push	 3
  0008d	e8 00 00 00 00	 call	 _SendNetXCmd
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Got_Verifi:

; 3039 : 		}
; 3040 : 		return;

  00095	eb 36		 jmp	 SHORT $LN1@Got_Verifi
$LN2@Got_Verifi:

; 3041 : 	}
; 3042 : 
; 3043 : 	adminplayer = num;

  00097	0f bf 45 fc	 movsx	 eax, WORD PTR _num$[ebp]
  0009b	a3 00 00 00 00	 mov	 DWORD PTR _adminplayer, eax

; 3044 : 
; 3045 : 	if (num != consoleplayer)

  000a0	0f bf 45 fc	 movsx	 eax, WORD PTR _num$[ebp]
  000a4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  000aa	74 02		 je	 SHORT $LN4@Got_Verifi

; 3046 : 		return;

  000ac	eb 1f		 jmp	 SHORT $LN1@Got_Verifi
$LN4@Got_Verifi:

; 3047 : 
; 3048 : 	CONS_Printf("%s", text[PASSWORD_CORRECT]);

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	69 c8 98 00 00
	00		 imul	 ecx, eax, 152
  000b9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000bf	52		 push	 edx
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c5	e8 00 00 00 00	 call	 _CONS_Printf
  000ca	83 c4 08	 add	 esp, 8
$LN1@Got_Verifi:

; 3049 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_Got_Verification ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_Login
_TEXT	SEGMENT
$T1 = -84						; size = 4
_compareword$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_Login PROC						; COMDAT

; 2976 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 2977 : 	char compareword[9];
; 2978 : 
; 2979 : 	READMEM(*cp, compareword, 9);

  00013	6a 09		 push	 9
  00015	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	51		 push	 ecx
  0001b	8d 55 f0	 lea	 edx, DWORD PTR _compareword$[ebp]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 _memcpy
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	83 c1 09	 add	 ecx, 9
  0002f	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00032	89 0a		 mov	 DWORD PTR [edx], ecx

; 2980 : 
; 2981 : 	if (!server)

  00034	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0003b	75 05		 jne	 SHORT $LN2@Got_Login

; 2982 : 		return;

  0003d	e9 9d 00 00 00	 jmp	 $LN4@Got_Login
$LN2@Got_Login:

; 2983 : 
; 2984 : 	compareword[8] = '\0';

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	c1 e0 03	 shl	 eax, 3
  0004a	89 45 ac	 mov	 DWORD PTR $T1[ebp], eax
  0004d	83 7d ac 09	 cmp	 DWORD PTR $T1[ebp], 9
  00051	73 02		 jae	 SHORT $LN6@Got_Login
  00053	eb 06		 jmp	 SHORT $LN7@Got_Login
$LN6@Got_Login:
  00055	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0005a	90		 npad	 1
$LN7@Got_Login:
  0005b	8b 4d ac	 mov	 ecx, DWORD PTR $T1[ebp]
  0005e	c6 44 0d f0 00	 mov	 BYTE PTR _compareword$[ebp+ecx], 0

; 2985 : 
; 2986 : 	if (!strcmp(compareword, adminpassword))

  00063	68 00 00 00 00	 push	 OFFSET _adminpassword
  00068	8d 45 f0	 lea	 eax, DWORD PTR _compareword$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _strcmp
  00071	83 c4 08	 add	 esp, 8
  00074	85 c0		 test	 eax, eax
  00076	75 45		 jne	 SHORT $LN3@Got_Login

; 2987 : 	{
; 2988 : 		CONS_Printf(text[PASSED_AUTH], player_names[playernum], compareword);

  00078	8d 45 f0	 lea	 eax, DWORD PTR _compareword$[ebp]
  0007b	50		 push	 eax
  0007c	6b 4d 0c 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  00080	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00086	51		 push	 ecx
  00087	ba 04 00 00 00	 mov	 edx, 4
  0008c	69 c2 93 00 00
	00		 imul	 eax, edx, 147
  00092	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _CONS_Printf
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2989 : 		COM_BufInsertText(va("verify %d\n", playernum)); // do this immediately

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000a4	50		 push	 eax
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IDIHJHPM@verify?5?$CFd?6@
  000aa	e8 00 00 00 00	 call	 _va
  000af	83 c4 08	 add	 esp, 8
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _COM_BufInsertText
  000b8	83 c4 04	 add	 esp, 4

; 2990 : 	}

  000bb	eb 22		 jmp	 SHORT $LN4@Got_Login
$LN3@Got_Login:

; 2991 : 	else
; 2992 : 		CONS_Printf(text[PASSWORD_FAILED], playernum, compareword);

  000bd	8d 45 f0	 lea	 eax, DWORD PTR _compareword$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  000c4	51		 push	 ecx
  000c5	ba 04 00 00 00	 mov	 edx, 4
  000ca	69 c2 94 00 00
	00		 imul	 eax, edx, 148
  000d0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 _CONS_Printf
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Got_Login:

; 2993 : }

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e5	33 cd		 xor	 ecx, ebp
  000e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
_Got_Login ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Login_f
_TEXT	SEGMENT
$T1 = -88						; size = 4
_i$2 = -20						; size = 4
_password$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_Command_Login_f PROC					; COMDAT

; 2946 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 2947 : 	XBOXSTATIC char password[9];
; 2948 : 
; 2949 : 	// If the server uses login, it will effectively just remove admin privileges
; 2950 : 	// from whoever has them. This is good.
; 2951 : 
; 2952 : 	if (COM_Argc() != 2)

  00013	e8 00 00 00 00	 call	 _COM_Argc
  00018	83 f8 02	 cmp	 eax, 2
  0001b	74 24		 je	 SHORT $LN5@Command_Lo

; 2953 : 	{
; 2954 : 		CONS_Printf("%s", text[LOGIN_HELP]);

  0001d	b8 04 00 00 00	 mov	 eax, 4
  00022	69 c8 91 00 00
	00		 imul	 ecx, eax, 145
  00028	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002e	52		 push	 edx
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00034	e8 00 00 00 00	 call	 _CONS_Printf
  00039	83 c4 08	 add	 esp, 8

; 2955 : 		return;

  0003c	e9 b1 00 00 00	 jmp	 $LN1@Command_Lo
$LN5@Command_Lo:

; 2956 : 	}
; 2957 : 
; 2958 : 	strncpy(password, COM_Argv(1), 8);

  00041	6a 08		 push	 8
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 _COM_Argv
  0004a	83 c4 04	 add	 esp, 4
  0004d	50		 push	 eax
  0004e	8d 45 f0	 lea	 eax, DWORD PTR _password$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _strncpy
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2959 : 
; 2960 : 	// Pad the password
; 2961 : 	if (strlen(COM_Argv(1)) < 8)

  0005a	6a 01		 push	 1
  0005c	e8 00 00 00 00	 call	 _COM_Argv
  00061	83 c4 04	 add	 esp, 4
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _strlen
  0006a	83 c4 04	 add	 esp, 4
  0006d	83 f8 08	 cmp	 eax, 8
  00070	73 31		 jae	 SHORT $LN3@Command_Lo

; 2962 : 	{
; 2963 : 		size_t i;
; 2964 : 		for (i = strlen(COM_Argv(1)); i < 8; i++)

  00072	6a 01		 push	 1
  00074	e8 00 00 00 00	 call	 _COM_Argv
  00079	83 c4 04	 add	 esp, 4
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _strlen
  00082	83 c4 04	 add	 esp, 4
  00085	89 45 ec	 mov	 DWORD PTR _i$2[ebp], eax
  00088	eb 09		 jmp	 SHORT $LN4@Command_Lo
$LN2@Command_Lo:
  0008a	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  0008d	83 c0 01	 add	 eax, 1
  00090	89 45 ec	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@Command_Lo:
  00093	83 7d ec 08	 cmp	 DWORD PTR _i$2[ebp], 8
  00097	73 0a		 jae	 SHORT $LN3@Command_Lo

; 2965 : 			password[i] = 'a';

  00099	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  0009c	c6 44 05 f0 61	 mov	 BYTE PTR _password$[ebp+eax], 97 ; 00000061H
  000a1	eb e7		 jmp	 SHORT $LN2@Command_Lo
$LN3@Command_Lo:

; 2966 : 	}
; 2967 : 
; 2968 : 	password[8] = '\0';

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	c1 e0 03	 shl	 eax, 3
  000ab	89 45 a8	 mov	 DWORD PTR $T1[ebp], eax
  000ae	83 7d a8 09	 cmp	 DWORD PTR $T1[ebp], 9
  000b2	73 02		 jae	 SHORT $LN8@Command_Lo
  000b4	eb 06		 jmp	 SHORT $LN9@Command_Lo
$LN8@Command_Lo:
  000b6	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000bb	90		 npad	 1
$LN9@Command_Lo:
  000bc	8b 4d a8	 mov	 ecx, DWORD PTR $T1[ebp]
  000bf	c6 44 0d f0 00	 mov	 BYTE PTR _password$[ebp+ecx], 0

; 2969 : 
; 2970 : 	CONS_Printf(text[SENDING_LOGIN], password);

  000c4	8d 45 f0	 lea	 eax, DWORD PTR _password$[ebp]
  000c7	50		 push	 eax
  000c8	b9 04 00 00 00	 mov	 ecx, 4
  000cd	69 d1 92 00 00
	00		 imul	 edx, ecx, 146
  000d3	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _CONS_Printf
  000df	83 c4 08	 add	 esp, 8

; 2971 : 
; 2972 : 	SendNetXCmd(XD_LOGIN, password, 9);

  000e2	6a 09		 push	 9
  000e4	8d 45 f0	 lea	 eax, DWORD PTR _password$[ebp]
  000e7	50		 push	 eax
  000e8	6a 0d		 push	 13			; 0000000dH
  000ea	e8 00 00 00 00	 call	 _SendNetXCmd
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Lo:

; 2973 : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
_Command_Login_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Changepassword_f
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_Command_Changepassword_f PROC				; COMDAT

; 2921 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2922 : 	if (!server) // cannot change remotely

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 24		 jne	 SHORT $LN5@Command_Ch

; 2923 : 	{
; 2924 : 		CONS_Printf("%s", text[SERVER_CHANGEPASSWORD]);

  00012	b8 04 00 00 00	 mov	 eax, 4
  00017	69 c8 8f 00 00
	00		 imul	 ecx, eax, 143
  0001d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00023	52		 push	 edx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00029	e8 00 00 00 00	 call	 _CONS_Printf
  0002e	83 c4 08	 add	 esp, 8

; 2925 : 		return;

  00031	e9 90 00 00 00	 jmp	 $LN3@Command_Ch
$LN5@Command_Ch:

; 2926 : 	}
; 2927 : 
; 2928 : 	if (COM_Argc() != 2)

  00036	e8 00 00 00 00	 call	 _COM_Argc
  0003b	83 f8 02	 cmp	 eax, 2
  0003e	74 21		 je	 SHORT $LN6@Command_Ch

; 2929 : 	{
; 2930 : 		CONS_Printf("%s", text[PASSWORD_HELP]);

  00040	b8 04 00 00 00	 mov	 eax, 4
  00045	69 c8 90 00 00
	00		 imul	 ecx, eax, 144
  0004b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00051	52		 push	 edx
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00057	e8 00 00 00 00	 call	 _CONS_Printf
  0005c	83 c4 08	 add	 esp, 8

; 2931 : 		return;

  0005f	eb 65		 jmp	 SHORT $LN3@Command_Ch
$LN6@Command_Ch:

; 2932 : 	}
; 2933 : 
; 2934 : 	strncpy(adminpassword, COM_Argv(1), 8);

  00061	6a 08		 push	 8
  00063	6a 01		 push	 1
  00065	e8 00 00 00 00	 call	 _COM_Argv
  0006a	83 c4 04	 add	 esp, 4
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET _adminpassword
  00073	e8 00 00 00 00	 call	 _strncpy
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2935 : 
; 2936 : 	// Pad the password
; 2937 : 	if (strlen(COM_Argv(1)) < 8)

  0007b	6a 01		 push	 1
  0007d	e8 00 00 00 00	 call	 _COM_Argv
  00082	83 c4 04	 add	 esp, 4
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _strlen
  0008b	83 c4 04	 add	 esp, 4
  0008e	83 f8 08	 cmp	 eax, 8
  00091	73 33		 jae	 SHORT $LN3@Command_Ch

; 2938 : 	{
; 2939 : 		size_t i;
; 2940 : 		for (i = strlen(COM_Argv(1)); i < 8; i++)

  00093	6a 01		 push	 1
  00095	e8 00 00 00 00	 call	 _COM_Argv
  0009a	83 c4 04	 add	 esp, 4
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _strlen
  000a3	83 c4 04	 add	 esp, 4
  000a6	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
  000a9	eb 09		 jmp	 SHORT $LN4@Command_Ch
$LN2@Command_Ch:
  000ab	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Command_Ch:
  000b4	83 7d fc 08	 cmp	 DWORD PTR _i$1[ebp], 8
  000b8	73 0c		 jae	 SHORT $LN3@Command_Ch

; 2941 : 			adminpassword[i] = 'a';

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  000bd	c6 80 00 00 00
	00 61		 mov	 BYTE PTR _adminpassword[eax], 97 ; 00000061H
  000c4	eb e5		 jmp	 SHORT $LN2@Command_Ch
$LN3@Command_Ch:

; 2942 : 	}
; 2943 : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
_Command_Changepassword_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Clearscores_f
_TEXT	SEGMENT
_Command_Clearscores_f PROC				; COMDAT

; 2328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2329 : 	if (!(server || (adminplayer == consoleplayer)))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 0f		 jne	 SHORT $LN2@Command_Cl
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0001d	74 02		 je	 SHORT $LN2@Command_Cl

; 2330 : 		return;

  0001f	eb 0e		 jmp	 SHORT $LN1@Command_Cl
$LN2@Command_Cl:

; 2331 : 
; 2332 : 	SendNetXCmd(XD_CLEARSCORES, NULL, 1);

  00021	6a 01		 push	 1
  00023	6a 00		 push	 0
  00025	6a 0c		 push	 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _SendNetXCmd
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Cl:

; 2333 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_Command_Clearscores_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ServerTeamChange_f
_TEXT	SEGMENT
tv294 = -80						; size = 4
_usvalue$ = -12						; size = 2
_error$ = -8						; size = 4
_NetPacket$ = -4					; size = 4
_Command_ServerTeamChange_f PROC			; COMDAT

; 2565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2566 : 	changeteam_union NetPacket;
; 2567 : 	boolean error = false;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _error$[ebp], 0

; 2568 : 	UINT16 usvalue;
; 2569 : 	NetPacket.value.l = NetPacket.value.b = 0;

  00010	33 c0		 xor	 eax, eax
  00012	66 89 45 fe	 mov	 WORD PTR _NetPacket$[ebp+2], ax
  00016	66 8b 4d fe	 mov	 cx, WORD PTR _NetPacket$[ebp+2]
  0001a	66 89 4d fc	 mov	 WORD PTR _NetPacket$[ebp], cx

; 2570 : 
; 2571 : 	if (!(server || (adminplayer == consoleplayer)))

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00025	75 2e		 jne	 SHORT $LN2@Command_Se
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0002c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00032	74 21		 je	 SHORT $LN2@Command_Se

; 2572 : 	{
; 2573 : 		CONS_Printf("%s", text[SERVER_CHANGETEAM]);

  00034	b8 04 00 00 00	 mov	 eax, 4
  00039	6b c8 7e	 imul	 ecx, eax, 126
  0003c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00042	52		 push	 edx
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00048	e8 00 00 00 00	 call	 _CONS_Printf
  0004d	83 c4 08	 add	 esp, 8

; 2574 : 		return;

  00050	e9 f2 06 00 00	 jmp	 $LN1@Command_Se
$LN2@Command_Se:

; 2575 : 	}
; 2576 : 
; 2577 : 	//        0              1         2
; 2578 : 	// serverchangeteam <playernum>  <team>
; 2579 : 
; 2580 : 	if (COM_Argc() < 3)

  00055	e8 00 00 00 00	 call	 _COM_Argc
  0005a	83 f8 03	 cmp	 eax, 3
  0005d	0f 83 c3 00 00
	00		 jae	 $LN3@Command_Se

; 2581 : 	{
; 2582 : 		if (gametype == GT_MATCH && !cv_matchtype.value)

  00063	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 2a		 jne	 SHORT $LN4@Command_Se
  0006f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00076	75 21		 jne	 SHORT $LN4@Command_Se

; 2583 : 			CONS_Printf("%s", text[SERVERCHANGETEAM_HELP1]);

  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	6b c8 7f	 imul	 ecx, eax, 127
  00080	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00086	52		 push	 edx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0008c	e8 00 00 00 00	 call	 _CONS_Printf
  00091	83 c4 08	 add	 esp, 8
  00094	e9 88 00 00 00	 jmp	 $LN9@Command_Se
$LN4@Command_Se:

; 2584 : 		else if (gametype == GT_TAG)

  00099	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a0	83 f8 03	 cmp	 eax, 3
  000a3	75 1e		 jne	 SHORT $LN6@Command_Se

; 2585 : 			CONS_Printf("%s", text[SERVERCHANGETEAM_HELP2]);

  000a5	b8 04 00 00 00	 mov	 eax, 4
  000aa	c1 e0 07	 shl	 eax, 7
  000ad	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000b3	51		 push	 ecx
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000b9	e8 00 00 00 00	 call	 _CONS_Printf
  000be	83 c4 08	 add	 esp, 8
  000c1	eb 5e		 jmp	 SHORT $LN9@Command_Se
$LN6@Command_Se:

; 2586 : 		else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  000c3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000ca	83 f8 04	 cmp	 eax, 4
  000cd	74 15		 je	 SHORT $LN10@Command_Se
  000cf	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000d6	83 f8 01	 cmp	 eax, 1
  000d9	75 2a		 jne	 SHORT $LN8@Command_Se
  000db	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  000e2	74 21		 je	 SHORT $LN8@Command_Se
$LN10@Command_Se:

; 2587 : 			CONS_Printf("%s", text[SERVERCHANGETEAM_HELP3]);

  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	69 c8 81 00 00
	00		 imul	 ecx, eax, 129
  000ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f5	52		 push	 edx
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000fb	e8 00 00 00 00	 call	 _CONS_Printf
  00100	83 c4 08	 add	 esp, 8
  00103	eb 1c		 jmp	 SHORT $LN9@Command_Se
$LN8@Command_Se:

; 2588 : 		else
; 2589 : 			CONS_Printf("%s", text[NOMTF]);

  00105	b8 04 00 00 00	 mov	 eax, 4
  0010a	6b c8 7a	 imul	 ecx, eax, 122
  0010d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00119	e8 00 00 00 00	 call	 _CONS_Printf
  0011e	83 c4 08	 add	 esp, 8
$LN9@Command_Se:

; 2590 : 		return;

  00121	e9 21 06 00 00	 jmp	 $LN1@Command_Se
$LN3@Command_Se:

; 2591 : 	}
; 2592 : 
; 2593 : 	if (gametype == GT_MATCH && !cv_matchtype.value)

  00126	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0012d	83 f8 01	 cmp	 eax, 1
  00130	0f 85 a6 00 00
	00		 jne	 $LN11@Command_Se
  00136	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0013d	0f 85 99 00 00
	00		 jne	 $LN11@Command_Se

; 2594 : 	{
; 2595 : 		if (!strcasecmp(COM_Argv(2), "spectator") || !strcasecmp(COM_Argv(2), "0"))

  00143	68 00 00 00 00	 push	 OFFSET ??_C@_09FNMDCDOI@spectator@
  00148	6a 02		 push	 2
  0014a	e8 00 00 00 00	 call	 _COM_Argv
  0014f	83 c4 04	 add	 esp, 4
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 _stricmp
  00158	83 c4 08	 add	 esp, 8
  0015b	85 c0		 test	 eax, eax
  0015d	74 1c		 je	 SHORT $LN15@Command_Se
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00164	6a 02		 push	 2
  00166	e8 00 00 00 00	 call	 _COM_Argv
  0016b	83 c4 04	 add	 esp, 4
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 _stricmp
  00174	83 c4 08	 add	 esp, 8
  00177	85 c0		 test	 eax, eax
  00179	75 0d		 jne	 SHORT $LN13@Command_Se
$LN15@Command_Se:

; 2596 : 			NetPacket.packet.newteam = 0;

  0017b	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0017e	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00183	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00186	eb 4f		 jmp	 SHORT $LN17@Command_Se
$LN13@Command_Se:

; 2597 : 		else if (!strcasecmp(COM_Argv(2), "playing") || !strcasecmp(COM_Argv(2), "1"))

  00188	68 00 00 00 00	 push	 OFFSET ??_C@_07GDCKGKBF@playing@
  0018d	6a 02		 push	 2
  0018f	e8 00 00 00 00	 call	 _COM_Argv
  00194	83 c4 04	 add	 esp, 4
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _stricmp
  0019d	83 c4 08	 add	 esp, 8
  001a0	85 c0		 test	 eax, eax
  001a2	74 1c		 je	 SHORT $LN18@Command_Se
  001a4	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  001a9	6a 02		 push	 2
  001ab	e8 00 00 00 00	 call	 _COM_Argv
  001b0	83 c4 04	 add	 esp, 4
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 _stricmp
  001b9	83 c4 08	 add	 esp, 8
  001bc	85 c0		 test	 eax, eax
  001be	75 10		 jne	 SHORT $LN16@Command_Se
$LN18@Command_Se:

; 2598 : 			NetPacket.packet.newteam = 3;

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  001c3	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  001c8	83 c8 60	 or	 eax, 96			; 00000060H
  001cb	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  001ce	eb 07		 jmp	 SHORT $LN17@Command_Se
$LN16@Command_Se:

; 2599 : 		else
; 2600 : 			error = true;

  001d0	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN17@Command_Se:

; 2601 : 	}

  001d7	e9 6a 02 00 00	 jmp	 $LN34@Command_Se
$LN11@Command_Se:

; 2602 : 	else if (gametype == GT_TAG)

  001dc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001e3	83 f8 03	 cmp	 eax, 3
  001e6	0f 85 2f 01 00
	00		 jne	 $LN19@Command_Se

; 2603 : 	{
; 2604 : 		if (!strcasecmp(COM_Argv(2), "it") || !strcasecmp(COM_Argv(2), "1"))

  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_02MOLGKLA@it@
  001f1	6a 02		 push	 2
  001f3	e8 00 00 00 00	 call	 _COM_Argv
  001f8	83 c4 04	 add	 esp, 4
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 _stricmp
  00201	83 c4 08	 add	 esp, 8
  00204	85 c0		 test	 eax, eax
  00206	74 1c		 je	 SHORT $LN23@Command_Se
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  0020d	6a 02		 push	 2
  0020f	e8 00 00 00 00	 call	 _COM_Argv
  00214	83 c4 04	 add	 esp, 4
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 _stricmp
  0021d	83 c4 08	 add	 esp, 8
  00220	85 c0		 test	 eax, eax
  00222	75 13		 jne	 SHORT $LN21@Command_Se
$LN23@Command_Se:

; 2605 : 			NetPacket.packet.newteam = 1;

  00224	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00227	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  0022c	83 c8 20	 or	 eax, 32			; 00000020H
  0022f	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00232	e9 df 00 00 00	 jmp	 $LN31@Command_Se
$LN21@Command_Se:

; 2606 : 		else if (!strcasecmp(COM_Argv(2), "notit") || !strcasecmp(COM_Argv(2), "2"))

  00237	68 00 00 00 00	 push	 OFFSET ??_C@_05IPKJKLHM@notit@
  0023c	6a 02		 push	 2
  0023e	e8 00 00 00 00	 call	 _COM_Argv
  00243	83 c4 04	 add	 esp, 4
  00246	50		 push	 eax
  00247	e8 00 00 00 00	 call	 _stricmp
  0024c	83 c4 08	 add	 esp, 8
  0024f	85 c0		 test	 eax, eax
  00251	74 1c		 je	 SHORT $LN26@Command_Se
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_01FDFGLJHB@2@
  00258	6a 02		 push	 2
  0025a	e8 00 00 00 00	 call	 _COM_Argv
  0025f	83 c4 04	 add	 esp, 4
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 _stricmp
  00268	83 c4 08	 add	 esp, 8
  0026b	85 c0		 test	 eax, eax
  0026d	75 13		 jne	 SHORT $LN24@Command_Se
$LN26@Command_Se:

; 2607 : 			NetPacket.packet.newteam = 2;

  0026f	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00272	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00277	83 c8 40	 or	 eax, 64			; 00000040H
  0027a	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  0027d	e9 94 00 00 00	 jmp	 $LN31@Command_Se
$LN24@Command_Se:

; 2608 : 		else if (!strcasecmp(COM_Argv(2), "playing") || !strcasecmp(COM_Argv(2), "3"))

  00282	68 00 00 00 00	 push	 OFFSET ??_C@_07GDCKGKBF@playing@
  00287	6a 02		 push	 2
  00289	e8 00 00 00 00	 call	 _COM_Argv
  0028e	83 c4 04	 add	 esp, 4
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 _stricmp
  00297	83 c4 08	 add	 esp, 8
  0029a	85 c0		 test	 eax, eax
  0029c	74 1c		 je	 SHORT $LN29@Command_Se
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_01EKENIIDA@3@
  002a3	6a 02		 push	 2
  002a5	e8 00 00 00 00	 call	 _COM_Argv
  002aa	83 c4 04	 add	 esp, 4
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 _stricmp
  002b3	83 c4 08	 add	 esp, 8
  002b6	85 c0		 test	 eax, eax
  002b8	75 10		 jne	 SHORT $LN27@Command_Se
$LN29@Command_Se:

; 2609 : 			NetPacket.packet.newteam = 3;

  002ba	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  002bd	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  002c2	83 c8 60	 or	 eax, 96			; 00000060H
  002c5	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  002c8	eb 4c		 jmp	 SHORT $LN31@Command_Se
$LN27@Command_Se:

; 2610 : 		else if (!strcasecmp(COM_Argv(2), "spectator") || !strcasecmp(COM_Argv(2), "0"))

  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_09FNMDCDOI@spectator@
  002cf	6a 02		 push	 2
  002d1	e8 00 00 00 00	 call	 _COM_Argv
  002d6	83 c4 04	 add	 esp, 4
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 _stricmp
  002df	83 c4 08	 add	 esp, 8
  002e2	85 c0		 test	 eax, eax
  002e4	74 1c		 je	 SHORT $LN32@Command_Se
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  002eb	6a 02		 push	 2
  002ed	e8 00 00 00 00	 call	 _COM_Argv
  002f2	83 c4 04	 add	 esp, 4
  002f5	50		 push	 eax
  002f6	e8 00 00 00 00	 call	 _stricmp
  002fb	83 c4 08	 add	 esp, 8
  002fe	85 c0		 test	 eax, eax
  00300	75 0d		 jne	 SHORT $LN30@Command_Se
$LN32@Command_Se:

; 2611 : 			NetPacket.packet.newteam = 0;

  00302	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00305	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  0030a	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  0030d	eb 07		 jmp	 SHORT $LN31@Command_Se
$LN30@Command_Se:

; 2612 : 		else
; 2613 : 			error = true;

  0030f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN31@Command_Se:

; 2614 : 	}

  00316	e9 2b 01 00 00	 jmp	 $LN34@Command_Se
$LN19@Command_Se:

; 2615 : 	else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0031b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00322	83 f8 04	 cmp	 eax, 4
  00325	74 1d		 je	 SHORT $LN35@Command_Se
  00327	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0032e	83 f8 01	 cmp	 eax, 1
  00331	0f 85 ee 00 00
	00		 jne	 $LN33@Command_Se
  00337	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0033e	0f 84 e1 00 00
	00		 je	 $LN33@Command_Se
$LN35@Command_Se:

; 2616 : 	{
; 2617 : 		if (!strcasecmp(COM_Argv(2), "red") || !strcasecmp(COM_Argv(2), "1"))

  00344	68 00 00 00 00	 push	 OFFSET ??_C@_03FAAAOPJM@red@
  00349	6a 02		 push	 2
  0034b	e8 00 00 00 00	 call	 _COM_Argv
  00350	83 c4 04	 add	 esp, 4
  00353	50		 push	 eax
  00354	e8 00 00 00 00	 call	 _stricmp
  00359	83 c4 08	 add	 esp, 8
  0035c	85 c0		 test	 eax, eax
  0035e	74 1c		 je	 SHORT $LN38@Command_Se
  00360	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  00365	6a 02		 push	 2
  00367	e8 00 00 00 00	 call	 _COM_Argv
  0036c	83 c4 04	 add	 esp, 4
  0036f	50		 push	 eax
  00370	e8 00 00 00 00	 call	 _stricmp
  00375	83 c4 08	 add	 esp, 8
  00378	85 c0		 test	 eax, eax
  0037a	75 13		 jne	 SHORT $LN36@Command_Se
$LN38@Command_Se:

; 2618 : 			NetPacket.packet.newteam = 1;

  0037c	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0037f	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00384	83 c8 20	 or	 eax, 32			; 00000020H
  00387	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  0038a	e9 94 00 00 00	 jmp	 $LN43@Command_Se
$LN36@Command_Se:

; 2619 : 		else if (!strcasecmp(COM_Argv(2), "blue") || !strcasecmp(COM_Argv(2), "2"))

  0038f	68 00 00 00 00	 push	 OFFSET ??_C@_04OBGPFBCN@blue@
  00394	6a 02		 push	 2
  00396	e8 00 00 00 00	 call	 _COM_Argv
  0039b	83 c4 04	 add	 esp, 4
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 _stricmp
  003a4	83 c4 08	 add	 esp, 8
  003a7	85 c0		 test	 eax, eax
  003a9	74 1c		 je	 SHORT $LN41@Command_Se
  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_01FDFGLJHB@2@
  003b0	6a 02		 push	 2
  003b2	e8 00 00 00 00	 call	 _COM_Argv
  003b7	83 c4 04	 add	 esp, 4
  003ba	50		 push	 eax
  003bb	e8 00 00 00 00	 call	 _stricmp
  003c0	83 c4 08	 add	 esp, 8
  003c3	85 c0		 test	 eax, eax
  003c5	75 10		 jne	 SHORT $LN39@Command_Se
$LN41@Command_Se:

; 2620 : 			NetPacket.packet.newteam = 2;

  003c7	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  003ca	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  003cf	83 c8 40	 or	 eax, 64			; 00000040H
  003d2	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  003d5	eb 4c		 jmp	 SHORT $LN43@Command_Se
$LN39@Command_Se:

; 2621 : 		else if (!strcasecmp(COM_Argv(2), "spectator") || !strcasecmp(COM_Argv(2), "0"))

  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_09FNMDCDOI@spectator@
  003dc	6a 02		 push	 2
  003de	e8 00 00 00 00	 call	 _COM_Argv
  003e3	83 c4 04	 add	 esp, 4
  003e6	50		 push	 eax
  003e7	e8 00 00 00 00	 call	 _stricmp
  003ec	83 c4 08	 add	 esp, 8
  003ef	85 c0		 test	 eax, eax
  003f1	74 1c		 je	 SHORT $LN44@Command_Se
  003f3	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  003f8	6a 02		 push	 2
  003fa	e8 00 00 00 00	 call	 _COM_Argv
  003ff	83 c4 04	 add	 esp, 4
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 _stricmp
  00408	83 c4 08	 add	 esp, 8
  0040b	85 c0		 test	 eax, eax
  0040d	75 0d		 jne	 SHORT $LN42@Command_Se
$LN44@Command_Se:

; 2622 : 			NetPacket.packet.newteam = 0;

  0040f	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00412	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00417	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  0041a	eb 07		 jmp	 SHORT $LN43@Command_Se
$LN42@Command_Se:

; 2623 : 		else
; 2624 : 			error = true;

  0041c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN43@Command_Se:

; 2625 : 	}

  00423	eb 21		 jmp	 SHORT $LN34@Command_Se
$LN33@Command_Se:

; 2626 : 	else
; 2627 : 	{
; 2628 : 		CONS_Printf("%s", text[NOMTF]);

  00425	b8 04 00 00 00	 mov	 eax, 4
  0042a	6b c8 7a	 imul	 ecx, eax, 122
  0042d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00433	52		 push	 edx
  00434	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00439	e8 00 00 00 00	 call	 _CONS_Printf
  0043e	83 c4 08	 add	 esp, 8

; 2629 : 		return;

  00441	e9 01 03 00 00	 jmp	 $LN1@Command_Se
$LN34@Command_Se:

; 2630 : 	}
; 2631 : 
; 2632 : 	if (error)

  00446	83 7d f8 00	 cmp	 DWORD PTR _error$[ebp], 0
  0044a	0f 84 a2 00 00
	00		 je	 $LN45@Command_Se

; 2633 : 	{
; 2634 : 		if (gametype == GT_MATCH && !cv_matchtype.value)

  00450	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00457	83 f8 01	 cmp	 eax, 1
  0045a	75 27		 jne	 SHORT $LN46@Command_Se
  0045c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00463	75 1e		 jne	 SHORT $LN46@Command_Se

; 2635 : 			CONS_Printf("%s", text[SERVERCHANGETEAM_HELP1]);

  00465	b8 04 00 00 00	 mov	 eax, 4
  0046a	6b c8 7f	 imul	 ecx, eax, 127
  0046d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00473	52		 push	 edx
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00479	e8 00 00 00 00	 call	 _CONS_Printf
  0047e	83 c4 08	 add	 esp, 8
  00481	eb 6a		 jmp	 SHORT $LN50@Command_Se
$LN46@Command_Se:

; 2636 : 		else if (gametype == GT_TAG)

  00483	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0048a	83 f8 03	 cmp	 eax, 3
  0048d	75 1e		 jne	 SHORT $LN48@Command_Se

; 2637 : 			CONS_Printf("%s", text[SERVERCHANGETEAM_HELP2]);

  0048f	b8 04 00 00 00	 mov	 eax, 4
  00494	c1 e0 07	 shl	 eax, 7
  00497	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  0049d	51		 push	 ecx
  0049e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  004a3	e8 00 00 00 00	 call	 _CONS_Printf
  004a8	83 c4 08	 add	 esp, 8
  004ab	eb 40		 jmp	 SHORT $LN50@Command_Se
$LN48@Command_Se:

; 2638 : 		else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  004ad	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004b4	83 f8 04	 cmp	 eax, 4
  004b7	74 15		 je	 SHORT $LN51@Command_Se
  004b9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004c0	83 f8 01	 cmp	 eax, 1
  004c3	75 28		 jne	 SHORT $LN50@Command_Se
  004c5	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  004cc	74 1f		 je	 SHORT $LN50@Command_Se
$LN51@Command_Se:

; 2639 : 			CONS_Printf("%s", text[SERVERCHANGETEAM_HELP3]);

  004ce	b8 04 00 00 00	 mov	 eax, 4
  004d3	69 c8 81 00 00
	00		 imul	 ecx, eax, 129
  004d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  004df	52		 push	 edx
  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  004e5	e8 00 00 00 00	 call	 _CONS_Printf
  004ea	83 c4 08	 add	 esp, 8
$LN50@Command_Se:

; 2640 : 		return;

  004ed	e9 55 02 00 00	 jmp	 $LN1@Command_Se
$LN45@Command_Se:

; 2641 : 	}
; 2642 : 
; 2643 : 	NetPacket.packet.playernum = atoi(COM_Argv(1));

  004f2	6a 01		 push	 1
  004f4	e8 00 00 00 00	 call	 _COM_Argv
  004f9	83 c4 04	 add	 esp, 4
  004fc	50		 push	 eax
  004fd	e8 00 00 00 00	 call	 _atoi
  00502	83 c4 04	 add	 esp, 4
  00505	89 45 b0	 mov	 DWORD PTR tv294[ebp], eax
  00508	8b 45 b0	 mov	 eax, DWORD PTR tv294[ebp]
  0050b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0050e	8b 4d fc	 mov	 ecx, DWORD PTR _NetPacket$[ebp]
  00511	83 e1 e0	 and	 ecx, -32		; ffffffe0H
  00514	0b c8		 or	 ecx, eax
  00516	89 4d fc	 mov	 DWORD PTR _NetPacket$[ebp], ecx

; 2644 : 
; 2645 : 	if (gametype == GT_MATCH && !cv_matchtype.value)

  00519	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00520	83 f8 01	 cmp	 eax, 1
  00523	75 5c		 jne	 SHORT $LN52@Command_Se
  00525	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0052c	75 53		 jne	 SHORT $LN52@Command_Se

; 2646 : 	{
; 2647 : 		if ((players[NetPacket.packet.playernum].spectator && !NetPacket.packet.newteam) ||

  0052e	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00531	83 e0 1f	 and	 eax, 31			; 0000001fH
  00534	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0053a	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR _players[ecx+496]
  00541	85 d2		 test	 edx, edx
  00543	74 0b		 je	 SHORT $LN56@Command_Se
  00545	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00548	c1 e8 05	 shr	 eax, 5
  0054b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0054e	74 25		 je	 SHORT $LN55@Command_Se
$LN56@Command_Se:
  00550	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00553	83 e0 1f	 and	 eax, 31			; 0000001fH
  00556	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0055c	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR _players[ecx+496]
  00563	85 d2		 test	 edx, edx
  00565	75 15		 jne	 SHORT $LN54@Command_Se
  00567	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0056a	c1 e8 05	 shr	 eax, 5
  0056d	83 e0 1f	 and	 eax, 31			; 0000001fH
  00570	83 f8 03	 cmp	 eax, 3
  00573	75 07		 jne	 SHORT $LN54@Command_Se
$LN55@Command_Se:

; 2648 : 			(!players[NetPacket.packet.playernum].spectator && NetPacket.packet.newteam == 3))
; 2649 : 			error = true;

  00575	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN54@Command_Se:

; 2650 : 	}

  0057c	e9 26 01 00 00	 jmp	 $LN65@Command_Se
$LN52@Command_Se:

; 2651 : 	else if (gametype == GT_TAG)

  00581	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00588	83 f8 03	 cmp	 eax, 3
  0058b	0f 85 a0 00 00
	00		 jne	 $LN57@Command_Se

; 2652 : 	{
; 2653 : 		if (((players[NetPacket.packet.playernum].pflags & PF_TAGIT) && NetPacket.packet.newteam == 1) ||
; 2654 : 			(!(players[NetPacket.packet.playernum].pflags & PF_TAGIT) && NetPacket.packet.newteam == 2) ||
; 2655 : 			(players[NetPacket.packet.playernum].spectator && !NetPacket.packet.newteam) ||

  00591	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00594	83 e0 1f	 and	 eax, 31			; 0000001fH
  00597	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0059d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  005a3	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  005a9	74 0e		 je	 SHORT $LN61@Command_Se
  005ab	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  005ae	c1 e8 05	 shr	 eax, 5
  005b1	83 e0 1f	 and	 eax, 31			; 0000001fH
  005b4	83 f8 01	 cmp	 eax, 1
  005b7	74 6f		 je	 SHORT $LN60@Command_Se
$LN61@Command_Se:
  005b9	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  005bc	83 e0 1f	 and	 eax, 31			; 0000001fH
  005bf	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  005c5	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  005cb	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  005d1	75 0e		 jne	 SHORT $LN62@Command_Se
  005d3	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  005d6	c1 e8 05	 shr	 eax, 5
  005d9	83 e0 1f	 and	 eax, 31			; 0000001fH
  005dc	83 f8 02	 cmp	 eax, 2
  005df	74 47		 je	 SHORT $LN60@Command_Se
$LN62@Command_Se:
  005e1	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  005e4	83 e0 1f	 and	 eax, 31			; 0000001fH
  005e7	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  005ed	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR _players[ecx+496]
  005f4	85 d2		 test	 edx, edx
  005f6	74 0b		 je	 SHORT $LN63@Command_Se
  005f8	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  005fb	c1 e8 05	 shr	 eax, 5
  005fe	83 e0 1f	 and	 eax, 31			; 0000001fH
  00601	74 25		 je	 SHORT $LN60@Command_Se
$LN63@Command_Se:
  00603	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00606	83 e0 1f	 and	 eax, 31			; 0000001fH
  00609	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0060f	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR _players[ecx+496]
  00616	85 d2		 test	 edx, edx
  00618	75 15		 jne	 SHORT $LN59@Command_Se
  0061a	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0061d	c1 e8 05	 shr	 eax, 5
  00620	83 e0 1f	 and	 eax, 31			; 0000001fH
  00623	83 f8 03	 cmp	 eax, 3
  00626	75 07		 jne	 SHORT $LN59@Command_Se
$LN60@Command_Se:

; 2656 : 			(!players[NetPacket.packet.playernum].spectator && NetPacket.packet.newteam == 3))
; 2657 : 			error = true;

  00628	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN59@Command_Se:

; 2658 : 	}

  0062f	eb 76		 jmp	 SHORT $LN65@Command_Se
$LN57@Command_Se:

; 2659 : 	else if ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  00631	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00638	83 f8 01	 cmp	 eax, 1
  0063b	75 09		 jne	 SHORT $LN67@Command_Se
  0063d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00644	75 0c		 jne	 SHORT $LN66@Command_Se
$LN67@Command_Se:
  00646	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0064d	83 f8 04	 cmp	 eax, 4
  00650	75 48		 jne	 SHORT $LN64@Command_Se
$LN66@Command_Se:

; 2660 : 	{
; 2661 : 		if (NetPacket.packet.newteam == (unsigned)players[NetPacket.packet.playernum].ctfteam ||

  00652	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00655	c1 e8 05	 shr	 eax, 5
  00658	83 e0 1f	 and	 eax, 31			; 0000001fH
  0065b	8b 4d fc	 mov	 ecx, DWORD PTR _NetPacket$[ebp]
  0065e	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00661	69 d1 fc 01 00
	00		 imul	 edx, ecx, 508
  00667	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR _players[edx+352]
  0066d	74 22		 je	 SHORT $LN69@Command_Se
  0066f	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00672	83 e0 1f	 and	 eax, 31			; 0000001fH
  00675	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0067b	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR _players[ecx+496]
  00682	85 d2		 test	 edx, edx
  00684	74 12		 je	 SHORT $LN68@Command_Se
  00686	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00689	c1 e8 05	 shr	 eax, 5
  0068c	83 e0 1f	 and	 eax, 31			; 0000001fH
  0068f	75 07		 jne	 SHORT $LN68@Command_Se
$LN69@Command_Se:

; 2662 : 			(players[NetPacket.packet.playernum].spectator && !NetPacket.packet.newteam))
; 2663 : 			error = true;

  00691	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN68@Command_Se:

; 2664 : 	}

  00698	eb 0d		 jmp	 SHORT $LN65@Command_Se
$LN64@Command_Se:

; 2665 : 	else
; 2666 : 		I_Error("Invalid gametype after initial checks!");

  0069a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BGAHPOLH@Invalid?5gametype?5after?5initial?5@
  0069f	e8 00 00 00 00	 call	 _I_Error
  006a4	83 c4 04	 add	 esp, 4
$LN65@Command_Se:

; 2667 : 
; 2668 : 	if (error)

  006a7	83 7d f8 00	 cmp	 DWORD PTR _error$[ebp], 0
  006ab	74 21		 je	 SHORT $LN70@Command_Se

; 2669 : 	{
; 2670 : 		CONS_Printf("%s", text[PLAYER_ONTEAM]);

  006ad	b8 04 00 00 00	 mov	 eax, 4
  006b2	69 c8 83 00 00
	00		 imul	 ecx, eax, 131
  006b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  006be	52		 push	 edx
  006bf	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  006c4	e8 00 00 00 00	 call	 _CONS_Printf
  006c9	83 c4 08	 add	 esp, 8

; 2671 : 		return;

  006cc	eb 79		 jmp	 SHORT $LN1@Command_Se
$LN70@Command_Se:

; 2672 : 	}
; 2673 : 
; 2674 : 	//additional check for hide and seek. Don't allow change of status after hidetime ends.
; 2675 : 	if (gametype == GT_TAG && cv_tagtype.value && leveltime >= (hidetime * TICRATE))

  006ce	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  006d5	83 f8 03	 cmp	 eax, 3
  006d8	75 44		 jne	 SHORT $LN72@Command_Se
  006da	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  006e1	74 3b		 je	 SHORT $LN72@Command_Se
  006e3	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  006ea	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  006f0	72 2c		 jb	 SHORT $LN72@Command_Se

; 2676 : 	{
; 2677 : 		if (NetPacket.packet.newteam)

  006f2	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  006f5	c1 e8 05	 shr	 eax, 5
  006f8	83 e0 1f	 and	 eax, 31			; 0000001fH
  006fb	74 21		 je	 SHORT $LN72@Command_Se

; 2678 : 		{
; 2679 : 			CONS_Printf("%s", text[NO_TAGCHANGE]);

  006fd	b8 04 00 00 00	 mov	 eax, 4
  00702	69 c8 84 00 00
	00		 imul	 ecx, eax, 132
  00708	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0070e	52		 push	 edx
  0070f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00714	e8 00 00 00 00	 call	 _CONS_Printf
  00719	83 c4 08	 add	 esp, 8

; 2680 : 			return;

  0071c	eb 29		 jmp	 SHORT $LN1@Command_Se
$LN72@Command_Se:

; 2681 : 		}
; 2682 : 	}
; 2683 : 
; 2684 : 	NetPacket.packet.verification = true; // This signals that it's a server change

  0071e	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00721	0d 00 04 00 00	 or	 eax, 1024		; 00000400H
  00726	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax

; 2685 : 
; 2686 : 	usvalue = SHORT(NetPacket.value.l|NetPacket.value.b);

  00729	0f b7 45 fc	 movzx	 eax, WORD PTR _NetPacket$[ebp]
  0072d	0f b7 4d fe	 movzx	 ecx, WORD PTR _NetPacket$[ebp+2]
  00731	0b c1		 or	 eax, ecx
  00733	66 89 45 f4	 mov	 WORD PTR _usvalue$[ebp], ax

; 2687 : 	SendNetXCmd(XD_TEAMCHANGE, &usvalue, sizeof(usvalue));

  00737	6a 02		 push	 2
  00739	8d 45 f4	 lea	 eax, DWORD PTR _usvalue$[ebp]
  0073c	50		 push	 eax
  0073d	6a 0b		 push	 11			; 0000000bH
  0073f	e8 00 00 00 00	 call	 _SendNetXCmd
  00744	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Se:

; 2688 : }

  00747	5f		 pop	 edi
  00748	5e		 pop	 esi
  00749	5b		 pop	 ebx
  0074a	8b e5		 mov	 esp, ebp
  0074c	5d		 pop	 ebp
  0074d	c3		 ret	 0
_Command_ServerTeamChange_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Teamchange2_f
_TEXT	SEGMENT
_usvalue$ = -12						; size = 2
_error$ = -8						; size = 4
_NetPacket$ = -4					; size = 4
_Command_Teamchange2_f PROC				; COMDAT

; 2468 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2469 : 	changeteam_union NetPacket;
; 2470 : 	boolean error = false;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _error$[ebp], 0

; 2471 : 	UINT16 usvalue;
; 2472 : 	NetPacket.value.l = NetPacket.value.b = 0;

  00010	33 c0		 xor	 eax, eax
  00012	66 89 45 fe	 mov	 WORD PTR _NetPacket$[ebp+2], ax
  00016	66 8b 4d fe	 mov	 cx, WORD PTR _NetPacket$[ebp+2]
  0001a	66 89 4d fc	 mov	 WORD PTR _NetPacket$[ebp], cx

; 2473 : 
; 2474 : 	//      0         1
; 2475 : 	// changeteam2 <color>
; 2476 : 
; 2477 : 	if (COM_Argc() <= 1)

  0001e	e8 00 00 00 00	 call	 _COM_Argc
  00023	83 f8 01	 cmp	 eax, 1
  00026	0f 87 9f 00 00
	00		 ja	 $LN2@Command_Te

; 2478 : 	{
; 2479 : 		if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  0002c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00033	83 f8 01	 cmp	 eax, 1
  00036	75 09		 jne	 SHORT $LN6@Command_Te
  00038	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0003f	74 0c		 je	 SHORT $LN5@Command_Te
$LN6@Command_Te:
  00041	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00048	83 f8 03	 cmp	 eax, 3
  0004b	75 1e		 jne	 SHORT $LN3@Command_Te
$LN5@Command_Te:

; 2480 : 			CONS_Printf("%s", text[CHANGETEAM2_HELP1]);

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	6b c8 7c	 imul	 ecx, eax, 124
  00055	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0005b	52		 push	 edx
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00061	e8 00 00 00 00	 call	 _CONS_Printf
  00066	83 c4 08	 add	 esp, 8
  00069	eb 5b		 jmp	 SHORT $LN8@Command_Te
$LN3@Command_Te:

; 2481 : 		else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0006b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00072	83 f8 04	 cmp	 eax, 4
  00075	74 15		 je	 SHORT $LN9@Command_Te
  00077	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007e	83 f8 01	 cmp	 eax, 1
  00081	75 27		 jne	 SHORT $LN7@Command_Te
  00083	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0008a	74 1e		 je	 SHORT $LN7@Command_Te
$LN9@Command_Te:

; 2482 : 			CONS_Printf("%s", text[CHANGETEAM2_HELP2]);

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 7d	 imul	 ecx, eax, 125
  00094	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0009a	52		 push	 edx
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a0	e8 00 00 00 00	 call	 _CONS_Printf
  000a5	83 c4 08	 add	 esp, 8
  000a8	eb 1c		 jmp	 SHORT $LN8@Command_Te
$LN7@Command_Te:

; 2483 : 		else
; 2484 : 			CONS_Printf("%s", text[NOMTF]);

  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	6b c8 7a	 imul	 ecx, eax, 122
  000b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b8	52		 push	 edx
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000be	e8 00 00 00 00	 call	 _CONS_Printf
  000c3	83 c4 08	 add	 esp, 8
$LN8@Command_Te:

; 2485 : 		return;

  000c6	e9 20 04 00 00	 jmp	 $LN1@Command_Te
$LN2@Command_Te:

; 2486 : 	}
; 2487 : 
; 2488 : 	if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  000cb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000d2	83 f8 01	 cmp	 eax, 1
  000d5	75 09		 jne	 SHORT $LN13@Command_Te
  000d7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  000de	74 10		 je	 SHORT $LN12@Command_Te
$LN13@Command_Te:
  000e0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000e7	83 f8 03	 cmp	 eax, 3
  000ea	0f 85 99 00 00
	00		 jne	 $LN10@Command_Te
$LN12@Command_Te:

; 2489 : 	{
; 2490 : 		if (!strcasecmp(COM_Argv(1), "spectator") || !strcasecmp(COM_Argv(1), "0"))

  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_09FNMDCDOI@spectator@
  000f5	6a 01		 push	 1
  000f7	e8 00 00 00 00	 call	 _COM_Argv
  000fc	83 c4 04	 add	 esp, 4
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _stricmp
  00105	83 c4 08	 add	 esp, 8
  00108	85 c0		 test	 eax, eax
  0010a	74 1c		 je	 SHORT $LN16@Command_Te
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00111	6a 01		 push	 1
  00113	e8 00 00 00 00	 call	 _COM_Argv
  00118	83 c4 04	 add	 esp, 4
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _stricmp
  00121	83 c4 08	 add	 esp, 8
  00124	85 c0		 test	 eax, eax
  00126	75 0d		 jne	 SHORT $LN14@Command_Te
$LN16@Command_Te:

; 2491 : 			NetPacket.packet.newteam = 0;

  00128	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0012b	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00130	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00133	eb 4f		 jmp	 SHORT $LN18@Command_Te
$LN14@Command_Te:

; 2492 : 		else if (!strcasecmp(COM_Argv(1), "playing") || !strcasecmp(COM_Argv(1), "1"))

  00135	68 00 00 00 00	 push	 OFFSET ??_C@_07GDCKGKBF@playing@
  0013a	6a 01		 push	 1
  0013c	e8 00 00 00 00	 call	 _COM_Argv
  00141	83 c4 04	 add	 esp, 4
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 _stricmp
  0014a	83 c4 08	 add	 esp, 8
  0014d	85 c0		 test	 eax, eax
  0014f	74 1c		 je	 SHORT $LN19@Command_Te
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  00156	6a 01		 push	 1
  00158	e8 00 00 00 00	 call	 _COM_Argv
  0015d	83 c4 04	 add	 esp, 4
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _stricmp
  00166	83 c4 08	 add	 esp, 8
  00169	85 c0		 test	 eax, eax
  0016b	75 10		 jne	 SHORT $LN17@Command_Te
$LN19@Command_Te:

; 2493 : 			NetPacket.packet.newteam = 3;

  0016d	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00170	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00175	83 c8 60	 or	 eax, 96			; 00000060H
  00178	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  0017b	eb 07		 jmp	 SHORT $LN18@Command_Te
$LN17@Command_Te:

; 2494 : 		else
; 2495 : 			error = true;

  0017d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN18@Command_Te:

; 2496 : 	}

  00184	e9 2b 01 00 00	 jmp	 $LN21@Command_Te
$LN10@Command_Te:

; 2497 : 	else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  00189	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00190	83 f8 04	 cmp	 eax, 4
  00193	74 1d		 je	 SHORT $LN22@Command_Te
  00195	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0019c	83 f8 01	 cmp	 eax, 1
  0019f	0f 85 ee 00 00
	00		 jne	 $LN20@Command_Te
  001a5	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  001ac	0f 84 e1 00 00
	00		 je	 $LN20@Command_Te
$LN22@Command_Te:

; 2498 : 	{
; 2499 : 		if (!strcasecmp(COM_Argv(1), "red") || !strcasecmp(COM_Argv(1), "1"))

  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_03FAAAOPJM@red@
  001b7	6a 01		 push	 1
  001b9	e8 00 00 00 00	 call	 _COM_Argv
  001be	83 c4 04	 add	 esp, 4
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 _stricmp
  001c7	83 c4 08	 add	 esp, 8
  001ca	85 c0		 test	 eax, eax
  001cc	74 1c		 je	 SHORT $LN25@Command_Te
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  001d3	6a 01		 push	 1
  001d5	e8 00 00 00 00	 call	 _COM_Argv
  001da	83 c4 04	 add	 esp, 4
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _stricmp
  001e3	83 c4 08	 add	 esp, 8
  001e6	85 c0		 test	 eax, eax
  001e8	75 13		 jne	 SHORT $LN23@Command_Te
$LN25@Command_Te:

; 2500 : 			NetPacket.packet.newteam = 1;

  001ea	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  001ed	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  001f2	83 c8 20	 or	 eax, 32			; 00000020H
  001f5	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  001f8	e9 94 00 00 00	 jmp	 $LN30@Command_Te
$LN23@Command_Te:

; 2501 : 		else if (!strcasecmp(COM_Argv(1), "blue") || !strcasecmp(COM_Argv(1), "2"))

  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_04OBGPFBCN@blue@
  00202	6a 01		 push	 1
  00204	e8 00 00 00 00	 call	 _COM_Argv
  00209	83 c4 04	 add	 esp, 4
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _stricmp
  00212	83 c4 08	 add	 esp, 8
  00215	85 c0		 test	 eax, eax
  00217	74 1c		 je	 SHORT $LN28@Command_Te
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_01FDFGLJHB@2@
  0021e	6a 01		 push	 1
  00220	e8 00 00 00 00	 call	 _COM_Argv
  00225	83 c4 04	 add	 esp, 4
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _stricmp
  0022e	83 c4 08	 add	 esp, 8
  00231	85 c0		 test	 eax, eax
  00233	75 10		 jne	 SHORT $LN26@Command_Te
$LN28@Command_Te:

; 2502 : 			NetPacket.packet.newteam = 2;

  00235	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00238	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  0023d	83 c8 40	 or	 eax, 64			; 00000040H
  00240	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00243	eb 4c		 jmp	 SHORT $LN30@Command_Te
$LN26@Command_Te:

; 2503 : 		else if (!strcasecmp(COM_Argv(1), "spectator") || !strcasecmp(COM_Argv(1), "0"))

  00245	68 00 00 00 00	 push	 OFFSET ??_C@_09FNMDCDOI@spectator@
  0024a	6a 01		 push	 1
  0024c	e8 00 00 00 00	 call	 _COM_Argv
  00251	83 c4 04	 add	 esp, 4
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 _stricmp
  0025a	83 c4 08	 add	 esp, 8
  0025d	85 c0		 test	 eax, eax
  0025f	74 1c		 je	 SHORT $LN31@Command_Te
  00261	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00266	6a 01		 push	 1
  00268	e8 00 00 00 00	 call	 _COM_Argv
  0026d	83 c4 04	 add	 esp, 4
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _stricmp
  00276	83 c4 08	 add	 esp, 8
  00279	85 c0		 test	 eax, eax
  0027b	75 0d		 jne	 SHORT $LN29@Command_Te
$LN31@Command_Te:

; 2504 : 			NetPacket.packet.newteam = 0;

  0027d	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00280	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00285	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00288	eb 07		 jmp	 SHORT $LN30@Command_Te
$LN29@Command_Te:

; 2505 : 		else
; 2506 : 			error = true;

  0028a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN30@Command_Te:

; 2507 : 	}

  00291	eb 21		 jmp	 SHORT $LN21@Command_Te
$LN20@Command_Te:

; 2508 : 	else
; 2509 : 	{
; 2510 : 		CONS_Printf("%s", text[NOMTF]);

  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	6b c8 7a	 imul	 ecx, eax, 122
  0029b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002a1	52		 push	 edx
  002a2	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002a7	e8 00 00 00 00	 call	 _CONS_Printf
  002ac	83 c4 08	 add	 esp, 8

; 2511 : 		return;

  002af	e9 37 02 00 00	 jmp	 $LN1@Command_Te
$LN21@Command_Te:

; 2512 : 	}
; 2513 : 
; 2514 : 	if (error)

  002b4	83 7d f8 00	 cmp	 DWORD PTR _error$[ebp], 0
  002b8	0f 84 81 00 00
	00		 je	 $LN32@Command_Te

; 2515 : 	{
; 2516 : 		if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  002be	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002c5	83 f8 01	 cmp	 eax, 1
  002c8	75 09		 jne	 SHORT $LN36@Command_Te
  002ca	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  002d1	74 0c		 je	 SHORT $LN35@Command_Te
$LN36@Command_Te:
  002d3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002da	83 f8 03	 cmp	 eax, 3
  002dd	75 1e		 jne	 SHORT $LN33@Command_Te
$LN35@Command_Te:

; 2517 : 			CONS_Printf("%s", text[CHANGETEAM2_HELP1]);

  002df	b8 04 00 00 00	 mov	 eax, 4
  002e4	6b c8 7c	 imul	 ecx, eax, 124
  002e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002ed	52		 push	 edx
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002f3	e8 00 00 00 00	 call	 _CONS_Printf
  002f8	83 c4 08	 add	 esp, 8
  002fb	eb 3d		 jmp	 SHORT $LN37@Command_Te
$LN33@Command_Te:

; 2518 : 		else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  002fd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00304	83 f8 04	 cmp	 eax, 4
  00307	74 15		 je	 SHORT $LN38@Command_Te
  00309	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00310	83 f8 01	 cmp	 eax, 1
  00313	75 25		 jne	 SHORT $LN37@Command_Te
  00315	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0031c	74 1c		 je	 SHORT $LN37@Command_Te
$LN38@Command_Te:

; 2519 : 			CONS_Printf("%s", text[CHANGETEAM2_HELP2]);

  0031e	b8 04 00 00 00	 mov	 eax, 4
  00323	6b c8 7d	 imul	 ecx, eax, 125
  00326	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0032c	52		 push	 edx
  0032d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00332	e8 00 00 00 00	 call	 _CONS_Printf
  00337	83 c4 08	 add	 esp, 8
$LN37@Command_Te:

; 2520 : 		return;

  0033a	e9 ac 01 00 00	 jmp	 $LN1@Command_Te
$LN32@Command_Te:

; 2521 : 	}
; 2522 : 
; 2523 : 	if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  0033f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00346	83 f8 01	 cmp	 eax, 1
  00349	75 09		 jne	 SHORT $LN42@Command_Te
  0034b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00352	74 0c		 je	 SHORT $LN41@Command_Te
$LN42@Command_Te:
  00354	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0035b	83 f8 03	 cmp	 eax, 3
  0035e	75 4c		 jne	 SHORT $LN39@Command_Te
$LN41@Command_Te:

; 2524 : 	{
; 2525 : 		if ((players[secondarydisplayplayer].spectator && !NetPacket.packet.newteam) ||

  00360	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0036a	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00371	85 c9		 test	 ecx, ecx
  00373	74 0b		 je	 SHORT $LN45@Command_Te
  00375	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00378	c1 e8 05	 shr	 eax, 5
  0037b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0037e	74 23		 je	 SHORT $LN44@Command_Te
$LN45@Command_Te:
  00380	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0038a	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00391	85 c9		 test	 ecx, ecx
  00393	75 15		 jne	 SHORT $LN43@Command_Te
  00395	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00398	c1 e8 05	 shr	 eax, 5
  0039b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0039e	83 f8 03	 cmp	 eax, 3
  003a1	75 07		 jne	 SHORT $LN43@Command_Te
$LN44@Command_Te:

; 2526 : 			(!players[secondarydisplayplayer].spectator && NetPacket.packet.newteam == 3))
; 2527 : 			error = true;

  003a3	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN43@Command_Te:

; 2528 : 	}

  003aa	eb 72		 jmp	 SHORT $LN47@Command_Te
$LN39@Command_Te:

; 2529 : 	else if ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  003ac	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003b3	83 f8 01	 cmp	 eax, 1
  003b6	75 09		 jne	 SHORT $LN49@Command_Te
  003b8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  003bf	75 0c		 jne	 SHORT $LN48@Command_Te
$LN49@Command_Te:
  003c1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003c8	83 f8 04	 cmp	 eax, 4
  003cb	75 44		 jne	 SHORT $LN46@Command_Te
$LN48@Command_Te:

; 2530 : 	{
; 2531 : 		if (NetPacket.packet.newteam == (unsigned)players[secondarydisplayplayer].ctfteam ||

  003cd	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  003d0	c1 e8 05	 shr	 eax, 5
  003d3	83 e0 1f	 and	 eax, 31			; 0000001fH
  003d6	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _secondarydisplayplayer, 508
  003e0	3b 81 60 01 00
	00		 cmp	 eax, DWORD PTR _players[ecx+352]
  003e6	74 20		 je	 SHORT $LN51@Command_Te
  003e8	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  003f2	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  003f9	85 c9		 test	 ecx, ecx
  003fb	74 12		 je	 SHORT $LN50@Command_Te
  003fd	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00400	c1 e8 05	 shr	 eax, 5
  00403	83 e0 1f	 and	 eax, 31			; 0000001fH
  00406	75 07		 jne	 SHORT $LN50@Command_Te
$LN51@Command_Te:

; 2532 : 			(players[secondarydisplayplayer].spectator && !NetPacket.packet.newteam))
; 2533 : 			error = true;

  00408	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN50@Command_Te:

; 2534 : 	}

  0040f	eb 0d		 jmp	 SHORT $LN47@Command_Te
$LN46@Command_Te:

; 2535 : 	else
; 2536 : 		I_Error("Invalid gametype after initial checks!");

  00411	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BGAHPOLH@Invalid?5gametype?5after?5initial?5@
  00416	e8 00 00 00 00	 call	 _I_Error
  0041b	83 c4 04	 add	 esp, 4
$LN47@Command_Te:

; 2537 : 
; 2538 : 	if (error)

  0041e	83 7d f8 00	 cmp	 DWORD PTR _error$[ebp], 0
  00422	74 24		 je	 SHORT $LN52@Command_Te

; 2539 : 	{
; 2540 : 		CONS_Printf("%s",text[ALREADYONTEAM]);

  00424	b8 04 00 00 00	 mov	 eax, 4
  00429	69 c8 f2 00 00
	00		 imul	 ecx, eax, 242
  0042f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00435	52		 push	 edx
  00436	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0043b	e8 00 00 00 00	 call	 _CONS_Printf
  00440	83 c4 08	 add	 esp, 8

; 2541 : 		return;

  00443	e9 a3 00 00 00	 jmp	 $LN1@Command_Te
$LN52@Command_Te:

; 2542 : 	}
; 2543 : 
; 2544 : 	if (!cv_allowteamchange.value && !NetPacket.packet.newteam) // allow swapping to spectator even in locked teams.

  00448	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowteamchange+20, 0
  0044f	75 2c		 jne	 SHORT $LN53@Command_Te
  00451	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00454	c1 e8 05	 shr	 eax, 5
  00457	83 e0 1f	 and	 eax, 31			; 0000001fH
  0045a	75 21		 jne	 SHORT $LN53@Command_Te

; 2545 : 	{
; 2546 : 		CONS_Printf("%s",text[NOTEAMCHANGE]);

  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	69 c8 f3 00 00
	00		 imul	 ecx, eax, 243
  00467	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0046d	52		 push	 edx
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00473	e8 00 00 00 00	 call	 _CONS_Printf
  00478	83 c4 08	 add	 esp, 8

; 2547 : 		return;

  0047b	eb 6e		 jmp	 SHORT $LN1@Command_Te
$LN53@Command_Te:

; 2548 : 	}
; 2549 : 
; 2550 : 	//additional check for hide and seek. Don't allow change of status after hidetime ends.
; 2551 : 	if (gametype == GT_TAG && cv_tagtype.value && leveltime >= (hidetime * TICRATE))

  0047d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00484	83 f8 03	 cmp	 eax, 3
  00487	75 44		 jne	 SHORT $LN55@Command_Te
  00489	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00490	74 3b		 je	 SHORT $LN55@Command_Te
  00492	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00499	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  0049f	72 2c		 jb	 SHORT $LN55@Command_Te

; 2552 : 	{
; 2553 : 		if (NetPacket.packet.newteam)

  004a1	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  004a4	c1 e8 05	 shr	 eax, 5
  004a7	83 e0 1f	 and	 eax, 31			; 0000001fH
  004aa	74 21		 je	 SHORT $LN55@Command_Te

; 2554 : 		{
; 2555 : 			CONS_Printf("%s", text[NO_TAGCHANGE]);

  004ac	b8 04 00 00 00	 mov	 eax, 4
  004b1	69 c8 84 00 00
	00		 imul	 ecx, eax, 132
  004b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  004bd	52		 push	 edx
  004be	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  004c3	e8 00 00 00 00	 call	 _CONS_Printf
  004c8	83 c4 08	 add	 esp, 8

; 2556 : 			return;

  004cb	eb 1e		 jmp	 SHORT $LN1@Command_Te
$LN55@Command_Te:

; 2557 : 		}
; 2558 : 	}
; 2559 : 
; 2560 : 	usvalue = SHORT(NetPacket.value.l|NetPacket.value.b);

  004cd	0f b7 45 fc	 movzx	 eax, WORD PTR _NetPacket$[ebp]
  004d1	0f b7 4d fe	 movzx	 ecx, WORD PTR _NetPacket$[ebp+2]
  004d5	0b c1		 or	 eax, ecx
  004d7	66 89 45 f4	 mov	 WORD PTR _usvalue$[ebp], ax

; 2561 : 	SendNetXCmd2(XD_TEAMCHANGE, &usvalue, sizeof(usvalue));

  004db	6a 02		 push	 2
  004dd	8d 45 f4	 lea	 eax, DWORD PTR _usvalue$[ebp]
  004e0	50		 push	 eax
  004e1	6a 0b		 push	 11			; 0000000bH
  004e3	e8 00 00 00 00	 call	 _SendNetXCmd2
  004e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Te:

; 2562 : }

  004eb	5f		 pop	 edi
  004ec	5e		 pop	 esi
  004ed	5b		 pop	 ebx
  004ee	8b e5		 mov	 esp, ebp
  004f0	5d		 pop	 ebp
  004f1	c3		 ret	 0
_Command_Teamchange2_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Teamchange_f
_TEXT	SEGMENT
_usvalue$ = -12						; size = 2
_error$ = -8						; size = 4
_NetPacket$ = -4					; size = 4
_Command_Teamchange_f PROC				; COMDAT

; 2371 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2372 : 	changeteam_union NetPacket;
; 2373 : 	boolean error = false;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _error$[ebp], 0

; 2374 : 	UINT16 usvalue;
; 2375 : 	NetPacket.value.l = NetPacket.value.b = 0;

  00010	33 c0		 xor	 eax, eax
  00012	66 89 45 fe	 mov	 WORD PTR _NetPacket$[ebp+2], ax
  00016	66 8b 4d fe	 mov	 cx, WORD PTR _NetPacket$[ebp+2]
  0001a	66 89 4d fc	 mov	 WORD PTR _NetPacket$[ebp], cx

; 2376 : 
; 2377 : 	//      0         1
; 2378 : 	// changeteam  <color>
; 2379 : 
; 2380 : 	if (COM_Argc() <= 1)

  0001e	e8 00 00 00 00	 call	 _COM_Argc
  00023	83 f8 01	 cmp	 eax, 1
  00026	0f 87 9f 00 00
	00		 ja	 $LN2@Command_Te

; 2381 : 	{
; 2382 : 		if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  0002c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00033	83 f8 01	 cmp	 eax, 1
  00036	75 09		 jne	 SHORT $LN6@Command_Te
  00038	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0003f	74 0c		 je	 SHORT $LN5@Command_Te
$LN6@Command_Te:
  00041	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00048	83 f8 03	 cmp	 eax, 3
  0004b	75 1e		 jne	 SHORT $LN3@Command_Te
$LN5@Command_Te:

; 2383 : 			CONS_Printf("%s", text[CHANGETEAM_HELP1]);

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	6b c8 78	 imul	 ecx, eax, 120
  00055	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0005b	52		 push	 edx
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00061	e8 00 00 00 00	 call	 _CONS_Printf
  00066	83 c4 08	 add	 esp, 8
  00069	eb 5b		 jmp	 SHORT $LN8@Command_Te
$LN3@Command_Te:

; 2384 : 		else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0006b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00072	83 f8 04	 cmp	 eax, 4
  00075	74 15		 je	 SHORT $LN9@Command_Te
  00077	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007e	83 f8 01	 cmp	 eax, 1
  00081	75 27		 jne	 SHORT $LN7@Command_Te
  00083	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0008a	74 1e		 je	 SHORT $LN7@Command_Te
$LN9@Command_Te:

; 2385 : 			CONS_Printf("%s", text[CHANGETEAM_HELP2]);

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 79	 imul	 ecx, eax, 121
  00094	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0009a	52		 push	 edx
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a0	e8 00 00 00 00	 call	 _CONS_Printf
  000a5	83 c4 08	 add	 esp, 8
  000a8	eb 1c		 jmp	 SHORT $LN8@Command_Te
$LN7@Command_Te:

; 2386 : 		else
; 2387 : 			CONS_Printf("%s", text[NOMTF]);

  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	6b c8 7a	 imul	 ecx, eax, 122
  000b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b8	52		 push	 edx
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000be	e8 00 00 00 00	 call	 _CONS_Printf
  000c3	83 c4 08	 add	 esp, 8
$LN8@Command_Te:

; 2388 : 		return;

  000c6	e9 20 04 00 00	 jmp	 $LN1@Command_Te
$LN2@Command_Te:

; 2389 : 	}
; 2390 : 
; 2391 : 	if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  000cb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000d2	83 f8 01	 cmp	 eax, 1
  000d5	75 09		 jne	 SHORT $LN13@Command_Te
  000d7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  000de	74 10		 je	 SHORT $LN12@Command_Te
$LN13@Command_Te:
  000e0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000e7	83 f8 03	 cmp	 eax, 3
  000ea	0f 85 99 00 00
	00		 jne	 $LN10@Command_Te
$LN12@Command_Te:

; 2392 : 	{
; 2393 : 		if (!strcasecmp(COM_Argv(1), "spectator") || !strcasecmp(COM_Argv(1), "0"))

  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_09FNMDCDOI@spectator@
  000f5	6a 01		 push	 1
  000f7	e8 00 00 00 00	 call	 _COM_Argv
  000fc	83 c4 04	 add	 esp, 4
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _stricmp
  00105	83 c4 08	 add	 esp, 8
  00108	85 c0		 test	 eax, eax
  0010a	74 1c		 je	 SHORT $LN16@Command_Te
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00111	6a 01		 push	 1
  00113	e8 00 00 00 00	 call	 _COM_Argv
  00118	83 c4 04	 add	 esp, 4
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _stricmp
  00121	83 c4 08	 add	 esp, 8
  00124	85 c0		 test	 eax, eax
  00126	75 0d		 jne	 SHORT $LN14@Command_Te
$LN16@Command_Te:

; 2394 : 			NetPacket.packet.newteam = 0;

  00128	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0012b	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00130	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00133	eb 4f		 jmp	 SHORT $LN18@Command_Te
$LN14@Command_Te:

; 2395 : 		else if (!strcasecmp(COM_Argv(1), "playing") || !strcasecmp(COM_Argv(1), "1"))

  00135	68 00 00 00 00	 push	 OFFSET ??_C@_07GDCKGKBF@playing@
  0013a	6a 01		 push	 1
  0013c	e8 00 00 00 00	 call	 _COM_Argv
  00141	83 c4 04	 add	 esp, 4
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 _stricmp
  0014a	83 c4 08	 add	 esp, 8
  0014d	85 c0		 test	 eax, eax
  0014f	74 1c		 je	 SHORT $LN19@Command_Te
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  00156	6a 01		 push	 1
  00158	e8 00 00 00 00	 call	 _COM_Argv
  0015d	83 c4 04	 add	 esp, 4
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _stricmp
  00166	83 c4 08	 add	 esp, 8
  00169	85 c0		 test	 eax, eax
  0016b	75 10		 jne	 SHORT $LN17@Command_Te
$LN19@Command_Te:

; 2396 : 			NetPacket.packet.newteam = 3;

  0016d	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00170	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00175	83 c8 60	 or	 eax, 96			; 00000060H
  00178	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  0017b	eb 07		 jmp	 SHORT $LN18@Command_Te
$LN17@Command_Te:

; 2397 : 		else
; 2398 : 			error = true;

  0017d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN18@Command_Te:

; 2399 : 	}

  00184	e9 2b 01 00 00	 jmp	 $LN21@Command_Te
$LN10@Command_Te:

; 2400 : 	else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  00189	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00190	83 f8 04	 cmp	 eax, 4
  00193	74 1d		 je	 SHORT $LN22@Command_Te
  00195	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0019c	83 f8 01	 cmp	 eax, 1
  0019f	0f 85 ee 00 00
	00		 jne	 $LN20@Command_Te
  001a5	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  001ac	0f 84 e1 00 00
	00		 je	 $LN20@Command_Te
$LN22@Command_Te:

; 2401 : 	{
; 2402 : 		if (!strcasecmp(COM_Argv(1), "red") || !strcasecmp(COM_Argv(1), "1"))

  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_03FAAAOPJM@red@
  001b7	6a 01		 push	 1
  001b9	e8 00 00 00 00	 call	 _COM_Argv
  001be	83 c4 04	 add	 esp, 4
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 _stricmp
  001c7	83 c4 08	 add	 esp, 8
  001ca	85 c0		 test	 eax, eax
  001cc	74 1c		 je	 SHORT $LN25@Command_Te
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  001d3	6a 01		 push	 1
  001d5	e8 00 00 00 00	 call	 _COM_Argv
  001da	83 c4 04	 add	 esp, 4
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _stricmp
  001e3	83 c4 08	 add	 esp, 8
  001e6	85 c0		 test	 eax, eax
  001e8	75 13		 jne	 SHORT $LN23@Command_Te
$LN25@Command_Te:

; 2403 : 			NetPacket.packet.newteam = 1;

  001ea	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  001ed	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  001f2	83 c8 20	 or	 eax, 32			; 00000020H
  001f5	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  001f8	e9 94 00 00 00	 jmp	 $LN30@Command_Te
$LN23@Command_Te:

; 2404 : 		else if (!strcasecmp(COM_Argv(1), "blue") || !strcasecmp(COM_Argv(1), "2"))

  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_04OBGPFBCN@blue@
  00202	6a 01		 push	 1
  00204	e8 00 00 00 00	 call	 _COM_Argv
  00209	83 c4 04	 add	 esp, 4
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _stricmp
  00212	83 c4 08	 add	 esp, 8
  00215	85 c0		 test	 eax, eax
  00217	74 1c		 je	 SHORT $LN28@Command_Te
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_01FDFGLJHB@2@
  0021e	6a 01		 push	 1
  00220	e8 00 00 00 00	 call	 _COM_Argv
  00225	83 c4 04	 add	 esp, 4
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _stricmp
  0022e	83 c4 08	 add	 esp, 8
  00231	85 c0		 test	 eax, eax
  00233	75 10		 jne	 SHORT $LN26@Command_Te
$LN28@Command_Te:

; 2405 : 			NetPacket.packet.newteam = 2;

  00235	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00238	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  0023d	83 c8 40	 or	 eax, 64			; 00000040H
  00240	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00243	eb 4c		 jmp	 SHORT $LN30@Command_Te
$LN26@Command_Te:

; 2406 : 		else if (!strcasecmp(COM_Argv(1), "spectator") || !strcasecmp(COM_Argv(1), "0"))

  00245	68 00 00 00 00	 push	 OFFSET ??_C@_09FNMDCDOI@spectator@
  0024a	6a 01		 push	 1
  0024c	e8 00 00 00 00	 call	 _COM_Argv
  00251	83 c4 04	 add	 esp, 4
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 _stricmp
  0025a	83 c4 08	 add	 esp, 8
  0025d	85 c0		 test	 eax, eax
  0025f	74 1c		 je	 SHORT $LN31@Command_Te
  00261	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00266	6a 01		 push	 1
  00268	e8 00 00 00 00	 call	 _COM_Argv
  0026d	83 c4 04	 add	 esp, 4
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _stricmp
  00276	83 c4 08	 add	 esp, 8
  00279	85 c0		 test	 eax, eax
  0027b	75 0d		 jne	 SHORT $LN29@Command_Te
$LN31@Command_Te:

; 2407 : 			NetPacket.packet.newteam = 0;

  0027d	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00280	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00285	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax
  00288	eb 07		 jmp	 SHORT $LN30@Command_Te
$LN29@Command_Te:

; 2408 : 		else
; 2409 : 			error = true;

  0028a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN30@Command_Te:

; 2410 : 	}

  00291	eb 21		 jmp	 SHORT $LN21@Command_Te
$LN20@Command_Te:

; 2411 : 	else
; 2412 : 	{
; 2413 : 		CONS_Printf("%s", text[NOMTF]);

  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	6b c8 7a	 imul	 ecx, eax, 122
  0029b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002a1	52		 push	 edx
  002a2	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002a7	e8 00 00 00 00	 call	 _CONS_Printf
  002ac	83 c4 08	 add	 esp, 8

; 2414 : 		return;

  002af	e9 37 02 00 00	 jmp	 $LN1@Command_Te
$LN21@Command_Te:

; 2415 : 	}
; 2416 : 
; 2417 : 	if (error)

  002b4	83 7d f8 00	 cmp	 DWORD PTR _error$[ebp], 0
  002b8	0f 84 81 00 00
	00		 je	 $LN32@Command_Te

; 2418 : 	{
; 2419 : 		if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  002be	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002c5	83 f8 01	 cmp	 eax, 1
  002c8	75 09		 jne	 SHORT $LN36@Command_Te
  002ca	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  002d1	74 0c		 je	 SHORT $LN35@Command_Te
$LN36@Command_Te:
  002d3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002da	83 f8 03	 cmp	 eax, 3
  002dd	75 1e		 jne	 SHORT $LN33@Command_Te
$LN35@Command_Te:

; 2420 : 			CONS_Printf("%s", text[CHANGETEAM_HELP1]);

  002df	b8 04 00 00 00	 mov	 eax, 4
  002e4	6b c8 78	 imul	 ecx, eax, 120
  002e7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002ed	52		 push	 edx
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002f3	e8 00 00 00 00	 call	 _CONS_Printf
  002f8	83 c4 08	 add	 esp, 8
  002fb	eb 3d		 jmp	 SHORT $LN37@Command_Te
$LN33@Command_Te:

; 2421 : 		else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  002fd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00304	83 f8 04	 cmp	 eax, 4
  00307	74 15		 je	 SHORT $LN38@Command_Te
  00309	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00310	83 f8 01	 cmp	 eax, 1
  00313	75 25		 jne	 SHORT $LN37@Command_Te
  00315	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0031c	74 1c		 je	 SHORT $LN37@Command_Te
$LN38@Command_Te:

; 2422 : 			CONS_Printf("%s", text[CHANGETEAM_HELP2]);

  0031e	b8 04 00 00 00	 mov	 eax, 4
  00323	6b c8 79	 imul	 ecx, eax, 121
  00326	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0032c	52		 push	 edx
  0032d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00332	e8 00 00 00 00	 call	 _CONS_Printf
  00337	83 c4 08	 add	 esp, 8
$LN37@Command_Te:

; 2423 : 		return;

  0033a	e9 ac 01 00 00	 jmp	 $LN1@Command_Te
$LN32@Command_Te:

; 2424 : 	}
; 2425 : 
; 2426 : 	if ((gametype == GT_MATCH && !cv_matchtype.value) || gametype == GT_TAG)

  0033f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00346	83 f8 01	 cmp	 eax, 1
  00349	75 09		 jne	 SHORT $LN42@Command_Te
  0034b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00352	74 0c		 je	 SHORT $LN41@Command_Te
$LN42@Command_Te:
  00354	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0035b	83 f8 03	 cmp	 eax, 3
  0035e	75 4c		 jne	 SHORT $LN39@Command_Te
$LN41@Command_Te:

; 2427 : 	{
; 2428 : 		if ((players[consoleplayer].spectator && !NetPacket.packet.newteam) ||

  00360	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0036a	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00371	85 c9		 test	 ecx, ecx
  00373	74 0b		 je	 SHORT $LN45@Command_Te
  00375	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00378	c1 e8 05	 shr	 eax, 5
  0037b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0037e	74 23		 je	 SHORT $LN44@Command_Te
$LN45@Command_Te:
  00380	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0038a	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00391	85 c9		 test	 ecx, ecx
  00393	75 15		 jne	 SHORT $LN43@Command_Te
  00395	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00398	c1 e8 05	 shr	 eax, 5
  0039b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0039e	83 f8 03	 cmp	 eax, 3
  003a1	75 07		 jne	 SHORT $LN43@Command_Te
$LN44@Command_Te:

; 2429 : 			(!players[consoleplayer].spectator && NetPacket.packet.newteam == 3))
; 2430 : 			error = true;

  003a3	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN43@Command_Te:

; 2431 : 	}

  003aa	eb 72		 jmp	 SHORT $LN47@Command_Te
$LN39@Command_Te:

; 2432 : 	else if ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  003ac	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003b3	83 f8 01	 cmp	 eax, 1
  003b6	75 09		 jne	 SHORT $LN49@Command_Te
  003b8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  003bf	75 0c		 jne	 SHORT $LN48@Command_Te
$LN49@Command_Te:
  003c1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003c8	83 f8 04	 cmp	 eax, 4
  003cb	75 44		 jne	 SHORT $LN46@Command_Te
$LN48@Command_Te:

; 2433 : 	{
; 2434 : 		if (NetPacket.packet.newteam == (unsigned)players[consoleplayer].ctfteam ||

  003cd	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  003d0	c1 e8 05	 shr	 eax, 5
  003d3	83 e0 1f	 and	 eax, 31			; 0000001fH
  003d6	69 0d 00 00 00
	00 fc 01 00 00	 imul	 ecx, DWORD PTR _consoleplayer, 508
  003e0	3b 81 60 01 00
	00		 cmp	 eax, DWORD PTR _players[ecx+352]
  003e6	74 20		 je	 SHORT $LN51@Command_Te
  003e8	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  003f2	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  003f9	85 c9		 test	 ecx, ecx
  003fb	74 12		 je	 SHORT $LN50@Command_Te
  003fd	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00400	c1 e8 05	 shr	 eax, 5
  00403	83 e0 1f	 and	 eax, 31			; 0000001fH
  00406	75 07		 jne	 SHORT $LN50@Command_Te
$LN51@Command_Te:

; 2435 : 			(players[consoleplayer].spectator && !NetPacket.packet.newteam))
; 2436 : 			error = true;

  00408	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN50@Command_Te:

; 2437 : 	}

  0040f	eb 0d		 jmp	 SHORT $LN47@Command_Te
$LN46@Command_Te:

; 2438 : 	else
; 2439 : 		I_Error("Invalid gametype after initial checks!");

  00411	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BGAHPOLH@Invalid?5gametype?5after?5initial?5@
  00416	e8 00 00 00 00	 call	 _I_Error
  0041b	83 c4 04	 add	 esp, 4
$LN47@Command_Te:

; 2440 : 
; 2441 : 	if (error)

  0041e	83 7d f8 00	 cmp	 DWORD PTR _error$[ebp], 0
  00422	74 24		 je	 SHORT $LN52@Command_Te

; 2442 : 	{
; 2443 : 		CONS_Printf("%s",text[ALREADYONTEAM]);

  00424	b8 04 00 00 00	 mov	 eax, 4
  00429	69 c8 f2 00 00
	00		 imul	 ecx, eax, 242
  0042f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00435	52		 push	 edx
  00436	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0043b	e8 00 00 00 00	 call	 _CONS_Printf
  00440	83 c4 08	 add	 esp, 8

; 2444 : 		return;

  00443	e9 a3 00 00 00	 jmp	 $LN1@Command_Te
$LN52@Command_Te:

; 2445 : 	}
; 2446 : 
; 2447 : 	if (!cv_allowteamchange.value && !NetPacket.packet.newteam) // allow swapping to spectator even in locked teams.

  00448	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowteamchange+20, 0
  0044f	75 2c		 jne	 SHORT $LN53@Command_Te
  00451	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00454	c1 e8 05	 shr	 eax, 5
  00457	83 e0 1f	 and	 eax, 31			; 0000001fH
  0045a	75 21		 jne	 SHORT $LN53@Command_Te

; 2448 : 	{
; 2449 : 		CONS_Printf("%s",text[NOTEAMCHANGE]);

  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	69 c8 f3 00 00
	00		 imul	 ecx, eax, 243
  00467	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0046d	52		 push	 edx
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00473	e8 00 00 00 00	 call	 _CONS_Printf
  00478	83 c4 08	 add	 esp, 8

; 2450 : 		return;

  0047b	eb 6e		 jmp	 SHORT $LN1@Command_Te
$LN53@Command_Te:

; 2451 : 	}
; 2452 : 
; 2453 : 	//additional check for hide and seek. Don't allow change of status after hidetime ends.
; 2454 : 	if (gametype == GT_TAG && cv_tagtype.value && leveltime >= (hidetime * TICRATE))

  0047d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00484	83 f8 03	 cmp	 eax, 3
  00487	75 44		 jne	 SHORT $LN55@Command_Te
  00489	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00490	74 3b		 je	 SHORT $LN55@Command_Te
  00492	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00499	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  0049f	72 2c		 jb	 SHORT $LN55@Command_Te

; 2455 : 	{
; 2456 : 		if (NetPacket.packet.newteam)

  004a1	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  004a4	c1 e8 05	 shr	 eax, 5
  004a7	83 e0 1f	 and	 eax, 31			; 0000001fH
  004aa	74 21		 je	 SHORT $LN55@Command_Te

; 2457 : 		{
; 2458 : 			CONS_Printf("%s", text[NO_TAGCHANGE]);

  004ac	b8 04 00 00 00	 mov	 eax, 4
  004b1	69 c8 84 00 00
	00		 imul	 ecx, eax, 132
  004b7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  004bd	52		 push	 edx
  004be	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  004c3	e8 00 00 00 00	 call	 _CONS_Printf
  004c8	83 c4 08	 add	 esp, 8

; 2459 : 			return;

  004cb	eb 1e		 jmp	 SHORT $LN1@Command_Te
$LN55@Command_Te:

; 2460 : 		}
; 2461 : 	}
; 2462 : 
; 2463 : 	usvalue = SHORT(NetPacket.value.l|NetPacket.value.b);

  004cd	0f b7 45 fc	 movzx	 eax, WORD PTR _NetPacket$[ebp]
  004d1	0f b7 4d fe	 movzx	 ecx, WORD PTR _NetPacket$[ebp+2]
  004d5	0b c1		 or	 eax, ecx
  004d7	66 89 45 f4	 mov	 WORD PTR _usvalue$[ebp], ax

; 2464 : 	SendNetXCmd(XD_TEAMCHANGE, &usvalue, sizeof(usvalue));

  004db	6a 02		 push	 2
  004dd	8d 45 f4	 lea	 eax, DWORD PTR _usvalue$[ebp]
  004e0	50		 push	 eax
  004e1	6a 0b		 push	 11			; 0000000bH
  004e3	e8 00 00 00 00	 call	 _SendNetXCmd
  004e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Te:

; 2465 : }

  004eb	5f		 pop	 edi
  004ec	5e		 pop	 esi
  004ed	5b		 pop	 ebx
  004ee	8b e5		 mov	 esp, ebp
  004f0	5d		 pop	 ebp
  004f1	c3		 ret	 0
_Command_Teamchange_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Showmap_f
_TEXT	SEGMENT
_Command_Showmap_f PROC					; COMDAT

; 4381 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4382 : 	if (gamestate == GS_LEVEL)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00010	0f 85 cb 00 00
	00		 jne	 $LN2@Command_Sh

; 4383 : 	{
; 4384 : 		if (mapheaderinfo[gamemap-1].actnum)

  00016	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0001d	83 e8 01	 sub	 eax, 1
  00020	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00026	0f b6 91 42 00
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+66]
  0002d	85 d2		 test	 edx, edx
  0002f	74 64		 je	 SHORT $LN4@Command_Sh

; 4385 : 			CONS_Printf(text[SHOWMAP1], G_BuildMapName(gamemap), gamemap, mapheaderinfo[gamemap-1].lvlttl, mapheaderinfo[gamemap-1].actnum);

  00031	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00038	83 e8 01	 sub	 eax, 1
  0003b	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00041	0f b6 91 42 00
	00 00		 movzx	 edx, BYTE PTR _mapheaderinfo[ecx+66]
  00048	52		 push	 edx
  00049	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00050	83 e8 01	 sub	 eax, 1
  00053	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00059	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  0005f	51		 push	 ecx
  00060	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _gamemap
  00067	52		 push	 edx
  00068	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _G_BuildMapName
  00075	83 c4 04	 add	 esp, 4
  00078	50		 push	 eax
  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	69 d1 b7 00 00
	00		 imul	 edx, ecx, 183
  00084	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _CONS_Printf
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	eb 4a		 jmp	 SHORT $LN5@Command_Sh
$LN4@Command_Sh:

; 4386 : 		else
; 4387 : 			CONS_Printf(text[SHOWMAP2], G_BuildMapName(gamemap), gamemap, mapheaderinfo[gamemap-1].lvlttl);

  00095	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0009c	83 e8 01	 sub	 eax, 1
  0009f	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000a5	81 c1 00 00 00
	00		 add	 ecx, OFFSET _mapheaderinfo
  000ab	51		 push	 ecx
  000ac	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _gamemap
  000b3	52		 push	 edx
  000b4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _G_BuildMapName
  000c1	83 c4 04	 add	 esp, 4
  000c4	50		 push	 eax
  000c5	b9 04 00 00 00	 mov	 ecx, 4
  000ca	69 d1 b8 00 00
	00		 imul	 edx, ecx, 184
  000d0	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _CONS_Printf
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Command_Sh:

; 4388 : 	}

  000df	eb 1f		 jmp	 SHORT $LN3@Command_Sh
$LN2@Command_Sh:

; 4389 : 	else
; 4390 : 		CONS_Printf("%s",text[MUSTBEINLEVEL]);

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	69 c8 fa 00 00
	00		 imul	 ecx, eax, 250
  000ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f2	52		 push	 edx
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000f8	e8 00 00 00 00	 call	 _CONS_Printf
  000fd	83 c4 08	 add	 esp, 8
$LN3@Command_Sh:

; 4391 : }

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
_Command_Showmap_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ExitLevel_f
_TEXT	SEGMENT
_Command_ExitLevel_f PROC				; COMDAT

; 4394 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4395 : 	if (!(netgame || (multiplayer && gametype != GT_COOP)) && !cv_debug)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	75 3e		 jne	 SHORT $LN2@Command_Ex
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00019	74 0b		 je	 SHORT $LN3@Command_Ex
  0001b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00022	85 c0		 test	 eax, eax
  00024	75 2a		 jne	 SHORT $LN2@Command_Ex
$LN3@Command_Ex:
  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002d	75 21		 jne	 SHORT $LN2@Command_Ex

; 4396 : 	{
; 4397 : 		CONS_Printf("%s",text[CANTUSESINGLEPLAYER]);

  0002f	b8 04 00 00 00	 mov	 eax, 4
  00034	69 c8 fb 00 00
	00		 imul	 ecx, eax, 251
  0003a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00046	e8 00 00 00 00	 call	 _CONS_Printf
  0004b	83 c4 08	 add	 esp, 8

; 4398 : 		return;

  0004e	eb 76		 jmp	 SHORT $LN1@Command_Ex
$LN2@Command_Ex:

; 4399 : 	}
; 4400 : 	if (!(server || (adminplayer == consoleplayer)))

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00057	75 2e		 jne	 SHORT $LN4@Command_Ex
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  0005e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00064	74 21		 je	 SHORT $LN4@Command_Ex

; 4401 : 	{
; 4402 : 		CONS_Printf("%s",text[SERVERONLY]);

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	69 c8 f4 00 00
	00		 imul	 ecx, eax, 244
  00071	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00077	52		 push	 edx
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0007d	e8 00 00 00 00	 call	 _CONS_Printf
  00082	83 c4 08	 add	 esp, 8

; 4403 : 		return;

  00085	eb 3f		 jmp	 SHORT $LN1@Command_Ex
$LN4@Command_Ex:

; 4404 : 	}
; 4405 : 	if (gamestate != GS_LEVEL || demoplayback)

  00087	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  0008e	75 09		 jne	 SHORT $LN6@Command_Ex
  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00097	74 1f		 je	 SHORT $LN5@Command_Ex
$LN6@Command_Ex:

; 4406 : 		CONS_Printf("%s",text[MUSTBEINLEVEL]);

  00099	b8 04 00 00 00	 mov	 eax, 4
  0009e	69 c8 fa 00 00
	00		 imul	 ecx, eax, 250
  000a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000aa	52		 push	 edx
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000b0	e8 00 00 00 00	 call	 _CONS_Printf
  000b5	83 c4 08	 add	 esp, 8
$LN5@Command_Ex:

; 4407 : 
; 4408 : 	SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  000b8	6a 00		 push	 0
  000ba	6a 00		 push	 0
  000bc	6a 07		 push	 7
  000be	e8 00 00 00 00	 call	 _SendNetXCmd
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Ex:

; 4409 : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
_Command_ExitLevel_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Skynum_f
_TEXT	SEGMENT
_Command_Skynum_f PROC					; COMDAT

; 4446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4447 : 	if (!cv_debug)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00010	75 43		 jne	 SHORT $LN2@Command_Sk

; 4448 : 	{
; 4449 : 		CONS_Printf("%s",text[NEED_DEVMODE]);

  00012	b8 04 00 00 00	 mov	 eax, 4
  00017	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  0001d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00023	52		 push	 edx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00029	e8 00 00 00 00	 call	 _CONS_Printf
  0002e	83 c4 08	 add	 esp, 8

; 4450 : 		CONS_Printf("%s",text[CHANGESKY_HELP]);

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	69 c8 bb 00 00
	00		 imul	 ecx, eax, 187
  0003c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00042	52		 push	 edx
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00048	e8 00 00 00 00	 call	 _CONS_Printf
  0004d	83 c4 08	 add	 esp, 8

; 4451 : 		return;

  00050	e9 9f 00 00 00	 jmp	 $LN1@Command_Sk
$LN2@Command_Sk:

; 4452 : 	}
; 4453 : 
; 4454 : 	if (COM_Argc() != 2)

  00055	e8 00 00 00 00	 call	 _COM_Argc
  0005a	83 f8 02	 cmp	 eax, 2
  0005d	74 21		 je	 SHORT $LN3@Command_Sk

; 4455 : 	{
; 4456 : 		CONS_Printf("%s",text[SKYNUM_HELP]);

  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	69 c8 bc 00 00
	00		 imul	 ecx, eax, 188
  0006a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00070	52		 push	 edx
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00076	e8 00 00 00 00	 call	 _CONS_Printf
  0007b	83 c4 08	 add	 esp, 8

; 4457 : 		return;

  0007e	eb 74		 jmp	 SHORT $LN1@Command_Sk
$LN3@Command_Sk:

; 4458 : 	}
; 4459 : 
; 4460 : 	if (netgame || multiplayer)

  00080	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00087	75 09		 jne	 SHORT $LN5@Command_Sk
  00089	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00090	74 21		 je	 SHORT $LN4@Command_Sk
$LN5@Command_Sk:

; 4461 : 	{
; 4462 : 		CONS_Printf("%s",text[CANTUSEMULTIPLAYER]);

  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	69 c8 fc 00 00
	00		 imul	 ecx, eax, 252
  0009d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000a3	52		 push	 edx
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a9	e8 00 00 00 00	 call	 _CONS_Printf
  000ae	83 c4 08	 add	 esp, 8

; 4463 : 		return;

  000b1	eb 41		 jmp	 SHORT $LN1@Command_Sk
$LN4@Command_Sk:

; 4464 : 	}
; 4465 : 
; 4466 : 	CONS_Printf(text[SKYNUM_PREVIEW], COM_Argv(1));

  000b3	6a 01		 push	 1
  000b5	e8 00 00 00 00	 call	 _COM_Argv
  000ba	83 c4 04	 add	 esp, 4
  000bd	50		 push	 eax
  000be	b8 04 00 00 00	 mov	 eax, 4
  000c3	69 c8 bd 00 00
	00		 imul	 ecx, eax, 189
  000c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000cf	52		 push	 edx
  000d0	e8 00 00 00 00	 call	 _CONS_Printf
  000d5	83 c4 08	 add	 esp, 8

; 4467 : 
; 4468 : 	P_SetupLevelSky(atoi(COM_Argv(1)));

  000d8	6a 01		 push	 1
  000da	e8 00 00 00 00	 call	 _COM_Argv
  000df	83 c4 04	 add	 esp, 4
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _atoi
  000e8	83 c4 04	 add	 esp, 4
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 _P_SetupLevelSky
  000f1	83 c4 04	 add	 esp, 4
$LN1@Command_Sk:

; 4469 : }

  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
_Command_Skynum_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Tunes_f
_TEXT	SEGMENT
_speed$1 = -12						; size = 4
_argc$ = -8						; size = 4
_tune$ = -4						; size = 4
_Command_Tunes_f PROC					; COMDAT

; 4472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4473 : 	INT32 tune;
; 4474 : 	const size_t argc = COM_Argc();

  00009	e8 00 00 00 00	 call	 _COM_Argc
  0000e	89 45 f8	 mov	 DWORD PTR _argc$[ebp], eax

; 4475 : 
; 4476 : 	if (argc < 2) //tunes slot ...

  00011	83 7d f8 02	 cmp	 DWORD PTR _argc$[ebp], 2
  00015	73 54		 jae	 SHORT $LN2@Command_Tu

; 4477 : 	{
; 4478 : 		CONS_Printf("%s", text[TUNES_HELP]);

  00017	b8 04 00 00 00	 mov	 eax, 4
  0001c	69 c8 be 00 00
	00		 imul	 ecx, eax, 190
  00022	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00028	52		 push	 edx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002e	e8 00 00 00 00	 call	 _CONS_Printf
  00033	83 c4 08	 add	 esp, 8

; 4479 : 		CONS_Printf(text[TUNES_CURRENT], (mapmusic &= ~2048));

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _mapmusic
  0003b	25 ff f7 ff ff	 and	 eax, -2049		; fffff7ffH
  00040	a3 00 00 00 00	 mov	 DWORD PTR _mapmusic, eax
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _mapmusic
  0004b	51		 push	 ecx
  0004c	ba 04 00 00 00	 mov	 edx, 4
  00051	69 c2 bf 00 00
	00		 imul	 eax, edx, 191
  00057	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _CONS_Printf
  00063	83 c4 08	 add	 esp, 8

; 4480 : 		return;

  00066	e9 e8 00 00 00	 jmp	 $LN9@Command_Tu
$LN2@Command_Tu:

; 4481 : 	}
; 4482 : 
; 4483 : 	tune = atoi(COM_Argv(1));

  0006b	6a 01		 push	 1
  0006d	e8 00 00 00 00	 call	 _COM_Argv
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _atoi
  0007b	83 c4 04	 add	 esp, 4
  0007e	89 45 fc	 mov	 DWORD PTR _tune$[ebp], eax

; 4484 : 
; 4485 : 	if (tune < mus_None || tune >= NUMMUSIC)

  00081	83 7d fc 00	 cmp	 DWORD PTR _tune$[ebp], 0
  00085	7c 09		 jl	 SHORT $LN4@Command_Tu
  00087	81 7d fc 1a 04
	00 00		 cmp	 DWORD PTR _tune$[ebp], 1050 ; 0000041aH
  0008e	7c 24		 jl	 SHORT $LN3@Command_Tu
$LN4@Command_Tu:

; 4486 : 	{
; 4487 : 		CONS_Printf(text[TUNES_VALIDSLOTS], NUMMUSIC - 1);

  00090	68 19 04 00 00	 push	 1049			; 00000419H
  00095	b8 04 00 00 00	 mov	 eax, 4
  0009a	69 c8 c0 00 00
	00		 imul	 ecx, eax, 192
  000a0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 _CONS_Printf
  000ac	83 c4 08	 add	 esp, 8

; 4488 : 		return;

  000af	e9 9f 00 00 00	 jmp	 $LN9@Command_Tu
$LN3@Command_Tu:

; 4489 : 	}
; 4490 : 
; 4491 : 	if (!strcasecmp(COM_Argv(1), "default"))

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_07DLHCIBDH@default@
  000b9	6a 01		 push	 1
  000bb	e8 00 00 00 00	 call	 _COM_Argv
  000c0	83 c4 04	 add	 esp, 4
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _stricmp
  000c9	83 c4 08	 add	 esp, 8
  000cc	85 c0		 test	 eax, eax
  000ce	75 19		 jne	 SHORT $LN5@Command_Tu

; 4492 : 		tune = mapheaderinfo[gamemap-1].musicslot;

  000d0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000d7	83 e8 01	 sub	 eax, 1
  000da	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  000e0	8b 91 48 00 00
	00		 mov	 edx, DWORD PTR _mapheaderinfo[ecx+72]
  000e6	89 55 fc	 mov	 DWORD PTR _tune$[ebp], edx
$LN5@Command_Tu:

; 4493 : 
; 4494 : 	mapmusic = (INT16)(tune | 2048);

  000e9	8b 45 fc	 mov	 eax, DWORD PTR _tune$[ebp]
  000ec	0d 00 08 00 00	 or	 eax, 2048		; 00000800H
  000f1	0f bf c8	 movsx	 ecx, ax
  000f4	89 0d 00 00 00
	00		 mov	 DWORD PTR _mapmusic, ecx

; 4495 : 
; 4496 : 	if (tune == mus_None)

  000fa	83 7d fc 00	 cmp	 DWORD PTR _tune$[ebp], 0
  000fe	75 08		 jne	 SHORT $LN6@Command_Tu

; 4497 : 		S_StopMusic();

  00100	e8 00 00 00 00	 call	 _S_StopMusic
  00105	90		 npad	 1
  00106	eb 0e		 jmp	 SHORT $LN7@Command_Tu
$LN6@Command_Tu:

; 4498 : 	else
; 4499 : 		S_ChangeMusic(tune, true);

  00108	6a 01		 push	 1
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _tune$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _S_ChangeMusic
  00113	83 c4 08	 add	 esp, 8
$LN7@Command_Tu:

; 4500 : 
; 4501 : 	if (argc > 2)

  00116	83 7d f8 02	 cmp	 DWORD PTR _argc$[ebp], 2
  0011a	76 37		 jbe	 SHORT $LN9@Command_Tu

; 4502 : 	{
; 4503 : 		float speed = (float)atof(COM_Argv(2));

  0011c	6a 02		 push	 2
  0011e	e8 00 00 00 00	 call	 _COM_Argv
  00123	83 c4 04	 add	 esp, 4
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _atof
  0012c	83 c4 04	 add	 esp, 4
  0012f	d9 5d f4	 fstp	 DWORD PTR _speed$1[ebp]

; 4504 : 		if (speed > 0.0f)

  00132	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _speed$1[ebp]
  00137	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0013e	76 13		 jbe	 SHORT $LN9@Command_Tu

; 4505 : 			S_SpeedMusic(speed);

  00140	51		 push	 ecx
  00141	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _speed$1[ebp]
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	e8 00 00 00 00	 call	 _S_SpeedMusic
  00150	83 c4 04	 add	 esp, 4
$LN9@Command_Tu:

; 4506 : 	}
; 4507 : }

  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
_Command_Tunes_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Displayplayer_f
_TEXT	SEGMENT
_Command_Displayplayer_f PROC				; COMDAT

; 4441 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4442 : 	CONS_Printf(text[DISPLAYPLAYERCMD], displayplayer);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  0000e	50		 push	 eax
  0000f	b9 04 00 00 00	 mov	 ecx, 4
  00014	69 d1 ba 00 00
	00		 imul	 edx, ecx, 186
  0001a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _CONS_Printf
  00026	83 c4 08	 add	 esp, 8

; 4443 : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_Command_Displayplayer_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Writethings_f
_TEXT	SEGMENT
_Command_Writethings_f PROC				; COMDAT

; 3527 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3528 : 	P_WriteThings(W_GetNumForName(G_BuildMapName(gamemap)) + ML_THINGS);

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _G_BuildMapName
  00016	83 c4 04	 add	 esp, 4
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _W_GetNumForName
  0001f	83 c4 04	 add	 esp, 4
  00022	83 c0 01	 add	 eax, 1
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _P_WriteThings
  0002b	83 c4 04	 add	 esp, 4

; 3529 : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_Command_Writethings_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Playintro_f
_TEXT	SEGMENT
_Command_Playintro_f PROC				; COMDAT

; 3515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3516 : 	if (netgame)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	74 02		 je	 SHORT $LN2@Command_Pl

; 3517 : 		return;

  00012	eb 06		 jmp	 SHORT $LN1@Command_Pl
$LN2@Command_Pl:

; 3518 : 
; 3519 : 	F_StartIntro();

  00014	e8 00 00 00 00	 call	 _F_StartIntro
  00019	90		 npad	 1
$LN1@Command_Pl:

; 3520 : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_Command_Playintro_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Quit_f
_TEXT	SEGMENT
_Command_Quit_f PROC					; COMDAT

; 3534 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3535 : 	I_Quit();

  00009	e8 00 00 00 00	 call	 _I_Quit
  0000e	90		 npad	 1

; 3536 : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_Command_Quit_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_JumpToAxis_f
_TEXT	SEGMENT
_Command_JumpToAxis_f PROC				; COMDAT

; 3499 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3500 : 	if (!cv_debug)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00010	75 1f		 jne	 SHORT $LN2@Command_Ju

; 3501 : 		CONS_Printf("%s",text[NEED_DEVMODE]);

  00012	b8 04 00 00 00	 mov	 eax, 4
  00017	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  0001d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00023	52		 push	 edx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00029	e8 00 00 00 00	 call	 _CONS_Printf
  0002e	83 c4 08	 add	 esp, 8
$LN2@Command_Ju:

; 3502 : 
; 3503 : 	if (COM_Argc() != 2)

  00031	e8 00 00 00 00	 call	 _COM_Argc
  00036	83 f8 02	 cmp	 eax, 2
  00039	74 21		 je	 SHORT $LN3@Command_Ju

; 3504 : 	{
; 3505 : 		CONS_Printf("%s",text[JUMPTOAXIS_HELP]);

  0003b	b8 04 00 00 00	 mov	 eax, 4
  00040	69 c8 ad 00 00
	00		 imul	 ecx, eax, 173
  00046	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0004c	52		 push	 edx
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00052	e8 00 00 00 00	 call	 _CONS_Printf
  00057	83 c4 08	 add	 esp, 8

; 3506 : 		return;

  0005a	eb 2c		 jmp	 SHORT $LN1@Command_Ju
$LN3@Command_Ju:

; 3507 : 	}
; 3508 : 
; 3509 : 	P_TransferToAxis(&players[consoleplayer], atoi(COM_Argv(1)));

  0005c	6a 01		 push	 1
  0005e	e8 00 00 00 00	 call	 _COM_Argv
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _atoi
  0006c	83 c4 04	 add	 esp, 4
  0006f	50		 push	 eax
  00070	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0007a	05 00 00 00 00	 add	 eax, OFFSET _players
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _P_TransferToAxis
  00085	83 c4 08	 add	 esp, 8
$LN1@Command_Ju:

; 3510 : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_Command_JumpToAxis_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ShowGametype_f
_TEXT	SEGMENT
_Command_ShowGametype_f PROC				; COMDAT

; 3491 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3492 : 	CONS_Printf(text[GAMETYPECMD], gametype);

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00010	50		 push	 eax
  00011	b9 04 00 00 00	 mov	 ecx, 4
  00016	69 d1 ac 00 00
	00		 imul	 edx, ecx, 172
  0001c	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _CONS_Printf
  00028	83 c4 08	 add	 esp, 8

; 3493 : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_Command_ShowGametype_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ModDetails_f
_TEXT	SEGMENT
_Command_ModDetails_f PROC				; COMDAT

; 3484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3485 : 	CONS_Printf(text[MODDETAILSCMD], MODID, MODVERSION, CODEBASE);

  00009	68 cf 00 00 00	 push	 207			; 000000cfH
  0000e	68 cf 00 00 00	 push	 207			; 000000cfH
  00013	6a 01		 push	 1
  00015	b8 04 00 00 00	 mov	 eax, 4
  0001a	69 c8 ab 00 00
	00		 imul	 ecx, eax, 171
  00020	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 _CONS_Printf
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 3486 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_Command_ModDetails_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Version_f
_TEXT	SEGMENT
_Command_Version_f PROC					; COMDAT

; 3478 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3479 : 	CONS_Printf(text[VERSIONCMD], VERSIONSTRING, compdate, comptime, comprevision);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _comprevision
  0000e	50		 push	 eax
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _comptime
  00015	51		 push	 ecx
  00016	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _compdate
  0001c	52		 push	 edx
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_07IJKPKDGN@?5v2?40?47@
  00022	b8 04 00 00 00	 mov	 eax, 4
  00027	69 c8 aa 00 00
	00		 imul	 ecx, eax, 170
  0002d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _CONS_Printf
  00039	83 c4 14	 add	 esp, 20			; 00000014H

; 3480 : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_Command_Version_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Pause
_TEXT	SEGMENT
tv71 = -89						; size = 1
tv76 = -89						; size = 1
_p_tmp$1 = -24						; size = 4
_p_tmp$2 = -20						; size = 4
_p_tmp$3 = -16						; size = 4
_p_tmp$4 = -12						; size = 4
_cp$ = -8						; size = 4
_buf$ = -4						; size = 2
_Command_Pause PROC					; COMDAT

; 2225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2226 : 	XBOXSTATIC UINT8 buf[2];
; 2227 : 	UINT8 *cp = buf;

  00009	8d 45 fc	 lea	 eax, DWORD PTR _buf$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _cp$[ebp], eax

; 2228 : 
; 2229 : 	if (COM_Argc() > 1)

  0000f	e8 00 00 00 00	 call	 _COM_Argc
  00014	83 f8 01	 cmp	 eax, 1
  00017	76 44		 jbe	 SHORT $LN14@Command_Pa
$LN4@Command_Pa:

; 2230 : 		WRITEUINT8(cp, (char)(atoi(COM_Argv(1)) != 0));

  00019	8b 45 f8	 mov	 eax, DWORD PTR _cp$[ebp]
  0001c	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  0001f	6a 01		 push	 1
  00021	e8 00 00 00 00	 call	 _COM_Argv
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _atoi
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 06		 je	 SHORT $LN23@Command_Pa
  00036	c6 45 a7 01	 mov	 BYTE PTR tv71[ebp], 1
  0003a	eb 04		 jmp	 SHORT $LN24@Command_Pa
$LN23@Command_Pa:
  0003c	c6 45 a7 00	 mov	 BYTE PTR tv71[ebp], 0
$LN24@Command_Pa:
  00040	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00043	8a 4d a7	 mov	 cl, BYTE PTR tv71[ebp]
  00046	88 08		 mov	 BYTE PTR [eax], cl
  00048	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  0004b	83 c0 01	 add	 eax, 1
  0004e	89 45 f4	 mov	 DWORD PTR _p_tmp$4[ebp], eax
  00051	8b 45 f4	 mov	 eax, DWORD PTR _p_tmp$4[ebp]
  00054	89 45 f8	 mov	 DWORD PTR _cp$[ebp], eax
  00057	33 c0		 xor	 eax, eax
  00059	75 be		 jne	 SHORT $LN4@Command_Pa
  0005b	eb 36		 jmp	 SHORT $LN6@Command_Pa
$LN14@Command_Pa:

; 2231 : 	else
; 2232 : 		WRITEUINT8(cp, (char)(!paused));

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _cp$[ebp]
  00060	89 45 f0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00063	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  0006a	85 c0		 test	 eax, eax
  0006c	75 06		 jne	 SHORT $LN25@Command_Pa
  0006e	c6 45 a7 01	 mov	 BYTE PTR tv76[ebp], 1
  00072	eb 04		 jmp	 SHORT $LN26@Command_Pa
$LN25@Command_Pa:
  00074	c6 45 a7 00	 mov	 BYTE PTR tv76[ebp], 0
$LN26@Command_Pa:
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _p_tmp$3[ebp]
  0007b	8a 55 a7	 mov	 dl, BYTE PTR tv76[ebp]
  0007e	88 11		 mov	 BYTE PTR [ecx], dl
  00080	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  00083	83 c0 01	 add	 eax, 1
  00086	89 45 f0	 mov	 DWORD PTR _p_tmp$3[ebp], eax
  00089	8b 45 f0	 mov	 eax, DWORD PTR _p_tmp$3[ebp]
  0008c	89 45 f8	 mov	 DWORD PTR _cp$[ebp], eax
  0008f	33 c0		 xor	 eax, eax
  00091	75 ca		 jne	 SHORT $LN14@Command_Pa
$LN6@Command_Pa:

; 2233 : 
; 2234 : 	if (dedicated)

  00093	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  0009a	74 21		 je	 SHORT $LN16@Command_Pa
$LN10@Command_Pa:

; 2235 : 		WRITEUINT8(cp, 1);

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _cp$[ebp]
  0009f	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000a2	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000a5	c6 00 01	 mov	 BYTE PTR [eax], 1
  000a8	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000ab	83 c0 01	 add	 eax, 1
  000ae	89 45 ec	 mov	 DWORD PTR _p_tmp$2[ebp], eax
  000b1	8b 45 ec	 mov	 eax, DWORD PTR _p_tmp$2[ebp]
  000b4	89 45 f8	 mov	 DWORD PTR _cp$[ebp], eax
  000b7	33 c0		 xor	 eax, eax
  000b9	75 e1		 jne	 SHORT $LN10@Command_Pa
  000bb	eb 1f		 jmp	 SHORT $LN12@Command_Pa
$LN16@Command_Pa:

; 2236 : 	else
; 2237 : 		WRITEUINT8(cp, 0);

  000bd	8b 45 f8	 mov	 eax, DWORD PTR _cp$[ebp]
  000c0	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000c3	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000c6	c6 00 00	 mov	 BYTE PTR [eax], 0
  000c9	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000cc	83 c0 01	 add	 eax, 1
  000cf	89 45 e8	 mov	 DWORD PTR _p_tmp$1[ebp], eax
  000d2	8b 45 e8	 mov	 eax, DWORD PTR _p_tmp$1[ebp]
  000d5	89 45 f8	 mov	 DWORD PTR _cp$[ebp], eax
  000d8	33 c0		 xor	 eax, eax
  000da	75 e1		 jne	 SHORT $LN16@Command_Pa
$LN12@Command_Pa:

; 2238 : 
; 2239 : 	if (cv_pause.value || server || (adminplayer == consoleplayer))

  000dc	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pause+20, 0
  000e3	75 16		 jne	 SHORT $LN20@Command_Pa
  000e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000ec	75 0d		 jne	 SHORT $LN20@Command_Pa
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  000f3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  000f9	75 42		 jne	 SHORT $LN18@Command_Pa
$LN20@Command_Pa:

; 2240 : 	{
; 2241 : 		if (!(gamestate == GS_LEVEL || gamestate == GS_INTERMISSION))

  000fb	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00102	74 27		 je	 SHORT $LN21@Command_Pa
  00104	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  0010b	74 1e		 je	 SHORT $LN21@Command_Pa

; 2242 : 		{
; 2243 : 			CONS_Printf("%s",text[PAUSEINFO]);

  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 08	 shl	 eax, 8
  00115	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  0011b	51		 push	 ecx
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00121	e8 00 00 00 00	 call	 _CONS_Printf
  00126	83 c4 08	 add	 esp, 8

; 2244 : 			return;

  00129	eb 31		 jmp	 SHORT $LN19@Command_Pa
$LN21@Command_Pa:

; 2245 : 		}
; 2246 : 		SendNetXCmd(XD_PAUSE, &buf, 2);

  0012b	6a 02		 push	 2
  0012d	8d 45 fc	 lea	 eax, DWORD PTR _buf$[ebp]
  00130	50		 push	 eax
  00131	6a 09		 push	 9
  00133	e8 00 00 00 00	 call	 _SendNetXCmd
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2247 : 	}

  0013b	eb 1f		 jmp	 SHORT $LN19@Command_Pa
$LN18@Command_Pa:

; 2248 : 	else
; 2249 : 		CONS_Printf("%s",text[SERVERPAUSE]);

  0013d	b8 04 00 00 00	 mov	 eax, 4
  00142	69 c8 ff 00 00
	00		 imul	 ecx, eax, 255
  00148	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0014e	52		 push	 edx
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00154	e8 00 00 00 00	 call	 _CONS_Printf
  00159	83 c4 08	 add	 esp, 8
$LN19@Command_Pa:

; 2250 : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
_Command_Pause ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_RunSOC
_TEXT	SEGMENT
_length$ = -268						; size = 4
_buf$ = -264						; size = 255
_fn$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Command_RunSOC PROC					; COMDAT

; 3122 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3123 : 	const char *fn;
; 3124 : 	XBOXSTATIC char buf[255];
; 3125 : 	size_t length = 0;

  00016	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _length$[ebp], 0

; 3126 : 
; 3127 : 	if (COM_Argc() != 2)

  00020	e8 00 00 00 00	 call	 _COM_Argc
  00025	83 f8 02	 cmp	 eax, 2
  00028	74 26		 je	 SHORT $LN2@Command_Ru

; 3128 : 	{
; 3129 : 		CONS_Printf("%s", text[RUNSOC_HELP]);

  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	69 c8 9c 00 00
	00		 imul	 ecx, eax, 156
  00035	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0003b	52		 push	 edx
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00041	e8 00 00 00 00	 call	 _CONS_Printf
  00046	83 c4 08	 add	 esp, 8

; 3130 : 		return;

  00049	e9 03 01 00 00	 jmp	 $LN1@Command_Ru

; 3131 : 	}

  0004e	eb 0d		 jmp	 SHORT $LN3@Command_Ru
$LN2@Command_Ru:

; 3132 : 	else
; 3133 : 		fn = COM_Argv(1);

  00050	6a 01		 push	 1
  00052	e8 00 00 00 00	 call	 _COM_Argv
  00057	83 c4 04	 add	 esp, 4
  0005a	89 45 f8	 mov	 DWORD PTR _fn$[ebp], eax
$LN3@Command_Ru:

; 3134 : 
; 3135 : 	if (netgame && !(server || consoleplayer == adminplayer))

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00064	74 3a		 je	 SHORT $LN4@Command_Ru
  00066	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0006d	75 31		 jne	 SHORT $LN4@Command_Ru
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00074	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  0007a	74 24		 je	 SHORT $LN4@Command_Ru

; 3136 : 	{
; 3137 : 		CONS_Printf("%s", text[SERVERONLY]);

  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	69 c8 f4 00 00
	00		 imul	 ecx, eax, 244
  00087	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0008d	52		 push	 edx
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00093	e8 00 00 00 00	 call	 _CONS_Printf
  00098	83 c4 08	 add	 esp, 8

; 3138 : 		return;

  0009b	e9 b1 00 00 00	 jmp	 $LN1@Command_Ru
$LN4@Command_Ru:

; 3139 : 	}
; 3140 : 
; 3141 : 	if (!(netgame || multiplayer))

  000a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000a7	75 5c		 jne	 SHORT $LN5@Command_Ru
  000a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000b0	75 53		 jne	 SHORT $LN5@Command_Ru

; 3142 : 	{
; 3143 : 		if (!P_RunSOC(fn))

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _P_RunSOC
  000bb	83 c4 04	 add	 esp, 4
  000be	85 c0		 test	 eax, eax
  000c0	75 0f		 jne	 SHORT $LN6@Command_Ru

; 3144 : 			CONS_Printf("Could not find SOC.\n");

  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FEEJDHML@Could?5not?5find?5SOC?4?6@
  000c7	e8 00 00 00 00	 call	 _CONS_Printf
  000cc	83 c4 04	 add	 esp, 4
  000cf	eb 32		 jmp	 SHORT $LN8@Command_Ru
$LN6@Command_Ru:

; 3145 : 		else if (!modifiedgame)

  000d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  000d8	75 29		 jne	 SHORT $LN8@Command_Ru

; 3146 : 		{
; 3147 : 			modifiedgame = true;

  000da	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1

; 3148 : 			CONS_Printf("%s", text[GAMEMODIFIED]);

  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  000ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f5	52		 push	 edx
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000fb	e8 00 00 00 00	 call	 _CONS_Printf
  00100	83 c4 08	 add	 esp, 8
$LN8@Command_Ru:

; 3149 : 		}
; 3150 : 		return;

  00103	eb 4c		 jmp	 SHORT $LN1@Command_Ru
$LN5@Command_Ru:

; 3151 : 	}
; 3152 : 
; 3153 : 	nameonly(strcpy(buf, fn));

  00105	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  00108	50		 push	 eax
  00109	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 _strcpy
  00115	83 c4 08	 add	 esp, 8
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 _nameonly
  0011e	83 c4 04	 add	 esp, 4

; 3154 : 	length = strlen(buf)+1;

  00121	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 _strlen
  0012d	83 c4 04	 add	 esp, 4
  00130	83 c0 01	 add	 eax, 1
  00133	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _length$[ebp], eax

; 3155 : 
; 3156 : 	SendNetXCmd(XD_RUNSOC, buf, length);

  00139	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _length$[ebp]
  0013f	50		 push	 eax
  00140	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00146	51		 push	 ecx
  00147	6a 11		 push	 17			; 00000011H
  00149	e8 00 00 00 00	 call	 _SendNetXCmd
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Ru:

; 3157 : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00157	33 cd		 xor	 ecx, ebp
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
_Command_RunSOC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ListWADS_f
_TEXT	SEGMENT
_tempname$ = -8						; size = 4
_i$ = -4						; size = 4
_Command_ListWADS_f PROC				; COMDAT

; 3456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3457 : 	INT32 i = numwadfiles;

  00009	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  00010	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 3458 : 	char *tempname;
; 3459 : 	CONS_Printf(text[NUMWADSLOADED],numwadfiles);

  00013	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _numwadfiles
  0001a	50		 push	 eax
  0001b	b9 04 00 00 00	 mov	 ecx, 4
  00020	69 d1 a6 00 00
	00		 imul	 edx, ecx, 166
  00026	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _CONS_Printf
  00032	83 c4 08	 add	 esp, 8

; 3460 : 	for (i--; i; i--)

  00035	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00038	83 e8 01	 sub	 eax, 1
  0003b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  0003e	eb 09		 jmp	 SHORT $LN4@Command_Li
$LN2@Command_Li:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00043	83 e8 01	 sub	 eax, 1
  00046	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Command_Li:
  00049	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  0004d	0f 84 80 00 00
	00		 je	 $LN3@Command_Li

; 3461 : 	{
; 3462 : 		nameonly(tempname = va("%s", wadfiles[i]->filename));

  00053	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00056	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _wadfiles[eax*4]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00065	e8 00 00 00 00	 call	 _va
  0006a	83 c4 08	 add	 esp, 8
  0006d	89 45 f8	 mov	 DWORD PTR _tempname$[ebp], eax
  00070	8b 45 f8	 mov	 eax, DWORD PTR _tempname$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _nameonly
  00079	83 c4 04	 add	 esp, 4

; 3463 : 		if (i > mainwads)

  0007c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _mainwads
  00083	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00086	7e 24		 jle	 SHORT $LN5@Command_Li

; 3464 : 			CONS_Printf(text[LISTWAD1], i, tempname);

  00088	8b 45 f8	 mov	 eax, DWORD PTR _tempname$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008f	51		 push	 ecx
  00090	ba 04 00 00 00	 mov	 edx, 4
  00095	69 c2 a7 00 00
	00		 imul	 eax, edx, 167
  0009b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _CONS_Printf
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000aa	eb 22		 jmp	 SHORT $LN6@Command_Li
$LN5@Command_Li:

; 3465 : 		else
; 3466 : 			CONS_Printf(text[LISTWAD2], i, tempname);

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _tempname$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000b3	51		 push	 ecx
  000b4	ba 04 00 00 00	 mov	 edx, 4
  000b9	69 c2 a8 00 00
	00		 imul	 eax, edx, 168
  000bf	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _CONS_Printf
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Command_Li:

; 3467 : 	}

  000ce	e9 6d ff ff ff	 jmp	 $LN2@Command_Li
$LN3@Command_Li:

; 3468 : 	CONS_Printf(text[LISTIWAD], wadfiles[0]->filename);

  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 00	 imul	 ecx, eax, 0
  000db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _wadfiles[ecx]
  000e1	8b 02		 mov	 eax, DWORD PTR [edx]
  000e3	50		 push	 eax
  000e4	b9 04 00 00 00	 mov	 ecx, 4
  000e9	69 d1 a9 00 00
	00		 imul	 edx, ecx, 169
  000ef	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _CONS_Printf
  000fb	83 c4 08	 add	 esp, 8

; 3469 : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
_Command_ListWADS_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Addfile
_TEXT	SEGMENT
tv227 = -376						; size = 8
tv224 = -368						; size = 4
_t$1 = -300						; size = 4
_fhandle$2 = -296					; size = 4
_md5sum$3 = -292					; size = 17
_i$ = -272						; size = 4
_length$ = -268						; size = 4
_buf$ = -264						; size = 255
_fn$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Command_Addfile PROC					; COMDAT

; 3210 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3211 : 	const char *fn;
; 3212 : 	XBOXSTATIC char buf[255];
; 3213 : 	size_t length;
; 3214 : 	INT32 i;
; 3215 : 
; 3216 : 	if (COM_Argc() != 2)

  00016	e8 00 00 00 00	 call	 _COM_Argc
  0001b	83 f8 02	 cmp	 eax, 2
  0001e	74 26		 je	 SHORT $LN5@Command_Ad

; 3217 : 	{
; 3218 : 		CONS_Printf("%s", text[ADDFILE_HELP]);

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	69 c8 a0 00 00
	00		 imul	 ecx, eax, 160
  0002b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00031	52		 push	 edx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00037	e8 00 00 00 00	 call	 _CONS_Printf
  0003c	83 c4 08	 add	 esp, 8

; 3219 : 		return;

  0003f	e9 dd 02 00 00	 jmp	 $LN19@Command_Ad

; 3220 : 	}

  00044	eb 0d		 jmp	 SHORT $LN6@Command_Ad
$LN5@Command_Ad:

; 3221 : 	else
; 3222 : 		fn = COM_Argv(1);

  00046	6a 01		 push	 1
  00048	e8 00 00 00 00	 call	 _COM_Argv
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f8	 mov	 DWORD PTR _fn$[ebp], eax
$LN6@Command_Ad:

; 3223 : 
; 3224 : 	// Disallow non-printing characters and semicolons.
; 3225 : 	for (i = 0; fn[i] != '\0'; i++)

  00053	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0005d	eb 0f		 jmp	 SHORT $LN4@Command_Ad
$LN2@Command_Ad:
  0005f	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN4@Command_Ad:
  0006e	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  00071	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _i$[ebp]
  00077	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0007a	85 c9		 test	 ecx, ecx
  0007c	74 31		 je	 SHORT $LN3@Command_Ad

; 3226 : 		if (!isprint(fn[i]) || fn[i] == ';')

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  00081	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _i$[ebp]
  00087	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _isprint
  00090	83 c4 04	 add	 esp, 4
  00093	85 c0		 test	 eax, eax
  00095	74 11		 je	 SHORT $LN8@Command_Ad
  00097	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  0009a	03 85 f0 fe ff
	ff		 add	 eax, DWORD PTR _i$[ebp]
  000a0	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000a3	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  000a6	75 05		 jne	 SHORT $LN7@Command_Ad
$LN8@Command_Ad:

; 3227 : 			return;

  000a8	e9 74 02 00 00	 jmp	 $LN19@Command_Ad
$LN7@Command_Ad:
  000ad	eb b0		 jmp	 SHORT $LN2@Command_Ad
$LN3@Command_Ad:

; 3228 : 
; 3229 : 	if (!W_VerifyNMUSlumps(fn))

  000af	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _W_VerifyNMUSlumps
  000b8	83 c4 04	 add	 esp, 4
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 87 00 00
	00		 jne	 $LN9@Command_Ad

; 3230 : 	{
; 3231 : 		// ... But only so long as they contain nothing more then music and sprites.
; 3232 : 		if (netgame && !(server || adminplayer == consoleplayer))

  000c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000ca	74 3a		 je	 SHORT $LN10@Command_Ad
  000cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000d3	75 31		 jne	 SHORT $LN10@Command_Ad
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  000da	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  000e0	74 24		 je	 SHORT $LN10@Command_Ad

; 3233 : 		{
; 3234 : 			CONS_Printf("%s", text[SERVERONLY]);

  000e2	b8 04 00 00 00	 mov	 eax, 4
  000e7	69 c8 f4 00 00
	00		 imul	 ecx, eax, 244
  000ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f3	52		 push	 edx
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000f9	e8 00 00 00 00	 call	 _CONS_Printf
  000fe	83 c4 08	 add	 esp, 8

; 3235 : 			return;

  00101	e9 1b 02 00 00	 jmp	 $LN19@Command_Ad
$LN10@Command_Ad:

; 3236 : 		}
; 3237 : 		if (!(netgame || multiplayer) && !modifiedgame) // Only announce modifiedgame ONCE.

  00106	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0010d	75 31		 jne	 SHORT $LN11@Command_Ad
  0010f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00116	75 28		 jne	 SHORT $LN11@Command_Ad
  00118	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  0011f	75 1f		 jne	 SHORT $LN11@Command_Ad

; 3238 : 			CONS_Printf("%s", text[GAMEMODIFIED]);

  00121	b8 04 00 00 00	 mov	 eax, 4
  00126	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  0012c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00138	e8 00 00 00 00	 call	 _CONS_Printf
  0013d	83 c4 08	 add	 esp, 8
$LN11@Command_Ad:

; 3239 : 		modifiedgame = true;

  00140	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1
$LN9@Command_Ad:

; 3240 : 	}
; 3241 : 
; 3242 : 	// Add file on your client directly if it is trivial, or you aren't in a netgame.
; 3243 : 	if (!(netgame || multiplayer) || W_VerifyNMUSlumps(fn))

  0014a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00151	75 09		 jne	 SHORT $LN14@Command_Ad
  00153	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0015a	74 10		 je	 SHORT $LN13@Command_Ad
$LN14@Command_Ad:
  0015c	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _W_VerifyNMUSlumps
  00165	83 c4 04	 add	 esp, 4
  00168	85 c0		 test	 eax, eax
  0016a	74 13		 je	 SHORT $LN12@Command_Ad
$LN13@Command_Ad:

; 3244 : 	{
; 3245 : 		P_AddWadFile(fn, NULL);

  0016c	6a 00		 push	 0
  0016e	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _P_AddWadFile
  00177	83 c4 08	 add	 esp, 8

; 3246 : 		return;

  0017a	e9 a2 01 00 00	 jmp	 $LN19@Command_Ad
$LN12@Command_Ad:

; 3247 : 	}
; 3248 : 
; 3249 : 	nameonly(strcpy(buf, fn));

  0017f	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  00182	50		 push	 eax
  00183	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 _strcpy
  0018f	83 c4 08	 add	 esp, 8
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _nameonly
  00198	83 c4 04	 add	 esp, 4

; 3250 : 	length = strlen(buf)+1;

  0019b	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 _strlen
  001a7	83 c4 04	 add	 esp, 4
  001aa	83 c0 01	 add	 eax, 1
  001ad	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _length$[ebp], eax

; 3251 : 
; 3252 : 	{
; 3253 : 		UINT8 md5sum[16+1] = {'\0'};

  001b3	33 c0		 xor	 eax, eax
  001b5	89 85 dc fe ff
	ff		 mov	 DWORD PTR _md5sum$3[ebp], eax
  001bb	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _md5sum$3[ebp+4], eax
  001c1	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _md5sum$3[ebp+8], eax
  001c7	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _md5sum$3[ebp+12], eax
  001cd	88 85 ec fe ff
	ff		 mov	 BYTE PTR _md5sum$3[ebp+16], al

; 3254 : #ifndef NOMD5
; 3255 : 		FILE *fhandle;
; 3256 : 
; 3257 : 		fhandle = fopen(fn, "rb");

  001d3	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  001d8	8b 45 f8	 mov	 eax, DWORD PTR _fn$[ebp]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 _fopen
  001e1	83 c4 08	 add	 esp, 8
  001e4	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _fhandle$2[ebp], eax

; 3258 : 
; 3259 : 		if (fhandle)

  001ea	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _fhandle$2[ebp], 0
  001f1	0f 84 9b 00 00
	00		 je	 $LN15@Command_Ad

; 3260 : 		{
; 3261 : 			tic_t t = I_GetTime();

  001f7	e8 00 00 00 00	 call	 _I_GetTime
  001fc	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _t$1[ebp], eax

; 3262 : #ifdef _arch_dreamcast
; 3263 : 			CONS_Printf("Making MD5 for %s\n",fn);
; 3264 : #endif
; 3265 : 			md5_stream(fhandle, md5sum);

  00202	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _md5sum$3[ebp]
  00208	50		 push	 eax
  00209	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _fhandle$2[ebp]
  0020f	51		 push	 ecx
  00210	e8 00 00 00 00	 call	 _md5_stream
  00215	83 c4 08	 add	 esp, 8

; 3266 : #ifndef _arch_dreamcast
; 3267 : 			if (devparm)

  00218	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  0021f	74 60		 je	 SHORT $LN17@Command_Ad

; 3268 : #endif
; 3269 : 				CONS_Printf("MD5 calc for %s took %f second\n",

  00221	e8 00 00 00 00	 call	 _I_GetTime
  00226	2b 85 d4 fe ff
	ff		 sub	 eax, DWORD PTR _t$1[ebp]
  0022c	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv224[ebp], eax
  00232	f2 0f 2a 85 90
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv224[ebp]
  0023a	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR tv224[ebp]
  00240	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00243	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0024c	f2 0f 11 85 88
	fe ff ff	 movsd	 QWORD PTR tv227[ebp], xmm0
  00254	f2 0f 5a 85 88
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv227[ebp]
  0025c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@420c0000
  00264	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00268	83 ec 08	 sub	 esp, 8
  0026b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00270	8b 4d f8	 mov	 ecx, DWORD PTR _fn$[ebp]
  00273	51		 push	 ecx
  00274	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LLNFENHL@MD5?5calc?5for?5?$CFs?5took?5?$CFf?5second?6@
  00279	e8 00 00 00 00	 call	 _CONS_Printf
  0027e	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@Command_Ad:

; 3270 : 					fn, (float)(I_GetTime() - t)/TICRATE);
; 3271 : 			fclose(fhandle);

  00281	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _fhandle$2[ebp]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 _fclose
  0028d	83 c4 04	 add	 esp, 4

; 3272 : 		}

  00290	eb 21		 jmp	 SHORT $LN16@Command_Ad
$LN15@Command_Ad:

; 3273 : 		else
; 3274 : 		{
; 3275 : 			CONS_Printf("%s", text[FILE_NOT_FOUND]);

  00292	b8 04 00 00 00	 mov	 eax, 4
  00297	69 c8 f6 00 00
	00		 imul	 ecx, eax, 246
  0029d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002a3	52		 push	 edx
  002a4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002a9	e8 00 00 00 00	 call	 _CONS_Printf
  002ae	83 c4 08	 add	 esp, 8

; 3276 : 			return;

  002b1	eb 6e		 jmp	 SHORT $LN19@Command_Ad
$LN16@Command_Ad:

; 3277 : 		}
; 3278 : #endif
; 3279 : 		M_Memcpy(&buf[length+1], md5sum, sizeof (md5sum));

  002b3	6a 11		 push	 17			; 00000011H
  002b5	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _md5sum$3[ebp]
  002bb	50		 push	 eax
  002bc	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _length$[ebp]
  002c2	8d 94 0d f9 fe
	ff ff		 lea	 edx, DWORD PTR _buf$[ebp+ecx+1]
  002c9	52		 push	 edx
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR _M_Memcpy
  002d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3280 : 		length += sizeof (md5sum);

  002d3	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _length$[ebp]
  002d9	83 c0 11	 add	 eax, 17			; 00000011H
  002dc	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _length$[ebp], eax

; 3281 : 	}
; 3282 : 
; 3283 : 	if (adminplayer == consoleplayer) // Request to add file

  002e2	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  002e7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  002ed	75 1a		 jne	 SHORT $LN18@Command_Ad

; 3284 : 		SendNetXCmd(XD_REQADDFILE, buf, length);

  002ef	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _length$[ebp]
  002f5	50		 push	 eax
  002f6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  002fc	51		 push	 ecx
  002fd	6a 12		 push	 18			; 00000012H
  002ff	e8 00 00 00 00	 call	 _SendNetXCmd
  00304	83 c4 0c	 add	 esp, 12			; 0000000cH
  00307	eb 18		 jmp	 SHORT $LN19@Command_Ad
$LN18@Command_Ad:

; 3285 : 	else
; 3286 : 		SendNetXCmd(XD_ADDFILE, buf, length);

  00309	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _length$[ebp]
  0030f	50		 push	 eax
  00310	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00316	51		 push	 ecx
  00317	6a 08		 push	 8
  00319	e8 00 00 00 00	 call	 _SendNetXCmd
  0031e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@Command_Ad:

; 3287 : }

  00321	5f		 pop	 edi
  00322	5e		 pop	 esi
  00323	5b		 pop	 ebx
  00324	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00327	33 cd		 xor	 ecx, ebp
  00329	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032e	8b e5		 mov	 esp, ebp
  00330	5d		 pop	 ebp
  00331	c3		 ret	 0
_Command_Addfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_OrderPizza_f
_TEXT	SEGMENT
_Command_OrderPizza_f PROC				; COMDAT

; 1599 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1600 : 	if (COM_Argc() < 6 || COM_Argc() > 7)

  00009	e8 00 00 00 00	 call	 _COM_Argc
  0000e	83 f8 06	 cmp	 eax, 6
  00011	72 0a		 jb	 SHORT $LN3@Command_Or
  00013	e8 00 00 00 00	 call	 _COM_Argc
  00018	83 f8 07	 cmp	 eax, 7
  0001b	76 1e		 jbe	 SHORT $LN2@Command_Or
$LN3@Command_Or:

; 1601 : 	{
; 1602 : 		CONS_Printf("%s", text[ORDERPIZZAHELP]);

  0001d	b8 04 00 00 00	 mov	 eax, 4
  00022	6b c8 5c	 imul	 ecx, eax, 92
  00025	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002b	52		 push	 edx
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00031	e8 00 00 00 00	 call	 _CONS_Printf
  00036	83 c4 08	 add	 esp, 8

; 1603 : 		return;

  00039	eb 0e		 jmp	 SHORT $LN1@Command_Or
$LN2@Command_Or:

; 1604 : 	}
; 1605 : 
; 1606 : 	SendNetXCmd(XD_ORDERPIZZA, NULL, 0);

  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	6a 10		 push	 16			; 00000010H
  00041	e8 00 00 00 00	 call	 _SendNetXCmd
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Command_Or:

; 1607 : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_Command_OrderPizza_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ResetCamera_f
_TEXT	SEGMENT
_Command_ResetCamera_f PROC				; COMDAT

; 1617 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1618 : 	P_ResetCamera(&players[displayplayer], &camera);

  00009	68 00 00 00 00	 push	 OFFSET _camera
  0000e	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00018	05 00 00 00 00	 add	 eax, OFFSET _players
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _P_ResetCamera
  00023	83 c4 08	 add	 esp, 8

; 1619 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_Command_ResetCamera_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_RTeleport_f
_TEXT	SEGMENT
_ss$ = -24						; size = 4
_p$ = -20						; size = 4
_i$ = -16						; size = 4
_intz$ = -12						; size = 4
_inty$ = -8						; size = 4
_intx$ = -4						; size = 4
_Command_RTeleport_f PROC				; COMDAT

; 1622 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1623 : 	fixed_t intx, inty, intz;
; 1624 : 	size_t i;
; 1625 : 	player_t *p = &players[consoleplayer];

  00009	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00013	05 00 00 00 00	 add	 eax, OFFSET _players
  00018	89 45 ec	 mov	 DWORD PTR _p$[ebp], eax

; 1626 : 	subsector_t *ss;
; 1627 : 
; 1628 : 	if (!(cv_debug || devparm))

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00022	75 2d		 jne	 SHORT $LN2@Command_RT
  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  0002b	75 24		 jne	 SHORT $LN2@Command_RT

; 1629 : 	{
; 1630 : 		CONS_Printf("%s", text[NEED_DEVMODE]);

  0002d	b8 04 00 00 00	 mov	 eax, 4
  00032	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  00038	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0003e	52		 push	 edx
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00044	e8 00 00 00 00	 call	 _CONS_Printf
  00049	83 c4 08	 add	 esp, 8

; 1631 : 		return;

  0004c	e9 9f 02 00 00	 jmp	 $LN1@Command_RT
$LN2@Command_RT:

; 1632 : 	}
; 1633 : 
; 1634 : 	if (COM_Argc() < 3 || COM_Argc() > 7)

  00051	e8 00 00 00 00	 call	 _COM_Argc
  00056	83 f8 03	 cmp	 eax, 3
  00059	72 0a		 jb	 SHORT $LN4@Command_RT
  0005b	e8 00 00 00 00	 call	 _COM_Argc
  00060	83 f8 07	 cmp	 eax, 7
  00063	76 21		 jbe	 SHORT $LN3@Command_RT
$LN4@Command_RT:

; 1635 : 	{
; 1636 : 		CONS_Printf("%s", text[RTELEPORTHELP]);

  00065	b8 04 00 00 00	 mov	 eax, 4
  0006a	6b c8 5e	 imul	 ecx, eax, 94
  0006d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00079	e8 00 00 00 00	 call	 _CONS_Printf
  0007e	83 c4 08	 add	 esp, 8

; 1637 : 		return;

  00081	e9 6a 02 00 00	 jmp	 $LN1@Command_RT
$LN3@Command_RT:

; 1638 : 	}
; 1639 : 
; 1640 : 	if (netgame)

  00086	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0008d	74 24		 je	 SHORT $LN5@Command_RT

; 1641 : 	{
; 1642 : 		CONS_Printf("%s", text[NETGAME_TELEPORT]);

  0008f	b8 04 00 00 00	 mov	 eax, 4
  00094	69 c8 ee 00 00
	00		 imul	 ecx, eax, 238
  0009a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000a0	52		 push	 edx
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a6	e8 00 00 00 00	 call	 _CONS_Printf
  000ab	83 c4 08	 add	 esp, 8

; 1643 : 		return;

  000ae	e9 3d 02 00 00	 jmp	 $LN1@Command_RT
$LN5@Command_RT:

; 1644 : 	}
; 1645 : 
; 1646 : 	if (!p->mo)

  000b3	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  000b6	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b9	75 24		 jne	 SHORT $LN6@Command_RT

; 1647 : 	{
; 1648 : 		CONS_Printf("%s", text[PDEAD_ETC]);

  000bb	b8 04 00 00 00	 mov	 eax, 4
  000c0	69 c8 eb 00 00
	00		 imul	 ecx, eax, 235
  000c6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000cc	52		 push	 edx
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000d2	e8 00 00 00 00	 call	 _CONS_Printf
  000d7	83 c4 08	 add	 esp, 8

; 1649 : 		return;

  000da	e9 11 02 00 00	 jmp	 $LN1@Command_RT
$LN6@Command_RT:

; 1650 : 	}
; 1651 : 
; 1652 : 	i = COM_CheckParm("-x");

  000df	68 00 00 00 00	 push	 OFFSET ??_C@_02NHMNAAKA@?9x@
  000e4	e8 00 00 00 00	 call	 _COM_CheckParm
  000e9	83 c4 04	 add	 esp, 4
  000ec	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 1653 : 	if (i)

  000ef	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  000f3	74 1d		 je	 SHORT $LN7@Command_RT

; 1654 : 		intx = atoi(COM_Argv(i + 1));

  000f5	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000f8	83 c0 01	 add	 eax, 1
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _COM_Argv
  00101	83 c4 04	 add	 esp, 4
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _atoi
  0010a	83 c4 04	 add	 esp, 4
  0010d	89 45 fc	 mov	 DWORD PTR _intx$[ebp], eax
  00110	eb 07		 jmp	 SHORT $LN8@Command_RT
$LN7@Command_RT:

; 1655 : 	else
; 1656 : 		intx = 0;

  00112	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _intx$[ebp], 0
$LN8@Command_RT:

; 1657 : 
; 1658 : 	i = COM_CheckParm("-y");

  00119	68 00 00 00 00	 push	 OFFSET ??_C@_02MONGDBOB@?9y@
  0011e	e8 00 00 00 00	 call	 _COM_CheckParm
  00123	83 c4 04	 add	 esp, 4
  00126	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 1659 : 	if (i)

  00129	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  0012d	74 1d		 je	 SHORT $LN9@Command_RT

; 1660 : 		inty = atoi(COM_Argv(i + 1));

  0012f	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00132	83 c0 01	 add	 eax, 1
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _COM_Argv
  0013b	83 c4 04	 add	 esp, 4
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 _atoi
  00144	83 c4 04	 add	 esp, 4
  00147	89 45 f8	 mov	 DWORD PTR _inty$[ebp], eax
  0014a	eb 07		 jmp	 SHORT $LN10@Command_RT
$LN9@Command_RT:

; 1661 : 	else
; 1662 : 		inty = 0;

  0014c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _inty$[ebp], 0
$LN10@Command_RT:

; 1663 : 
; 1664 : 	ss = R_PointInSubsector(p->mo->x + intx*FRACUNIT, p->mo->y + inty*FRACUNIT);

  00153	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  00156	8b 08		 mov	 ecx, DWORD PTR [eax]
  00158	8b 55 f8	 mov	 edx, DWORD PTR _inty$[ebp]
  0015b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0015e	03 51 14	 add	 edx, DWORD PTR [ecx+20]
  00161	52		 push	 edx
  00162	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  00165	8b 08		 mov	 ecx, DWORD PTR [eax]
  00167	8b 55 fc	 mov	 edx, DWORD PTR _intx$[ebp]
  0016a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0016d	03 51 10	 add	 edx, DWORD PTR [ecx+16]
  00170	52		 push	 edx
  00171	e8 00 00 00 00	 call	 _R_PointInSubsector
  00176	83 c4 08	 add	 esp, 8
  00179	89 45 e8	 mov	 DWORD PTR _ss$[ebp], eax

; 1665 : 	if (!ss || ss->sector->ceilingheight - ss->sector->floorheight < p->mo->height)

  0017c	83 7d e8 00	 cmp	 DWORD PTR _ss$[ebp], 0
  00180	74 19		 je	 SHORT $LN12@Command_RT
  00182	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00185	8b 08		 mov	 ecx, DWORD PTR [eax]
  00187	8b 55 e8	 mov	 edx, DWORD PTR _ss$[ebp]
  0018a	8b 02		 mov	 eax, DWORD PTR [edx]
  0018c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018f	2b 08		 sub	 ecx, DWORD PTR [eax]
  00191	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  00194	8b 02		 mov	 eax, DWORD PTR [edx]
  00196	3b 48 44	 cmp	 ecx, DWORD PTR [eax+68]
  00199	7d 21		 jge	 SHORT $LN11@Command_RT
$LN12@Command_RT:

; 1666 : 	{
; 1667 : 		CONS_Printf("%s", text[INVALIDLOCATION]);

  0019b	b8 04 00 00 00	 mov	 eax, 4
  001a0	6b c8 5f	 imul	 ecx, eax, 95
  001a3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001a9	52		 push	 edx
  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001af	e8 00 00 00 00	 call	 _CONS_Printf
  001b4	83 c4 08	 add	 esp, 8

; 1668 : 		return;

  001b7	e9 34 01 00 00	 jmp	 $LN1@Command_RT
$LN11@Command_RT:

; 1669 : 	}
; 1670 : 	i = COM_CheckParm("-z");

  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_02OFPLGCCC@?9z@
  001c1	e8 00 00 00 00	 call	 _COM_CheckParm
  001c6	83 c4 04	 add	 esp, 4
  001c9	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 1671 : 	if (i)

  001cc	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  001d0	74 72		 je	 SHORT $LN13@Command_RT

; 1672 : 	{
; 1673 : 		intz = atoi(COM_Argv(i + 1));

  001d2	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001d5	83 c0 01	 add	 eax, 1
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 _COM_Argv
  001de	83 c4 04	 add	 esp, 4
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 _atoi
  001e7	83 c4 04	 add	 esp, 4
  001ea	89 45 f4	 mov	 DWORD PTR _intz$[ebp], eax

; 1674 : 		intz <<= FRACBITS;

  001ed	8b 45 f4	 mov	 eax, DWORD PTR _intz$[ebp]
  001f0	c1 e0 10	 shl	 eax, 16			; 00000010H
  001f3	89 45 f4	 mov	 DWORD PTR _intz$[ebp], eax

; 1675 : 		intz += p->mo->z;

  001f6	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  001f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fb	8b 55 f4	 mov	 edx, DWORD PTR _intz$[ebp]
  001fe	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  00201	89 55 f4	 mov	 DWORD PTR _intz$[ebp], edx

; 1676 : 		if (intz < ss->sector->floorheight)

  00204	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00207	8b 08		 mov	 ecx, DWORD PTR [eax]
  00209	8b 55 f4	 mov	 edx, DWORD PTR _intz$[ebp]
  0020c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0020e	7d 0a		 jge	 SHORT $LN15@Command_RT

; 1677 : 			intz = ss->sector->floorheight;

  00210	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00213	8b 08		 mov	 ecx, DWORD PTR [eax]
  00215	8b 11		 mov	 edx, DWORD PTR [ecx]
  00217	89 55 f4	 mov	 DWORD PTR _intz$[ebp], edx
$LN15@Command_RT:

; 1678 : 		if (intz > ss->sector->ceilingheight - p->mo->height)

  0021a	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  0021d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021f	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  00222	8b 02		 mov	 eax, DWORD PTR [edx]
  00224	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00227	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  0022a	39 4d f4	 cmp	 DWORD PTR _intz$[ebp], ecx
  0022d	7e 13		 jle	 SHORT $LN16@Command_RT

; 1679 : 			intz = ss->sector->ceilingheight - p->mo->height;

  0022f	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00232	8b 08		 mov	 ecx, DWORD PTR [eax]
  00234	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  00237	8b 02		 mov	 eax, DWORD PTR [edx]
  00239	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0023c	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  0023f	89 4d f4	 mov	 DWORD PTR _intz$[ebp], ecx
$LN16@Command_RT:

; 1680 : 	}

  00242	eb 07		 jmp	 SHORT $LN14@Command_RT
$LN13@Command_RT:

; 1681 : 	else
; 1682 : 		intz = 0;

  00244	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _intz$[ebp], 0
$LN14@Command_RT:

; 1683 : 
; 1684 : 	CONS_Printf(text[TELEPORTINGBY], intx, inty, FixedInt((intz-p->mo->z)));

  0024b	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  0024e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00250	8b 55 f4	 mov	 edx, DWORD PTR _intz$[ebp]
  00253	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00256	52		 push	 edx
  00257	e8 00 00 00 00	 call	 _FixedInt
  0025c	83 c4 04	 add	 esp, 4
  0025f	50		 push	 eax
  00260	8b 45 f8	 mov	 eax, DWORD PTR _inty$[ebp]
  00263	50		 push	 eax
  00264	8b 4d fc	 mov	 ecx, DWORD PTR _intx$[ebp]
  00267	51		 push	 ecx
  00268	ba 04 00 00 00	 mov	 edx, 4
  0026d	6b c2 60	 imul	 eax, edx, 96
  00270	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00276	51		 push	 ecx
  00277	e8 00 00 00 00	 call	 _CONS_Printf
  0027c	83 c4 10	 add	 esp, 16			; 00000010H

; 1685 : 
; 1686 : 	P_MapStart();

  0027f	e8 00 00 00 00	 call	 _P_MapStart
  00284	90		 npad	 1

; 1687 : 	if (!P_TeleportMove(p->mo, p->mo->x+intx*FRACUNIT, p->mo->y+inty*FRACUNIT, intz))

  00285	8b 45 f4	 mov	 eax, DWORD PTR _intz$[ebp]
  00288	50		 push	 eax
  00289	8b 4d ec	 mov	 ecx, DWORD PTR _p$[ebp]
  0028c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0028e	8b 45 f8	 mov	 eax, DWORD PTR _inty$[ebp]
  00291	c1 e0 10	 shl	 eax, 16			; 00000010H
  00294	03 42 14	 add	 eax, DWORD PTR [edx+20]
  00297	50		 push	 eax
  00298	8b 4d ec	 mov	 ecx, DWORD PTR _p$[ebp]
  0029b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029d	8b 45 fc	 mov	 eax, DWORD PTR _intx$[ebp]
  002a0	c1 e0 10	 shl	 eax, 16			; 00000010H
  002a3	03 42 10	 add	 eax, DWORD PTR [edx+16]
  002a6	50		 push	 eax
  002a7	8b 4d ec	 mov	 ecx, DWORD PTR _p$[ebp]
  002aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ac	52		 push	 edx
  002ad	e8 00 00 00 00	 call	 _P_TeleportMove
  002b2	83 c4 10	 add	 esp, 16			; 00000010H
  002b5	85 c0		 test	 eax, eax
  002b7	75 21		 jne	 SHORT $LN17@Command_RT

; 1688 : 		CONS_Printf("%s",text[UNABLE_TELEPORT]);

  002b9	b8 04 00 00 00	 mov	 eax, 4
  002be	69 c8 ed 00 00
	00		 imul	 ecx, eax, 237
  002c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002ca	52		 push	 edx
  002cb	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002d0	e8 00 00 00 00	 call	 _CONS_Printf
  002d5	83 c4 08	 add	 esp, 8
  002d8	eb 10		 jmp	 SHORT $LN18@Command_RT
$LN17@Command_RT:

; 1689 : 	else
; 1690 : 		S_StartSound(p->mo, sfx_mixup);

  002da	6a 68		 push	 104			; 00000068H
  002dc	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  002df	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e1	51		 push	 ecx
  002e2	e8 00 00 00 00	 call	 _S_StartSound
  002e7	83 c4 08	 add	 esp, 8
$LN18@Command_RT:

; 1691 : 	P_MapEnd();

  002ea	e8 00 00 00 00	 call	 _P_MapEnd
  002ef	90		 npad	 1
$LN1@Command_RT:

; 1692 : }

  002f0	5f		 pop	 edi
  002f1	5e		 pop	 esi
  002f2	5b		 pop	 ebx
  002f3	8b e5		 mov	 esp, ebp
  002f5	5d		 pop	 ebp
  002f6	c3		 ret	 0
_Command_RTeleport_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Teleport_f
_TEXT	SEGMENT
_ss$ = -24						; size = 4
_p$ = -20						; size = 4
_i$ = -16						; size = 4
_intz$ = -12						; size = 4
_inty$ = -8						; size = 4
_intx$ = -4						; size = 4
_Command_Teleport_f PROC				; COMDAT

; 1695 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1696 : 	fixed_t intx, inty, intz;
; 1697 : 	size_t i;
; 1698 : 	player_t *p = &players[consoleplayer];

  00009	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00013	05 00 00 00 00	 add	 eax, OFFSET _players
  00018	89 45 ec	 mov	 DWORD PTR _p$[ebp], eax

; 1699 : 	subsector_t *ss;
; 1700 : 
; 1701 : 	if (!(cv_debug || devparm))

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00022	75 0e		 jne	 SHORT $LN2@Command_Te
  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  0002b	75 05		 jne	 SHORT $LN2@Command_Te

; 1702 : 		return;

  0002d	e9 a6 02 00 00	 jmp	 $LN1@Command_Te
$LN2@Command_Te:

; 1703 : 
; 1704 : 	if (COM_Argc() < 3 || COM_Argc() > 7)

  00032	e8 00 00 00 00	 call	 _COM_Argc
  00037	83 f8 03	 cmp	 eax, 3
  0003a	72 0a		 jb	 SHORT $LN4@Command_Te
  0003c	e8 00 00 00 00	 call	 _COM_Argc
  00041	83 f8 07	 cmp	 eax, 7
  00044	76 24		 jbe	 SHORT $LN3@Command_Te
$LN4@Command_Te:

; 1705 : 	{
; 1706 : 		CONS_Printf("%s", text[TELEPORT_HELP]);

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	69 c8 ec 00 00
	00		 imul	 ecx, eax, 236
  00051	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0005d	e8 00 00 00 00	 call	 _CONS_Printf
  00062	83 c4 08	 add	 esp, 8

; 1707 : 		return;

  00065	e9 6e 02 00 00	 jmp	 $LN1@Command_Te
$LN3@Command_Te:

; 1708 : 	}
; 1709 : 
; 1710 : 	if (netgame)

  0006a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00071	74 24		 je	 SHORT $LN5@Command_Te

; 1711 : 	{
; 1712 : 		CONS_Printf("%s",text[NETGAME_TELEPORT]);

  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	69 c8 ee 00 00
	00		 imul	 ecx, eax, 238
  0007e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00084	52		 push	 edx
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0008a	e8 00 00 00 00	 call	 _CONS_Printf
  0008f	83 c4 08	 add	 esp, 8

; 1713 : 		return;

  00092	e9 41 02 00 00	 jmp	 $LN1@Command_Te
$LN5@Command_Te:

; 1714 : 	}
; 1715 : 
; 1716 : 	if (!p->mo)

  00097	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  0009a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009d	75 24		 jne	 SHORT $LN6@Command_Te

; 1717 : 	{
; 1718 : 		CONS_Printf("%s",text[PDEAD_ETC]);

  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	69 c8 eb 00 00
	00		 imul	 ecx, eax, 235
  000aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b0	52		 push	 edx
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000b6	e8 00 00 00 00	 call	 _CONS_Printf
  000bb	83 c4 08	 add	 esp, 8

; 1719 : 		return;

  000be	e9 15 02 00 00	 jmp	 $LN1@Command_Te
$LN6@Command_Te:

; 1720 : 	}
; 1721 : 
; 1722 : 	i = COM_CheckParm("-x");

  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_02NHMNAAKA@?9x@
  000c8	e8 00 00 00 00	 call	 _COM_CheckParm
  000cd	83 c4 04	 add	 esp, 4
  000d0	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 1723 : 	if (i)

  000d3	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  000d7	74 1d		 je	 SHORT $LN7@Command_Te

; 1724 : 		intx = atoi(COM_Argv(i + 1));

  000d9	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000dc	83 c0 01	 add	 eax, 1
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _COM_Argv
  000e5	83 c4 04	 add	 esp, 4
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _atoi
  000ee	83 c4 04	 add	 esp, 4
  000f1	89 45 fc	 mov	 DWORD PTR _intx$[ebp], eax
  000f4	eb 21		 jmp	 SHORT $LN8@Command_Te
$LN7@Command_Te:

; 1725 : 	else
; 1726 : 	{
; 1727 : 		CONS_Printf("%s", text[XNOTSPECIFIED]);

  000f6	b8 04 00 00 00	 mov	 eax, 4
  000fb	6b c8 61	 imul	 ecx, eax, 97
  000fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00104	52		 push	 edx
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0010a	e8 00 00 00 00	 call	 _CONS_Printf
  0010f	83 c4 08	 add	 esp, 8

; 1728 : 		return;

  00112	e9 c1 01 00 00	 jmp	 $LN1@Command_Te
$LN8@Command_Te:

; 1729 : 	}
; 1730 : 
; 1731 : 	i = COM_CheckParm("-y");

  00117	68 00 00 00 00	 push	 OFFSET ??_C@_02MONGDBOB@?9y@
  0011c	e8 00 00 00 00	 call	 _COM_CheckParm
  00121	83 c4 04	 add	 esp, 4
  00124	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 1732 : 	if (i)

  00127	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  0012b	74 1d		 je	 SHORT $LN9@Command_Te

; 1733 : 		inty = atoi(COM_Argv(i + 1));

  0012d	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00130	83 c0 01	 add	 eax, 1
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _COM_Argv
  00139	83 c4 04	 add	 esp, 4
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _atoi
  00142	83 c4 04	 add	 esp, 4
  00145	89 45 f8	 mov	 DWORD PTR _inty$[ebp], eax
  00148	eb 21		 jmp	 SHORT $LN10@Command_Te
$LN9@Command_Te:

; 1734 : 	else
; 1735 : 	{
; 1736 : 		CONS_Printf("%s", text[YNOTSPECIFIED]);

  0014a	b8 04 00 00 00	 mov	 eax, 4
  0014f	6b c8 62	 imul	 ecx, eax, 98
  00152	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00158	52		 push	 edx
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0015e	e8 00 00 00 00	 call	 _CONS_Printf
  00163	83 c4 08	 add	 esp, 8

; 1737 : 		return;

  00166	e9 6d 01 00 00	 jmp	 $LN1@Command_Te
$LN10@Command_Te:

; 1738 : 	}
; 1739 : 
; 1740 : 	ss = R_PointInSubsector(intx*FRACUNIT, inty*FRACUNIT);

  0016b	8b 45 f8	 mov	 eax, DWORD PTR _inty$[ebp]
  0016e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00171	50		 push	 eax
  00172	8b 4d fc	 mov	 ecx, DWORD PTR _intx$[ebp]
  00175	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 _R_PointInSubsector
  0017e	83 c4 08	 add	 esp, 8
  00181	89 45 e8	 mov	 DWORD PTR _ss$[ebp], eax

; 1741 : 	if (!ss || ss->sector->ceilingheight - ss->sector->floorheight < p->mo->height)

  00184	83 7d e8 00	 cmp	 DWORD PTR _ss$[ebp], 0
  00188	74 19		 je	 SHORT $LN12@Command_Te
  0018a	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  0018d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018f	8b 55 e8	 mov	 edx, DWORD PTR _ss$[ebp]
  00192	8b 02		 mov	 eax, DWORD PTR [edx]
  00194	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00197	2b 08		 sub	 ecx, DWORD PTR [eax]
  00199	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  0019c	8b 02		 mov	 eax, DWORD PTR [edx]
  0019e	3b 48 44	 cmp	 ecx, DWORD PTR [eax+68]
  001a1	7d 24		 jge	 SHORT $LN11@Command_Te
$LN12@Command_Te:

; 1742 : 	{
; 1743 : 		CONS_Printf("%s",text[INVALID_LOCATION]);

  001a3	b8 04 00 00 00	 mov	 eax, 4
  001a8	69 c8 ef 00 00
	00		 imul	 ecx, eax, 239
  001ae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001ba	e8 00 00 00 00	 call	 _CONS_Printf
  001bf	83 c4 08	 add	 esp, 8

; 1744 : 		return;

  001c2	e9 11 01 00 00	 jmp	 $LN1@Command_Te
$LN11@Command_Te:

; 1745 : 	}
; 1746 : 	i = COM_CheckParm("-z");

  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_02OFPLGCCC@?9z@
  001cc	e8 00 00 00 00	 call	 _COM_CheckParm
  001d1	83 c4 04	 add	 esp, 4
  001d4	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 1747 : 	if (i)

  001d7	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  001db	74 64		 je	 SHORT $LN13@Command_Te

; 1748 : 	{
; 1749 : 		intz = atoi(COM_Argv(i + 1));

  001dd	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001e0	83 c0 01	 add	 eax, 1
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _COM_Argv
  001e9	83 c4 04	 add	 esp, 4
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _atoi
  001f2	83 c4 04	 add	 esp, 4
  001f5	89 45 f4	 mov	 DWORD PTR _intz$[ebp], eax

; 1750 : 		intz <<= FRACBITS;

  001f8	8b 45 f4	 mov	 eax, DWORD PTR _intz$[ebp]
  001fb	c1 e0 10	 shl	 eax, 16			; 00000010H
  001fe	89 45 f4	 mov	 DWORD PTR _intz$[ebp], eax

; 1751 : 		if (intz < ss->sector->floorheight)

  00201	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00204	8b 08		 mov	 ecx, DWORD PTR [eax]
  00206	8b 55 f4	 mov	 edx, DWORD PTR _intz$[ebp]
  00209	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0020b	7d 0a		 jge	 SHORT $LN15@Command_Te

; 1752 : 			intz = ss->sector->floorheight;

  0020d	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00210	8b 08		 mov	 ecx, DWORD PTR [eax]
  00212	8b 11		 mov	 edx, DWORD PTR [ecx]
  00214	89 55 f4	 mov	 DWORD PTR _intz$[ebp], edx
$LN15@Command_Te:

; 1753 : 		if (intz > ss->sector->ceilingheight - p->mo->height)

  00217	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  0021a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021c	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  0021f	8b 02		 mov	 eax, DWORD PTR [edx]
  00221	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00224	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  00227	39 4d f4	 cmp	 DWORD PTR _intz$[ebp], ecx
  0022a	7e 13		 jle	 SHORT $LN16@Command_Te

; 1754 : 			intz = ss->sector->ceilingheight - p->mo->height;

  0022c	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  0022f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00231	8b 55 ec	 mov	 edx, DWORD PTR _p$[ebp]
  00234	8b 02		 mov	 eax, DWORD PTR [edx]
  00236	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00239	2b 48 44	 sub	 ecx, DWORD PTR [eax+68]
  0023c	89 4d f4	 mov	 DWORD PTR _intz$[ebp], ecx
$LN16@Command_Te:

; 1755 : 	}

  0023f	eb 0a		 jmp	 SHORT $LN14@Command_Te
$LN13@Command_Te:

; 1756 : 	else
; 1757 : 		intz = ss->sector->floorheight;

  00241	8b 45 e8	 mov	 eax, DWORD PTR _ss$[ebp]
  00244	8b 08		 mov	 ecx, DWORD PTR [eax]
  00246	8b 11		 mov	 edx, DWORD PTR [ecx]
  00248	89 55 f4	 mov	 DWORD PTR _intz$[ebp], edx
$LN14@Command_Te:

; 1758 : 
; 1759 : 	CONS_Printf(text[TELEPORTINGTO], intx, inty, FixedInt(intz));

  0024b	8b 45 f4	 mov	 eax, DWORD PTR _intz$[ebp]
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 _FixedInt
  00254	83 c4 04	 add	 esp, 4
  00257	50		 push	 eax
  00258	8b 4d f8	 mov	 ecx, DWORD PTR _inty$[ebp]
  0025b	51		 push	 ecx
  0025c	8b 55 fc	 mov	 edx, DWORD PTR _intx$[ebp]
  0025f	52		 push	 edx
  00260	b8 04 00 00 00	 mov	 eax, 4
  00265	6b c8 63	 imul	 ecx, eax, 99
  00268	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0026e	52		 push	 edx
  0026f	e8 00 00 00 00	 call	 _CONS_Printf
  00274	83 c4 10	 add	 esp, 16			; 00000010H

; 1760 : 
; 1761 : 	P_MapStart();

  00277	e8 00 00 00 00	 call	 _P_MapStart
  0027c	90		 npad	 1

; 1762 : 	if (!P_TeleportMove(p->mo, intx*FRACUNIT, inty*FRACUNIT, intz))

  0027d	8b 45 f4	 mov	 eax, DWORD PTR _intz$[ebp]
  00280	50		 push	 eax
  00281	8b 4d f8	 mov	 ecx, DWORD PTR _inty$[ebp]
  00284	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00287	51		 push	 ecx
  00288	8b 55 fc	 mov	 edx, DWORD PTR _intx$[ebp]
  0028b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0028e	52		 push	 edx
  0028f	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  00292	8b 08		 mov	 ecx, DWORD PTR [eax]
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 _P_TeleportMove
  0029a	83 c4 10	 add	 esp, 16			; 00000010H
  0029d	85 c0		 test	 eax, eax
  0029f	75 21		 jne	 SHORT $LN17@Command_Te

; 1763 : 		CONS_Printf("%s",text[UNABLE_TELEPORT]);

  002a1	b8 04 00 00 00	 mov	 eax, 4
  002a6	69 c8 ed 00 00
	00		 imul	 ecx, eax, 237
  002ac	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  002b2	52		 push	 edx
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002b8	e8 00 00 00 00	 call	 _CONS_Printf
  002bd	83 c4 08	 add	 esp, 8
  002c0	eb 10		 jmp	 SHORT $LN18@Command_Te
$LN17@Command_Te:

; 1764 : 	else
; 1765 : 		S_StartSound(p->mo, sfx_mixup);

  002c2	6a 68		 push	 104			; 00000068H
  002c4	8b 45 ec	 mov	 eax, DWORD PTR _p$[ebp]
  002c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c9	51		 push	 ecx
  002ca	e8 00 00 00 00	 call	 _S_StartSound
  002cf	83 c4 08	 add	 esp, 8
$LN18@Command_Te:

; 1766 : 	P_MapEnd();

  002d2	e8 00 00 00 00	 call	 _P_MapEnd
  002d7	90		 npad	 1
$LN1@Command_Te:

; 1767 : }

  002d8	5f		 pop	 edi
  002d9	5e		 pop	 esi
  002da	5b		 pop	 ebx
  002db	8b e5		 mov	 esp, ebp
  002dd	5d		 pop	 ebp
  002de	c3		 ret	 0
_Command_Teleport_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Map_f
_TEXT	SEGMENT
tv132 = -136						; size = 4
tv249 = -136						; size = 4
_gametypestring$1 = -68					; size = 32
_tolflag$2 = -36					; size = 2
_tol$3 = -32						; size = 2
_newresetplayers$ = -28					; size = 4
_newgametype$ = -24					; size = 4
_newmapnum$ = -20					; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_mapname$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Command_Map_f PROC					; COMDAT

; 1937 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1938 : 	const char *mapname;
; 1939 : 	size_t i;
; 1940 : 	INT32 j, newmapnum, newgametype, newresetplayers;
; 1941 : 
; 1942 : 	// max length of command: map map03 -gametype coop -noresetplayers -force
; 1943 : 	//                         1    2       3       4         5           6
; 1944 : 	// = 8 arg max
; 1945 : 	if (COM_Argc() < 2 || COM_Argc() > 8)

  00016	e8 00 00 00 00	 call	 _COM_Argc
  0001b	83 f8 02	 cmp	 eax, 2
  0001e	72 0a		 jb	 SHORT $LN14@Command_Ma
  00020	e8 00 00 00 00	 call	 _COM_Argc
  00025	83 f8 08	 cmp	 eax, 8
  00028	76 21		 jbe	 SHORT $LN13@Command_Ma
$LN14@Command_Ma:

; 1946 : 	{
; 1947 : 		CONS_Printf("%s", text[MAPCHANGE_HELP]);

  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	6b c8 6a	 imul	 ecx, eax, 106
  00032	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00038	52		 push	 edx
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0003e	e8 00 00 00 00	 call	 _CONS_Printf
  00043	83 c4 08	 add	 esp, 8

; 1948 : 		return;

  00046	e9 15 05 00 00	 jmp	 $LN1@Command_Ma
$LN13@Command_Ma:

; 1949 : 	}
; 1950 : 
; 1951 : 	if (!server && !(adminplayer == consoleplayer))

  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00052	75 2e		 jne	 SHORT $LN15@Command_Ma
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00059	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0005f	74 21		 je	 SHORT $LN15@Command_Ma

; 1952 : 	{
; 1953 : 		CONS_Printf("%s", text[SERVER_CHANGELEVEL]);

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	6b c8 6b	 imul	 ecx, eax, 107
  00069	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0006f	52		 push	 edx
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00075	e8 00 00 00 00	 call	 _CONS_Printf
  0007a	83 c4 08	 add	 esp, 8

; 1954 : 		return;

  0007d	e9 de 04 00 00	 jmp	 $LN1@Command_Ma
$LN15@Command_Ma:

; 1955 : 	}
; 1956 : 
; 1957 : 	// internal wad lump always: map command doesn't support external files as in doom legacy
; 1958 : 	if (W_CheckNumForName(COM_Argv(1)) == LUMPERROR)

  00082	6a 01		 push	 1
  00084	e8 00 00 00 00	 call	 _COM_Argv
  00089	83 c4 04	 add	 esp, 4
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _W_CheckNumForName
  00092	83 c4 04	 add	 esp, 4
  00095	83 f8 ff	 cmp	 eax, -1
  00098	75 27		 jne	 SHORT $LN16@Command_Ma

; 1959 : 	{
; 1960 : 		CONS_Printf(text[LEVEL_NOTFOUND], COM_Argv(1));

  0009a	6a 01		 push	 1
  0009c	e8 00 00 00 00	 call	 _COM_Argv
  000a1	83 c4 04	 add	 esp, 4
  000a4	50		 push	 eax
  000a5	b8 04 00 00 00	 mov	 eax, 4
  000aa	6b c8 6c	 imul	 ecx, eax, 108
  000ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 _CONS_Printf
  000b9	83 c4 08	 add	 esp, 8

; 1961 : 		return;

  000bc	e9 9f 04 00 00	 jmp	 $LN1@Command_Ma
$LN16@Command_Ma:

; 1962 : 	}
; 1963 : 
; 1964 : 	if (!(netgame || multiplayer) && (!modifiedgame || savemoddata))

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000c8	75 3c		 jne	 SHORT $LN17@Command_Ma
  000ca	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000d1	75 33		 jne	 SHORT $LN17@Command_Ma
  000d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  000da	74 09		 je	 SHORT $LN18@Command_Ma
  000dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  000e3	74 21		 je	 SHORT $LN17@Command_Ma
$LN18@Command_Ma:

; 1965 : 	{
; 1966 : 		CONS_Printf("%s", text[NOLVLCHANGE]);

  000e5	b8 04 00 00 00	 mov	 eax, 4
  000ea	6b c8 6d	 imul	 ecx, eax, 109
  000ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f3	52		 push	 edx
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000f9	e8 00 00 00 00	 call	 _CONS_Printf
  000fe	83 c4 08	 add	 esp, 8

; 1967 : 		return;

  00101	e9 5a 04 00 00	 jmp	 $LN1@Command_Ma
$LN17@Command_Ma:

; 1968 : 	}
; 1969 : 
; 1970 : 	newresetplayers = !COM_CheckParm("-noresetplayers");

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GHJOCIHF@?9noresetplayers@
  0010b	e8 00 00 00 00	 call	 _COM_CheckParm
  00110	83 c4 04	 add	 esp, 4
  00113	85 c0		 test	 eax, eax
  00115	75 0c		 jne	 SHORT $LN63@Command_Ma
  00117	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv132[ebp], 1
  00121	eb 0a		 jmp	 SHORT $LN64@Command_Ma
$LN63@Command_Ma:
  00123	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN64@Command_Ma:
  0012d	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv132[ebp]
  00133	89 45 e4	 mov	 DWORD PTR _newresetplayers$[ebp], eax

; 1971 : 
; 1972 : 	if (!newresetplayers && !cv_debug)

  00136	83 7d e4 00	 cmp	 DWORD PTR _newresetplayers$[ebp], 0
  0013a	75 2f		 jne	 SHORT $LN19@Command_Ma
  0013c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  00143	75 26		 jne	 SHORT $LN19@Command_Ma

; 1973 : 	{
; 1974 : 		CONS_Printf("%s",text[NEED_DEVMODE]);

  00145	b8 04 00 00 00	 mov	 eax, 4
  0014a	69 c8 f8 00 00
	00		 imul	 ecx, eax, 248
  00150	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00156	52		 push	 edx
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0015c	e8 00 00 00 00	 call	 _CONS_Printf
  00161	83 c4 08	 add	 esp, 8

; 1975 : 		newresetplayers = true;

  00164	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _newresetplayers$[ebp], 1
$LN19@Command_Ma:

; 1976 : 	}
; 1977 : 
; 1978 : 	mapname = COM_Argv(1);

  0016b	6a 01		 push	 1
  0016d	e8 00 00 00 00	 call	 _COM_Argv
  00172	83 c4 04	 add	 esp, 4
  00175	89 45 f8	 mov	 DWORD PTR _mapname$[ebp], eax

; 1979 : 	if (strlen(mapname) != 5
; 1980 : 	|| (newmapnum = M_MapNumber(mapname[3], mapname[4])) == 0)

  00178	8b 45 f8	 mov	 eax, DWORD PTR _mapname$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _strlen
  00181	83 c4 04	 add	 esp, 4
  00184	83 f8 05	 cmp	 eax, 5
  00187	75 31		 jne	 SHORT $LN21@Command_Ma
  00189	b8 01 00 00 00	 mov	 eax, 1
  0018e	c1 e0 02	 shl	 eax, 2
  00191	8b 4d f8	 mov	 ecx, DWORD PTR _mapname$[ebp]
  00194	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00198	52		 push	 edx
  00199	b8 01 00 00 00	 mov	 eax, 1
  0019e	6b c8 03	 imul	 ecx, eax, 3
  001a1	8b 55 f8	 mov	 edx, DWORD PTR _mapname$[ebp]
  001a4	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 _M_MapNumber
  001ae	83 c4 08	 add	 esp, 8
  001b1	89 45 ec	 mov	 DWORD PTR _newmapnum$[ebp], eax
  001b4	83 7d ec 00	 cmp	 DWORD PTR _newmapnum$[ebp], 0
  001b8	75 20		 jne	 SHORT $LN20@Command_Ma
$LN21@Command_Ma:

; 1981 : 	{
; 1982 : 		CONS_Printf(text[INVALID_LEVELNAME], mapname);

  001ba	8b 45 f8	 mov	 eax, DWORD PTR _mapname$[ebp]
  001bd	50		 push	 eax
  001be	b9 04 00 00 00	 mov	 ecx, 4
  001c3	6b d1 6e	 imul	 edx, ecx, 110
  001c6	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _CONS_Printf
  001d2	83 c4 08	 add	 esp, 8

; 1983 : 		return;

  001d5	e9 86 03 00 00	 jmp	 $LN1@Command_Ma
$LN20@Command_Ma:

; 1984 : 	}
; 1985 : 
; 1986 : 	// Ultimate Mode only in SP via menu
; 1987 : 	if (netgame || multiplayer)

  001da	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  001e1	75 09		 jne	 SHORT $LN23@Command_Ma
  001e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  001ea	74 07		 je	 SHORT $LN22@Command_Ma
$LN23@Command_Ma:

; 1988 : 		ultimatemode = false;

  001ec	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _ultimatemode, 0
$LN22@Command_Ma:

; 1989 : 
; 1990 : 	// new gametype value
; 1991 : 	// use current one by default
; 1992 : 	if (gametype == GT_RACE && cv_racetype.value)

  001f3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001fa	83 f8 02	 cmp	 eax, 2
  001fd	75 12		 jne	 SHORT $LN24@Command_Ma
  001ff	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_racetype+20, 0
  00206	74 09		 je	 SHORT $LN24@Command_Ma

; 1993 : 		newgametype = GTF_CLASSICRACE;

  00208	c7 45 e8 2b 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 43 ; 0000002bH
  0020f	eb 46		 jmp	 SHORT $LN29@Command_Ma
$LN24@Command_Ma:

; 1994 : 	else if (gametype == GT_MATCH && cv_matchtype.value)

  00211	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00218	83 f8 01	 cmp	 eax, 1
  0021b	75 12		 jne	 SHORT $LN26@Command_Ma
  0021d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00224	74 09		 je	 SHORT $LN26@Command_Ma

; 1995 : 		newgametype = GTF_TEAMMATCH;

  00226	c7 45 e8 2a 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 42 ; 0000002aH
  0022d	eb 28		 jmp	 SHORT $LN29@Command_Ma
$LN26@Command_Ma:

; 1996 : 	else if (gametype == GT_TAG && cv_tagtype.value)

  0022f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00236	83 f8 03	 cmp	 eax, 3
  00239	75 12		 jne	 SHORT $LN28@Command_Ma
  0023b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00242	74 09		 je	 SHORT $LN28@Command_Ma

; 1997 : 		newgametype = GTF_HIDEANDSEEK;

  00244	c7 45 e8 2c 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 44 ; 0000002cH
  0024b	eb 0a		 jmp	 SHORT $LN29@Command_Ma
$LN28@Command_Ma:

; 1998 : 	else
; 1999 : 		newgametype = gametype;

  0024d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00254	89 45 e8	 mov	 DWORD PTR _newgametype$[ebp], eax
$LN29@Command_Ma:

; 2000 : 
; 2001 : 
; 2002 : 	i = COM_CheckParm("-gametype");

  00257	68 00 00 00 00	 push	 OFFSET ??_C@_09GGNDLOMG@?9gametype@
  0025c	e8 00 00 00 00	 call	 _COM_CheckParm
  00261	83 c4 04	 add	 esp, 4
  00264	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax

; 2003 : 	if (i)

  00267	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  0026b	0f 84 6f 01 00
	00		 je	 $LN6@Command_Ma

; 2004 : 	{
; 2005 : 		if (!multiplayer)

  00271	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00278	75 21		 jne	 SHORT $LN31@Command_Ma

; 2006 : 		{
; 2007 : 			CONS_Printf("%s", text[NOGTCHANGE]);

  0027a	b8 04 00 00 00	 mov	 eax, 4
  0027f	6b c8 6f	 imul	 ecx, eax, 111
  00282	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00288	52		 push	 edx
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0028e	e8 00 00 00 00	 call	 _CONS_Printf
  00293	83 c4 08	 add	 esp, 8

; 2008 : 			return;

  00296	e9 c5 02 00 00	 jmp	 $LN1@Command_Ma
$LN31@Command_Ma:

; 2009 : 		}
; 2010 : 
; 2011 : 		for (j = 0; gametype_cons_t[j].strvalue; j++)

  0029b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  002a2	eb 09		 jmp	 SHORT $LN4@Command_Ma
$LN2@Command_Ma:
  002a4	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  002a7	83 c0 01	 add	 eax, 1
  002aa	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN4@Command_Ma:
  002ad	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  002b0	83 3c c5 04 00
	00 00 00	 cmp	 DWORD PTR _gametype_cons_t[eax*8+4], 0
  002b8	0f 84 c1 00 00
	00		 je	 $LN3@Command_Ma

; 2012 : 			if (!strcasecmp(gametype_cons_t[j].strvalue, COM_Argv(i+1)))

  002be	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002c1	83 c0 01	 add	 eax, 1
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 _COM_Argv
  002ca	83 c4 04	 add	 esp, 4
  002cd	50		 push	 eax
  002ce	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  002d1	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR _gametype_cons_t[ecx*8+4]
  002d8	52		 push	 edx
  002d9	e8 00 00 00 00	 call	 _stricmp
  002de	83 c4 08	 add	 esp, 8
  002e1	85 c0		 test	 eax, eax
  002e3	0f 85 91 00 00
	00		 jne	 $LN32@Command_Ma

; 2013 : 			{
; 2014 : 				// Don't do any variable setting here. Wait until you get your
; 2015 : 				// map packet first to avoid sending the same info twice! -Jazz
; 2016 : 				if (gametype_cons_t[j].value == GT_MATCH)

  002e9	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  002ec	83 3c c5 00 00
	00 00 01	 cmp	 DWORD PTR _gametype_cons_t[eax*8], 1
  002f4	75 09		 jne	 SHORT $LN33@Command_Ma

; 2017 : 					newgametype = GT_MATCH;

  002f6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 1
  002fd	eb 2a		 jmp	 SHORT $LN37@Command_Ma
$LN33@Command_Ma:

; 2018 : 				else if (gametype_cons_t[j].value == GT_RACE)

  002ff	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00302	83 3c c5 00 00
	00 00 02	 cmp	 DWORD PTR _gametype_cons_t[eax*8], 2
  0030a	75 09		 jne	 SHORT $LN35@Command_Ma

; 2019 : 					newgametype = GT_RACE;

  0030c	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 2
  00313	eb 14		 jmp	 SHORT $LN37@Command_Ma
$LN35@Command_Ma:

; 2020 : 				else if (gametype_cons_t[j].value == GT_TAG)

  00315	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00318	83 3c c5 00 00
	00 00 03	 cmp	 DWORD PTR _gametype_cons_t[eax*8], 3
  00320	75 07		 jne	 SHORT $LN37@Command_Ma

; 2021 : 					newgametype = GT_TAG;

  00322	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 3
$LN37@Command_Ma:

; 2022 : 
; 2023 : 				if (gametype_cons_t[j].value == GTF_TEAMMATCH)

  00329	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0032c	83 3c c5 00 00
	00 00 2a	 cmp	 DWORD PTR _gametype_cons_t[eax*8], 42 ; 0000002aH
  00334	75 09		 jne	 SHORT $LN38@Command_Ma

; 2024 : 					newgametype = GTF_TEAMMATCH;

  00336	c7 45 e8 2a 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 42 ; 0000002aH
  0033d	eb 39		 jmp	 SHORT $LN43@Command_Ma
$LN38@Command_Ma:

; 2025 : 				else if (gametype_cons_t[j].value == GTF_CLASSICRACE)

  0033f	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00342	83 3c c5 00 00
	00 00 2b	 cmp	 DWORD PTR _gametype_cons_t[eax*8], 43 ; 0000002bH
  0034a	75 09		 jne	 SHORT $LN40@Command_Ma

; 2026 : 					newgametype = GTF_CLASSICRACE;

  0034c	c7 45 e8 2b 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 43 ; 0000002bH
  00353	eb 23		 jmp	 SHORT $LN43@Command_Ma
$LN40@Command_Ma:

; 2027 : 				else if (gametype_cons_t[j].value == GTF_HIDEANDSEEK)

  00355	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00358	83 3c c5 00 00
	00 00 2c	 cmp	 DWORD PTR _gametype_cons_t[eax*8], 44 ; 0000002cH
  00360	75 09		 jne	 SHORT $LN42@Command_Ma

; 2028 : 					newgametype = GTF_HIDEANDSEEK;

  00362	c7 45 e8 2c 00
	00 00		 mov	 DWORD PTR _newgametype$[ebp], 44 ; 0000002cH
  00369	eb 0d		 jmp	 SHORT $LN43@Command_Ma
$LN42@Command_Ma:

; 2029 : 				else
; 2030 : 					newgametype = gametype_cons_t[j].value;

  0036b	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  0036e	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8]
  00375	89 4d e8	 mov	 DWORD PTR _newgametype$[ebp], ecx
$LN43@Command_Ma:

; 2031 : 
; 2032 : 				break;

  00378	eb 05		 jmp	 SHORT $LN3@Command_Ma
$LN32@Command_Ma:

; 2033 : 			}

  0037a	e9 25 ff ff ff	 jmp	 $LN2@Command_Ma
$LN3@Command_Ma:

; 2034 : 
; 2035 : 		if (!gametype_cons_t[j].strvalue) // reached end of the list with no match

  0037f	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00382	83 3c c5 04 00
	00 00 00	 cmp	 DWORD PTR _gametype_cons_t[eax*8+4], 0
  0038a	75 54		 jne	 SHORT $LN6@Command_Ma

; 2036 : 		{
; 2037 : 			// assume they gave us a gametype number, which is okay too
; 2038 : 			for (j = 0; gametype_cons_t[j].strvalue != NULL; j++)

  0038c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00393	eb 09		 jmp	 SHORT $LN7@Command_Ma
$LN5@Command_Ma:
  00395	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00398	83 c0 01	 add	 eax, 1
  0039b	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$LN7@Command_Ma:
  0039e	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  003a1	83 3c c5 04 00
	00 00 00	 cmp	 DWORD PTR _gametype_cons_t[eax*8+4], 0
  003a9	74 35		 je	 SHORT $LN6@Command_Ma

; 2039 : 			{
; 2040 : 				if (atoi(COM_Argv(i+1)) == gametype_cons_t[j].value)

  003ab	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  003ae	83 c0 01	 add	 eax, 1
  003b1	50		 push	 eax
  003b2	e8 00 00 00 00	 call	 _COM_Argv
  003b7	83 c4 04	 add	 esp, 4
  003ba	50		 push	 eax
  003bb	e8 00 00 00 00	 call	 _atoi
  003c0	83 c4 04	 add	 esp, 4
  003c3	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  003c6	3b 04 cd 00 00
	00 00		 cmp	 eax, DWORD PTR _gametype_cons_t[ecx*8]
  003cd	75 0f		 jne	 SHORT $LN45@Command_Ma

; 2041 : 				{
; 2042 : 					newgametype = gametype_cons_t[j].value;

  003cf	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  003d2	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8]
  003d9	89 4d e8	 mov	 DWORD PTR _newgametype$[ebp], ecx

; 2043 : 					break;

  003dc	eb 02		 jmp	 SHORT $LN6@Command_Ma
$LN45@Command_Ma:

; 2044 : 				}
; 2045 : 			}

  003de	eb b5		 jmp	 SHORT $LN5@Command_Ma
$LN6@Command_Ma:

; 2046 : 		}
; 2047 : 	}
; 2048 : 
; 2049 : 	// don't use a gametype the map doesn't support
; 2050 : 	if (cv_debug || COM_CheckParm("-force") || cv_skipmapcheck.value)

  003e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  003e7	75 1a		 jne	 SHORT $LN48@Command_Ma
  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_06JKBLPGIK@?9force@
  003ee	e8 00 00 00 00	 call	 _COM_CheckParm
  003f3	83 c4 04	 add	 esp, 4
  003f6	85 c0		 test	 eax, eax
  003f8	75 09		 jne	 SHORT $LN48@Command_Ma
  003fa	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_skipmapcheck+20, 0
  00401	74 05		 je	 SHORT $LN46@Command_Ma
$LN48@Command_Ma:

; 2051 : 		;

  00403	e9 32 01 00 00	 jmp	 $LN61@Command_Ma
$LN46@Command_Ma:

; 2052 : 	else if (multiplayer)

  00408	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0040f	0f 84 ec 00 00
	00		 je	 $LN49@Command_Ma

; 2053 : 	{
; 2054 : 		INT16 tol = mapheaderinfo[newmapnum-1].typeoflevel, tolflag = 0;

  00415	8b 45 ec	 mov	 eax, DWORD PTR _newmapnum$[ebp]
  00418	83 e8 01	 sub	 eax, 1
  0041b	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  00421	66 8b 91 44 00
	00 00		 mov	 dx, WORD PTR _mapheaderinfo[ecx+68]
  00428	66 89 55 e0	 mov	 WORD PTR _tol$3[ebp], dx
  0042c	33 c0		 xor	 eax, eax
  0042e	66 89 45 dc	 mov	 WORD PTR _tolflag$2[ebp], ax

; 2055 : 
; 2056 : 		switch (newgametype)

  00432	8b 45 e8	 mov	 eax, DWORD PTR _newgametype$[ebp]
  00435	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  0043b	83 bd 78 ff ff
	ff 2c		 cmp	 DWORD PTR tv249[ebp], 44 ; 0000002cH
  00442	77 49		 ja	 SHORT $LN8@Command_Ma
  00444	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv249[ebp]
  0044a	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN65@Command_Ma[ecx]
  00451	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN66@Command_Ma[edx*4]
$LN51@Command_Ma:

; 2057 : 		{
; 2058 : 			case GT_MATCH: case GTF_TEAMMATCH: tolflag = TOL_MATCH; break;

  00458	b8 04 00 00 00	 mov	 eax, 4
  0045d	66 89 45 dc	 mov	 WORD PTR _tolflag$2[ebp], ax
  00461	eb 2a		 jmp	 SHORT $LN8@Command_Ma
$LN53@Command_Ma:

; 2059 : #ifdef CHAOSISNOTDEADYET
; 2060 : 			case GT_CHAOS: tolflag = TOL_CHAOS; break;
; 2061 : #endif
; 2062 : 			case GT_COOP: tolflag = TOL_COOP; break;

  00463	b8 01 00 00 00	 mov	 eax, 1
  00468	66 89 45 dc	 mov	 WORD PTR _tolflag$2[ebp], ax
  0046c	eb 1f		 jmp	 SHORT $LN8@Command_Ma
$LN54@Command_Ma:

; 2063 : 			case GT_RACE: case GTF_CLASSICRACE: tolflag = TOL_RACE; break;

  0046e	b8 02 00 00 00	 mov	 eax, 2
  00473	66 89 45 dc	 mov	 WORD PTR _tolflag$2[ebp], ax
  00477	eb 14		 jmp	 SHORT $LN8@Command_Ma
$LN56@Command_Ma:

; 2064 : 			case GT_CTF: tolflag = TOL_CTF; break;

  00479	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0047e	66 89 45 dc	 mov	 WORD PTR _tolflag$2[ebp], ax
  00482	eb 09		 jmp	 SHORT $LN8@Command_Ma
$LN57@Command_Ma:

; 2065 : 			case GT_TAG: case GTF_HIDEANDSEEK: tolflag = TOL_TAG; break;

  00484	b8 08 00 00 00	 mov	 eax, 8
  00489	66 89 45 dc	 mov	 WORD PTR _tolflag$2[ebp], ax
$LN8@Command_Ma:

; 2066 : 		}
; 2067 : 
; 2068 : 		if (!(tol & tolflag))

  0048d	0f bf 45 e0	 movsx	 eax, WORD PTR _tol$3[ebp]
  00491	0f bf 4d dc	 movsx	 ecx, WORD PTR _tolflag$2[ebp]
  00495	23 c1		 and	 eax, ecx
  00497	75 66		 jne	 SHORT $LN59@Command_Ma

; 2069 : 		{
; 2070 : 			char gametypestring[32];
; 2071 : 
; 2072 : 			for (i = 0; gametype_cons_t[i].strvalue != NULL; i++)

  00499	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004a0	eb 09		 jmp	 SHORT $LN12@Command_Ma
$LN10@Command_Ma:
  004a2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004a5	83 c0 01	 add	 eax, 1
  004a8	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN12@Command_Ma:
  004ab	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004ae	83 3c c5 04 00
	00 00 00	 cmp	 DWORD PTR _gametype_cons_t[eax*8+4], 0
  004b6	74 2a		 je	 SHORT $LN11@Command_Ma

; 2073 : 			{
; 2074 : 				if (gametype_cons_t[i].value == newgametype)

  004b8	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004bb	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8]
  004c2	3b 4d e8	 cmp	 ecx, DWORD PTR _newgametype$[ebp]
  004c5	75 19		 jne	 SHORT $LN60@Command_Ma

; 2075 : 				{
; 2076 : 					strcpy(gametypestring, gametype_cons_t[i].strvalue);

  004c7	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  004ca	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8+4]
  004d1	51		 push	 ecx
  004d2	8d 55 bc	 lea	 edx, DWORD PTR _gametypestring$1[ebp]
  004d5	52		 push	 edx
  004d6	e8 00 00 00 00	 call	 _strcpy
  004db	83 c4 08	 add	 esp, 8

; 2077 : 					break;

  004de	eb 02		 jmp	 SHORT $LN11@Command_Ma
$LN60@Command_Ma:

; 2078 : 				}
; 2079 : 			}

  004e0	eb c0		 jmp	 SHORT $LN10@Command_Ma
$LN11@Command_Ma:

; 2080 : 
; 2081 : 			CONS_Printf(text[GTNOTSUPPORTED], gametypestring);

  004e2	8d 45 bc	 lea	 eax, DWORD PTR _gametypestring$1[ebp]
  004e5	50		 push	 eax
  004e6	b9 04 00 00 00	 mov	 ecx, 4
  004eb	6b d1 70	 imul	 edx, ecx, 112
  004ee	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  004f4	50		 push	 eax
  004f5	e8 00 00 00 00	 call	 _CONS_Printf
  004fa	83 c4 08	 add	 esp, 8

; 2082 : 			return;

  004fd	eb 61		 jmp	 SHORT $LN1@Command_Ma
$LN59@Command_Ma:

; 2083 : 		}
; 2084 : 	}

  004ff	eb 39		 jmp	 SHORT $LN61@Command_Ma
$LN49@Command_Ma:

; 2085 : 	else if (!(mapheaderinfo[newmapnum-1].typeoflevel & TOL_SP))

  00501	8b 45 ec	 mov	 eax, DWORD PTR _newmapnum$[ebp]
  00504	83 e8 01	 sub	 eax, 1
  00507	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0050d	0f bf 91 44 00
	00 00		 movsx	 edx, WORD PTR _mapheaderinfo[ecx+68]
  00514	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  0051a	75 1e		 jne	 SHORT $LN61@Command_Ma

; 2086 : 	{
; 2087 : 		CONS_Printf("%s", text[SPNOTSUPPORTED]);

  0051c	b8 04 00 00 00	 mov	 eax, 4
  00521	6b c8 71	 imul	 ecx, eax, 113
  00524	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0052a	52		 push	 edx
  0052b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00530	e8 00 00 00 00	 call	 _CONS_Printf
  00535	83 c4 08	 add	 esp, 8

; 2088 : 		return;

  00538	eb 26		 jmp	 SHORT $LN1@Command_Ma
$LN61@Command_Ma:

; 2089 : 	}
; 2090 : 
; 2091 : 	fromlevelselect = false;

  0053a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _fromlevelselect, 0

; 2092 : 	D_MapChange(newmapnum, newgametype, false, newresetplayers, 0, false, false);

  00544	6a 00		 push	 0
  00546	6a 00		 push	 0
  00548	6a 00		 push	 0
  0054a	8b 45 e4	 mov	 eax, DWORD PTR _newresetplayers$[ebp]
  0054d	50		 push	 eax
  0054e	6a 00		 push	 0
  00550	8b 4d e8	 mov	 ecx, DWORD PTR _newgametype$[ebp]
  00553	51		 push	 ecx
  00554	8b 55 ec	 mov	 edx, DWORD PTR _newmapnum$[ebp]
  00557	52		 push	 edx
  00558	e8 00 00 00 00	 call	 _D_MapChange
  0055d	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@Command_Ma:

; 2093 : }

  00560	5f		 pop	 edi
  00561	5e		 pop	 esi
  00562	5b		 pop	 ebx
  00563	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00566	33 cd		 xor	 ecx, ebp
  00568	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0056d	8b e5		 mov	 esp, ebp
  0056f	5d		 pop	 ebp
  00570	c3		 ret	 0
  00571	0f 1f 00	 npad	 3
$LN66@Command_Ma:
  00574	00 00 00 00	 DD	 $LN53@Command_Ma
  00578	00 00 00 00	 DD	 $LN51@Command_Ma
  0057c	00 00 00 00	 DD	 $LN54@Command_Ma
  00580	00 00 00 00	 DD	 $LN57@Command_Ma
  00584	00 00 00 00	 DD	 $LN56@Command_Ma
  00588	00 00 00 00	 DD	 $LN8@Command_Ma
$LN65@Command_Ma:
  0058c	00		 DB	 0
  0058d	01		 DB	 1
  0058e	02		 DB	 2
  0058f	03		 DB	 3
  00590	04		 DB	 4
  00591	05		 DB	 5
  00592	05		 DB	 5
  00593	05		 DB	 5
  00594	05		 DB	 5
  00595	05		 DB	 5
  00596	05		 DB	 5
  00597	05		 DB	 5
  00598	05		 DB	 5
  00599	05		 DB	 5
  0059a	05		 DB	 5
  0059b	05		 DB	 5
  0059c	05		 DB	 5
  0059d	05		 DB	 5
  0059e	05		 DB	 5
  0059f	05		 DB	 5
  005a0	05		 DB	 5
  005a1	05		 DB	 5
  005a2	05		 DB	 5
  005a3	05		 DB	 5
  005a4	05		 DB	 5
  005a5	05		 DB	 5
  005a6	05		 DB	 5
  005a7	05		 DB	 5
  005a8	05		 DB	 5
  005a9	05		 DB	 5
  005aa	05		 DB	 5
  005ab	05		 DB	 5
  005ac	05		 DB	 5
  005ad	05		 DB	 5
  005ae	05		 DB	 5
  005af	05		 DB	 5
  005b0	05		 DB	 5
  005b1	05		 DB	 5
  005b2	05		 DB	 5
  005b3	05		 DB	 5
  005b4	05		 DB	 5
  005b5	05		 DB	 5
  005b6	01		 DB	 1
  005b7	02		 DB	 2
  005b8	03		 DB	 3
_Command_Map_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Stopdemo_f
_TEXT	SEGMENT
_Command_Stopdemo_f PROC				; COMDAT

; 1833 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1834 : 	G_CheckDemoStatus();

  00009	e8 00 00 00 00	 call	 _G_CheckDemoStatus
  0000e	90		 npad	 1

; 1835 : 	CONS_Printf("%s", text[STOPPED_DEMO]);

  0000f	b8 04 00 00 00	 mov	 eax, 4
  00014	6b c8 68	 imul	 ecx, eax, 104
  00017	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0001d	52		 push	 edx
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00023	e8 00 00 00 00	 call	 _CONS_Printf
  00028	83 c4 08	 add	 esp, 8

; 1836 : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_Command_Stopdemo_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Timedemo_f
_TEXT	SEGMENT
_name$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_Command_Timedemo_f PROC				; COMDAT

; 1804 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1805 : 	char name[256];
; 1806 : 
; 1807 : 	if (COM_Argc() != 2)

  00016	e8 00 00 00 00	 call	 _COM_Argc
  0001b	83 f8 02	 cmp	 eax, 2
  0001e	74 21		 je	 SHORT $LN2@Command_Ti

; 1808 : 	{
; 1809 : 		CONS_Printf("%s", text[TIMEDEMO_HELP]);

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	6b c8 66	 imul	 ecx, eax, 102
  00028	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002e	52		 push	 edx
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00034	e8 00 00 00 00	 call	 _CONS_Printf
  00039	83 c4 08	 add	 esp, 8

; 1810 : 		return;

  0003c	e9 80 00 00 00	 jmp	 $LN1@Command_Ti
$LN2@Command_Ti:

; 1811 : 	}
; 1812 : 
; 1813 : 	// disconnect from server here?
; 1814 : 	if (demoplayback)

  00041	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00048	74 06		 je	 SHORT $LN3@Command_Ti

; 1815 : 		G_StopDemo();

  0004a	e8 00 00 00 00	 call	 _G_StopDemo
  0004f	90		 npad	 1
$LN3@Command_Ti:

; 1816 : 	if (netgame)

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00057	74 21		 je	 SHORT $LN4@Command_Ti

; 1817 : 	{
; 1818 : 		CONS_Printf("%s",text[NETGAME_DEMO]);

  00059	b8 04 00 00 00	 mov	 eax, 4
  0005e	69 c8 f0 00 00
	00		 imul	 ecx, eax, 240
  00064	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00070	e8 00 00 00 00	 call	 _CONS_Printf
  00075	83 c4 08	 add	 esp, 8

; 1819 : 		return;

  00078	eb 47		 jmp	 SHORT $LN1@Command_Ti
$LN4@Command_Ti:

; 1820 : 	}
; 1821 : 
; 1822 : 	// open the demo file
; 1823 : 	strcpy (name, COM_Argv(1));

  0007a	6a 01		 push	 1
  0007c	e8 00 00 00 00	 call	 _COM_Argv
  00081	83 c4 04	 add	 esp, 4
  00084	50		 push	 eax
  00085	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _strcpy
  00091	83 c4 08	 add	 esp, 8

; 1824 : 	// dont add .lmp so internal game demos can be played
; 1825 : 
; 1826 : 	CONS_Printf(text[TIMING_DEMO], name);

  00094	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, 4
  000a0	6b d1 67	 imul	 edx, ecx, 103
  000a3	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _CONS_Printf
  000af	83 c4 08	 add	 esp, 8

; 1827 : 
; 1828 : 	G_TimeDemo(name);

  000b2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _G_TimeDemo
  000be	83 c4 04	 add	 esp, 4
$LN1@Command_Ti:

; 1829 : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	33 cd		 xor	 ecx, ebp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_Command_Timedemo_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_Playdemo_f
_TEXT	SEGMENT
_name$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_Command_Playdemo_f PROC				; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1777 : 	char name[256];
; 1778 : 
; 1779 : 	if (COM_Argc() != 2)

  00016	e8 00 00 00 00	 call	 _COM_Argc
  0001b	83 f8 02	 cmp	 eax, 2
  0001e	74 21		 je	 SHORT $LN2@Command_Pl

; 1780 : 	{
; 1781 : 		CONS_Printf("%s", text[PLAYDEMO_HELP]);

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	6b c8 64	 imul	 ecx, eax, 100
  00028	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002e	52		 push	 edx
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00034	e8 00 00 00 00	 call	 _CONS_Printf
  00039	83 c4 08	 add	 esp, 8

; 1782 : 		return;

  0003c	e9 80 00 00 00	 jmp	 $LN1@Command_Pl
$LN2@Command_Pl:

; 1783 : 	}
; 1784 : 
; 1785 : 	// disconnect from server here?
; 1786 : 	if (demoplayback)

  00041	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00048	74 06		 je	 SHORT $LN3@Command_Pl

; 1787 : 		G_StopDemo();

  0004a	e8 00 00 00 00	 call	 _G_StopDemo
  0004f	90		 npad	 1
$LN3@Command_Pl:

; 1788 : 	if (netgame)

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00057	74 21		 je	 SHORT $LN4@Command_Pl

; 1789 : 	{
; 1790 : 		CONS_Printf("%s",text[NETGAME_DEMO]);

  00059	b8 04 00 00 00	 mov	 eax, 4
  0005e	69 c8 f0 00 00
	00		 imul	 ecx, eax, 240
  00064	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00070	e8 00 00 00 00	 call	 _CONS_Printf
  00075	83 c4 08	 add	 esp, 8

; 1791 : 		return;

  00078	eb 47		 jmp	 SHORT $LN1@Command_Pl
$LN4@Command_Pl:

; 1792 : 	}
; 1793 : 
; 1794 : 	// open the demo file
; 1795 : 	strcpy(name, COM_Argv(1));

  0007a	6a 01		 push	 1
  0007c	e8 00 00 00 00	 call	 _COM_Argv
  00081	83 c4 04	 add	 esp, 4
  00084	50		 push	 eax
  00085	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _strcpy
  00091	83 c4 08	 add	 esp, 8

; 1796 : 	// dont add .lmp so internal game demos can be played
; 1797 : 
; 1798 : 	CONS_Printf(text[PLAYBACK_DEMO], name);

  00094	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, 4
  000a0	6b d1 65	 imul	 edx, ecx, 101
  000a3	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _CONS_Printf
  000af	83 c4 08	 add	 esp, 8

; 1799 : 
; 1800 : 	G_DoPlayDemo(name);

  000b2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _name$[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _G_DoPlayDemo
  000be	83 c4 04	 add	 esp, 4
$LN1@Command_Pl:

; 1801 : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	33 cd		 xor	 ecx, ebp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_Command_Playdemo_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _SoundTest_OnChange
_TEXT	SEGMENT
_SoundTest_OnChange PROC				; COMDAT

; 4088 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4089 : 	if (cv_soundtest.value < 0)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_soundtest+20, 0
  00010	7d 14		 jge	 SHORT $LN2@SoundTest_

; 4090 : 	{
; 4091 : 		CV_SetValue(&cv_soundtest, NUMSFX-1);

  00012	68 62 07 00 00	 push	 1890			; 00000762H
  00017	68 00 00 00 00	 push	 OFFSET _cv_soundtest
  0001c	e8 00 00 00 00	 call	 _CV_SetValue
  00021	83 c4 08	 add	 esp, 8

; 4092 : 		return;

  00024	eb 33		 jmp	 SHORT $LN1@SoundTest_
$LN2@SoundTest_:

; 4093 : 	}
; 4094 : 
; 4095 : 	if (cv_soundtest.value >= NUMSFX)

  00026	81 3d 14 00 00
	00 63 07 00 00	 cmp	 DWORD PTR _cv_soundtest+20, 1891 ; 00000763H
  00030	7c 11		 jl	 SHORT $LN3@SoundTest_

; 4096 : 	{
; 4097 : 		CV_SetValue(&cv_soundtest, 0);

  00032	6a 00		 push	 0
  00034	68 00 00 00 00	 push	 OFFSET _cv_soundtest
  00039	e8 00 00 00 00	 call	 _CV_SetValue
  0003e	83 c4 08	 add	 esp, 8

; 4098 : 		return;

  00041	eb 16		 jmp	 SHORT $LN1@SoundTest_
$LN3@SoundTest_:

; 4099 : 	}
; 4100 : 
; 4101 : 	S_StopSounds();

  00043	e8 00 00 00 00	 call	 _S_StopSounds
  00048	90		 npad	 1

; 4102 : 	S_StartSound(NULL, cv_soundtest.value);

  00049	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_soundtest+20
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	e8 00 00 00 00	 call	 _S_StartSound
  00056	83 c4 08	 add	 esp, 8
$LN1@SoundTest_:

; 4103 : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_SoundTest_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _DummyConsvar_OnChange
_TEXT	SEGMENT
_DummyConsvar_OnChange PROC				; COMDAT

; 4774 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4775 : 	if (cv_dummyconsvar.value == 1)

  00009	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_dummyconsvar+20, 1
  00010	75 15		 jne	 SHORT $LN2@DummyConsv

; 4776 : 	{
; 4777 : 		CV_SetValue(&cv_dummyconsvar, 0);

  00012	6a 00		 push	 0
  00014	68 00 00 00 00	 push	 OFFSET _cv_dummyconsvar
  00019	e8 00 00 00 00	 call	 _CV_SetValue
  0001e	83 c4 08	 add	 esp, 8

; 4778 : 		CV_ClearChangedFlags();

  00021	e8 00 00 00 00	 call	 _CV_ClearChangedFlags
  00026	90		 npad	 1
$LN2@DummyConsv:

; 4779 : 	}
; 4780 : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_DummyConsvar_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Color2_OnChange
_TEXT	SEGMENT
_Color2_OnChange PROC					; COMDAT

; 4706 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4707 : 	if (!P_PlayerMoving(secondarydisplayplayer))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _secondarydisplayplayer
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _P_PlayerMoving
  00014	83 c4 04	 add	 esp, 4
  00017	85 c0		 test	 eax, eax
  00019	0f 85 a5 00 00
	00		 jne	 $LN2@Color2_OnC

; 4708 : 	{
; 4709 : 		// Color change menu scrolling fix
; 4710 : 		// Determine what direction you are scrolling
; 4711 : 		// and skip the proper colors.
; 4712 : 		if (menuactive)

  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00026	0f 84 90 00 00
	00		 je	 $LN12@Color2_OnC

; 4713 : 		{
; 4714 : 			if (cv_playercolor2.value == 0) // no color

  0002c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_playercolor2+20, 0
  00033	75 33		 jne	 SHORT $LN7@Color2_OnC

; 4715 : 			{
; 4716 : 				if (players[secondarydisplayplayer].skincolor == 1)

  00035	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0003f	83 b8 b4 00 00
	00 01		 cmp	 DWORD PTR _players[eax+180], 1
  00046	75 11		 jne	 SHORT $LN6@Color2_OnC

; 4717 : 					CV_StealthSetValue(&cv_playercolor2, 15);

  00048	6a 0f		 push	 15			; 0000000fH
  0004a	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  0004f	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00054	83 c4 08	 add	 esp, 8
  00057	eb 0f		 jmp	 SHORT $LN7@Color2_OnC
$LN6@Color2_OnC:

; 4718 : 				else
; 4719 : 					CV_StealthSetValue(&cv_playercolor2, 1);

  00059	6a 01		 push	 1
  0005b	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  00060	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00065	83 c4 08	 add	 esp, 8
$LN7@Color2_OnC:

; 4720 : 			}
; 4721 : 
; 4722 : 			if (gametype == GT_MATCH || gametype == GT_CTF) // yellow

  00068	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0006f	83 f8 01	 cmp	 eax, 1
  00072	74 0c		 je	 SHORT $LN9@Color2_OnC
  00074	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007b	83 f8 04	 cmp	 eax, 4
  0007e	75 3c		 jne	 SHORT $LN12@Color2_OnC
$LN9@Color2_OnC:

; 4723 : 			{
; 4724 : 				if (cv_playercolor2.value == 15)

  00080	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR _cv_playercolor2+20, 15 ; 0000000fH
  00087	75 33		 jne	 SHORT $LN12@Color2_OnC

; 4725 : 				{
; 4726 : 					if (players[secondarydisplayplayer].skincolor == 1)

  00089	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00093	83 b8 b4 00 00
	00 01		 cmp	 DWORD PTR _players[eax+180], 1
  0009a	75 11		 jne	 SHORT $LN11@Color2_OnC

; 4727 : 						CV_StealthSetValue(&cv_playercolor2, 14);

  0009c	6a 0e		 push	 14			; 0000000eH
  0009e	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  000a3	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000a8	83 c4 08	 add	 esp, 8
  000ab	eb 0f		 jmp	 SHORT $LN12@Color2_OnC
$LN11@Color2_OnC:

; 4728 : 					else
; 4729 : 						CV_StealthSetValue(&cv_playercolor2, 1);

  000ad	6a 01		 push	 1
  000af	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  000b4	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000b9	83 c4 08	 add	 esp, 8
$LN12@Color2_OnC:

; 4730 : 				}
; 4731 : 			}
; 4732 : 		}
; 4733 : 
; 4734 : 		SendNameAndColor2();

  000bc	e8 00 00 00 00	 call	 _SendNameAndColor2
  000c1	90		 npad	 1

; 4735 : 	}

  000c2	eb 1e		 jmp	 SHORT $LN3@Color2_OnC
$LN2@Color2_OnC:

; 4736 : 	else
; 4737 : 		CV_StealthSetValue(&cv_playercolor2,

  000c4	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  000ce	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  000d4	51		 push	 ecx
  000d5	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  000da	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000df	83 c4 08	 add	 esp, 8
$LN3@Color2_OnC:

; 4738 : 			players[secondarydisplayplayer].skincolor);
; 4739 : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
_Color2_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Color_OnChange
_TEXT	SEGMENT
_Color_OnChange PROC					; COMDAT

; 4665 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4666 : 	if (!P_PlayerMoving(consoleplayer))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _P_PlayerMoving
  00014	83 c4 04	 add	 esp, 4
  00017	85 c0		 test	 eax, eax
  00019	0f 85 a5 00 00
	00		 jne	 $LN2@Color_OnCh

; 4667 : 	{
; 4668 : 		// Color change menu scrolling fix
; 4669 : 		// Determine what direction you are scrolling
; 4670 : 		// and skip the proper colors.
; 4671 : 		if (menuactive)

  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00026	0f 84 90 00 00
	00		 je	 $LN12@Color_OnCh

; 4672 : 		{
; 4673 : 			if (cv_playercolor.value == 0) // no color

  0002c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_playercolor+20, 0
  00033	75 33		 jne	 SHORT $LN7@Color_OnCh

; 4674 : 			{
; 4675 : 				if (players[consoleplayer].skincolor == 1)

  00035	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0003f	83 b8 b4 00 00
	00 01		 cmp	 DWORD PTR _players[eax+180], 1
  00046	75 11		 jne	 SHORT $LN6@Color_OnCh

; 4676 : 					CV_StealthSetValue(&cv_playercolor, 15);

  00048	6a 0f		 push	 15			; 0000000fH
  0004a	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  0004f	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00054	83 c4 08	 add	 esp, 8
  00057	eb 0f		 jmp	 SHORT $LN7@Color_OnCh
$LN6@Color_OnCh:

; 4677 : 				else
; 4678 : 					CV_StealthSetValue(&cv_playercolor, 1);

  00059	6a 01		 push	 1
  0005b	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  00060	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00065	83 c4 08	 add	 esp, 8
$LN7@Color_OnCh:

; 4679 : 			}
; 4680 : 
; 4681 : 			if (gametype == GT_MATCH || gametype == GT_CTF) // yellow

  00068	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0006f	83 f8 01	 cmp	 eax, 1
  00072	74 0c		 je	 SHORT $LN9@Color_OnCh
  00074	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007b	83 f8 04	 cmp	 eax, 4
  0007e	75 3c		 jne	 SHORT $LN12@Color_OnCh
$LN9@Color_OnCh:

; 4682 : 			{
; 4683 : 				if (cv_playercolor.value == 15)

  00080	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR _cv_playercolor+20, 15 ; 0000000fH
  00087	75 33		 jne	 SHORT $LN12@Color_OnCh

; 4684 : 				{
; 4685 : 					if (players[consoleplayer].skincolor == 1)

  00089	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00093	83 b8 b4 00 00
	00 01		 cmp	 DWORD PTR _players[eax+180], 1
  0009a	75 11		 jne	 SHORT $LN11@Color_OnCh

; 4686 : 						CV_StealthSetValue(&cv_playercolor, 14);

  0009c	6a 0e		 push	 14			; 0000000eH
  0009e	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  000a3	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000a8	83 c4 08	 add	 esp, 8
  000ab	eb 0f		 jmp	 SHORT $LN12@Color_OnCh
$LN11@Color_OnCh:

; 4687 : 					else
; 4688 : 						CV_StealthSetValue(&cv_playercolor, 1);

  000ad	6a 01		 push	 1
  000af	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  000b4	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000b9	83 c4 08	 add	 esp, 8
$LN12@Color_OnCh:

; 4689 : 				}
; 4690 : 			}
; 4691 : 		}
; 4692 : 
; 4693 : 		SendNameAndColor();

  000bc	e8 00 00 00 00	 call	 _SendNameAndColor
  000c1	90		 npad	 1

; 4694 : 	}

  000c2	eb 1e		 jmp	 SHORT $LN3@Color_OnCh
$LN2@Color_OnCh:

; 4695 : 	else
; 4696 : 		CV_StealthSetValue(&cv_playercolor,

  000c4	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  000ce	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  000d4	51		 push	 ecx
  000d5	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  000da	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000df	83 c4 08	 add	 esp, 8
$LN3@Color_OnCh:

; 4697 : 			players[consoleplayer].skincolor);
; 4698 : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
_Color_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Skin2_OnChange
_TEXT	SEGMENT
_Skin2_OnChange PROC					; COMDAT

; 4653 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4654 : 	if (!P_PlayerMoving(secondarydisplayplayer))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _secondarydisplayplayer
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _P_PlayerMoving
  00014	83 c4 04	 add	 esp, 4
  00017	85 c0		 test	 eax, eax
  00019	75 08		 jne	 SHORT $LN2@Skin2_OnCh

; 4655 : 		SendNameAndColor2();

  0001b	e8 00 00 00 00	 call	 _SendNameAndColor2
  00020	90		 npad	 1
  00021	eb 28		 jmp	 SHORT $LN3@Skin2_OnCh
$LN2@Skin2_OnCh:

; 4656 : 	else
; 4657 : 		CV_StealthSet(&cv_skin2, skins[players[secondarydisplayplayer].skin].name);

  00023	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0002d	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR _players[eax+184], 236
  00037	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  0003d	51		 push	 ecx
  0003e	68 00 00 00 00	 push	 OFFSET _cv_skin2
  00043	e8 00 00 00 00	 call	 _CV_StealthSet
  00048	83 c4 08	 add	 esp, 8
$LN3@Skin2_OnCh:

; 4658 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_Skin2_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Skin_OnChange
_TEXT	SEGMENT
_Skin_OnChange PROC					; COMDAT

; 4640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4641 : 	if (!P_PlayerMoving(consoleplayer))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _P_PlayerMoving
  00014	83 c4 04	 add	 esp, 4
  00017	85 c0		 test	 eax, eax
  00019	75 08		 jne	 SHORT $LN2@Skin_OnCha

; 4642 : 		SendNameAndColor();

  0001b	e8 00 00 00 00	 call	 _SendNameAndColor
  00020	90		 npad	 1
  00021	eb 28		 jmp	 SHORT $LN3@Skin_OnCha
$LN2@Skin_OnCha:

; 4643 : 	else
; 4644 : 		CV_StealthSet(&cv_skin, skins[players[consoleplayer].skin].name);

  00023	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0002d	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR _players[eax+184], 236
  00037	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  0003d	51		 push	 ecx
  0003e	68 00 00 00 00	 push	 OFFSET _cv_skin
  00043	e8 00 00 00 00	 call	 _CV_StealthSet
  00048	83 c4 08	 add	 esp, 8
$LN3@Skin_OnCha:

; 4645 : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_Skin_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Name2_OnChange
_TEXT	SEGMENT
_Name2_OnChange PROC					; COMDAT

; 4625 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4626 : 	if (cv_mute.value) //Secondary player can't be admin.

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00010	74 3b		 je	 SHORT $LN2@Name2_OnCh

; 4627 : 	{
; 4628 : 		CONS_Printf("%s", text[NO_NAME_CHANGE]);

  00012	b8 04 00 00 00	 mov	 eax, 4
  00017	69 c8 c5 00 00
	00		 imul	 ecx, eax, 197
  0001d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00023	52		 push	 edx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00029	e8 00 00 00 00	 call	 _CONS_Printf
  0002e	83 c4 08	 add	 esp, 8

; 4629 : 		CV_StealthSet(&cv_playername2, player_names[secondarydisplayplayer]);

  00031	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _secondarydisplayplayer, 22
  00038	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET _cv_playername2
  00043	e8 00 00 00 00	 call	 _CV_StealthSet
  00048	83 c4 08	 add	 esp, 8

; 4630 : 	}

  0004b	eb 06		 jmp	 SHORT $LN3@Name2_OnCh
$LN2@Name2_OnCh:

; 4631 : 	else
; 4632 : 		SendNameAndColor2();

  0004d	e8 00 00 00 00	 call	 _SendNameAndColor2
  00052	90		 npad	 1
$LN3@Name2_OnCh:

; 4633 : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_Name2_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Name_OnChange
_TEXT	SEGMENT
_Name_OnChange PROC					; COMDAT

; 4613 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4614 : 	if (cv_mute.value && !(server || adminplayer == consoleplayer))

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00010	74 51		 je	 SHORT $LN2@Name_OnCha
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00019	75 48		 jne	 SHORT $LN2@Name_OnCha
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00026	74 3b		 je	 SHORT $LN2@Name_OnCha

; 4615 : 	{
; 4616 : 		CONS_Printf("%s", text[NO_NAME_CHANGE]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	69 c8 c5 00 00
	00		 imul	 ecx, eax, 197
  00033	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00039	52		 push	 edx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0003f	e8 00 00 00 00	 call	 _CONS_Printf
  00044	83 c4 08	 add	 esp, 8

; 4617 : 		CV_StealthSet(&cv_playername, player_names[consoleplayer]);

  00047	6b 05 00 00 00
	00 16		 imul	 eax, DWORD PTR _consoleplayer, 22
  0004e	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET _cv_playername
  00059	e8 00 00 00 00	 call	 _CV_StealthSet
  0005e	83 c4 08	 add	 esp, 8

; 4618 : 	}

  00061	eb 06		 jmp	 SHORT $LN3@Name_OnCha
$LN2@Name_OnCha:

; 4619 : 	else
; 4620 : 		SendNameAndColor();

  00063	e8 00 00 00 00	 call	 _SendNameAndColor
  00068	90		 npad	 1
$LN3@Name_OnCha:

; 4621 : 
; 4622 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_Name_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _ForceSkin_OnChange
_TEXT	SEGMENT
_ForceSkin_OnChange PROC				; COMDAT

; 4589 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4590 : 	if ((server || adminplayer) && (cv_forceskin.value < -1 || cv_forceskin.value >= numskins))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 09		 jne	 SHORT $LN3@ForceSkin_
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _adminplayer, 0
  00019	74 74		 je	 SHORT $LN6@ForceSkin_
$LN3@ForceSkin_:
  0001b	83 3d 14 00 00
	00 ff		 cmp	 DWORD PTR _cv_forceskin+20, -1
  00022	7c 0d		 jl	 SHORT $LN4@ForceSkin_
  00024	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_forceskin+20
  00029	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numskins
  0002f	7c 5e		 jl	 SHORT $LN6@ForceSkin_
$LN4@ForceSkin_:

; 4591 : 	{
; 4592 : 		if (cv_forceskin.value == -2)

  00031	83 3d 14 00 00
	00 fe		 cmp	 DWORD PTR _cv_forceskin+20, -2 ; fffffffeH
  00038	75 18		 jne	 SHORT $LN5@ForceSkin_

; 4593 : 			CV_StealthSetValue(&cv_forceskin, numskins-1);

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR _numskins
  0003f	83 e8 01	 sub	 eax, 1
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET _cv_forceskin
  00048	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0004d	83 c4 08	 add	 esp, 8
  00050	eb 3d		 jmp	 SHORT $LN6@ForceSkin_
$LN5@ForceSkin_:

; 4594 : 		else
; 4595 : 		{
; 4596 : 			// hack because I can't restrict this and still allow added skins to be used with forceskin.
; 4597 : 			if (!menuactive)

  00052	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00059	75 23		 jne	 SHORT $LN7@ForceSkin_

; 4598 : 				CONS_Printf(text[FORCESKIN_HELP], numskins - 1);

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _numskins
  00060	83 e8 01	 sub	 eax, 1
  00063	50		 push	 eax
  00064	b9 04 00 00 00	 mov	 ecx, 4
  00069	69 d1 c4 00 00
	00		 imul	 edx, ecx, 196
  0006f	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _CONS_Printf
  0007b	83 c4 08	 add	 esp, 8
$LN7@ForceSkin_:

; 4599 : 			CV_SetValue(&cv_forceskin, -1);

  0007e	6a ff		 push	 -1
  00080	68 00 00 00 00	 push	 OFFSET _cv_forceskin
  00085	e8 00 00 00 00	 call	 _CV_SetValue
  0008a	83 c4 08	 add	 esp, 8

; 4600 : 			return;

  0008d	eb 2b		 jmp	 SHORT $LN8@ForceSkin_
$LN6@ForceSkin_:

; 4601 : 		}
; 4602 : 	}
; 4603 : 
; 4604 : 	if (cv_forceskin.value >= 0 && (netgame || multiplayer)) // NOT in SP, silly!

  0008f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_forceskin+20, 0
  00096	7c 22		 jl	 SHORT $LN8@ForceSkin_
  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0009f	75 09		 jne	 SHORT $LN9@ForceSkin_
  000a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000a8	74 10		 je	 SHORT $LN8@ForceSkin_
$LN9@ForceSkin_:

; 4605 : 	{
; 4606 : 		triggerforcedskin = true;

  000aa	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _triggerforcedskin, 1

; 4607 : 		SendNameAndColor(); // have it take effect immediately

  000b4	e8 00 00 00 00	 call	 _SendNameAndColor
  000b9	90		 npad	 1
$LN8@ForceSkin_:

; 4608 : 	}
; 4609 : }

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_ForceSkin_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Gravity_OnChange
_TEXT	SEGMENT
_Gravity_OnChange PROC					; COMDAT

; 4069 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4070 : 	if ((grade&7) < 2 && !netgame
; 4071 : 		&& strcmp(cv_gravity.string, cv_gravity.defaultvalue))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0000e	83 e0 07	 and	 eax, 7
  00011	83 f8 02	 cmp	 eax, 2
  00014	73 56		 jae	 SHORT $LN2@Gravity_On
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001d	75 4d		 jne	 SHORT $LN2@Gravity_On
  0001f	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_gravity+4
  00024	50		 push	 eax
  00025	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _cv_gravity+24
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _strcmp
  00031	83 c4 08	 add	 esp, 8
  00034	85 c0		 test	 eax, eax
  00036	74 34		 je	 SHORT $LN2@Gravity_On

; 4072 : 	{
; 4073 : 		CONS_Printf("%s", text[NOTEARNED]);

  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	69 c8 f9 00 00
	00		 imul	 ecx, eax, 249
  00043	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00049	52		 push	 edx
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004f	e8 00 00 00 00	 call	 _CONS_Printf
  00054	83 c4 08	 add	 esp, 8

; 4074 : 		CV_StealthSet(&cv_gravity, cv_gravity.defaultvalue);

  00057	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_gravity+4
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET _cv_gravity
  00062	e8 00 00 00 00	 call	 _CV_StealthSet
  00067	83 c4 08	 add	 esp, 8

; 4075 : 		return;

  0006a	eb 28		 jmp	 SHORT $LN1@Gravity_On
$LN2@Gravity_On:

; 4076 : 	}
; 4077 : 
; 4078 : 	if(netgame)

  0006c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00073	74 15		 je	 SHORT $LN3@Gravity_On

; 4079 : 	{
; 4080 : 		CV_StealthSet(&cv_gravity, cv_gravity.defaultvalue);

  00075	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_gravity+4
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET _cv_gravity
  00080	e8 00 00 00 00	 call	 _CV_StealthSet
  00085	83 c4 08	 add	 esp, 8

; 4081 : 		return;

  00088	eb 0a		 jmp	 SHORT $LN1@Gravity_On
$LN3@Gravity_On:

; 4082 : 	}
; 4083 : 
; 4084 : 	gravity = cv_gravity.value;

  0008a	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_gravity+20
  0008f	a3 00 00 00 00	 mov	 DWORD PTR _gravity, eax
$LN1@Gravity_On:

; 4085 : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_Gravity_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Setcontinues_OnChange
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_Setcontinues_OnChange PROC				; COMDAT

; 4040 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4041 : 	if ((grade&7) < 4 && !netgame && cv_setcontinues.value && !cv_debug)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0000e	83 e0 07	 and	 eax, 7
  00011	83 f8 04	 cmp	 eax, 4
  00014	73 4e		 jae	 SHORT $LN5@Setcontinu
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001d	75 45		 jne	 SHORT $LN5@Setcontinu
  0001f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_setcontinues+20, 0
  00026	74 3c		 je	 SHORT $LN5@Setcontinu
  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002f	75 33		 jne	 SHORT $LN5@Setcontinu

; 4042 : 	{
; 4043 : 		CONS_Printf("%s", text[NOTEARNED]);

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	69 c8 f9 00 00
	00		 imul	 ecx, eax, 249
  0003c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00042	52		 push	 edx
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00048	e8 00 00 00 00	 call	 _CONS_Printf
  0004d	83 c4 08	 add	 esp, 8

; 4044 : 		CV_StealthSetValue(&cv_setcontinues, 0);

  00050	6a 00		 push	 0
  00052	68 00 00 00 00	 push	 OFFSET _cv_setcontinues
  00057	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0005c	83 c4 08	 add	 esp, 8

; 4045 : 		return;

  0005f	e9 c3 00 00 00	 jmp	 $LN11@Setcontinu
$LN5@Setcontinu:

; 4046 : 	}
; 4047 : 
; 4048 : 	if (cv_setcontinues.value)

  00064	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_setcontinues+20, 0
  0006b	0f 84 b6 00 00
	00		 je	 $LN11@Setcontinu

; 4049 : 	{
; 4050 : 		INT32 i;
; 4051 : 		for (i = 0; i < MAXPLAYERS; i++)

  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN4@Setcontinu
$LN2@Setcontinu:
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Setcontinu:
  00083	83 7d fc 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  00087	7d 22		 jge	 SHORT $LN3@Setcontinu

; 4052 : 			if (playeringame[i])

  00089	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0008c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00094	74 13		 je	 SHORT $LN7@Setcontinu

; 4053 : 				players[i].continues = cv_setcontinues.value;

  00096	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  0009d	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_setcontinues+20
  000a3	89 88 04 01 00
	00		 mov	 DWORD PTR _players[eax+260], ecx
$LN7@Setcontinu:
  000a9	eb cf		 jmp	 SHORT $LN2@Setcontinu
$LN3@Setcontinu:

; 4054 : 
; 4055 : 		if (!modifiedgame || savemoddata)

  000ab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  000b2	74 09		 je	 SHORT $LN9@Setcontinu
  000b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  000bb	74 45		 je	 SHORT $LN10@Setcontinu
$LN9@Setcontinu:

; 4056 : 		{
; 4057 : 			modifiedgame = true;

  000bd	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1

; 4058 : 			savemoddata = false;

  000c7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savemoddata, 0

; 4059 : 			if (!(netgame || multiplayer))

  000d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000d8	75 28		 jne	 SHORT $LN10@Setcontinu
  000da	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000e1	75 1f		 jne	 SHORT $LN10@Setcontinu

; 4060 : 				CONS_Printf("%s", text[GAMEMODIFIED]);

  000e3	b8 04 00 00 00	 mov	 eax, 4
  000e8	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  000ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f4	52		 push	 edx
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000fa	e8 00 00 00 00	 call	 _CONS_Printf
  000ff	83 c4 08	 add	 esp, 8
$LN10@Setcontinu:

; 4061 : 		}
; 4062 : 
; 4063 : 		if (adminplayer == consoleplayer || server)

  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00107	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0010d	74 09		 je	 SHORT $LN12@Setcontinu
  0010f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00116	74 0f		 je	 SHORT $LN11@Setcontinu
$LN12@Setcontinu:

; 4064 : 			CV_StealthSetValue(&cv_setcontinues, 0);

  00118	6a 00		 push	 0
  0011a	68 00 00 00 00	 push	 OFFSET _cv_setcontinues
  0011f	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00124	83 c4 08	 add	 esp, 8
$LN11@Setcontinu:

; 4065 : 	}
; 4066 : }

  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
_Setcontinues_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Setlives_OnChange
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_Setlives_OnChange PROC					; COMDAT

; 4008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4009 : 	if ((grade&7) < 4 && !netgame && cv_setlives.value && !cv_debug)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0000e	83 e0 07	 and	 eax, 7
  00011	83 f8 04	 cmp	 eax, 4
  00014	73 4e		 jae	 SHORT $LN5@Setlives_O
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001d	75 45		 jne	 SHORT $LN5@Setlives_O
  0001f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_setlives+20, 0
  00026	74 3c		 je	 SHORT $LN5@Setlives_O
  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002f	75 33		 jne	 SHORT $LN5@Setlives_O

; 4010 : 	{
; 4011 : 		CONS_Printf("%s", text[NOTEARNED]);

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	69 c8 f9 00 00
	00		 imul	 ecx, eax, 249
  0003c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00042	52		 push	 edx
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00048	e8 00 00 00 00	 call	 _CONS_Printf
  0004d	83 c4 08	 add	 esp, 8

; 4012 : 		CV_StealthSetValue(&cv_setlives, 0);

  00050	6a 00		 push	 0
  00052	68 00 00 00 00	 push	 OFFSET _cv_setlives
  00057	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0005c	83 c4 08	 add	 esp, 8

; 4013 : 		return;

  0005f	e9 dd 00 00 00	 jmp	 $LN11@Setlives_O
$LN5@Setlives_O:

; 4014 : 	}
; 4015 : 
; 4016 : 	if (cv_setlives.value)

  00064	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_setlives+20, 0
  0006b	0f 84 d0 00 00
	00		 je	 $LN11@Setlives_O

; 4017 : 	{
; 4018 : 		INT32 i;
; 4019 : 		for (i = 0; i < MAXPLAYERS; i++)

  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN4@Setlives_O
$LN2@Setlives_O:
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Setlives_O:
  00083	83 7d fc 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  00087	7d 3c		 jge	 SHORT $LN3@Setlives_O

; 4020 : 			if (playeringame[i])

  00089	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0008c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00094	74 2d		 je	 SHORT $LN7@Setlives_O

; 4021 : 			{
; 4022 : 				players[i].lives = 0;

  00096	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  0009d	c7 80 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+256], 0

; 4023 : 				P_GivePlayerLives(&players[i], cv_setlives.value);

  000a7	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_setlives+20
  000ac	50		 push	 eax
  000ad	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 508
  000b4	81 c1 00 00 00
	00		 add	 ecx, OFFSET _players
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _P_GivePlayerLives
  000c0	83 c4 08	 add	 esp, 8
$LN7@Setlives_O:

; 4024 : 			}

  000c3	eb b5		 jmp	 SHORT $LN2@Setlives_O
$LN3@Setlives_O:

; 4025 : 
; 4026 : 		if (!modifiedgame || savemoddata)

  000c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  000cc	74 09		 je	 SHORT $LN9@Setlives_O
  000ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  000d5	74 45		 je	 SHORT $LN10@Setlives_O
$LN9@Setlives_O:

; 4027 : 		{
; 4028 : 			modifiedgame = true;

  000d7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1

; 4029 : 			savemoddata = false;

  000e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savemoddata, 0

; 4030 : 			if (!(netgame || multiplayer))

  000eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000f2	75 28		 jne	 SHORT $LN10@Setlives_O
  000f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000fb	75 1f		 jne	 SHORT $LN10@Setlives_O

; 4031 : 				CONS_Printf("%s", text[GAMEMODIFIED]);

  000fd	b8 04 00 00 00	 mov	 eax, 4
  00102	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  00108	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0010e	52		 push	 edx
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00114	e8 00 00 00 00	 call	 _CONS_Printf
  00119	83 c4 08	 add	 esp, 8
$LN10@Setlives_O:

; 4032 : 		}
; 4033 : 
; 4034 : 		if (adminplayer == consoleplayer || server)

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00121	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00127	74 09		 je	 SHORT $LN12@Setlives_O
  00129	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00130	74 0f		 je	 SHORT $LN11@Setlives_O
$LN12@Setlives_O:

; 4035 : 			CV_StealthSetValue(&cv_setlives, 0);

  00132	6a 00		 push	 0
  00134	68 00 00 00 00	 push	 OFFSET _cv_setlives
  00139	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0013e	83 c4 08	 add	 esp, 8
$LN11@Setlives_O:

; 4036 : 	}
; 4037 : }

  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
_Setlives_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Setrings_OnChange
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_Setrings_OnChange PROC					; COMDAT

; 3975 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3976 : 	if ((grade&7) < 5 && !netgame && cv_setrings.value && !cv_debug)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0000e	83 e0 07	 and	 eax, 7
  00011	83 f8 05	 cmp	 eax, 5
  00014	73 4e		 jae	 SHORT $LN5@Setrings_O
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001d	75 45		 jne	 SHORT $LN5@Setrings_O
  0001f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_setrings+20, 0
  00026	74 3c		 je	 SHORT $LN5@Setrings_O
  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002f	75 33		 jne	 SHORT $LN5@Setrings_O

; 3977 : 	{
; 3978 : 		CONS_Printf("%s", text[NOTEARNED]);

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	69 c8 f9 00 00
	00		 imul	 ecx, eax, 249
  0003c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00042	52		 push	 edx
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00048	e8 00 00 00 00	 call	 _CONS_Printf
  0004d	83 c4 08	 add	 esp, 8

; 3979 : 		CV_StealthSetValue(&cv_setrings, 0);

  00050	6a 00		 push	 0
  00052	68 00 00 00 00	 push	 OFFSET _cv_setrings
  00057	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0005c	83 c4 08	 add	 esp, 8

; 3980 : 		return;

  0005f	e9 0c 01 00 00	 jmp	 $LN11@Setrings_O
$LN5@Setrings_O:

; 3981 : 	}
; 3982 : 
; 3983 : 	if (cv_setrings.value)

  00064	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_setrings+20, 0
  0006b	0f 84 ff 00 00
	00		 je	 $LN11@Setrings_O

; 3984 : 	{
; 3985 : 		INT32 i;
; 3986 : 		for (i = 0; i < MAXPLAYERS; i++)

  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN4@Setrings_O
$LN2@Setrings_O:
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Setrings_O:
  00083	83 7d fc 20	 cmp	 DWORD PTR _i$1[ebp], 32	; 00000020H
  00087	7d 6b		 jge	 SHORT $LN3@Setrings_O

; 3987 : 			if (playeringame[i] && players[i].mo)

  00089	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0008c	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00094	74 5c		 je	 SHORT $LN7@Setrings_O
  00096	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  0009d	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  000a4	74 4c		 je	 SHORT $LN7@Setrings_O

; 3988 : 			{
; 3989 : 				players[i].mo->health = cv_setrings.value + 1;

  000a6	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_setrings+20
  000ab	83 c0 01	 add	 eax, 1
  000ae	69 4d fc fc 01
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 508
  000b5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  000bb	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax

; 3990 : 				players[i].health = players[i].mo->health;

  000c1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  000c8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  000ce	69 55 fc fc 01
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 508
  000d5	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  000db	89 82 28 00 00
	00		 mov	 DWORD PTR _players[edx+40], eax

; 3991 : 				players[i].losscount = 0;

  000e1	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 508
  000e8	c7 80 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+476], 0
$LN7@Setrings_O:

; 3992 : 			}

  000f2	eb 86		 jmp	 SHORT $LN2@Setrings_O
$LN3@Setrings_O:

; 3993 : 
; 3994 : 		if (!modifiedgame || savemoddata)

  000f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  000fb	74 09		 je	 SHORT $LN9@Setrings_O
  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00104	74 45		 je	 SHORT $LN10@Setrings_O
$LN9@Setrings_O:

; 3995 : 		{
; 3996 : 			modifiedgame = true;

  00106	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1

; 3997 : 			savemoddata = false;

  00110	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savemoddata, 0

; 3998 : 			if (!(netgame || multiplayer))

  0011a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00121	75 28		 jne	 SHORT $LN10@Setrings_O
  00123	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0012a	75 1f		 jne	 SHORT $LN10@Setrings_O

; 3999 : 				CONS_Printf("%s", text[GAMEMODIFIED]);

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  00137	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0013d	52		 push	 edx
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00143	e8 00 00 00 00	 call	 _CONS_Printf
  00148	83 c4 08	 add	 esp, 8
$LN10@Setrings_O:

; 4000 : 		}
; 4001 : 
; 4002 : 		if (adminplayer == consoleplayer || server)

  0014b	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00150	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00156	74 09		 je	 SHORT $LN12@Setrings_O
  00158	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0015f	74 0f		 je	 SHORT $LN11@Setrings_O
$LN12@Setrings_O:

; 4003 : 			CV_StealthSetValue(&cv_setrings, 0);

  00161	6a 00		 push	 0
  00163	68 00 00 00 00	 push	 OFFSET _cv_setrings
  00168	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0016d	83 c4 08	 add	 esp, 8
$LN11@Setrings_O:

; 4004 : 	}
; 4005 : }

  00170	5f		 pop	 edi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_Setrings_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Ringslinger_OnChange
_TEXT	SEGMENT
_Ringslinger_OnChange PROC				; COMDAT

; 3953 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3954 : 	// If you've got a grade less than 3, you can't use this.
; 3955 : 	if ((grade&7) < 3 && !netgame && cv_ringslinger.value && !cv_debug)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  0000e	83 e0 07	 and	 eax, 7
  00011	83 f8 03	 cmp	 eax, 3
  00014	73 4b		 jae	 SHORT $LN2@Ringslinge
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001d	75 42		 jne	 SHORT $LN2@Ringslinge
  0001f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_ringslinger+20, 0
  00026	74 39		 je	 SHORT $LN2@Ringslinge
  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cv_debug, 0
  0002f	75 30		 jne	 SHORT $LN2@Ringslinge

; 3956 : 	{
; 3957 : 		CONS_Printf("%s", text[NOTEARNED]);

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	69 c8 f9 00 00
	00		 imul	 ecx, eax, 249
  0003c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00042	52		 push	 edx
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00048	e8 00 00 00 00	 call	 _CONS_Printf
  0004d	83 c4 08	 add	 esp, 8

; 3958 : 		CV_StealthSetValue(&cv_ringslinger, 0);

  00050	6a 00		 push	 0
  00052	68 00 00 00 00	 push	 OFFSET _cv_ringslinger
  00057	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0005c	83 c4 08	 add	 esp, 8

; 3959 : 		return;

  0005f	eb 60		 jmp	 SHORT $LN6@Ringslinge
$LN2@Ringslinge:

; 3960 : 	}
; 3961 : 
; 3962 : 	if (cv_ringslinger.value) // Only if it's been turned on

  00061	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_ringslinger+20, 0
  00068	74 57		 je	 SHORT $LN6@Ringslinge

; 3963 : 	{
; 3964 : 		if (!modifiedgame || savemoddata)

  0006a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00071	74 09		 je	 SHORT $LN5@Ringslinge
  00073	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  0007a	74 45		 je	 SHORT $LN6@Ringslinge
$LN5@Ringslinge:

; 3965 : 		{
; 3966 : 			modifiedgame = true;

  0007c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1

; 3967 : 			savemoddata = false;

  00086	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savemoddata, 0

; 3968 : 			if (!(netgame || multiplayer))

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00097	75 28		 jne	 SHORT $LN6@Ringslinge
  00099	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000a0	75 1f		 jne	 SHORT $LN6@Ringslinge

; 3969 : 				CONS_Printf("%s", text[GAMEMODIFIED]);

  000a2	b8 04 00 00 00	 mov	 eax, 4
  000a7	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  000ad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b3	52		 push	 edx
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000b9	e8 00 00 00 00	 call	 _CONS_Printf
  000be	83 c4 08	 add	 esp, 8
$LN6@Ringslinge:

; 3970 : 		}
; 3971 : 	}
; 3972 : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
_Ringslinger_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _NetTimeout_OnChange
_TEXT	SEGMENT
_NetTimeout_OnChange PROC				; COMDAT

; 3715 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3716 : 	connectiontimeout = (tic_t)cv_nettimeout.value;

  00009	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_nettimeout+20
  0000e	a3 00 00 00 00	 mov	 DWORD PTR _connectiontimeout, eax

; 3717 : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_NetTimeout_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Hidetime_OnChange
_TEXT	SEGMENT
_Hidetime_OnChange PROC					; COMDAT

; 4366 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4367 : 	if ((gamestate == GS_LEVEL && gametype == GT_TAG) && ((cv_timelimit.value * 60) <= cv_hidetime.value))

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00010	75 4f		 jne	 SHORT $LN2@Hidetime_O
  00012	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00019	83 f8 03	 cmp	 eax, 3
  0001c	75 43		 jne	 SHORT $LN2@Hidetime_O
  0001e	6b 05 14 00 00
	00 3c		 imul	 eax, DWORD PTR _cv_timelimit+20, 60
  00025	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_hidetime+20
  0002b	7f 34		 jg	 SHORT $LN2@Hidetime_O

; 4368 : 	{
; 4369 : 		CONS_Printf("%s", text[HIDETIME_ERROR]);

  0002d	b8 04 00 00 00	 mov	 eax, 4
  00032	69 c8 b6 00 00
	00		 imul	 ecx, eax, 182
  00038	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0003e	52		 push	 edx
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00044	e8 00 00 00 00	 call	 _CONS_Printf
  00049	83 c4 08	 add	 esp, 8

; 4370 : 		CV_StealthSetValue(&cv_hidetime, hidetime);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hidetime
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET _cv_hidetime
  00057	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0005c	83 c4 08	 add	 esp, 8

; 4371 : 		return;

  0005f	eb 2f		 jmp	 SHORT $LN3@Hidetime_O
$LN2@Hidetime_O:

; 4372 : 	}
; 4373 : 	hidetime = cv_hidetime.value;

  00061	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_hidetime+20
  00066	a3 00 00 00 00	 mov	 DWORD PTR _hidetime, eax

; 4374 : 
; 4375 : 	//uh oh, gotta change timelimitintics now too
; 4376 : 	if (gametype == GT_TAG)

  0006b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00072	83 f8 03	 cmp	 eax, 3
  00075	75 19		 jne	 SHORT $LN3@Hidetime_O

; 4377 : 		timelimitintics = (cv_timelimit.value * 60 * TICRATE) + (hidetime * TICRATE);

  00077	6b 05 14 00 00
	00 3c		 imul	 eax, DWORD PTR _cv_timelimit+20, 60
  0007e	6b c8 23	 imul	 ecx, eax, 35
  00081	6b 15 00 00 00
	00 23		 imul	 edx, DWORD PTR _hidetime, 35
  00088	03 ca		 add	 ecx, edx
  0008a	89 0d 00 00 00
	00		 mov	 DWORD PTR _timelimitintics, ecx
$LN3@Hidetime_O:

; 4378 : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_Hidetime_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Tagtype_OnChange
_TEXT	SEGMENT
_playercount$1 = -148					; size = 4
_playerarray$2 = -144					; size = 128
_tempplayer$3 = -16					; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Tagtype_OnChange PROC					; COMDAT

; 4296 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4297 : 	INT32 i, j;
; 4298 : 
; 4299 : 	// Do not execute the below code unless absolutely necessary.
; 4300 : 	if (gametype != GT_TAG || gamestate != GS_LEVEL || cv_tagtype.value == tagtype)

  00016	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0001d	83 f8 03	 cmp	 eax, 3
  00020	75 16		 jne	 SHORT $LN18@Tagtype_On
  00022	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00029	75 0d		 jne	 SHORT $LN18@Tagtype_On
  0002b	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_tagtype+20
  00030	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _tagtype
  00036	75 05		 jne	 SHORT $LN17@Tagtype_On
$LN18@Tagtype_On:

; 4301 : 		return;

  00038	e9 72 02 00 00	 jmp	 $LN1@Tagtype_On
$LN17@Tagtype_On:

; 4302 : 
; 4303 : 	// Changing from normal tag to hide and seek.
; 4304 : 	// Pick the highest scoring IT player to remain it,
; 4305 : 	// the rest become frozen as though they were tagged.
; 4306 : 	if (cv_tagtype.value)

  0003d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00044	0f 84 b2 01 00
	00		 je	 $LN19@Tagtype_On

; 4307 : 	{
; 4308 : 		INT32 tempplayer;
; 4309 : 		INT32 playerarray[MAXPLAYERS];
; 4310 : 		INT32 playercount = 0;

  0004a	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _playercount$1[ebp], 0

; 4311 : 
; 4312 : 		//Store the nodes of all participating players in an array.
; 4313 : 		for (i = 0; i < MAXPLAYERS; i++)

  00054	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0005b	eb 09		 jmp	 SHORT $LN4@Tagtype_On
$LN2@Tagtype_On:
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Tagtype_On:
  00066	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0006a	7d 43		 jge	 SHORT $LN3@Tagtype_On

; 4314 : 		{
; 4315 : 			if (playeringame[i] && players[i].pflags & PF_TAGIT)

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006f	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00077	74 34		 je	 SHORT $LN21@Tagtype_On
  00079	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00080	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00086	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0008c	74 1f		 je	 SHORT $LN21@Tagtype_On

; 4316 : 			{
; 4317 : 				playerarray[playercount] = i;

  0008e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _playercount$1[ebp]
  00094	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00097	89 8c 85 70 ff
	ff ff		 mov	 DWORD PTR _playerarray$2[ebp+eax*4], ecx

; 4318 : 				playercount++;

  0009e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _playercount$1[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 85 6c ff ff
	ff		 mov	 DWORD PTR _playercount$1[ebp], eax
$LN21@Tagtype_On:

; 4319 : 			}
; 4320 : 		}

  000ad	eb ae		 jmp	 SHORT $LN2@Tagtype_On
$LN3@Tagtype_On:

; 4321 : 
; 4322 : 		//Sort 'em.
; 4323 : 		for (i = 1; i < playercount; i++)

  000af	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  000b6	eb 09		 jmp	 SHORT $LN7@Tagtype_On
$LN5@Tagtype_On:
  000b8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000bb	83 c0 01	 add	 eax, 1
  000be	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN7@Tagtype_On:
  000c1	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000c4	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _playercount$1[ebp]
  000ca	7d 7b		 jge	 SHORT $LN6@Tagtype_On

; 4324 : 		{
; 4325 : 			for (j = i; j < playercount; j++)

  000cc	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000cf	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
  000d2	eb 09		 jmp	 SHORT $LN10@Tagtype_On
$LN8@Tagtype_On:
  000d4	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000d7	83 c0 01	 add	 eax, 1
  000da	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN10@Tagtype_On:
  000dd	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000e0	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _playercount$1[ebp]
  000e6	7d 5a		 jge	 SHORT $LN9@Tagtype_On

; 4326 : 			{
; 4327 : 				if (players[playerarray[i-1]].score < players[playerarray[j]].score)

  000e8	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000eb	69 8c 85 6c ff
	ff ff fc 01 00
	00		 imul	 ecx, DWORD PTR _playerarray$2[ebp+eax*4-4], 508
  000f6	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  000f9	69 84 95 70 ff
	ff ff fc 01 00
	00		 imul	 eax, DWORD PTR _playerarray$2[ebp+edx*4], 508
  00104	8b 89 bc 00 00
	00		 mov	 ecx, DWORD PTR _players[ecx+188]
  0010a	3b 88 bc 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax+188]
  00110	73 2e		 jae	 SHORT $LN22@Tagtype_On

; 4328 : 				{
; 4329 : 					tempplayer = playerarray[i-1];

  00112	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00115	8b 8c 85 6c ff
	ff ff		 mov	 ecx, DWORD PTR _playerarray$2[ebp+eax*4-4]
  0011c	89 4d f0	 mov	 DWORD PTR _tempplayer$3[ebp], ecx

; 4330 : 					playerarray[i-1] = playerarray[j];

  0011f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00122	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00125	8b 94 8d 70 ff
	ff ff		 mov	 edx, DWORD PTR _playerarray$2[ebp+ecx*4]
  0012c	89 94 85 6c ff
	ff ff		 mov	 DWORD PTR _playerarray$2[ebp+eax*4-4], edx

; 4331 : 					playerarray[j] = tempplayer;

  00133	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00136	8b 4d f0	 mov	 ecx, DWORD PTR _tempplayer$3[ebp]
  00139	89 8c 85 70 ff
	ff ff		 mov	 DWORD PTR _playerarray$2[ebp+eax*4], ecx
$LN22@Tagtype_On:

; 4332 : 				}
; 4333 : 			}

  00140	eb 92		 jmp	 SHORT $LN8@Tagtype_On
$LN9@Tagtype_On:

; 4334 : 		}

  00142	e9 71 ff ff ff	 jmp	 $LN5@Tagtype_On
$LN6@Tagtype_On:

; 4335 : 
; 4336 : 		//Top IT player remains it, the rest become frozen.
; 4337 : 		for (i = 1; i < playercount; i++) //start at 1 since 0 is the top score.

  00147	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0014e	eb 09		 jmp	 SHORT $LN13@Tagtype_On
$LN11@Tagtype_On:
  00150	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00153	83 c0 01	 add	 eax, 1
  00156	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN13@Tagtype_On:
  00159	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0015c	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _playercount$1[ebp]
  00162	0f 8d 8f 00 00
	00		 jge	 $LN12@Tagtype_On

; 4338 : 		{
; 4339 : 			players[playerarray[i]].pflags &= ~PF_TAGIT;

  00168	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0016b	69 8c 85 70 ff
	ff ff fc 01 00
	00		 imul	 ecx, DWORD PTR _playerarray$2[ebp+eax*4], 508
  00176	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  0017c	81 e2 ff ff ff
	ef		 and	 edx, -268435457		; efffffffH
  00182	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00185	69 8c 85 70 ff
	ff ff fc 01 00
	00		 imul	 ecx, DWORD PTR _playerarray$2[ebp+eax*4], 508
  00190	89 91 ac 00 00
	00		 mov	 DWORD PTR _players[ecx+172], edx

; 4340 : 			players[playerarray[i]].pflags |= PF_TAGGED;

  00196	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00199	69 8c 85 70 ff
	ff ff fc 01 00
	00		 imul	 ecx, DWORD PTR _playerarray$2[ebp+eax*4], 508
  001a4	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  001aa	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  001b0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001b3	69 8c 85 70 ff
	ff ff fc 01 00
	00		 imul	 ecx, DWORD PTR _playerarray$2[ebp+eax*4], 508
  001be	89 91 ac 00 00
	00		 mov	 DWORD PTR _players[ecx+172], edx

; 4341 : 			players[playerarray[i]].pflags |= PF_STASIS;

  001c4	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001c7	69 8c 85 70 ff
	ff ff fc 01 00
	00		 imul	 ecx, DWORD PTR _playerarray$2[ebp+eax*4], 508
  001d2	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  001d8	81 ca 00 00 00
	08		 or	 edx, 134217728		; 08000000H
  001de	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001e1	69 8c 85 70 ff
	ff ff fc 01 00
	00		 imul	 ecx, DWORD PTR _playerarray$2[ebp+eax*4], 508
  001ec	89 91 ac 00 00
	00		 mov	 DWORD PTR _players[ecx+172], edx

; 4342 : 		}

  001f2	e9 59 ff ff ff	 jmp	 $LN11@Tagtype_On
$LN12@Tagtype_On:

; 4343 : 	}

  001f7	e9 a3 00 00 00	 jmp	 $LN15@Tagtype_On
$LN19@Tagtype_On:

; 4344 : 	else
; 4345 : 	{
; 4346 : 		//When going from hide and seek to normal tag,
; 4347 : 		//Make the tagged players IT and let them move.
; 4348 : 		for (i = 0; i < MAXPLAYERS; i++)

  001fc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00203	eb 09		 jmp	 SHORT $LN16@Tagtype_On
$LN14@Tagtype_On:
  00205	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00208	83 c0 01	 add	 eax, 1
  0020b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN16@Tagtype_On:
  0020e	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00212	0f 8d 87 00 00
	00		 jge	 $LN15@Tagtype_On

; 4349 : 		{
; 4350 : 			if (playeringame[i] && players[i].pflags & PF_TAGGED)

  00218	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0021b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00223	74 75		 je	 SHORT $LN23@Tagtype_On
  00225	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  0022c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00232	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  00238	74 60		 je	 SHORT $LN23@Tagtype_On

; 4351 : 			{
; 4352 : 				players[i].pflags |= PF_TAGIT;

  0023a	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00241	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00247	81 c9 00 00 00
	10		 or	 ecx, 268435456		; 10000000H
  0024d	69 55 f8 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00254	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 4353 : 				players[i].pflags &= ~PF_TAGGED;

  0025a	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00261	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00267	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  0026d	69 55 f8 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00274	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 4354 : 				players[i].pflags &= ~PF_STASIS;

  0027a	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00281	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00287	81 e1 ff ff ff
	f7		 and	 ecx, -134217729		; f7ffffffH
  0028d	69 55 f8 fc 01
	00 00		 imul	 edx, DWORD PTR _i$[ebp], 508
  00294	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
$LN23@Tagtype_On:

; 4355 : 			}
; 4356 : 		}

  0029a	e9 66 ff ff ff	 jmp	 $LN14@Tagtype_On
$LN15@Tagtype_On:

; 4357 : 	}
; 4358 : 
; 4359 : 	//Better safe than sorry.
; 4360 : 	P_CheckSurvivors();

  0029f	e8 00 00 00 00	 call	 _P_CheckSurvivors
  002a4	90		 npad	 1

; 4361 : 
; 4362 : 	tagtype = cv_tagtype.value;

  002a5	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_tagtype+20
  002aa	a3 00 00 00 00	 mov	 DWORD PTR _tagtype, eax
$LN1@Tagtype_On:

; 4363 : }

  002af	5f		 pop	 edi
  002b0	5e		 pop	 esi
  002b1	5b		 pop	 ebx
  002b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b5	33 cd		 xor	 ecx, ebp
  002b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bc	8b e5		 mov	 esp, ebp
  002be	5d		 pop	 ebp
  002bf	c3		 ret	 0
_Tagtype_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Cheats_OnChange
_TEXT	SEGMENT
_Cheats_OnChange PROC					; COMDAT

; 4262 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4263 : 	if (cheats && (netgame || multiplayer) && !cv_cheats.value)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cheats, 0
  00010	74 4e		 je	 SHORT $LN2@Cheats_OnC
  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00019	75 09		 jne	 SHORT $LN3@Cheats_OnC
  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00022	74 3c		 je	 SHORT $LN2@Cheats_OnC
$LN3@Cheats_OnC:
  00024	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_cheats+20, 0
  0002b	75 33		 jne	 SHORT $LN2@Cheats_OnC

; 4264 : 	{
; 4265 : 		CONS_Printf("%s", text[CANNOT_CHANGE_CHEATS]);

  0002d	b8 04 00 00 00	 mov	 eax, 4
  00032	69 c8 cb 00 00
	00		 imul	 ecx, eax, 203
  00038	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0003e	52		 push	 edx
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00044	e8 00 00 00 00	 call	 _CONS_Printf
  00049	83 c4 08	 add	 esp, 8

; 4266 : 		CV_StealthSetValue(&cv_cheats, 1);

  0004c	6a 01		 push	 1
  0004e	68 00 00 00 00	 push	 OFFSET _cv_cheats
  00053	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00058	83 c4 08	 add	 esp, 8

; 4267 : 		return;

  0005b	e9 fc 00 00 00	 jmp	 $LN1@Cheats_OnC
$LN2@Cheats_OnC:

; 4268 : 	}
; 4269 : 
; 4270 : 	if (gamestate == GS_LEVEL && !(netgame || multiplayer) && cv_cheats.value)

  00060	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00067	75 4e		 jne	 SHORT $LN4@Cheats_OnC
  00069	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00070	75 45		 jne	 SHORT $LN4@Cheats_OnC
  00072	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00079	75 3c		 jne	 SHORT $LN4@Cheats_OnC
  0007b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_cheats+20, 0
  00082	74 33		 je	 SHORT $LN4@Cheats_OnC

; 4271 : 	{
; 4272 : 		CONS_Printf("%s", text[CANTUSESINGLEPLAYER]);

  00084	b8 04 00 00 00	 mov	 eax, 4
  00089	69 c8 fb 00 00
	00		 imul	 ecx, eax, 251
  0008f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00095	52		 push	 edx
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0009b	e8 00 00 00 00	 call	 _CONS_Printf
  000a0	83 c4 08	 add	 esp, 8

; 4273 : 		CV_StealthSetValue(&cv_cheats, 0);

  000a3	6a 00		 push	 0
  000a5	68 00 00 00 00	 push	 OFFSET _cv_cheats
  000aa	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000af	83 c4 08	 add	 esp, 8

; 4274 : 		return;

  000b2	e9 a5 00 00 00	 jmp	 $LN1@Cheats_OnC
$LN4@Cheats_OnC:

; 4275 : 	}
; 4276 : 
; 4277 : 	// Automatically disable cheats when playing single player.
; 4278 : 	if (gamestate == GS_WAITINGPLAYERS && !(netgame || multiplayer))

  000b7	83 3d 00 00 00
	00 0d		 cmp	 DWORD PTR _gamestate, 13 ; 0000000dH
  000be	75 21		 jne	 SHORT $LN5@Cheats_OnC
  000c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000c7	75 18		 jne	 SHORT $LN5@Cheats_OnC
  000c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000d0	75 0f		 jne	 SHORT $LN5@Cheats_OnC

; 4279 : 		CV_StealthSetValue(&cv_cheats, 0);

  000d2	6a 00		 push	 0
  000d4	68 00 00 00 00	 push	 OFFSET _cv_cheats
  000d9	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000de	83 c4 08	 add	 esp, 8
$LN5@Cheats_OnC:

; 4280 : 
; 4281 : 	// Display console and hud message.
; 4282 : 	if (cv_cheats.value && !cheats)

  000e1	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_cheats+20, 0
  000e8	74 50		 je	 SHORT $LN6@Cheats_OnC
  000ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cheats, 0
  000f1	75 47		 jne	 SHORT $LN6@Cheats_OnC

; 4283 : 	{
; 4284 : 		HU_DoCEcho(va("%s", text[CHEATS_ACTIVATED]));

  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	69 c8 ce 00 00
	00		 imul	 ecx, eax, 206
  000fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00104	52		 push	 edx
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0010a	e8 00 00 00 00	 call	 _va
  0010f	83 c4 08	 add	 esp, 8
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _HU_DoCEcho
  00118	83 c4 04	 add	 esp, 4

; 4285 : 		I_OutputMsg("%s", text[CHEATS_ACTIVATED]);

  0011b	b8 04 00 00 00	 mov	 eax, 4
  00120	69 c8 ce 00 00
	00		 imul	 ecx, eax, 206
  00126	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0012c	52		 push	 edx
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00132	e8 00 00 00 00	 call	 _I_OutputMsg
  00137	83 c4 08	 add	 esp, 8
$LN6@Cheats_OnC:

; 4286 : 	}
; 4287 : 
; 4288 : 	// When deactivated, restore all variables governed by cheats to their starting values.
; 4289 : 	if (!cv_cheats.value && cheats)

  0013a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_cheats+20, 0
  00141	75 0f		 jne	 SHORT $LN7@Cheats_OnC
  00143	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _cheats, 0
  0014a	74 06		 je	 SHORT $LN7@Cheats_OnC

; 4290 : 		CV_ResetCheatNetVars();

  0014c	e8 00 00 00 00	 call	 _CV_ResetCheatNetVars
  00151	90		 npad	 1
$LN7@Cheats_OnC:

; 4291 : 
; 4292 : 	cheats = cv_cheats.value;

  00152	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_cheats+20
  00157	a3 00 00 00 00	 mov	 DWORD PTR _cheats, eax
$LN1@Cheats_OnC:

; 4293 : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
_Cheats_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _TeamScramble_OnChange
_TEXT	SEGMENT
_tempplayer$1 = -44					; size = 2
_success$ = -40						; size = 4
_retries$ = -36						; size = 4
_newteam$ = -32						; size = 2
_maxcomposition$ = -28					; size = 4
_red$ = -24						; size = 4
_blue$ = -20						; size = 4
_repick$ = -16						; size = 4
_playercount$ = -12					; size = 2
_j$ = -8						; size = 2
_i$ = -4						; size = 2
_TeamScramble_OnChange PROC				; COMDAT

; 4111 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4112 : 	INT16 i = 0, j = 0, playercount = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  0000f	33 c0		 xor	 eax, eax
  00011	66 89 45 f8	 mov	 WORD PTR _j$[ebp], ax
  00015	33 c0		 xor	 eax, eax
  00017	66 89 45 f4	 mov	 WORD PTR _playercount$[ebp], ax

; 4113 : 	boolean repick = true;

  0001b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _repick$[ebp], 1

; 4114 : 	INT32 blue = 0, red = 0;

  00022	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _blue$[ebp], 0
  00029	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _red$[ebp], 0

; 4115 : 	INT32 maxcomposition = 0;

  00030	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _maxcomposition$[ebp], 0

; 4116 : 	INT16 newteam = 0;

  00037	33 c0		 xor	 eax, eax
  00039	66 89 45 e0	 mov	 WORD PTR _newteam$[ebp], ax

; 4117 : 	INT32 retries = 0;

  0003d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _retries$[ebp], 0

; 4118 : 	boolean success = false;

  00044	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _success$[ebp], 0

; 4119 : 
; 4120 : 	// Don't trigger outside level or intermission!
; 4121 : 	if (!(gamestate == GS_LEVEL || gamestate == GS_INTERMISSION))

  0004b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00052	74 0e		 je	 SHORT $LN20@TeamScramb
  00054	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  0005b	74 05		 je	 SHORT $LN20@TeamScramb

; 4122 : 		return;

  0005d	e9 35 04 00 00	 jmp	 $LN46@TeamScramb
$LN20@TeamScramb:

; 4123 : 
; 4124 : 	if (!cv_teamscramble.value)

  00062	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_teamscramble+20, 0
  00069	75 08		 jne	 SHORT $LN21@TeamScramb

; 4125 : 		teamscramble = 0;

  0006b	33 c0		 xor	 eax, eax
  0006d	66 a3 00 00 00
	00		 mov	 WORD PTR _teamscramble, ax
$LN21@TeamScramb:

; 4126 : 
; 4127 : 	if (((gametype != GT_MATCH && !cv_matchtype.value) && gametype != GT_CTF) &&

  00073	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007a	83 f8 01	 cmp	 eax, 1
  0007d	74 5b		 je	 SHORT $LN22@TeamScramb
  0007f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00086	75 52		 jne	 SHORT $LN22@TeamScramb
  00088	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0008f	83 f8 04	 cmp	 eax, 4
  00092	74 46		 je	 SHORT $LN22@TeamScramb
  00094	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0009b	75 0d		 jne	 SHORT $LN23@TeamScramb
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  000a2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  000a8	75 30		 jne	 SHORT $LN22@TeamScramb
$LN23@TeamScramb:

; 4128 : 		(server || (consoleplayer == adminplayer)))
; 4129 : 	{
; 4130 : 		CONS_Printf("%s", text[NOTMCTF]);

  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	6b c8 7b	 imul	 ecx, eax, 123
  000b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b8	52		 push	 edx
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000be	e8 00 00 00 00	 call	 _CONS_Printf
  000c3	83 c4 08	 add	 esp, 8

; 4131 : 		CV_StealthSetValue(&cv_teamscramble, 0);

  000c6	6a 00		 push	 0
  000c8	68 00 00 00 00	 push	 OFFSET _cv_teamscramble
  000cd	e8 00 00 00 00	 call	 _CV_StealthSetValue
  000d2	83 c4 08	 add	 esp, 8

; 4132 : 		return;

  000d5	e9 bd 03 00 00	 jmp	 $LN46@TeamScramb
$LN22@TeamScramb:

; 4133 : 	}
; 4134 : 
; 4135 : 	// If a team scramble is already in progress, do not allow another one to be started!
; 4136 : 	if (teamscramble)

  000da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _teamscramble
  000e1	85 c0		 test	 eax, eax
  000e3	74 05		 je	 SHORT $retryscramble$51

; 4137 : 		return;

  000e5	e9 ad 03 00 00	 jmp	 $LN46@TeamScramb
$retryscramble$51:

; 4138 : 
; 4139 : retryscramble:
; 4140 : 
; 4141 : 	// Clear related global variables. These will get used again in p_tick.c/y_inter.c as the teams are scrambled.
; 4142 : 	memset(&scrambleplayers, 0, sizeof(scrambleplayers));

  000ea	6a 40		 push	 64			; 00000040H
  000ec	6a 00		 push	 0
  000ee	68 00 00 00 00	 push	 OFFSET _scrambleplayers
  000f3	e8 00 00 00 00	 call	 _memset
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4143 : 	memset(&scrambleteams, 0, sizeof(scrambleplayers));

  000fb	6a 40		 push	 64			; 00000040H
  000fd	6a 00		 push	 0
  000ff	68 00 00 00 00	 push	 OFFSET _scrambleteams
  00104	e8 00 00 00 00	 call	 _memset
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4144 : 	scrambletotal = scramblecount = 0;

  0010c	33 c0		 xor	 eax, eax
  0010e	66 a3 00 00 00
	00		 mov	 WORD PTR _scramblecount, ax
  00114	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _scramblecount
  0011b	66 89 0d 00 00
	00 00		 mov	 WORD PTR _scrambletotal, cx

; 4145 : 	blue = red = maxcomposition = newteam = playercount = 0;

  00122	33 c0		 xor	 eax, eax
  00124	66 89 45 f4	 mov	 WORD PTR _playercount$[ebp], ax
  00128	66 8b 4d f4	 mov	 cx, WORD PTR _playercount$[ebp]
  0012c	66 89 4d e0	 mov	 WORD PTR _newteam$[ebp], cx
  00130	0f bf 55 e0	 movsx	 edx, WORD PTR _newteam$[ebp]
  00134	89 55 e4	 mov	 DWORD PTR _maxcomposition$[ebp], edx
  00137	8b 45 e4	 mov	 eax, DWORD PTR _maxcomposition$[ebp]
  0013a	89 45 e8	 mov	 DWORD PTR _red$[ebp], eax
  0013d	8b 4d e8	 mov	 ecx, DWORD PTR _red$[ebp]
  00140	89 4d ec	 mov	 DWORD PTR _blue$[ebp], ecx

; 4146 : 	repick = true;

  00143	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _repick$[ebp], 1

; 4147 : 
; 4148 : 	// Put each player's node in the array.
; 4149 : 	for (i = 0; i < MAXPLAYERS; i++)

  0014a	33 c0		 xor	 eax, eax
  0014c	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  00150	eb 0c		 jmp	 SHORT $LN4@TeamScramb
$LN2@TeamScramb:
  00152	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  00156	66 83 c0 01	 add	 ax, 1
  0015a	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$LN4@TeamScramb:
  0015e	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  00162	83 f8 20	 cmp	 eax, 32			; 00000020H
  00165	7d 41		 jge	 SHORT $LN3@TeamScramb

; 4150 : 	{
; 4151 : 		if (playeringame[i] && !players[i].spectator)

  00167	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  0016b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00173	74 31		 je	 SHORT $LN25@TeamScramb
  00175	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  00179	69 c8 fc 01 00
	00		 imul	 ecx, eax, 508
  0017f	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR _players[ecx+496]
  00186	85 d2		 test	 edx, edx
  00188	75 1c		 jne	 SHORT $LN25@TeamScramb

; 4152 : 		{
; 4153 : 			scrambleplayers[playercount] = i;

  0018a	0f bf 45 f4	 movsx	 eax, WORD PTR _playercount$[ebp]
  0018e	66 8b 4d fc	 mov	 cx, WORD PTR _i$[ebp]
  00192	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _scrambleplayers[eax*2], cx

; 4154 : 			playercount++;

  0019a	66 8b 45 f4	 mov	 ax, WORD PTR _playercount$[ebp]
  0019e	66 83 c0 01	 add	 ax, 1
  001a2	66 89 45 f4	 mov	 WORD PTR _playercount$[ebp], ax
$LN25@TeamScramb:

; 4155 : 		}
; 4156 : 	}

  001a6	eb aa		 jmp	 SHORT $LN2@TeamScramb
$LN3@TeamScramb:

; 4157 : 
; 4158 : 	if (playercount < 2)

  001a8	0f bf 45 f4	 movsx	 eax, WORD PTR _playercount$[ebp]
  001ac	83 f8 02	 cmp	 eax, 2
  001af	7d 14		 jge	 SHORT $LN26@TeamScramb

; 4159 : 	{
; 4160 : 		CV_StealthSetValue(&cv_teamscramble, 0);

  001b1	6a 00		 push	 0
  001b3	68 00 00 00 00	 push	 OFFSET _cv_teamscramble
  001b8	e8 00 00 00 00	 call	 _CV_StealthSetValue
  001bd	83 c4 08	 add	 esp, 8

; 4161 : 		return; // Don't scramble one or zero players.

  001c0	e9 d2 02 00 00	 jmp	 $LN46@TeamScramb
$LN26@TeamScramb:

; 4162 : 	}
; 4163 : 
; 4164 : 	// Randomly place players on teams.
; 4165 : 	if (cv_teamscramble.value == 1)

  001c5	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_teamscramble+20, 1
  001cc	0f 85 c3 00 00
	00		 jne	 $LN27@TeamScramb

; 4166 : 	{
; 4167 : 		maxcomposition = playercount / 2;

  001d2	0f bf 45 f4	 movsx	 eax, WORD PTR _playercount$[ebp]
  001d6	99		 cdq
  001d7	2b c2		 sub	 eax, edx
  001d9	d1 f8		 sar	 eax, 1
  001db	89 45 e4	 mov	 DWORD PTR _maxcomposition$[ebp], eax

; 4168 : 
; 4169 : 		// Now randomly assign players to teams.
; 4170 : 		// If the teams get out of hand, assign the rest to the other team.
; 4171 : 		for (i = 0; i < playercount; i++)

  001de	33 c0		 xor	 eax, eax
  001e0	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  001e4	eb 0c		 jmp	 SHORT $LN7@TeamScramb
$LN5@TeamScramb:
  001e6	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  001ea	66 83 c0 01	 add	 ax, 1
  001ee	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$LN7@TeamScramb:
  001f2	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  001f6	0f bf 4d f4	 movsx	 ecx, WORD PTR _playercount$[ebp]
  001fa	3b c1		 cmp	 eax, ecx
  001fc	0f 8d 8e 00 00
	00		 jge	 $LN6@TeamScramb

; 4172 : 		{
; 4173 : 			if (repick)

  00202	83 7d f0 00	 cmp	 DWORD PTR _repick$[ebp], 0
  00206	74 1b		 je	 SHORT $LN29@TeamScramb

; 4174 : 				newteam = (INT16)((M_Random() % 2) + 1);

  00208	e8 00 00 00 00	 call	 _M_Random
  0020d	0f b6 c0	 movzx	 eax, al
  00210	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00215	79 05		 jns	 SHORT $LN49@TeamScramb
  00217	48		 dec	 eax
  00218	83 c8 fe	 or	 eax, -2			; fffffffeH
  0021b	40		 inc	 eax
$LN49@TeamScramb:
  0021c	83 c0 01	 add	 eax, 1
  0021f	66 89 45 e0	 mov	 WORD PTR _newteam$[ebp], ax
$LN29@TeamScramb:

; 4175 : 
; 4176 : 			// One team has the most players they can get, assign the rest to the other team.
; 4177 : 			if (red == maxcomposition || blue == maxcomposition)

  00223	8b 45 e8	 mov	 eax, DWORD PTR _red$[ebp]
  00226	3b 45 e4	 cmp	 eax, DWORD PTR _maxcomposition$[ebp]
  00229	74 08		 je	 SHORT $LN31@TeamScramb
  0022b	8b 45 ec	 mov	 eax, DWORD PTR _blue$[ebp]
  0022e	3b 45 e4	 cmp	 eax, DWORD PTR _maxcomposition$[ebp]
  00231	75 2b		 jne	 SHORT $LN30@TeamScramb
$LN31@TeamScramb:

; 4178 : 			{
; 4179 : 				if (red == maxcomposition)

  00233	8b 45 e8	 mov	 eax, DWORD PTR _red$[ebp]
  00236	3b 45 e4	 cmp	 eax, DWORD PTR _maxcomposition$[ebp]
  00239	75 0b		 jne	 SHORT $LN32@TeamScramb

; 4180 : 					newteam = 2;

  0023b	b8 02 00 00 00	 mov	 eax, 2
  00240	66 89 45 e0	 mov	 WORD PTR _newteam$[ebp], ax
  00244	eb 11		 jmp	 SHORT $LN34@TeamScramb
$LN32@TeamScramb:

; 4181 : 				else if (blue == maxcomposition)

  00246	8b 45 ec	 mov	 eax, DWORD PTR _blue$[ebp]
  00249	3b 45 e4	 cmp	 eax, DWORD PTR _maxcomposition$[ebp]
  0024c	75 09		 jne	 SHORT $LN34@TeamScramb

; 4182 : 					newteam = 1;

  0024e	b8 01 00 00 00	 mov	 eax, 1
  00253	66 89 45 e0	 mov	 WORD PTR _newteam$[ebp], ax
$LN34@TeamScramb:

; 4183 : 
; 4184 : 				repick = false;

  00257	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _repick$[ebp], 0
$LN30@TeamScramb:

; 4185 : 			}
; 4186 : 
; 4187 : 			scrambleteams[i] = newteam;

  0025e	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  00262	66 8b 4d e0	 mov	 cx, WORD PTR _newteam$[ebp]
  00266	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _scrambleteams[eax*2], cx

; 4188 : 
; 4189 : 			if (newteam == 1)

  0026e	0f bf 45 e0	 movsx	 eax, WORD PTR _newteam$[ebp]
  00272	83 f8 01	 cmp	 eax, 1
  00275	75 0b		 jne	 SHORT $LN35@TeamScramb

; 4190 : 				red++;

  00277	8b 45 e8	 mov	 eax, DWORD PTR _red$[ebp]
  0027a	83 c0 01	 add	 eax, 1
  0027d	89 45 e8	 mov	 DWORD PTR _red$[ebp], eax
  00280	eb 09		 jmp	 SHORT $LN36@TeamScramb
$LN35@TeamScramb:

; 4191 : 			else
; 4192 : 				blue++;

  00282	8b 45 ec	 mov	 eax, DWORD PTR _blue$[ebp]
  00285	83 c0 01	 add	 eax, 1
  00288	89 45 ec	 mov	 DWORD PTR _blue$[ebp], eax
$LN36@TeamScramb:

; 4193 : 		}

  0028b	e9 56 ff ff ff	 jmp	 $LN5@TeamScramb
$LN6@TeamScramb:

; 4194 : 	}

  00290	e9 49 01 00 00	 jmp	 $LN15@TeamScramb
$LN27@TeamScramb:

; 4195 : 	else if (cv_teamscramble.value == 2) // Same as before, except split teams based on current score.

  00295	83 3d 14 00 00
	00 02		 cmp	 DWORD PTR _cv_teamscramble+20, 2
  0029c	0f 85 3c 01 00
	00		 jne	 $LN15@TeamScramb

; 4196 : 	{
; 4197 : 		// Now, sort the array based on points scored.
; 4198 : 		for (i = 1; i < playercount; i++)

  002a2	b8 01 00 00 00	 mov	 eax, 1
  002a7	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  002ab	eb 0c		 jmp	 SHORT $LN10@TeamScramb
$LN8@TeamScramb:
  002ad	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  002b1	66 83 c0 01	 add	 ax, 1
  002b5	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$LN10@TeamScramb:
  002b9	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  002bd	0f bf 4d f4	 movsx	 ecx, WORD PTR _playercount$[ebp]
  002c1	3b c1		 cmp	 eax, ecx
  002c3	0f 8d 9c 00 00
	00		 jge	 $LN9@TeamScramb

; 4199 : 		{
; 4200 : 			for (j = i; j < playercount; j++)

  002c9	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  002cd	66 89 45 f8	 mov	 WORD PTR _j$[ebp], ax
  002d1	eb 0c		 jmp	 SHORT $LN13@TeamScramb
$LN11@TeamScramb:
  002d3	66 8b 45 f8	 mov	 ax, WORD PTR _j$[ebp]
  002d7	66 83 c0 01	 add	 ax, 1
  002db	66 89 45 f8	 mov	 WORD PTR _j$[ebp], ax
$LN13@TeamScramb:
  002df	0f bf 45 f8	 movsx	 eax, WORD PTR _j$[ebp]
  002e3	0f bf 4d f4	 movsx	 ecx, WORD PTR _playercount$[ebp]
  002e7	3b c1		 cmp	 eax, ecx
  002e9	7d 75		 jge	 SHORT $LN12@TeamScramb

; 4201 : 			{
; 4202 : 				INT16 tempplayer = 0;

  002eb	33 c0		 xor	 eax, eax
  002ed	66 89 45 d4	 mov	 WORD PTR _tempplayer$1[ebp], ax

; 4203 : 
; 4204 : 				if ((players[scrambleplayers[i-1]].score > players[scrambleplayers[j]].score))

  002f1	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  002f5	0f bf 0c 45 fe
	ff ff ff	 movsx	 ecx, WORD PTR _scrambleplayers[eax*2-2]
  002fd	69 d1 fc 01 00
	00		 imul	 edx, ecx, 508
  00303	0f bf 45 f8	 movsx	 eax, WORD PTR _j$[ebp]
  00307	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _scrambleplayers[eax*2]
  0030f	69 c1 fc 01 00
	00		 imul	 eax, ecx, 508
  00315	8b 8a bc 00 00
	00		 mov	 ecx, DWORD PTR _players[edx+188]
  0031b	3b 88 bc 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax+188]
  00321	76 38		 jbe	 SHORT $LN38@TeamScramb

; 4205 : 				{
; 4206 : 					tempplayer = scrambleplayers[i-1];

  00323	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  00327	66 8b 0c 45 fe
	ff ff ff	 mov	 cx, WORD PTR _scrambleplayers[eax*2-2]
  0032f	66 89 4d d4	 mov	 WORD PTR _tempplayer$1[ebp], cx

; 4207 : 					scrambleplayers[i-1] = scrambleplayers[j];

  00333	0f bf 45 f8	 movsx	 eax, WORD PTR _j$[ebp]
  00337	0f bf 4d fc	 movsx	 ecx, WORD PTR _i$[ebp]
  0033b	66 8b 14 45 00
	00 00 00	 mov	 dx, WORD PTR _scrambleplayers[eax*2]
  00343	66 89 14 4d fe
	ff ff ff	 mov	 WORD PTR _scrambleplayers[ecx*2-2], dx

; 4208 : 					scrambleplayers[j] = tempplayer;

  0034b	0f bf 45 f8	 movsx	 eax, WORD PTR _j$[ebp]
  0034f	66 8b 4d d4	 mov	 cx, WORD PTR _tempplayer$1[ebp]
  00353	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _scrambleplayers[eax*2], cx
$LN38@TeamScramb:

; 4209 : 				}
; 4210 : 			}

  0035b	e9 73 ff ff ff	 jmp	 $LN11@TeamScramb
$LN12@TeamScramb:

; 4211 : 		}

  00360	e9 48 ff ff ff	 jmp	 $LN8@TeamScramb
$LN9@TeamScramb:

; 4212 : 
; 4213 : 		// Now assign players to teams based on score. Scramble in pairs.
; 4214 : 		// If there is an odd number, one team will end up with the unlucky slob who has no points. =(
; 4215 : 		for (i = 0; i < playercount; i++)

  00365	33 c0		 xor	 eax, eax
  00367	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  0036b	eb 0c		 jmp	 SHORT $LN16@TeamScramb
$LN14@TeamScramb:
  0036d	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  00371	66 83 c0 01	 add	 ax, 1
  00375	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$LN16@TeamScramb:
  00379	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  0037d	0f bf 4d f4	 movsx	 ecx, WORD PTR _playercount$[ebp]
  00381	3b c1		 cmp	 eax, ecx
  00383	7d 59		 jge	 SHORT $LN15@TeamScramb

; 4216 : 		{
; 4217 : 			if (repick)

  00385	83 7d f0 00	 cmp	 DWORD PTR _repick$[ebp], 0
  00389	74 24		 je	 SHORT $LN39@TeamScramb

; 4218 : 			{
; 4219 : 				newteam = (INT16)((M_Random() % 2) + 1);

  0038b	e8 00 00 00 00	 call	 _M_Random
  00390	0f b6 c0	 movzx	 eax, al
  00393	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00398	79 05		 jns	 SHORT $LN50@TeamScramb
  0039a	48		 dec	 eax
  0039b	83 c8 fe	 or	 eax, -2			; fffffffeH
  0039e	40		 inc	 eax
$LN50@TeamScramb:
  0039f	83 c0 01	 add	 eax, 1
  003a2	66 89 45 e0	 mov	 WORD PTR _newteam$[ebp], ax

; 4220 : 				repick = false;

  003a6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _repick$[ebp], 0

; 4221 : 			}

  003ad	eb 1d		 jmp	 SHORT $LN42@TeamScramb
$LN39@TeamScramb:

; 4222 : 			else
; 4223 : 			{
; 4224 : 				// We will only randomly pick the team for the first guy.
; 4225 : 				// Otherwise, just alternate back and forth, distributing players.
; 4226 : 				if (newteam == 1)

  003af	0f bf 45 e0	 movsx	 eax, WORD PTR _newteam$[ebp]
  003b3	83 f8 01	 cmp	 eax, 1
  003b6	75 0b		 jne	 SHORT $LN41@TeamScramb

; 4227 : 					newteam = 2;

  003b8	b8 02 00 00 00	 mov	 eax, 2
  003bd	66 89 45 e0	 mov	 WORD PTR _newteam$[ebp], ax
  003c1	eb 09		 jmp	 SHORT $LN42@TeamScramb
$LN41@TeamScramb:

; 4228 : 				else
; 4229 : 					newteam = 1;

  003c3	b8 01 00 00 00	 mov	 eax, 1
  003c8	66 89 45 e0	 mov	 WORD PTR _newteam$[ebp], ax
$LN42@TeamScramb:

; 4230 : 			}
; 4231 : 
; 4232 : 			scrambleteams[i] = newteam;

  003cc	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  003d0	66 8b 4d e0	 mov	 cx, WORD PTR _newteam$[ebp]
  003d4	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _scrambleteams[eax*2], cx

; 4233 : 		}

  003dc	eb 8f		 jmp	 SHORT $LN14@TeamScramb
$LN15@TeamScramb:

; 4234 : 	}
; 4235 : 
; 4236 : 	// Check to see if our random selection actually
; 4237 : 	// changed anybody. If not, we run through and try again.
; 4238 : 	for (i = 0; i < playercount; i++)

  003de	33 c0		 xor	 eax, eax
  003e0	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
  003e4	eb 0c		 jmp	 SHORT $LN19@TeamScramb
$LN17@TeamScramb:
  003e6	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  003ea	66 83 c0 01	 add	 ax, 1
  003ee	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$LN19@TeamScramb:
  003f2	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  003f6	0f bf 4d f4	 movsx	 ecx, WORD PTR _playercount$[ebp]
  003fa	3b c1		 cmp	 eax, ecx
  003fc	7d 2f		 jge	 SHORT $LN18@TeamScramb

; 4239 : 	{
; 4240 : 		if (players[scrambleplayers[i]].ctfteam != scrambleteams[i])

  003fe	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  00402	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _scrambleplayers[eax*2]
  0040a	69 d1 fc 01 00
	00		 imul	 edx, ecx, 508
  00410	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  00414	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _scrambleteams[eax*2]
  0041c	39 8a 60 01 00
	00		 cmp	 DWORD PTR _players[edx+352], ecx
  00422	74 07		 je	 SHORT $LN43@TeamScramb

; 4241 : 			success = true;

  00424	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _success$[ebp], 1
$LN43@TeamScramb:

; 4242 : 	}

  0042b	eb b9		 jmp	 SHORT $LN17@TeamScramb
$LN18@TeamScramb:

; 4243 : 
; 4244 : 	if (!success && retries < 5)

  0042d	83 7d d8 00	 cmp	 DWORD PTR _success$[ebp], 0
  00431	75 14		 jne	 SHORT $LN44@TeamScramb
  00433	83 7d dc 05	 cmp	 DWORD PTR _retries$[ebp], 5
  00437	7d 0e		 jge	 SHORT $LN44@TeamScramb

; 4245 : 	{
; 4246 : 		retries++;

  00439	8b 45 dc	 mov	 eax, DWORD PTR _retries$[ebp]
  0043c	83 c0 01	 add	 eax, 1
  0043f	89 45 dc	 mov	 DWORD PTR _retries$[ebp], eax

; 4247 : 		goto retryscramble; //try again

  00442	e9 a3 fc ff ff	 jmp	 $retryscramble$51
$LN44@TeamScramb:

; 4248 : 	}
; 4249 : 
; 4250 : 	// Display a witty message, but only during scrambles specifically triggered by an admin.
; 4251 : 	if (cv_teamscramble.value)

  00447	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_teamscramble+20, 0
  0044e	74 47		 je	 SHORT $LN46@TeamScramb

; 4252 : 	{
; 4253 : 		scrambletotal = playercount;

  00450	66 8b 45 f4	 mov	 ax, WORD PTR _playercount$[ebp]
  00454	66 a3 00 00 00
	00		 mov	 WORD PTR _scrambletotal, ax

; 4254 : 		teamscramble = (INT16)cv_teamscramble.value;

  0045a	66 a1 14 00 00
	00		 mov	 ax, WORD PTR _cv_teamscramble+20
  00460	66 a3 00 00 00
	00		 mov	 WORD PTR _teamscramble, ax

; 4255 : 
; 4256 : 		if (!(gamestate == GS_INTERMISSION && cv_scrambleonchange.value))

  00466	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _gamestate, 2
  0046d	75 09		 jne	 SHORT $LN47@TeamScramb
  0046f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_scrambleonchange+20, 0
  00476	75 1f		 jne	 SHORT $LN46@TeamScramb
$LN47@TeamScramb:

; 4257 : 			CONS_Printf("%s", text[TEAMS_SCRAMBLED]);

  00478	b8 04 00 00 00	 mov	 eax, 4
  0047d	69 c8 82 00 00
	00		 imul	 ecx, eax, 130
  00483	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00489	52		 push	 edx
  0048a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0048f	e8 00 00 00 00	 call	 _CONS_Printf
  00494	83 c4 08	 add	 esp, 8
$LN46@TeamScramb:

; 4258 : 	}
; 4259 : }

  00497	5f		 pop	 edi
  00498	5e		 pop	 esi
  00499	5b		 pop	 ebx
  0049a	8b e5		 mov	 esp, ebp
  0049c	5d		 pop	 ebp
  0049d	c3		 ret	 0
_TeamScramble_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _AutoBalance_OnChange
_TEXT	SEGMENT
_AutoBalance_OnChange PROC				; COMDAT

; 4106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4107 : 	autobalance = (INT16)cv_autobalance.value;

  00009	66 a1 14 00 00
	00		 mov	 ax, WORD PTR _cv_autobalance+20
  0000f	66 a3 00 00 00
	00		 mov	 WORD PTR _autobalance, ax

; 4108 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_AutoBalance_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Mute_OnChange
_TEXT	SEGMENT
_Mute_OnChange PROC					; COMDAT

; 4749 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4750 : 	if (server || (adminplayer == consoleplayer))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	75 0d		 jne	 SHORT $LN3@Mute_OnCha
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0001d	75 02		 jne	 SHORT $LN2@Mute_OnCha
$LN3@Mute_OnCha:

; 4751 : 		return;

  0001f	eb 49		 jmp	 SHORT $LN5@Mute_OnCha
$LN2@Mute_OnCha:

; 4752 : 
; 4753 : 	if (cv_mute.value)

  00021	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_mute+20, 0
  00028	74 21		 je	 SHORT $LN4@Mute_OnCha

; 4754 : 		CONS_Printf("%s", text[CHAT_MUTED]);

  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	69 c8 c6 00 00
	00		 imul	 ecx, eax, 198
  00035	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0003b	52		 push	 edx
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00041	e8 00 00 00 00	 call	 _CONS_Printf
  00046	83 c4 08	 add	 esp, 8
  00049	eb 1f		 jmp	 SHORT $LN5@Mute_OnCha
$LN4@Mute_OnCha:

; 4755 : 	else
; 4756 : 		CONS_Printf("%s", text[CHAT_NOT_MUTED]);

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	69 c8 c7 00 00
	00		 imul	 ecx, eax, 199
  00056	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0005c	52		 push	 edx
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00062	e8 00 00 00 00	 call	 _CONS_Printf
  00067	83 c4 08	 add	 esp, 8
$LN5@Mute_OnCha:

; 4757 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_Mute_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _NumLaps_OnChange
_TEXT	SEGMENT
_NumLaps_OnChange PROC					; COMDAT

; 3707 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3708 : 	if (gametype != GT_RACE)

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00010	83 f8 02	 cmp	 eax, 2
  00013	74 02		 je	 SHORT $LN2@NumLaps_On

; 3709 : 		return; // Just don't be verbose

  00015	eb 20		 jmp	 SHORT $LN1@NumLaps_On
$LN2@NumLaps_On:

; 3710 : 
; 3711 : 	CONS_Printf(text[NUMLAPS_MESSAGE], cv_numlaps.value);

  00017	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_numlaps+20
  0001c	50		 push	 eax
  0001d	b9 04 00 00 00	 mov	 ecx, 4
  00022	69 d1 b2 00 00
	00		 imul	 edx, ecx, 178
  00028	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _CONS_Printf
  00034	83 c4 08	 add	 esp, 8
$LN1@NumLaps_On:

; 3712 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_NumLaps_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _TimeLimit_OnChange
_TEXT	SEGMENT
tv74 = -68						; size = 4
_TimeLimit_OnChange PROC				; COMDAT

; 3730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3731 : 	// Don't allow timelimit in Single Player/Co-Op/Race!
; 3732 : 	if (server && cv_timelimit.value != 0
; 3733 : 		&& (gametype == GT_COOP || gametype == GT_RACE))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	74 34		 je	 SHORT $LN2@TimeLimit_
  00012	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_timelimit+20, 0
  00019	74 2b		 je	 SHORT $LN2@TimeLimit_
  0001b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00022	85 c0		 test	 eax, eax
  00024	74 0c		 je	 SHORT $LN3@TimeLimit_
  00026	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0002d	83 f8 02	 cmp	 eax, 2
  00030	75 14		 jne	 SHORT $LN2@TimeLimit_
$LN3@TimeLimit_:

; 3734 : 	{
; 3735 : 		CV_SetValue(&cv_timelimit, 0);

  00032	6a 00		 push	 0
  00034	68 00 00 00 00	 push	 OFFSET _cv_timelimit
  00039	e8 00 00 00 00	 call	 _CV_SetValue
  0003e	83 c4 08	 add	 esp, 8

; 3736 : 		return;

  00041	e9 a8 00 00 00	 jmp	 $LN7@TimeLimit_
$LN2@TimeLimit_:

; 3737 : 	}
; 3738 : 
; 3739 : 	if (cv_timelimit.value != 0)

  00046	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_timelimit+20, 0
  0004d	74 6e		 je	 SHORT $LN4@TimeLimit_

; 3740 : 	{
; 3741 : 		CONS_Printf(text[TIMELIMIT_MESSAGE],cv_timelimit.value,cv_timelimit.value == 1 ? "" : "s"); // Graue 11-17-2003

  0004f	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_timelimit+20, 1
  00056	75 09		 jne	 SHORT $LN10@TimeLimit_
  00058	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], OFFSET ??_C@_00CNPNBAHC@@
  0005f	eb 07		 jmp	 SHORT $LN11@TimeLimit_
$LN10@TimeLimit_:
  00061	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], OFFSET ??_C@_01LKDEMHDF@s@
$LN11@TimeLimit_:
  00068	8b 45 bc	 mov	 eax, DWORD PTR tv74[ebp]
  0006b	50		 push	 eax
  0006c	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_timelimit+20
  00072	51		 push	 ecx
  00073	ba 04 00 00 00	 mov	 edx, 4
  00078	69 c2 b3 00 00
	00		 imul	 eax, edx, 179
  0007e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _CONS_Printf
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3742 : 		timelimitintics = cv_timelimit.value * 60 * TICRATE;

  0008d	6b 05 14 00 00
	00 3c		 imul	 eax, DWORD PTR _cv_timelimit+20, 60
  00094	6b c8 23	 imul	 ecx, eax, 35
  00097	89 0d 00 00 00
	00		 mov	 DWORD PTR _timelimitintics, ecx

; 3743 : 
; 3744 : 		//add hidetime for tag too!
; 3745 : 		if (gametype == GT_TAG)

  0009d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a4	83 f8 03	 cmp	 eax, 3
  000a7	75 12		 jne	 SHORT $LN6@TimeLimit_

; 3746 : 			timelimitintics += hidetime * TICRATE;

  000a9	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  000b0	03 05 00 00 00
	00		 add	 eax, DWORD PTR _timelimitintics
  000b6	a3 00 00 00 00	 mov	 DWORD PTR _timelimitintics, eax
$LN6@TimeLimit_:

; 3747 : 
; 3748 : 		// Note the deliberate absence of any code preventing
; 3749 : 		//   pointlimit and timelimit from being set simultaneously.
; 3750 : 		// Some people might like to use them together. It works.
; 3751 : 	}

  000bb	eb 31		 jmp	 SHORT $LN7@TimeLimit_
$LN4@TimeLimit_:

; 3752 : 	else if (netgame || multiplayer)

  000bd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000c4	75 09		 jne	 SHORT $LN8@TimeLimit_
  000c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000cd	74 1f		 je	 SHORT $LN7@TimeLimit_
$LN8@TimeLimit_:

; 3753 : 		CONS_Printf("%s", text[TIMELIMIT_DISABLED]);

  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	69 c8 b4 00 00
	00		 imul	 ecx, eax, 180
  000da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000e6	e8 00 00 00 00	 call	 _CONS_Printf
  000eb	83 c4 08	 add	 esp, 8
$LN7@TimeLimit_:

; 3754 : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
_TimeLimit_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _PointLimit_OnChange
_TEXT	SEGMENT
tv84 = -72						; size = 4
tv74 = -68						; size = 4
_PointLimit_OnChange PROC				; COMDAT

; 3685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3686 : 	// Don't allow pointlimit in Single Player/Co-Op/Race!
; 3687 : 	if (server && (gametype == GT_COOP || gametype == GT_RACE))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00010	74 34		 je	 SHORT $LN2@PointLimit
  00012	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00019	85 c0		 test	 eax, eax
  0001b	74 0c		 je	 SHORT $LN3@PointLimit
  0001d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00024	83 f8 02	 cmp	 eax, 2
  00027	75 1d		 jne	 SHORT $LN2@PointLimit
$LN3@PointLimit:

; 3688 : 	{
; 3689 : 		if (cv_pointlimit.value)

  00029	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pointlimit+20, 0
  00030	74 0f		 je	 SHORT $LN4@PointLimit

; 3690 : 			CV_StealthSetValue(&cv_pointlimit, 0);

  00032	6a 00		 push	 0
  00034	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  00039	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0003e	83 c4 08	 add	 esp, 8
$LN4@PointLimit:

; 3691 : 		return;

  00041	e9 c1 00 00 00	 jmp	 $LN7@PointLimit
$LN2@PointLimit:

; 3692 : 	}
; 3693 : 
; 3694 : 	if (cv_pointlimit.value)

  00046	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pointlimit+20, 0
  0004d	0f 84 83 00 00
	00		 je	 $LN5@PointLimit

; 3695 : 	{
; 3696 : 		CONS_Printf(text[POINTLIMIT_MESSAGE],

  00053	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_pointlimit+20, 1
  0005a	7e 09		 jle	 SHORT $LN10@PointLimit
  0005c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], OFFSET ??_C@_01LKDEMHDF@s@
  00063	eb 07		 jmp	 SHORT $LN11@PointLimit
$LN10@PointLimit:
  00065	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN11@PointLimit:
  0006c	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_matchtype+20, 1
  00073	74 22		 je	 SHORT $LN12@PointLimit
  00075	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007c	83 f8 04	 cmp	 eax, 4
  0007f	74 16		 je	 SHORT $LN12@PointLimit
  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	69 d1 b0 00 00
	00		 imul	 edx, ecx, 176
  0008c	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00092	89 45 b8	 mov	 DWORD PTR tv84[ebp], eax
  00095	eb 14		 jmp	 SHORT $LN13@PointLimit
$LN12@PointLimit:
  00097	b9 04 00 00 00	 mov	 ecx, 4
  0009c	69 d1 af 00 00
	00		 imul	 edx, ecx, 175
  000a2	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000a8	89 45 b8	 mov	 DWORD PTR tv84[ebp], eax
$LN13@PointLimit:
  000ab	8b 4d bc	 mov	 ecx, DWORD PTR tv74[ebp]
  000ae	51		 push	 ecx
  000af	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _cv_pointlimit+20
  000b5	52		 push	 edx
  000b6	8b 45 b8	 mov	 eax, DWORD PTR tv84[ebp]
  000b9	50		 push	 eax
  000ba	b9 04 00 00 00	 mov	 ecx, 4
  000bf	69 d1 ae 00 00
	00		 imul	 edx, ecx, 174
  000c5	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _CONS_Printf
  000d1	83 c4 10	 add	 esp, 16			; 00000010H

; 3697 : 			cv_matchtype.value == 1 || gametype == GT_CTF
; 3698 : 				? text[A_TEAM] : text[SOMEONE],
; 3699 : 			cv_pointlimit.value,
; 3700 : 			cv_pointlimit.value > 1 ? "s" : "");
; 3701 : 	}

  000d4	eb 31		 jmp	 SHORT $LN7@PointLimit
$LN5@PointLimit:

; 3702 : 	else if (netgame || multiplayer)

  000d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000dd	75 09		 jne	 SHORT $LN8@PointLimit
  000df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000e6	74 1f		 je	 SHORT $LN7@PointLimit
$LN8@PointLimit:

; 3703 : 		CONS_Printf("%s", text[POINTLIMIT_DISABLED]);

  000e8	b8 04 00 00 00	 mov	 eax, 4
  000ed	69 c8 b1 00 00
	00		 imul	 ecx, eax, 177
  000f3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f9	52		 push	 edx
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000ff	e8 00 00 00 00	 call	 _CONS_Printf
  00104	83 c4 08	 add	 esp, 8
$LN7@PointLimit:

; 3704 : }

  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_PointLimit_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_Clearscores
_TEXT	SEGMENT
_buf$1 = -8						; size = 2
_i$ = -4						; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_Clearscores PROC					; COMDAT

; 2345 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2346 : 	INT32 i;
; 2347 : 
; 2348 : 	(void)cp;
; 2349 : 	if (playernum != serverplayer && playernum != adminplayer)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00012	74 63		 je	 SHORT $LN5@Got_Clears
  00014	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00017	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  0001d	74 58		 je	 SHORT $LN5@Got_Clears

; 2350 : 	{
; 2351 : 		CONS_Printf(text[ILLEGALCLRSCRCMD], player_names[playernum]);

  0001f	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00023	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00028	50		 push	 eax
  00029	b9 04 00 00 00	 mov	 ecx, 4
  0002e	6b d1 76	 imul	 edx, ecx, 118
  00031	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _CONS_Printf
  0003d	83 c4 08	 add	 esp, 8

; 2352 : 		if (server)

  00040	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00047	74 2c		 je	 SHORT $LN6@Got_Clears

; 2353 : 		{
; 2354 : 			XBOXSTATIC UINT8 buf[2];
; 2355 : 
; 2356 : 			buf[0] = (UINT8)playernum;

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00054	88 54 0d f8	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 2357 : 			buf[1] = KICK_MSG_CON_FAIL;

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	c1 e0 00	 shl	 eax, 0
  00060	c6 44 05 f8 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 2358 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00065	6a 02		 push	 2
  00067	8d 45 f8	 lea	 eax, DWORD PTR _buf$1[ebp]
  0006a	50		 push	 eax
  0006b	6a 03		 push	 3
  0006d	e8 00 00 00 00	 call	 _SendNetXCmd
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Got_Clears:

; 2359 : 		}
; 2360 : 		return;

  00075	eb 47		 jmp	 SHORT $LN1@Got_Clears
$LN5@Got_Clears:

; 2361 : 	}
; 2362 : 
; 2363 : 	for (i = 0; i < MAXPLAYERS; i++)

  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007e	eb 09		 jmp	 SHORT $LN4@Got_Clears
$LN2@Got_Clears:
  00080	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00083	83 c0 01	 add	 eax, 1
  00086	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Got_Clears:
  00089	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0008d	7d 13		 jge	 SHORT $LN3@Got_Clears

; 2364 : 		players[i].score = 0;

  0008f	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00096	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+188], 0
  000a0	eb de		 jmp	 SHORT $LN2@Got_Clears
$LN3@Got_Clears:

; 2365 : 
; 2366 : 	CONS_Printf("%s", text[SCORESRESET]);

  000a2	b8 04 00 00 00	 mov	 eax, 4
  000a7	6b c8 77	 imul	 ecx, eax, 119
  000aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000b0	52		 push	 edx
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000b6	e8 00 00 00 00	 call	 _CONS_Printf
  000bb	83 c4 08	 add	 esp, 8
$LN1@Got_Clears:

; 2367 : }

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
_Got_Clearscores ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_Teamchange
_TEXT	SEGMENT
tv230 = -92						; size = 4
tv240 = -92						; size = 4
_buf$1 = -24						; size = 2
_buf$2 = -20						; size = 2
_buf$3 = -16						; size = 2
_buf$4 = -12						; size = 2
_error$ = -8						; size = 4
_NetPacket$ = -4					; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_Teamchange PROC					; COMDAT

; 2692 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2693 : 	changeteam_union NetPacket;
; 2694 : 	boolean error = false;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _error$[ebp], 0

; 2695 : 	NetPacket.value.l = NetPacket.value.b = READINT16(*cp);

  00010	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00018	66 89 55 fe	 mov	 WORD PTR _NetPacket$[ebp+2], dx
  0001c	66 8b 45 fe	 mov	 ax, WORD PTR _NetPacket$[ebp+2]
  00020	66 89 45 fc	 mov	 WORD PTR _NetPacket$[ebp], ax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _cp$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	83 c2 02	 add	 edx, 2
  0002c	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0002f	89 10		 mov	 DWORD PTR [eax], edx

; 2696 : 
; 2697 : 	if (!(gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF)) //Make sure you're in the right gametype.

  00031	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00038	83 f8 01	 cmp	 eax, 1
  0003b	74 71		 je	 SHORT $LN7@Got_Teamch
  0003d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00044	83 f8 03	 cmp	 eax, 3
  00047	74 65		 je	 SHORT $LN7@Got_Teamch
  00049	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00050	83 f8 04	 cmp	 eax, 4
  00053	74 59		 je	 SHORT $LN7@Got_Teamch

; 2698 : 	{
; 2699 : 		// this should never happen unless the client is hacked/buggy
; 2700 : 		CONS_Printf(text[ILLEGALTEAMCHANGECMD], player_names[playernum]);

  00055	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00059	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0005e	50		 push	 eax
  0005f	b9 04 00 00 00	 mov	 ecx, 4
  00064	69 d1 85 00 00
	00		 imul	 edx, ecx, 133
  0006a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _CONS_Printf
  00076	83 c4 08	 add	 esp, 8

; 2701 : 		if (server)

  00079	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00080	74 2c		 je	 SHORT $LN7@Got_Teamch

; 2702 : 		{
; 2703 : 			XBOXSTATIC UINT8 buf[2];
; 2704 : 
; 2705 : 			buf[0] = (UINT8)playernum;

  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	6b c8 00	 imul	 ecx, eax, 0
  0008a	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  0008d	88 54 0d f4	 mov	 BYTE PTR _buf$4[ebp+ecx], dl

; 2706 : 			buf[1] = KICK_MSG_CON_FAIL;

  00091	b8 01 00 00 00	 mov	 eax, 1
  00096	c1 e0 00	 shl	 eax, 0
  00099	c6 44 05 f4 02	 mov	 BYTE PTR _buf$4[ebp+eax], 2

; 2707 : 			SendNetXCmd(XD_KICK, &buf, 2);

  0009e	6a 02		 push	 2
  000a0	8d 45 f4	 lea	 eax, DWORD PTR _buf$4[ebp]
  000a3	50		 push	 eax
  000a4	6a 03		 push	 3
  000a6	e8 00 00 00 00	 call	 _SendNetXCmd
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Got_Teamch:

; 2708 : 		}
; 2709 : 	}
; 2710 : 
; 2711 : 	if (NetPacket.packet.verification) // Special marker that the server sent the request

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  000b1	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  000b4	83 e0 01	 and	 eax, 1
  000b7	74 7d		 je	 SHORT $LN8@Got_Teamch

; 2712 : 	{
; 2713 : 		if (playernum != serverplayer && (playernum != adminplayer))

  000b9	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000bc	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  000c2	74 69		 je	 SHORT $LN9@Got_Teamch
  000c4	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000c7	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  000cd	74 5e		 je	 SHORT $LN9@Got_Teamch

; 2714 : 		{
; 2715 : 			CONS_Printf(text[ILLEGALTEAMCHANGECMD], player_names[playernum]);

  000cf	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  000d3	05 00 00 00 00	 add	 eax, OFFSET _player_names
  000d8	50		 push	 eax
  000d9	b9 04 00 00 00	 mov	 ecx, 4
  000de	69 d1 85 00 00
	00		 imul	 edx, ecx, 133
  000e4	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 _CONS_Printf
  000f0	83 c4 08	 add	 esp, 8

; 2716 : 			if (server)

  000f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000fa	74 2c		 je	 SHORT $LN10@Got_Teamch

; 2717 : 			{
; 2718 : 				XBOXSTATIC UINT8 buf[2];
; 2719 : 
; 2720 : 				buf[0] = (UINT8)playernum;

  000fc	b8 01 00 00 00	 mov	 eax, 1
  00101	6b c8 00	 imul	 ecx, eax, 0
  00104	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00107	88 54 0d f0	 mov	 BYTE PTR _buf$3[ebp+ecx], dl

; 2721 : 				buf[1] = KICK_MSG_CON_FAIL;

  0010b	b8 01 00 00 00	 mov	 eax, 1
  00110	c1 e0 00	 shl	 eax, 0
  00113	c6 44 05 f0 02	 mov	 BYTE PTR _buf$3[ebp+eax], 2

; 2722 : 				SendNetXCmd(XD_KICK, &buf, 2);

  00118	6a 02		 push	 2
  0011a	8d 45 f0	 lea	 eax, DWORD PTR _buf$3[ebp]
  0011d	50		 push	 eax
  0011e	6a 03		 push	 3
  00120	e8 00 00 00 00	 call	 _SendNetXCmd
  00125	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@Got_Teamch:

; 2723 : 			}
; 2724 : 			return;

  00128	e9 03 08 00 00	 jmp	 $LN90@Got_Teamch
$LN9@Got_Teamch:

; 2725 : 		}
; 2726 : 		playernum = NetPacket.packet.playernum;

  0012d	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00130	83 e0 1f	 and	 eax, 31			; 0000001fH
  00133	89 45 0c	 mov	 DWORD PTR _playernum$[ebp], eax
$LN8@Got_Teamch:

; 2727 : 	}
; 2728 : 
; 2729 : 	// Prevent multiple changes in one go.
; 2730 : 	if (gametype == GT_MATCH && !cv_matchtype.value)

  00136	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0013d	83 f8 01	 cmp	 eax, 1
  00140	75 50		 jne	 SHORT $LN11@Got_Teamch
  00142	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00149	75 47		 jne	 SHORT $LN11@Got_Teamch

; 2731 : 	{
; 2732 : 		if ((players[playernum].spectator && !NetPacket.packet.newteam) ||

  0014b	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00152	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00159	85 c9		 test	 ecx, ecx
  0015b	74 0b		 je	 SHORT $LN15@Got_Teamch
  0015d	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00160	c1 e8 05	 shr	 eax, 5
  00163	83 e0 1f	 and	 eax, 31			; 0000001fH
  00166	74 20		 je	 SHORT $LN14@Got_Teamch
$LN15@Got_Teamch:
  00168	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0016f	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00176	85 c9		 test	 ecx, ecx
  00178	75 13		 jne	 SHORT $LN13@Got_Teamch
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0017d	c1 e8 05	 shr	 eax, 5
  00180	83 e0 1f	 and	 eax, 31			; 0000001fH
  00183	83 f8 03	 cmp	 eax, 3
  00186	75 05		 jne	 SHORT $LN13@Got_Teamch
$LN14@Got_Teamch:

; 2733 : 			(!players[playernum].spectator && NetPacket.packet.newteam == 3))
; 2734 : 			return;

  00188	e9 a3 07 00 00	 jmp	 $LN90@Got_Teamch
$LN13@Got_Teamch:

; 2735 : 	}

  0018d	e9 79 01 00 00	 jmp	 $LN24@Got_Teamch
$LN11@Got_Teamch:

; 2736 : 	else if (gametype == GT_TAG)

  00192	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00199	83 f8 03	 cmp	 eax, 3
  0019c	0f 85 8d 00 00
	00		 jne	 $LN16@Got_Teamch

; 2737 : 	{
; 2738 : 		if (((players[playernum].pflags & PF_TAGIT) && NetPacket.packet.newteam == 1) ||
; 2739 : 			(!(players[playernum].pflags & PF_TAGIT) && NetPacket.packet.newteam == 2) ||
; 2740 : 			(players[playernum].spectator && NetPacket.packet.newteam == 0) ||

  001a2	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  001a9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  001af	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  001b5	74 0e		 je	 SHORT $LN20@Got_Teamch
  001b7	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  001ba	c1 e8 05	 shr	 eax, 5
  001bd	83 e0 1f	 and	 eax, 31			; 0000001fH
  001c0	83 f8 01	 cmp	 eax, 1
  001c3	74 60		 je	 SHORT $LN19@Got_Teamch
$LN20@Got_Teamch:
  001c5	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  001cc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  001d2	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  001d8	75 0e		 jne	 SHORT $LN21@Got_Teamch
  001da	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  001dd	c1 e8 05	 shr	 eax, 5
  001e0	83 e0 1f	 and	 eax, 31			; 0000001fH
  001e3	83 f8 02	 cmp	 eax, 2
  001e6	74 3d		 je	 SHORT $LN19@Got_Teamch
$LN21@Got_Teamch:
  001e8	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  001ef	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  001f6	85 c9		 test	 ecx, ecx
  001f8	74 0b		 je	 SHORT $LN22@Got_Teamch
  001fa	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  001fd	c1 e8 05	 shr	 eax, 5
  00200	83 e0 1f	 and	 eax, 31			; 0000001fH
  00203	74 20		 je	 SHORT $LN19@Got_Teamch
$LN22@Got_Teamch:
  00205	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0020c	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00213	85 c9		 test	 ecx, ecx
  00215	75 13		 jne	 SHORT $LN18@Got_Teamch
  00217	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0021a	c1 e8 05	 shr	 eax, 5
  0021d	83 e0 1f	 and	 eax, 31			; 0000001fH
  00220	83 f8 03	 cmp	 eax, 3
  00223	75 05		 jne	 SHORT $LN18@Got_Teamch
$LN19@Got_Teamch:

; 2741 : 			(!players[playernum].spectator && NetPacket.packet.newteam == 3))
; 2742 : 			return;

  00225	e9 06 07 00 00	 jmp	 $LN90@Got_Teamch
$LN18@Got_Teamch:

; 2743 : 	}

  0022a	e9 dc 00 00 00	 jmp	 $LN24@Got_Teamch
$LN16@Got_Teamch:

; 2744 : 	else if ((gametype == GT_MATCH && cv_matchtype.value) || gametype == GT_CTF)

  0022f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00236	83 f8 01	 cmp	 eax, 1
  00239	75 09		 jne	 SHORT $LN26@Got_Teamch
  0023b	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00242	75 0c		 jne	 SHORT $LN25@Got_Teamch
$LN26@Got_Teamch:
  00244	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0024b	83 f8 04	 cmp	 eax, 4
  0024e	75 47		 jne	 SHORT $LN23@Got_Teamch
$LN25@Got_Teamch:

; 2745 : 	{
; 2746 : 		if ((NetPacket.packet.newteam && (NetPacket.packet.newteam == (unsigned)players[playernum].ctfteam)) ||

  00250	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00253	c1 e8 05	 shr	 eax, 5
  00256	83 e0 1f	 and	 eax, 31			; 0000001fH
  00259	74 18		 je	 SHORT $LN29@Got_Teamch
  0025b	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0025e	c1 e8 05	 shr	 eax, 5
  00261	83 e0 1f	 and	 eax, 31			; 0000001fH
  00264	69 4d 0c fc 01
	00 00		 imul	 ecx, DWORD PTR _playernum$[ebp], 508
  0026b	3b 81 60 01 00
	00		 cmp	 eax, DWORD PTR _players[ecx+352]
  00271	74 1d		 je	 SHORT $LN28@Got_Teamch
$LN29@Got_Teamch:
  00273	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0027a	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  00281	85 c9		 test	 ecx, ecx
  00283	74 10		 je	 SHORT $LN27@Got_Teamch
  00285	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00288	c1 e8 05	 shr	 eax, 5
  0028b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0028e	75 05		 jne	 SHORT $LN27@Got_Teamch
$LN28@Got_Teamch:

; 2747 : 			(players[playernum].spectator && !NetPacket.packet.newteam))
; 2748 : 			return;

  00290	e9 9b 06 00 00	 jmp	 $LN90@Got_Teamch
$LN27@Got_Teamch:

; 2749 : 	}

  00295	eb 74		 jmp	 SHORT $LN24@Got_Teamch
$LN23@Got_Teamch:

; 2750 : 	else
; 2751 : 	{
; 2752 : 		if (playernum != serverplayer && (playernum != adminplayer))

  00297	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0029a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  002a0	74 64		 je	 SHORT $LN31@Got_Teamch
  002a2	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  002a5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  002ab	74 59		 je	 SHORT $LN31@Got_Teamch

; 2753 : 		{
; 2754 : 			CONS_Printf(text[ILLEGALTEAMCHANGECMD], player_names[playernum]);

  002ad	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  002b1	05 00 00 00 00	 add	 eax, OFFSET _player_names
  002b6	50		 push	 eax
  002b7	b9 04 00 00 00	 mov	 ecx, 4
  002bc	69 d1 85 00 00
	00		 imul	 edx, ecx, 133
  002c2	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 _CONS_Printf
  002ce	83 c4 08	 add	 esp, 8

; 2755 : 			if (server)

  002d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  002d8	74 2c		 je	 SHORT $LN31@Got_Teamch

; 2756 : 			{
; 2757 : 				XBOXSTATIC UINT8 buf[2];
; 2758 : 
; 2759 : 				buf[0] = (UINT8)playernum;

  002da	b8 01 00 00 00	 mov	 eax, 1
  002df	6b c8 00	 imul	 ecx, eax, 0
  002e2	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  002e5	88 54 0d ec	 mov	 BYTE PTR _buf$2[ebp+ecx], dl

; 2760 : 				buf[1] = KICK_MSG_CON_FAIL;

  002e9	b8 01 00 00 00	 mov	 eax, 1
  002ee	c1 e0 00	 shl	 eax, 0
  002f1	c6 44 05 ec 02	 mov	 BYTE PTR _buf$2[ebp+eax], 2

; 2761 : 				SendNetXCmd(XD_KICK, &buf, 2);

  002f6	6a 02		 push	 2
  002f8	8d 45 ec	 lea	 eax, DWORD PTR _buf$2[ebp]
  002fb	50		 push	 eax
  002fc	6a 03		 push	 3
  002fe	e8 00 00 00 00	 call	 _SendNetXCmd
  00303	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN31@Got_Teamch:

; 2762 : 			}
; 2763 : 		}
; 2764 : 		return;

  00306	e9 25 06 00 00	 jmp	 $LN90@Got_Teamch
$LN24@Got_Teamch:

; 2765 : 	}
; 2766 : 
; 2767 : 	//Make sure that the right team number is sent. Keep in mind that normal clients cannot change to certain teams in certain gametypes.
; 2768 : 	switch (gametype)

  0030b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00312	89 45 a4	 mov	 DWORD PTR tv230[ebp], eax
  00315	83 7d a4 01	 cmp	 DWORD PTR tv230[ebp], 1
  00319	74 11		 je	 SHORT $LN32@Got_Teamch
  0031b	83 7d a4 03	 cmp	 DWORD PTR tv230[ebp], 3
  0031f	74 33		 je	 SHORT $LN36@Got_Teamch
  00321	83 7d a4 04	 cmp	 DWORD PTR tv230[ebp], 4
  00325	74 05		 je	 SHORT $LN32@Got_Teamch
  00327	e9 97 00 00 00	 jmp	 $LN45@Got_Teamch
$LN32@Got_Teamch:

; 2769 : 	{
; 2770 : 	case GT_MATCH: case GT_CTF:
; 2771 : 		if (!cv_allowteamchange.value)

  0032c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowteamchange+20, 0
  00333	75 1d		 jne	 SHORT $LN35@Got_Teamch

; 2772 : 		{
; 2773 : 			if (!NetPacket.packet.verification && NetPacket.packet.newteam)

  00335	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00338	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0033b	83 e0 01	 and	 eax, 1
  0033e	75 12		 jne	 SHORT $LN35@Got_Teamch
  00340	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00343	c1 e8 05	 shr	 eax, 5
  00346	83 e0 1f	 and	 eax, 31			; 0000001fH
  00349	74 07		 je	 SHORT $LN35@Got_Teamch

; 2774 : 				error = true; //Only admin can change status, unless changing to spectator.

  0034b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN35@Got_Teamch:

; 2775 : 		}
; 2776 : 		break; //Otherwise, you don't need special permissions.

  00352	eb 7c		 jmp	 SHORT $LN2@Got_Teamch
$LN36@Got_Teamch:

; 2777 : 	case GT_TAG:
; 2778 : 		switch (NetPacket.packet.newteam)

  00354	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00357	c1 e8 05	 shr	 eax, 5
  0035a	83 e0 1f	 and	 eax, 31			; 0000001fH
  0035d	89 45 a4	 mov	 DWORD PTR tv240[ebp], eax
  00360	83 7d a4 01	 cmp	 DWORD PTR tv240[ebp], 1
  00364	74 10		 je	 SHORT $LN38@Got_Teamch
  00366	83 7d a4 02	 cmp	 DWORD PTR tv240[ebp], 2
  0036a	74 0a		 je	 SHORT $LN38@Got_Teamch
  0036c	83 7d a4 03	 cmp	 DWORD PTR tv240[ebp], 3
  00370	74 27		 je	 SHORT $LN42@Got_Teamch
  00372	eb 4d		 jmp	 SHORT $LN4@Got_Teamch

; 2779 : 		{
; 2780 : 		case 0:
; 2781 : 			break;

  00374	eb 4b		 jmp	 SHORT $LN4@Got_Teamch
$LN38@Got_Teamch:

; 2782 : 		case 1: case 2:
; 2783 : 			if (!NetPacket.packet.verification || leveltime >= (hidetime * TICRATE)) //no status changes after hidetime

  00376	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00379	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0037c	83 e0 01	 and	 eax, 1
  0037f	74 0f		 je	 SHORT $LN41@Got_Teamch
  00381	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00388	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  0038e	72 07		 jb	 SHORT $LN40@Got_Teamch
$LN41@Got_Teamch:

; 2784 : 				error = true; //Only admin can change player's IT status' in tag.

  00390	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN40@Got_Teamch:

; 2785 : 			break;

  00397	eb 28		 jmp	 SHORT $LN4@Got_Teamch
$LN42@Got_Teamch:

; 2786 : 		case 3: //Join game via console.
; 2787 : 			//no status changes after hidetime in hide and seek.
; 2788 : 			if (!cv_allowteamchange.value || (cv_tagtype.value && (leveltime >= (hidetime * TICRATE))))

  00399	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_allowteamchange+20, 0
  003a0	74 18		 je	 SHORT $LN44@Got_Teamch
  003a2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  003a9	74 16		 je	 SHORT $LN43@Got_Teamch
  003ab	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  003b2	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  003b8	72 07		 jb	 SHORT $LN43@Got_Teamch
$LN44@Got_Teamch:

; 2789 : 				error = true;

  003ba	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _error$[ebp], 1
$LN43@Got_Teamch:
$LN4@Got_Teamch:

; 2790 : 			break;
; 2791 : 		}
; 2792 : 
; 2793 : 		break;

  003c1	eb 0d		 jmp	 SHORT $LN2@Got_Teamch
$LN45@Got_Teamch:

; 2794 : 	default:
; 2795 : 		I_Error("Invalid gametype after initial checks!");

  003c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BGAHPOLH@Invalid?5gametype?5after?5initial?5@
  003c8	e8 00 00 00 00	 call	 _I_Error
  003cd	83 c4 04	 add	 esp, 4
$LN2@Got_Teamch:

; 2796 : 	}
; 2797 : 
; 2798 : 	if (server && ((NetPacket.packet.newteam < 0 || NetPacket.packet.newteam > 3) || error))

  003d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  003d7	74 7a		 je	 SHORT $LN46@Got_Teamch
  003d9	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  003dc	c1 e8 05	 shr	 eax, 5
  003df	83 e0 1f	 and	 eax, 31			; 0000001fH
  003e2	72 14		 jb	 SHORT $LN47@Got_Teamch
  003e4	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  003e7	c1 e8 05	 shr	 eax, 5
  003ea	83 e0 1f	 and	 eax, 31			; 0000001fH
  003ed	83 f8 03	 cmp	 eax, 3
  003f0	77 06		 ja	 SHORT $LN47@Got_Teamch
  003f2	83 7d f8 00	 cmp	 DWORD PTR _error$[ebp], 0
  003f6	74 5b		 je	 SHORT $LN46@Got_Teamch
$LN47@Got_Teamch:

; 2799 : 	{
; 2800 : 		XBOXSTATIC UINT8 buf[2];
; 2801 : 
; 2802 : 		buf[0] = (UINT8)playernum;

  003f8	b8 01 00 00 00	 mov	 eax, 1
  003fd	6b c8 00	 imul	 ecx, eax, 0
  00400	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00403	88 54 0d e8	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 2803 : 		buf[1] = KICK_MSG_CON_FAIL;

  00407	b8 01 00 00 00	 mov	 eax, 1
  0040c	c1 e0 00	 shl	 eax, 0
  0040f	c6 44 05 e8 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 2804 : 		CONS_Printf(text[SENTILLEGALTEAMCHANGE], player_names[playernum], NetPacket.packet.newteam);

  00414	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00417	c1 e8 05	 shr	 eax, 5
  0041a	83 e0 1f	 and	 eax, 31			; 0000001fH
  0041d	50		 push	 eax
  0041e	6b 4d 0c 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  00422	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00428	51		 push	 ecx
  00429	ba 04 00 00 00	 mov	 edx, 4
  0042e	69 c2 86 00 00
	00		 imul	 eax, edx, 134
  00434	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  0043a	51		 push	 ecx
  0043b	e8 00 00 00 00	 call	 _CONS_Printf
  00440	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2805 : 		SendNetXCmd(XD_KICK, &buf, 2);

  00443	6a 02		 push	 2
  00445	8d 45 e8	 lea	 eax, DWORD PTR _buf$1[ebp]
  00448	50		 push	 eax
  00449	6a 03		 push	 3
  0044b	e8 00 00 00 00	 call	 _SendNetXCmd
  00450	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN46@Got_Teamch:

; 2806 : 	}
; 2807 : 
; 2808 : 	//Safety first!
; 2809 : 	//Mega hack. P_DamageMobj needs cleaning, badly.
; 2810 : 	players[playernum].spectator = true;

  00453	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0045a	c6 80 f0 01 00
	00 01		 mov	 BYTE PTR _players[eax+496], 1

; 2811 : 	if (players[playernum].mo)

  00461	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00468	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  0046f	74 1f		 je	 SHORT $LN48@Got_Teamch

; 2812 : 		P_DamageMobj(players[playernum].mo, NULL, NULL, 42000);

  00471	68 10 a4 00 00	 push	 42000			; 0000a410H
  00476	6a 00		 push	 0
  00478	6a 00		 push	 0
  0047a	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00481	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00487	51		 push	 ecx
  00488	e8 00 00 00 00	 call	 _P_DamageMobj
  0048d	83 c4 10	 add	 esp, 16			; 00000010H
$LN48@Got_Teamch:

; 2813 : 
; 2814 : 	//Now that we've done our error checking and killed the player
; 2815 : 	//if necessary, put the player on the correct team/status.
; 2816 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  00490	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00497	83 f8 04	 cmp	 eax, 4
  0049a	74 15		 je	 SHORT $LN51@Got_Teamch
  0049c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004a3	83 f8 01	 cmp	 eax, 1
  004a6	75 5e		 jne	 SHORT $LN49@Got_Teamch
  004a8	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  004af	74 55		 je	 SHORT $LN49@Got_Teamch
$LN51@Got_Teamch:

; 2817 : 	{
; 2818 : 		if (!NetPacket.packet.newteam)

  004b1	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  004b4	c1 e8 05	 shr	 eax, 5
  004b7	83 e0 1f	 and	 eax, 31			; 0000001fH
  004ba	75 21		 jne	 SHORT $LN52@Got_Teamch

; 2819 : 		{
; 2820 : 			players[playernum].ctfteam = 0;

  004bc	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004c3	c7 80 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+352], 0

; 2821 : 			players[playernum].spectator = true;

  004cd	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004d4	c6 80 f0 01 00
	00 01		 mov	 BYTE PTR _players[eax+496], 1

; 2822 : 		}

  004db	eb 24		 jmp	 SHORT $LN53@Got_Teamch
$LN52@Got_Teamch:

; 2823 : 		else
; 2824 : 		{
; 2825 : 			players[playernum].ctfteam = NetPacket.packet.newteam;

  004dd	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  004e0	c1 e8 05	 shr	 eax, 5
  004e3	83 e0 1f	 and	 eax, 31			; 0000001fH
  004e6	69 4d 0c fc 01
	00 00		 imul	 ecx, DWORD PTR _playernum$[ebp], 508
  004ed	89 81 60 01 00
	00		 mov	 DWORD PTR _players[ecx+352], eax

; 2826 : 			players[playernum].spectator = false;

  004f3	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  004fa	c6 80 f0 01 00
	00 00		 mov	 BYTE PTR _players[eax+496], 0
$LN53@Got_Teamch:

; 2827 : 		}
; 2828 : 	}

  00501	e9 97 01 00 00	 jmp	 $LN65@Got_Teamch
$LN49@Got_Teamch:

; 2829 : 	else if (gametype == GT_MATCH && !cv_matchtype.value)

  00506	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0050d	83 f8 01	 cmp	 eax, 1
  00510	75 37		 jne	 SHORT $LN54@Got_Teamch
  00512	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00519	75 2e		 jne	 SHORT $LN54@Got_Teamch

; 2830 : 	{
; 2831 : 		if (!NetPacket.packet.newteam)

  0051b	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0051e	c1 e8 05	 shr	 eax, 5
  00521	83 e0 1f	 and	 eax, 31			; 0000001fH
  00524	75 10		 jne	 SHORT $LN56@Got_Teamch

; 2832 : 			players[playernum].spectator = true;

  00526	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0052d	c6 80 f0 01 00
	00 01		 mov	 BYTE PTR _players[eax+496], 1
  00534	eb 0e		 jmp	 SHORT $LN57@Got_Teamch
$LN56@Got_Teamch:

; 2833 : 		else
; 2834 : 			players[playernum].spectator = false;

  00536	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0053d	c6 80 f0 01 00
	00 00		 mov	 BYTE PTR _players[eax+496], 0
$LN57@Got_Teamch:

; 2835 : 	}

  00544	e9 54 01 00 00	 jmp	 $LN65@Got_Teamch
$LN54@Got_Teamch:

; 2836 : 	else if (gametype == GT_TAG)

  00549	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00550	83 f8 03	 cmp	 eax, 3
  00553	0f 85 44 01 00
	00		 jne	 $LN65@Got_Teamch

; 2837 : 	{
; 2838 : 		if (!NetPacket.packet.newteam)

  00559	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0055c	c1 e8 05	 shr	 eax, 5
  0055f	83 e0 1f	 and	 eax, 31			; 0000001fH
  00562	75 53		 jne	 SHORT $LN59@Got_Teamch

; 2839 : 		{
; 2840 : 			players[playernum].spectator = true;

  00564	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0056b	c6 80 f0 01 00
	00 01		 mov	 BYTE PTR _players[eax+496], 1

; 2841 : 			players[playernum].pflags &= ~PF_TAGIT;

  00572	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00579	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0057f	81 e1 ff ff ff
	ef		 and	 ecx, -268435457		; efffffffH
  00585	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  0058c	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 2842 : 			players[playernum].pflags &= ~PF_TAGGED;

  00592	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00599	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0059f	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  005a5	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  005ac	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 2843 : 		}

  005b2	e9 e6 00 00 00	 jmp	 $LN65@Got_Teamch
$LN59@Got_Teamch:

; 2844 : 		else if (NetPacket.packet.newteam != 3) // .newteam == 1 or 2.

  005b7	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  005ba	c1 e8 05	 shr	 eax, 5
  005bd	83 e0 1f	 and	 eax, 31			; 0000001fH
  005c0	83 f8 03	 cmp	 eax, 3
  005c3	0f 84 80 00 00
	00		 je	 $LN61@Got_Teamch

; 2845 : 		{
; 2846 : 			players[playernum].spectator = false;

  005c9	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  005d0	c6 80 f0 01 00
	00 00		 mov	 BYTE PTR _players[eax+496], 0

; 2847 : 			players[playernum].pflags &= ~PF_TAGGED;//Just in case.

  005d7	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  005de	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  005e4	81 e1 ff ff ff
	fb		 and	 ecx, -67108865		; fbffffffH
  005ea	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  005f1	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 2848 : 
; 2849 : 			if (NetPacket.packet.newteam == 1) //Make the player IT.

  005f7	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  005fa	c1 e8 05	 shr	 eax, 5
  005fd	83 e0 1f	 and	 eax, 31			; 0000001fH
  00600	83 f8 01	 cmp	 eax, 1
  00603	75 22		 jne	 SHORT $LN63@Got_Teamch

; 2850 : 				players[playernum].pflags |= PF_TAGIT;

  00605	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0060c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00612	81 c9 00 00 00
	10		 or	 ecx, 268435456		; 10000000H
  00618	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  0061f	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
  00625	eb 20		 jmp	 SHORT $LN64@Got_Teamch
$LN63@Got_Teamch:

; 2851 : 			else
; 2852 : 				players[playernum].pflags &= ~PF_TAGIT;

  00627	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0062e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00634	81 e1 ff ff ff
	ef		 and	 ecx, -268435457		; efffffffH
  0063a	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  00641	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
$LN64@Got_Teamch:

; 2853 : 		}

  00647	eb 54		 jmp	 SHORT $LN65@Got_Teamch
$LN61@Got_Teamch:

; 2854 : 		else // Just join the game.
; 2855 : 		{
; 2856 : 			players[playernum].spectator = false;

  00649	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00650	c6 80 f0 01 00
	00 00		 mov	 BYTE PTR _players[eax+496], 0

; 2857 : 
; 2858 : 			//If joining after hidetime in normal tag, default to being IT.
; 2859 : 			if (!cv_tagtype.value && (leveltime > (hidetime * TICRATE)))

  00657	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  0065e	75 3d		 jne	 SHORT $LN65@Got_Teamch
  00660	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00667	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  0066d	76 2e		 jbe	 SHORT $LN65@Got_Teamch

; 2860 : 			{
; 2861 : 				NetPacket.packet.newteam = 1; //minor hack, causes the "is it" message to be printed later.

  0066f	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00672	25 1f fc ff ff	 and	 eax, -993		; fffffc1fH
  00677	83 c8 20	 or	 eax, 32			; 00000020H
  0067a	89 45 fc	 mov	 DWORD PTR _NetPacket$[ebp], eax

; 2862 : 				players[playernum].pflags |= PF_TAGIT; //make the player IT.

  0067d	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00684	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  0068a	81 c9 00 00 00
	10		 or	 ecx, 268435456		; 10000000H
  00690	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  00697	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
$LN65@Got_Teamch:

; 2863 : 			}
; 2864 : 		}
; 2865 : 	}
; 2866 : 
; 2867 : 	if (NetPacket.packet.autobalance)

  0069d	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  006a0	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  006a3	83 e0 01	 and	 eax, 1
  006a6	74 29		 je	 SHORT $LN66@Got_Teamch

; 2868 : 		CONS_Printf(text[AUTOBALANCE_SWITCH], player_names[playernum]);

  006a8	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  006ac	05 00 00 00 00	 add	 eax, OFFSET _player_names
  006b1	50		 push	 eax
  006b2	b9 04 00 00 00	 mov	 ecx, 4
  006b7	69 d1 8d 00 00
	00		 imul	 edx, ecx, 141
  006bd	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  006c3	50		 push	 eax
  006c4	e8 00 00 00 00	 call	 _CONS_Printf
  006c9	83 c4 08	 add	 esp, 8
  006cc	e9 5b 01 00 00	 jmp	 $LN79@Got_Teamch
$LN66@Got_Teamch:

; 2869 : 	else if (NetPacket.packet.scrambled)

  006d1	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  006d4	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  006d7	83 e0 01	 and	 eax, 1
  006da	74 29		 je	 SHORT $LN68@Got_Teamch

; 2870 : 		CONS_Printf(text[SCRAMBLE_SWITCH], player_names[playernum]);

  006dc	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  006e0	05 00 00 00 00	 add	 eax, OFFSET _player_names
  006e5	50		 push	 eax
  006e6	b9 04 00 00 00	 mov	 ecx, 4
  006eb	69 d1 8e 00 00
	00		 imul	 edx, ecx, 142
  006f1	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  006f7	50		 push	 eax
  006f8	e8 00 00 00 00	 call	 _CONS_Printf
  006fd	83 c4 08	 add	 esp, 8
  00700	e9 27 01 00 00	 jmp	 $LN79@Got_Teamch
$LN68@Got_Teamch:

; 2871 : 	else if (NetPacket.packet.newteam == 1)

  00705	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00708	c1 e8 05	 shr	 eax, 5
  0070b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0070e	83 f8 01	 cmp	 eax, 1
  00711	75 5b		 jne	 SHORT $LN70@Got_Teamch

; 2872 : 	{
; 2873 : 		if (gametype == GT_TAG)

  00713	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0071a	83 f8 03	 cmp	 eax, 3
  0071d	75 26		 jne	 SHORT $LN72@Got_Teamch

; 2874 : 			CONS_Printf(text[NOW_IT], player_names[playernum]);

  0071f	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00723	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00728	50		 push	 eax
  00729	b9 04 00 00 00	 mov	 ecx, 4
  0072e	69 d1 87 00 00
	00		 imul	 edx, ecx, 135
  00734	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0073a	50		 push	 eax
  0073b	e8 00 00 00 00	 call	 _CONS_Printf
  00740	83 c4 08	 add	 esp, 8
  00743	eb 24		 jmp	 SHORT $LN73@Got_Teamch
$LN72@Got_Teamch:

; 2875 : 		else
; 2876 : 			CONS_Printf(text[REDTEAM_SWITCH], player_names[playernum]);

  00745	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00749	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0074e	50		 push	 eax
  0074f	b9 04 00 00 00	 mov	 ecx, 4
  00754	69 d1 89 00 00
	00		 imul	 edx, ecx, 137
  0075a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00760	50		 push	 eax
  00761	e8 00 00 00 00	 call	 _CONS_Printf
  00766	83 c4 08	 add	 esp, 8
$LN73@Got_Teamch:

; 2877 : 	}

  00769	e9 be 00 00 00	 jmp	 $LN79@Got_Teamch
$LN70@Got_Teamch:

; 2878 : 	else if (NetPacket.packet.newteam == 2)

  0076e	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00771	c1 e8 05	 shr	 eax, 5
  00774	83 e0 1f	 and	 eax, 31			; 0000001fH
  00777	83 f8 02	 cmp	 eax, 2
  0077a	75 58		 jne	 SHORT $LN74@Got_Teamch

; 2879 : 	{
; 2880 : 		if (gametype == GT_TAG)

  0077c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00783	83 f8 03	 cmp	 eax, 3
  00786	75 26		 jne	 SHORT $LN76@Got_Teamch

; 2881 : 			CONS_Printf(text[NO_LONGER_IT], player_names[playernum]);

  00788	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  0078c	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00791	50		 push	 eax
  00792	b9 04 00 00 00	 mov	 ecx, 4
  00797	69 d1 88 00 00
	00		 imul	 edx, ecx, 136
  0079d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  007a3	50		 push	 eax
  007a4	e8 00 00 00 00	 call	 _CONS_Printf
  007a9	83 c4 08	 add	 esp, 8
  007ac	eb 24		 jmp	 SHORT $LN77@Got_Teamch
$LN76@Got_Teamch:

; 2882 : 		else
; 2883 : 			CONS_Printf(text[BLUETEAM_SWITCH], player_names[playernum]);

  007ae	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  007b2	05 00 00 00 00	 add	 eax, OFFSET _player_names
  007b7	50		 push	 eax
  007b8	b9 04 00 00 00	 mov	 ecx, 4
  007bd	69 d1 8a 00 00
	00		 imul	 edx, ecx, 138
  007c3	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  007c9	50		 push	 eax
  007ca	e8 00 00 00 00	 call	 _CONS_Printf
  007cf	83 c4 08	 add	 esp, 8
$LN77@Got_Teamch:

; 2884 : 	}

  007d2	eb 58		 jmp	 SHORT $LN79@Got_Teamch
$LN74@Got_Teamch:

; 2885 : 	else if (NetPacket.packet.newteam == 3)

  007d4	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  007d7	c1 e8 05	 shr	 eax, 5
  007da	83 e0 1f	 and	 eax, 31			; 0000001fH
  007dd	83 f8 03	 cmp	 eax, 3
  007e0	75 26		 jne	 SHORT $LN78@Got_Teamch

; 2886 : 		CONS_Printf(text[INGAME_SWITCH], player_names[playernum]);

  007e2	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  007e6	05 00 00 00 00	 add	 eax, OFFSET _player_names
  007eb	50		 push	 eax
  007ec	b9 04 00 00 00	 mov	 ecx, 4
  007f1	69 d1 8c 00 00
	00		 imul	 edx, ecx, 140
  007f7	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  007fd	50		 push	 eax
  007fe	e8 00 00 00 00	 call	 _CONS_Printf
  00803	83 c4 08	 add	 esp, 8
  00806	eb 24		 jmp	 SHORT $LN79@Got_Teamch
$LN78@Got_Teamch:

; 2887 : 	else
; 2888 : 		CONS_Printf(text[SPECTATOR_SWITCH], player_names[playernum]);

  00808	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  0080c	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00811	50		 push	 eax
  00812	b9 04 00 00 00	 mov	 ecx, 4
  00817	69 d1 8b 00 00
	00		 imul	 edx, ecx, 139
  0081d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00823	50		 push	 eax
  00824	e8 00 00 00 00	 call	 _CONS_Printf
  00829	83 c4 08	 add	 esp, 8
$LN79@Got_Teamch:

; 2889 : 
; 2890 : 	//reset view if you are changed, or viewing someone who was changed.
; 2891 : 	if (playernum == consoleplayer || displayplayer == playernum)

  0082c	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0082f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00835	74 0a		 je	 SHORT $LN81@Got_Teamch
  00837	a1 00 00 00 00	 mov	 eax, DWORD PTR _displayplayer
  0083c	3b 45 0c	 cmp	 eax, DWORD PTR _playernum$[ebp]
  0083f	75 0a		 jne	 SHORT $LN80@Got_Teamch
$LN81@Got_Teamch:

; 2892 : 		displayplayer = consoleplayer;

  00841	a1 00 00 00 00	 mov	 eax, DWORD PTR _consoleplayer
  00846	a3 00 00 00 00	 mov	 DWORD PTR _displayplayer, eax
$LN80@Got_Teamch:

; 2893 : 
; 2894 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0084b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00852	83 f8 04	 cmp	 eax, 4
  00855	74 15		 je	 SHORT $LN83@Got_Teamch
  00857	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0085e	83 f8 01	 cmp	 eax, 1
  00861	75 60		 jne	 SHORT $LN87@Got_Teamch
  00863	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0086a	74 57		 je	 SHORT $LN87@Got_Teamch
$LN83@Got_Teamch:

; 2895 : 	{
; 2896 : 		if (NetPacket.packet.newteam)

  0086c	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  0086f	c1 e8 05	 shr	 eax, 5
  00872	83 e0 1f	 and	 eax, 31			; 0000001fH
  00875	74 4c		 je	 SHORT $LN87@Got_Teamch

; 2897 : 		{
; 2898 : 			if (playernum == consoleplayer) //CTF and Team Match colors.

  00877	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0087a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00880	75 1c		 jne	 SHORT $LN85@Got_Teamch

; 2899 : 				CV_SetValue(&cv_playercolor, NetPacket.packet.newteam + 5);

  00882	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  00885	c1 e8 05	 shr	 eax, 5
  00888	83 e0 1f	 and	 eax, 31			; 0000001fH
  0088b	83 c0 05	 add	 eax, 5
  0088e	50		 push	 eax
  0088f	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  00894	e8 00 00 00 00	 call	 _CV_SetValue
  00899	83 c4 08	 add	 esp, 8
  0089c	eb 25		 jmp	 SHORT $LN87@Got_Teamch
$LN85@Got_Teamch:

; 2900 : 			else if (playernum == secondarydisplayplayer)

  0089e	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  008a1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  008a7	75 1a		 jne	 SHORT $LN87@Got_Teamch

; 2901 : 				CV_SetValue(&cv_playercolor2, NetPacket.packet.newteam + 5);

  008a9	8b 45 fc	 mov	 eax, DWORD PTR _NetPacket$[ebp]
  008ac	c1 e8 05	 shr	 eax, 5
  008af	83 e0 1f	 and	 eax, 31			; 0000001fH
  008b2	83 c0 05	 add	 eax, 5
  008b5	50		 push	 eax
  008b6	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  008bb	e8 00 00 00 00	 call	 _CV_SetValue
  008c0	83 c4 08	 add	 esp, 8
$LN87@Got_Teamch:

; 2902 : 		}
; 2903 : 	}
; 2904 : 
; 2905 : 	// Clear player score and rings if a spectator.
; 2906 : 	if (players[playernum].spectator)

  008c3	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008ca	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  008d1	85 c9		 test	 ecx, ecx
  008d3	74 49		 je	 SHORT $LN89@Got_Teamch

; 2907 : 	{
; 2908 : 		players[playernum].score = 0;

  008d5	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008dc	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+188], 0

; 2909 : 		players[playernum].health = 1;

  008e6	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008ed	c7 80 28 00 00
	00 01 00 00 00	 mov	 DWORD PTR _players[eax+40], 1

; 2910 : 		if (players[playernum].mo)

  008f7	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  008fe	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR _players[eax], 0
  00905	74 17		 je	 SHORT $LN89@Got_Teamch

; 2911 : 			players[playernum].mo->health = 1;

  00907	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0090e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _players[eax]
  00914	c7 81 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+140], 1
$LN89@Got_Teamch:

; 2912 : 	}
; 2913 : 
; 2914 : 	// In tag, check to see if you still have a game.
; 2915 : 	if (gametype == GT_TAG)

  0091e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00925	83 f8 03	 cmp	 eax, 3
  00928	75 06		 jne	 SHORT $LN90@Got_Teamch

; 2916 : 		P_CheckSurvivors();

  0092a	e8 00 00 00 00	 call	 _P_CheckSurvivors
  0092f	90		 npad	 1
$LN90@Got_Teamch:

; 2917 : }

  00930	5f		 pop	 edi
  00931	5e		 pop	 esi
  00932	5b		 pop	 ebx
  00933	8b e5		 mov	 esp, ebp
  00935	5d		 pop	 ebp
  00936	c3		 ret	 0
_Got_Teamchange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_RunSOCcmd
_TEXT	SEGMENT
tv90 = -344						; size = 4
$T1 = -340						; size = 4
_tmp_i$2 = -272						; size = 4
_buf$3 = -268						; size = 2
_ncs$ = -264						; size = 4
_filename$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_RunSOCcmd PROC					; COMDAT

; 3160 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3161 : 	char filename[256];
; 3162 : 	filestatus_t ncs = FS_NOTFOUND;

  00016	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ncs$[ebp], 0

; 3163 : 
; 3164 : 	if (playernum != serverplayer && playernum != adminplayer)

  00020	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00023	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00029	74 72		 je	 SHORT $LN5@Got_RunSOC
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0002e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00034	74 67		 je	 SHORT $LN5@Got_RunSOC

; 3165 : 	{
; 3166 : 		CONS_Printf(text[ILLEGALRUNSOCCMD], player_names[playernum]);

  00036	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  0003a	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0003f	50		 push	 eax
  00040	b9 04 00 00 00	 mov	 ecx, 4
  00045	69 d1 9d 00 00
	00		 imul	 edx, ecx, 157
  0004b	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _CONS_Printf
  00057	83 c4 08	 add	 esp, 8

; 3167 : 		if (server)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00061	74 35		 je	 SHORT $LN6@Got_RunSOC

; 3168 : 		{
; 3169 : 			XBOXSTATIC UINT8 buf[2];
; 3170 : 
; 3171 : 			buf[0] = (UINT8)playernum;

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	6b c8 00	 imul	 ecx, eax, 0
  0006b	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  0006e	88 94 0d f4 fe
	ff ff		 mov	 BYTE PTR _buf$3[ebp+ecx], dl

; 3172 : 			buf[1] = KICK_MSG_CON_FAIL;

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	c1 e0 00	 shl	 eax, 0
  0007d	c6 84 05 f4 fe
	ff ff 02	 mov	 BYTE PTR _buf$3[ebp+eax], 2

; 3173 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00085	6a 02		 push	 2
  00087	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  0008d	50		 push	 eax
  0008e	6a 03		 push	 3
  00090	e8 00 00 00 00	 call	 _SendNetXCmd
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Got_RunSOC:

; 3174 : 		}
; 3175 : 		return;

  00098	e9 87 01 00 00	 jmp	 $LN1@Got_RunSOC
$LN5@Got_RunSOC:

; 3176 : 	}
; 3177 : 
; 3178 : 	READSTRINGN(*cp, filename, 255);

  0009d	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmp_i$2[ebp], 0
  000a7	eb 0f		 jmp	 SHORT $LN4@Got_RunSOC
$LN2@Got_RunSOC:
  000a9	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _tmp_i$2[ebp], eax
$LN4@Got_RunSOC:
  000b8	81 bd f0 fe ff
	ff ff 00 00 00	 cmp	 DWORD PTR _tmp_i$2[ebp], 255 ; 000000ffH
  000c2	73 40		 jae	 SHORT $LN3@Got_RunSOC
  000c4	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _tmp_i$2[ebp]
  000cf	8a 01		 mov	 al, BYTE PTR [ecx]
  000d1	88 84 15 fc fe
	ff ff		 mov	 BYTE PTR _filename$[ebp+edx], al
  000d8	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _tmp_i$2[ebp]
  000de	0f be 94 0d fc
	fe ff ff	 movsx	 edx, BYTE PTR _filename$[ebp+ecx]
  000e6	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv90[ebp], edx
  000ec	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	83 c1 01	 add	 ecx, 1
  000f4	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000f7	89 0a		 mov	 DWORD PTR [edx], ecx
  000f9	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR tv90[ebp], 0
  00100	74 02		 je	 SHORT $LN3@Got_RunSOC
  00102	eb a5		 jmp	 SHORT $LN2@Got_RunSOC
$LN3@Got_RunSOC:
  00104	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  0010a	89 85 ac fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00110	81 bd ac fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  0011a	73 02		 jae	 SHORT $LN12@Got_RunSOC
  0011c	eb 06		 jmp	 SHORT $LN13@Got_RunSOC
$LN12@Got_RunSOC:
  0011e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  00123	90		 npad	 1
$LN13@Got_RunSOC:
  00124	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0012a	c6 84 0d fc fe
	ff ff 00	 mov	 BYTE PTR _filename$[ebp+ecx], 0

; 3179 : 
; 3180 : 	// Maybe add md5 support?
; 3181 : 	if (strstr(filename, ".soc") != NULL)

  00132	68 00 00 00 00	 push	 OFFSET ??_C@_04DDPNCCIM@?4soc@
  00137	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _strstr
  00143	83 c4 08	 add	 esp, 8
  00146	85 c0		 test	 eax, eax
  00148	0f 84 bd 00 00
	00		 je	 $LN8@Got_RunSOC

; 3182 : 	{
; 3183 : 		ncs = findfile(filename,NULL,true);

  0014e	6a 01		 push	 1
  00150	6a 00		 push	 0
  00152	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 _findfile
  0015e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00161	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _ncs$[ebp], eax

; 3184 : 
; 3185 : 		if (ncs != FS_FOUND)

  00167	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _ncs$[ebp], 1
  0016e	0f 84 97 00 00
	00		 je	 $LN8@Got_RunSOC

; 3186 : 		{
; 3187 : 			Command_ExitGame_f();

  00174	e8 00 00 00 00	 call	 _Command_ExitGame_f
  00179	90		 npad	 1

; 3188 : 			if (ncs == FS_NOTFOUND)

  0017a	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _ncs$[ebp], 0
  00181	75 44		 jne	 SHORT $LN9@Got_RunSOC

; 3189 : 			{
; 3190 : 				CONS_Printf(text[CLIENT_NEEDFILE], filename);

  00183	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00189	50		 push	 eax
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	69 d1 f7 00 00
	00		 imul	 edx, ecx, 247
  00195	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _CONS_Printf
  001a1	83 c4 08	 add	 esp, 8

; 3191 : 				M_StartMessage(va("The server added a file\n(%s)\nthat you do not have.\n\nPress ESC\n",filename), NULL, MM_NOTHING);

  001a4	6a 00		 push	 0
  001a6	6a 00		 push	 0
  001a8	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001ae	50		 push	 eax
  001af	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@DAAIOMIP@The?5server?5added?5a?5file?6?$CI?$CFs?$CJ?6th@
  001b4	e8 00 00 00 00	 call	 _va
  001b9	83 c4 08	 add	 esp, 8
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 _M_StartMessage
  001c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3192 : 			}

  001c5	eb 42		 jmp	 SHORT $LN10@Got_RunSOC
$LN9@Got_RunSOC:

; 3193 : 			else
; 3194 : 			{
; 3195 : 				CONS_Printf(text[SOC_NOTFOUND], filename);

  001c7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001cd	50		 push	 eax
  001ce	b9 04 00 00 00	 mov	 ecx, 4
  001d3	69 d1 9e 00 00
	00		 imul	 edx, ecx, 158
  001d9	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _CONS_Printf
  001e5	83 c4 08	 add	 esp, 8

; 3196 : 				M_StartMessage(va("Unknown error trying to load a file\nthat the server added\n(%s).\n\nPress ESC\n",filename), NULL, MM_NOTHING);

  001e8	6a 00		 push	 0
  001ea	6a 00		 push	 0
  001ec	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001f2	50		 push	 eax
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GINKBHOL@Unknown?5error?5trying?5to?5load?5a?5@
  001f8	e8 00 00 00 00	 call	 _va
  001fd	83 c4 08	 add	 esp, 8
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _M_StartMessage
  00206	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@Got_RunSOC:

; 3197 : 			}
; 3198 : 			return;

  00209	eb 19		 jmp	 SHORT $LN1@Got_RunSOC
$LN8@Got_RunSOC:

; 3199 : 		}
; 3200 : 	}
; 3201 : 
; 3202 : 	P_RunSOC(filename);

  0020b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 _P_RunSOC
  00217	83 c4 04	 add	 esp, 4

; 3203 : 	modifiedgame = true;

  0021a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1
$LN1@Got_RunSOC:

; 3204 : }

  00224	5f		 pop	 edi
  00225	5e		 pop	 esi
  00226	5b		 pop	 ebx
  00227	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022a	33 cd		 xor	 ecx, ebp
  0022c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00231	8b e5		 mov	 esp, ebp
  00233	5d		 pop	 ebp
  00234	c3		 ret	 0
_Got_RunSOCcmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_PizzaOrder
_TEXT	SEGMENT
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_PizzaOrder PROC					; COMDAT

; 1610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1611 : 	cp = NULL;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _cp$[ebp], 0

; 1612 : 	CONS_Printf(text[ORDEREDPIZZA], player_names[playernum]);

  00010	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00014	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00019	50		 push	 eax
  0001a	b9 04 00 00 00	 mov	 ecx, 4
  0001f	6b d1 5d	 imul	 edx, ecx, 93
  00022	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _CONS_Printf
  0002e	83 c4 08	 add	 esp, 8

; 1613 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_Got_PizzaOrder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_RandomSeed
_TEXT	SEGMENT
_seed$ = -1						; size = 1
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_RandomSeed PROC					; COMDAT

; 2311 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2312 : 	UINT8 seed;
; 2313 : 
; 2314 : 	seed = READUINT8(*cp);

  00009	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00010	88 55 ff	 mov	 BYTE PTR _seed$[ebp], dl
  00013	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	83 c1 01	 add	 ecx, 1
  0001b	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  0001e	89 0a		 mov	 DWORD PTR [edx], ecx

; 2315 : 	if (playernum != serverplayer) // it's not from the server, wtf?

  00020	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00023	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00029	74 02		 je	 SHORT $LN2@Got_Random

; 2316 : 		return;

  0002b	eb 0d		 jmp	 SHORT $LN1@Got_Random
$LN2@Got_Random:

; 2317 : 
; 2318 : 	P_SetRandIndex(seed);

  0002d	0f b6 45 ff	 movzx	 eax, BYTE PTR _seed$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _P_SetRandIndex
  00037	83 c4 04	 add	 esp, 4
$LN1@Got_Random:

; 2319 : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_Got_RandomSeed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_Pause
_TEXT	SEGMENT
_buf$1 = -12						; size = 2
_playername$ = -8					; size = 4
_dedicatedpause$ = -1					; size = 1
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_Pause PROC						; COMDAT

; 2253 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2254 : 	UINT8 dedicatedpause = false;

  00009	c6 45 ff 00	 mov	 BYTE PTR _dedicatedpause$[ebp], 0

; 2255 : 	const char *playername;
; 2256 : 
; 2257 : 	if (netgame && !cv_pause.value && playernum != serverplayer && playernum != adminplayer)

  0000d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00014	74 7a		 je	 SHORT $LN2@Got_Pause
  00016	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pause+20, 0
  0001d	75 71		 jne	 SHORT $LN2@Got_Pause
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00022	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00028	74 66		 je	 SHORT $LN2@Got_Pause
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0002d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00033	74 5b		 je	 SHORT $LN2@Got_Pause

; 2258 : 	{
; 2259 : 		CONS_Printf(text[ILLEGALPAUSECMD], player_names[playernum]);

  00035	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00039	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0003e	50		 push	 eax
  0003f	b9 04 00 00 00	 mov	 ecx, 4
  00044	6b d1 73	 imul	 edx, ecx, 115
  00047	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _CONS_Printf
  00053	83 c4 08	 add	 esp, 8

; 2260 : 		if (server)

  00056	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0005d	74 2c		 je	 SHORT $LN3@Got_Pause

; 2261 : 		{
; 2262 : 			XBOXSTATIC UINT8 buf[2];
; 2263 : 
; 2264 : 			buf[0] = (UINT8)playernum;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	6b c8 00	 imul	 ecx, eax, 0
  00067	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  0006a	88 54 0d f4	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 2265 : 			buf[1] = KICK_MSG_CON_FAIL;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	c1 e0 00	 shl	 eax, 0
  00076	c6 44 05 f4 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 2266 : 			SendNetXCmd(XD_KICK, &buf, 2);

  0007b	6a 02		 push	 2
  0007d	8d 45 f4	 lea	 eax, DWORD PTR _buf$1[ebp]
  00080	50		 push	 eax
  00081	6a 03		 push	 3
  00083	e8 00 00 00 00	 call	 _SendNetXCmd
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Got_Pause:

; 2267 : 		}
; 2268 : 		return;

  0008b	e9 d2 00 00 00	 jmp	 $LN11@Got_Pause
$LN2@Got_Pause:

; 2269 : 	}
; 2270 : 
; 2271 : 	paused = READUINT8(*cp);

  00090	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	8a 11		 mov	 dl, BYTE PTR [ecx]
  00097	88 15 00 00 00
	00		 mov	 BYTE PTR _paused, dl
  0009d	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	83 c1 01	 add	 ecx, 1
  000a5	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000a8	89 0a		 mov	 DWORD PTR [edx], ecx

; 2272 : 	dedicatedpause = READUINT8(*cp);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8a 11		 mov	 dl, BYTE PTR [ecx]
  000b1	88 55 ff	 mov	 BYTE PTR _dedicatedpause$[ebp], dl
  000b4	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	83 c1 01	 add	 ecx, 1
  000bc	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000bf	89 0a		 mov	 DWORD PTR [edx], ecx

; 2273 : 
; 2274 : 	if (!demoplayback)

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  000c8	0f 85 94 00 00
	00		 jne	 $LN11@Got_Pause

; 2275 : 	{
; 2276 : 		if (netgame)

  000ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000d5	74 60		 je	 SHORT $LN9@Got_Pause

; 2277 : 		{
; 2278 : 			if (dedicatedpause)

  000d7	0f b6 45 ff	 movzx	 eax, BYTE PTR _dedicatedpause$[ebp]
  000db	85 c0		 test	 eax, eax
  000dd	74 09		 je	 SHORT $LN6@Got_Pause

; 2279 : 				playername = "SERVER";

  000df	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _playername$[ebp], OFFSET ??_C@_06HNFCPEFM@SERVER@
  000e6	eb 0c		 jmp	 SHORT $LN7@Got_Pause
$LN6@Got_Pause:

; 2280 : 			else
; 2281 : 				playername = player_names[playernum];

  000e8	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  000ec	05 00 00 00 00	 add	 eax, OFFSET _player_names
  000f1	89 45 f8	 mov	 DWORD PTR _playername$[ebp], eax
$LN7@Got_Pause:

; 2282 : 
; 2283 : 			if (paused)

  000f4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  000fb	85 c0		 test	 eax, eax
  000fd	74 1d		 je	 SHORT $LN8@Got_Pause

; 2284 : 				CONS_Printf(text[GAME_PAUSED],playername);

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _playername$[ebp]
  00102	50		 push	 eax
  00103	b9 04 00 00 00	 mov	 ecx, 4
  00108	6b d1 74	 imul	 edx, ecx, 116
  0010b	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _CONS_Printf
  00117	83 c4 08	 add	 esp, 8
  0011a	eb 1b		 jmp	 SHORT $LN9@Got_Pause
$LN8@Got_Pause:

; 2285 : 			else
; 2286 : 				CONS_Printf(text[GAME_UNPAUSED],playername);

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _playername$[ebp]
  0011f	50		 push	 eax
  00120	b9 04 00 00 00	 mov	 ecx, 4
  00125	6b d1 75	 imul	 edx, ecx, 117
  00128	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 _CONS_Printf
  00134	83 c4 08	 add	 esp, 8
$LN9@Got_Pause:

; 2287 : 		}
; 2288 : 
; 2289 : 		if (paused)

  00137	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _paused
  0013e	85 c0		 test	 eax, eax
  00140	74 1a		 je	 SHORT $LN10@Got_Pause

; 2290 : 		{
; 2291 : 			if (!menuactive || netgame)

  00142	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _menuactive, 0
  00149	74 09		 je	 SHORT $LN13@Got_Pause
  0014b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00152	74 06		 je	 SHORT $LN12@Got_Pause
$LN13@Got_Pause:

; 2292 : 				S_PauseSound();

  00154	e8 00 00 00 00	 call	 _S_PauseSound
  00159	90		 npad	 1
$LN12@Got_Pause:

; 2293 : 		}

  0015a	eb 06		 jmp	 SHORT $LN11@Got_Pause
$LN10@Got_Pause:

; 2294 : 		else
; 2295 : 			S_ResumeSound();

  0015c	e8 00 00 00 00	 call	 _S_ResumeSound
  00161	90		 npad	 1
$LN11@Got_Pause:

; 2296 : 	}
; 2297 : }

  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx
  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
_Got_Pause ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_Addfilecmd
_TEXT	SEGMENT
tv74 = -364						; size = 4
$T1 = -360						; size = 4
_buf$2 = -292						; size = 2
_tmp_i$3 = -288						; size = 4
_md5sum$ = -284						; size = 17
_ncs$ = -264						; size = 4
_filename$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_Addfilecmd PROC					; COMDAT

; 3405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3406 : 	char filename[256];
; 3407 : 	filestatus_t ncs = FS_NOTFOUND;

  00016	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ncs$[ebp], 0

; 3408 : 	UINT8 md5sum[16+1];
; 3409 : 
; 3410 : 	READSTRINGN(*cp, filename, 255);

  00020	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmp_i$3[ebp], 0
  0002a	eb 0f		 jmp	 SHORT $LN4@Got_Addfil
$LN2@Got_Addfil:
  0002c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _tmp_i$3[ebp], eax
$LN4@Got_Addfil:
  0003b	81 bd e0 fe ff
	ff ff 00 00 00	 cmp	 DWORD PTR _tmp_i$3[ebp], 255 ; 000000ffH
  00045	73 40		 jae	 SHORT $LN3@Got_Addfil
  00047	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _tmp_i$3[ebp]
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	88 84 15 fc fe
	ff ff		 mov	 BYTE PTR _filename$[ebp+edx], al
  0005b	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _tmp_i$3[ebp]
  00061	0f be 94 0d fc
	fe ff ff	 movsx	 edx, BYTE PTR _filename$[ebp+ecx]
  00069	89 95 94 fe ff
	ff		 mov	 DWORD PTR tv74[ebp], edx
  0006f	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 c1 01	 add	 ecx, 1
  00077	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  0007a	89 0a		 mov	 DWORD PTR [edx], ecx
  0007c	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR tv74[ebp], 0
  00083	74 02		 je	 SHORT $LN3@Got_Addfil
  00085	eb a5		 jmp	 SHORT $LN2@Got_Addfil
$LN3@Got_Addfil:
  00087	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$3[ebp]
  0008d	89 85 98 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00093	81 bd 98 fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  0009d	73 02		 jae	 SHORT $LN13@Got_Addfil
  0009f	eb 06		 jmp	 SHORT $LN14@Got_Addfil
$LN13@Got_Addfil:
  000a1	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000a6	90		 npad	 1
$LN14@Got_Addfil:
  000a7	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  000ad	c6 84 0d fc fe
	ff ff 00	 mov	 BYTE PTR _filename$[ebp+ecx], 0

; 3411 : 	(void)READUINT8(*cp);

  000b5	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	83 c1 01	 add	 ecx, 1
  000bd	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000c0	89 0a		 mov	 DWORD PTR [edx], ecx

; 3412 : 	READMEM(*cp, md5sum, 17);

  000c2	6a 11		 push	 17			; 00000011H
  000c4	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	51		 push	 ecx
  000ca	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _md5sum$[ebp]
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 _memcpy
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000de	83 c1 11	 add	 ecx, 17			; 00000011H
  000e1	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000e4	89 0a		 mov	 DWORD PTR [edx], ecx

; 3413 : 
; 3414 : 	if (playernum != serverplayer)

  000e6	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000e9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  000ef	74 67		 je	 SHORT $LN5@Got_Addfil

; 3415 : 	{
; 3416 : 		CONS_Printf(text[ILLEGALADDFILECMD], player_names[playernum]);

  000f1	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  000f5	05 00 00 00 00	 add	 eax, OFFSET _player_names
  000fa	50		 push	 eax
  000fb	b9 04 00 00 00	 mov	 ecx, 4
  00100	69 d1 a2 00 00
	00		 imul	 edx, ecx, 162
  00106	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _CONS_Printf
  00112	83 c4 08	 add	 esp, 8

; 3417 : 		if (server)

  00115	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0011c	74 35		 je	 SHORT $LN6@Got_Addfil

; 3418 : 		{
; 3419 : 			XBOXSTATIC UINT8 buf[2];
; 3420 : 
; 3421 : 			buf[0] = (UINT8)playernum;

  0011e	b8 01 00 00 00	 mov	 eax, 1
  00123	6b c8 00	 imul	 ecx, eax, 0
  00126	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00129	88 94 0d dc fe
	ff ff		 mov	 BYTE PTR _buf$2[ebp+ecx], dl

; 3422 : 			buf[1] = KICK_MSG_CON_FAIL;

  00130	b8 01 00 00 00	 mov	 eax, 1
  00135	c1 e0 00	 shl	 eax, 0
  00138	c6 84 05 dc fe
	ff ff 02	 mov	 BYTE PTR _buf$2[ebp+eax], 2

; 3423 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00140	6a 02		 push	 2
  00142	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _buf$2[ebp]
  00148	50		 push	 eax
  00149	6a 03		 push	 3
  0014b	e8 00 00 00 00	 call	 _SendNetXCmd
  00150	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Got_Addfil:

; 3424 : 		}
; 3425 : 		return;

  00153	e9 2d 01 00 00	 jmp	 $LN1@Got_Addfil
$LN5@Got_Addfil:

; 3426 : 	}
; 3427 : 
; 3428 : 	ncs = findfile(filename,md5sum,true);

  00158	6a 01		 push	 1
  0015a	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _md5sum$[ebp]
  00160	50		 push	 eax
  00161	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  00167	51		 push	 ecx
  00168	e8 00 00 00 00	 call	 _findfile
  0016d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00170	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _ncs$[ebp], eax

; 3429 : 
; 3430 : 	if (ncs != FS_FOUND)

  00176	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _ncs$[ebp], 1
  0017d	0f 84 e7 00 00
	00		 je	 $LN7@Got_Addfil

; 3431 : 	{
; 3432 : 		Command_ExitGame_f();

  00183	e8 00 00 00 00	 call	 _Command_ExitGame_f
  00188	90		 npad	 1

; 3433 : 		if (ncs == FS_NOTFOUND)

  00189	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _ncs$[ebp], 0
  00190	75 47		 jne	 SHORT $LN8@Got_Addfil

; 3434 : 		{
; 3435 : 			CONS_Printf(text[CLIENT_NEEDFILE], filename);

  00192	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00198	50		 push	 eax
  00199	b9 04 00 00 00	 mov	 ecx, 4
  0019e	69 d1 f7 00 00
	00		 imul	 edx, ecx, 247
  001a4	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _CONS_Printf
  001b0	83 c4 08	 add	 esp, 8

; 3436 : 			M_StartMessage(va("The server added a file \n(%s)\nthat you do not have.\n\nPress ESC\n",filename), NULL, MM_NOTHING);

  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001bd	50		 push	 eax
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@GPFKMICG@The?5server?5added?5a?5file?5?6?$CI?$CFs?$CJ?6t@
  001c3	e8 00 00 00 00	 call	 _va
  001c8	83 c4 08	 add	 esp, 8
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 _M_StartMessage
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3437 : 		}

  001d4	e9 8f 00 00 00	 jmp	 $LN11@Got_Addfil
$LN8@Got_Addfil:

; 3438 : 		else if (ncs == FS_MD5SUMBAD)

  001d9	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _ncs$[ebp], 5
  001e0	75 44		 jne	 SHORT $LN10@Got_Addfil

; 3439 : 		{
; 3440 : 			CONS_Printf(text[CHECKSUM_MISMATCH], filename);

  001e2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  001e8	50		 push	 eax
  001e9	b9 04 00 00 00	 mov	 ecx, 4
  001ee	69 d1 a4 00 00
	00		 imul	 edx, ecx, 164
  001f4	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 _CONS_Printf
  00200	83 c4 08	 add	 esp, 8

; 3441 : 			M_StartMessage(va("Checksum mismatch while loading \n%s.\nThe server seems to have a\ndifferent version of this file.\n\nPress ESC\n",filename), NULL, MM_NOTHING);

  00203	6a 00		 push	 0
  00205	6a 00		 push	 0
  00207	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0020d	50		 push	 eax
  0020e	68 00 00 00 00	 push	 OFFSET ??_C@_0GM@HBOPCHNP@Checksum?5mismatch?5while?5loading@
  00213	e8 00 00 00 00	 call	 _va
  00218	83 c4 08	 add	 esp, 8
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 _M_StartMessage
  00221	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3442 : 		}

  00224	eb 42		 jmp	 SHORT $LN11@Got_Addfil
$LN10@Got_Addfil:

; 3443 : 		else
; 3444 : 		{
; 3445 : 			CONS_Printf(text[WAD_NOTFOUND], filename);

  00226	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0022c	50		 push	 eax
  0022d	b9 04 00 00 00	 mov	 ecx, 4
  00232	69 d1 a5 00 00
	00		 imul	 edx, ecx, 165
  00238	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0023e	50		 push	 eax
  0023f	e8 00 00 00 00	 call	 _CONS_Printf
  00244	83 c4 08	 add	 esp, 8

; 3446 : 			M_StartMessage(va("Unknown error trying to load a file\nthat the server added \n(%s).\n\nPress ESC\n",filename), NULL, MM_NOTHING);

  00247	6a 00		 push	 0
  00249	6a 00		 push	 0
  0024b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00251	50		 push	 eax
  00252	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@CHMPEMGG@Unknown?5error?5trying?5to?5load?5a?5@
  00257	e8 00 00 00 00	 call	 _va
  0025c	83 c4 08	 add	 esp, 8
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 _M_StartMessage
  00265	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@Got_Addfil:

; 3447 : 		}
; 3448 : 		return;

  00268	eb 1b		 jmp	 SHORT $LN1@Got_Addfil
$LN7@Got_Addfil:

; 3449 : 	}
; 3450 : 
; 3451 : 	P_AddWadFile(filename, NULL);

  0026a	6a 00		 push	 0
  0026c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00272	50		 push	 eax
  00273	e8 00 00 00 00	 call	 _P_AddWadFile
  00278	83 c4 08	 add	 esp, 8

; 3452 : 	modifiedgame = true;

  0027b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1
$LN1@Got_Addfil:

; 3453 : }

  00285	5f		 pop	 edi
  00286	5e		 pop	 esi
  00287	5b		 pop	 ebx
  00288	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0028b	33 cd		 xor	 ecx, ebp
  0028d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00292	8b e5		 mov	 esp, ebp
  00294	5d		 pop	 ebp
  00295	c3		 ret	 0
_Got_Addfilecmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_RequestAddfilecmd
_TEXT	SEGMENT
tv74 = -692						; size = 4
$T1 = -688						; size = 4
_message$2 = -556					; size = 256
_buf$3 = -300						; size = 2
_tmp_i$4 = -296						; size = 4
_i$ = -292						; size = 4
_kick$ = -288						; size = 4
_md5sum$ = -284						; size = 17
_ncs$ = -264						; size = 4
_filename$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_RequestAddfilecmd PROC				; COMDAT

; 3322 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 02 00
	00		 sub	 esp, 692		; 000002b4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 3323 : 	char filename[256];
; 3324 : 	filestatus_t ncs = FS_NOTFOUND;

  00016	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ncs$[ebp], 0

; 3325 : 	UINT8 md5sum[16+1];
; 3326 : 	boolean kick = false;

  00020	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kick$[ebp], 0

; 3327 : 	INT32 i;
; 3328 : 
; 3329 : 	READSTRINGN(*cp, filename, 255);

  0002a	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmp_i$4[ebp], 0
  00034	eb 0f		 jmp	 SHORT $LN4@Got_Reques
$LN2@Got_Reques:
  00036	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$4[ebp]
  0003c	83 c0 01	 add	 eax, 1
  0003f	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _tmp_i$4[ebp], eax
$LN4@Got_Reques:
  00045	81 bd d8 fe ff
	ff ff 00 00 00	 cmp	 DWORD PTR _tmp_i$4[ebp], 255 ; 000000ffH
  0004f	73 40		 jae	 SHORT $LN3@Got_Reques
  00051	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _tmp_i$4[ebp]
  0005c	8a 01		 mov	 al, BYTE PTR [ecx]
  0005e	88 84 15 fc fe
	ff ff		 mov	 BYTE PTR _filename$[ebp+edx], al
  00065	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _tmp_i$4[ebp]
  0006b	0f be 94 0d fc
	fe ff ff	 movsx	 edx, BYTE PTR _filename$[ebp+ecx]
  00073	89 95 4c fd ff
	ff		 mov	 DWORD PTR tv74[ebp], edx
  00079	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	83 c1 01	 add	 ecx, 1
  00081	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00084	89 0a		 mov	 DWORD PTR [edx], ecx
  00086	83 bd 4c fd ff
	ff 00		 cmp	 DWORD PTR tv74[ebp], 0
  0008d	74 02		 je	 SHORT $LN3@Got_Reques
  0008f	eb a5		 jmp	 SHORT $LN2@Got_Reques
$LN3@Got_Reques:
  00091	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _tmp_i$4[ebp]
  00097	89 85 50 fd ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0009d	81 bd 50 fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  000a7	73 02		 jae	 SHORT $LN21@Got_Reques
  000a9	eb 06		 jmp	 SHORT $LN22@Got_Reques
$LN21@Got_Reques:
  000ab	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000b0	90		 npad	 1
$LN22@Got_Reques:
  000b1	8b 8d 50 fd ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  000b7	c6 84 0d fc fe
	ff ff 00	 mov	 BYTE PTR _filename$[ebp+ecx], 0

; 3330 : 	(void)READUINT8(*cp);

  000bf	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c4	83 c1 01	 add	 ecx, 1
  000c7	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000ca	89 0a		 mov	 DWORD PTR [edx], ecx

; 3331 : 	READMEM(*cp, md5sum, 17);

  000cc	6a 11		 push	 17			; 00000011H
  000ce	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	51		 push	 ecx
  000d4	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _md5sum$[ebp]
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 _memcpy
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	83 c1 11	 add	 ecx, 17			; 00000011H
  000eb	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000ee	89 0a		 mov	 DWORD PTR [edx], ecx

; 3332 : 
; 3333 : 	// Only the server processes this message.
; 3334 : 	if (!server)

  000f0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000f7	75 05		 jne	 SHORT $LN8@Got_Reques

; 3335 : 		return;

  000f9	e9 d6 01 00 00	 jmp	 $LN1@Got_Reques
$LN8@Got_Reques:

; 3336 : 
; 3337 : 	// Disallow non-printing characters and semicolons.
; 3338 : 	for (i = 0; filename[i] != '\0'; i++)

  000fe	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00108	eb 0f		 jmp	 SHORT $LN7@Got_Reques
$LN5@Got_Reques:
  0010a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00110	83 c0 01	 add	 eax, 1
  00113	89 85 dc fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$LN7@Got_Reques:
  00119	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0011f	0f be 8c 05 fc
	fe ff ff	 movsx	 ecx, BYTE PTR _filename$[ebp+eax]
  00127	85 c9		 test	 ecx, ecx
  00129	74 3a		 je	 SHORT $LN6@Got_Reques

; 3339 : 		if (!isprint(filename[i]) || filename[i] == ';')

  0012b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00131	0f be 8c 05 fc
	fe ff ff	 movsx	 ecx, BYTE PTR _filename$[ebp+eax]
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 _isprint
  0013f	83 c4 04	 add	 esp, 4
  00142	85 c0		 test	 eax, eax
  00144	74 13		 je	 SHORT $LN10@Got_Reques
  00146	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0014c	0f be 8c 05 fc
	fe ff ff	 movsx	 ecx, BYTE PTR _filename$[ebp+eax]
  00154	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  00157	75 0a		 jne	 SHORT $LN9@Got_Reques
$LN10@Got_Reques:

; 3340 : 			kick = true;

  00159	c7 85 e0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _kick$[ebp], 1
$LN9@Got_Reques:
  00163	eb a5		 jmp	 SHORT $LN5@Got_Reques
$LN6@Got_Reques:

; 3341 : 
; 3342 : 	if ((playernum != serverplayer && playernum != adminplayer) || kick)

  00165	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00168	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  0016e	74 0b		 je	 SHORT $LN13@Got_Reques
  00170	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00173	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00179	75 09		 jne	 SHORT $LN12@Got_Reques
$LN13@Got_Reques:
  0017b	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _kick$[ebp], 0
  00182	74 5e		 je	 SHORT $LN11@Got_Reques
$LN12@Got_Reques:

; 3343 : 	{
; 3344 : 		XBOXSTATIC UINT8 buf[2];
; 3345 : 
; 3346 : 		CONS_Printf(text[ILLEGALADDFILECMD], player_names[playernum]);

  00184	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00188	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0018d	50		 push	 eax
  0018e	b9 04 00 00 00	 mov	 ecx, 4
  00193	69 d1 a2 00 00
	00		 imul	 edx, ecx, 162
  00199	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _CONS_Printf
  001a5	83 c4 08	 add	 esp, 8

; 3347 : 
; 3348 : 		buf[0] = (UINT8)playernum;

  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	6b c8 00	 imul	 ecx, eax, 0
  001b0	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  001b3	88 94 0d d4 fe
	ff ff		 mov	 BYTE PTR _buf$3[ebp+ecx], dl

; 3349 : 		buf[1] = KICK_MSG_CON_FAIL;

  001ba	b8 01 00 00 00	 mov	 eax, 1
  001bf	c1 e0 00	 shl	 eax, 0
  001c2	c6 84 05 d4 fe
	ff ff 02	 mov	 BYTE PTR _buf$3[ebp+eax], 2

; 3350 : 		SendNetXCmd(XD_KICK, &buf, 2);

  001ca	6a 02		 push	 2
  001cc	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  001d2	50		 push	 eax
  001d3	6a 03		 push	 3
  001d5	e8 00 00 00 00	 call	 _SendNetXCmd
  001da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3351 : 		return;

  001dd	e9 f2 00 00 00	 jmp	 $LN1@Got_Reques
$LN11@Got_Reques:

; 3352 : 	}
; 3353 : 
; 3354 : 	ncs = findfile(filename,md5sum,true);

  001e2	6a 01		 push	 1
  001e4	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _md5sum$[ebp]
  001ea	50		 push	 eax
  001eb	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _filename$[ebp]
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 _findfile
  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fa	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _ncs$[ebp], eax

; 3355 : 
; 3356 : 	if (ncs != FS_FOUND)

  00200	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _ncs$[ebp], 1
  00207	0f 84 aa 00 00
	00		 je	 $LN14@Got_Reques

; 3357 : 	{
; 3358 : 		char message[256];
; 3359 : 
; 3360 : 		if (ncs == FS_NOTFOUND)

  0020d	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _ncs$[ebp], 0
  00214	75 1d		 jne	 SHORT $LN15@Got_Reques

; 3361 : 			sprintf(message, "The server doesn't have %s\n", filename);

  00216	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0021c	50		 push	 eax
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NHLGBBJO@The?5server?5doesn?8t?5have?5?$CFs?6@
  00222	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _message$2[ebp]
  00228	51		 push	 ecx
  00229	e8 00 00 00 00	 call	 _sprintf
  0022e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00231	eb 41		 jmp	 SHORT $LN18@Got_Reques
$LN15@Got_Reques:

; 3362 : 		else if (ncs == FS_MD5SUMBAD)

  00233	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _ncs$[ebp], 5
  0023a	75 1d		 jne	 SHORT $LN17@Got_Reques

; 3363 : 			sprintf(message, "Checksum mismatch on %s\n", filename);

  0023c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00242	50		 push	 eax
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ODIFBIEN@Checksum?5mismatch?5on?5?$CFs?6@
  00248	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _message$2[ebp]
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 _sprintf
  00254	83 c4 0c	 add	 esp, 12			; 0000000cH
  00257	eb 1b		 jmp	 SHORT $LN18@Got_Reques
$LN17@Got_Reques:

; 3364 : 		else
; 3365 : 			sprintf(message, "Unknown error finding wad file (%s)\n", filename);

  00259	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0025f	50		 push	 eax
  00260	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EOHHNGNJ@Unknown?5error?5finding?5wad?5file?5@
  00265	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _message$2[ebp]
  0026b	51		 push	 ecx
  0026c	e8 00 00 00 00	 call	 _sprintf
  00271	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@Got_Reques:

; 3366 : 
; 3367 : 		CONS_Printf("%s",message);

  00274	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _message$2[ebp]
  0027a	50		 push	 eax
  0027b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00280	e8 00 00 00 00	 call	 _CONS_Printf
  00285	83 c4 08	 add	 esp, 8

; 3368 : 
; 3369 : 		if (adminplayer)

  00288	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _adminplayer, 0
  0028f	74 24		 je	 SHORT $LN19@Got_Reques

; 3370 : 			COM_BufAddText(va("sayto %d %s", adminplayer, message));

  00291	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _message$2[ebp]
  00297	50		 push	 eax
  00298	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _adminplayer
  0029e	51		 push	 ecx
  0029f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IGLENAGE@sayto?5?$CFd?5?$CFs@
  002a4	e8 00 00 00 00	 call	 _va
  002a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _COM_BufAddText
  002b2	83 c4 04	 add	 esp, 4
$LN19@Got_Reques:

; 3371 : 
; 3372 : 		return;

  002b5	eb 1d		 jmp	 SHORT $LN1@Got_Reques
$LN14@Got_Reques:

; 3373 : 	}
; 3374 : 
; 3375 : 	COM_BufAddText(va("addfile %s\n", filename));

  002b7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  002bd	50		 push	 eax
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BFLONAK@addfile?5?$CFs?6@
  002c3	e8 00 00 00 00	 call	 _va
  002c8	83 c4 08	 add	 esp, 8
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 _COM_BufAddText
  002d1	83 c4 04	 add	 esp, 4
$LN1@Got_Reques:

; 3376 : }

  002d4	5f		 pop	 edi
  002d5	5e		 pop	 esi
  002d6	5b		 pop	 ebx
  002d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002da	33 cd		 xor	 ecx, ebp
  002dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e1	8b e5		 mov	 esp, ebp
  002e3	5d		 pop	 ebp
  002e4	c3		 ret	 0
_Got_RequestAddfilecmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_ExitLevelcmd
_TEXT	SEGMENT
_buf$1 = -4						; size = 2
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_ExitLevelcmd PROC					; COMDAT

; 4412 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4413 : 	cp = NULL;

  00009	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _cp$[ebp], 0

; 4414 : 
; 4415 : 	// Ignore duplicate XD_EXITLEVEL commands.
; 4416 : 	if (gameaction == ga_completed)

  00010	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gameaction, 1
  00017	75 02		 jne	 SHORT $LN2@Got_ExitLe

; 4417 : 		return;

  00019	eb 77		 jmp	 SHORT $LN1@Got_ExitLe
$LN2@Got_ExitLe:

; 4418 : 
; 4419 : 	if (playernum != serverplayer && playernum != adminplayer)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00024	74 66		 je	 SHORT $LN3@Got_ExitLe
  00026	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00029	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  0002f	74 5b		 je	 SHORT $LN3@Got_ExitLe

; 4420 : 	{
; 4421 : 		CONS_Printf(text[ILLEGALEXITLVLCMD], player_names[playernum]);

  00031	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  00035	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0003a	50		 push	 eax
  0003b	b9 04 00 00 00	 mov	 ecx, 4
  00040	69 d1 b9 00 00
	00		 imul	 edx, ecx, 185
  00046	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _CONS_Printf
  00052	83 c4 08	 add	 esp, 8

; 4422 : 		if (server)

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0005c	74 2c		 je	 SHORT $LN4@Got_ExitLe

; 4423 : 		{
; 4424 : 			XBOXSTATIC UINT8 buf[2];
; 4425 : 
; 4426 : 			buf[0] = (UINT8)playernum;

  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	6b c8 00	 imul	 ecx, eax, 0
  00066	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00069	88 54 0d fc	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 4427 : 			buf[1] = KICK_MSG_CON_FAIL;

  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	c1 e0 00	 shl	 eax, 0
  00075	c6 44 05 fc 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 4428 : 			SendNetXCmd(XD_KICK, &buf, 2);

  0007a	6a 02		 push	 2
  0007c	8d 45 fc	 lea	 eax, DWORD PTR _buf$1[ebp]
  0007f	50		 push	 eax
  00080	6a 03		 push	 3
  00082	e8 00 00 00 00	 call	 _SendNetXCmd
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Got_ExitLe:

; 4429 : 		}
; 4430 : 		return;

  0008a	eb 06		 jmp	 SHORT $LN1@Got_ExitLe
$LN3@Got_ExitLe:

; 4431 : 	}
; 4432 : 
; 4433 : 	G_ExitLevel();

  0008c	e8 00 00 00 00	 call	 _G_ExitLevel
  00091	90		 npad	 1
$LN1@Got_ExitLe:

; 4434 : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_Got_ExitLevelcmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_Mapcmd
_TEXT	SEGMENT
tv92 = -232						; size = 4
tv91 = -228						; size = 4
tv176 = -228						; size = 4
tv194 = -228						; size = 4
$T1 = -224						; size = 4
_tmp_i$2 = -156						; size = 4
_buf$3 = -152						; size = 2
_FLS$ = -146						; size = 1
_skipprecutscene$ = -145				; size = 1
_lastgametype$ = -144					; size = 4
_resetplayer$ = -140					; size = 4
_mapname$ = -136					; size = 129
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_Mapcmd PROC					; COMDAT

; 2103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2104 : 	char mapname[MAX_WADPATH+1];
; 2105 : 	INT32 resetplayer = 1, lastgametype;

  00016	c7 85 74 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _resetplayer$[ebp], 1

; 2106 : 	UINT8 skipprecutscene, FLS;
; 2107 : 
; 2108 : 	if (playernum != serverplayer && playernum != adminplayer)

  00020	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00023	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _serverplayer
  00029	74 6f		 je	 SHORT $LN5@Got_Mapcmd
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  0002e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _adminplayer
  00034	74 64		 je	 SHORT $LN5@Got_Mapcmd

; 2109 : 	{
; 2110 : 		CONS_Printf(text[ILLEGALMAPCMD], player_names[playernum]);

  00036	6b 45 0c 16	 imul	 eax, DWORD PTR _playernum$[ebp], 22
  0003a	05 00 00 00 00	 add	 eax, OFFSET _player_names
  0003f	50		 push	 eax
  00040	b9 04 00 00 00	 mov	 ecx, 4
  00045	6b d1 72	 imul	 edx, ecx, 114
  00048	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _CONS_Printf
  00054	83 c4 08	 add	 esp, 8

; 2111 : 		if (server)

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0005e	74 35		 je	 SHORT $LN6@Got_Mapcmd

; 2112 : 		{
; 2113 : 			XBOXSTATIC UINT8 buf[2];
; 2114 : 
; 2115 : 			buf[0] = (UINT8)playernum;

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	6b c8 00	 imul	 ecx, eax, 0
  00068	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  0006b	88 94 0d 68 ff
	ff ff		 mov	 BYTE PTR _buf$3[ebp+ecx], dl

; 2116 : 			buf[1] = KICK_MSG_CON_FAIL;

  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	c1 e0 00	 shl	 eax, 0
  0007a	c6 84 05 68 ff
	ff ff 02	 mov	 BYTE PTR _buf$3[ebp+eax], 2

; 2117 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00082	6a 02		 push	 2
  00084	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  0008a	50		 push	 eax
  0008b	6a 03		 push	 3
  0008d	e8 00 00 00 00	 call	 _SendNetXCmd
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Got_Mapcmd:

; 2118 : 		}
; 2119 : 		return;

  00095	e9 de 04 00 00	 jmp	 $LN38@Got_Mapcmd
$LN5@Got_Mapcmd:

; 2120 : 	}
; 2121 : 
; 2122 : 	if (chmappending)

  0009a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chmappending, 0
  000a1	74 0d		 je	 SHORT $LN7@Got_Mapcmd

; 2123 : 		chmappending--;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _chmappending
  000a8	83 e8 01	 sub	 eax, 1
  000ab	a3 00 00 00 00	 mov	 DWORD PTR _chmappending, eax
$LN7@Got_Mapcmd:

; 2124 : 
; 2125 : 	ultimatemode = READUINT8(*cp);

  000b0	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b5	8a 11		 mov	 dl, BYTE PTR [ecx]
  000b7	88 15 00 00 00
	00		 mov	 BYTE PTR _ultimatemode, dl
  000bd	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c2	83 c1 01	 add	 ecx, 1
  000c5	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000c8	89 0a		 mov	 DWORD PTR [edx], ecx

; 2126 : 
; 2127 : 	if (netgame || multiplayer)

  000ca	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000d1	75 09		 jne	 SHORT $LN9@Got_Mapcmd
  000d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000da	74 07		 je	 SHORT $LN8@Got_Mapcmd
$LN9@Got_Mapcmd:

; 2128 : 		ultimatemode = false;

  000dc	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _ultimatemode, 0
$LN8@Got_Mapcmd:

; 2129 : 
; 2130 : 	resetplayer = ((READUINT8(*cp) & 2) == 0);

  000e3	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  000eb	83 e2 02	 and	 edx, 2
  000ee	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv91[ebp], edx
  000f4	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	83 c1 01	 add	 ecx, 1
  000fc	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000ff	89 0a		 mov	 DWORD PTR [edx], ecx
  00101	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR tv91[ebp], 0
  00108	75 0c		 jne	 SHORT $LN40@Got_Mapcmd
  0010a	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv92[ebp], 1
  00114	eb 0a		 jmp	 SHORT $LN41@Got_Mapcmd
$LN40@Got_Mapcmd:
  00116	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$LN41@Got_Mapcmd:
  00120	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv92[ebp]
  00126	89 85 74 ff ff
	ff		 mov	 DWORD PTR _resetplayer$[ebp], eax

; 2131 : 
; 2132 : 	lastgametype = gametype;

  0012c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00133	89 85 70 ff ff
	ff		 mov	 DWORD PTR _lastgametype$[ebp], eax

; 2133 : 	gametype = READUINT8(*cp);

  00139	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0013c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013e	66 0f b6 11	 movzx	 dx, BYTE PTR [ecx]
  00142	66 89 15 00 00
	00 00		 mov	 WORD PTR _gametype, dx
  00149	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	83 c1 01	 add	 ecx, 1
  00151	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00154	89 0a		 mov	 DWORD PTR [edx], ecx

; 2134 : 
; 2135 : 	// Base Gametypes
; 2136 : 	if (gametype == GT_MATCH)

  00156	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0015d	83 f8 01	 cmp	 eax, 1
  00160	75 1d		 jne	 SHORT $LN10@Got_Mapcmd

; 2137 : 	{
; 2138 : 		if (server)

  00162	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00169	74 0f		 je	 SHORT $LN12@Got_Mapcmd

; 2139 : 			CV_SetValue(&cv_matchtype, 0);

  0016b	6a 00		 push	 0
  0016d	68 00 00 00 00	 push	 OFFSET _cv_matchtype
  00172	e8 00 00 00 00	 call	 _CV_SetValue
  00177	83 c4 08	 add	 esp, 8
$LN12@Got_Mapcmd:

; 2140 : 	}

  0017a	e9 e3 00 00 00	 jmp	 $LN26@Got_Mapcmd
$LN10@Got_Mapcmd:

; 2141 : 	else if (gametype == GT_RACE)

  0017f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00186	83 f8 02	 cmp	 eax, 2
  00189	75 1d		 jne	 SHORT $LN13@Got_Mapcmd

; 2142 : 	{
; 2143 : 		if (server)

  0018b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00192	74 0f		 je	 SHORT $LN15@Got_Mapcmd

; 2144 : 			CV_SetValue(&cv_racetype, 0);

  00194	6a 00		 push	 0
  00196	68 00 00 00 00	 push	 OFFSET _cv_racetype
  0019b	e8 00 00 00 00	 call	 _CV_SetValue
  001a0	83 c4 08	 add	 esp, 8
$LN15@Got_Mapcmd:

; 2145 : 	}

  001a3	e9 ba 00 00 00	 jmp	 $LN26@Got_Mapcmd
$LN13@Got_Mapcmd:

; 2146 : 	else if (gametype == GT_TAG)

  001a8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001af	83 f8 03	 cmp	 eax, 3
  001b2	75 1d		 jne	 SHORT $LN16@Got_Mapcmd

; 2147 : 	{
; 2148 : 		if (server)

  001b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  001bb	74 0f		 je	 SHORT $LN18@Got_Mapcmd

; 2149 : 			CV_SetValue(&cv_tagtype, 0);

  001bd	6a 00		 push	 0
  001bf	68 00 00 00 00	 push	 OFFSET _cv_tagtype
  001c4	e8 00 00 00 00	 call	 _CV_SetValue
  001c9	83 c4 08	 add	 esp, 8
$LN18@Got_Mapcmd:

; 2150 : 	}

  001cc	e9 91 00 00 00	 jmp	 $LN26@Got_Mapcmd
$LN16@Got_Mapcmd:

; 2151 : 	// Special Cases
; 2152 : 	else if (gametype == GTF_TEAMMATCH)

  001d1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001d8	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  001db	75 25		 jne	 SHORT $LN19@Got_Mapcmd

; 2153 : 	{
; 2154 : 		gametype = GT_MATCH;

  001dd	b8 01 00 00 00	 mov	 eax, 1
  001e2	66 a3 00 00 00
	00		 mov	 WORD PTR _gametype, ax

; 2155 : 
; 2156 : 		if (server)

  001e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  001ef	74 0f		 je	 SHORT $LN21@Got_Mapcmd

; 2157 : 			CV_SetValue(&cv_matchtype, 1);

  001f1	6a 01		 push	 1
  001f3	68 00 00 00 00	 push	 OFFSET _cv_matchtype
  001f8	e8 00 00 00 00	 call	 _CV_SetValue
  001fd	83 c4 08	 add	 esp, 8
$LN21@Got_Mapcmd:

; 2158 : 	}

  00200	eb 60		 jmp	 SHORT $LN26@Got_Mapcmd
$LN19@Got_Mapcmd:

; 2159 : 	else if (gametype == GTF_CLASSICRACE)

  00202	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00209	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0020c	75 25		 jne	 SHORT $LN22@Got_Mapcmd

; 2160 : 	{
; 2161 : 		gametype = GT_RACE;

  0020e	b8 02 00 00 00	 mov	 eax, 2
  00213	66 a3 00 00 00
	00		 mov	 WORD PTR _gametype, ax

; 2162 : 
; 2163 : 		if (server)

  00219	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00220	74 0f		 je	 SHORT $LN24@Got_Mapcmd

; 2164 : 			CV_SetValue(&cv_racetype, 1);

  00222	6a 01		 push	 1
  00224	68 00 00 00 00	 push	 OFFSET _cv_racetype
  00229	e8 00 00 00 00	 call	 _CV_SetValue
  0022e	83 c4 08	 add	 esp, 8
$LN24@Got_Mapcmd:

; 2165 : 	}

  00231	eb 2f		 jmp	 SHORT $LN26@Got_Mapcmd
$LN22@Got_Mapcmd:

; 2166 : 	else if (gametype == GTF_HIDEANDSEEK)

  00233	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0023a	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  0023d	75 23		 jne	 SHORT $LN26@Got_Mapcmd

; 2167 : 	{
; 2168 : 		gametype = GT_TAG;

  0023f	b8 03 00 00 00	 mov	 eax, 3
  00244	66 a3 00 00 00
	00		 mov	 WORD PTR _gametype, ax

; 2169 : 
; 2170 : 		if (server)

  0024a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00251	74 0f		 je	 SHORT $LN26@Got_Mapcmd

; 2171 : 			CV_SetValue(&cv_tagtype, 1);

  00253	6a 01		 push	 1
  00255	68 00 00 00 00	 push	 OFFSET _cv_tagtype
  0025a	e8 00 00 00 00	 call	 _CV_SetValue
  0025f	83 c4 08	 add	 esp, 8
$LN26@Got_Mapcmd:

; 2172 : 	}
; 2173 : 
; 2174 : 	if (gametype != lastgametype)

  00262	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00269	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _lastgametype$[ebp]
  0026f	74 0f		 je	 SHORT $LN27@Got_Mapcmd

; 2175 : 		D_GameTypeChanged(lastgametype); // emulate consvar_t behavior for gametype

  00271	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _lastgametype$[ebp]
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 _D_GameTypeChanged
  0027d	83 c4 04	 add	 esp, 4
$LN27@Got_Mapcmd:

; 2176 : 
; 2177 : 	skipprecutscene = READUINT8(*cp);

  00280	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]
  00285	8a 11		 mov	 dl, BYTE PTR [ecx]
  00287	88 95 6f ff ff
	ff		 mov	 BYTE PTR _skipprecutscene$[ebp], dl
  0028d	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00290	8b 08		 mov	 ecx, DWORD PTR [eax]
  00292	83 c1 01	 add	 ecx, 1
  00295	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00298	89 0a		 mov	 DWORD PTR [edx], ecx

; 2178 : 
; 2179 : 	FLS = READUINT8(*cp);

  0029a	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0029d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029f	8a 11		 mov	 dl, BYTE PTR [ecx]
  002a1	88 95 6e ff ff
	ff		 mov	 BYTE PTR _FLS$[ebp], dl
  002a7	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  002aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ac	83 c1 01	 add	 ecx, 1
  002af	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  002b2	89 0a		 mov	 DWORD PTR [edx], ecx

; 2180 : 
; 2181 : 	READSTRINGN(*cp, mapname, MAX_WADPATH);

  002b4	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmp_i$2[ebp], 0
  002be	eb 0f		 jmp	 SHORT $LN4@Got_Mapcmd
$LN2@Got_Mapcmd:
  002c0	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  002c6	83 c0 01	 add	 eax, 1
  002c9	89 85 64 ff ff
	ff		 mov	 DWORD PTR _tmp_i$2[ebp], eax
$LN4@Got_Mapcmd:
  002cf	81 bd 64 ff ff
	ff 80 00 00 00	 cmp	 DWORD PTR _tmp_i$2[ebp], 128 ; 00000080H
  002d9	73 40		 jae	 SHORT $LN3@Got_Mapcmd
  002db	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  002de	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e0	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _tmp_i$2[ebp]
  002e6	8a 01		 mov	 al, BYTE PTR [ecx]
  002e8	88 84 15 78 ff
	ff ff		 mov	 BYTE PTR _mapname$[ebp+edx], al
  002ef	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _tmp_i$2[ebp]
  002f5	0f be 94 0d 78
	ff ff ff	 movsx	 edx, BYTE PTR _mapname$[ebp+ecx]
  002fd	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv176[ebp], edx
  00303	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00306	8b 08		 mov	 ecx, DWORD PTR [eax]
  00308	83 c1 01	 add	 ecx, 1
  0030b	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  0030e	89 0a		 mov	 DWORD PTR [edx], ecx
  00310	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR tv176[ebp], 0
  00317	74 02		 je	 SHORT $LN3@Got_Mapcmd
  00319	eb a5		 jmp	 SHORT $LN2@Got_Mapcmd
$LN3@Got_Mapcmd:
  0031b	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _tmp_i$2[ebp]
  00321	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00327	81 bd 20 ff ff
	ff 81 00 00 00	 cmp	 DWORD PTR $T1[ebp], 129	; 00000081H
  00331	73 02		 jae	 SHORT $LN42@Got_Mapcmd
  00333	eb 06		 jmp	 SHORT $LN43@Got_Mapcmd
$LN42@Got_Mapcmd:
  00335	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  0033a	90		 npad	 1
$LN43@Got_Mapcmd:
  0033b	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00341	c6 84 0d 78 ff
	ff ff 00	 mov	 BYTE PTR _mapname$[ebp+ecx], 0

; 2182 : 
; 2183 : 	if (!skipprecutscene)

  00349	0f b6 85 6f ff
	ff ff		 movzx	 eax, BYTE PTR _skipprecutscene$[ebp]
  00350	85 c0		 test	 eax, eax
  00352	0f 85 99 00 00
	00		 jne	 $LN28@Got_Mapcmd

; 2184 : 	{
; 2185 : 		DEBFILE(va("Warping to %s [resetplayer=%d lastgametype=%d gametype=%d cpnd=%d]\n",

  00358	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _debugfile, 0
  0035f	74 4e		 je	 SHORT $LN29@Got_Mapcmd
  00361	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  00366	50		 push	 eax
  00367	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _chmappending
  0036d	51		 push	 ecx
  0036e	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR _gametype
  00375	52		 push	 edx
  00376	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _lastgametype$[ebp]
  0037c	50		 push	 eax
  0037d	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _resetplayer$[ebp]
  00383	51		 push	 ecx
  00384	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _mapname$[ebp]
  0038a	52		 push	 edx
  0038b	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@BADIJMIP@Warping?5to?5?$CFs?5?$FLresetplayer?$DN?$CFd?5l@
  00390	e8 00 00 00 00	 call	 _va
  00395	83 c4 18	 add	 esp, 24			; 00000018H
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 _fputs
  0039e	83 c4 08	 add	 esp, 8
  003a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _debugfile
  003a6	50		 push	 eax
  003a7	e8 00 00 00 00	 call	 _fflush
  003ac	83 c4 04	 add	 esp, 4
$LN29@Got_Mapcmd:

; 2186 : 			mapname, resetplayer, lastgametype, gametype, chmappending));
; 2187 : 		CONS_Printf(text[STSTR_CLEV], devparm ? mapname:"level");

  003af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  003b6	74 0e		 je	 SHORT $LN44@Got_Mapcmd
  003b8	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _mapname$[ebp]
  003be	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  003c4	eb 0a		 jmp	 SHORT $LN45@Got_Mapcmd
$LN44@Got_Mapcmd:
  003c6	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv194[ebp], OFFSET ??_C@_05KJNJLLGA@level@
$LN45@Got_Mapcmd:
  003d0	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  003d6	51		 push	 ecx
  003d7	ba 04 00 00 00	 mov	 edx, 4
  003dc	69 c2 e9 00 00
	00		 imul	 eax, edx, 233
  003e2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  003e8	51		 push	 ecx
  003e9	e8 00 00 00 00	 call	 _CONS_Printf
  003ee	83 c4 08	 add	 esp, 8
$LN28@Got_Mapcmd:

; 2188 : 	}
; 2189 : 	if (demoplayback && !timingdemo)

  003f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  003f8	74 13		 je	 SHORT $LN30@Got_Mapcmd
  003fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timingdemo, 0
  00401	75 0a		 jne	 SHORT $LN30@Got_Mapcmd

; 2190 : 		precache = false;

  00403	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _precache, 0
$LN30@Got_Mapcmd:

; 2191 : 
; 2192 : 	if (resetplayer)

  0040d	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _resetplayer$[ebp], 0
  00414	74 25		 je	 SHORT $LN32@Got_Mapcmd

; 2193 : 	{
; 2194 : 		if (!FLS || (netgame || multiplayer))

  00416	0f b6 85 6e ff
	ff ff		 movzx	 eax, BYTE PTR _FLS$[ebp]
  0041d	85 c0		 test	 eax, eax
  0041f	74 12		 je	 SHORT $LN34@Got_Mapcmd
  00421	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00428	75 09		 jne	 SHORT $LN34@Got_Mapcmd
  0042a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00431	74 08		 je	 SHORT $LN32@Got_Mapcmd
$LN34@Got_Mapcmd:

; 2195 : 			emeralds = 0;

  00433	33 c0		 xor	 eax, eax
  00435	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax
$LN32@Got_Mapcmd:

; 2196 : 	}
; 2197 : 
; 2198 : 	// why here? because, this is only called the first time a level is loaded.
; 2199 : 	// also, this needs to be done before the level is loaded, duh :p
; 2200 : 	mapmusic = mapheaderinfo[gamemap-1].musicslot;

  0043b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  00442	83 e8 01	 sub	 eax, 1
  00445	69 c8 84 01 00
	00		 imul	 ecx, eax, 388
  0044b	8b 91 48 00 00
	00		 mov	 edx, DWORD PTR _mapheaderinfo[ecx+72]
  00451	89 15 00 00 00
	00		 mov	 DWORD PTR _mapmusic, edx

; 2201 : 
; 2202 : 	G_InitNew(ultimatemode, mapname, resetplayer, skipprecutscene);

  00457	0f b6 85 6f ff
	ff ff		 movzx	 eax, BYTE PTR _skipprecutscene$[ebp]
  0045e	50		 push	 eax
  0045f	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _resetplayer$[ebp]
  00465	51		 push	 ecx
  00466	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _mapname$[ebp]
  0046c	52		 push	 edx
  0046d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00474	50		 push	 eax
  00475	e8 00 00 00 00	 call	 _G_InitNew
  0047a	83 c4 10	 add	 esp, 16			; 00000010H

; 2203 : 	if (demoplayback && !timingdemo)

  0047d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00484	74 13		 je	 SHORT $LN35@Got_Mapcmd
  00486	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timingdemo, 0
  0048d	75 0a		 jne	 SHORT $LN35@Got_Mapcmd

; 2204 : 		precache = true;

  0048f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _precache, 1
$LN35@Got_Mapcmd:

; 2205 : 	CON_ToggleOff();

  00499	e8 00 00 00 00	 call	 _CON_ToggleOff
  0049e	90		 npad	 1

; 2206 : 	if (timingdemo)

  0049f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timingdemo, 0
  004a6	74 06		 je	 SHORT $LN36@Got_Mapcmd

; 2207 : 		G_DoneLevelLoad();

  004a8	e8 00 00 00 00	 call	 _G_DoneLevelLoad
  004ad	90		 npad	 1
$LN36@Got_Mapcmd:

; 2208 : 
; 2209 : 	if (timeattacking)

  004ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  004b5	0f 84 bd 00 00
	00		 je	 $LN38@Got_Mapcmd

; 2210 : 	{
; 2211 : 		SetPlayerSkinByNum(0, cv_chooseskin.value-1);

  004bb	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  004c0	83 e8 01	 sub	 eax, 1
  004c3	50		 push	 eax
  004c4	6a 00		 push	 0
  004c6	e8 00 00 00 00	 call	 _SetPlayerSkinByNum
  004cb	83 c4 08	 add	 esp, 8

; 2212 : 		players[0].skincolor = (atoi(skins[cv_chooseskin.value-1].prefcolor)) % MAXSKINCOLORS;

  004ce	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_chooseskin+20
  004d3	83 e8 01	 sub	 eax, 1
  004d6	69 c8 ec 00 00
	00		 imul	 ecx, eax, 236
  004dc	81 c1 81 00 00
	00		 add	 ecx, OFFSET _skins+129
  004e2	51		 push	 ecx
  004e3	e8 00 00 00 00	 call	 _atoi
  004e8	83 c4 04	 add	 esp, 4
  004eb	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  004f0	79 05		 jns	 SHORT $LN46@Got_Mapcmd
  004f2	48		 dec	 eax
  004f3	83 c8 f0	 or	 eax, -16		; fffffff0H
  004f6	40		 inc	 eax
$LN46@Got_Mapcmd:
  004f7	ba fc 01 00 00	 mov	 edx, 508		; 000001fcH
  004fc	6b ca 00	 imul	 ecx, edx, 0
  004ff	89 81 b4 00 00
	00		 mov	 DWORD PTR _players[ecx+180], eax

; 2213 : 		CV_StealthSetValue(&cv_playercolor, players[0].skincolor);

  00505	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0050a	6b c8 00	 imul	 ecx, eax, 0
  0050d	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+180]
  00513	52		 push	 edx
  00514	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  00519	e8 00 00 00 00	 call	 _CV_StealthSetValue
  0051e	83 c4 08	 add	 esp, 8

; 2214 : 
; 2215 : 		// a copy of color
; 2216 : 		if (players[0].mo)

  00521	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00526	6b c8 00	 imul	 ecx, eax, 0
  00529	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR _players[ecx], 0
  00530	74 46		 je	 SHORT $LN38@Got_Mapcmd

; 2217 : 		{
; 2218 : 			players[0].mo->flags |= MF_TRANSLATION;

  00532	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00537	6b c8 00	 imul	 ecx, eax, 0
  0053a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00540	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00543	0d 00 00 00 04	 or	 eax, 67108864		; 04000000H
  00548	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0054d	6b d1 00	 imul	 edx, ecx, 0
  00550	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  00556	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 2219 : 			players[0].mo->color = (UINT8)players[0].skincolor;

  00559	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0055e	6b c8 00	 imul	 ecx, eax, 0
  00561	ba fc 01 00 00	 mov	 edx, 508		; 000001fcH
  00566	6b c2 00	 imul	 eax, edx, 0
  00569	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _players[eax]
  0056f	8a 81 b4 00 00
	00		 mov	 al, BYTE PTR _players[ecx+180]
  00575	88 42 68	 mov	 BYTE PTR [edx+104], al
$LN38@Got_Mapcmd:

; 2220 : 		}
; 2221 : 	}
; 2222 : }

  00578	5f		 pop	 edi
  00579	5e		 pop	 esi
  0057a	5b		 pop	 ebx
  0057b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0057e	33 cd		 xor	 ecx, ebp
  00580	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00585	8b e5		 mov	 esp, ebp
  00587	5d		 pop	 ebp
  00588	c3		 ret	 0
_Got_Mapcmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_WeaponPref
_TEXT	SEGMENT
tv68 = -68						; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_WeaponPref PROC					; COMDAT

; 1583 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1584 : 	if (READSINT8(*cp))

  00009	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00011	89 55 bc	 mov	 DWORD PTR tv68[ebp], edx
  00014	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	83 c1 01	 add	 ecx, 1
  0001c	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx
  00021	83 7d bc 00	 cmp	 DWORD PTR tv68[ebp], 0
  00025	74 1f		 je	 SHORT $LN2@Got_Weapon

; 1585 : 		players[playernum].pflags |= PF_AUTOAIM;

  00027	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0002e	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00034	83 c9 01	 or	 ecx, 1
  00037	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  0003e	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
  00044	eb 1d		 jmp	 SHORT $LN3@Got_Weapon
$LN2@Got_Weapon:

; 1586 : 	else
; 1587 : 		players[playernum].pflags &= ~PF_AUTOAIM;

  00046	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  0004d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00053	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00056	69 55 0c fc 01
	00 00		 imul	 edx, DWORD PTR _playernum$[ebp], 508
  0005d	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx
$LN3@Got_Weapon:

; 1588 : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_Got_WeaponPref ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Got_NameAndColor
_TEXT	SEGMENT
tv75 = -96						; size = 4
tv80 = -96						; size = 4
tv150 = -96						; size = 4
tv245 = -96						; size = 4
_forcedskin$1 = -28					; size = 4
_buf$2 = -24						; size = 2
_kick$3 = -20						; size = 4
_extrainfo$ = -13					; size = 1
_str$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_cp$ = 8						; size = 4
_playernum$ = 12					; size = 4
_Got_NameAndColor PROC					; COMDAT

; 1397 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1398 : 	player_t *p = &players[playernum];

  00009	69 45 0c fc 01
	00 00		 imul	 eax, DWORD PTR _playernum$[ebp], 508
  00010	05 00 00 00 00	 add	 eax, OFFSET _players
  00015	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 1399 : 	INT32 i;
; 1400 : 	char *str;
; 1401 : 	UINT8 extrainfo;
; 1402 : 
; 1403 : #ifdef PARANOIA
; 1404 : 	if (playernum < 0 || playernum > MAXPLAYERS)
; 1405 : 		I_Error("There is no player %d!", playernum);
; 1406 : #endif
; 1407 : 
; 1408 : 	if (netgame && !server && !addedtogame)

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0001f	74 6e		 je	 SHORT $LN13@Got_NameAn
  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00028	75 65		 jne	 SHORT $LN13@Got_NameAn
  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _addedtogame, 0
  00031	75 5c		 jne	 SHORT $LN13@Got_NameAn

; 1409 : 	{
; 1410 : 		// A bogus change from a player on the server.
; 1411 : 		// There's a one-tic delay on XD_ messages. Here's how
; 1412 : 		// this happens: on tic 1, server sends an XD_NAMEANDCOLOR
; 1413 : 		// message, starting the server; on tic 2, we join and
; 1414 : 		// receive the XD_NAMEANDCOLOR and the server sends our
; 1415 : 		// XD_ADDPLAYER message, so we haven't gotten it yet.
; 1416 : 		// So we get the name and color message first, and think
; 1417 : 		// it means us, since it refers to player 0, which we think
; 1418 : 		// we are, having not received an XD_ADDPLAYER message
; 1419 : 		// telling us otherwise.
; 1420 : 		// FIXME: What a mess.
; 1421 : 
; 1422 : 		// Skip the message, ignoring it. The server will send
; 1423 : 		// another later.
; 1424 : 		extrainfo = READUINT8(*cp);

  00033	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8a 11		 mov	 dl, BYTE PTR [ecx]
  0003a	88 55 f3	 mov	 BYTE PTR _extrainfo$[ebp], dl
  0003d	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	83 c1 01	 add	 ecx, 1
  00045	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@Got_NameAn:

; 1425 : 		SKIPSTRING(*cp); // name

  0004a	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00052	89 55 a0	 mov	 DWORD PTR tv75[ebp], edx
  00055	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	83 c1 01	 add	 ecx, 1
  0005d	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00060	89 0a		 mov	 DWORD PTR [edx], ecx
  00062	83 7d a0 00	 cmp	 DWORD PTR tv75[ebp], 0
  00066	74 02		 je	 SHORT $LN3@Got_NameAn
  00068	eb e0		 jmp	 SHORT $LN2@Got_NameAn
$LN3@Got_NameAn:

; 1426 : 		SKIPSTRING(*cp); // skin

  0006a	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00072	89 55 a0	 mov	 DWORD PTR tv80[ebp], edx
  00075	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	83 c1 01	 add	 ecx, 1
  0007d	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00080	89 0a		 mov	 DWORD PTR [edx], ecx
  00082	83 7d a0 00	 cmp	 DWORD PTR tv80[ebp], 0
  00086	74 02		 je	 SHORT $LN5@Got_NameAn
  00088	eb e0		 jmp	 SHORT $LN3@Got_NameAn
$LN5@Got_NameAn:

; 1427 : 		return;

  0008a	e9 aa 05 00 00	 jmp	 $LN43@Got_NameAn
$LN13@Got_NameAn:

; 1428 : 	}
; 1429 : 
; 1430 : 	if (playernum == consoleplayer)

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00092	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00098	75 0f		 jne	 SHORT $LN14@Got_NameAn

; 1431 : 		snacpending--;

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR _snacpending
  0009f	83 e8 01	 sub	 eax, 1
  000a2	a3 00 00 00 00	 mov	 DWORD PTR _snacpending, eax
  000a7	eb 18		 jmp	 SHORT $LN16@Got_NameAn
$LN14@Got_NameAn:

; 1432 : 	else if (playernum == secondarydisplayplayer)

  000a9	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000ac	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  000b2	75 0d		 jne	 SHORT $LN16@Got_NameAn

; 1433 : 		snac2pending--;

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _snac2pending
  000b9	83 e8 01	 sub	 eax, 1
  000bc	a3 00 00 00 00	 mov	 DWORD PTR _snac2pending, eax
$LN16@Got_NameAn:

; 1434 : 
; 1435 : #ifdef PARANOIA
; 1436 : 	if (snacpending < 0 || snac2pending < 0)
; 1437 : 		I_Error("snacpending negative!");
; 1438 : #endif
; 1439 : 
; 1440 : 	extrainfo = READUINT8(*cp);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	8a 11		 mov	 dl, BYTE PTR [ecx]
  000c8	88 55 f3	 mov	 BYTE PTR _extrainfo$[ebp], dl
  000cb	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	83 c1 01	 add	 ecx, 1
  000d3	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  000d6	89 0a		 mov	 DWORD PTR [edx], ecx

; 1441 : 
; 1442 : 	if (playernum == consoleplayer && ((extrainfo&31) % MAXSKINCOLORS) != cv_playercolor.value
; 1443 : 		&& !snacpending && !chmappending)

  000d8	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  000db	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  000e1	75 55		 jne	 SHORT $LN17@Got_NameAn
  000e3	0f b6 45 f3	 movzx	 eax, BYTE PTR _extrainfo$[ebp]
  000e7	83 e0 1f	 and	 eax, 31			; 0000001fH
  000ea	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  000ef	79 05		 jns	 SHORT $LN55@Got_NameAn
  000f1	48		 dec	 eax
  000f2	83 c8 f0	 or	 eax, -16		; fffffff0H
  000f5	40		 inc	 eax
$LN55@Got_NameAn:
  000f6	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_playercolor+20
  000fc	74 3a		 je	 SHORT $LN17@Got_NameAn
  000fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _snacpending, 0
  00105	75 31		 jne	 SHORT $LN17@Got_NameAn
  00107	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chmappending, 0
  0010e	75 28		 jne	 SHORT $LN17@Got_NameAn

; 1444 : 	{
; 1445 : 		I_Error("consoleplayer color received as %d, cv_playercolor.value is %d",

  00110	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_playercolor+20
  00115	50		 push	 eax
  00116	0f b6 4d f3	 movzx	 ecx, BYTE PTR _extrainfo$[ebp]
  0011a	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0011d	81 e1 0f 00 00
	80		 and	 ecx, -2147483633	; 8000000fH
  00123	79 05		 jns	 SHORT $LN56@Got_NameAn
  00125	49		 dec	 ecx
  00126	83 c9 f0	 or	 ecx, -16		; fffffff0H
  00129	41		 inc	 ecx
$LN56@Got_NameAn:
  0012a	51		 push	 ecx
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@DPLFIEPI@consoleplayer?5color?5received?5as@
  00130	e8 00 00 00 00	 call	 _I_Error
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@Got_NameAn:

; 1446 : 			(extrainfo&31) % MAXSKINCOLORS, cv_playercolor.value);
; 1447 : 	}
; 1448 : 	if (splitscreen && playernum == secondarydisplayplayer
; 1449 : 		&& ((extrainfo&31) % MAXSKINCOLORS) != cv_playercolor2.value && !snac2pending
; 1450 : 		&& !chmappending)

  00138	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0013f	74 60		 je	 SHORT $LN18@Got_NameAn
  00141	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00144	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  0014a	75 55		 jne	 SHORT $LN18@Got_NameAn
  0014c	0f b6 45 f3	 movzx	 eax, BYTE PTR _extrainfo$[ebp]
  00150	83 e0 1f	 and	 eax, 31			; 0000001fH
  00153	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  00158	79 05		 jns	 SHORT $LN57@Got_NameAn
  0015a	48		 dec	 eax
  0015b	83 c8 f0	 or	 eax, -16		; fffffff0H
  0015e	40		 inc	 eax
$LN57@Got_NameAn:
  0015f	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR _cv_playercolor2+20
  00165	74 3a		 je	 SHORT $LN18@Got_NameAn
  00167	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _snac2pending, 0
  0016e	75 31		 jne	 SHORT $LN18@Got_NameAn
  00170	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _chmappending, 0
  00177	75 28		 jne	 SHORT $LN18@Got_NameAn

; 1451 : 	{
; 1452 : 		I_Error("secondarydisplayplayer color received as %d, cv_playercolor2.value is %d",

  00179	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_playercolor2+20
  0017e	50		 push	 eax
  0017f	0f b6 4d f3	 movzx	 ecx, BYTE PTR _extrainfo$[ebp]
  00183	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00186	81 e1 0f 00 00
	80		 and	 ecx, -2147483633	; 8000000fH
  0018c	79 05		 jns	 SHORT $LN58@Got_NameAn
  0018e	49		 dec	 ecx
  0018f	83 c9 f0	 or	 ecx, -16		; fffffff0H
  00192	41		 inc	 ecx
$LN58@Got_NameAn:
  00193	51		 push	 ecx
  00194	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@IEGONDHC@secondarydisplayplayer?5color?5re@
  00199	e8 00 00 00 00	 call	 _I_Error
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@Got_NameAn:

; 1453 : 			(extrainfo&31) % MAXSKINCOLORS, cv_playercolor2.value);
; 1454 : 	}
; 1455 : 
; 1456 : 	str = (char *)*cp; // name

  001a1	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d f4	 mov	 DWORD PTR _str$[ebp], ecx
$LN6@Got_NameAn:

; 1457 : 	SKIPSTRING(*cp);

  001a9	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  001ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ae	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  001b1	89 55 a0	 mov	 DWORD PTR tv150[ebp], edx
  001b4	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  001b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b9	83 c1 01	 add	 ecx, 1
  001bc	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  001bf	89 0a		 mov	 DWORD PTR [edx], ecx
  001c1	83 7d a0 00	 cmp	 DWORD PTR tv150[ebp], 0
  001c5	74 02		 je	 SHORT $LN7@Got_NameAn
  001c7	eb e0		 jmp	 SHORT $LN6@Got_NameAn
$LN7@Got_NameAn:

; 1458 : 	if (strcasecmp(player_names[playernum], str) != 0)

  001c9	8b 45 f4	 mov	 eax, DWORD PTR _str$[ebp]
  001cc	50		 push	 eax
  001cd	6b 4d 0c 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  001d1	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  001d7	51		 push	 ecx
  001d8	e8 00 00 00 00	 call	 _stricmp
  001dd	83 c4 08	 add	 esp, 8
  001e0	85 c0		 test	 eax, eax
  001e2	74 10		 je	 SHORT $LN19@Got_NameAn

; 1459 : 		SetPlayerName(playernum, str);

  001e4	8b 45 f4	 mov	 eax, DWORD PTR _str$[ebp]
  001e7	50		 push	 eax
  001e8	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 _SetPlayerName
  001f1	83 c4 08	 add	 esp, 8
$LN19@Got_NameAn:

; 1460 : 
; 1461 : 	// moving players cannot change colors
; 1462 : 	if (P_PlayerMoving(playernum) && p->skincolor != (extrainfo&31))

  001f4	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _P_PlayerMoving
  001fd	83 c4 04	 add	 esp, 4
  00200	85 c0		 test	 eax, eax
  00202	74 63		 je	 SHORT $LN20@Got_NameAn
  00204	0f b6 45 f3	 movzx	 eax, BYTE PTR _extrainfo$[ebp]
  00208	83 e0 1f	 and	 eax, 31			; 0000001fH
  0020b	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0020e	39 81 b4 00 00
	00		 cmp	 DWORD PTR [ecx+180], eax
  00214	74 51		 je	 SHORT $LN20@Got_NameAn

; 1463 : 	{
; 1464 : 		if (playernum == consoleplayer)

  00216	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00219	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0021f	75 19		 jne	 SHORT $LN22@Got_NameAn

; 1465 : 			CV_StealthSetValue(&cv_playercolor, p->skincolor);

  00221	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00224	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0022a	51		 push	 ecx
  0022b	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  00230	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00235	83 c4 08	 add	 esp, 8
  00238	eb 2b		 jmp	 SHORT $LN24@Got_NameAn
$LN22@Got_NameAn:

; 1466 : 		else if (splitscreen && playernum == secondarydisplayplayer)

  0023a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00241	74 22		 je	 SHORT $LN24@Got_NameAn
  00243	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00246	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  0024c	75 17		 jne	 SHORT $LN24@Got_NameAn

; 1467 : 			CV_StealthSetValue(&cv_playercolor2, p->skincolor);

  0024e	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00251	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00257	51		 push	 ecx
  00258	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  0025d	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00262	83 c4 08	 add	 esp, 8
$LN24@Got_NameAn:

; 1468 : 	}

  00265	eb 4b		 jmp	 SHORT $LN25@Got_NameAn
$LN20@Got_NameAn:

; 1469 : 	else
; 1470 : 	{
; 1471 : 		p->skincolor = (extrainfo&31) % MAXSKINCOLORS;

  00267	0f b6 45 f3	 movzx	 eax, BYTE PTR _extrainfo$[ebp]
  0026b	83 e0 1f	 and	 eax, 31			; 0000001fH
  0026e	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  00273	79 05		 jns	 SHORT $LN59@Got_NameAn
  00275	48		 dec	 eax
  00276	83 c8 f0	 or	 eax, -16		; fffffff0H
  00279	40		 inc	 eax
$LN59@Got_NameAn:
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0027d	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 1472 : 
; 1473 : 		// a copy of color
; 1474 : 		if (p->mo)

  00283	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00286	83 38 00	 cmp	 DWORD PTR [eax], 0
  00289	74 27		 je	 SHORT $LN25@Got_NameAn

; 1475 : 		{
; 1476 : 			p->mo->flags |= MF_TRANSLATION;

  0028b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0028e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00290	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00293	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00299	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0029c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029e	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 1477 : 			p->mo->color = (UINT8)p->skincolor;

  002a1	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  002a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a6	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  002a9	8a 82 b4 00 00
	00		 mov	 al, BYTE PTR [edx+180]
  002af	88 41 68	 mov	 BYTE PTR [ecx+104], al
$LN25@Got_NameAn:

; 1478 : 		}
; 1479 : 	}
; 1480 : 
; 1481 : 	// normal player colors
; 1482 : 	if (server && (gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF) &&

  002b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  002b9	0f 84 6b 01 00
	00		 je	 $LN37@Got_NameAn
  002bf	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002c6	83 f8 01	 cmp	 eax, 1
  002c9	74 1c		 je	 SHORT $LN27@Got_NameAn
  002cb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002d2	83 f8 03	 cmp	 eax, 3
  002d5	74 10		 je	 SHORT $LN27@Got_NameAn
  002d7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002de	83 f8 04	 cmp	 eax, 4
  002e1	0f 85 43 01 00
	00		 jne	 $LN37@Got_NameAn
$LN27@Got_NameAn:
  002e7	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  002f1	05 00 00 00 00	 add	 eax, OFFSET _players
  002f6	39 45 fc	 cmp	 DWORD PTR _p$[ebp], eax
  002f9	0f 84 2b 01 00
	00		 je	 $LN37@Got_NameAn
  002ff	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00309	05 00 00 00 00	 add	 eax, OFFSET _players
  0030e	39 45 fc	 cmp	 DWORD PTR _p$[ebp], eax
  00311	0f 84 13 01 00
	00		 je	 $LN37@Got_NameAn

; 1483 : 		(p != &players[consoleplayer] && p != &players[secondarydisplayplayer]))
; 1484 : 	{
; 1485 : 		boolean kick = false;

  00317	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _kick$3[ebp], 0

; 1486 : 
; 1487 : 		// team colors
; 1488 : 		if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0031e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00325	83 f8 04	 cmp	 eax, 4
  00328	74 15		 je	 SHORT $LN29@Got_NameAn
  0032a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00331	83 f8 01	 cmp	 eax, 1
  00334	75 49		 jne	 SHORT $LN32@Got_NameAn
  00336	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0033d	74 40		 je	 SHORT $LN32@Got_NameAn
$LN29@Got_NameAn:

; 1489 : 		{
; 1490 : 			if (p->ctfteam == 1 && p->skincolor != 6)

  0033f	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00342	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  00349	75 15		 jne	 SHORT $LN30@Got_NameAn
  0034b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0034e	83 b8 b4 00 00
	00 06		 cmp	 DWORD PTR [eax+180], 6
  00355	74 09		 je	 SHORT $LN30@Got_NameAn

; 1491 : 				kick = true;

  00357	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _kick$3[ebp], 1
  0035e	eb 1f		 jmp	 SHORT $LN32@Got_NameAn
$LN30@Got_NameAn:

; 1492 : 			else if (p->ctfteam == 2 && p->skincolor != 7)

  00360	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  00363	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  0036a	75 13		 jne	 SHORT $LN32@Got_NameAn
  0036c	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0036f	83 b8 b4 00 00
	00 07		 cmp	 DWORD PTR [eax+180], 7
  00376	74 07		 je	 SHORT $LN32@Got_NameAn

; 1493 : 				kick = true;

  00378	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _kick$3[ebp], 1
$LN32@Got_NameAn:

; 1494 : 		}
; 1495 : 
; 1496 : 		// disallow the use of yellow in Match/Team Match/CTF
; 1497 : 		if (gametype == GT_MATCH || gametype == GT_CTF)

  0037f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00386	83 f8 01	 cmp	 eax, 1
  00389	74 0c		 je	 SHORT $LN34@Got_NameAn
  0038b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00392	83 f8 04	 cmp	 eax, 4
  00395	75 13		 jne	 SHORT $LN35@Got_NameAn
$LN34@Got_NameAn:

; 1498 : 		{
; 1499 : 			if (p->skincolor == 15) //yellow

  00397	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0039a	83 b8 b4 00 00
	00 0f		 cmp	 DWORD PTR [eax+180], 15	; 0000000fH
  003a1	75 07		 jne	 SHORT $LN35@Got_NameAn

; 1500 : 				kick = true;

  003a3	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _kick$3[ebp], 1
$LN35@Got_NameAn:

; 1501 : 		}
; 1502 : 
; 1503 : 		// don't allow color "none"
; 1504 : 		if (!p->skincolor)

  003aa	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003ad	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  003b4	75 07		 jne	 SHORT $LN36@Got_NameAn

; 1505 : 			kick = true;

  003b6	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _kick$3[ebp], 1
$LN36@Got_NameAn:

; 1506 : 
; 1507 : 		if (kick)

  003bd	83 7d ec 00	 cmp	 DWORD PTR _kick$3[ebp], 0
  003c1	74 67		 je	 SHORT $LN37@Got_NameAn

; 1508 : 		{
; 1509 : 			XBOXSTATIC UINT8 buf[2];
; 1510 : 			CONS_Printf(text[ILLEGALCOLORCMD], player_names[playernum], p->ctfteam, p->skincolor);

  003c3	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  003c6	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  003cc	51		 push	 ecx
  003cd	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  003d0	8b 82 60 01 00
	00		 mov	 eax, DWORD PTR [edx+352]
  003d6	50		 push	 eax
  003d7	6b 4d 0c 16	 imul	 ecx, DWORD PTR _playernum$[ebp], 22
  003db	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  003e1	51		 push	 ecx
  003e2	ba 04 00 00 00	 mov	 edx, 4
  003e7	6b c2 5b	 imul	 eax, edx, 91
  003ea	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  003f0	51		 push	 ecx
  003f1	e8 00 00 00 00	 call	 _CONS_Printf
  003f6	83 c4 10	 add	 esp, 16			; 00000010H

; 1511 : 
; 1512 : 			buf[0] = (UINT8)playernum;

  003f9	b8 01 00 00 00	 mov	 eax, 1
  003fe	6b c8 00	 imul	 ecx, eax, 0
  00401	8a 55 0c	 mov	 dl, BYTE PTR _playernum$[ebp]
  00404	88 54 0d e8	 mov	 BYTE PTR _buf$2[ebp+ecx], dl

; 1513 : 			buf[1] = KICK_MSG_CON_FAIL;

  00408	b8 01 00 00 00	 mov	 eax, 1
  0040d	c1 e0 00	 shl	 eax, 0
  00410	c6 44 05 e8 02	 mov	 BYTE PTR _buf$2[ebp+eax], 2

; 1514 : 			SendNetXCmd(XD_KICK, &buf, 2);

  00415	6a 02		 push	 2
  00417	8d 45 e8	 lea	 eax, DWORD PTR _buf$2[ebp]
  0041a	50		 push	 eax
  0041b	6a 03		 push	 3
  0041d	e8 00 00 00 00	 call	 _SendNetXCmd
  00422	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1515 : 			return;

  00425	e9 0f 02 00 00	 jmp	 $LN43@Got_NameAn
$LN37@Got_NameAn:

; 1516 : 		}
; 1517 : 	}
; 1518 : 
; 1519 : 	str = (char *)*cp; // moving players cannot change skins

  0042a	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  0042d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042f	89 4d f4	 mov	 DWORD PTR _str$[ebp], ecx
$LN8@Got_NameAn:

; 1520 : 	SKIPSTRING(*cp);

  00432	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00435	8b 08		 mov	 ecx, DWORD PTR [eax]
  00437	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0043a	89 55 a0	 mov	 DWORD PTR tv245[ebp], edx
  0043d	8b 45 08	 mov	 eax, DWORD PTR _cp$[ebp]
  00440	8b 08		 mov	 ecx, DWORD PTR [eax]
  00442	83 c1 01	 add	 ecx, 1
  00445	8b 55 08	 mov	 edx, DWORD PTR _cp$[ebp]
  00448	89 0a		 mov	 DWORD PTR [edx], ecx
  0044a	83 7d a0 00	 cmp	 DWORD PTR tv245[ebp], 0
  0044e	74 02		 je	 SHORT $LN9@Got_NameAn
  00450	eb e0		 jmp	 SHORT $LN8@Got_NameAn
$LN9@Got_NameAn:

; 1521 : 	if ((P_PlayerMoving(playernum) && strcasecmp(skins[players[playernum].skin].name, str) != 0))

  00452	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 _P_PlayerMoving
  0045b	83 c4 04	 add	 esp, 4
  0045e	85 c0		 test	 eax, eax
  00460	0f 84 9e 00 00
	00		 je	 $LN38@Got_NameAn
  00466	8b 45 f4	 mov	 eax, DWORD PTR _str$[ebp]
  00469	50		 push	 eax
  0046a	69 4d 0c fc 01
	00 00		 imul	 ecx, DWORD PTR _playernum$[ebp], 508
  00471	69 91 b8 00 00
	00 ec 00 00 00	 imul	 edx, DWORD PTR _players[ecx+184], 236
  0047b	81 c2 00 00 00
	00		 add	 edx, OFFSET _skins
  00481	52		 push	 edx
  00482	e8 00 00 00 00	 call	 _stricmp
  00487	83 c4 08	 add	 esp, 8
  0048a	85 c0		 test	 eax, eax
  0048c	74 76		 je	 SHORT $LN38@Got_NameAn

; 1522 : 	{
; 1523 : 		if (playernum == consoleplayer)

  0048e	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00491	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  00497	75 2a		 jne	 SHORT $LN39@Got_NameAn

; 1524 : 			CV_StealthSet(&cv_skin, skins[players[consoleplayer].skin].name);

  00499	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  004a3	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR _players[eax+184], 236
  004ad	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  004b3	51		 push	 ecx
  004b4	68 00 00 00 00	 push	 OFFSET _cv_skin
  004b9	e8 00 00 00 00	 call	 _CV_StealthSet
  004be	83 c4 08	 add	 esp, 8
  004c1	eb 3c		 jmp	 SHORT $LN41@Got_NameAn
$LN39@Got_NameAn:

; 1525 : 		else if (splitscreen && playernum == secondarydisplayplayer)

  004c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  004ca	74 33		 je	 SHORT $LN41@Got_NameAn
  004cc	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  004cf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  004d5	75 28		 jne	 SHORT $LN41@Got_NameAn

; 1526 : 			CV_StealthSet(&cv_skin2, skins[players[secondarydisplayplayer].skin].name);

  004d7	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  004e1	69 88 b8 00 00
	00 ec 00 00 00	 imul	 ecx, DWORD PTR _players[eax+184], 236
  004eb	81 c1 00 00 00
	00		 add	 ecx, OFFSET _skins
  004f1	51		 push	 ecx
  004f2	68 00 00 00 00	 push	 OFFSET _cv_skin2
  004f7	e8 00 00 00 00	 call	 _CV_StealthSet
  004fc	83 c4 08	 add	 esp, 8
$LN41@Got_NameAn:

; 1527 : 		return;

  004ff	e9 35 01 00 00	 jmp	 $LN43@Got_NameAn
$LN38@Got_NameAn:

; 1528 : 	}
; 1529 : 
; 1530 : 	// skin
; 1531 : 	if (cv_forceskin.value >= 0 && (netgame || multiplayer)) // Server wants everyone to use the same player

  00504	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_forceskin+20, 0
  0050b	0f 8c 18 01 00
	00		 jl	 $LN42@Got_NameAn
  00511	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00518	75 0d		 jne	 SHORT $LN44@Got_NameAn
  0051a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00521	0f 84 02 01 00
	00		 je	 $LN42@Got_NameAn
$LN44@Got_NameAn:

; 1532 : 	{
; 1533 : 		const INT32 forcedskin = cv_forceskin.value;

  00527	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_forceskin+20
  0052c	89 45 e4	 mov	 DWORD PTR _forcedskin$1[ebp], eax

; 1534 : 
; 1535 : 		if (triggerforcedskin)

  0052f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _triggerforcedskin, 0
  00536	0f 84 8f 00 00
	00		 je	 $LN45@Got_NameAn

; 1536 : 		{
; 1537 : 			for (i = 0; i < MAXPLAYERS; i++)

  0053c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00543	eb 09		 jmp	 SHORT $LN12@Got_NameAn
$LN10@Got_NameAn:
  00545	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00548	83 c0 01	 add	 eax, 1
  0054b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN12@Got_NameAn:
  0054e	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00552	7d 6b		 jge	 SHORT $LN11@Got_NameAn

; 1538 : 			{
; 1539 : 				if (playeringame[i])

  00554	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00557	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0055f	74 5c		 je	 SHORT $LN50@Got_NameAn

; 1540 : 				{
; 1541 : 					SetPlayerSkinByNum(i, forcedskin);

  00561	8b 45 e4	 mov	 eax, DWORD PTR _forcedskin$1[ebp]
  00564	50		 push	 eax
  00565	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00568	51		 push	 ecx
  00569	e8 00 00 00 00	 call	 _SetPlayerSkinByNum
  0056e	83 c4 08	 add	 esp, 8

; 1542 : 
; 1543 : 					// If it's me (or my brother), set appropriate skin value in cv_skin/cv_skin2
; 1544 : 					if (i == consoleplayer)

  00571	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00574	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0057a	75 1c		 jne	 SHORT $LN48@Got_NameAn

; 1545 : 						CV_StealthSet(&cv_skin, skins[forcedskin].name);

  0057c	69 45 e4 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$1[ebp], 236
  00583	05 00 00 00 00	 add	 eax, OFFSET _skins
  00588	50		 push	 eax
  00589	68 00 00 00 00	 push	 OFFSET _cv_skin
  0058e	e8 00 00 00 00	 call	 _CV_StealthSet
  00593	83 c4 08	 add	 esp, 8
  00596	eb 25		 jmp	 SHORT $LN50@Got_NameAn
$LN48@Got_NameAn:

; 1546 : 					else if (i == secondarydisplayplayer)

  00598	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0059b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  005a1	75 1a		 jne	 SHORT $LN50@Got_NameAn

; 1547 : 						CV_StealthSet(&cv_skin2, skins[forcedskin].name);

  005a3	69 45 e4 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$1[ebp], 236
  005aa	05 00 00 00 00	 add	 eax, OFFSET _skins
  005af	50		 push	 eax
  005b0	68 00 00 00 00	 push	 OFFSET _cv_skin2
  005b5	e8 00 00 00 00	 call	 _CV_StealthSet
  005ba	83 c4 08	 add	 esp, 8
$LN50@Got_NameAn:

; 1548 : 				}
; 1549 : 			}

  005bd	eb 86		 jmp	 SHORT $LN10@Got_NameAn
$LN11@Got_NameAn:

; 1550 : 			triggerforcedskin = false;

  005bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _triggerforcedskin, 0

; 1551 : 		}

  005c9	eb 5c		 jmp	 SHORT $LN53@Got_NameAn
$LN45@Got_NameAn:

; 1552 : 		else
; 1553 : 		{
; 1554 : 			SetPlayerSkinByNum(playernum, forcedskin);

  005cb	8b 45 e4	 mov	 eax, DWORD PTR _forcedskin$1[ebp]
  005ce	50		 push	 eax
  005cf	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  005d2	51		 push	 ecx
  005d3	e8 00 00 00 00	 call	 _SetPlayerSkinByNum
  005d8	83 c4 08	 add	 esp, 8

; 1555 : 
; 1556 : 			if (playernum == consoleplayer)

  005db	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  005de	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  005e4	75 1c		 jne	 SHORT $LN51@Got_NameAn

; 1557 : 				CV_StealthSet(&cv_skin, skins[forcedskin].name);

  005e6	69 45 e4 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$1[ebp], 236
  005ed	05 00 00 00 00	 add	 eax, OFFSET _skins
  005f2	50		 push	 eax
  005f3	68 00 00 00 00	 push	 OFFSET _cv_skin
  005f8	e8 00 00 00 00	 call	 _CV_StealthSet
  005fd	83 c4 08	 add	 esp, 8
  00600	eb 25		 jmp	 SHORT $LN53@Got_NameAn
$LN51@Got_NameAn:

; 1558 : 			else if (playernum == secondarydisplayplayer)

  00602	8b 45 0c	 mov	 eax, DWORD PTR _playernum$[ebp]
  00605	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  0060b	75 1a		 jne	 SHORT $LN53@Got_NameAn

; 1559 : 				CV_StealthSet(&cv_skin2, skins[forcedskin].name);

  0060d	69 45 e4 ec 00
	00 00		 imul	 eax, DWORD PTR _forcedskin$1[ebp], 236
  00614	05 00 00 00 00	 add	 eax, OFFSET _skins
  00619	50		 push	 eax
  0061a	68 00 00 00 00	 push	 OFFSET _cv_skin2
  0061f	e8 00 00 00 00	 call	 _CV_StealthSet
  00624	83 c4 08	 add	 esp, 8
$LN53@Got_NameAn:

; 1560 : 		}
; 1561 : 	}

  00627	eb 10		 jmp	 SHORT $LN43@Got_NameAn
$LN42@Got_NameAn:

; 1562 : 	else
; 1563 : 	{
; 1564 : 		SetPlayerSkin(playernum, str);

  00629	8b 45 f4	 mov	 eax, DWORD PTR _str$[ebp]
  0062c	50		 push	 eax
  0062d	8b 4d 0c	 mov	 ecx, DWORD PTR _playernum$[ebp]
  00630	51		 push	 ecx
  00631	e8 00 00 00 00	 call	 _SetPlayerSkin
  00636	83 c4 08	 add	 esp, 8
$LN43@Got_NameAn:

; 1565 : 	}
; 1566 : }

  00639	5f		 pop	 edi
  0063a	5e		 pop	 esi
  0063b	5b		 pop	 ebx
  0063c	8b e5		 mov	 esp, ebp
  0063e	5d		 pop	 ebp
  0063f	c3		 ret	 0
_Got_NameAndColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _ObjectPlace_OnChange
_TEXT	SEGMENT
_ObjectPlace_OnChange PROC				; COMDAT

; 3539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3540 : 	if (gamestate != GS_LEVEL && cv_objectplace.value)

  00009	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _gamestate, 1
  00010	74 3c		 je	 SHORT $LN2@ObjectPlac
  00012	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00019	74 33		 je	 SHORT $LN2@ObjectPlac

; 3541 : 	{
; 3542 : 		CONS_Printf("%s",text[MUSTBEINLEVEL]);

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	69 c8 fa 00 00
	00		 imul	 ecx, eax, 250
  00026	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0002c	52		 push	 edx
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00032	e8 00 00 00 00	 call	 _CONS_Printf
  00037	83 c4 08	 add	 esp, 8

; 3543 : 		CV_StealthSetValue(&cv_objectplace, false);

  0003a	6a 00		 push	 0
  0003c	68 00 00 00 00	 push	 OFFSET _cv_objectplace
  00041	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00046	83 c4 08	 add	 esp, 8

; 3544 : 		return;

  00049	e9 7d 03 00 00	 jmp	 $LN12@ObjectPlac
$LN2@ObjectPlac:

; 3545 : 	}
; 3546 : #ifndef JOHNNYFUNCODE
; 3547 : 	if ((netgame || multiplayer) && cv_objectplace.value) // You spoon!

  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00055	75 09		 jne	 SHORT $LN4@ObjectPlac
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0005e	74 3c		 je	 SHORT $LN3@ObjectPlac
$LN4@ObjectPlac:
  00060	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00067	74 33		 je	 SHORT $LN3@ObjectPlac

; 3548 : 	{
; 3549 : 		CV_StealthSetValue(&cv_objectplace, 0);

  00069	6a 00		 push	 0
  0006b	68 00 00 00 00	 push	 OFFSET _cv_objectplace
  00070	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00075	83 c4 08	 add	 esp, 8

; 3550 : 		CONS_Printf("%s",text[CANTUSEMULTIPLAYER]);

  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	69 c8 fc 00 00
	00		 imul	 ecx, eax, 252
  00083	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00089	52		 push	 edx
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0008f	e8 00 00 00 00	 call	 _CONS_Printf
  00094	83 c4 08	 add	 esp, 8

; 3551 : 		return;

  00097	e9 2f 03 00 00	 jmp	 $LN12@ObjectPlac
$LN3@ObjectPlac:

; 3552 : 	}
; 3553 : #else
; 3554 : 	if (cv_objectplace.value)
; 3555 : 	{
; 3556 : 		INT32 i;
; 3557 : 
; 3558 : 		for (i = 0; i < MAXPLAYERS; i++)
; 3559 : 		{
; 3560 : 			if (!playeringame[i])
; 3561 : 				continue;
; 3562 : 
; 3563 : 			if (!players[i].mo)
; 3564 : 				continue;
; 3565 : 
; 3566 : 			if (players[i].playerstate != PST_LIVE)
; 3567 : 				continue;
; 3568 : 
; 3569 : 			if (players[i].pflags & PF_NIGHTSMODE)
; 3570 : 				continue;
; 3571 : 
; 3572 : 			P_SetTarget(&players[i].mo->target, NULL);
; 3573 : 			players[i].mo->flags2 |= MF2_DONTDRAW;
; 3574 : 			players[i].mo->flags |= MF_NOCLIP;
; 3575 : 			players[i].mo->flags |= MF_NOGRAVITY;
; 3576 : 			P_UnsetThingPosition(players[i].mo);
; 3577 : 			players[i].mo->flags |= MF_NOBLOCKMAP;
; 3578 : 			P_SetThingPosition(players[i].mo);
; 3579 : 			if (!players[i].currentthing)
; 3580 : 				players[i].currentthing = 1;
; 3581 : 			if (!modifiedgame || savemoddata)
; 3582 : 			{
; 3583 : 				modifiedgame = true;
; 3584 : 				savemoddata = false;
; 3585 : 				if (!(netgame || multiplayer))
; 3586 : 					CONS_Printf("%s",GAMEMODIFIED);
; 3587 : 			}
; 3588 : 		}
; 3589 : 	}
; 3590 : 	else if (players[0].mo)
; 3591 : 	{
; 3592 : 		INT32 i;
; 3593 : 
; 3594 : 		for (i = 0; i < MAXPLAYERS; i++)
; 3595 : 		{
; 3596 : 			if (!playeringame[i])
; 3597 : 				continue;
; 3598 : 
; 3599 : 			if (!players[i].mo)
; 3600 : 				continue;
; 3601 : 
; 3602 : 			if (players[i].playerstate != PST_LIVE)
; 3603 : 				continue;
; 3604 : 
; 3605 : 			if (!(players[i].pflags & PF_NIGHTSMODE))
; 3606 : 			{
; 3607 : 				if (players[i].mo->target)
; 3608 : 				{
; 3609 : 					P_RemoveMobj(players[i].mo->target);
; 3610 : 					P_SetTarget(&players[i].mo->target, NULL);
; 3611 : 				}
; 3612 : 
; 3613 : 				players[i].mo->flags2 &= ~MF2_DONTDRAW;
; 3614 : 				players[i].mo->flags &= ~MF_NOGRAVITY;
; 3615 : 			}
; 3616 : 
; 3617 : 			players[i].mo->flags &= ~MF_NOCLIP;
; 3618 : 			P_UnsetThingPosition(players[i].mo);
; 3619 : 			players[i].mo->flags &= ~MF_NOBLOCKMAP;
; 3620 : 			P_SetThingPosition(players[i].mo);
; 3621 : 		}
; 3622 : 	}
; 3623 : 	return;
; 3624 : #endif
; 3625 : 
; 3626 : 	if (cv_objectplace.value)

  0009c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  000a3	0f 84 ec 01 00
	00		 je	 $LN5@ObjectPlac

; 3627 : 	{
; 3628 : 		if (!modifiedgame || savemoddata)

  000a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  000b0	74 09		 je	 SHORT $LN8@ObjectPlac
  000b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  000b9	74 45		 je	 SHORT $LN9@ObjectPlac
$LN8@ObjectPlac:

; 3629 : 		{
; 3630 : 			modifiedgame = true;

  000bb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _modifiedgame, 1

; 3631 : 			savemoddata = false;

  000c5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _savemoddata, 0

; 3632 : 			if (!(netgame || multiplayer))

  000cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000d6	75 28		 jne	 SHORT $LN9@ObjectPlac
  000d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000df	75 1f		 jne	 SHORT $LN9@ObjectPlac

; 3633 : 				CONS_Printf("%s",text[GAMEMODIFIED]);

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	69 c8 f5 00 00
	00		 imul	 ecx, eax, 245
  000ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000f2	52		 push	 edx
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000f8	e8 00 00 00 00	 call	 _CONS_Printf
  000fd	83 c4 08	 add	 esp, 8
$LN9@ObjectPlac:

; 3634 : 		}
; 3635 : 
; 3636 : 		HU_SetCEchoFlags(1048576);

  00100	68 00 00 10 00	 push	 1048576			; 00100000H
  00105	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  0010a	83 c4 04	 add	 esp, 4

; 3637 : 		HU_SetCEchoDuration(10);

  0010d	6a 0a		 push	 10			; 0000000aH
  0010f	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00114	83 c4 04	 add	 esp, 4

; 3638 : 		HU_DoCEcho(text[OBJPLACEINFO]);

  00117	b8 04 00 00 00	 mov	 eax, 4
  0011c	69 c8 02 01 00
	00		 imul	 ecx, eax, 258
  00122	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00128	52		 push	 edx
  00129	e8 00 00 00 00	 call	 _HU_DoCEcho
  0012e	83 c4 04	 add	 esp, 4

; 3639 : 		HU_SetCEchoDuration(5);

  00131	6a 05		 push	 5
  00133	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00138	83 c4 04	 add	 esp, 4

; 3640 : 		HU_SetCEchoFlags(0);

  0013b	6a 00		 push	 0
  0013d	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00142	83 c4 04	 add	 esp, 4

; 3641 : 
; 3642 : 		if ((players[0].pflags & PF_NIGHTSMODE))

  00145	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0014a	6b c8 00	 imul	 ecx, eax, 0
  0014d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  00153	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00159	74 05		 je	 SHORT $LN10@ObjectPlac

; 3643 : 			return;

  0015b	e9 6b 02 00 00	 jmp	 $LN12@ObjectPlac
$LN10@ObjectPlac:

; 3644 : 
; 3645 : 		players[0].mo->flags2 |= MF2_DONTDRAW;

  00160	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00165	6b c8 00	 imul	 ecx, eax, 0
  00168	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0016e	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00174	0d 00 00 40 00	 or	 eax, 4194304		; 00400000H
  00179	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0017e	6b d1 00	 imul	 edx, ecx, 0
  00181	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  00187	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 3646 : 		players[0].mo->flags |= MF_NOCLIP;

  0018d	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00192	6b c8 00	 imul	 ecx, eax, 0
  00195	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0019b	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  0019e	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  001a3	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001a8	6b d1 00	 imul	 edx, ecx, 0
  001ab	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  001b1	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 3647 : 		players[0].mo->flags |= MF_NOGRAVITY;

  001b4	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  001b9	6b c8 00	 imul	 ecx, eax, 0
  001bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  001c2	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  001c5	0d 00 02 00 00	 or	 eax, 512		; 00000200H
  001ca	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001cf	6b d1 00	 imul	 edx, ecx, 0
  001d2	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  001d8	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 3648 : 		P_UnsetThingPosition(players[0].mo);

  001db	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  001e0	6b c8 00	 imul	 ecx, eax, 0
  001e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  001e9	52		 push	 edx
  001ea	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  001ef	83 c4 04	 add	 esp, 4

; 3649 : 		players[0].mo->flags |= MF_NOBLOCKMAP;

  001f2	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  001f7	6b c8 00	 imul	 ecx, eax, 0
  001fa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00200	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00203	83 c8 10	 or	 eax, 16			; 00000010H
  00206	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0020b	6b d1 00	 imul	 edx, ecx, 0
  0020e	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  00214	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 3650 : 		P_SetThingPosition(players[0].mo);

  00217	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0021c	6b c8 00	 imul	 ecx, eax, 0
  0021f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00225	52		 push	 edx
  00226	e8 00 00 00 00	 call	 _P_SetThingPosition
  0022b	83 c4 04	 add	 esp, 4

; 3651 : 		if (!players[0].currentthing)

  0022e	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00233	6b c8 00	 imul	 ecx, eax, 0
  00236	83 b9 e0 01 00
	00 00		 cmp	 DWORD PTR _players[ecx+480], 0
  0023d	75 12		 jne	 SHORT $LN11@ObjectPlac

; 3652 : 			players[0].currentthing = 1;

  0023f	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00244	6b c8 00	 imul	 ecx, eax, 0
  00247	c7 81 e0 01 00
	00 01 00 00 00	 mov	 DWORD PTR _players[ecx+480], 1
$LN11@ObjectPlac:

; 3653 : 		players[0].mo->momx = players[0].mo->momy = players[0].mo->momz = 0;

  00251	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00256	6b c8 00	 imul	 ecx, eax, 0
  00259	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0025f	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0
  00266	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0026b	6b c8 00	 imul	 ecx, eax, 0
  0026e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00274	c7 42 4c 00 00
	00 00		 mov	 DWORD PTR [edx+76], 0
  0027b	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00280	6b c8 00	 imul	 ecx, eax, 0
  00283	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00289	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 3654 : 	}

  00290	e9 36 01 00 00	 jmp	 $LN12@ObjectPlac
$LN5@ObjectPlac:

; 3655 : 	else if (players[0].mo)

  00295	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0029a	6b c8 00	 imul	 ecx, eax, 0
  0029d	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR _players[ecx], 0
  002a4	0f 84 21 01 00
	00		 je	 $LN12@ObjectPlac

; 3656 : 	{
; 3657 : 		if (!(players[0].pflags & PF_NIGHTSMODE))

  002aa	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  002af	6b c8 00	 imul	 ecx, eax, 0
  002b2	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR _players[ecx+172]
  002b8	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  002be	0f 85 8d 00 00
	00		 jne	 $LN13@ObjectPlac

; 3658 : 		{
; 3659 : 			if (players[0].mo->target)

  002c4	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  002c9	6b c8 00	 imul	 ecx, eax, 0
  002cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  002d2	83 ba 98 00 00
	00 00		 cmp	 DWORD PTR [edx+152], 0
  002d9	74 22		 je	 SHORT $LN14@ObjectPlac

; 3660 : 				P_SetMobjState(players[0].mo->target, S_DISS);

  002db	68 4f 06 00 00	 push	 1615			; 0000064fH
  002e0	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  002e5	6b c8 00	 imul	 ecx, eax, 0
  002e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  002ee	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 _P_SetMobjState
  002fa	83 c4 08	 add	 esp, 8
$LN14@ObjectPlac:

; 3661 : 
; 3662 : 			players[0].mo->flags2 &= ~MF2_DONTDRAW;

  002fd	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00302	6b c8 00	 imul	 ecx, eax, 0
  00305	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0030b	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00311	25 ff ff bf ff	 and	 eax, -4194305		; ffbfffffH
  00316	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0031b	6b d1 00	 imul	 edx, ecx, 0
  0031e	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  00324	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 3663 : 			players[0].mo->flags &= ~MF_NOGRAVITY;

  0032a	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0032f	6b c8 00	 imul	 ecx, eax, 0
  00332	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00338	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  0033b	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  00340	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00345	6b d1 00	 imul	 edx, ecx, 0
  00348	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  0034e	89 41 60	 mov	 DWORD PTR [ecx+96], eax
$LN13@ObjectPlac:

; 3664 : 		}
; 3665 : 
; 3666 : 		players[0].mo->flags &= ~MF_NOCLIP;

  00351	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00356	6b c8 00	 imul	 ecx, eax, 0
  00359	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0035f	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00362	25 ff ef ff ff	 and	 eax, -4097		; ffffefffH
  00367	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0036c	6b d1 00	 imul	 edx, ecx, 0
  0036f	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  00375	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 3667 : 		P_UnsetThingPosition(players[0].mo);

  00378	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  0037d	6b c8 00	 imul	 ecx, eax, 0
  00380	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  00386	52		 push	 edx
  00387	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  0038c	83 c4 04	 add	 esp, 4

; 3668 : 		players[0].mo->flags &= ~MF_NOBLOCKMAP;

  0038f	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  00394	6b c8 00	 imul	 ecx, eax, 0
  00397	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  0039d	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  003a0	83 e0 ef	 and	 eax, -17		; ffffffefH
  003a3	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  003a8	6b d1 00	 imul	 edx, ecx, 0
  003ab	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _players[edx]
  003b1	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 3669 : 		P_SetThingPosition(players[0].mo);

  003b4	b8 fc 01 00 00	 mov	 eax, 508		; 000001fcH
  003b9	6b c8 00	 imul	 ecx, eax, 0
  003bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _players[ecx]
  003c2	52		 push	 edx
  003c3	e8 00 00 00 00	 call	 _P_SetThingPosition
  003c8	83 c4 04	 add	 esp, 4
$LN12@ObjectPlac:

; 3670 : 	}
; 3671 : }

  003cb	5f		 pop	 edi
  003cc	5e		 pop	 esi
  003cd	5b		 pop	 ebx
  003ce	8b e5		 mov	 esp, ebp
  003d0	5d		 pop	 ebp
  003d1	c3		 ret	 0
_ObjectPlace_OnChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _D_MapChange
_TEXT	SEGMENT
$T1 = -76						; size = 4
_seed$2 = -5						; size = 1
_mapname$3 = -4						; size = 4
_mapnum$ = 8						; size = 4
_newgametype$ = 12					; size = 4
_pultmode$ = 16						; size = 4
_resetplayers$ = 20					; size = 4
_delay$ = 24						; size = 4
_skipprecutscene$ = 28					; size = 4
_FLS$ = 32						; size = 4
_D_MapChange PROC					; COMDAT

; 1875 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1876 : 	static char buf[MAX_WADPATH+1+5];
; 1877 : #define MAPNAME &buf[5]
; 1878 : 
; 1879 : 	// The supplied data are assumed to be good.
; 1880 : 	I_Assert(delay >= 0 && delay <= 2);
; 1881 : 
; 1882 : 	if (devparm)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _devparm, 0
  00010	74 2f		 je	 SHORT $LN2@D_MapChang

; 1883 : 		CONS_Printf(text[MAPCHANGE_DEBUG], mapnum, newgametype, pultmode, resetplayers, delay, skipprecutscene);

  00012	8b 45 1c	 mov	 eax, DWORD PTR _skipprecutscene$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 18	 mov	 ecx, DWORD PTR _delay$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 14	 mov	 edx, DWORD PTR _resetplayers$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 10	 mov	 eax, DWORD PTR _pultmode$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _newgametype$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR _mapnum$[ebp]
  00029	52		 push	 edx
  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	6b c8 69	 imul	 ecx, eax, 105
  00032	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _CONS_Printf
  0003e	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@D_MapChang:

; 1884 : 	if (delay != 2)

  00041	83 7d 18 02	 cmp	 DWORD PTR _delay$[ebp], 2
  00045	0f 84 98 00 00
	00		 je	 $LN3@D_MapChang

; 1885 : 	{
; 1886 : 		const char *mapname = G_BuildMapName(mapnum);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _mapnum$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _G_BuildMapName
  00054	83 c4 04	 add	 esp, 4
  00057	89 45 fc	 mov	 DWORD PTR _mapname$3[ebp], eax

; 1887 : 
; 1888 : 		I_Assert(W_CheckNumForName(mapname) != LUMPERROR);
; 1889 : 
; 1890 : 		strncpy(MAPNAME, mapname, MAX_WADPATH);

  0005a	68 80 00 00 00	 push	 128			; 00000080H
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _mapname$3[ebp]
  00062	50		 push	 eax
  00063	b9 01 00 00 00	 mov	 ecx, 1
  00068	6b d1 05	 imul	 edx, ecx, 5
  0006b	81 c2 00 00 00
	00		 add	 edx, OFFSET ?buf@?1??D_MapChange@@9@9
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 _strncpy
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1891 : 
; 1892 : 		buf[0] = (char)pultmode;

  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	6b c8 00	 imul	 ecx, eax, 0
  00082	8a 55 10	 mov	 dl, BYTE PTR _pultmode$[ebp]
  00085	88 91 00 00 00
	00		 mov	 BYTE PTR ?buf@?1??D_MapChange@@9@9[ecx], dl

; 1893 : 
; 1894 : 		// bit 0 doesn't currently do anything
; 1895 : 		buf[1] = 0;

  0008b	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00092	81 7d b4 86 00
	00 00		 cmp	 DWORD PTR $T1[ebp], 134	; 00000086H
  00099	73 02		 jae	 SHORT $LN12@D_MapChang
  0009b	eb 06		 jmp	 SHORT $LN13@D_MapChang
$LN12@D_MapChang:
  0009d	e8 00 00 00 00	 call	 ___report_rangecheckfailure
  000a2	90		 npad	 1
$LN13@D_MapChang:
  000a3	8b 45 b4	 mov	 eax, DWORD PTR $T1[ebp]
  000a6	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?buf@?1??D_MapChange@@9@9[eax], 0

; 1896 : 
; 1897 : 		if (!resetplayers)

  000ad	83 7d 14 00	 cmp	 DWORD PTR _resetplayers$[ebp], 0
  000b1	75 20		 jne	 SHORT $LN4@D_MapChang

; 1898 : 			buf[1] |= 2;

  000b3	b8 01 00 00 00	 mov	 eax, 1
  000b8	c1 e0 00	 shl	 eax, 0
  000bb	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ?buf@?1??D_MapChange@@9@9[eax]
  000c2	83 c9 02	 or	 ecx, 2
  000c5	ba 01 00 00 00	 mov	 edx, 1
  000ca	c1 e2 00	 shl	 edx, 0
  000cd	88 8a 00 00 00
	00		 mov	 BYTE PTR ?buf@?1??D_MapChange@@9@9[edx], cl
$LN4@D_MapChang:

; 1899 : 
; 1900 : 		// new gametype value
; 1901 : 		buf[2] = (char)newgametype;

  000d3	b8 01 00 00 00	 mov	 eax, 1
  000d8	d1 e0		 shl	 eax, 1
  000da	8a 4d 0c	 mov	 cl, BYTE PTR _newgametype$[ebp]
  000dd	88 88 00 00 00
	00		 mov	 BYTE PTR ?buf@?1??D_MapChange@@9@9[eax], cl
$LN3@D_MapChang:

; 1902 : 	}
; 1903 : 
; 1904 : 	if (delay == 1)

  000e3	83 7d 18 01	 cmp	 DWORD PTR _delay$[ebp], 1
  000e7	75 0f		 jne	 SHORT $LN5@D_MapChang

; 1905 : 		mapchangepending = 1;

  000e9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _mapchangepending, 1
  000f3	e9 e5 00 00 00	 jmp	 $LN6@D_MapChang
$LN5@D_MapChang:

; 1906 : 	else
; 1907 : 	{
; 1908 : 		mapchangepending = 0;

  000f8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _mapchangepending, 0

; 1909 : 		// spawn the server if needed
; 1910 : 		// reset players if there is a new one
; 1911 : 		if (!(adminplayer == consoleplayer) && SV_SpawnServer())

  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00107	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0010d	74 29		 je	 SHORT $LN7@D_MapChang
  0010f	e8 00 00 00 00	 call	 _SV_SpawnServer
  00114	85 c0		 test	 eax, eax
  00116	74 20		 je	 SHORT $LN7@D_MapChang

; 1912 : 			buf[1] &= ~2;

  00118	b8 01 00 00 00	 mov	 eax, 1
  0011d	c1 e0 00	 shl	 eax, 0
  00120	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ?buf@?1??D_MapChange@@9@9[eax]
  00127	83 e1 fd	 and	 ecx, -3			; fffffffdH
  0012a	ba 01 00 00 00	 mov	 edx, 1
  0012f	c1 e2 00	 shl	 edx, 0
  00132	88 8a 00 00 00
	00		 mov	 BYTE PTR ?buf@?1??D_MapChange@@9@9[edx], cl
$LN7@D_MapChang:

; 1913 : 
; 1914 : 		chmappending++;

  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR _chmappending
  0013d	83 c0 01	 add	 eax, 1
  00140	a3 00 00 00 00	 mov	 DWORD PTR _chmappending, eax

; 1915 : 		if (server && netgame)

  00145	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0014c	74 2a		 je	 SHORT $LN8@D_MapChang
  0014e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00155	74 21		 je	 SHORT $LN8@D_MapChang

; 1916 : 		{
; 1917 : 			UINT8 seed = (UINT8)(totalplaytime % 256);

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR _totalplaytime
  0015c	33 d2		 xor	 edx, edx
  0015e	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00163	f7 f1		 div	 ecx
  00165	88 55 fb	 mov	 BYTE PTR _seed$2[ebp], dl

; 1918 : 			SendNetXCmd(XD_RANDOMSEED, &seed, 1);

  00168	6a 01		 push	 1
  0016a	8d 45 fb	 lea	 eax, DWORD PTR _seed$2[ebp]
  0016d	50		 push	 eax
  0016e	6a 0f		 push	 15			; 0000000fH
  00170	e8 00 00 00 00	 call	 _SendNetXCmd
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@D_MapChang:

; 1919 : 		}
; 1920 : 
; 1921 : 		buf[3] = (char)skipprecutscene;

  00178	b8 01 00 00 00	 mov	 eax, 1
  0017d	6b c8 03	 imul	 ecx, eax, 3
  00180	8a 55 1c	 mov	 dl, BYTE PTR _skipprecutscene$[ebp]
  00183	88 91 00 00 00
	00		 mov	 BYTE PTR ?buf@?1??D_MapChange@@9@9[ecx], dl

; 1922 : 
; 1923 : 		if (netgame || multiplayer)

  00189	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00190	75 09		 jne	 SHORT $LN10@D_MapChang
  00192	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00199	74 07		 je	 SHORT $LN9@D_MapChang
$LN10@D_MapChang:

; 1924 : 			FLS = false;

  0019b	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _FLS$[ebp], 0
$LN9@D_MapChang:

; 1925 : 
; 1926 : 		buf[4] = (char)FLS;

  001a2	b8 01 00 00 00	 mov	 eax, 1
  001a7	c1 e0 02	 shl	 eax, 2
  001aa	8a 4d 20	 mov	 cl, BYTE PTR _FLS$[ebp]
  001ad	88 88 00 00 00
	00		 mov	 BYTE PTR ?buf@?1??D_MapChange@@9@9[eax], cl

; 1927 : 
; 1928 : 		SendNetXCmd(XD_MAP, buf, 5+strlen(MAPNAME)+1);

  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	6b c8 05	 imul	 ecx, eax, 5
  001bb	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?buf@?1??D_MapChange@@9@9
  001c1	51		 push	 ecx
  001c2	e8 00 00 00 00	 call	 _strlen
  001c7	83 c4 04	 add	 esp, 4
  001ca	83 c0 06	 add	 eax, 6
  001cd	50		 push	 eax
  001ce	68 00 00 00 00	 push	 OFFSET ?buf@?1??D_MapChange@@9@9
  001d3	6a 06		 push	 6
  001d5	e8 00 00 00 00	 call	 _SendNetXCmd
  001da	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@D_MapChang:

; 1929 : 	}
; 1930 : #undef MAPNAME
; 1931 : }

  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	5b		 pop	 ebx
  001e0	8b e5		 mov	 esp, ebp
  001e2	5d		 pop	 ebp
  001e3	c3		 ret	 0
_D_MapChange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _D_GameTypeChanged
_TEXT	SEGMENT
tv138 = -96						; size = 4
_buf$1 = -28						; size = 2
_i$2 = -24						; size = 4
_i$3 = -20						; size = 4
_i$4 = -16						; size = 4
_newgt$5 = -12						; size = 4
_oldgt$6 = -8						; size = 4
_j$7 = -4						; size = 4
_lastgametype$ = 8					; size = 4
_D_GameTypeChanged PROC					; COMDAT

; 3764 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3765 : 	if (netgame)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00010	0f 84 99 00 00
	00		 je	 $LN22@D_GameType

; 3766 : 	{
; 3767 : 		INT32 j;
; 3768 : 		const char *oldgt = NULL, *newgt = NULL;

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _oldgt$6[ebp], 0
  0001d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _newgt$5[ebp], 0

; 3769 : 		for (j = 0; gametype_cons_t[j].strvalue; j++)

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$7[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN4@D_GameType
$LN2@D_GameType:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _j$7[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 fc	 mov	 DWORD PTR _j$7[ebp], eax
$LN4@D_GameType:
  00036	8b 45 fc	 mov	 eax, DWORD PTR _j$7[ebp]
  00039	83 3c c5 04 00
	00 00 00	 cmp	 DWORD PTR _gametype_cons_t[eax*8+4], 0
  00041	74 3e		 je	 SHORT $LN3@D_GameType

; 3770 : 		{
; 3771 : 			if (gametype_cons_t[j].value == lastgametype)

  00043	8b 45 fc	 mov	 eax, DWORD PTR _j$7[ebp]
  00046	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8]
  0004d	3b 4d 08	 cmp	 ecx, DWORD PTR _lastgametype$[ebp]
  00050	75 0d		 jne	 SHORT $LN20@D_GameType

; 3772 : 				oldgt = gametype_cons_t[j].strvalue;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _j$7[ebp]
  00055	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8+4]
  0005c	89 4d f8	 mov	 DWORD PTR _oldgt$6[ebp], ecx
$LN20@D_GameType:

; 3773 : 			if (gametype_cons_t[j].value == gametype)

  0005f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _j$7[ebp]
  00069	39 04 cd 00 00
	00 00		 cmp	 DWORD PTR _gametype_cons_t[ecx*8], eax
  00070	75 0d		 jne	 SHORT $LN21@D_GameType

; 3774 : 				newgt = gametype_cons_t[j].strvalue;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _j$7[ebp]
  00075	8b 0c c5 04 00
	00 00		 mov	 ecx, DWORD PTR _gametype_cons_t[eax*8+4]
  0007c	89 4d f4	 mov	 DWORD PTR _newgt$5[ebp], ecx
$LN21@D_GameType:

; 3775 : 		}

  0007f	eb ac		 jmp	 SHORT $LN2@D_GameType
$LN3@D_GameType:

; 3776 : 		if (oldgt && newgt)

  00081	83 7d f8 00	 cmp	 DWORD PTR _oldgt$6[ebp], 0
  00085	74 28		 je	 SHORT $LN22@D_GameType
  00087	83 7d f4 00	 cmp	 DWORD PTR _newgt$5[ebp], 0
  0008b	74 22		 je	 SHORT $LN22@D_GameType

; 3777 : 			CONS_Printf(text[GAMETYPE_CHANGED], oldgt, newgt);

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _newgt$5[ebp]
  00090	50		 push	 eax
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _oldgt$6[ebp]
  00094	51		 push	 ecx
  00095	ba 04 00 00 00	 mov	 edx, 4
  0009a	69 c2 b5 00 00
	00		 imul	 eax, edx, 181
  000a0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 _CONS_Printf
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN22@D_GameType:

; 3778 : 	}
; 3779 : 	// Only do the following as the server, not as remote admin.
; 3780 : 	// There will always be a server, and this only needs to be done once.
; 3781 : 	if (server && (multiplayer || netgame))

  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000b6	0f 84 7e 01 00
	00		 je	 $LN23@D_GameType
  000bc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000c3	75 0d		 jne	 SHORT $LN25@D_GameType
  000c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000cc	0f 84 68 01 00
	00		 je	 $LN23@D_GameType
$LN25@D_GameType:

; 3782 : 	{
; 3783 : 		if (gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF

  000d2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000d9	83 f8 01	 cmp	 eax, 1
  000dc	74 18		 je	 SHORT $LN28@D_GameType
  000de	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000e5	83 f8 03	 cmp	 eax, 3
  000e8	74 0c		 je	 SHORT $LN28@D_GameType
  000ea	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000f1	83 f8 04	 cmp	 eax, 4
  000f4	75 11		 jne	 SHORT $LN26@D_GameType
$LN28@D_GameType:

; 3784 : #ifdef CHAOSISNOTDEADYET
; 3785 : 			|| gametype == GT_CHAOS
; 3786 : #endif
; 3787 : 			)
; 3788 : 		{
; 3789 : 			CV_SetValue(&cv_itemrespawn, 1);

  000f6	6a 01		 push	 1
  000f8	68 00 00 00 00	 push	 OFFSET _cv_itemrespawn
  000fd	e8 00 00 00 00	 call	 _CV_SetValue
  00102	83 c4 08	 add	 esp, 8

; 3790 : 		}

  00105	eb 0f		 jmp	 SHORT $LN27@D_GameType
$LN26@D_GameType:

; 3791 : 		else
; 3792 : 			CV_SetValue(&cv_itemrespawn, 0);

  00107	6a 00		 push	 0
  00109	68 00 00 00 00	 push	 OFFSET _cv_itemrespawn
  0010e	e8 00 00 00 00	 call	 _CV_SetValue
  00113	83 c4 08	 add	 esp, 8
$LN27@D_GameType:

; 3793 : 
; 3794 : 		switch (gametype)

  00116	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0011d	89 45 a0	 mov	 DWORD PTR tv138[ebp], eax
  00120	83 7d a0 01	 cmp	 DWORD PTR tv138[ebp], 1
  00124	74 15		 je	 SHORT $LN29@D_GameType
  00126	83 7d a0 03	 cmp	 DWORD PTR tv138[ebp], 3
  0012a	74 66		 je	 SHORT $LN32@D_GameType
  0012c	83 7d a0 04	 cmp	 DWORD PTR tv138[ebp], 4
  00130	0f 84 b0 00 00
	00		 je	 $LN35@D_GameType
  00136	e9 fd 00 00 00	 jmp	 $LN5@D_GameType
$LN29@D_GameType:

; 3795 : 		{
; 3796 : #ifdef CHAOSISNOTDEADYET
; 3797 : 			case GT_CHAOS:
; 3798 : 				if (!cv_timelimit.changed && !cv_pointlimit.changed) // user hasn't changed limits
; 3799 : 				{
; 3800 : 					// default settings for chaos: timelimit 2 mins, no pointlimit
; 3801 : 					CV_SetValue(&cv_pointlimit, 0);
; 3802 : 					CV_SetValue(&cv_timelimit, 2);
; 3803 : 				}
; 3804 : 				if (!cv_itemrespawntime.changed)
; 3805 : 					CV_SetValue(&cv_itemrespawntime, 90); // respawn sparingly in chaos
; 3806 : 				break;
; 3807 : #endif
; 3808 : 			case GT_MATCH:
; 3809 : 				if (!cv_timelimit.changed && !cv_pointlimit.changed) // user hasn't changed limits

  0013b	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_timelimit+34
  00142	85 c0		 test	 eax, eax
  00144	75 29		 jne	 SHORT $LN30@D_GameType
  00146	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_pointlimit+34
  0014d	85 c0		 test	 eax, eax
  0014f	75 1e		 jne	 SHORT $LN30@D_GameType

; 3810 : 				{
; 3811 : 					// default settings for match: timelimit 5 mins, no pointlimit
; 3812 : 					CV_SetValue(&cv_pointlimit, 0);

  00151	6a 00		 push	 0
  00153	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  00158	e8 00 00 00 00	 call	 _CV_SetValue
  0015d	83 c4 08	 add	 esp, 8

; 3813 : 					CV_SetValue(&cv_timelimit, 5);

  00160	6a 05		 push	 5
  00162	68 00 00 00 00	 push	 OFFSET _cv_timelimit
  00167	e8 00 00 00 00	 call	 _CV_SetValue
  0016c	83 c4 08	 add	 esp, 8
$LN30@D_GameType:

; 3814 : 				}
; 3815 : 				if (!cv_itemrespawntime.changed)

  0016f	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_itemrespawntime+34
  00176	85 c0		 test	 eax, eax
  00178	75 13		 jne	 SHORT $LN31@D_GameType

; 3816 : 					CV_Set(&cv_itemrespawntime, cv_itemrespawntime.defaultvalue); // respawn normally

  0017a	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_itemrespawntime+4
  0017f	50		 push	 eax
  00180	68 00 00 00 00	 push	 OFFSET _cv_itemrespawntime
  00185	e8 00 00 00 00	 call	 _CV_Set
  0018a	83 c4 08	 add	 esp, 8
$LN31@D_GameType:

; 3817 : 				break;

  0018d	e9 a6 00 00 00	 jmp	 $LN5@D_GameType
$LN32@D_GameType:

; 3818 : 			case GT_TAG:
; 3819 : 				if (!cv_timelimit.changed && !cv_pointlimit.changed) // user hasn't changed limits

  00192	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_timelimit+34
  00199	85 c0		 test	 eax, eax
  0019b	75 29		 jne	 SHORT $LN33@D_GameType
  0019d	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_pointlimit+34
  001a4	85 c0		 test	 eax, eax
  001a6	75 1e		 jne	 SHORT $LN33@D_GameType

; 3820 : 				{
; 3821 : 					// default settings for tag: 3 mins, no pointlimit
; 3822 : 					// Note that tag mode also uses an alternate timing mechanism in tandem with timelimit.
; 3823 : 					CV_SetValue(&cv_timelimit, 3);

  001a8	6a 03		 push	 3
  001aa	68 00 00 00 00	 push	 OFFSET _cv_timelimit
  001af	e8 00 00 00 00	 call	 _CV_SetValue
  001b4	83 c4 08	 add	 esp, 8

; 3824 : 					CV_SetValue(&cv_pointlimit, 0);

  001b7	6a 00		 push	 0
  001b9	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  001be	e8 00 00 00 00	 call	 _CV_SetValue
  001c3	83 c4 08	 add	 esp, 8
$LN33@D_GameType:

; 3825 : 				}
; 3826 : 				if (!cv_itemrespawntime.changed)

  001c6	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_itemrespawntime+34
  001cd	85 c0		 test	 eax, eax
  001cf	75 13		 jne	 SHORT $LN34@D_GameType

; 3827 : 					CV_Set(&cv_itemrespawntime, cv_itemrespawntime.defaultvalue); // respawn normally

  001d1	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_itemrespawntime+4
  001d6	50		 push	 eax
  001d7	68 00 00 00 00	 push	 OFFSET _cv_itemrespawntime
  001dc	e8 00 00 00 00	 call	 _CV_Set
  001e1	83 c4 08	 add	 esp, 8
$LN34@D_GameType:

; 3828 : 				break;

  001e4	eb 52		 jmp	 SHORT $LN5@D_GameType
$LN35@D_GameType:

; 3829 : 			case GT_CTF:
; 3830 : 				if (!cv_timelimit.changed && !cv_pointlimit.changed) // user hasn't changed limits

  001e6	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_timelimit+34
  001ed	85 c0		 test	 eax, eax
  001ef	75 29		 jne	 SHORT $LN36@D_GameType
  001f1	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_pointlimit+34
  001f8	85 c0		 test	 eax, eax
  001fa	75 1e		 jne	 SHORT $LN36@D_GameType

; 3831 : 				{
; 3832 : 					// default settings for CTF: no timelimit, pointlimit 5
; 3833 : 					CV_SetValue(&cv_timelimit, 0);

  001fc	6a 00		 push	 0
  001fe	68 00 00 00 00	 push	 OFFSET _cv_timelimit
  00203	e8 00 00 00 00	 call	 _CV_SetValue
  00208	83 c4 08	 add	 esp, 8

; 3834 : 					CV_SetValue(&cv_pointlimit, 5);

  0020b	6a 05		 push	 5
  0020d	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  00212	e8 00 00 00 00	 call	 _CV_SetValue
  00217	83 c4 08	 add	 esp, 8
$LN36@D_GameType:

; 3835 : 				}
; 3836 : 				if (!cv_itemrespawntime.changed)

  0021a	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_itemrespawntime+34
  00221	85 c0		 test	 eax, eax
  00223	75 13		 jne	 SHORT $LN37@D_GameType

; 3837 : 					CV_Set(&cv_itemrespawntime, cv_itemrespawntime.defaultvalue); // respawn normally

  00225	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_itemrespawntime+4
  0022a	50		 push	 eax
  0022b	68 00 00 00 00	 push	 OFFSET _cv_itemrespawntime
  00230	e8 00 00 00 00	 call	 _CV_Set
  00235	83 c4 08	 add	 esp, 8
$LN37@D_GameType:
$LN5@D_GameType:

; 3838 : 				break;
; 3839 : 		}
; 3840 : 	}

  00238	eb 3c		 jmp	 SHORT $LN38@D_GameType
$LN23@D_GameType:

; 3841 : 	else if (!multiplayer && !netgame)

  0023a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00241	75 33		 jne	 SHORT $LN38@D_GameType
  00243	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0024a	75 2a		 jne	 SHORT $LN38@D_GameType

; 3842 : 	{
; 3843 : 		gametype = GT_COOP;

  0024c	33 c0		 xor	 eax, eax
  0024e	66 a3 00 00 00
	00		 mov	 WORD PTR _gametype, ax

; 3844 : 		CV_Set(&cv_itemrespawntime, cv_itemrespawntime.defaultvalue);

  00254	a1 04 00 00 00	 mov	 eax, DWORD PTR _cv_itemrespawntime+4
  00259	50		 push	 eax
  0025a	68 00 00 00 00	 push	 OFFSET _cv_itemrespawntime
  0025f	e8 00 00 00 00	 call	 _CV_Set
  00264	83 c4 08	 add	 esp, 8

; 3845 : 		CV_SetValue(&cv_itemrespawn, 0);

  00267	6a 00		 push	 0
  00269	68 00 00 00 00	 push	 OFFSET _cv_itemrespawn
  0026e	e8 00 00 00 00	 call	 _CV_SetValue
  00273	83 c4 08	 add	 esp, 8
$LN38@D_GameType:

; 3846 : 	}
; 3847 : 
; 3848 : 	if (server && gametype != GT_MATCH)

  00276	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0027d	74 1b		 je	 SHORT $LN39@D_GameType
  0027f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00286	83 f8 01	 cmp	 eax, 1
  00289	74 0f		 je	 SHORT $LN39@D_GameType

; 3849 : 		CV_SetValue(&cv_matchtype, 0);

  0028b	6a 00		 push	 0
  0028d	68 00 00 00 00	 push	 OFFSET _cv_matchtype
  00292	e8 00 00 00 00	 call	 _CV_SetValue
  00297	83 c4 08	 add	 esp, 8
$LN39@D_GameType:

; 3850 : 
; 3851 : 	if (server && gametype != GT_TAG)

  0029a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  002a1	74 1b		 je	 SHORT $LN40@D_GameType
  002a3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002aa	83 f8 03	 cmp	 eax, 3
  002ad	74 0f		 je	 SHORT $LN40@D_GameType

; 3852 : 		CV_SetValue(&cv_tagtype, 0);

  002af	6a 00		 push	 0
  002b1	68 00 00 00 00	 push	 OFFSET _cv_tagtype
  002b6	e8 00 00 00 00	 call	 _CV_SetValue
  002bb	83 c4 08	 add	 esp, 8
$LN40@D_GameType:

; 3853 : 
; 3854 : 	// reset timelimit and pointlimit in race/coop, prevent stupid cheats
; 3855 : 	if (server && (gametype == GT_RACE || gametype == GT_COOP))

  002be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  002c5	74 47		 je	 SHORT $LN44@D_GameType
  002c7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002ce	83 f8 02	 cmp	 eax, 2
  002d1	74 0b		 je	 SHORT $LN42@D_GameType
  002d3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002da	85 c0		 test	 eax, eax
  002dc	75 30		 jne	 SHORT $LN44@D_GameType
$LN42@D_GameType:

; 3856 : 	{
; 3857 : 		if (cv_timelimit.value)

  002de	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_timelimit+20, 0
  002e5	74 0f		 je	 SHORT $LN43@D_GameType

; 3858 : 			CV_SetValue(&cv_timelimit, 0);

  002e7	6a 00		 push	 0
  002e9	68 00 00 00 00	 push	 OFFSET _cv_timelimit
  002ee	e8 00 00 00 00	 call	 _CV_SetValue
  002f3	83 c4 08	 add	 esp, 8
$LN43@D_GameType:

; 3859 : 		if (cv_pointlimit.value)

  002f6	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pointlimit+20, 0
  002fd	74 0f		 je	 SHORT $LN44@D_GameType

; 3860 : 			CV_SetValue(&cv_pointlimit, 0);

  002ff	6a 00		 push	 0
  00301	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  00306	e8 00 00 00 00	 call	 _CV_SetValue
  0030b	83 c4 08	 add	 esp, 8
$LN44@D_GameType:

; 3861 : 	}
; 3862 : 
; 3863 : 	if ((cv_pointlimit.changed || cv_timelimit.changed) && cv_pointlimit.value)

  0030e	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_pointlimit+34
  00315	85 c0		 test	 eax, eax
  00317	75 0b		 jne	 SHORT $LN46@D_GameType
  00319	0f be 05 22 00
	00 00		 movsx	 eax, BYTE PTR _cv_timelimit+34
  00320	85 c0		 test	 eax, eax
  00322	74 74		 je	 SHORT $LN50@D_GameType
$LN46@D_GameType:
  00324	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pointlimit+20, 0
  0032b	74 6b		 je	 SHORT $LN50@D_GameType

; 3864 : 	{
; 3865 : 		if ((
; 3866 : #ifdef CHAOSISNOTDEADYET
; 3867 : 			lastgametype == GT_CHAOS ||
; 3868 : #endif
; 3869 : 			lastgametype == GT_MATCH ||
; 3870 : 			lastgametype == GT_TAG) &&

  0032d	83 7d 08 01	 cmp	 DWORD PTR _lastgametype$[ebp], 1
  00331	74 06		 je	 SHORT $LN49@D_GameType
  00333	83 7d 08 03	 cmp	 DWORD PTR _lastgametype$[ebp], 3
  00337	75 29		 jne	 SHORT $LN47@D_GameType
$LN49@D_GameType:
  00339	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00340	83 f8 04	 cmp	 eax, 4
  00343	75 1d		 jne	 SHORT $LN47@D_GameType

; 3871 : 			gametype == GT_CTF)
; 3872 : 			CV_SetValue(&cv_pointlimit, cv_pointlimit.value / 500);

  00345	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_pointlimit+20
  0034a	99		 cdq
  0034b	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00350	f7 f9		 idiv	 ecx
  00352	50		 push	 eax
  00353	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  00358	e8 00 00 00 00	 call	 _CV_SetValue
  0035d	83 c4 08	 add	 esp, 8
  00360	eb 36		 jmp	 SHORT $LN50@D_GameType
$LN47@D_GameType:

; 3873 : 		else if (lastgametype == GT_CTF &&

  00362	83 7d 08 04	 cmp	 DWORD PTR _lastgametype$[ebp], 4
  00366	75 30		 jne	 SHORT $LN50@D_GameType
  00368	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0036f	83 f8 01	 cmp	 eax, 1
  00372	74 0c		 je	 SHORT $LN51@D_GameType
  00374	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0037b	83 f8 03	 cmp	 eax, 3
  0037e	75 18		 jne	 SHORT $LN50@D_GameType
$LN51@D_GameType:

; 3874 : 			(
; 3875 : #ifdef CHAOSISNOTDEADYET
; 3876 : 			gametype == GT_CHAOS ||
; 3877 : #endif
; 3878 : 			gametype == GT_MATCH ||
; 3879 : 			gametype == GT_TAG))
; 3880 : 			CV_SetValue(&cv_pointlimit, cv_pointlimit.value * 500);

  00380	69 05 14 00 00
	00 f4 01 00 00	 imul	 eax, DWORD PTR _cv_pointlimit+20, 500
  0038a	50		 push	 eax
  0038b	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  00390	e8 00 00 00 00	 call	 _CV_SetValue
  00395	83 c4 08	 add	 esp, 8
$LN50@D_GameType:

; 3881 : 	}
; 3882 : 
; 3883 : 	// When swapping to a gametype that supports spectators,
; 3884 : 	// make everyone a spectator initially.
; 3885 : 	if (gametype == GT_CTF || gametype == GT_MATCH || gametype == GT_TAG)

  00398	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0039f	83 f8 04	 cmp	 eax, 4
  003a2	74 18		 je	 SHORT $LN53@D_GameType
  003a4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003ab	83 f8 01	 cmp	 eax, 1
  003ae	74 0c		 je	 SHORT $LN53@D_GameType
  003b0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  003b7	83 f8 03	 cmp	 eax, 3
  003ba	75 46		 jne	 SHORT $LN8@D_GameType
$LN53@D_GameType:

; 3886 : 	{
; 3887 : 		INT32 i;
; 3888 : 		for (i = 0; i < MAXPLAYERS; i++)

  003bc	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  003c3	eb 09		 jmp	 SHORT $LN9@D_GameType
$LN7@D_GameType:
  003c5	8b 45 f0	 mov	 eax, DWORD PTR _i$4[ebp]
  003c8	83 c0 01	 add	 eax, 1
  003cb	89 45 f0	 mov	 DWORD PTR _i$4[ebp], eax
$LN9@D_GameType:
  003ce	83 7d f0 20	 cmp	 DWORD PTR _i$4[ebp], 32	; 00000020H
  003d2	7d 2e		 jge	 SHORT $LN8@D_GameType

; 3889 : 			if (playeringame[i])

  003d4	8b 45 f0	 mov	 eax, DWORD PTR _i$4[ebp]
  003d7	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  003df	74 1f		 je	 SHORT $LN54@D_GameType

; 3890 : 			{
; 3891 : 				players[i].ctfteam = 0;

  003e1	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$4[ebp], 508
  003e8	c7 80 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+352], 0

; 3892 : 				players[i].spectator = true;

  003f2	69 45 f0 fc 01
	00 00		 imul	 eax, DWORD PTR _i$4[ebp], 508
  003f9	c6 80 f0 01 00
	00 01		 mov	 BYTE PTR _players[eax+496], 1
$LN54@D_GameType:

; 3893 : 			}

  00400	eb c3		 jmp	 SHORT $LN7@D_GameType
$LN8@D_GameType:

; 3894 : 	}
; 3895 : 
; 3896 : 	// don't retain teams in other modes or between changes from ctf to team match.
; 3897 : 	// also, stop any and all forms of team scrambling that might otherwise take place.
; 3898 : 	if (lastgametype == GT_CTF || lastgametype == GT_MATCH)

  00402	83 7d 08 04	 cmp	 DWORD PTR _lastgametype$[ebp], 4
  00406	74 06		 je	 SHORT $LN56@D_GameType
  00408	83 7d 08 01	 cmp	 DWORD PTR _lastgametype$[ebp], 1
  0040c	75 65		 jne	 SHORT $LN58@D_GameType
$LN56@D_GameType:

; 3899 : 	{
; 3900 : 		INT32 i;
; 3901 : 		for (i = 0; i < MAXPLAYERS; i++)

  0040e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00415	eb 09		 jmp	 SHORT $LN12@D_GameType
$LN10@D_GameType:
  00417	8b 45 ec	 mov	 eax, DWORD PTR _i$3[ebp]
  0041a	83 c0 01	 add	 eax, 1
  0041d	89 45 ec	 mov	 DWORD PTR _i$3[ebp], eax
$LN12@D_GameType:
  00420	83 7d ec 20	 cmp	 DWORD PTR _i$3[ebp], 32	; 00000020H
  00424	7d 20		 jge	 SHORT $LN11@D_GameType

; 3902 : 			if (playeringame[i])

  00426	8b 45 ec	 mov	 eax, DWORD PTR _i$3[ebp]
  00429	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  00431	74 11		 je	 SHORT $LN57@D_GameType

; 3903 : 				players[i].ctfteam = 0;

  00433	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 508
  0043a	c7 80 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR _players[eax+352], 0
$LN57@D_GameType:
  00444	eb d1		 jmp	 SHORT $LN10@D_GameType
$LN11@D_GameType:

; 3904 : 
; 3905 : 		if (server || (adminplayer == consoleplayer))

  00446	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  0044d	75 0d		 jne	 SHORT $LN59@D_GameType
  0044f	a1 00 00 00 00	 mov	 eax, DWORD PTR _adminplayer
  00454	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _consoleplayer
  0045a	75 17		 jne	 SHORT $LN58@D_GameType
$LN59@D_GameType:

; 3906 : 		{
; 3907 : 			CV_StealthSetValue(&cv_teamscramble, 0);

  0045c	6a 00		 push	 0
  0045e	68 00 00 00 00	 push	 OFFSET _cv_teamscramble
  00463	e8 00 00 00 00	 call	 _CV_StealthSetValue
  00468	83 c4 08	 add	 esp, 8

; 3908 : 			teamscramble = 0;

  0046b	33 c0		 xor	 eax, eax
  0046d	66 a3 00 00 00
	00		 mov	 WORD PTR _teamscramble, ax
$LN58@D_GameType:

; 3909 : 		}
; 3910 : 	}
; 3911 : 
; 3912 : 	// make sure no players retain the color yellow if swapping to match or CTF.
; 3913 : 	// todo: This block is very unwieldy. Make a way for the server to force changing of color. -Jazz
; 3914 : 	if (gametype == GT_CTF || gametype == GT_MATCH)

  00473	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0047a	83 f8 04	 cmp	 eax, 4
  0047d	74 10		 je	 SHORT $LN61@D_GameType
  0047f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00486	83 f8 01	 cmp	 eax, 1
  00489	0f 85 33 01 00
	00		 jne	 $LN17@D_GameType
$LN61@D_GameType:

; 3915 : 	{
; 3916 : 		INT32 i;
; 3917 : 		for (i = 0; i < MAXPLAYERS; i++)

  0048f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00496	eb 09		 jmp	 SHORT $LN15@D_GameType
$LN13@D_GameType:
  00498	8b 45 e8	 mov	 eax, DWORD PTR _i$2[ebp]
  0049b	83 c0 01	 add	 eax, 1
  0049e	89 45 e8	 mov	 DWORD PTR _i$2[ebp], eax
$LN15@D_GameType:
  004a1	83 7d e8 20	 cmp	 DWORD PTR _i$2[ebp], 32	; 00000020H
  004a5	7d 77		 jge	 SHORT $LN14@D_GameType

; 3918 : 		{
; 3919 : 			if (playeringame[i] && players[i].skincolor == 15)

  004a7	8b 45 e8	 mov	 eax, DWORD PTR _i$2[ebp]
  004aa	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  004b2	74 65		 je	 SHORT $LN65@D_GameType
  004b4	69 45 e8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$2[ebp], 508
  004bb	83 b8 b4 00 00
	00 0f		 cmp	 DWORD PTR _players[eax+180], 15 ; 0000000fH
  004c2	75 55		 jne	 SHORT $LN65@D_GameType

; 3920 : 			{
; 3921 : 				players[i].skincolor = players[i].prefcolor;

  004c4	69 45 e8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$2[ebp], 508
  004cb	69 4d e8 fc 01
	00 00		 imul	 ecx, DWORD PTR _i$2[ebp], 508
  004d2	8b 90 fc 00 00
	00		 mov	 edx, DWORD PTR _players[eax+252]
  004d8	89 91 b4 00 00
	00		 mov	 DWORD PTR _players[ecx+180], edx

; 3922 : 				if (splitscreen && (i == secondarydisplayplayer))

  004de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  004e5	74 13		 je	 SHORT $LN63@D_GameType
  004e7	8b 45 e8	 mov	 eax, DWORD PTR _i$2[ebp]
  004ea	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _secondarydisplayplayer
  004f0	75 08		 jne	 SHORT $LN63@D_GameType

; 3923 : 					SendNameAndColor2();

  004f2	e8 00 00 00 00	 call	 _SendNameAndColor2
  004f7	90		 npad	 1
  004f8	eb 1f		 jmp	 SHORT $LN65@D_GameType
$LN63@D_GameType:

; 3924 : 				else
; 3925 : 				{
; 3926 : 					if (P_IsLocalPlayer(&players[i]))

  004fa	69 45 e8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$2[ebp], 508
  00501	05 00 00 00 00	 add	 eax, OFFSET _players
  00506	50		 push	 eax
  00507	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  0050c	83 c4 04	 add	 esp, 4
  0050f	85 c0		 test	 eax, eax
  00511	74 06		 je	 SHORT $LN65@D_GameType

; 3927 : 						SendNameAndColor();

  00513	e8 00 00 00 00	 call	 _SendNameAndColor
  00518	90		 npad	 1
$LN65@D_GameType:

; 3928 : 				}
; 3929 : 			}
; 3930 : 		}

  00519	e9 7a ff ff ff	 jmp	 $LN13@D_GameType
$LN14@D_GameType:

; 3931 : 
; 3932 : 		// if an unscrupulous player deletes the above code block,
; 3933 : 		// the server will catch them and kick them from the netgame.
; 3934 : 		if (server)

  0051e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00525	0f 84 97 00 00
	00		 je	 $LN17@D_GameType

; 3935 : 		{
; 3936 : 			for (i = 0; i < MAXPLAYERS; i++)

  0052b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00532	eb 09		 jmp	 SHORT $LN18@D_GameType
$LN16@D_GameType:
  00534	8b 45 e8	 mov	 eax, DWORD PTR _i$2[ebp]
  00537	83 c0 01	 add	 eax, 1
  0053a	89 45 e8	 mov	 DWORD PTR _i$2[ebp], eax
$LN18@D_GameType:
  0053d	83 7d e8 20	 cmp	 DWORD PTR _i$2[ebp], 32	; 00000020H
  00541	7d 7f		 jge	 SHORT $LN17@D_GameType

; 3937 : 			{
; 3938 : 				if (players[i].skincolor == 15)

  00543	69 45 e8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$2[ebp], 508
  0054a	83 b8 b4 00 00
	00 0f		 cmp	 DWORD PTR _players[eax+180], 15 ; 0000000fH
  00551	75 6a		 jne	 SHORT $LN67@D_GameType

; 3939 : 				{
; 3940 : 					XBOXSTATIC UINT8 buf[2];
; 3941 : 					CONS_Printf(text[ILLEGALCOLORCMD], player_names[i], players[i].ctfteam, players[i].skincolor);

  00553	69 45 e8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$2[ebp], 508
  0055a	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+180]
  00560	51		 push	 ecx
  00561	69 55 e8 fc 01
	00 00		 imul	 edx, DWORD PTR _i$2[ebp], 508
  00568	8b 82 60 01 00
	00		 mov	 eax, DWORD PTR _players[edx+352]
  0056e	50		 push	 eax
  0056f	6b 4d e8 16	 imul	 ecx, DWORD PTR _i$2[ebp], 22
  00573	81 c1 00 00 00
	00		 add	 ecx, OFFSET _player_names
  00579	51		 push	 ecx
  0057a	ba 04 00 00 00	 mov	 edx, 4
  0057f	6b c2 5b	 imul	 eax, edx, 91
  00582	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _text[eax]
  00588	51		 push	 ecx
  00589	e8 00 00 00 00	 call	 _CONS_Printf
  0058e	83 c4 10	 add	 esp, 16			; 00000010H

; 3942 : 
; 3943 : 					buf[0] = (UINT8)i;

  00591	b8 01 00 00 00	 mov	 eax, 1
  00596	6b c8 00	 imul	 ecx, eax, 0
  00599	8a 55 e8	 mov	 dl, BYTE PTR _i$2[ebp]
  0059c	88 54 0d e4	 mov	 BYTE PTR _buf$1[ebp+ecx], dl

; 3944 : 					buf[1] = KICK_MSG_CON_FAIL;

  005a0	b8 01 00 00 00	 mov	 eax, 1
  005a5	c1 e0 00	 shl	 eax, 0
  005a8	c6 44 05 e4 02	 mov	 BYTE PTR _buf$1[ebp+eax], 2

; 3945 : 					SendNetXCmd(XD_KICK, &buf, 2);

  005ad	6a 02		 push	 2
  005af	8d 45 e4	 lea	 eax, DWORD PTR _buf$1[ebp]
  005b2	50		 push	 eax
  005b3	6a 03		 push	 3
  005b5	e8 00 00 00 00	 call	 _SendNetXCmd
  005ba	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN67@D_GameType:

; 3946 : 				}
; 3947 : 			}

  005bd	e9 72 ff ff ff	 jmp	 $LN16@D_GameType
$LN17@D_GameType:

; 3948 : 		}
; 3949 : 	}
; 3950 : }

  005c2	5f		 pop	 edi
  005c3	5e		 pop	 esi
  005c4	5b		 pop	 ebx
  005c5	8b e5		 mov	 esp, ebp
  005c7	5d		 pop	 ebp
  005c8	c3		 ret	 0
_D_GameTypeChanged ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _Command_ExitGame_f
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Command_ExitGame_f PROC				; COMDAT

; 4513 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4514 : 	INT32 i;
; 4515 : 
; 4516 : 	D_QuitNetGame();

  00009	e8 00 00 00 00	 call	 _D_QuitNetGame
  0000e	90		 npad	 1

; 4517 : 	CL_Reset();

  0000f	e8 00 00 00 00	 call	 _CL_Reset
  00014	90		 npad	 1

; 4518 : 	CV_ClearChangedFlags();

  00015	e8 00 00 00 00	 call	 _CV_ClearChangedFlags
  0001a	90		 npad	 1

; 4519 : 
; 4520 : 	for (i = 0; i < MAXPLAYERS; i++)

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN4@Command_Ex
$LN2@Command_Ex:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Command_Ex:
  0002d	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00031	7d 0e		 jge	 SHORT $LN3@Command_Ex

; 4521 : 		CL_ClearPlayer(i);

  00033	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _CL_ClearPlayer
  0003c	83 c4 04	 add	 esp, 4
  0003f	eb e3		 jmp	 SHORT $LN2@Command_Ex
$LN3@Command_Ex:

; 4522 : 
; 4523 : 	splitscreen = false;

  00041	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _splitscreen, 0

; 4524 : 	SplitScreen_OnChange();

  0004b	e8 00 00 00 00	 call	 _SplitScreen_OnChange
  00050	90		 npad	 1

; 4525 : 	cv_debug = 0;

  00051	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _cv_debug, 0

; 4526 : 	emeralds = 0;

  0005b	33 c0		 xor	 eax, eax
  0005d	66 a3 00 00 00
	00		 mov	 WORD PTR _emeralds, ax

; 4527 : 
; 4528 : 	if (!timeattacking)

  00063	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  0006a	75 06		 jne	 SHORT $LN5@Command_Ex

; 4529 : 		D_StartTitle();

  0006c	e8 00 00 00 00	 call	 _D_StartTitle
  00071	90		 npad	 1
$LN5@Command_Ex:

; 4530 : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_Command_ExitGame_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _D_SendPlayerConfig
_TEXT	SEGMENT
_D_SendPlayerConfig PROC				; COMDAT

; 1591 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1592 : 	SendNameAndColor();

  00009	e8 00 00 00 00	 call	 _SendNameAndColor
  0000e	90		 npad	 1

; 1593 : 	if (splitscreen)

  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00016	74 06		 je	 SHORT $LN2@D_SendPlay

; 1594 : 		SendNameAndColor2();

  00018	e8 00 00 00 00	 call	 _SendNameAndColor2
  0001d	90		 npad	 1
$LN2@D_SendPlay:

; 1595 : 	SendWeaponPref();

  0001e	e8 00 00 00 00	 call	 _SendWeaponPref
  00023	90		 npad	 1

; 1596 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_D_SendPlayerConfig ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _D_RegisterClientCommands
_TEXT	SEGMENT
_i$ = -8						; size = 4
_username$ = -4						; size = 4
_D_RegisterClientCommands PROC				; COMDAT

; 622  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 623  : 	const char *username;
; 624  : 	INT32 i;
; 625  : 
; 626  : 	for (i = 0; i < MAXSKINCOLORS; i++)

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@D_Register
$LN2@D_Register:
  00012	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@D_Register:
  0001b	83 7d f8 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0001f	7d 23		 jge	 SHORT $LN3@D_Register

; 627  : 	{
; 628  : 		Color_cons_t[i].value = i;

  00021	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00027	89 0c c5 00 00
	00 00		 mov	 DWORD PTR _Color_cons_t[eax*8], ecx

; 629  : 		Color_cons_t[i].strvalue = Color_Names[i];

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00034	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _Color_Names[ecx*4]
  0003b	89 14 c5 04 00
	00 00		 mov	 DWORD PTR _Color_cons_t[eax*8+4], edx

; 630  : 	}

  00042	eb ce		 jmp	 SHORT $LN2@D_Register
$LN3@D_Register:

; 631  : 	Color_cons_t[MAXSKINCOLORS].value = 0;

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	c1 e0 04	 shl	 eax, 4
  0004c	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _Color_cons_t[eax], 0

; 632  : 	Color_cons_t[MAXSKINCOLORS].strvalue = NULL;

  00056	b8 08 00 00 00	 mov	 eax, 8
  0005b	c1 e0 04	 shl	 eax, 4
  0005e	c7 80 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _Color_cons_t[eax+4], 0

; 633  : 
; 634  : 	if (dedicated)

  00068	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _dedicated, 0
  0006f	74 05		 je	 SHORT $LN5@D_Register

; 635  : 		return;

  00071	e9 25 06 00 00	 jmp	 $LN1@D_Register
$LN5@D_Register:

; 636  : 
; 637  : 	COM_AddCommand("numthinkers", Command_Numthinkers_f);

  00076	68 00 00 00 00	 push	 OFFSET _Command_Numthinkers_f
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NNMJGOFK@numthinkers@
  00080	e8 00 00 00 00	 call	 _COM_AddCommand
  00085	83 c4 08	 add	 esp, 8

; 638  : 	COM_AddCommand("countmobjs", Command_CountMobjs_f);

  00088	68 00 00 00 00	 push	 OFFSET _Command_CountMobjs_f
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GFKFIGKP@countmobjs@
  00092	e8 00 00 00 00	 call	 _COM_AddCommand
  00097	83 c4 08	 add	 esp, 8

; 639  : 
; 640  : 	COM_AddCommand("changeteam", Command_Teamchange_f);

  0009a	68 00 00 00 00	 push	 OFFSET _Command_Teamchange_f
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JOMDMEIB@changeteam@
  000a4	e8 00 00 00 00	 call	 _COM_AddCommand
  000a9	83 c4 08	 add	 esp, 8

; 641  : 	COM_AddCommand("changeteam2", Command_Teamchange2_f);

  000ac	68 00 00 00 00	 push	 OFFSET _Command_Teamchange2_f
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HHFBCEAD@changeteam2@
  000b6	e8 00 00 00 00	 call	 _COM_AddCommand
  000bb	83 c4 08	 add	 esp, 8

; 642  : 
; 643  : 	COM_AddCommand("playdemo", Command_Playdemo_f);

  000be	68 00 00 00 00	 push	 OFFSET _Command_Playdemo_f
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_08KNNNHPIP@playdemo@
  000c8	e8 00 00 00 00	 call	 _COM_AddCommand
  000cd	83 c4 08	 add	 esp, 8

; 644  : 	COM_AddCommand("timedemo", Command_Timedemo_f);

  000d0	68 00 00 00 00	 push	 OFFSET _Command_Timedemo_f
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_08LGFIIHD@timedemo@
  000da	e8 00 00 00 00	 call	 _COM_AddCommand
  000df	83 c4 08	 add	 esp, 8

; 645  : 	COM_AddCommand("stopdemo", Command_Stopdemo_f);

  000e2	68 00 00 00 00	 push	 OFFSET _Command_Stopdemo_f
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_08EMDOEDEB@stopdemo@
  000ec	e8 00 00 00 00	 call	 _COM_AddCommand
  000f1	83 c4 08	 add	 esp, 8

; 646  : 	//COM_AddCommand("startmovie", Command_StartMovie_f);
; 647  : 	//COM_AddCommand("stopmovie", Command_StopMovie_f);
; 648  : 	COM_AddCommand("teleport", Command_Teleport_f);

  000f4	68 00 00 00 00	 push	 OFFSET _Command_Teleport_f
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_08LOCMGIHJ@teleport@
  000fe	e8 00 00 00 00	 call	 _COM_AddCommand
  00103	83 c4 08	 add	 esp, 8

; 649  : 	COM_AddCommand("rteleport", Command_RTeleport_f);

  00106	68 00 00 00 00	 push	 OFFSET _Command_RTeleport_f
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_09EJBDEBAE@rteleport@
  00110	e8 00 00 00 00	 call	 _COM_AddCommand
  00115	83 c4 08	 add	 esp, 8

; 650  : 	COM_AddCommand("playintro", Command_Playintro_f);

  00118	68 00 00 00 00	 push	 OFFSET _Command_Playintro_f
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_09GNGODOFP@playintro@
  00122	e8 00 00 00 00	 call	 _COM_AddCommand
  00127	83 c4 08	 add	 esp, 8

; 651  : 	COM_AddCommand("writethings", Command_Writethings_f);

  0012a	68 00 00 00 00	 push	 OFFSET _Command_Writethings_f
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JANBLCPG@writethings@
  00134	e8 00 00 00 00	 call	 _COM_AddCommand
  00139	83 c4 08	 add	 esp, 8

; 652  : 
; 653  : 	COM_AddCommand("orderpizza", Command_OrderPizza_f);

  0013c	68 00 00 00 00	 push	 OFFSET _Command_OrderPizza_f
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PJJJCJFI@orderpizza@
  00146	e8 00 00 00 00	 call	 _COM_AddCommand
  0014b	83 c4 08	 add	 esp, 8

; 654  : 
; 655  : 	COM_AddCommand("resetcamera", Command_ResetCamera_f);

  0014e	68 00 00 00 00	 push	 OFFSET _Command_ResetCamera_f
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HBHHKBAJ@resetcamera@
  00158	e8 00 00 00 00	 call	 _COM_AddCommand
  0015d	83 c4 08	 add	 esp, 8

; 656  : 
; 657  : 	COM_AddCommand("setcontrol", Command_Setcontrol_f);

  00160	68 00 00 00 00	 push	 OFFSET _Command_Setcontrol_f
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DPPKFENM@setcontrol@
  0016a	e8 00 00 00 00	 call	 _COM_AddCommand
  0016f	83 c4 08	 add	 esp, 8

; 658  : 	COM_AddCommand("setcontrol2", Command_Setcontrol2_f);

  00172	68 00 00 00 00	 push	 OFFSET _Command_Setcontrol2_f
  00177	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GCCKDANK@setcontrol2@
  0017c	e8 00 00 00 00	 call	 _COM_AddCommand
  00181	83 c4 08	 add	 esp, 8

; 659  : 
; 660  : 	COM_AddCommand("screenshot", M_ScreenShot);

  00184	68 00 00 00 00	 push	 OFFSET _M_ScreenShot
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CMHOPIGK@screenshot@
  0018e	e8 00 00 00 00	 call	 _COM_AddCommand
  00193	83 c4 08	 add	 esp, 8

; 661  : 	CV_RegisterVar(&cv_screenshot_option);

  00196	68 00 00 00 00	 push	 OFFSET _cv_screenshot_option
  0019b	e8 00 00 00 00	 call	 _CV_RegisterVar
  001a0	83 c4 04	 add	 esp, 4

; 662  : 	CV_RegisterVar(&cv_screenshot_folder);

  001a3	68 00 00 00 00	 push	 OFFSET _cv_screenshot_folder
  001a8	e8 00 00 00 00	 call	 _CV_RegisterVar
  001ad	83 c4 04	 add	 esp, 4

; 663  : 	CV_RegisterVar(&cv_zlib_level);

  001b0	68 00 00 00 00	 push	 OFFSET _cv_zlib_level
  001b5	e8 00 00 00 00	 call	 _CV_RegisterVar
  001ba	83 c4 04	 add	 esp, 4

; 664  : 	CV_RegisterVar(&cv_zlib_memory);

  001bd	68 00 00 00 00	 push	 OFFSET _cv_zlib_memory
  001c2	e8 00 00 00 00	 call	 _CV_RegisterVar
  001c7	83 c4 04	 add	 esp, 4

; 665  : 	CV_RegisterVar(&cv_zlib_strategy);

  001ca	68 00 00 00 00	 push	 OFFSET _cv_zlib_strategy
  001cf	e8 00 00 00 00	 call	 _CV_RegisterVar
  001d4	83 c4 04	 add	 esp, 4

; 666  : 	CV_RegisterVar(&cv_zlib_window_bits);

  001d7	68 00 00 00 00	 push	 OFFSET _cv_zlib_window_bits
  001dc	e8 00 00 00 00	 call	 _CV_RegisterVar
  001e1	83 c4 04	 add	 esp, 4

; 667  : 	CV_RegisterVar(&cv_zlib_levela);

  001e4	68 00 00 00 00	 push	 OFFSET _cv_zlib_levela
  001e9	e8 00 00 00 00	 call	 _CV_RegisterVar
  001ee	83 c4 04	 add	 esp, 4

; 668  : 	CV_RegisterVar(&cv_zlib_memorya);

  001f1	68 00 00 00 00	 push	 OFFSET _cv_zlib_memorya
  001f6	e8 00 00 00 00	 call	 _CV_RegisterVar
  001fb	83 c4 04	 add	 esp, 4

; 669  : 	CV_RegisterVar(&cv_zlib_strategya);

  001fe	68 00 00 00 00	 push	 OFFSET _cv_zlib_strategya
  00203	e8 00 00 00 00	 call	 _CV_RegisterVar
  00208	83 c4 04	 add	 esp, 4

; 670  : 	CV_RegisterVar(&cv_zlib_window_bitsa);

  0020b	68 00 00 00 00	 push	 OFFSET _cv_zlib_window_bitsa
  00210	e8 00 00 00 00	 call	 _CV_RegisterVar
  00215	83 c4 04	 add	 esp, 4

; 671  : 	CV_RegisterVar(&cv_apng_disable);

  00218	68 00 00 00 00	 push	 OFFSET _cv_apng_disable
  0021d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00222	83 c4 04	 add	 esp, 4

; 672  : 	CV_RegisterVar(&cv_splats);

  00225	68 00 00 00 00	 push	 OFFSET _cv_splats
  0022a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0022f	83 c4 04	 add	 esp, 4

; 673  : 
; 674  : 	// register these so it is saved to config
; 675  : 	if ((username = I_GetUserName()))

  00232	e8 00 00 00 00	 call	 _I_GetUserName
  00237	89 45 fc	 mov	 DWORD PTR _username$[ebp], eax
  0023a	83 7d fc 00	 cmp	 DWORD PTR _username$[ebp], 0
  0023e	74 08		 je	 SHORT $LN6@D_Register

; 676  : 		cv_playername.defaultvalue =  username;

  00240	8b 45 fc	 mov	 eax, DWORD PTR _username$[ebp]
  00243	a3 04 00 00 00	 mov	 DWORD PTR _cv_playername+4, eax
$LN6@D_Register:

; 677  : 	CV_RegisterVar(&cv_playername);

  00248	68 00 00 00 00	 push	 OFFSET _cv_playername
  0024d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00252	83 c4 04	 add	 esp, 4

; 678  : 	CV_RegisterVar(&cv_playercolor);

  00255	68 00 00 00 00	 push	 OFFSET _cv_playercolor
  0025a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0025f	83 c4 04	 add	 esp, 4

; 679  : #ifdef SEENAMES
; 680  : 	CV_RegisterVar(&cv_seenames);

  00262	68 00 00 00 00	 push	 OFFSET _cv_seenames
  00267	e8 00 00 00 00	 call	 _CV_RegisterVar
  0026c	83 c4 04	 add	 esp, 4

; 681  : #endif
; 682  : 	CV_RegisterVar(&cv_realnames);

  0026f	68 00 00 00 00	 push	 OFFSET _cv_realnames
  00274	e8 00 00 00 00	 call	 _CV_RegisterVar
  00279	83 c4 04	 add	 esp, 4

; 683  : 	CV_RegisterVar(&cv_netstat);

  0027c	68 00 00 00 00	 push	 OFFSET _cv_netstat
  00281	e8 00 00 00 00	 call	 _CV_RegisterVar
  00286	83 c4 04	 add	 esp, 4

; 684  : 
; 685  : #ifdef FISHCAKE
; 686  : 	CV_RegisterVar(&cv_fishcake);
; 687  : #endif
; 688  : 
; 689  : 	COM_AddCommand("displayplayer", Command_Displayplayer_f);

  00289	68 00 00 00 00	 push	 OFFSET _Command_Displayplayer_f
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NOFHBALH@displayplayer@
  00293	e8 00 00 00 00	 call	 _COM_AddCommand
  00298	83 c4 08	 add	 esp, 8

; 690  : 	COM_AddCommand("tunes", Command_Tunes_f);

  0029b	68 00 00 00 00	 push	 OFFSET _Command_Tunes_f
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_05HOELNNPK@tunes@
  002a5	e8 00 00 00 00	 call	 _COM_AddCommand
  002aa	83 c4 08	 add	 esp, 8

; 691  : 	CV_RegisterVar(&cv_resetmusic);

  002ad	68 00 00 00 00	 push	 OFFSET _cv_resetmusic
  002b2	e8 00 00 00 00	 call	 _CV_RegisterVar
  002b7	83 c4 04	 add	 esp, 4

; 692  : 	COM_AddCommand("skynum", Command_Skynum_f);

  002ba	68 00 00 00 00	 push	 OFFSET _Command_Skynum_f
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_06HAHCKIHB@skynum@
  002c4	e8 00 00 00 00	 call	 _COM_AddCommand
  002c9	83 c4 08	 add	 esp, 8

; 693  : 
; 694  : 	// r_things.c (skin NAME)
; 695  : 	CV_RegisterVar(&cv_skin);

  002cc	68 00 00 00 00	 push	 OFFSET _cv_skin
  002d1	e8 00 00 00 00	 call	 _CV_RegisterVar
  002d6	83 c4 04	 add	 esp, 4

; 696  : 	// secondary player (splitscreen)
; 697  : 	CV_RegisterVar(&cv_skin2);

  002d9	68 00 00 00 00	 push	 OFFSET _cv_skin2
  002de	e8 00 00 00 00	 call	 _CV_RegisterVar
  002e3	83 c4 04	 add	 esp, 4

; 698  : 	CV_RegisterVar(&cv_playername2);

  002e6	68 00 00 00 00	 push	 OFFSET _cv_playername2
  002eb	e8 00 00 00 00	 call	 _CV_RegisterVar
  002f0	83 c4 04	 add	 esp, 4

; 699  : 	CV_RegisterVar(&cv_playercolor2);

  002f3	68 00 00 00 00	 push	 OFFSET _cv_playercolor2
  002f8	e8 00 00 00 00	 call	 _CV_RegisterVar
  002fd	83 c4 04	 add	 esp, 4

; 700  : 
; 701  : 	// FIXME: not to be here.. but needs be done for config loading
; 702  : 	CV_RegisterVar(&cv_usegamma);

  00300	68 00 00 00 00	 push	 OFFSET _cv_usegamma
  00305	e8 00 00 00 00	 call	 _CV_RegisterVar
  0030a	83 c4 04	 add	 esp, 4

; 703  : 
; 704  : 	// m_menu.c
; 705  : 	CV_RegisterVar(&cv_crosshair);

  0030d	68 00 00 00 00	 push	 OFFSET _cv_crosshair
  00312	e8 00 00 00 00	 call	 _CV_RegisterVar
  00317	83 c4 04	 add	 esp, 4

; 706  : 	CV_RegisterVar(&cv_invertmouse);

  0031a	68 00 00 00 00	 push	 OFFSET _cv_invertmouse
  0031f	e8 00 00 00 00	 call	 _CV_RegisterVar
  00324	83 c4 04	 add	 esp, 4

; 707  : 	CV_RegisterVar(&cv_alwaysfreelook);

  00327	68 00 00 00 00	 push	 OFFSET _cv_alwaysfreelook
  0032c	e8 00 00 00 00	 call	 _CV_RegisterVar
  00331	83 c4 04	 add	 esp, 4

; 708  : 	CV_RegisterVar(&cv_mousemove);

  00334	68 00 00 00 00	 push	 OFFSET _cv_mousemove
  00339	e8 00 00 00 00	 call	 _CV_RegisterVar
  0033e	83 c4 04	 add	 esp, 4

; 709  : 
; 710  : 	// see m_menu.c
; 711  : 	CV_RegisterVar(&cv_crosshair2);

  00341	68 00 00 00 00	 push	 OFFSET _cv_crosshair2
  00346	e8 00 00 00 00	 call	 _CV_RegisterVar
  0034b	83 c4 04	 add	 esp, 4

; 712  : 	CV_RegisterVar(&cv_autoaim);

  0034e	68 00 00 00 00	 push	 OFFSET _cv_autoaim
  00353	e8 00 00 00 00	 call	 _CV_RegisterVar
  00358	83 c4 04	 add	 esp, 4

; 713  : 	CV_RegisterVar(&cv_autoaim2);

  0035b	68 00 00 00 00	 push	 OFFSET _cv_autoaim2
  00360	e8 00 00 00 00	 call	 _CV_RegisterVar
  00365	83 c4 04	 add	 esp, 4

; 714  : 
; 715  : 	// g_input.c
; 716  : 	CV_RegisterVar(&cv_usemouse2);

  00368	68 00 00 00 00	 push	 OFFSET _cv_usemouse2
  0036d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00372	83 c4 04	 add	 esp, 4

; 717  : 	CV_RegisterVar(&cv_invertmouse2);

  00375	68 00 00 00 00	 push	 OFFSET _cv_invertmouse2
  0037a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0037f	83 c4 04	 add	 esp, 4

; 718  : 	CV_RegisterVar(&cv_alwaysfreelook2);

  00382	68 00 00 00 00	 push	 OFFSET _cv_alwaysfreelook2
  00387	e8 00 00 00 00	 call	 _CV_RegisterVar
  0038c	83 c4 04	 add	 esp, 4

; 719  : 	CV_RegisterVar(&cv_mousemove2);

  0038f	68 00 00 00 00	 push	 OFFSET _cv_mousemove2
  00394	e8 00 00 00 00	 call	 _CV_RegisterVar
  00399	83 c4 04	 add	 esp, 4

; 720  : 	CV_RegisterVar(&cv_mousesens2);

  0039c	68 00 00 00 00	 push	 OFFSET _cv_mousesens2
  003a1	e8 00 00 00 00	 call	 _CV_RegisterVar
  003a6	83 c4 04	 add	 esp, 4

; 721  : 	CV_RegisterVar(&cv_mlooksens2);

  003a9	68 00 00 00 00	 push	 OFFSET _cv_mlooksens2
  003ae	e8 00 00 00 00	 call	 _CV_RegisterVar
  003b3	83 c4 04	 add	 esp, 4

; 722  : 	CV_RegisterVar(&cv_sideaxis);

  003b6	68 00 00 00 00	 push	 OFFSET _cv_sideaxis
  003bb	e8 00 00 00 00	 call	 _CV_RegisterVar
  003c0	83 c4 04	 add	 esp, 4

; 723  : 	CV_RegisterVar(&cv_turnaxis);

  003c3	68 00 00 00 00	 push	 OFFSET _cv_turnaxis
  003c8	e8 00 00 00 00	 call	 _CV_RegisterVar
  003cd	83 c4 04	 add	 esp, 4

; 724  : 	CV_RegisterVar(&cv_moveaxis);

  003d0	68 00 00 00 00	 push	 OFFSET _cv_moveaxis
  003d5	e8 00 00 00 00	 call	 _CV_RegisterVar
  003da	83 c4 04	 add	 esp, 4

; 725  : 	CV_RegisterVar(&cv_lookaxis);

  003dd	68 00 00 00 00	 push	 OFFSET _cv_lookaxis
  003e2	e8 00 00 00 00	 call	 _CV_RegisterVar
  003e7	83 c4 04	 add	 esp, 4

; 726  : 	CV_RegisterVar(&cv_fireaxis);

  003ea	68 00 00 00 00	 push	 OFFSET _cv_fireaxis
  003ef	e8 00 00 00 00	 call	 _CV_RegisterVar
  003f4	83 c4 04	 add	 esp, 4

; 727  : 	CV_RegisterVar(&cv_firenaxis);

  003f7	68 00 00 00 00	 push	 OFFSET _cv_firenaxis
  003fc	e8 00 00 00 00	 call	 _CV_RegisterVar
  00401	83 c4 04	 add	 esp, 4

; 728  : 	CV_RegisterVar(&cv_sideaxis2);

  00404	68 00 00 00 00	 push	 OFFSET _cv_sideaxis2
  00409	e8 00 00 00 00	 call	 _CV_RegisterVar
  0040e	83 c4 04	 add	 esp, 4

; 729  : 	CV_RegisterVar(&cv_turnaxis2);

  00411	68 00 00 00 00	 push	 OFFSET _cv_turnaxis2
  00416	e8 00 00 00 00	 call	 _CV_RegisterVar
  0041b	83 c4 04	 add	 esp, 4

; 730  : 	CV_RegisterVar(&cv_moveaxis2);

  0041e	68 00 00 00 00	 push	 OFFSET _cv_moveaxis2
  00423	e8 00 00 00 00	 call	 _CV_RegisterVar
  00428	83 c4 04	 add	 esp, 4

; 731  : 	CV_RegisterVar(&cv_lookaxis2);

  0042b	68 00 00 00 00	 push	 OFFSET _cv_lookaxis2
  00430	e8 00 00 00 00	 call	 _CV_RegisterVar
  00435	83 c4 04	 add	 esp, 4

; 732  : 	CV_RegisterVar(&cv_fireaxis2);

  00438	68 00 00 00 00	 push	 OFFSET _cv_fireaxis2
  0043d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00442	83 c4 04	 add	 esp, 4

; 733  : 	CV_RegisterVar(&cv_firenaxis2);

  00445	68 00 00 00 00	 push	 OFFSET _cv_firenaxis2
  0044a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0044f	83 c4 04	 add	 esp, 4

; 734  : 
; 735  : 	// WARNING: the order is important when initialising mouse2
; 736  : 	// we need the mouse2port
; 737  : 	CV_RegisterVar(&cv_mouse2port);

  00452	68 00 00 00 00	 push	 OFFSET _cv_mouse2port
  00457	e8 00 00 00 00	 call	 _CV_RegisterVar
  0045c	83 c4 04	 add	 esp, 4

; 738  : #if defined (__unix__) || defined(__APPLE__) || defined (UNIXCOMMON)
; 739  : 	CV_RegisterVar(&cv_mouse2opt);
; 740  : #endif
; 741  : 	CV_RegisterVar(&cv_mousesens);

  0045f	68 00 00 00 00	 push	 OFFSET _cv_mousesens
  00464	e8 00 00 00 00	 call	 _CV_RegisterVar
  00469	83 c4 04	 add	 esp, 4

; 742  : 	CV_RegisterVar(&cv_mlooksens);

  0046c	68 00 00 00 00	 push	 OFFSET _cv_mlooksens
  00471	e8 00 00 00 00	 call	 _CV_RegisterVar
  00476	83 c4 04	 add	 esp, 4

; 743  : 	CV_RegisterVar(&cv_controlperkey);

  00479	68 00 00 00 00	 push	 OFFSET _cv_controlperkey
  0047e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00483	83 c4 04	 add	 esp, 4

; 744  : 
; 745  : 	CV_RegisterVar(&cv_usemouse);

  00486	68 00 00 00 00	 push	 OFFSET _cv_usemouse
  0048b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00490	83 c4 04	 add	 esp, 4

; 746  : 	CV_RegisterVar(&cv_usejoystick);

  00493	68 00 00 00 00	 push	 OFFSET _cv_usejoystick
  00498	e8 00 00 00 00	 call	 _CV_RegisterVar
  0049d	83 c4 04	 add	 esp, 4

; 747  : 	CV_RegisterVar(&cv_usejoystick2);

  004a0	68 00 00 00 00	 push	 OFFSET _cv_usejoystick2
  004a5	e8 00 00 00 00	 call	 _CV_RegisterVar
  004aa	83 c4 04	 add	 esp, 4

; 748  : #ifdef LJOYSTICK
; 749  : 	CV_RegisterVar(&cv_joyport);
; 750  : 	CV_RegisterVar(&cv_joyport2);
; 751  : #endif
; 752  : 	CV_RegisterVar(&cv_joyscale);

  004ad	68 00 00 00 00	 push	 OFFSET _cv_joyscale
  004b2	e8 00 00 00 00	 call	 _CV_RegisterVar
  004b7	83 c4 04	 add	 esp, 4

; 753  : 	CV_RegisterVar(&cv_joyscale2);

  004ba	68 00 00 00 00	 push	 OFFSET _cv_joyscale2
  004bf	e8 00 00 00 00	 call	 _CV_RegisterVar
  004c4	83 c4 04	 add	 esp, 4

; 754  : 
; 755  : 	// Analog Control
; 756  : 	CV_RegisterVar(&cv_analog);

  004c7	68 00 00 00 00	 push	 OFFSET _cv_analog
  004cc	e8 00 00 00 00	 call	 _CV_RegisterVar
  004d1	83 c4 04	 add	 esp, 4

; 757  : 	CV_RegisterVar(&cv_analog2);

  004d4	68 00 00 00 00	 push	 OFFSET _cv_analog2
  004d9	e8 00 00 00 00	 call	 _CV_RegisterVar
  004de	83 c4 04	 add	 esp, 4

; 758  : 	CV_RegisterVar(&cv_useranalog);

  004e1	68 00 00 00 00	 push	 OFFSET _cv_useranalog
  004e6	e8 00 00 00 00	 call	 _CV_RegisterVar
  004eb	83 c4 04	 add	 esp, 4

; 759  : 	CV_RegisterVar(&cv_useranalog2);

  004ee	68 00 00 00 00	 push	 OFFSET _cv_useranalog2
  004f3	e8 00 00 00 00	 call	 _CV_RegisterVar
  004f8	83 c4 04	 add	 esp, 4

; 760  : 
; 761  : 	// s_sound.c
; 762  : 	CV_RegisterVar(&cv_soundvolume);

  004fb	68 00 00 00 00	 push	 OFFSET _cv_soundvolume
  00500	e8 00 00 00 00	 call	 _CV_RegisterVar
  00505	83 c4 04	 add	 esp, 4

; 763  : 	CV_RegisterVar(&cv_digmusicvolume);

  00508	68 00 00 00 00	 push	 OFFSET _cv_digmusicvolume
  0050d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00512	83 c4 04	 add	 esp, 4

; 764  : 	CV_RegisterVar(&cv_midimusicvolume);

  00515	68 00 00 00 00	 push	 OFFSET _cv_midimusicvolume
  0051a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0051f	83 c4 04	 add	 esp, 4

; 765  : 	CV_RegisterVar(&cv_numChannels);

  00522	68 00 00 00 00	 push	 OFFSET _cv_numChannels
  00527	e8 00 00 00 00	 call	 _CV_RegisterVar
  0052c	83 c4 04	 add	 esp, 4

; 766  : 
; 767  : 	// i_cdmus.c
; 768  : 	CV_RegisterVar(&cd_volume);

  0052f	68 00 00 00 00	 push	 OFFSET _cd_volume
  00534	e8 00 00 00 00	 call	 _CV_RegisterVar
  00539	83 c4 04	 add	 esp, 4

; 769  : 	CV_RegisterVar(&cdUpdate);

  0053c	68 00 00 00 00	 push	 OFFSET _cdUpdate
  00541	e8 00 00 00 00	 call	 _CV_RegisterVar
  00546	83 c4 04	 add	 esp, 4

; 770  : 
; 771  : 	// screen.c
; 772  : 	CV_RegisterVar(&cv_fullscreen);

  00549	68 00 00 00 00	 push	 OFFSET _cv_fullscreen
  0054e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00553	83 c4 04	 add	 esp, 4

; 773  : 	CV_RegisterVar(&cv_renderview);

  00556	68 00 00 00 00	 push	 OFFSET _cv_renderview
  0055b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00560	83 c4 04	 add	 esp, 4

; 774  : 	CV_RegisterVar(&cv_scr_depth);

  00563	68 00 00 00 00	 push	 OFFSET _cv_scr_depth
  00568	e8 00 00 00 00	 call	 _CV_RegisterVar
  0056d	83 c4 04	 add	 esp, 4

; 775  : 	CV_RegisterVar(&cv_scr_width);

  00570	68 00 00 00 00	 push	 OFFSET _cv_scr_width
  00575	e8 00 00 00 00	 call	 _CV_RegisterVar
  0057a	83 c4 04	 add	 esp, 4

; 776  : 	CV_RegisterVar(&cv_scr_height);

  0057d	68 00 00 00 00	 push	 OFFSET _cv_scr_height
  00582	e8 00 00 00 00	 call	 _CV_RegisterVar
  00587	83 c4 04	 add	 esp, 4

; 777  : 
; 778  : 	// p_fab.c
; 779  : 	CV_RegisterVar(&cv_translucency);

  0058a	68 00 00 00 00	 push	 OFFSET _cv_translucency
  0058f	e8 00 00 00 00	 call	 _CV_RegisterVar
  00594	83 c4 04	 add	 esp, 4

; 780  : 
; 781  : 	// add cheat commands
; 782  : 	COM_AddCommand("noclip", Command_CheatNoClip_f);

  00597	68 00 00 00 00	 push	 OFFSET _Command_CheatNoClip_f
  0059c	68 00 00 00 00	 push	 OFFSET ??_C@_06IHODGGMJ@noclip@
  005a1	e8 00 00 00 00	 call	 _COM_AddCommand
  005a6	83 c4 08	 add	 esp, 8

; 783  : 	COM_AddCommand("god", Command_CheatGod_f);

  005a9	68 00 00 00 00	 push	 OFFSET _Command_CheatGod_f
  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_03DKFAMNOH@god@
  005b3	e8 00 00 00 00	 call	 _COM_AddCommand
  005b8	83 c4 08	 add	 esp, 8

; 784  : 	COM_AddCommand("getallemeralds", Command_Getallemeralds_f);

  005bb	68 00 00 00 00	 push	 OFFSET _Command_Getallemeralds_f
  005c0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PNNCGAFH@getallemeralds@
  005c5	e8 00 00 00 00	 call	 _COM_AddCommand
  005ca	83 c4 08	 add	 esp, 8

; 785  : 	COM_AddCommand("resetemeralds", Command_Resetemeralds_f);

  005cd	68 00 00 00 00	 push	 OFFSET _Command_Resetemeralds_f
  005d2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OHHMDFIH@resetemeralds@
  005d7	e8 00 00 00 00	 call	 _COM_AddCommand
  005dc	83 c4 08	 add	 esp, 8

; 786  : #ifdef _DEBUG
; 787  : 	COM_AddCommand("unlockall", Command_Unlockall_f);

  005df	68 00 00 00 00	 push	 OFFSET _Command_Unlockall_f
  005e4	68 00 00 00 00	 push	 OFFSET ??_C@_09JJDLHLK@unlockall@
  005e9	e8 00 00 00 00	 call	 _COM_AddCommand
  005ee	83 c4 08	 add	 esp, 8

; 788  : #endif
; 789  : 	COM_AddCommand("devmode", Command_Devmode_f);

  005f1	68 00 00 00 00	 push	 OFFSET _Command_Devmode_f
  005f6	68 00 00 00 00	 push	 OFFSET ??_C@_07JPDKKLPO@devmode@
  005fb	e8 00 00 00 00	 call	 _COM_AddCommand
  00600	83 c4 08	 add	 esp, 8

; 790  : 	COM_AddCommand("savecheckpoint", Command_Savecheckpoint_f);

  00603	68 00 00 00 00	 push	 OFFSET _Command_Savecheckpoint_f
  00608	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BBGMFKMO@savecheckpoint@
  0060d	e8 00 00 00 00	 call	 _COM_AddCommand
  00612	83 c4 08	 add	 esp, 8

; 791  : 	COM_AddCommand("scale", Command_Scale_f);

  00615	68 00 00 00 00	 push	 OFFSET _Command_Scale_f
  0061a	68 00 00 00 00	 push	 OFFSET ??_C@_05MHMEBBGO@scale@
  0061f	e8 00 00 00 00	 call	 _COM_AddCommand
  00624	83 c4 08	 add	 esp, 8

; 792  : 	COM_AddCommand("gravflip", Command_Gravflip_f);

  00627	68 00 00 00 00	 push	 OFFSET _Command_Gravflip_f
  0062c	68 00 00 00 00	 push	 OFFSET ??_C@_08DAIAHLFD@gravflip@
  00631	e8 00 00 00 00	 call	 _COM_AddCommand
  00636	83 c4 08	 add	 esp, 8

; 793  : 	COM_AddCommand("hurtme", Command_Hurtme_f);

  00639	68 00 00 00 00	 push	 OFFSET _Command_Hurtme_f
  0063e	68 00 00 00 00	 push	 OFFSET ??_C@_06LOOPPNIE@hurtme@
  00643	e8 00 00 00 00	 call	 _COM_AddCommand
  00648	83 c4 08	 add	 esp, 8

; 794  : 	COM_AddCommand("charability", Command_Charability_f);

  0064b	68 00 00 00 00	 push	 OFFSET _Command_Charability_f
  00650	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EJPLPHIF@charability@
  00655	e8 00 00 00 00	 call	 _COM_AddCommand
  0065a	83 c4 08	 add	 esp, 8

; 795  : 	COM_AddCommand("charspeed", Command_Charspeed_f);

  0065d	68 00 00 00 00	 push	 OFFSET _Command_Charspeed_f
  00662	68 00 00 00 00	 push	 OFFSET ??_C@_09JBLJFFJI@charspeed@
  00667	e8 00 00 00 00	 call	 _COM_AddCommand
  0066c	83 c4 08	 add	 esp, 8

; 796  : #ifdef _DEBUG
; 797  : 	COM_AddCommand("causecfail", Command_CauseCfail_f);

  0066f	68 00 00 00 00	 push	 OFFSET _Command_CauseCfail_f
  00674	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LHMIBJLE@causecfail@
  00679	e8 00 00 00 00	 call	 _COM_AddCommand
  0067e	83 c4 08	 add	 esp, 8

; 798  : #endif
; 799  : 
; 800  : 	// hacks for menu system.
; 801  : 	CV_RegisterVar(&cv_dummyteam);

  00681	68 00 00 00 00	 push	 OFFSET _cv_dummyteam
  00686	e8 00 00 00 00	 call	 _CV_RegisterVar
  0068b	83 c4 04	 add	 esp, 4

; 802  : 	CV_RegisterVar(&cv_dummyscramble);

  0068e	68 00 00 00 00	 push	 OFFSET _cv_dummyscramble
  00693	e8 00 00 00 00	 call	 _CV_RegisterVar
  00698	83 c4 04	 add	 esp, 4
$LN1@D_Register:

; 803  : }

  0069b	5f		 pop	 edi
  0069c	5e		 pop	 esi
  0069d	5b		 pop	 ebx
  0069e	8b e5		 mov	 esp, ebp
  006a0	5d		 pop	 ebp
  006a1	c3		 ret	 0
_D_RegisterClientCommands ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\d_netcmd.c
;	COMDAT _D_RegisterServerCommands
_TEXT	SEGMENT
_D_RegisterServerCommands PROC				; COMDAT

; 435  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 436  : 	RegisterNetXCmd(XD_NAMEANDCOLOR, Got_NameAndColor);

  00009	68 00 00 00 00	 push	 OFFSET _Got_NameAndColor
  0000e	6a 01		 push	 1
  00010	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00015	83 c4 08	 add	 esp, 8

; 437  : 	RegisterNetXCmd(XD_WEAPONPREF, Got_WeaponPref);

  00018	68 00 00 00 00	 push	 OFFSET _Got_WeaponPref
  0001d	6a 02		 push	 2
  0001f	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00024	83 c4 08	 add	 esp, 8

; 438  : 	RegisterNetXCmd(XD_MAP, Got_Mapcmd);

  00027	68 00 00 00 00	 push	 OFFSET _Got_Mapcmd
  0002c	6a 06		 push	 6
  0002e	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00033	83 c4 08	 add	 esp, 8

; 439  : 	RegisterNetXCmd(XD_EXITLEVEL, Got_ExitLevelcmd);

  00036	68 00 00 00 00	 push	 OFFSET _Got_ExitLevelcmd
  0003b	6a 07		 push	 7
  0003d	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00042	83 c4 08	 add	 esp, 8

; 440  : 	RegisterNetXCmd(XD_ADDFILE, Got_Addfilecmd);

  00045	68 00 00 00 00	 push	 OFFSET _Got_Addfilecmd
  0004a	6a 08		 push	 8
  0004c	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00051	83 c4 08	 add	 esp, 8

; 441  : 	RegisterNetXCmd(XD_REQADDFILE, Got_RequestAddfilecmd);

  00054	68 00 00 00 00	 push	 OFFSET _Got_RequestAddfilecmd
  00059	6a 12		 push	 18			; 00000012H
  0005b	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00060	83 c4 08	 add	 esp, 8

; 442  : #ifdef DELFILE
; 443  : 	RegisterNetXCmd(XD_DELFILE, Got_Delfilecmd);
; 444  : #endif
; 445  : 	RegisterNetXCmd(XD_PAUSE, Got_Pause);

  00063	68 00 00 00 00	 push	 OFFSET _Got_Pause
  00068	6a 09		 push	 9
  0006a	e8 00 00 00 00	 call	 _RegisterNetXCmd
  0006f	83 c4 08	 add	 esp, 8

; 446  : 	RegisterNetXCmd(XD_RUNSOC, Got_RunSOCcmd);

  00072	68 00 00 00 00	 push	 OFFSET _Got_RunSOCcmd
  00077	6a 11		 push	 17			; 00000011H
  00079	e8 00 00 00 00	 call	 _RegisterNetXCmd
  0007e	83 c4 08	 add	 esp, 8

; 447  : 
; 448  : 	// Remote Administration
; 449  : 	COM_AddCommand("password", Command_Changepassword_f);

  00081	68 00 00 00 00	 push	 OFFSET _Command_Changepassword_f
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password@
  0008b	e8 00 00 00 00	 call	 _COM_AddCommand
  00090	83 c4 08	 add	 esp, 8

; 450  : 	RegisterNetXCmd(XD_LOGIN, Got_Login);

  00093	68 00 00 00 00	 push	 OFFSET _Got_Login
  00098	6a 0d		 push	 13			; 0000000dH
  0009a	e8 00 00 00 00	 call	 _RegisterNetXCmd
  0009f	83 c4 08	 add	 esp, 8

; 451  : 	COM_AddCommand("login", Command_Login_f); // useful in dedicated to kick off remote admin

  000a2	68 00 00 00 00	 push	 OFFSET _Command_Login_f
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_05DAOAAINN@login@
  000ac	e8 00 00 00 00	 call	 _COM_AddCommand
  000b1	83 c4 08	 add	 esp, 8

; 452  : 	COM_AddCommand("verify", Command_Verify_f);

  000b4	68 00 00 00 00	 push	 OFFSET _Command_Verify_f
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_06MCIJCFHC@verify@
  000be	e8 00 00 00 00	 call	 _COM_AddCommand
  000c3	83 c4 08	 add	 esp, 8

; 453  : 	RegisterNetXCmd(XD_VERIFIED, Got_Verification);

  000c6	68 00 00 00 00	 push	 OFFSET _Got_Verification
  000cb	6a 0e		 push	 14			; 0000000eH
  000cd	e8 00 00 00 00	 call	 _RegisterNetXCmd
  000d2	83 c4 08	 add	 esp, 8

; 454  : 
; 455  : 	COM_AddCommand("motd", Command_MotD_f);

  000d5	68 00 00 00 00	 push	 OFFSET _Command_MotD_f
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_04GJFDDCGE@motd@
  000df	e8 00 00 00 00	 call	 _COM_AddCommand
  000e4	83 c4 08	 add	 esp, 8

; 456  : 	RegisterNetXCmd(XD_SETMOTD, Got_MotD_f); // For remote admin

  000e7	68 00 00 00 00	 push	 OFFSET _Got_MotD_f
  000ec	6a 14		 push	 20			; 00000014H
  000ee	e8 00 00 00 00	 call	 _RegisterNetXCmd
  000f3	83 c4 08	 add	 esp, 8

; 457  : 
; 458  : 	RegisterNetXCmd(XD_TEAMCHANGE, Got_Teamchange);

  000f6	68 00 00 00 00	 push	 OFFSET _Got_Teamchange
  000fb	6a 0b		 push	 11			; 0000000bH
  000fd	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00102	83 c4 08	 add	 esp, 8

; 459  : 	COM_AddCommand("serverchangeteam", Command_ServerTeamChange_f);

  00105	68 00 00 00 00	 push	 OFFSET _Command_ServerTeamChange_f
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CPEHKEFO@serverchangeteam@
  0010f	e8 00 00 00 00	 call	 _COM_AddCommand
  00114	83 c4 08	 add	 esp, 8

; 460  : 
; 461  : 	RegisterNetXCmd(XD_CLEARSCORES, Got_Clearscores);

  00117	68 00 00 00 00	 push	 OFFSET _Got_Clearscores
  0011c	6a 0c		 push	 12			; 0000000cH
  0011e	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00123	83 c4 08	 add	 esp, 8

; 462  : 	COM_AddCommand("clearscores", Command_Clearscores_f);

  00126	68 00 00 00 00	 push	 OFFSET _Command_Clearscores_f
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NADBFDJO@clearscores@
  00130	e8 00 00 00 00	 call	 _COM_AddCommand
  00135	83 c4 08	 add	 esp, 8

; 463  : 	COM_AddCommand("map", Command_Map_f);

  00138	68 00 00 00 00	 push	 OFFSET _Command_Map_f
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map@
  00142	e8 00 00 00 00	 call	 _COM_AddCommand
  00147	83 c4 08	 add	 esp, 8

; 464  : 
; 465  : 	COM_AddCommand("exitgame", Command_ExitGame_f);

  0014a	68 00 00 00 00	 push	 OFFSET _Command_ExitGame_f
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_08OCHBPNE@exitgame@
  00154	e8 00 00 00 00	 call	 _COM_AddCommand
  00159	83 c4 08	 add	 esp, 8

; 466  : 	COM_AddCommand("exitlevel", Command_ExitLevel_f);

  0015c	68 00 00 00 00	 push	 OFFSET _Command_ExitLevel_f
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_09FAKHJDOE@exitlevel@
  00166	e8 00 00 00 00	 call	 _COM_AddCommand
  0016b	83 c4 08	 add	 esp, 8

; 467  : 	COM_AddCommand("showmap", Command_Showmap_f);

  0016e	68 00 00 00 00	 push	 OFFSET _Command_Showmap_f
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_07BNGNMCAI@showmap@
  00178	e8 00 00 00 00	 call	 _COM_AddCommand
  0017d	83 c4 08	 add	 esp, 8

; 468  : 
; 469  : 	COM_AddCommand("addfile", Command_Addfile);

  00180	68 00 00 00 00	 push	 OFFSET _Command_Addfile
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_07GDBLDCML@addfile@
  0018a	e8 00 00 00 00	 call	 _COM_AddCommand
  0018f	83 c4 08	 add	 esp, 8

; 470  : 	COM_AddCommand("listwad", Command_ListWADS_f);

  00192	68 00 00 00 00	 push	 OFFSET _Command_ListWADS_f
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_07DMDPDCKF@listwad@
  0019c	e8 00 00 00 00	 call	 _COM_AddCommand
  001a1	83 c4 08	 add	 esp, 8

; 471  : 
; 472  : #ifdef DELFILE
; 473  : 	COM_AddCommand("delfile", Command_Delfile);
; 474  : #endif
; 475  : 	COM_AddCommand("runsoc", Command_RunSOC);

  001a4	68 00 00 00 00	 push	 OFFSET _Command_RunSOC
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_06BAFIAPNG@runsoc@
  001ae	e8 00 00 00 00	 call	 _COM_AddCommand
  001b3	83 c4 08	 add	 esp, 8

; 476  : 	COM_AddCommand("pause", Command_Pause);

  001b6	68 00 00 00 00	 push	 OFFSET _Command_Pause
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  001c0	e8 00 00 00 00	 call	 _COM_AddCommand
  001c5	83 c4 08	 add	 esp, 8

; 477  : 
; 478  : 	COM_AddCommand("gametype", Command_ShowGametype_f);

  001c8	68 00 00 00 00	 push	 OFFSET _Command_ShowGametype_f
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_08NJPDEKHO@gametype@
  001d2	e8 00 00 00 00	 call	 _COM_AddCommand
  001d7	83 c4 08	 add	 esp, 8

; 479  : 	COM_AddCommand("jumptoaxis", Command_JumpToAxis_f);

  001da	68 00 00 00 00	 push	 OFFSET _Command_JumpToAxis_f
  001df	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JPFHHMLD@jumptoaxis@
  001e4	e8 00 00 00 00	 call	 _COM_AddCommand
  001e9	83 c4 08	 add	 esp, 8

; 480  : 	COM_AddCommand("version", Command_Version_f);

  001ec	68 00 00 00 00	 push	 OFFSET _Command_Version_f
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_07CPCPJPKL@version@
  001f6	e8 00 00 00 00	 call	 _COM_AddCommand
  001fb	83 c4 08	 add	 esp, 8

; 481  : #ifdef UPDATE_ALERT
; 482  : 	COM_AddCommand("mod_details", Command_ModDetails_f);

  001fe	68 00 00 00 00	 push	 OFFSET _Command_ModDetails_f
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DOCDGAPE@mod_details@
  00208	e8 00 00 00 00	 call	 _COM_AddCommand
  0020d	83 c4 08	 add	 esp, 8

; 483  : #endif
; 484  : 	COM_AddCommand("quit", Command_Quit_f);

  00210	68 00 00 00 00	 push	 OFFSET _Command_Quit_f
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_04KNNLNNGO@quit@
  0021a	e8 00 00 00 00	 call	 _COM_AddCommand
  0021f	83 c4 08	 add	 esp, 8

; 485  : 
; 486  : 	COM_AddCommand("saveconfig", Command_SaveConfig_f);

  00222	68 00 00 00 00	 push	 OFFSET _Command_SaveConfig_f
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MACGIGOE@saveconfig@
  0022c	e8 00 00 00 00	 call	 _COM_AddCommand
  00231	83 c4 08	 add	 esp, 8

; 487  : 	COM_AddCommand("loadconfig", Command_LoadConfig_f);

  00234	68 00 00 00 00	 push	 OFFSET _Command_LoadConfig_f
  00239	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OHOKKJHM@loadconfig@
  0023e	e8 00 00 00 00	 call	 _COM_AddCommand
  00243	83 c4 08	 add	 esp, 8

; 488  : 	COM_AddCommand("changeconfig", Command_ChangeConfig_f);

  00246	68 00 00 00 00	 push	 OFFSET _Command_ChangeConfig_f
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IFJIKNFJ@changeconfig@
  00250	e8 00 00 00 00	 call	 _COM_AddCommand
  00255	83 c4 08	 add	 esp, 8

; 489  : 	COM_AddCommand("isgamemodified", Command_Isgamemodified_f); // test

  00258	68 00 00 00 00	 push	 OFFSET _Command_Isgamemodified_f
  0025d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NKDKPOM@isgamemodified@
  00262	e8 00 00 00 00	 call	 _COM_AddCommand
  00267	83 c4 08	 add	 esp, 8

; 490  : 	COM_AddCommand("showscores", Command_ShowScores_f);

  0026a	68 00 00 00 00	 push	 OFFSET _Command_ShowScores_f
  0026f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NHHNPEKO@showscores@
  00274	e8 00 00 00 00	 call	 _COM_AddCommand
  00279	83 c4 08	 add	 esp, 8

; 491  : 	COM_AddCommand("showtime", Command_ShowTime_f);

  0027c	68 00 00 00 00	 push	 OFFSET _Command_ShowTime_f
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_08KKPGJHCN@showtime@
  00286	e8 00 00 00 00	 call	 _COM_AddCommand
  0028b	83 c4 08	 add	 esp, 8

; 492  : #ifdef _DEBUG
; 493  : 	COM_AddCommand("togglemodified", Command_Togglemodified_f);

  0028e	68 00 00 00 00	 push	 OFFSET _Command_Togglemodified_f
  00293	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NHDLJFMO@togglemodified@
  00298	e8 00 00 00 00	 call	 _COM_AddCommand
  0029d	83 c4 08	 add	 esp, 8

; 494  : #endif
; 495  : 
; 496  : 	// for master server connection
; 497  : 	AddMServCommands();

  002a0	e8 00 00 00 00	 call	 _AddMServCommands
  002a5	90		 npad	 1

; 498  : 
; 499  : 	// p_mobj.c
; 500  : 	CV_RegisterVar(&cv_itemrespawntime);

  002a6	68 00 00 00 00	 push	 OFFSET _cv_itemrespawntime
  002ab	e8 00 00 00 00	 call	 _CV_RegisterVar
  002b0	83 c4 04	 add	 esp, 4

; 501  : 	CV_RegisterVar(&cv_itemrespawn);

  002b3	68 00 00 00 00	 push	 OFFSET _cv_itemrespawn
  002b8	e8 00 00 00 00	 call	 _CV_RegisterVar
  002bd	83 c4 04	 add	 esp, 4

; 502  : 	CV_RegisterVar(&cv_flagtime);

  002c0	68 00 00 00 00	 push	 OFFSET _cv_flagtime
  002c5	e8 00 00 00 00	 call	 _CV_RegisterVar
  002ca	83 c4 04	 add	 esp, 4

; 503  : 	CV_RegisterVar(&cv_suddendeath);

  002cd	68 00 00 00 00	 push	 OFFSET _cv_suddendeath
  002d2	e8 00 00 00 00	 call	 _CV_RegisterVar
  002d7	83 c4 04	 add	 esp, 4

; 504  : 
; 505  : 	// misc
; 506  : 	CV_RegisterVar(&cv_matchtype);

  002da	68 00 00 00 00	 push	 OFFSET _cv_matchtype
  002df	e8 00 00 00 00	 call	 _CV_RegisterVar
  002e4	83 c4 04	 add	 esp, 4

; 507  : 	CV_RegisterVar(&cv_friendlyfire);

  002e7	68 00 00 00 00	 push	 OFFSET _cv_friendlyfire
  002ec	e8 00 00 00 00	 call	 _CV_RegisterVar
  002f1	83 c4 04	 add	 esp, 4

; 508  : 	CV_RegisterVar(&cv_pointlimit);

  002f4	68 00 00 00 00	 push	 OFFSET _cv_pointlimit
  002f9	e8 00 00 00 00	 call	 _CV_RegisterVar
  002fe	83 c4 04	 add	 esp, 4

; 509  : 	CV_RegisterVar(&cv_numlaps);

  00301	68 00 00 00 00	 push	 OFFSET _cv_numlaps
  00306	e8 00 00 00 00	 call	 _CV_RegisterVar
  0030b	83 c4 04	 add	 esp, 4

; 510  : 	CV_RegisterVar(&cv_timetic);

  0030e	68 00 00 00 00	 push	 OFFSET _cv_timetic
  00313	e8 00 00 00 00	 call	 _CV_RegisterVar
  00318	83 c4 04	 add	 esp, 4

; 511  : 
; 512  : 	CV_RegisterVar(&cv_cheats);

  0031b	68 00 00 00 00	 push	 OFFSET _cv_cheats
  00320	e8 00 00 00 00	 call	 _CV_RegisterVar
  00325	83 c4 04	 add	 esp, 4

; 513  : 
; 514  : 	CV_RegisterVar(&cv_autobalance);

  00328	68 00 00 00 00	 push	 OFFSET _cv_autobalance
  0032d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00332	83 c4 04	 add	 esp, 4

; 515  : 	CV_RegisterVar(&cv_teamscramble);

  00335	68 00 00 00 00	 push	 OFFSET _cv_teamscramble
  0033a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0033f	83 c4 04	 add	 esp, 4

; 516  : 	CV_RegisterVar(&cv_scrambleonchange);

  00342	68 00 00 00 00	 push	 OFFSET _cv_scrambleonchange
  00347	e8 00 00 00 00	 call	 _CV_RegisterVar
  0034c	83 c4 04	 add	 esp, 4

; 517  : 
; 518  : 	CV_RegisterVar(&cv_tagtype);

  0034f	68 00 00 00 00	 push	 OFFSET _cv_tagtype
  00354	e8 00 00 00 00	 call	 _CV_RegisterVar
  00359	83 c4 04	 add	 esp, 4

; 519  : 	CV_RegisterVar(&cv_touchtag);

  0035c	68 00 00 00 00	 push	 OFFSET _cv_touchtag
  00361	e8 00 00 00 00	 call	 _CV_RegisterVar
  00366	83 c4 04	 add	 esp, 4

; 520  : 	CV_RegisterVar(&cv_hidetime);

  00369	68 00 00 00 00	 push	 OFFSET _cv_hidetime
  0036e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00373	83 c4 04	 add	 esp, 4

; 521  : 
; 522  : 	CV_RegisterVar(&cv_inttime);

  00376	68 00 00 00 00	 push	 OFFSET _cv_inttime
  0037b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00380	83 c4 04	 add	 esp, 4

; 523  : 	CV_RegisterVar(&cv_advancemap);

  00383	68 00 00 00 00	 push	 OFFSET _cv_advancemap
  00388	e8 00 00 00 00	 call	 _CV_RegisterVar
  0038d	83 c4 04	 add	 esp, 4

; 524  : 	CV_RegisterVar(&cv_playersforexit);

  00390	68 00 00 00 00	 push	 OFFSET _cv_playersforexit
  00395	e8 00 00 00 00	 call	 _CV_RegisterVar
  0039a	83 c4 04	 add	 esp, 4

; 525  : 	CV_RegisterVar(&cv_timelimit);

  0039d	68 00 00 00 00	 push	 OFFSET _cv_timelimit
  003a2	e8 00 00 00 00	 call	 _CV_RegisterVar
  003a7	83 c4 04	 add	 esp, 4

; 526  : 	CV_RegisterVar(&cv_playdemospeed);

  003aa	68 00 00 00 00	 push	 OFFSET _cv_playdemospeed
  003af	e8 00 00 00 00	 call	 _CV_RegisterVar
  003b4	83 c4 04	 add	 esp, 4

; 527  : 	CV_RegisterVar(&cv_forceskin);

  003b7	68 00 00 00 00	 push	 OFFSET _cv_forceskin
  003bc	e8 00 00 00 00	 call	 _CV_RegisterVar
  003c1	83 c4 04	 add	 esp, 4

; 528  : 	CV_RegisterVar(&cv_downloading);

  003c4	68 00 00 00 00	 push	 OFFSET _cv_downloading
  003c9	e8 00 00 00 00	 call	 _CV_RegisterVar
  003ce	83 c4 04	 add	 esp, 4

; 529  : 
; 530  : 	CV_RegisterVar(&cv_specialrings);

  003d1	68 00 00 00 00	 push	 OFFSET _cv_specialrings
  003d6	e8 00 00 00 00	 call	 _CV_RegisterVar
  003db	83 c4 04	 add	 esp, 4

; 531  : 	CV_RegisterVar(&cv_powerstones);

  003de	68 00 00 00 00	 push	 OFFSET _cv_powerstones
  003e3	e8 00 00 00 00	 call	 _CV_RegisterVar
  003e8	83 c4 04	 add	 esp, 4

; 532  : 	CV_RegisterVar(&cv_racetype);

  003eb	68 00 00 00 00	 push	 OFFSET _cv_racetype
  003f0	e8 00 00 00 00	 call	 _CV_RegisterVar
  003f5	83 c4 04	 add	 esp, 4

; 533  : 	CV_RegisterVar(&cv_raceitemboxes);

  003f8	68 00 00 00 00	 push	 OFFSET _cv_raceitemboxes
  003fd	e8 00 00 00 00	 call	 _CV_RegisterVar
  00402	83 c4 04	 add	 esp, 4

; 534  : 	CV_RegisterVar(&cv_matchboxes);

  00405	68 00 00 00 00	 push	 OFFSET _cv_matchboxes
  0040a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0040f	83 c4 04	 add	 esp, 4

; 535  : 
; 536  : #ifdef CHAOSISNOTDEADYET
; 537  : 	CV_RegisterVar(&cv_chaos_bluecrawla);
; 538  : 	CV_RegisterVar(&cv_chaos_redcrawla);
; 539  : 	CV_RegisterVar(&cv_chaos_crawlacommander);
; 540  : 	CV_RegisterVar(&cv_chaos_jettysynbomber);
; 541  : 	CV_RegisterVar(&cv_chaos_jettysyngunner);
; 542  : 	CV_RegisterVar(&cv_chaos_eggmobile1);
; 543  : 	CV_RegisterVar(&cv_chaos_eggmobile2);
; 544  : 	CV_RegisterVar(&cv_chaos_skim);
; 545  : 	CV_RegisterVar(&cv_chaos_spawnrate);
; 546  : #endif
; 547  : 
; 548  : 	CV_RegisterVar(&cv_recycler);

  00412	68 00 00 00 00	 push	 OFFSET _cv_recycler
  00417	e8 00 00 00 00	 call	 _CV_RegisterVar
  0041c	83 c4 04	 add	 esp, 4

; 549  : 	CV_RegisterVar(&cv_teleporters);

  0041f	68 00 00 00 00	 push	 OFFSET _cv_teleporters
  00424	e8 00 00 00 00	 call	 _CV_RegisterVar
  00429	83 c4 04	 add	 esp, 4

; 550  : 	CV_RegisterVar(&cv_superring);

  0042c	68 00 00 00 00	 push	 OFFSET _cv_superring
  00431	e8 00 00 00 00	 call	 _CV_RegisterVar
  00436	83 c4 04	 add	 esp, 4

; 551  : 	CV_RegisterVar(&cv_supersneakers);

  00439	68 00 00 00 00	 push	 OFFSET _cv_supersneakers
  0043e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00443	83 c4 04	 add	 esp, 4

; 552  : 	CV_RegisterVar(&cv_invincibility);

  00446	68 00 00 00 00	 push	 OFFSET _cv_invincibility
  0044b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00450	83 c4 04	 add	 esp, 4

; 553  : 	CV_RegisterVar(&cv_jumpshield);

  00453	68 00 00 00 00	 push	 OFFSET _cv_jumpshield
  00458	e8 00 00 00 00	 call	 _CV_RegisterVar
  0045d	83 c4 04	 add	 esp, 4

; 554  : 	CV_RegisterVar(&cv_watershield);

  00460	68 00 00 00 00	 push	 OFFSET _cv_watershield
  00465	e8 00 00 00 00	 call	 _CV_RegisterVar
  0046a	83 c4 04	 add	 esp, 4

; 555  : 	CV_RegisterVar(&cv_ringshield);

  0046d	68 00 00 00 00	 push	 OFFSET _cv_ringshield
  00472	e8 00 00 00 00	 call	 _CV_RegisterVar
  00477	83 c4 04	 add	 esp, 4

; 556  : 	CV_RegisterVar(&cv_forceshield);

  0047a	68 00 00 00 00	 push	 OFFSET _cv_forceshield
  0047f	e8 00 00 00 00	 call	 _CV_RegisterVar
  00484	83 c4 04	 add	 esp, 4

; 557  : 	CV_RegisterVar(&cv_bombshield);

  00487	68 00 00 00 00	 push	 OFFSET _cv_bombshield
  0048c	e8 00 00 00 00	 call	 _CV_RegisterVar
  00491	83 c4 04	 add	 esp, 4

; 558  : 	CV_RegisterVar(&cv_1up);

  00494	68 00 00 00 00	 push	 OFFSET _cv_1up
  00499	e8 00 00 00 00	 call	 _CV_RegisterVar
  0049e	83 c4 04	 add	 esp, 4

; 559  : 	CV_RegisterVar(&cv_eggmanbox);

  004a1	68 00 00 00 00	 push	 OFFSET _cv_eggmanbox
  004a6	e8 00 00 00 00	 call	 _CV_RegisterVar
  004ab	83 c4 04	 add	 esp, 4

; 560  : 	CV_RegisterVar(&cv_questionbox);

  004ae	68 00 00 00 00	 push	 OFFSET _cv_questionbox
  004b3	e8 00 00 00 00	 call	 _CV_RegisterVar
  004b8	83 c4 04	 add	 esp, 4

; 561  : 
; 562  : 	CV_RegisterVar(&cv_ringslinger);

  004bb	68 00 00 00 00	 push	 OFFSET _cv_ringslinger
  004c0	e8 00 00 00 00	 call	 _CV_RegisterVar
  004c5	83 c4 04	 add	 esp, 4

; 563  : 	CV_RegisterVar(&cv_setrings);

  004c8	68 00 00 00 00	 push	 OFFSET _cv_setrings
  004cd	e8 00 00 00 00	 call	 _CV_RegisterVar
  004d2	83 c4 04	 add	 esp, 4

; 564  : 	CV_RegisterVar(&cv_setlives);

  004d5	68 00 00 00 00	 push	 OFFSET _cv_setlives
  004da	e8 00 00 00 00	 call	 _CV_RegisterVar
  004df	83 c4 04	 add	 esp, 4

; 565  : 	CV_RegisterVar(&cv_setcontinues);

  004e2	68 00 00 00 00	 push	 OFFSET _cv_setcontinues
  004e7	e8 00 00 00 00	 call	 _CV_RegisterVar
  004ec	83 c4 04	 add	 esp, 4

; 566  : 	CV_RegisterVar(&cv_soundtest);

  004ef	68 00 00 00 00	 push	 OFFSET _cv_soundtest
  004f4	e8 00 00 00 00	 call	 _CV_RegisterVar
  004f9	83 c4 04	 add	 esp, 4

; 567  : 
; 568  : 	CV_RegisterVar(&cv_countdowntime);

  004fc	68 00 00 00 00	 push	 OFFSET _cv_countdowntime
  00501	e8 00 00 00 00	 call	 _CV_RegisterVar
  00506	83 c4 04	 add	 esp, 4

; 569  : 	CV_RegisterVar(&cv_runscripts);

  00509	68 00 00 00 00	 push	 OFFSET _cv_runscripts
  0050e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00513	83 c4 04	 add	 esp, 4

; 570  : 	CV_RegisterVar(&cv_match_scoring);

  00516	68 00 00 00 00	 push	 OFFSET _cv_match_scoring
  0051b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00520	83 c4 04	 add	 esp, 4

; 571  : 	CV_RegisterVar(&cv_overtime);

  00523	68 00 00 00 00	 push	 OFFSET _cv_overtime
  00528	e8 00 00 00 00	 call	 _CV_RegisterVar
  0052d	83 c4 04	 add	 esp, 4

; 572  : 	CV_RegisterVar(&cv_pause);

  00530	68 00 00 00 00	 push	 OFFSET _cv_pause
  00535	e8 00 00 00 00	 call	 _CV_RegisterVar
  0053a	83 c4 04	 add	 esp, 4

; 573  : 	CV_RegisterVar(&cv_mute);

  0053d	68 00 00 00 00	 push	 OFFSET _cv_mute
  00542	e8 00 00 00 00	 call	 _CV_RegisterVar
  00547	83 c4 04	 add	 esp, 4

; 574  : 
; 575  : 	RegisterNetXCmd(XD_RANDOMSEED, Got_RandomSeed);

  0054a	68 00 00 00 00	 push	 OFFSET _Got_RandomSeed
  0054f	6a 0f		 push	 15			; 0000000fH
  00551	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00556	83 c4 08	 add	 esp, 8

; 576  : 
; 577  : 	RegisterNetXCmd(XD_ORDERPIZZA, Got_PizzaOrder);

  00559	68 00 00 00 00	 push	 OFFSET _Got_PizzaOrder
  0055e	6a 10		 push	 16			; 00000010H
  00560	e8 00 00 00 00	 call	 _RegisterNetXCmd
  00565	83 c4 08	 add	 esp, 8

; 578  : 
; 579  : 	CV_RegisterVar(&cv_allowexitlevel);

  00568	68 00 00 00 00	 push	 OFFSET _cv_allowexitlevel
  0056d	e8 00 00 00 00	 call	 _CV_RegisterVar
  00572	83 c4 04	 add	 esp, 4

; 580  : 	CV_RegisterVar(&cv_allowautoaim);

  00575	68 00 00 00 00	 push	 OFFSET _cv_allowautoaim
  0057a	e8 00 00 00 00	 call	 _CV_RegisterVar
  0057f	83 c4 04	 add	 esp, 4

; 581  : 	CV_RegisterVar(&cv_allowteamchange);

  00582	68 00 00 00 00	 push	 OFFSET _cv_allowteamchange
  00587	e8 00 00 00 00	 call	 _CV_RegisterVar
  0058c	83 c4 04	 add	 esp, 4

; 582  : 	CV_RegisterVar(&cv_killingdead);

  0058f	68 00 00 00 00	 push	 OFFSET _cv_killingdead
  00594	e8 00 00 00 00	 call	 _CV_RegisterVar
  00599	83 c4 04	 add	 esp, 4

; 583  : 
; 584  : 	// d_clisrv
; 585  : 	CV_RegisterVar(&cv_maxplayers);

  0059c	68 00 00 00 00	 push	 OFFSET _cv_maxplayers
  005a1	e8 00 00 00 00	 call	 _CV_RegisterVar
  005a6	83 c4 04	 add	 esp, 4

; 586  : 	CV_RegisterVar(&cv_maxsend);

  005a9	68 00 00 00 00	 push	 OFFSET _cv_maxsend
  005ae	e8 00 00 00 00	 call	 _CV_RegisterVar
  005b3	83 c4 04	 add	 esp, 4

; 587  : 
; 588  : 	COM_AddCommand("ping", Command_Ping_f);

  005b6	68 00 00 00 00	 push	 OFFSET _Command_Ping_f
  005bb	68 00 00 00 00	 push	 OFFSET ??_C@_04OONEELOO@ping@
  005c0	e8 00 00 00 00	 call	 _COM_AddCommand
  005c5	83 c4 08	 add	 esp, 8

; 589  : 	CV_RegisterVar(&cv_nettimeout);

  005c8	68 00 00 00 00	 push	 OFFSET _cv_nettimeout
  005cd	e8 00 00 00 00	 call	 _CV_RegisterVar
  005d2	83 c4 04	 add	 esp, 4

; 590  : 
; 591  : 	// In-game thing placing stuff
; 592  : 	CV_RegisterVar(&cv_objectplace);

  005d5	68 00 00 00 00	 push	 OFFSET _cv_objectplace
  005da	e8 00 00 00 00	 call	 _CV_RegisterVar
  005df	83 c4 04	 add	 esp, 4

; 593  : 	CV_RegisterVar(&cv_snapto);

  005e2	68 00 00 00 00	 push	 OFFSET _cv_snapto
  005e7	e8 00 00 00 00	 call	 _CV_RegisterVar
  005ec	83 c4 04	 add	 esp, 4

; 594  : 	CV_RegisterVar(&cv_speed);

  005ef	68 00 00 00 00	 push	 OFFSET _cv_speed
  005f4	e8 00 00 00 00	 call	 _CV_RegisterVar
  005f9	83 c4 04	 add	 esp, 4

; 595  : 	CV_RegisterVar(&cv_objflags);

  005fc	68 00 00 00 00	 push	 OFFSET _cv_objflags
  00601	e8 00 00 00 00	 call	 _CV_RegisterVar
  00606	83 c4 04	 add	 esp, 4

; 596  : 	CV_RegisterVar(&cv_mapthingnum);

  00609	68 00 00 00 00	 push	 OFFSET _cv_mapthingnum
  0060e	e8 00 00 00 00	 call	 _CV_RegisterVar
  00613	83 c4 04	 add	 esp, 4

; 597  : 	CV_RegisterVar(&cv_grid);

  00616	68 00 00 00 00	 push	 OFFSET _cv_grid
  0061b	e8 00 00 00 00	 call	 _CV_RegisterVar
  00620	83 c4 04	 add	 esp, 4

; 598  : 	CV_RegisterVar(&cv_skipmapcheck);

  00623	68 00 00 00 00	 push	 OFFSET _cv_skipmapcheck
  00628	e8 00 00 00 00	 call	 _CV_RegisterVar
  0062d	83 c4 04	 add	 esp, 4

; 599  : 
; 600  : 	CV_RegisterVar(&cv_sleep);

  00630	68 00 00 00 00	 push	 OFFSET _cv_sleep
  00635	e8 00 00 00 00	 call	 _CV_RegisterVar
  0063a	83 c4 04	 add	 esp, 4

; 601  : #ifdef NEWPING
; 602  : 	CV_RegisterVar(&cv_maxping);

  0063d	68 00 00 00 00	 push	 OFFSET _cv_maxping
  00642	e8 00 00 00 00	 call	 _CV_RegisterVar
  00647	83 c4 04	 add	 esp, 4

; 603  : #endif
; 604  : 
; 605  : #ifdef SEENAMES
; 606  : 	 CV_RegisterVar(&cv_allowseenames);

  0064a	68 00 00 00 00	 push	 OFFSET _cv_allowseenames
  0064f	e8 00 00 00 00	 call	 _CV_RegisterVar
  00654	83 c4 04	 add	 esp, 4

; 607  : #endif
; 608  : 
; 609  : 	CV_RegisterVar(&cv_dummyconsvar);

  00657	68 00 00 00 00	 push	 OFFSET _cv_dummyconsvar
  0065c	e8 00 00 00 00	 call	 _CV_RegisterVar
  00661	83 c4 04	 add	 esp, 4

; 610  : }

  00664	5f		 pop	 edi
  00665	5e		 pop	 esi
  00666	5b		 pop	 ebx
  00667	8b e5		 mov	 esp, ebp
  00669	5d		 pop	 ebp
  0066a	c3		 ret	 0
_D_RegisterServerCommands ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_FixedInt PROC						; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 222  : 	return FixedMul(a, 1);

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _FixedMul
  00014	83 c4 08	 add	 esp, 8

; 223  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_FixedInt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1779 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1780 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1458 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1460 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00031	83 c4 1c	 add	 esp, 28			; 0000001cH
  00034	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00037	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003b	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003d	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00049	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004c	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1397 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
