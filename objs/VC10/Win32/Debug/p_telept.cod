; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\p_telept.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_P_MixUp
PUBLIC	_P_Teleport
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_ResetCamera:PROC
EXTRN	_P_ResetPlayer:PROC
EXTRN	_P_InstaThrust:PROC
EXTRN	_P_SetPlayerMobjState:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_TeleportMove:PROC
EXTRN	_P_DelSeclist:PROC
EXTRN	_splitscreen:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_displayplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_players:BYTE
EXTRN	_localangle:DWORD
EXTRN	_localangle2:DWORD
EXTRN	_camera:BYTE
EXTRN	_camera2:BYTE
EXTRN	_sector_list:DWORD
EXTRN	_cv_chasecam:BYTE
EXTRN	_cv_chasecam2:BYTE
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_telept.c
;	COMDAT _P_Teleport
_TEXT	SEGMENT
_thing$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_angle$ = 24						; size = 4
_flash$ = 28						; size = 4
_dontstopmove$ = 32					; size = 4
_P_Teleport PROC					; COMDAT

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 112  : 	if (!P_TeleportMove(thing, x, y, z))

  00009	8b 45 14	 mov	 eax, DWORD PTR _z$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _P_TeleportMove
  0001e	83 c4 10	 add	 esp, 16			; 00000010H
  00021	85 c0		 test	 eax, eax
  00023	75 07		 jne	 SHORT $LN2@P_Teleport

; 113  : 		return false;

  00025	33 c0		 xor	 eax, eax
  00027	e9 3d 02 00 00	 jmp	 $LN1@P_Teleport
$LN2@P_Teleport:

; 114  : 
; 115  : 	thing->angle = angle;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0002f	8b 4d 18	 mov	 ecx, DWORD PTR _angle$[ebp]
  00032	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 116  : 
; 117  : 	if (!dontstopmove)

  00035	83 7d 20 00	 cmp	 DWORD PTR _dontstopmove$[ebp], 0
  00039	75 20		 jne	 SHORT $LN3@P_Teleport

; 118  : 		thing->momx = thing->momy = thing->momz = 0;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0003e	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00048	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  0004f	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00052	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
  00059	eb 2a		 jmp	 SHORT $LN4@P_Teleport
$LN3@P_Teleport:

; 119  : 	else // Change speed to match direction
; 120  : 		P_InstaThrust(thing, thing->angle, P_AproxDistance(thing->momx, thing->momy));

  0005b	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0005e	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00061	51		 push	 ecx
  00062	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00065	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _P_AproxDistance
  0006e	83 c4 08	 add	 esp, 8
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00075	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00078	52		 push	 edx
  00079	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _P_InstaThrust
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@P_Teleport:

; 121  : 
; 122  : 	if (thing->player)

  00085	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00088	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0008f	0f 84 cf 01 00
	00		 je	 $LN15@P_Teleport

; 123  : 	{
; 124  : 		if (thing->eflags & MFE_VERTICALFLIP)

  00095	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00098	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0009e	83 e1 20	 and	 ecx, 32			; 00000020H
  000a1	74 26		 je	 SHORT $LN6@P_Teleport

; 125  : 			thing->player->viewz = thing->z + thing->height - thing->player->viewheight;

  000a3	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000a6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a9	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  000ac	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  000af	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000b2	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  000b8	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  000bb	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000be	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  000c4	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  000c7	eb 1e		 jmp	 SHORT $LN7@P_Teleport
$LN6@P_Teleport:

; 126  : 		else
; 127  : 			thing->player->viewz = thing->z + thing->player->viewheight;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000cc	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000d2	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  000d5	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000d8	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  000de	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  000e4	89 42 10	 mov	 DWORD PTR [edx+16], eax
$LN7@P_Teleport:

; 128  : 
; 129  : 		if (!dontstopmove)

  000e7	83 7d 20 00	 cmp	 DWORD PTR _dontstopmove$[ebp], 0
  000eb	75 0d		 jne	 SHORT $LN8@P_Teleport

; 130  : 			thing->reactiontime = TICRATE/2; // don't move for about half a second

  000ed	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000f0	c7 80 9c 00 00
	00 11 00 00 00	 mov	 DWORD PTR [eax+156], 17	; 00000011H
$LN8@P_Teleport:

; 131  : 
; 132  : 		// absolute angle position
; 133  : 		if (thing->player == &players[consoleplayer])

  000fa	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00104	05 00 00 00 00	 add	 eax, OFFSET _players
  00109	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  0010c	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  00112	75 08		 jne	 SHORT $LN9@P_Teleport

; 134  : 			localangle = angle;

  00114	8b 45 18	 mov	 eax, DWORD PTR _angle$[ebp]
  00117	a3 00 00 00 00	 mov	 DWORD PTR _localangle, eax
$LN9@P_Teleport:

; 135  : 		if (splitscreen && thing->player == &players[secondarydisplayplayer])

  0011c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00123	74 22		 je	 SHORT $LN10@P_Teleport
  00125	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0012f	05 00 00 00 00	 add	 eax, OFFSET _players
  00134	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00137	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  0013d	75 08		 jne	 SHORT $LN10@P_Teleport

; 136  : 			localangle2 = angle;

  0013f	8b 45 18	 mov	 eax, DWORD PTR _angle$[ebp]
  00142	a3 00 00 00 00	 mov	 DWORD PTR _localangle2, eax
$LN10@P_Teleport:

; 137  : 
; 138  : 		// move chasecam at new player location
; 139  : 		if (splitscreen && cv_chasecam2.value
; 140  : 			&& thing->player == &players[secondarydisplayplayer])

  00147	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0014e	74 3c		 je	 SHORT $LN11@P_Teleport
  00150	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  00157	74 33		 je	 SHORT $LN11@P_Teleport
  00159	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00163	05 00 00 00 00	 add	 eax, OFFSET _players
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  0016b	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  00171	75 19		 jne	 SHORT $LN11@P_Teleport

; 141  : 		{
; 142  : 			P_ResetCamera(thing->player, &camera2);

  00173	68 00 00 00 00	 push	 OFFSET _camera2
  00178	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0017b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 _P_ResetCamera
  00187	83 c4 08	 add	 esp, 8

; 143  : 		}

  0018a	eb 3a		 jmp	 SHORT $LN13@P_Teleport
$LN11@P_Teleport:

; 144  : 		else if (cv_chasecam.value && thing->player == &players[displayplayer])

  0018c	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  00193	74 31		 je	 SHORT $LN13@P_Teleport
  00195	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  0019f	05 00 00 00 00	 add	 eax, OFFSET _players
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  001a7	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  001ad	75 17		 jne	 SHORT $LN13@P_Teleport

; 145  : 			P_ResetCamera(thing->player, &camera);

  001af	68 00 00 00 00	 push	 OFFSET _camera
  001b4	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001b7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001bd	51		 push	 ecx
  001be	e8 00 00 00 00	 call	 _P_ResetCamera
  001c3	83 c4 08	 add	 esp, 8
$LN13@P_Teleport:

; 146  : 
; 147  : 		// don't run in place after a teleport
; 148  : 		if (!dontstopmove)

  001c6	83 7d 20 00	 cmp	 DWORD PTR _dontstopmove$[ebp], 0
  001ca	75 7f		 jne	 SHORT $LN14@P_Teleport

; 149  : 		{
; 150  : 			thing->player->cmomx = thing->player->cmomy = 0;

  001cc	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001cf	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001d5	c7 81 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+320], 0
  001df	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  001e2	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  001e8	c7 80 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+316], 0

; 151  : 			thing->player->rmomx = thing->player->rmomy = 0;

  001f2	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001f5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001fb	c7 81 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+328], 0
  00205	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00208	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0020e	c7 80 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+324], 0

; 152  : 			thing->player->speed = 0;

  00218	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0021b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00221	c7 81 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+268], 0

; 153  : 			P_ResetPlayer(thing->player);

  0022b	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0022e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 _P_ResetPlayer
  0023a	83 c4 04	 add	 esp, 4

; 154  : 			P_SetPlayerMobjState(thing, S_PLAY_STND);

  0023d	6a 01		 push	 1
  0023f	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00248	83 c4 08	 add	 esp, 8
$LN14@P_Teleport:

; 155  : 		}
; 156  : 
; 157  : 		if (flash)

  0024b	83 7d 1c 00	 cmp	 DWORD PTR _flash$[ebp], 0
  0024f	74 13		 je	 SHORT $LN15@P_Teleport

; 158  : 			thing->player->bonuscount = 10; // flash the palette

  00251	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00254	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0025a	c7 81 b0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR [ecx+176], 10	; 0000000aH
$LN15@P_Teleport:

; 159  : 	}
; 160  : 
; 161  : 	return true;

  00264	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_Teleport:

; 162  : }

  00269	5f		 pop	 edi
  0026a	5e		 pop	 esi
  0026b	5b		 pop	 ebx
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
_P_Teleport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_telept.c
;	COMDAT _P_MixUp
_TEXT	SEGMENT
_thing$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_angle$ = 24						; size = 4
_P_MixUp PROC						; COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 41   : 	// the move is ok,
; 42   : 	// so link the thing into its new position
; 43   : 	P_UnsetThingPosition(thing);

  00009	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00012	83 c4 04	 add	 esp, 4

; 44   : 
; 45   : 	// Remove touching_sectorlist from mobj.
; 46   : 	if (sector_list)

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _sector_list, 0
  0001c	74 18		 je	 SHORT $LN2@P_MixUp

; 47   : 	{
; 48   : 		P_DelSeclist(sector_list);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _sector_list
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _P_DelSeclist
  00029	83 c4 04	 add	 esp, 4

; 49   : 		sector_list = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _sector_list, 0
$LN2@P_MixUp:

; 50   : 	}
; 51   : 
; 52   : 	thing->x = x;

  00036	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0003c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 53   : 	thing->y = y;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00042	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  00045	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 54   : 	thing->z = z;

  00048	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0004b	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0004e	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 55   : 
; 56   : 	if (thing->player)

  00051	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00054	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0005b	0f 84 cb 01 00
	00		 je	 $LN3@P_MixUp

; 57   : 	{
; 58   : 		if (thing->eflags & MFE_VERTICALFLIP)

  00061	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00064	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0006a	83 e1 20	 and	 ecx, 32			; 00000020H
  0006d	74 26		 je	 SHORT $LN4@P_MixUp

; 59   : 			thing->player->viewz = thing->z + thing->height - thing->player->viewheight;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00072	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00075	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  00078	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0007b	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0007e	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  00084	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  00087	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0008a	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  00090	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00093	eb 1e		 jmp	 SHORT $LN5@P_MixUp
$LN4@P_MixUp:

; 60   : 		else
; 61   : 			thing->player->viewz = thing->z + thing->player->viewheight;

  00095	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00098	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0009e	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  000a1	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000a4	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  000aa	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  000b0	89 42 10	 mov	 DWORD PTR [edx+16], eax
$LN5@P_MixUp:

; 62   : 
; 63   : 		if (!thing->tracer)

  000b3	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000b6	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  000bd	75 0d		 jne	 SHORT $LN6@P_MixUp

; 64   : 			thing->reactiontime = TICRATE/2; // don't move for about half a second

  000bf	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  000c2	c7 80 9c 00 00
	00 11 00 00 00	 mov	 DWORD PTR [eax+156], 17	; 00000011H
$LN6@P_MixUp:

; 65   : 
; 66   : 		// absolute angle position
; 67   : 		if (thing == players[consoleplayer].mo)

  000cc	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  000d9	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax]
  000df	75 08		 jne	 SHORT $LN7@P_MixUp

; 68   : 			localangle = angle;

  000e1	8b 45 18	 mov	 eax, DWORD PTR _angle$[ebp]
  000e4	a3 00 00 00 00	 mov	 DWORD PTR _localangle, eax
$LN7@P_MixUp:

; 69   : 		if (splitscreen && thing == players[secondarydisplayplayer].mo)

  000e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  000f0	74 1d		 je	 SHORT $LN8@P_MixUp
  000f2	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  000ff	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax]
  00105	75 08		 jne	 SHORT $LN8@P_MixUp

; 70   : 			localangle2 = angle;

  00107	8b 45 18	 mov	 eax, DWORD PTR _angle$[ebp]
  0010a	a3 00 00 00 00	 mov	 DWORD PTR _localangle2, eax
$LN8@P_MixUp:

; 71   : 
; 72   : 		// move chasecam at new player location
; 73   : 		if (splitscreen && cv_chasecam2.value
; 74   : 			&& thing->player == &players[secondarydisplayplayer])

  0010f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00116	74 3c		 je	 SHORT $LN9@P_MixUp
  00118	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam2+20, 0
  0011f	74 33		 je	 SHORT $LN9@P_MixUp
  00121	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0012b	05 00 00 00 00	 add	 eax, OFFSET _players
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00133	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  00139	75 19		 jne	 SHORT $LN9@P_MixUp

; 75   : 		{
; 76   : 			P_ResetCamera(thing->player, &camera2);

  0013b	68 00 00 00 00	 push	 OFFSET _camera2
  00140	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00143	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 _P_ResetCamera
  0014f	83 c4 08	 add	 esp, 8

; 77   : 		}

  00152	eb 3a		 jmp	 SHORT $LN11@P_MixUp
$LN9@P_MixUp:

; 78   : 		else if (cv_chasecam.value && thing->player == &players[displayplayer])

  00154	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_chasecam+20, 0
  0015b	74 31		 je	 SHORT $LN11@P_MixUp
  0015d	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _displayplayer, 508
  00167	05 00 00 00 00	 add	 eax, OFFSET _players
  0016c	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  0016f	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  00175	75 17		 jne	 SHORT $LN11@P_MixUp

; 79   : 			P_ResetCamera(thing->player, &camera);

  00177	68 00 00 00 00	 push	 OFFSET _camera
  0017c	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0017f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00185	51		 push	 ecx
  00186	e8 00 00 00 00	 call	 _P_ResetCamera
  0018b	83 c4 08	 add	 esp, 8
$LN11@P_MixUp:

; 80   : 
; 81   : 		// don't run in place after a teleport
; 82   : 		thing->player->cmomx = thing->player->cmomy = 0;

  0018e	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00191	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00197	c7 81 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+320], 0
  001a1	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  001a4	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  001aa	c7 80 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+316], 0

; 83   : 		thing->player->rmomx = thing->player->rmomy = 0;

  001b4	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001b7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001bd	c7 81 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+328], 0
  001c7	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  001ca	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  001d0	c7 80 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+324], 0

; 84   : 		if (!thing->tracer)

  001da	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001dd	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  001e4	75 13		 jne	 SHORT $LN12@P_MixUp

; 85   : 			thing->player->speed = 0;

  001e6	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001e9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001ef	c7 81 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+268], 0
$LN12@P_MixUp:

; 86   : 
; 87   : 		P_ResetPlayer(thing->player);

  001f9	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  001fc	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00202	51		 push	 ecx
  00203	e8 00 00 00 00	 call	 _P_ResetPlayer
  00208	83 c4 04	 add	 esp, 4

; 88   : 		P_SetPlayerMobjState(thing, S_PLAY_STND);

  0020b	6a 01		 push	 1
  0020d	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00216	83 c4 08	 add	 esp, 8

; 89   : 
; 90   : 		thing->player->bonuscount = 10; // flash the palette

  00219	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0021c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00222	c7 81 b0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR [ecx+176], 10	; 0000000aH
$LN3@P_MixUp:

; 91   : 	}
; 92   : 
; 93   : 	thing->angle = angle;

  0022c	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  0022f	8b 4d 18	 mov	 ecx, DWORD PTR _angle$[ebp]
  00232	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 94   : 
; 95   : 	thing->momx = thing->momy = thing->momz = 0;

  00235	8b 45 08	 mov	 eax, DWORD PTR _thing$[ebp]
  00238	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0023f	8b 4d 08	 mov	 ecx, DWORD PTR _thing$[ebp]
  00242	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00249	8b 55 08	 mov	 edx, DWORD PTR _thing$[ebp]
  0024c	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 96   : }

  00253	5f		 pop	 edi
  00254	5e		 pop	 esi
  00255	5b		 pop	 ebx
  00256	8b e5		 mov	 esp, ebp
  00258	5d		 pop	 ebp
  00259	c3		 ret	 0
_P_MixUp ENDP
_TEXT	ENDS
END
