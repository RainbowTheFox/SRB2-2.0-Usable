; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

	TITLE	C:\Users\RafaTheFox\Downloads\SRB2-Public-master\objs\VC10\Win32\Debug\p_inter.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ATTRPACK:DWORD
_DATA	ENDS
PUBLIC	_P_ForceFeed
PUBLIC	_P_ForceConstant
PUBLIC	_P_RampConstant
PUBLIC	_P_DamageMobj
PUBLIC	_P_KillMobj
PUBLIC	_P_PlayerRingBurst
PUBLIC	_P_PlayerEmeraldBurst
PUBLIC	_P_TouchSpecialThing
PUBLIC	_P_PlayerFlagBurst
PUBLIC	_P_CheckPointLimit
PUBLIC	_P_CheckSurvivors
PUBLIC	_P_CheckRacers
PUBLIC	_P_PlayRinglossSound
PUBLIC	_P_PlayDeathSound
PUBLIC	_P_PlayVictorySound
PUBLIC	_P_PlayTauntSound
PUBLIC	_P_ClearStarPost
PUBLIC	_P_CanPickupItem
PUBLIC	??_C@_0BM@MIIHFIPM@Mario?5Koopa?5Blast?5Unlocked?$CB@ ; `string'
PUBLIC	??_C@_0BM@BADGNGJC@Sonic?5Into?5Dreams?5Unlocked?$CB@ ; `string'
PUBLIC	??_C@_0BI@PFNHFABN@Pandora?8s?5Box?5Unlocked?$CB@ ; `string'
PUBLIC	??_C@_0BG@MHBGBANL@Bad?5Starpost?5Number?$CB?6@	; `string'
PUBLIC	??_C@_01IFKFHFEL@?$IA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_01PINCIBAO@?$IF@				; `string'
PUBLIC	??_C@_01OBMJLAEP@?$IE@				; `string'
PUBLIC	??_C@_0CC@FOHBJDHA@The?5IT?5player?5has?5left?5the?5game@ ; `string'
PUBLIC	??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@		; `string'
PUBLIC	??_C@_0BP@NLDNGKCA@All?5players?5have?5been?5tagged?$CB?6@ ; `string'
PUBLIC	??_C@_0CJ@BGBGIPOA@There?5are?5no?5players?5able?5to?5be@ ; `string'
PUBLIC	??_C@_0P@IJKKFILK@?$CFs?5was?5found?$CB?6@	; `string'
PUBLIC	??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@ ; `string'
PUBLIC	??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@ ; `string'
PUBLIC	??_C@_03FAAAOPJM@red@				; `string'
PUBLIC	??_C@_04OBGPFBCN@blue@				; `string'
EXTRN	_abs:PROC
EXTRN	_CONS_Printf:PROC
EXTRN	_va:PROC
EXTRN	_FixedMul:PROC
EXTRN	_FixedDiv2:PROC
EXTRN	_I_Tactile:PROC
EXTRN	_I_Tactile2:PROC
EXTRN	_I_OutputMsg:PROC
EXTRN	_AM_Stop:PROC
EXTRN	_FixedAngle:PROC
EXTRN	_P_SpawnParaloop:PROC
EXTRN	_P_SetScale:PROC
EXTRN	_SendNetXCmd:PROC
EXTRN	_D_NumPlayers:PROC
EXTRN	_G_SaveGameData:PROC
EXTRN	_G_IsSpecialStage:PROC
EXTRN	_P_Random:PROC
EXTRN	_P_SetTarget:PROC
EXTRN	_P_AproxDistance:PROC
EXTRN	_P_AddPlayerScore:PROC
EXTRN	_P_DoPlayerPain:PROC
EXTRN	_P_ResetPlayer:PROC
EXTRN	_P_IsLocalPlayer:PROC
EXTRN	_P_IsObjectOnGround:PROC
EXTRN	_P_SetObjectMomZ:PROC
EXTRN	_P_RestoreMusic:PROC
EXTRN	_P_GivePlayerRings:PROC
EXTRN	_P_GiveEmerald:PROC
EXTRN	_P_ResetScore:PROC
EXTRN	_P_NightserizePlayer:PROC
EXTRN	_P_InstaThrust:PROC
EXTRN	_P_ReturnThrustX:PROC
EXTRN	_P_ReturnThrustY:PROC
EXTRN	_P_SpawnMobj:PROC
EXTRN	_P_RemoveMobj:PROC
EXTRN	_P_SetPlayerMobjState:PROC
EXTRN	_P_SetMobjState:PROC
EXTRN	_P_MobjThinker:PROC
EXTRN	_P_SPMAngle:PROC
EXTRN	_P_ColorTeamMissile:PROC
EXTRN	_P_UnsetThingPosition:PROC
EXTRN	_P_SetThingPosition:PROC
EXTRN	_P_RadiusAttack:PROC
EXTRN	_P_PlayerTouchingSectorSpecial:PROC
EXTRN	_EV_DoElevator:PROC
EXTRN	_S_StartSound:PROC
EXTRN	_S_ChangeMusic:PROC
EXTRN	_S_StopMusic:PROC
EXTRN	_S_SoundPlaying:PROC
EXTRN	_R_PointToAngle2:PROC
EXTRN	_HU_SetCEchoDuration:PROC
EXTRN	_HU_SetCEchoFlags:PROC
EXTRN	_HU_DoCEcho:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_ultimatemode:BYTE
EXTRN	_automapactive:DWORD
EXTRN	_text:BYTE
EXTRN	_finesine:BYTE
EXTRN	_finecosine:DWORD
EXTRN	_states:BYTE
EXTRN	_mobjinfo:BYTE
EXTRN	_gamemap:WORD
EXTRN	_maptol:WORD
EXTRN	_modifiedgame:DWORD
EXTRN	_savemoddata:DWORD
EXTRN	_timeattacking:DWORD
EXTRN	_netgame:DWORD
EXTRN	_multiplayer:DWORD
EXTRN	_gametype:WORD
EXTRN	_splitscreen:DWORD
EXTRN	_circuitmap:DWORD
EXTRN	_consoleplayer:DWORD
EXTRN	_secondarydisplayplayer:DWORD
EXTRN	_sstage_start:WORD
EXTRN	_sstage_end:WORD
EXTRN	_useNightsSS:DWORD
EXTRN	_redflag:DWORD
EXTRN	_blueflag:DWORD
EXTRN	_rflagpoint:DWORD
EXTRN	_bflagpoint:DWORD
EXTRN	_emeralds:WORD
EXTRN	_numemblems:DWORD
EXTRN	_nummaprings:DWORD
EXTRN	_emblemlocations:BYTE
EXTRN	_token:DWORD
EXTRN	_tokenlist:DWORD
EXTRN	_sstimer:DWORD
EXTRN	_bluescore:DWORD
EXTRN	_redscore:DWORD
EXTRN	_flashingtics:DWORD
EXTRN	_underwatertics:DWORD
EXTRN	_paralooptics:DWORD
EXTRN	_helpertics:DWORD
EXTRN	_hunt1:DWORD
EXTRN	_hunt2:DWORD
EXTRN	_hunt3:DWORD
EXTRN	_countdown:DWORD
EXTRN	_countdown2:DWORD
EXTRN	_hidetime:DWORD
EXTRN	_grade:DWORD
EXTRN	_cv_itemrespawntime:BYTE
EXTRN	_cv_itemrespawn:BYTE
EXTRN	_cv_flagtime:BYTE
EXTRN	_cv_suddendeath:BYTE
EXTRN	_cv_tagtype:BYTE
EXTRN	_cv_matchtype:BYTE
EXTRN	_cv_friendlyfire:BYTE
EXTRN	_cv_pointlimit:BYTE
EXTRN	_cv_killingdead:BYTE
EXTRN	_cv_objectplace:BYTE
EXTRN	_cv_soniccd:BYTE
EXTRN	_cv_match_scoring:BYTE
EXTRN	_server:DWORD
EXTRN	_player_names:BYTE
EXTRN	_players:BYTE
EXTRN	_playeringame:BYTE
EXTRN	_demoplayback:DWORD
EXTRN	_localangle:DWORD
EXTRN	_localangle2:DWORD
EXTRN	_localaiming:DWORD
EXTRN	_localaiming2:DWORD
EXTRN	_leveltime:DWORD
EXTRN	_thinkercap:BYTE
EXTRN	_camera:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_04OBGPFBCN@blue@
CONST	SEGMENT
??_C@_04OBGPFBCN@blue@ DB 'blue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FAAAOPJM@red@
CONST	SEGMENT
??_C@_03FAAAOPJM@red@ DB 'red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@
CONST	SEGMENT
??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@ DB '%s is no longer '
	DB	'super.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@
CONST	SEGMENT
??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@ DB '%s\is no l'
	DB	'onger super.\\\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IJKKFILK@?$CFs?5was?5found?$CB?6@
CONST	SEGMENT
??_C@_0P@IJKKFILK@?$CFs?5was?5found?$CB?6@ DB '%s was found!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BGBGIPOA@There?5are?5no?5players?5able?5to?5be@
CONST	SEGMENT
??_C@_0CJ@BGBGIPOA@There?5are?5no?5players?5able?5to?5be@ DB 'There are n'
	DB	'o players able to become IT.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NLDNGKCA@All?5players?5have?5been?5tagged?$CB?6@
CONST	SEGMENT
??_C@_0BP@NLDNGKCA@All?5players?5have?5been?5tagged?$CB?6@ DB 'All player'
	DB	's have been tagged!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@
CONST	SEGMENT
??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@ DB '%s is it!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FOHBJDHA@The?5IT?5player?5has?5left?5the?5game@
CONST	SEGMENT
??_C@_0CC@FOHBJDHA@The?5IT?5player?5has?5left?5the?5game@ DB 'The IT play'
	DB	'er has left the game.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OBMJLAEP@?$IE@
CONST	SEGMENT
??_C@_01OBMJLAEP@?$IE@ DB 084H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PINCIBAO@?$IF@
CONST	SEGMENT
??_C@_01PINCIBAO@?$IF@ DB 085H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01IFKFHFEL@?$IA@
CONST	SEGMENT
??_C@_01IFKFHFEL@?$IA@ DB 080H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MHBGBANL@Bad?5Starpost?5Number?$CB?6@
CONST	SEGMENT
??_C@_0BG@MHBGBANL@Bad?5Starpost?5Number?$CB?6@ DB 'Bad Starpost Number!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PFNHFABN@Pandora?8s?5Box?5Unlocked?$CB@
CONST	SEGMENT
??_C@_0BI@PFNHFABN@Pandora?8s?5Box?5Unlocked?$CB@ DB 'Pandora''s Box Unlo'
	DB	'cked!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BADGNGJC@Sonic?5Into?5Dreams?5Unlocked?$CB@
CONST	SEGMENT
??_C@_0BM@BADGNGJC@Sonic?5Into?5Dreams?5Unlocked?$CB@ DB 'Sonic Into Drea'
	DB	'ms Unlocked!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MIIHFIPM@Mario?5Koopa?5Blast?5Unlocked?$CB@
CONST	SEGMENT
??_C@_0BM@MIIHFIPM@Mario?5Koopa?5Blast?5Unlocked?$CB@ DB 'Mario Koopa Bla'
	DB	'st Unlocked!', 00H				; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0224H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	038ecH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0b7H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0abH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_RingDamage
_TEXT	SEGMENT
tv94 = -68						; size = 4
_player$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_damage$ = 20						; size = 4
_P_RingDamage PROC					; COMDAT

; 2712 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2713 : 	if (!(inflictor && ((inflictor->flags & MF_MISSILE) || inflictor->player) && player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds])))

  00009	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  0000d	74 47		 je	 SHORT $LN4@P_RingDama
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00012	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00015	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  0001b	75 0c		 jne	 SHORT $LN5@P_RingDama
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00020	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00027	74 2d		 je	 SHORT $LN4@P_RingDama
$LN5@P_RingDama:
  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	6b c8 0f	 imul	 ecx, eax, 15
  00031	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00034	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00039	74 1b		 je	 SHORT $LN4@P_RingDama
  0003b	b8 04 00 00 00	 mov	 eax, 4
  00040	6b c8 18	 imul	 ecx, eax, 24
  00043	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00046	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0004a	83 e0 7f	 and	 eax, 127		; 0000007fH
  0004d	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00050	0f 84 35 01 00
	00		 je	 $LN2@P_RingDama
$LN4@P_RingDama:

; 2714 : 	{
; 2715 : 		player->powers[pw_fireflower] = false;

  00056	b8 04 00 00 00	 mov	 eax, 4
  0005b	6b c8 11	 imul	 ecx, eax, 17
  0005e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00061	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2716 : 		player->mo->flags |= MF_TRANSLATION;

  00069	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00071	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00077	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 2717 : 		player->mo->color =  (UINT8)player->skincolor;

  0007f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00087	8a 82 b4 00 00
	00		 mov	 al, BYTE PTR [edx+180]
  0008d	88 41 68	 mov	 BYTE PTR [ecx+104], al

; 2718 : 
; 2719 : 		P_DoPlayerPain(player, source, inflictor);

  00090	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00093	50		 push	 eax
  00094	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00097	51		 push	 ecx
  00098	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 _P_DoPlayerPain
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2720 : 
; 2721 : 		P_ForceFeed(player, 40, 10, TICRATE, 40 + min(damage, 100)*2);

  000a4	83 7d 14 64	 cmp	 DWORD PTR _damage$[ebp], 100 ; 00000064H
  000a8	7d 08		 jge	 SHORT $LN23@P_RingDama
  000aa	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  000ad	89 45 bc	 mov	 DWORD PTR tv94[ebp], eax
  000b0	eb 07		 jmp	 SHORT $LN24@P_RingDama
$LN23@P_RingDama:
  000b2	c7 45 bc 64 00
	00 00		 mov	 DWORD PTR tv94[ebp], 100 ; 00000064H
$LN24@P_RingDama:
  000b9	8b 4d bc	 mov	 ecx, DWORD PTR tv94[ebp]
  000bc	8d 54 09 28	 lea	 edx, DWORD PTR [ecx+ecx+40]
  000c0	52		 push	 edx
  000c1	6a 23		 push	 35			; 00000023H
  000c3	6a 0a		 push	 10			; 0000000aH
  000c5	6a 28		 push	 40			; 00000028H
  000c7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _P_ForceFeed
  000d0	83 c4 14	 add	 esp, 20			; 00000014H

; 2722 : 
; 2723 : 		if (source && (source->type == MT_DISS || source->type == MT_FLOORSPIKE || source->type == MT_CEILINGSPIKE) && source->threshold == 43) // spikes

  000d3	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  000d7	74 3d		 je	 SHORT $LN6@P_RingDama
  000d9	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000dc	81 78 7c 05 01
	00 00		 cmp	 DWORD PTR [eax+124], 261 ; 00000105H
  000e3	74 12		 je	 SHORT $LN7@P_RingDama
  000e5	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000e8	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  000ec	74 09		 je	 SHORT $LN7@P_RingDama
  000ee	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000f1	83 78 7c 48	 cmp	 DWORD PTR [eax+124], 72	; 00000048H
  000f5	75 1f		 jne	 SHORT $LN6@P_RingDama
$LN7@P_RingDama:
  000f7	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000fa	83 b8 a0 00 00
	00 2b		 cmp	 DWORD PTR [eax+160], 43	; 0000002bH
  00101	75 13		 jne	 SHORT $LN6@P_RingDama

; 2724 : 			S_StartSound(player->mo, sfx_spkdth);

  00103	68 d4 00 00 00	 push	 212			; 000000d4H
  00108	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 _S_StartSound
  00113	83 c4 08	 add	 esp, 8
$LN6@P_RingDama:

; 2725 : 
; 2726 : 		if (source && source->player && !player->powers[pw_super]) //don't score points against super players

  00116	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0011a	74 6d		 je	 SHORT $LN9@P_RingDama
  0011c	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0011f	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00126	74 61		 je	 SHORT $LN9@P_RingDama
  00128	b8 04 00 00 00	 mov	 eax, 4
  0012d	6b c8 0f	 imul	 ecx, eax, 15
  00130	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00133	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00138	75 4f		 jne	 SHORT $LN9@P_RingDama

; 2727 : 		{
; 2728 : 			// Award no points when players shoot each other when cv_friendlyfire is on.
; 2729 : 			if (!((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0013a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00141	83 f8 04	 cmp	 eax, 4
  00144	74 15		 je	 SHORT $LN11@P_RingDama
  00146	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0014d	83 f8 01	 cmp	 eax, 1
  00150	75 23		 jne	 SHORT $LN10@P_RingDama
  00152	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00159	74 1a		 je	 SHORT $LN10@P_RingDama
$LN11@P_RingDama:
  0015b	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0015e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00164	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00167	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  0016d	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  00173	74 14		 je	 SHORT $LN9@P_RingDama
$LN10@P_RingDama:

; 2730 : 				&& (source->player->ctfteam == player->ctfteam)))
; 2731 : 				P_AddPlayerScore(source->player, 50);

  00175	6a 32		 push	 50			; 00000032H
  00177	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0017a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 _P_AddPlayerScore
  00186	83 c4 08	 add	 esp, 8
$LN9@P_RingDama:

; 2732 : 		}
; 2733 : 	}

  00189	eb 73		 jmp	 SHORT $LN13@P_RingDama
$LN2@P_RingDama:

; 2734 : 	else
; 2735 : 	{
; 2736 : 		if (source && source->player && !player->powers[pw_super]) //don't score points against super players

  0018b	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0018f	74 6d		 je	 SHORT $LN13@P_RingDama
  00191	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00194	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0019b	74 61		 je	 SHORT $LN13@P_RingDama
  0019d	b8 04 00 00 00	 mov	 eax, 4
  001a2	6b c8 0f	 imul	 ecx, eax, 15
  001a5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001a8	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  001ad	75 4f		 jne	 SHORT $LN13@P_RingDama

; 2737 : 		{
; 2738 : 			// Award no points when players shoot each other when cv_friendlyfire is on.
; 2739 : 			if (!((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  001af	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001b6	83 f8 04	 cmp	 eax, 4
  001b9	74 15		 je	 SHORT $LN15@P_RingDama
  001bb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001c2	83 f8 01	 cmp	 eax, 1
  001c5	75 23		 jne	 SHORT $LN14@P_RingDama
  001c7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  001ce	74 1a		 je	 SHORT $LN14@P_RingDama
$LN15@P_RingDama:
  001d0	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  001d3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001d9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001dc	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  001e2	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  001e8	74 14		 je	 SHORT $LN13@P_RingDama
$LN14@P_RingDama:

; 2740 : 				&& (source->player->ctfteam == player->ctfteam)))
; 2741 : 				P_AddPlayerScore(source->player, 50);

  001ea	6a 32		 push	 50			; 00000032H
  001ec	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  001ef	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001f5	51		 push	 ecx
  001f6	e8 00 00 00 00	 call	 _P_AddPlayerScore
  001fb	83 c4 08	 add	 esp, 8
$LN13@P_RingDama:

; 2742 : 		}
; 2743 : 	}
; 2744 : 
; 2745 : 	if (gametype == GT_CTF && (player->gotflag & MF_REDFLAG || player->gotflag & MF_BLUEFLAG))

  001fe	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00205	83 f8 04	 cmp	 eax, 4
  00208	0f 85 8d 00 00
	00		 jne	 $LN19@P_RingDama
  0020e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00211	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  00218	83 e1 01	 and	 ecx, 1
  0021b	75 0f		 jne	 SHORT $LN17@P_RingDama
  0021d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00220	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  00227	83 e1 02	 and	 ecx, 2
  0022a	74 6f		 je	 SHORT $LN19@P_RingDama
$LN17@P_RingDama:

; 2746 : 	{
; 2747 : 		P_PlayerFlagBurst(player, false);

  0022c	6a 00		 push	 0
  0022e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00231	50		 push	 eax
  00232	e8 00 00 00 00	 call	 _P_PlayerFlagBurst
  00237	83 c4 08	 add	 esp, 8

; 2748 : 		if (source && source->player)

  0023a	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0023e	74 5b		 je	 SHORT $LN19@P_RingDama
  00240	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00243	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0024a	74 4f		 je	 SHORT $LN19@P_RingDama

; 2749 : 		{
; 2750 : 			// Award no points when players shoot each other when cv_friendlyfire is on.
; 2751 : 			if (!((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0024c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00253	83 f8 04	 cmp	 eax, 4
  00256	74 15		 je	 SHORT $LN21@P_RingDama
  00258	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0025f	83 f8 01	 cmp	 eax, 1
  00262	75 23		 jne	 SHORT $LN20@P_RingDama
  00264	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0026b	74 1a		 je	 SHORT $LN20@P_RingDama
$LN21@P_RingDama:
  0026d	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00270	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00276	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00279	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  0027f	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  00285	74 14		 je	 SHORT $LN19@P_RingDama
$LN20@P_RingDama:

; 2752 : 				&& (source->player->ctfteam == player->ctfteam)))
; 2753 : 				P_AddPlayerScore(source->player, 25);

  00287	6a 19		 push	 25			; 00000019H
  00289	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0028c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00292	51		 push	 ecx
  00293	e8 00 00 00 00	 call	 _P_AddPlayerScore
  00298	83 c4 08	 add	 esp, 8
$LN19@P_RingDama:

; 2754 : 		}
; 2755 : 	}
; 2756 : 
; 2757 : 	// Ring loss sound plays despite hitting spikes
; 2758 : 	P_PlayRinglossSound(player->mo); // Ringledingle!

  0029b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0029e	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 _P_PlayRinglossSound
  002a6	83 c4 04	 add	 esp, 4

; 2759 : }

  002a9	5f		 pop	 edi
  002aa	5e		 pop	 esi
  002ab	5b		 pop	 ebx
  002ac	8b e5		 mov	 esp, ebp
  002ae	5d		 pop	 ebp
  002af	c3		 ret	 0
_P_RingDamage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_ShieldDamage
_TEXT	SEGMENT
tv176 = -76						; size = 4
tv243 = -76						; size = 4
_mo$1 = -8						; size = 4
_reflected$ = -4					; size = 4
_player$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_damage$ = 20						; size = 4
_P_ShieldDamage PROC					; COMDAT

; 2646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2647 : 	boolean reflected = false;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _reflected$[ebp], 0

; 2648 : 	player->powers[pw_jumpshield] = false; // Get rid of shield

  00010	b8 04 00 00 00	 mov	 eax, 4
  00015	6b c8 03	 imul	 ecx, eax, 3
  00018	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0001b	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2649 : 	player->powers[pw_ringshield] = false;

  00023	b8 04 00 00 00	 mov	 eax, 4
  00028	6b c8 09	 imul	 ecx, eax, 9
  0002b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0002e	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2650 : 	player->powers[pw_watershield] = false;

  00036	b8 04 00 00 00	 mov	 eax, 4
  0003b	6b c8 0b	 imul	 ecx, eax, 11
  0003e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00041	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2651 : 
; 2652 : 	if (player->powers[pw_forceshield] > 0) // Multi-hit and reflection effect

  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	c1 e0 02	 shl	 eax, 2
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00054	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00059	0f 8e 1f 01 00
	00		 jle	 $LN3@P_ShieldDa

; 2653 : 	{
; 2654 : 		mobj_t *mo;
; 2655 : 
; 2656 : 		player->powers[pw_forceshield]--;

  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	c1 e0 02	 shl	 eax, 2
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0006a	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  0006e	83 ea 01	 sub	 edx, 1
  00071	b8 04 00 00 00	 mov	 eax, 4
  00076	c1 e0 02	 shl	 eax, 2
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0007c	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 2657 : 
; 2658 : 		if ((inflictor && inflictor->flags & MF_MISSILE) && !(inflictor->flags2 & MF2_REFLECTED) &&
; 2659 : 			inflictor->type != MT_SPINFIRE && // don't reflect firetrails

  00080	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00084	0f 84 f4 00 00
	00		 je	 $LN3@P_ShieldDa
  0008a	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0008d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00090	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00096	0f 84 e2 00 00
	00		 je	 $LN3@P_ShieldDa
  0009c	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0009f	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000a5	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  000ab	0f 85 cd 00 00
	00		 jne	 $LN3@P_ShieldDa
  000b1	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000b4	83 78 7c 47	 cmp	 DWORD PTR [eax+124], 71	; 00000047H
  000b8	0f 84 c0 00 00
	00		 je	 $LN3@P_ShieldDa
  000be	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000c1	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000c7	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  000cd	0f 85 ab 00 00
	00		 jne	 $LN3@P_ShieldDa
  000d3	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000d6	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000dc	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  000e2	0f 85 96 00 00
	00		 jne	 $LN3@P_ShieldDa
  000e8	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000eb	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000f1	83 e1 40	 and	 ecx, 64			; 00000040H
  000f4	0f 85 84 00 00
	00		 jne	 $LN3@P_ShieldDa

; 2660 : 			!(inflictor->flags2 & MF2_RAILRING || inflictor->flags2 & MF2_GRENADE || inflictor->flags2 & MF2_DEBRIS))
; 2661 : 		{
; 2662 : 			// Return to sender!
; 2663 : 			mo = P_SpawnPlayerMissile(player->mo, inflictor->type, inflictor->flags2, true);

  000fa	6a 01		 push	 1
  000fc	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000ff	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00105	51		 push	 ecx
  00106	6a 00		 push	 0
  00108	6a 00		 push	 0
  0010a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0010d	8b 02		 mov	 eax, DWORD PTR [edx]
  0010f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00112	51		 push	 ecx
  00113	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  00116	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00119	50		 push	 eax
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0011d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 _P_SPMAngle
  00125	83 c4 1c	 add	 esp, 28			; 0000001cH
  00128	89 45 f8	 mov	 DWORD PTR _mo$1[ebp], eax

; 2664 : 
; 2665 : 			if (mo)

  0012b	83 7d f8 00	 cmp	 DWORD PTR _mo$1[ebp], 0
  0012f	74 46		 je	 SHORT $LN5@P_ShieldDa

; 2666 : 			{
; 2667 : 				mo->momx = -inflictor->momx;

  00131	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00134	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00137	f7 d9		 neg	 ecx
  00139	8b 55 f8	 mov	 edx, DWORD PTR _mo$1[ebp]
  0013c	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 2668 : 				mo->momy = -inflictor->momy;

  0013f	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00142	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00145	f7 d9		 neg	 ecx
  00147	8b 55 f8	 mov	 edx, DWORD PTR _mo$1[ebp]
  0014a	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 2669 : 				mo->momz = -inflictor->momz;

  0014d	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00150	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00153	f7 d9		 neg	 ecx
  00155	8b 55 f8	 mov	 edx, DWORD PTR _mo$1[ebp]
  00158	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 2670 : 
; 2671 : 				if (mo->type == MT_REDRING)

  0015b	8b 45 f8	 mov	 eax, DWORD PTR _mo$1[ebp]
  0015e	81 78 7c cf 00
	00 00		 cmp	 DWORD PTR [eax+124], 207 ; 000000cfH
  00165	75 10		 jne	 SHORT $LN5@P_ShieldDa

; 2672 : 					P_ColorTeamMissile(mo, player);

  00167	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d f8	 mov	 ecx, DWORD PTR _mo$1[ebp]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 _P_ColorTeamMissile
  00174	83 c4 08	 add	 esp, 8
$LN5@P_ShieldDa:

; 2673 : 			}
; 2674 : 
; 2675 : 			reflected = true;

  00177	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _reflected$[ebp], 1
$LN3@P_ShieldDa:

; 2676 : 		}
; 2677 : 	}
; 2678 : 
; 2679 : 	if (player->powers[pw_bombshield]) // Give them what's coming to them!

  0017e	b8 04 00 00 00	 mov	 eax, 4
  00183	6b c8 0a	 imul	 ecx, eax, 10
  00186	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00189	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0018e	74 35		 je	 SHORT $LN6@P_ShieldDa

; 2680 : 	{
; 2681 : 		player->blackow = 1; // BAM!

  00190	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00193	c7 80 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+308], 1

; 2682 : 		player->powers[pw_bombshield] = false;

  0019d	b8 04 00 00 00	 mov	 eax, 4
  001a2	6b c8 0a	 imul	 ecx, eax, 10
  001a5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001a8	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2683 : 		player->pflags |= PF_JUMPDOWN;

  001b0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b3	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  001b9	83 c9 08	 or	 ecx, 8
  001bc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001bf	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN6@P_ShieldDa:

; 2684 : 	}
; 2685 : 	P_ForceFeed(player, 40, 10, TICRATE, 40 + min(damage, 100)*2);

  001c5	83 7d 14 64	 cmp	 DWORD PTR _damage$[ebp], 100 ; 00000064H
  001c9	7d 08		 jge	 SHORT $LN17@P_ShieldDa
  001cb	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  001ce	89 45 b4	 mov	 DWORD PTR tv176[ebp], eax
  001d1	eb 07		 jmp	 SHORT $LN18@P_ShieldDa
$LN17@P_ShieldDa:
  001d3	c7 45 b4 64 00
	00 00		 mov	 DWORD PTR tv176[ebp], 100 ; 00000064H
$LN18@P_ShieldDa:
  001da	8b 4d b4	 mov	 ecx, DWORD PTR tv176[ebp]
  001dd	8d 54 09 28	 lea	 edx, DWORD PTR [ecx+ecx+40]
  001e1	52		 push	 edx
  001e2	6a 23		 push	 35			; 00000023H
  001e4	6a 0a		 push	 10			; 0000000aH
  001e6	6a 28		 push	 40			; 00000028H
  001e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _P_ForceFeed
  001f1	83 c4 14	 add	 esp, 20			; 00000014H

; 2686 : 	damage = 0; // Don't take rings away

  001f4	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 0

; 2687 : 
; 2688 : 	P_DoPlayerPain(player, source, inflictor);

  001fb	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  001fe	50		 push	 eax
  001ff	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00202	51		 push	 ecx
  00203	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 _P_DoPlayerPain
  0020c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2689 : 
; 2690 : 	player->powers[pw_fireflower] = false;

  0020f	b8 04 00 00 00	 mov	 eax, 4
  00214	6b c8 11	 imul	 ecx, eax, 17
  00217	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0021a	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2691 : 	player->mo->flags |= MF_TRANSLATION;

  00222	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00225	8b 08		 mov	 ecx, DWORD PTR [eax]
  00227	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0022a	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00230	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00233	8b 08		 mov	 ecx, DWORD PTR [eax]
  00235	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 2692 : 	player->mo->color = (UINT8)player->skincolor;

  00238	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0023b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00240	8a 82 b4 00 00
	00		 mov	 al, BYTE PTR [edx+180]
  00246	88 41 68	 mov	 BYTE PTR [ecx+104], al

; 2693 : 
; 2694 : 	if (source && (source->type == MT_DISS || source->type == MT_FLOORSPIKE || source->type == MT_CEILINGSPIKE) && source->threshold == 43) // spikes

  00249	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0024d	74 3f		 je	 SHORT $LN7@P_ShieldDa
  0024f	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00252	81 78 7c 05 01
	00 00		 cmp	 DWORD PTR [eax+124], 261 ; 00000105H
  00259	74 12		 je	 SHORT $LN9@P_ShieldDa
  0025b	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0025e	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  00262	74 09		 je	 SHORT $LN9@P_ShieldDa
  00264	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00267	83 78 7c 48	 cmp	 DWORD PTR [eax+124], 72	; 00000048H
  0026b	75 21		 jne	 SHORT $LN7@P_ShieldDa
$LN9@P_ShieldDa:
  0026d	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00270	83 b8 a0 00 00
	00 2b		 cmp	 DWORD PTR [eax+160], 43	; 0000002bH
  00277	75 15		 jne	 SHORT $LN7@P_ShieldDa

; 2695 : 		S_StartSound(player->mo, sfx_spkdth);

  00279	68 d4 00 00 00	 push	 212			; 000000d4H
  0027e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00281	8b 08		 mov	 ecx, DWORD PTR [eax]
  00283	51		 push	 ecx
  00284	e8 00 00 00 00	 call	 _S_StartSound
  00289	83 c4 08	 add	 esp, 8
  0028c	eb 2e		 jmp	 SHORT $LN11@P_ShieldDa
$LN7@P_ShieldDa:

; 2696 : 	else if (reflected) //play the reflect sound if reflected.

  0028e	83 7d fc 00	 cmp	 DWORD PTR _reflected$[ebp], 0
  00292	74 15		 je	 SHORT $LN10@P_ShieldDa

; 2697 : 		S_StartSound(player->mo, sfx_shield);

  00294	68 d0 00 00 00	 push	 208			; 000000d0H
  00299	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0029c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029e	51		 push	 ecx
  0029f	e8 00 00 00 00	 call	 _S_StartSound
  002a4	83 c4 08	 add	 esp, 8
  002a7	eb 13		 jmp	 SHORT $LN11@P_ShieldDa
$LN10@P_ShieldDa:

; 2698 : 	else
; 2699 : 		S_StartSound (player->mo, sfx_shldls); // Ba-Dum! Shield loss.

  002a9	68 d1 00 00 00	 push	 209			; 000000d1H
  002ae	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b3	51		 push	 ecx
  002b4	e8 00 00 00 00	 call	 _S_StartSound
  002b9	83 c4 08	 add	 esp, 8
$LN11@P_ShieldDa:

; 2700 : 
; 2701 : 	if (gametype == GT_CTF && (player->gotflag & MF_REDFLAG || player->gotflag & MF_BLUEFLAG))

  002bc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002c3	83 f8 04	 cmp	 eax, 4
  002c6	75 52		 jne	 SHORT $LN14@P_ShieldDa
  002c8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002cb	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  002d2	83 e1 01	 and	 ecx, 1
  002d5	75 0f		 jne	 SHORT $LN13@P_ShieldDa
  002d7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002da	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  002e1	83 e1 02	 and	 ecx, 2
  002e4	74 34		 je	 SHORT $LN14@P_ShieldDa
$LN13@P_ShieldDa:

; 2702 : 	{
; 2703 : 		P_PlayerFlagBurst(player, false);

  002e6	6a 00		 push	 0
  002e8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002eb	50		 push	 eax
  002ec	e8 00 00 00 00	 call	 _P_PlayerFlagBurst
  002f1	83 c4 08	 add	 esp, 8

; 2704 : 		if (source && source->player)

  002f4	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  002f8	74 20		 je	 SHORT $LN14@P_ShieldDa
  002fa	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  002fd	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00304	74 14		 je	 SHORT $LN14@P_ShieldDa

; 2705 : 			P_AddPlayerScore(source->player, 25);

  00306	6a 19		 push	 25			; 00000019H
  00308	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0030b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00311	51		 push	 ecx
  00312	e8 00 00 00 00	 call	 _P_AddPlayerScore
  00317	83 c4 08	 add	 esp, 8
$LN14@P_ShieldDa:

; 2706 : 	}
; 2707 : 	if (source && source->player && !player->powers[pw_super]) //don't score points against super players

  0031a	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0031e	74 4d		 je	 SHORT $LN15@P_ShieldDa
  00320	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00323	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0032a	74 41		 je	 SHORT $LN15@P_ShieldDa
  0032c	b8 04 00 00 00	 mov	 eax, 4
  00331	6b c8 0f	 imul	 ecx, eax, 15
  00334	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00337	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0033c	75 2f		 jne	 SHORT $LN15@P_ShieldDa

; 2708 : 		P_AddPlayerScore(source->player, cv_match_scoring.value == 1 ? 25 : 50);

  0033e	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR _cv_match_scoring+20, 1
  00345	75 09		 jne	 SHORT $LN19@P_ShieldDa
  00347	c7 45 b4 19 00
	00 00		 mov	 DWORD PTR tv243[ebp], 25 ; 00000019H
  0034e	eb 07		 jmp	 SHORT $LN20@P_ShieldDa
$LN19@P_ShieldDa:
  00350	c7 45 b4 32 00
	00 00		 mov	 DWORD PTR tv243[ebp], 50 ; 00000032H
$LN20@P_ShieldDa:
  00357	8b 45 b4	 mov	 eax, DWORD PTR tv243[ebp]
  0035a	50		 push	 eax
  0035b	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0035e	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 _P_AddPlayerScore
  0036a	83 c4 08	 add	 esp, 8
$LN15@P_ShieldDa:

; 2709 : }

  0036d	5f		 pop	 edi
  0036e	5e		 pop	 esi
  0036f	5b		 pop	 ebx
  00370	8b e5		 mov	 esp, ebp
  00372	5d		 pop	 ebp
  00373	c3		 ret	 0
_P_ShieldDamage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_SuperDamage
_TEXT	SEGMENT
tv65 = -80						; size = 4
_dist$1 = -12						; size = 4
_ang$ = -8						; size = 4
_fallbackspeed$ = -4					; size = 4
_player$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_damage$ = 20						; size = 4
_P_SuperDamage PROC					; COMDAT

; 2595 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2596 : 	fixed_t fallbackspeed;
; 2597 : 	angle_t ang;
; 2598 : 
; 2599 : 	P_ForceFeed(player, 40, 10, TICRATE, 40 + min(damage, 100)*2);

  00009	83 7d 14 64	 cmp	 DWORD PTR _damage$[ebp], 100 ; 00000064H
  0000d	7d 08		 jge	 SHORT $LN16@P_SuperDam
  0000f	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  00012	89 45 b0	 mov	 DWORD PTR tv65[ebp], eax
  00015	eb 07		 jmp	 SHORT $LN17@P_SuperDam
$LN16@P_SuperDam:
  00017	c7 45 b0 64 00
	00 00		 mov	 DWORD PTR tv65[ebp], 100 ; 00000064H
$LN17@P_SuperDam:
  0001e	8b 4d b0	 mov	 ecx, DWORD PTR tv65[ebp]
  00021	8d 54 09 28	 lea	 edx, DWORD PTR [ecx+ecx+40]
  00025	52		 push	 edx
  00026	6a 23		 push	 35			; 00000023H
  00028	6a 0a		 push	 10			; 0000000aH
  0002a	6a 28		 push	 40			; 00000028H
  0002c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _P_ForceFeed
  00035	83 c4 14	 add	 esp, 20			; 00000014H

; 2600 : 	damage = 0; // Don't take rings away

  00038	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 0

; 2601 : 	player->mo->z++;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00047	83 c2 01	 add	 edx, 1
  0004a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 2602 : 
; 2603 : 	if (player->mo->eflags & MFE_UNDERWATER)

  00052	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0005d	83 e2 08	 and	 edx, 8
  00060	74 25		 je	 SHORT $LN2@P_SuperDam

; 2604 : 		P_SetObjectMomZ(player->mo, FixedDiv(10511*FRACUNIT,2600*FRACUNIT), false);

  00062	6a 00		 push	 0
  00064	68 00 00 28 0a	 push	 170393600		; 0a280000H
  00069	68 00 00 0f 29	 push	 688848896		; 290f0000H
  0006e	e8 00 00 00 00	 call	 _FixedDiv
  00073	83 c4 08	 add	 esp, 8
  00076	50		 push	 eax
  00077	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
  00085	eb 23		 jmp	 SHORT $LN3@P_SuperDam
$LN2@P_SuperDam:

; 2605 : 	else
; 2606 : 		P_SetObjectMomZ(player->mo, FixedDiv(69*FRACUNIT,10*FRACUNIT), false);

  00087	6a 00		 push	 0
  00089	68 00 00 0a 00	 push	 655360			; 000a0000H
  0008e	68 00 00 45 00	 push	 4521984			; 00450000H
  00093	e8 00 00 00 00	 call	 _FixedDiv
  00098	83 c4 08	 add	 esp, 8
  0009b	50		 push	 eax
  0009c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@P_SuperDam:

; 2607 : 
; 2608 : 	ang = R_PointToAngle2(inflictor->x,	inflictor->y, player->mo->x, player->mo->y);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b2	52		 push	 edx
  000b3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000bb	52		 push	 edx
  000bc	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000bf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c2	51		 push	 ecx
  000c3	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  000c6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _R_PointToAngle2
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	89 45 f8	 mov	 DWORD PTR _ang$[ebp], eax

; 2609 : 
; 2610 : 	// explosion and rail rings send you farther back, making it more difficult
; 2611 : 	// to recover
; 2612 : 	if (inflictor->flags2 & MF2_SCATTER)

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000d8	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000de	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  000e4	74 6f		 je	 SHORT $LN4@P_SuperDam

; 2613 : 	{
; 2614 : 		fixed_t dist = P_AproxDistance(P_AproxDistance(source->x-player->mo->x, source->y-player->mo->y), source->z-player->mo->z);

  000e6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  000ee	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000f1	2b 41 18	 sub	 eax, DWORD PTR [ecx+24]
  000f4	50		 push	 eax
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fa	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000fd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00100	2b 4a 14	 sub	 ecx, DWORD PTR [edx+20]
  00103	51		 push	 ecx
  00104	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00107	8b 02		 mov	 eax, DWORD PTR [edx]
  00109	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0010c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010f	2b 50 10	 sub	 edx, DWORD PTR [eax+16]
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 _P_AproxDistance
  00118	83 c4 08	 add	 esp, 8
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _P_AproxDistance
  00121	83 c4 08	 add	 esp, 8
  00124	89 45 f4	 mov	 DWORD PTR _dist$1[ebp], eax

; 2615 : 
; 2616 : 		dist = 128*FRACUNIT - dist/4;

  00127	8b 45 f4	 mov	 eax, DWORD PTR _dist$1[ebp]
  0012a	99		 cdq
  0012b	83 e2 03	 and	 edx, 3
  0012e	03 c2		 add	 eax, edx
  00130	c1 f8 02	 sar	 eax, 2
  00133	b9 00 00 80 00	 mov	 ecx, 8388608		; 00800000H
  00138	2b c8		 sub	 ecx, eax
  0013a	89 4d f4	 mov	 DWORD PTR _dist$1[ebp], ecx

; 2617 : 
; 2618 : 		if (dist < 4*FRACUNIT)

  0013d	81 7d f4 00 00
	04 00		 cmp	 DWORD PTR _dist$1[ebp], 262144 ; 00040000H
  00144	7d 07		 jge	 SHORT $LN6@P_SuperDam

; 2619 : 			dist = 4*FRACUNIT;

  00146	c7 45 f4 00 00
	04 00		 mov	 DWORD PTR _dist$1[ebp], 262144 ; 00040000H
$LN6@P_SuperDam:

; 2620 : 
; 2621 : 		fallbackspeed = dist;

  0014d	8b 45 f4	 mov	 eax, DWORD PTR _dist$1[ebp]
  00150	89 45 fc	 mov	 DWORD PTR _fallbackspeed$[ebp], eax

; 2622 : 	}

  00153	eb 55		 jmp	 SHORT $LN12@P_SuperDam
$LN4@P_SuperDam:

; 2623 : 	else if (inflictor->flags2 & MF2_EXPLOSION)

  00155	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00158	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0015e	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  00164	74 23		 je	 SHORT $LN7@P_SuperDam

; 2624 : 	{
; 2625 : 		if (inflictor->flags2 & MF2_RAILRING)

  00166	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00169	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0016f	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  00175	74 09		 je	 SHORT $LN9@P_SuperDam

; 2626 : 			fallbackspeed = 28*FRACUNIT; // 7x

  00177	c7 45 fc 00 00
	1c 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 1835008 ; 001c0000H
  0017e	eb 07		 jmp	 SHORT $LN10@P_SuperDam
$LN9@P_SuperDam:

; 2627 : 		else
; 2628 : 			fallbackspeed = 20*FRACUNIT; // 5x

  00180	c7 45 fc 00 00
	14 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 1310720 ; 00140000H
$LN10@P_SuperDam:

; 2629 : 	}

  00187	eb 21		 jmp	 SHORT $LN12@P_SuperDam
$LN7@P_SuperDam:

; 2630 : 	else if (inflictor->flags2 & MF2_RAILRING)

  00189	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0018c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00192	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  00198	74 09		 je	 SHORT $LN11@P_SuperDam

; 2631 : 		fallbackspeed = 16*FRACUNIT; // 4x

  0019a	c7 45 fc 00 00
	10 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 1048576 ; 00100000H
  001a1	eb 07		 jmp	 SHORT $LN12@P_SuperDam
$LN11@P_SuperDam:

; 2632 : 	else
; 2633 : 		fallbackspeed = 4*FRACUNIT; // the usual amount of force

  001a3	c7 45 fc 00 00
	04 00		 mov	 DWORD PTR _fallbackspeed$[ebp], 262144 ; 00040000H
$LN12@P_SuperDam:

; 2634 : 
; 2635 : 	P_InstaThrust(player->mo, ang, fallbackspeed);

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _fallbackspeed$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d f8	 mov	 ecx, DWORD PTR _ang$[ebp]
  001b1	51		 push	 ecx
  001b2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001b5	8b 02		 mov	 eax, DWORD PTR [edx]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _P_InstaThrust
  001bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2636 : 
; 2637 : 	if (player->charflags & SF_SUPERANIMS)

  001c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001c3	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  001c9	83 e1 01	 and	 ecx, 1
  001cc	74 12		 je	 SHORT $LN13@P_SuperDam

; 2638 : 		P_SetPlayerMobjState(player->mo, S_PLAY_SUPERHIT);

  001ce	6a 30		 push	 48			; 00000030H
  001d0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d5	51		 push	 ecx
  001d6	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  001db	83 c4 08	 add	 esp, 8
  001de	eb 1d		 jmp	 SHORT $LN14@P_SuperDam
$LN13@P_SuperDam:

; 2639 : 	else
; 2640 : 		P_SetPlayerMobjState(player->mo, player->mo->info->painstate);

  001e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e5	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  001eb	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001ee	50		 push	 eax
  001ef	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f4	52		 push	 edx
  001f5	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  001fa	83 c4 08	 add	 esp, 8
$LN14@P_SuperDam:

; 2641 : 
; 2642 : 	P_ResetPlayer(player);

  001fd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _P_ResetPlayer
  00206	83 c4 04	 add	 esp, 4

; 2643 : }

  00209	5f		 pop	 edi
  0020a	5e		 pop	 esi
  0020b	5b		 pop	 ebx
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c3		 ret	 0
_P_SuperDamage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_KillPlayer
_TEXT	SEGMENT
tv155 = -68						; size = 4
_player$ = 8						; size = 4
_source$ = 12						; size = 4
_damage$ = 16						; size = 4
_P_KillPlayer PROC					; COMDAT

; 2524 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2525 : 	// Burst weapons and emeralds in Match/CTF only
; 2526 : 	if (source && (gametype == GT_MATCH || gametype == GT_CTF))

  00009	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000d	74 3c		 je	 SHORT $LN2@P_KillPlay
  0000f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00016	83 f8 01	 cmp	 eax, 1
  00019	74 0c		 je	 SHORT $LN3@P_KillPlay
  0001b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00022	83 f8 04	 cmp	 eax, 4
  00025	75 24		 jne	 SHORT $LN2@P_KillPlay
$LN3@P_KillPlay:

; 2527 : 	{
; 2528 : 		P_PlayerRingBurst(player, player->health - 1);

  00027	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002a	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0002d	83 e9 01	 sub	 ecx, 1
  00030	51		 push	 ecx
  00031	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 _P_PlayerRingBurst
  0003a	83 c4 08	 add	 esp, 8

; 2529 : 		P_PlayerEmeraldBurst(player, false);

  0003d	6a 00		 push	 0
  0003f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _P_PlayerEmeraldBurst
  00048	83 c4 08	 add	 esp, 8
$LN2@P_KillPlay:

; 2530 : 	}
; 2531 : 
; 2532 : 	// Get rid of shield
; 2533 : 	player->powers[pw_forceshield] = false;

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	c1 e0 02	 shl	 eax, 2
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00056	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2534 : 	player->powers[pw_jumpshield] = false;

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	6b c8 03	 imul	 ecx, eax, 3
  00066	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00069	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2535 : 	player->powers[pw_ringshield] = false;

  00071	b8 04 00 00 00	 mov	 eax, 4
  00076	6b c8 09	 imul	 ecx, eax, 9
  00079	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0007c	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2536 : 	player->powers[pw_bombshield] = false;

  00084	b8 04 00 00 00	 mov	 eax, 4
  00089	6b c8 0a	 imul	 ecx, eax, 10
  0008c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0008f	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2537 : 	player->powers[pw_watershield] = false;

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	6b c8 0b	 imul	 ecx, eax, 11
  0009f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a2	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2538 : 	player->mo->momx = player->mo->momy = player->mo->momz = 0;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  000b6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000b9	8b 02		 mov	 eax, DWORD PTR [edx]
  000bb	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 2539 : 
; 2540 : 	// Get rid of emeralds
; 2541 : 	player->powers[pw_emeralds] = 0;

  000ce	b8 04 00 00 00	 mov	 eax, 4
  000d3	6b c8 18	 imul	 ecx, eax, 24
  000d6	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000d9	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2542 : 
; 2543 : 	player->powers[pw_fireflower] = false;

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	6b c8 11	 imul	 ecx, eax, 17
  000e9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ec	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2544 : 	player->mo->flags |= MF_TRANSLATION;

  000f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000fc	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00102	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00105	8b 08		 mov	 ecx, DWORD PTR [eax]
  00107	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 2545 : 	player->mo->color = (UINT8)player->skincolor;

  0010a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0010d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00112	8a 82 b4 00 00
	00		 mov	 al, BYTE PTR [edx+180]
  00118	88 41 68	 mov	 BYTE PTR [ecx+104], al

; 2546 : 
; 2547 : 	if (player->powers[pw_underwater] != 1) // Don't jump up when drowning

  0011b	b8 04 00 00 00	 mov	 eax, 4
  00120	6b c8 06	 imul	 ecx, eax, 6
  00123	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00126	83 7c 0a 38 01	 cmp	 DWORD PTR [edx+ecx+56], 1
  0012b	74 17		 je	 SHORT $LN4@P_KillPlay

; 2548 : 		P_SetObjectMomZ(player->mo, 18*FRACUNIT, false);

  0012d	6a 00		 push	 0
  0012f	68 00 00 12 00	 push	 1179648			; 00120000H
  00134	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00137	8b 08		 mov	 ecx, DWORD PTR [eax]
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	eb 12		 jmp	 SHORT $LN5@P_KillPlay
$LN4@P_KillPlay:

; 2549 : 	else
; 2550 : 		P_SetObjectMomZ(player->mo, 1, true);

  00144	6a 01		 push	 1
  00146	6a 01		 push	 1
  00148	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0014b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@P_KillPlay:

; 2551 : 
; 2552 : 	P_ForceFeed(player, 40, 10, TICRATE, 40 + min(damage, 100)*2);

  00156	83 7d 10 64	 cmp	 DWORD PTR _damage$[ebp], 100 ; 00000064H
  0015a	7d 08		 jge	 SHORT $LN23@P_KillPlay
  0015c	8b 45 10	 mov	 eax, DWORD PTR _damage$[ebp]
  0015f	89 45 bc	 mov	 DWORD PTR tv155[ebp], eax
  00162	eb 07		 jmp	 SHORT $LN24@P_KillPlay
$LN23@P_KillPlay:
  00164	c7 45 bc 64 00
	00 00		 mov	 DWORD PTR tv155[ebp], 100 ; 00000064H
$LN24@P_KillPlay:
  0016b	8b 4d bc	 mov	 ecx, DWORD PTR tv155[ebp]
  0016e	8d 54 09 28	 lea	 edx, DWORD PTR [ecx+ecx+40]
  00172	52		 push	 edx
  00173	6a 23		 push	 35			; 00000023H
  00175	6a 0a		 push	 10			; 0000000aH
  00177	6a 28		 push	 40			; 00000028H
  00179	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 _P_ForceFeed
  00182	83 c4 14	 add	 esp, 20			; 00000014H

; 2553 : 
; 2554 : 	P_ResetPlayer(player);

  00185	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _P_ResetPlayer
  0018e	83 c4 04	 add	 esp, 4

; 2555 : 
; 2556 : 	if (source && source->type == MT_DISS && source->threshold == 42) // drowned

  00191	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  00195	74 2a		 je	 SHORT $LN6@P_KillPlay
  00197	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  0019a	81 78 7c 05 01
	00 00		 cmp	 DWORD PTR [eax+124], 261 ; 00000105H
  001a1	75 1e		 jne	 SHORT $LN6@P_KillPlay
  001a3	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  001a6	83 b8 a0 00 00
	00 2a		 cmp	 DWORD PTR [eax+160], 42	; 0000002aH
  001ad	75 12		 jne	 SHORT $LN6@P_KillPlay

; 2557 : 		S_StartSound(player->mo, sfx_drown);

  001af	6a 3b		 push	 59			; 0000003bH
  001b1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b6	51		 push	 ecx
  001b7	e8 00 00 00 00	 call	 _S_StartSound
  001bc	83 c4 08	 add	 esp, 8
  001bf	eb 53		 jmp	 SHORT $LN9@P_KillPlay
$LN6@P_KillPlay:

; 2558 : 	else if (source && (source->type == MT_DISS || source->type == MT_FLOORSPIKE || source->type == MT_CEILINGSPIKE) && source->threshold == 43) // Spikes

  001c1	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  001c5	74 3f		 je	 SHORT $LN8@P_KillPlay
  001c7	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  001ca	81 78 7c 05 01
	00 00		 cmp	 DWORD PTR [eax+124], 261 ; 00000105H
  001d1	74 12		 je	 SHORT $LN10@P_KillPlay
  001d3	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  001d6	83 78 7c 49	 cmp	 DWORD PTR [eax+124], 73	; 00000049H
  001da	74 09		 je	 SHORT $LN10@P_KillPlay
  001dc	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  001df	83 78 7c 48	 cmp	 DWORD PTR [eax+124], 72	; 00000048H
  001e3	75 21		 jne	 SHORT $LN8@P_KillPlay
$LN10@P_KillPlay:
  001e5	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  001e8	83 b8 a0 00 00
	00 2b		 cmp	 DWORD PTR [eax+160], 43	; 0000002bH
  001ef	75 15		 jne	 SHORT $LN8@P_KillPlay

; 2559 : 		S_StartSound(player->mo, sfx_spkdth);

  001f1	68 d4 00 00 00	 push	 212			; 000000d4H
  001f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fb	51		 push	 ecx
  001fc	e8 00 00 00 00	 call	 _S_StartSound
  00201	83 c4 08	 add	 esp, 8
  00204	eb 0e		 jmp	 SHORT $LN9@P_KillPlay
$LN8@P_KillPlay:

; 2560 : 	else
; 2561 : 		P_PlayDeathSound(player->mo);

  00206	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00209	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020b	51		 push	 ecx
  0020c	e8 00 00 00 00	 call	 _P_PlayDeathSound
  00211	83 c4 04	 add	 esp, 4
$LN9@P_KillPlay:

; 2562 : 
; 2563 : 	P_SetPlayerMobjState(player->mo, player->mo->info->deathstate);

  00214	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00217	8b 08		 mov	 ecx, DWORD PTR [eax]
  00219	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0021f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00222	50		 push	 eax
  00223	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00226	8b 11		 mov	 edx, DWORD PTR [ecx]
  00228	52		 push	 edx
  00229	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0022e	83 c4 08	 add	 esp, 8

; 2564 : 	if (gametype == GT_CTF && (player->gotflag & MF_REDFLAG || player->gotflag & MF_BLUEFLAG))

  00231	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00238	83 f8 04	 cmp	 eax, 4
  0023b	0f 85 8d 00 00
	00		 jne	 $LN14@P_KillPlay
  00241	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00244	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  0024b	83 e1 01	 and	 ecx, 1
  0024e	75 0f		 jne	 SHORT $LN12@P_KillPlay
  00250	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00253	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  0025a	83 e1 02	 and	 ecx, 2
  0025d	74 6f		 je	 SHORT $LN14@P_KillPlay
$LN12@P_KillPlay:

; 2565 : 	{
; 2566 : 		P_PlayerFlagBurst(player, false);

  0025f	6a 00		 push	 0
  00261	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 _P_PlayerFlagBurst
  0026a	83 c4 08	 add	 esp, 8

; 2567 : 		if (source && source->player)

  0026d	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  00271	74 5b		 je	 SHORT $LN14@P_KillPlay
  00273	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00276	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0027d	74 4f		 je	 SHORT $LN14@P_KillPlay

; 2568 : 		{
; 2569 : 			// Award no points when players shoot each other when cv_friendlyfire is on.
; 2570 : 			if (!((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0027f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00286	83 f8 04	 cmp	 eax, 4
  00289	74 15		 je	 SHORT $LN16@P_KillPlay
  0028b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00292	83 f8 01	 cmp	 eax, 1
  00295	75 23		 jne	 SHORT $LN15@P_KillPlay
  00297	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0029e	74 1a		 je	 SHORT $LN15@P_KillPlay
$LN16@P_KillPlay:
  002a0	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  002a3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002a9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002ac	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  002b2	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  002b8	74 14		 je	 SHORT $LN14@P_KillPlay
$LN15@P_KillPlay:

; 2571 : 				&& (source->player->ctfteam == player->ctfteam)))
; 2572 : 				P_AddPlayerScore(source->player, 25);

  002ba	6a 19		 push	 25			; 00000019H
  002bc	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  002bf	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002c5	51		 push	 ecx
  002c6	e8 00 00 00 00	 call	 _P_AddPlayerScore
  002cb	83 c4 08	 add	 esp, 8
$LN14@P_KillPlay:

; 2573 : 		}
; 2574 : 	}
; 2575 : 	if (source && source->player && !player->powers[pw_super]) //don't score points against super players

  002ce	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  002d2	74 6d		 je	 SHORT $LN18@P_KillPlay
  002d4	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  002d7	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  002de	74 61		 je	 SHORT $LN18@P_KillPlay
  002e0	b8 04 00 00 00	 mov	 eax, 4
  002e5	6b c8 0f	 imul	 ecx, eax, 15
  002e8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002eb	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  002f0	75 4f		 jne	 SHORT $LN18@P_KillPlay

; 2576 : 	{
; 2577 : 		// Award no points when players shoot each other when cv_friendlyfire is on.
; 2578 : 		if (!((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  002f2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  002f9	83 f8 04	 cmp	 eax, 4
  002fc	74 15		 je	 SHORT $LN20@P_KillPlay
  002fe	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00305	83 f8 01	 cmp	 eax, 1
  00308	75 23		 jne	 SHORT $LN19@P_KillPlay
  0030a	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00311	74 1a		 je	 SHORT $LN19@P_KillPlay
$LN20@P_KillPlay:
  00313	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00316	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0031c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0031f	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  00325	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  0032b	74 14		 je	 SHORT $LN18@P_KillPlay
$LN19@P_KillPlay:

; 2579 : 			&& (source->player->ctfteam == player->ctfteam)))
; 2580 : 			P_AddPlayerScore(source->player, 100);

  0032d	6a 64		 push	 100			; 00000064H
  0032f	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00332	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00338	51		 push	 ecx
  00339	e8 00 00 00 00	 call	 _P_AddPlayerScore
  0033e	83 c4 08	 add	 esp, 8
$LN18@P_KillPlay:

; 2581 : 	}
; 2582 : 
; 2583 : 	// If the player was super, tell them he/she ain't so super nomore.
; 2584 : 	if (gametype != GT_COOP && player->powers[pw_super])

  00341	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00348	85 c0		 test	 eax, eax
  0034a	0f 84 8c 00 00
	00		 je	 $LN21@P_KillPlay
  00350	b8 04 00 00 00	 mov	 eax, 4
  00355	6b c8 0f	 imul	 ecx, eax, 15
  00358	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0035b	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00360	74 7a		 je	 SHORT $LN21@P_KillPlay

; 2585 : 	{
; 2586 : 		S_StartSound(NULL, sfx_s3k_52); //let all players hear it.

  00362	68 a6 00 00 00	 push	 166			; 000000a6H
  00367	6a 00		 push	 0
  00369	e8 00 00 00 00	 call	 _S_StartSound
  0036e	83 c4 08	 add	 esp, 8

; 2587 : 		HU_SetCEchoFlags(0);

  00371	6a 00		 push	 0
  00373	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00378	83 c4 04	 add	 esp, 4

; 2588 : 		HU_SetCEchoDuration(5);

  0037b	6a 05		 push	 5
  0037d	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00382	83 c4 04	 add	 esp, 4

; 2589 : 		HU_DoCEcho(va("%s\\is no longer super.\\\\\\\\", player_names[player-players]));

  00385	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00388	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0038d	99		 cdq
  0038e	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00393	f7 f9		 idiv	 ecx
  00395	6b d0 16	 imul	 edx, eax, 22
  00398	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0039e	52		 push	 edx
  0039f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NFFMIKMN@?$CFs?2is?5no?5longer?5super?4?2?2?2?2@
  003a4	e8 00 00 00 00	 call	 _va
  003a9	83 c4 08	 add	 esp, 8
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 _HU_DoCEcho
  003b2	83 c4 04	 add	 esp, 4

; 2590 : 		I_OutputMsg("%s is no longer super.\n", player_names[player-players]);

  003b5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003b8	2d 00 00 00 00	 sub	 eax, OFFSET _players
  003bd	99		 cdq
  003be	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  003c3	f7 f9		 idiv	 ecx
  003c5	6b d0 16	 imul	 edx, eax, 22
  003c8	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  003ce	52		 push	 edx
  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JKFKFBCG@?$CFs?5is?5no?5longer?5super?4?6@
  003d4	e8 00 00 00 00	 call	 _I_OutputMsg
  003d9	83 c4 08	 add	 esp, 8
$LN21@P_KillPlay:

; 2591 : 	}
; 2592 : }

  003dc	5f		 pop	 edi
  003dd	5e		 pop	 esi
  003de	5b		 pop	 ebx
  003df	8b e5		 mov	 esp, ebp
  003e1	5d		 pop	 ebp
  003e2	c3		 ret	 0
_P_KillPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayerHitsPlayer
_TEXT	SEGMENT
_player$ = -4						; size = 4
_target$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_damage$ = 20						; size = 4
_P_PlayerHitsPlayer PROC				; COMDAT

; 2486 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2487 : 	player_t *player = target->player;

  00009	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0000c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00012	89 4d fc	 mov	 DWORD PTR _player$[ebp], ecx

; 2488 : 
; 2489 : 	if (source == target) // You can't kill yourself, idiot...

  00015	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00018	3b 45 08	 cmp	 eax, DWORD PTR _target$[ebp]
  0001b	75 07		 jne	 SHORT $LN2@P_PlayerHi

; 2490 : 		return false;

  0001d	33 c0		 xor	 eax, eax
  0001f	e9 1f 01 00 00	 jmp	 $LN1@P_PlayerHi
$LN2@P_PlayerHi:

; 2491 : 
; 2492 : 	// In COOP/RACE/CHAOS, you can't hurt other players unless cv_friendlyfire is on
; 2493 : 	if (!cv_friendlyfire.value && (gametype == GT_COOP ||

  00024	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_friendlyfire+20, 0
  0002b	75 1e		 jne	 SHORT $LN3@P_PlayerHi
  0002d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00034	85 c0		 test	 eax, eax
  00036	74 0c		 je	 SHORT $LN4@P_PlayerHi
  00038	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0003f	83 f8 02	 cmp	 eax, 2
  00042	75 07		 jne	 SHORT $LN3@P_PlayerHi
$LN4@P_PlayerHi:

; 2494 : 		gametype == GT_RACE
; 2495 : #ifdef CHAOSISNOTDEADYET
; 2496 : 		|| gametype == GT_CHAOS
; 2497 : #endif
; 2498 : 		))
; 2499 : 		return false;

  00044	33 c0		 xor	 eax, eax
  00046	e9 f8 00 00 00	 jmp	 $LN1@P_PlayerHi
$LN3@P_PlayerHi:

; 2500 : 
; 2501 : 	// Tag handling
; 2502 : 	if (gametype == GT_TAG)

  0004b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00052	83 f8 03	 cmp	 eax, 3
  00055	75 1f		 jne	 SHORT $LN5@P_PlayerHi

; 2503 : 		return P_TagDamage(target, inflictor, source, damage);

  00057	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0005e	51		 push	 ecx
  0005f	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  00062	52		 push	 edx
  00063	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _P_TagDamage
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	e9 cf 00 00 00	 jmp	 $LN1@P_PlayerHi
  00074	eb 72		 jmp	 SHORT $LN9@P_PlayerHi
$LN5@P_PlayerHi:

; 2504 : 	else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value)) // CTF + Team Match

  00076	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0007d	83 f8 04	 cmp	 eax, 4
  00080	74 15		 je	 SHORT $LN8@P_PlayerHi
  00082	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 5a		 jne	 SHORT $LN9@P_PlayerHi
  0008e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00095	74 51		 je	 SHORT $LN9@P_PlayerHi
$LN8@P_PlayerHi:

; 2505 : 	{
; 2506 : 		// Don't allow players on the same team to hurt one another,
; 2507 : 		// unless cv_friendlyfire is on.
; 2508 : 		if (!cv_friendlyfire.value && target->player->ctfteam == source->player->ctfteam)

  00097	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_friendlyfire+20, 0
  0009e	75 48		 jne	 SHORT $LN9@P_PlayerHi
  000a0	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000a3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000a9	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  000ac	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  000b2	8b 89 60 01 00
	00		 mov	 ecx, DWORD PTR [ecx+352]
  000b8	3b 88 60 01 00
	00		 cmp	 ecx, DWORD PTR [eax+352]
  000be	75 28		 jne	 SHORT $LN9@P_PlayerHi

; 2509 : 		{
; 2510 : 			if (!(inflictor->flags & MF_FIRE))

  000c0	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000c3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000c6	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  000cc	75 16		 jne	 SHORT $LN10@P_PlayerHi

; 2511 : 				P_GivePlayerRings(target->player, 1, false);

  000ce	6a 00		 push	 0
  000d0	6a 01		 push	 1
  000d2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000d5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 _P_GivePlayerRings
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@P_PlayerHi:

; 2512 : 
; 2513 : 			return false;

  000e4	33 c0		 xor	 eax, eax
  000e6	eb 5b		 jmp	 SHORT $LN1@P_PlayerHi
$LN9@P_PlayerHi:

; 2514 : 		}
; 2515 : 	}
; 2516 : 
; 2517 : 	if ((player->health-damage) > 0 && !(player->powers[pw_flashing] || player->powers[pw_invulnerability] || player->powers[pw_super]))

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000eb	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000ee	2b 4d 14	 sub	 ecx, DWORD PTR _damage$[ebp]
  000f1	85 c9		 test	 ecx, ecx
  000f3	7e 49		 jle	 SHORT $LN11@P_PlayerHi
  000f5	b8 04 00 00 00	 mov	 eax, 4
  000fa	d1 e0		 shl	 eax, 1
  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  000ff	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00104	75 38		 jne	 SHORT $LN11@P_PlayerHi
  00106	b8 04 00 00 00	 mov	 eax, 4
  0010b	6b c8 00	 imul	 ecx, eax, 0
  0010e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00111	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00116	75 26		 jne	 SHORT $LN11@P_PlayerHi
  00118	b8 04 00 00 00	 mov	 eax, 4
  0011d	6b c8 0f	 imul	 ecx, eax, 15
  00120	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00123	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00128	75 14		 jne	 SHORT $LN11@P_PlayerHi

; 2518 : 		P_HitMessages(target, inflictor, source);

  0012a	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0012d	50		 push	 eax
  0012e	8b 4d 0c	 mov	 ecx, DWORD PTR _inflictor$[ebp]
  00131	51		 push	 ecx
  00132	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 _P_HitMessages
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@P_PlayerHi:

; 2519 : 
; 2520 : 	return true;

  0013e	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_PlayerHi:

; 2521 : }

  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	5b		 pop	 ebx
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
_P_PlayerHitsPlayer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_TagDamage
_TEXT	SEGMENT
_player$ = -4						; size = 4
_target$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_damage$ = 20						; size = 4
_P_TagDamage PROC					; COMDAT

; 2397 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2398 : 	player_t *player = target->player;

  00009	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0000c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00012	89 4d fc	 mov	 DWORD PTR _player$[ebp], ecx

; 2399 : 	(void)damage; //unused parm
; 2400 : 
; 2401 : 	// If flashing or invulnerable, ignore the tag,
; 2402 : 	if (player->powers[pw_flashing] || player->powers[pw_invulnerability])

  00015	b8 04 00 00 00	 mov	 eax, 4
  0001a	d1 e0		 shl	 eax, 1
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0001f	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00024	75 12		 jne	 SHORT $LN3@P_TagDamag
  00026	b8 04 00 00 00	 mov	 eax, 4
  0002b	6b c8 00	 imul	 ecx, eax, 0
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00031	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00036	74 07		 je	 SHORT $LN2@P_TagDamag
$LN3@P_TagDamag:

; 2403 : 		return false;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 5b 04 00 00	 jmp	 $LN1@P_TagDamag
$LN2@P_TagDamag:

; 2404 : 
; 2405 : 	// Ignore IT players shooting each other, unless friendlyfire is on.
; 2406 : 	if ((player->pflags & PF_TAGIT && !(cv_friendlyfire.value &&

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00042	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00048	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0004e	74 39		 je	 SHORT $LN4@P_TagDamag
  00050	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_friendlyfire+20, 0
  00057	74 29		 je	 SHORT $LN5@P_TagDamag
  00059	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0005d	74 23		 je	 SHORT $LN5@P_TagDamag
  0005f	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00062	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00069	74 17		 je	 SHORT $LN5@P_TagDamag
  0006b	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0006e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00074	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0007a	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  00080	75 07		 jne	 SHORT $LN4@P_TagDamag
$LN5@P_TagDamag:

; 2407 : 		source && source->player && source->player->pflags & PF_TAGIT)))
; 2408 : 		return false;

  00082	33 c0		 xor	 eax, eax
  00084	e9 11 04 00 00	 jmp	 $LN1@P_TagDamag
$LN4@P_TagDamag:

; 2409 : 
; 2410 : 	// Don't allow any damage before the round starts.
; 2411 : 	if (leveltime <= hidetime * TICRATE)

  00089	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00090	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  00096	77 07		 ja	 SHORT $LN6@P_TagDamag

; 2412 : 		return false;

  00098	33 c0		 xor	 eax, eax
  0009a	e9 fb 03 00 00	 jmp	 $LN1@P_TagDamag
$LN6@P_TagDamag:

; 2413 : 
; 2414 : 	// Don't allow players on the same team to hurt one another,
; 2415 : 	// unless cv_friendlyfire is on.
; 2416 : 	if (!cv_friendlyfire.value && (target->player->pflags & PF_TAGIT) == (source->player->pflags & PF_TAGIT))

  0009f	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_friendlyfire+20, 0
  000a6	75 58		 jne	 SHORT $LN7@P_TagDamag
  000a8	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000ab	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000b1	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  000b7	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  000bd	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000c0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000c6	8b 81 ac 00 00
	00		 mov	 eax, DWORD PTR [ecx+172]
  000cc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000d1	3b d0		 cmp	 edx, eax
  000d3	75 2b		 jne	 SHORT $LN7@P_TagDamag

; 2417 : 	{
; 2418 : 		if (!(inflictor->flags & MF_FIRE))

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000d8	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000db	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  000e1	75 16		 jne	 SHORT $LN8@P_TagDamag

; 2419 : 			P_GivePlayerRings(target->player, 1, false);

  000e3	6a 00		 push	 0
  000e5	6a 01		 push	 1
  000e7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000ea	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 _P_GivePlayerRings
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@P_TagDamag:

; 2420 : 
; 2421 : 		return false;

  000f9	33 c0		 xor	 eax, eax
  000fb	e9 9a 03 00 00	 jmp	 $LN1@P_TagDamag
$LN7@P_TagDamag:

; 2422 : 	}
; 2423 : 
; 2424 : 	// The tag occurs so long as you aren't shooting another tagger with friendlyfire on.
; 2425 : 	if (source->player->pflags & PF_TAGIT && !(target->player->pflags & PF_TAGIT))

  00100	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00103	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00109	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0010f	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  00115	0f 84 f6 00 00
	00		 je	 $LN9@P_TagDamag
  0011b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0011e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00124	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0012a	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  00130	0f 85 db 00 00
	00		 jne	 $LN9@P_TagDamag

; 2426 : 	{
; 2427 : 		P_AddPlayerScore(source->player, 100); //award points to tagger.

  00136	6a 64		 push	 100			; 00000064H
  00138	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0013b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 _P_AddPlayerScore
  00147	83 c4 08	 add	 esp, 8

; 2428 : 		P_HitMessages(target, inflictor, source);

  0014a	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0014d	50		 push	 eax
  0014e	8b 4d 0c	 mov	 ecx, DWORD PTR _inflictor$[ebp]
  00151	51		 push	 ecx
  00152	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00155	52		 push	 edx
  00156	e8 00 00 00 00	 call	 _P_HitMessages
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2429 : 
; 2430 : 		if (cv_tagtype.value == 0) //survivor

  0015e	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00165	75 53		 jne	 SHORT $LN10@P_TagDamag

; 2431 : 		{
; 2432 : 			target->player->pflags |= PF_TAGIT; //in survivor, the player becomes IT and helps hunt down the survivors.

  00167	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0016a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00170	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00176	81 ca 00 00 00
	10		 or	 edx, 268435456		; 10000000H
  0017c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0017f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00185	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2433 : 			CONS_Printf("%s is it!\n", player_names[target->player-players]); // Tell everyone who is it!

  0018b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0018e	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00194	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00199	99		 cdq
  0019a	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0019f	f7 f9		 idiv	 ecx
  001a1	6b d0 16	 imul	 edx, eax, 22
  001a4	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  001aa	52		 push	 edx
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@
  001b0	e8 00 00 00 00	 call	 _CONS_Printf
  001b5	83 c4 08	 add	 esp, 8

; 2434 : 		}

  001b8	eb 51		 jmp	 SHORT $LN11@P_TagDamag
$LN10@P_TagDamag:

; 2435 : 		else
; 2436 : 		{
; 2437 : 			target->player->pflags |= PF_TAGGED; //in hide and seek, the player is tagged and stays stationary.

  001ba	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001bd	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001c3	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  001c9	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  001cf	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001d2	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001d8	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2438 : 			CONS_Printf("%s was found!\n", player_names[target->player-players]); // Tell everyone who is it!

  001de	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001e1	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  001e7	2d 00 00 00 00	 sub	 eax, OFFSET _players
  001ec	99		 cdq
  001ed	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001f2	f7 f9		 idiv	 ecx
  001f4	6b d0 16	 imul	 edx, eax, 22
  001f7	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  001fd	52		 push	 edx
  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IJKKFILK@?$CFs?5was?5found?$CB?6@
  00203	e8 00 00 00 00	 call	 _CONS_Printf
  00208	83 c4 08	 add	 esp, 8
$LN11@P_TagDamag:

; 2439 : 		}
; 2440 : 
; 2441 : 		//checks if tagger has tagged all players, if so, end round early.
; 2442 : 		P_CheckSurvivors();

  0020b	e8 00 00 00 00	 call	 _P_CheckSurvivors
  00210	90		 npad	 1
$LN9@P_TagDamag:

; 2443 : 	}
; 2444 : 
; 2445 : 	P_DoPlayerPain(player, source, inflictor);

  00211	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00214	50		 push	 eax
  00215	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00218	51		 push	 ecx
  00219	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0021c	52		 push	 edx
  0021d	e8 00 00 00 00	 call	 _P_DoPlayerPain
  00222	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2446 : 
; 2447 : 	// Check for a shield
; 2448 : 	if (target->player->powers[pw_forceshield] || target->player->powers[pw_jumpshield] || target->player->powers[pw_ringshield] || target->player->powers[pw_bombshield] || target->player->powers[pw_watershield])

  00225	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00228	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0022e	ba 04 00 00 00	 mov	 edx, 4
  00233	c1 e2 02	 shl	 edx, 2
  00236	83 7c 11 38 00	 cmp	 DWORD PTR [ecx+edx+56], 0
  0023b	75 64		 jne	 SHORT $LN13@P_TagDamag
  0023d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00240	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00246	ba 04 00 00 00	 mov	 edx, 4
  0024b	6b c2 03	 imul	 eax, edx, 3
  0024e	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00253	75 4c		 jne	 SHORT $LN13@P_TagDamag
  00255	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00258	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0025e	ba 04 00 00 00	 mov	 edx, 4
  00263	6b c2 09	 imul	 eax, edx, 9
  00266	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0026b	75 34		 jne	 SHORT $LN13@P_TagDamag
  0026d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00270	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00276	ba 04 00 00 00	 mov	 edx, 4
  0027b	6b c2 0a	 imul	 eax, edx, 10
  0027e	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00283	75 1c		 jne	 SHORT $LN13@P_TagDamag
  00285	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00288	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0028e	ba 04 00 00 00	 mov	 edx, 4
  00293	6b c2 0b	 imul	 eax, edx, 11
  00296	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0029b	0f 84 c4 00 00
	00		 je	 $LN12@P_TagDamag
$LN13@P_TagDamag:

; 2449 : 	{
; 2450 : 		if (target->player->powers[pw_forceshield] > 0) // Multi-hit

  002a1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002a4	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002aa	ba 04 00 00 00	 mov	 edx, 4
  002af	c1 e2 02	 shl	 edx, 2
  002b2	83 7c 11 38 00	 cmp	 DWORD PTR [ecx+edx+56], 0
  002b7	7e 2d		 jle	 SHORT $LN14@P_TagDamag

; 2451 : 			target->player->powers[pw_forceshield]--;

  002b9	b8 04 00 00 00	 mov	 eax, 4
  002be	c1 e0 02	 shl	 eax, 2
  002c1	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  002c4	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  002ca	8b 44 02 38	 mov	 eax, DWORD PTR [edx+eax+56]
  002ce	83 e8 01	 sub	 eax, 1
  002d1	b9 04 00 00 00	 mov	 ecx, 4
  002d6	c1 e1 02	 shl	 ecx, 2
  002d9	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002dc	8b 92 a4 00 00
	00		 mov	 edx, DWORD PTR [edx+164]
  002e2	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax
$LN14@P_TagDamag:

; 2452 : 
; 2453 : 		target->player->powers[pw_jumpshield] = false; // Get rid of shield

  002e6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002e9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002ef	ba 04 00 00 00	 mov	 edx, 4
  002f4	6b c2 03	 imul	 eax, edx, 3
  002f7	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2454 : 		target->player->powers[pw_ringshield] = false;

  002ff	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00302	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00308	ba 04 00 00 00	 mov	 edx, 4
  0030d	6b c2 09	 imul	 eax, edx, 9
  00310	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2455 : 		target->player->powers[pw_bombshield] = false;

  00318	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0031b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00321	ba 04 00 00 00	 mov	 edx, 4
  00326	6b c2 0a	 imul	 eax, edx, 10
  00329	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2456 : 		target->player->powers[pw_watershield] = false;

  00331	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00334	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0033a	ba 04 00 00 00	 mov	 edx, 4
  0033f	6b c2 0b	 imul	 eax, edx, 11
  00342	c7 44 01 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 0

; 2457 : 		S_StartSound(target, sfx_shldls);

  0034a	68 d1 00 00 00	 push	 209			; 000000d1H
  0034f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 _S_StartSound
  00358	83 c4 08	 add	 esp, 8

; 2458 : 		return true;

  0035b	b8 01 00 00 00	 mov	 eax, 1
  00360	e9 35 01 00 00	 jmp	 $LN1@P_TagDamag
$LN12@P_TagDamag:

; 2459 : 	}
; 2460 : 
; 2461 : 	if (target->health <= 1) // Death

  00365	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00368	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  0036f	7f 1a		 jg	 SHORT $LN15@P_TagDamag

; 2462 : 	{
; 2463 : 		P_PlayDeathSound(target);

  00371	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 _P_PlayDeathSound
  0037a	83 c4 04	 add	 esp, 4

; 2464 : 		P_PlayVictorySound(source); // Killer laughs at you! LAUGHS! BWAHAHAHHAHAA!!

  0037d	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00380	50		 push	 eax
  00381	e8 00 00 00 00	 call	 _P_PlayVictorySound
  00386	83 c4 04	 add	 esp, 4

; 2465 : 	}

  00389	eb 3f		 jmp	 SHORT $LN17@P_TagDamag
$LN15@P_TagDamag:

; 2466 : 	else if (target->health > 1) // Ring loss

  0038b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0038e	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  00395	7e 33		 jle	 SHORT $LN17@P_TagDamag

; 2467 : 	{
; 2468 : 		P_PlayRinglossSound(target);

  00397	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0039a	50		 push	 eax
  0039b	e8 00 00 00 00	 call	 _P_PlayRinglossSound
  003a0	83 c4 04	 add	 esp, 4

; 2469 : 		P_PlayerRingBurst(target->player, target->player->mo->health - 1);

  003a3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003a6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  003ae	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  003b4	83 e8 01	 sub	 eax, 1
  003b7	50		 push	 eax
  003b8	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  003bb	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003c1	52		 push	 edx
  003c2	e8 00 00 00 00	 call	 _P_PlayerRingBurst
  003c7	83 c4 08	 add	 esp, 8
$LN17@P_TagDamag:

; 2470 : 	}
; 2471 : 
; 2472 : 	if (inflictor && ((inflictor->flags & MF_MISSILE) || inflictor->player) && target->player->powers[pw_super] && ALL7EMERALDS(target->player->powers[pw_emeralds]))

  003ca	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  003ce	0f 84 a4 00 00
	00		 je	 $LN18@P_TagDamag
  003d4	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  003d7	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  003da	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  003e0	75 10		 jne	 SHORT $LN20@P_TagDamag
  003e2	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  003e5	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  003ec	0f 84 86 00 00
	00		 je	 $LN18@P_TagDamag
$LN20@P_TagDamag:
  003f2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003f5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003fb	ba 04 00 00 00	 mov	 edx, 4
  00400	6b c2 0f	 imul	 eax, edx, 15
  00403	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00408	74 6e		 je	 SHORT $LN18@P_TagDamag
  0040a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0040d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00413	ba 04 00 00 00	 mov	 edx, 4
  00418	6b c2 18	 imul	 eax, edx, 24
  0041b	8b 4c 01 38	 mov	 ecx, DWORD PTR [ecx+eax+56]
  0041f	83 e1 7f	 and	 ecx, 127		; 0000007fH
  00422	83 f9 7f	 cmp	 ecx, 127		; 0000007fH
  00425	75 51		 jne	 SHORT $LN18@P_TagDamag

; 2473 : 	{
; 2474 : 		target->player->health -= 10;

  00427	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0042a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00430	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00433	83 ea 0a	 sub	 edx, 10			; 0000000aH
  00436	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00439	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0043f	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 2475 : 		if (target->player->health < 2)

  00442	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00445	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0044b	83 79 28 02	 cmp	 DWORD PTR [ecx+40], 2
  0044f	7d 10		 jge	 SHORT $LN21@P_TagDamag

; 2476 : 			target->player->health = 2;

  00451	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00454	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0045a	c7 41 28 02 00
	00 00		 mov	 DWORD PTR [ecx+40], 2
$LN21@P_TagDamag:

; 2477 : 		target->health = target->player->health;

  00461	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00464	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0046a	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0046d	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00470	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax

; 2478 : 	}

  00476	eb 1d		 jmp	 SHORT $LN19@P_TagDamag
$LN18@P_TagDamag:

; 2479 : 	else
; 2480 : 		target->player->health = target->health = 1;

  00478	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0047b	c7 80 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+140], 1
  00485	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00488	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0048e	c7 42 28 01 00
	00 00		 mov	 DWORD PTR [edx+40], 1
$LN19@P_TagDamag:

; 2481 : 
; 2482 : 	return true;

  00495	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_TagDamag:

; 2483 : }

  0049a	5f		 pop	 edi
  0049b	5e		 pop	 esi
  0049c	5b		 pop	 ebx
  0049d	8b e5		 mov	 esp, ebp
  0049f	5d		 pop	 ebp
  004a0	c3		 ret	 0
_P_TagDamage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_NiGHTSDamage
_TEXT	SEGMENT
_fa$1 = -8						; size = 4
_player$ = -4						; size = 4
_target$ = 8						; size = 4
_source$ = 12						; size = 4
_P_NiGHTSDamage PROC					; COMDAT

; 2344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2345 : 	player_t *player = target->player;

  00009	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0000c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00012	89 4d fc	 mov	 DWORD PTR _player$[ebp], ecx

; 2346 : 
; 2347 : 	if (!player->powers[pw_flashing]
; 2348 : 		&& !(player->pflags & PF_GODMODE))

  00015	b8 04 00 00 00	 mov	 eax, 4
  0001a	d1 e0		 shl	 eax, 1
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0001f	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00024	0f 85 cc 01 00
	00		 jne	 $LN2@P_NiGHTSDa
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0002d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00033	83 e1 20	 and	 ecx, 32			; 00000020H
  00036	0f 85 ba 01 00
	00		 jne	 $LN2@P_NiGHTSDa

; 2349 : 	{
; 2350 : 		angle_t fa;
; 2351 : 
; 2352 : 		player->angle_pos = player->old_angle_pos;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00042	8b 91 a0 01 00
	00		 mov	 edx, DWORD PTR [ecx+416]
  00048	89 90 9c 01 00
	00		 mov	 DWORD PTR [eax+412], edx

; 2353 : 		player->speed /= 5;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00051	8b 80 0c 01 00
	00		 mov	 eax, DWORD PTR [eax+268]
  00057	99		 cdq
  00058	b9 05 00 00 00	 mov	 ecx, 5
  0005d	f7 f9		 idiv	 ecx
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00062	89 82 0c 01 00
	00		 mov	 DWORD PTR [edx+268], eax

; 2354 : 		player->flyangle += 180; // Shuffle's BETTERNIGHTSMOVEMENT?

  00068	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0006b	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00071	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  00077	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0007a	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx

; 2355 : 		player->flyangle %= 360;

  00080	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00083	8b 80 b0 01 00
	00		 mov	 eax, DWORD PTR [eax+432]
  00089	99		 cdq
  0008a	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0008f	f7 f9		 idiv	 ecx
  00091	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00094	89 90 b0 01 00
	00		 mov	 DWORD PTR [eax+432], edx

; 2356 : 
; 2357 : 		if (gametype == GT_RACE)

  0009a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  000a1	83 f8 02	 cmp	 eax, 2
  000a4	75 17		 jne	 SHORT $LN3@P_NiGHTSDa

; 2358 : 			player->drillmeter -= 5*20;

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000a9	8b 88 c8 01 00
	00		 mov	 ecx, DWORD PTR [eax+456]
  000af	83 e9 64	 sub	 ecx, 100		; 00000064H
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000b5	89 8a c8 01 00
	00		 mov	 DWORD PTR [edx+456], ecx
  000bb	eb 74		 jmp	 SHORT $LN10@P_NiGHTSDa
$LN3@P_NiGHTSDa:

; 2359 : 		else
; 2360 : 		{
; 2361 : 			if (source && source->player)

  000bd	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  000c1	74 3e		 je	 SHORT $LN5@P_NiGHTSDa
  000c3	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  000c6	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000cd	74 32		 je	 SHORT $LN5@P_NiGHTSDa

; 2362 : 			{
; 2363 : 				if (player->nightstime > 20)

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000d2	83 b8 c4 01 00
	00 14		 cmp	 DWORD PTR [eax+452], 20	; 00000014H
  000d9	76 17		 jbe	 SHORT $LN7@P_NiGHTSDa

; 2364 : 					player->nightstime -= 20;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000de	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  000e4	83 e9 14	 sub	 ecx, 20			; 00000014H
  000e7	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  000ea	89 8a c4 01 00
	00		 mov	 DWORD PTR [edx+452], ecx
  000f0	eb 0d		 jmp	 SHORT $LN8@P_NiGHTSDa
$LN7@P_NiGHTSDa:

; 2365 : 				else
; 2366 : 					player->nightstime = 1;

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  000f5	c7 80 c4 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+452], 1
$LN8@P_NiGHTSDa:

; 2367 : 			}

  000ff	eb 30		 jmp	 SHORT $LN10@P_NiGHTSDa
$LN5@P_NiGHTSDa:

; 2368 : 			else
; 2369 : 			{
; 2370 : 				if (player->nightstime > 5)

  00101	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00104	83 b8 c4 01 00
	00 05		 cmp	 DWORD PTR [eax+452], 5
  0010b	76 17		 jbe	 SHORT $LN9@P_NiGHTSDa

; 2371 : 					player->nightstime -= 5;

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00110	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  00116	83 e9 05	 sub	 ecx, 5
  00119	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0011c	89 8a c4 01 00
	00		 mov	 DWORD PTR [edx+452], ecx
  00122	eb 0d		 jmp	 SHORT $LN10@P_NiGHTSDa
$LN9@P_NiGHTSDa:

; 2372 : 				else
; 2373 : 					player->nightstime = 1;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00127	c7 80 c4 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+452], 1
$LN10@P_NiGHTSDa:

; 2374 : 			}
; 2375 : 		}
; 2376 : 
; 2377 : 		if (player->pflags & PF_TRANSFERTOCLOSEST)

  00131	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00134	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0013a	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00140	74 1e		 je	 SHORT $LN11@P_NiGHTSDa

; 2378 : 		{
; 2379 : 			target->momx = -target->momx;

  00142	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00145	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00148	f7 d9		 neg	 ecx
  0014a	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0014d	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 2380 : 			target->momy = -target->momy;

  00150	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00153	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00156	f7 d9		 neg	 ecx
  00158	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0015b	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 2381 : 		}

  0015e	eb 5d		 jmp	 SHORT $LN12@P_NiGHTSDa
$LN11@P_NiGHTSDa:

; 2382 : 		else
; 2383 : 		{
; 2384 : 			fa = player->old_angle_pos>>ANGLETOFINESHIFT;

  00160	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00163	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00169	c1 e9 13	 shr	 ecx, 19			; 00000013H
  0016c	89 4d f8	 mov	 DWORD PTR _fa$1[ebp], ecx

; 2385 : 
; 2386 : 			target->momx = FixedMul(FINECOSINE(fa),target->target->radius);

  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00178	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0017b	52		 push	 edx
  0017c	8b 45 f8	 mov	 eax, DWORD PTR _fa$1[ebp]
  0017f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  00185	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 _FixedMul
  0018e	83 c4 08	 add	 esp, 8
  00191	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00194	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 2387 : 			target->momy = FixedMul(FINESINE(fa),target->target->radius);

  00197	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0019a	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001a0	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  001a3	52		 push	 edx
  001a4	8b 45 f8	 mov	 eax, DWORD PTR _fa$1[ebp]
  001a7	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 _FixedMul
  001b4	83 c4 08	 add	 esp, 8
  001b7	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  001ba	89 42 4c	 mov	 DWORD PTR [edx+76], eax
$LN12@P_NiGHTSDa:

; 2388 : 		}
; 2389 : 
; 2390 : 		player->powers[pw_flashing] = flashingtics;

  001bd	b8 04 00 00 00	 mov	 eax, 4
  001c2	d1 e0		 shl	 eax, 1
  001c4	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  001c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _flashingtics
  001cd	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx

; 2391 : 		P_SetMobjState(target->tracer, S_NIGHTSHURT1);

  001d1	68 db 05 00 00	 push	 1499			; 000005dbH
  001d6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001d9	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  001df	51		 push	 ecx
  001e0	e8 00 00 00 00	 call	 _P_SetMobjState
  001e5	83 c4 08	 add	 esp, 8

; 2392 : 		S_StartSound(target, sfx_nghurt);

  001e8	6a 6e		 push	 110			; 0000006eH
  001ea	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 _S_StartSound
  001f3	83 c4 08	 add	 esp, 8
$LN2@P_NiGHTSDa:

; 2393 : 	}
; 2394 : }

  001f6	5f		 pop	 edi
  001f7	5e		 pop	 esi
  001f8	5b		 pop	 ebx
  001f9	8b e5		 mov	 esp, ebp
  001fb	5d		 pop	 ebp
  001fc	c3		 ret	 0
_P_NiGHTSDamage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_HitMessages
_TEXT	SEGMENT
tv194 = -104						; size = 4
tv192 = -100						; size = 4
tv235 = -100						; size = 4
tv179 = -96						; size = 4
tv233 = -96						; size = 4
tv171 = -92						; size = 4
tv220 = -92						; size = 4
tv169 = -88						; size = 4
tv215 = -88						; size = 4
tv156 = -84						; size = 4
tv213 = -84						; size = 4
tv93 = -80						; size = 4
tv151 = -80						; size = 4
tv200 = -80						; size = 4
_reflected$ = -12					; size = 4
_useverb$ = -8						; size = 4
_str$ = -4						; size = 4
_target$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_P_HitMessages PROC					; COMDAT

; 1717 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1718 : 	const char *str;
; 1719 : 	boolean useverb = true;

  00009	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 1

; 1720 : 	boolean reflected = false;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _reflected$[ebp], 0

; 1721 : 
; 1722 : 	if (!target || !target->player)

  00017	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0001b	74 0c		 je	 SHORT $LN5@P_HitMessa
  0001d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00020	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00027	75 05		 jne	 SHORT $LN4@P_HitMessa
$LN5@P_HitMessa:

; 1723 : 		return;

  00029	e9 5b 04 00 00	 jmp	 $LN1@P_HitMessa
$LN4@P_HitMessa:

; 1724 : 
; 1725 : 	if (!source || !source->player)

  0002e	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  00032	74 0c		 je	 SHORT $LN7@P_HitMessa
  00034	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00037	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0003e	75 05		 jne	 SHORT $LN6@P_HitMessa
$LN7@P_HitMessa:

; 1726 : 		return;

  00040	e9 44 04 00 00	 jmp	 $LN1@P_HitMessa
$LN6@P_HitMessa:

; 1727 : 
; 1728 : 	if ((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value)) &&

  00045	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0004c	83 f8 04	 cmp	 eax, 4
  0004f	74 15		 je	 SHORT $LN9@P_HitMessa
  00051	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00058	83 f8 01	 cmp	 eax, 1
  0005b	75 2e		 jne	 SHORT $LN8@P_HitMessa
  0005d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00064	74 25		 je	 SHORT $LN8@P_HitMessa
$LN9@P_HitMessa:
  00066	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00069	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0006f	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00072	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00078	8b 89 60 01 00
	00		 mov	 ecx, DWORD PTR [ecx+352]
  0007e	3b 88 60 01 00
	00		 cmp	 ecx, DWORD PTR [eax+352]
  00084	75 05		 jne	 SHORT $LN8@P_HitMessa

; 1729 : 		source->player->ctfteam == target->player->ctfteam)
; 1730 : 		return;

  00086	e9 fe 03 00 00	 jmp	 $LN1@P_HitMessa
$LN8@P_HitMessa:

; 1731 : 
; 1732 : 	str = text[PHURT_HIT];

  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	69 c8 2a 01 00
	00		 imul	 ecx, eax, 298
  00096	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0009c	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1733 : 
; 1734 : 	if (inflictor && (inflictor->flags2 & MF2_REFLECTED))

  0009f	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  000a3	74 18		 je	 SHORT $LN10@P_HitMessa
  000a5	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000a8	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000ae	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  000b4	74 07		 je	 SHORT $LN10@P_HitMessa

; 1735 : 		reflected = true;

  000b6	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _reflected$[ebp], 1
$LN10@P_HitMessa:

; 1736 : 
; 1737 : 	if (source->player->blackow == 3)

  000bd	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000c0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000c6	83 b9 34 01 00
	00 03		 cmp	 DWORD PTR [ecx+308], 3
  000cd	75 20		 jne	 SHORT $LN11@P_HitMessa

; 1738 : 	{
; 1739 : 		str = text[PHURT_GOTNUKED];

  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	69 c8 10 01 00
	00		 imul	 ecx, eax, 272
  000da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  000e0	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1740 : 		useverb = false;

  000e3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0

; 1741 : 	}

  000ea	e9 06 01 00 00	 jmp	 $LN2@P_HitMessa
$LN11@P_HitMessa:

; 1742 : 	else if (inflictor)

  000ef	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  000f3	0f 84 fc 00 00
	00		 je	 $LN2@P_HitMessa

; 1743 : 	{
; 1744 : 		switch (inflictor->type)

  000f9	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000fc	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000ff	89 4d b0	 mov	 DWORD PTR tv93[ebp], ecx
  00102	8b 55 b0	 mov	 edx, DWORD PTR tv93[ebp]
  00105	83 ea 47	 sub	 edx, 71			; 00000047H
  00108	89 55 b0	 mov	 DWORD PTR tv93[ebp], edx
  0010b	81 7d b0 99 00
	00 00		 cmp	 DWORD PTR tv93[ebp], 153 ; 00000099H
  00112	0f 87 dd 00 00
	00		 ja	 $LN23@P_HitMessa
  00118	8b 45 b0	 mov	 eax, DWORD PTR tv93[ebp]
  0011b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN53@P_HitMessa[eax]
  00122	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN54@P_HitMessa[ecx*4]
$LN14@P_HitMessa:

; 1745 : 		{
; 1746 : 			case MT_SPINFIRE:
; 1747 : 				str = text[PHURT_GOTBURNED];

  00129	b8 04 00 00 00	 mov	 eax, 4
  0012e	69 c8 11 01 00
	00		 imul	 ecx, eax, 273
  00134	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0013a	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1748 : 				useverb = false;

  0013d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0

; 1749 : 				break;

  00144	e9 ac 00 00 00	 jmp	 $LN2@P_HitMessa
$LN15@P_HitMessa:

; 1750 : 			case MT_THROWNBOUNCE:
; 1751 : 				str = text[PHURT_B];

  00149	b8 04 00 00 00	 mov	 eax, 4
  0014e	69 c8 13 01 00
	00		 imul	 ecx, eax, 275
  00154	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0015a	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1752 : 				break;

  0015d	e9 93 00 00 00	 jmp	 $LN2@P_HitMessa
$LN16@P_HitMessa:

; 1753 : 			case MT_THROWNAUTOMATIC:
; 1754 : 				str = text[PHURT_A];

  00162	b8 04 00 00 00	 mov	 eax, 4
  00167	69 c8 14 01 00
	00		 imul	 ecx, eax, 276
  0016d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00173	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1755 : 				break;

  00176	eb 7d		 jmp	 SHORT $LN2@P_HitMessa
$LN17@P_HitMessa:

; 1756 : 			case MT_THROWNSCATTER:
; 1757 : 				str = text[PHURT_S];

  00178	b8 04 00 00 00	 mov	 eax, 4
  0017d	69 c8 17 01 00
	00		 imul	 ecx, eax, 279
  00183	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00189	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1758 : 				break;

  0018c	eb 67		 jmp	 SHORT $LN2@P_HitMessa
$LN18@P_HitMessa:

; 1759 : 			case MT_THROWNEXPLOSION:
; 1760 : 				str = text[PHURT_E];

  0018e	b8 04 00 00 00	 mov	 eax, 4
  00193	69 c8 15 01 00
	00		 imul	 ecx, eax, 277
  00199	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0019f	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1761 : 				break;

  001a2	eb 51		 jmp	 SHORT $LN2@P_HitMessa
$LN19@P_HitMessa:

; 1762 : 			case MT_THROWNGRENADE:
; 1763 : 				str = text[PHURT_G];

  001a4	b8 04 00 00 00	 mov	 eax, 4
  001a9	69 c8 18 01 00
	00		 imul	 ecx, eax, 280
  001af	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001b5	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1764 : 				break;

  001b8	eb 3b		 jmp	 SHORT $LN2@P_HitMessa
$LN20@P_HitMessa:

; 1765 : 			case MT_REDRING:
; 1766 : 				if (inflictor->flags2 & MF2_RAILRING)

  001ba	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  001bd	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  001c3	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  001c9	74 16		 je	 SHORT $LN21@P_HitMessa

; 1767 : 					str = text[PHURT_R];

  001cb	b8 04 00 00 00	 mov	 eax, 4
  001d0	69 c8 16 01 00
	00		 imul	 ecx, eax, 278
  001d6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001dc	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  001df	eb 14		 jmp	 SHORT $LN22@P_HitMessa
$LN21@P_HitMessa:

; 1768 : 				//else if (inflictor->flags2 & MF2_SCATTER)
; 1769 : 				//	str = text[PHURT_S];
; 1770 : 				else
; 1771 : 					str = text[PHURT_RING];

  001e1	b8 04 00 00 00	 mov	 eax, 4
  001e6	69 c8 19 01 00
	00		 imul	 ecx, eax, 281
  001ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  001f2	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN22@P_HitMessa:
$LN23@P_HitMessa:
$LN2@P_HitMessa:

; 1772 : 				break;
; 1773 : 			default:
; 1774 : 				break;
; 1775 : 		}
; 1776 : 	}
; 1777 : 
; 1778 : 	if (useverb)

  001f5	83 7d f8 00	 cmp	 DWORD PTR _useverb$[ebp], 0
  001f9	0f 84 64 01 00
	00		 je	 $LN24@P_HitMessa

; 1779 : 		CONS_Printf(str, CTFTEAMCODE(target->player), player_names[target->player-players],

  001ff	83 7d f4 00	 cmp	 DWORD PTR _reflected$[ebp], 0
  00203	74 16		 je	 SHORT $LN27@P_HitMessa
  00205	b8 04 00 00 00	 mov	 eax, 4
  0020a	69 c8 0f 01 00
	00		 imul	 ecx, eax, 271
  00210	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00216	89 55 b0	 mov	 DWORD PTR tv151[ebp], edx
  00219	eb 07		 jmp	 SHORT $LN28@P_HitMessa
$LN27@P_HitMessa:
  0021b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN28@P_HitMessa:
  00222	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00225	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0022b	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  00232	74 09		 je	 SHORT $LN29@P_HitMessa
  00234	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  0023b	eb 07		 jmp	 SHORT $LN30@P_HitMessa
$LN29@P_HitMessa:
  0023d	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN30@P_HitMessa:
  00244	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  00247	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0024d	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  00254	74 2a		 je	 SHORT $LN33@P_HitMessa
  00256	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00259	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0025f	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  00266	75 09		 jne	 SHORT $LN31@P_HitMessa
  00268	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  0026f	eb 07		 jmp	 SHORT $LN32@P_HitMessa
$LN31@P_HitMessa:
  00271	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN32@P_HitMessa:
  00278	8b 45 a8	 mov	 eax, DWORD PTR tv169[ebp]
  0027b	89 45 a4	 mov	 DWORD PTR tv171[ebp], eax
  0027e	eb 07		 jmp	 SHORT $LN34@P_HitMessa
$LN33@P_HitMessa:
  00280	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN34@P_HitMessa:
  00287	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  0028a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00290	83 ba 60 01 00
	00 00		 cmp	 DWORD PTR [edx+352], 0
  00297	74 09		 je	 SHORT $LN35@P_HitMessa
  00299	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  002a0	eb 07		 jmp	 SHORT $LN36@P_HitMessa
$LN35@P_HitMessa:
  002a2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN36@P_HitMessa:
  002a9	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002ac	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  002b2	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  002b9	74 2a		 je	 SHORT $LN39@P_HitMessa
  002bb	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002be	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  002c4	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  002cb	75 09		 jne	 SHORT $LN37@P_HitMessa
  002cd	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv192[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  002d4	eb 07		 jmp	 SHORT $LN38@P_HitMessa
$LN37@P_HitMessa:
  002d6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv192[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN38@P_HitMessa:
  002dd	8b 4d 9c	 mov	 ecx, DWORD PTR tv192[ebp]
  002e0	89 4d 98	 mov	 DWORD PTR tv194[ebp], ecx
  002e3	eb 07		 jmp	 SHORT $LN40@P_HitMessa
$LN39@P_HitMessa:
  002e5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv194[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN40@P_HitMessa:
  002ec	8b 55 b0	 mov	 edx, DWORD PTR tv151[ebp]
  002ef	52		 push	 edx
  002f0	8b 45 ac	 mov	 eax, DWORD PTR tv156[ebp]
  002f3	50		 push	 eax
  002f4	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  002f7	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  002fd	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00302	99		 cdq
  00303	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00308	f7 f9		 idiv	 ecx
  0030a	6b d0 16	 imul	 edx, eax, 22
  0030d	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00313	52		 push	 edx
  00314	8b 45 a4	 mov	 eax, DWORD PTR tv171[ebp]
  00317	50		 push	 eax
  00318	b9 04 00 00 00	 mov	 ecx, 4
  0031d	69 d1 0d 01 00
	00		 imul	 edx, ecx, 269
  00323	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00329	50		 push	 eax
  0032a	8b 4d a0	 mov	 ecx, DWORD PTR tv179[ebp]
  0032d	51		 push	 ecx
  0032e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00331	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00337	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0033c	99		 cdq
  0033d	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00342	f7 f9		 idiv	 ecx
  00344	6b d0 16	 imul	 edx, eax, 22
  00347	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0034d	52		 push	 edx
  0034e	8b 45 98	 mov	 eax, DWORD PTR tv194[ebp]
  00351	50		 push	 eax
  00352	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00355	51		 push	 ecx
  00356	e8 00 00 00 00	 call	 _CONS_Printf
  0035b	83 c4 24	 add	 esp, 36			; 00000024H
  0035e	e9 26 01 00 00	 jmp	 $LN25@P_HitMessa
$LN24@P_HitMessa:

; 1780 : 			CTFTEAMENDCODE(target->player), text[P_HITVERB], CTFTEAMCODE(source->player),
; 1781 : 			player_names[source->player-players], CTFTEAMENDCODE(source->player), reflected ? text[P_REFLECT] : "");
; 1782 : 	else
; 1783 : 		CONS_Printf(str, CTFTEAMCODE(target->player), player_names[target->player-players],

  00363	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00366	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0036c	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  00373	74 09		 je	 SHORT $LN41@P_HitMessa
  00375	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv200[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  0037c	eb 07		 jmp	 SHORT $LN42@P_HitMessa
$LN41@P_HitMessa:
  0037e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv200[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN42@P_HitMessa:
  00385	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  00388	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0038e	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  00395	74 2a		 je	 SHORT $LN45@P_HitMessa
  00397	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0039a	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003a0	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  003a7	75 09		 jne	 SHORT $LN43@P_HitMessa
  003a9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv213[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  003b0	eb 07		 jmp	 SHORT $LN44@P_HitMessa
$LN43@P_HitMessa:
  003b2	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv213[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN44@P_HitMessa:
  003b9	8b 45 ac	 mov	 eax, DWORD PTR tv213[ebp]
  003bc	89 45 a8	 mov	 DWORD PTR tv215[ebp], eax
  003bf	eb 07		 jmp	 SHORT $LN46@P_HitMessa
$LN45@P_HitMessa:
  003c1	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN46@P_HitMessa:
  003c8	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  003cb	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003d1	83 ba 60 01 00
	00 00		 cmp	 DWORD PTR [edx+352], 0
  003d8	74 09		 je	 SHORT $LN47@P_HitMessa
  003da	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv220[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  003e1	eb 07		 jmp	 SHORT $LN48@P_HitMessa
$LN47@P_HitMessa:
  003e3	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv220[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN48@P_HitMessa:
  003ea	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003ed	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003f3	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  003fa	74 2a		 je	 SHORT $LN51@P_HitMessa
  003fc	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  003ff	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00405	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  0040c	75 09		 jne	 SHORT $LN49@P_HitMessa
  0040e	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv233[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  00415	eb 07		 jmp	 SHORT $LN50@P_HitMessa
$LN49@P_HitMessa:
  00417	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv233[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN50@P_HitMessa:
  0041e	8b 4d a0	 mov	 ecx, DWORD PTR tv233[ebp]
  00421	89 4d 9c	 mov	 DWORD PTR tv235[ebp], ecx
  00424	eb 07		 jmp	 SHORT $LN52@P_HitMessa
$LN51@P_HitMessa:
  00426	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv235[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN52@P_HitMessa:
  0042d	8b 55 b0	 mov	 edx, DWORD PTR tv200[ebp]
  00430	52		 push	 edx
  00431	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00434	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  0043a	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0043f	99		 cdq
  00440	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00445	f7 f9		 idiv	 ecx
  00447	6b d0 16	 imul	 edx, eax, 22
  0044a	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00450	52		 push	 edx
  00451	8b 45 a8	 mov	 eax, DWORD PTR tv215[ebp]
  00454	50		 push	 eax
  00455	8b 4d a4	 mov	 ecx, DWORD PTR tv220[ebp]
  00458	51		 push	 ecx
  00459	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0045c	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00462	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00467	99		 cdq
  00468	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0046d	f7 f9		 idiv	 ecx
  0046f	6b d0 16	 imul	 edx, eax, 22
  00472	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00478	52		 push	 edx
  00479	8b 45 9c	 mov	 eax, DWORD PTR tv235[ebp]
  0047c	50		 push	 eax
  0047d	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00480	51		 push	 ecx
  00481	e8 00 00 00 00	 call	 _CONS_Printf
  00486	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN25@P_HitMessa:
$LN1@P_HitMessa:

; 1784 : 			CTFTEAMENDCODE(target->player), CTFTEAMCODE(source->player),
; 1785 : 			player_names[source->player-players], CTFTEAMENDCODE(source->player));
; 1786 : 
; 1787 : 	return;
; 1788 : }

  00489	5f		 pop	 edi
  0048a	5e		 pop	 esi
  0048b	5b		 pop	 ebx
  0048c	8b e5		 mov	 esp, ebp
  0048e	5d		 pop	 ebp
  0048f	c3		 ret	 0
$LN54@P_HitMessa:
  00490	00 00 00 00	 DD	 $LN14@P_HitMessa
  00494	00 00 00 00	 DD	 $LN20@P_HitMessa
  00498	00 00 00 00	 DD	 $LN15@P_HitMessa
  0049c	00 00 00 00	 DD	 $LN16@P_HitMessa
  004a0	00 00 00 00	 DD	 $LN17@P_HitMessa
  004a4	00 00 00 00	 DD	 $LN18@P_HitMessa
  004a8	00 00 00 00	 DD	 $LN19@P_HitMessa
  004ac	00 00 00 00	 DD	 $LN23@P_HitMessa
$LN53@P_HitMessa:
  004b0	00		 DB	 0
  004b1	07		 DB	 7
  004b2	07		 DB	 7
  004b3	07		 DB	 7
  004b4	07		 DB	 7
  004b5	07		 DB	 7
  004b6	07		 DB	 7
  004b7	07		 DB	 7
  004b8	07		 DB	 7
  004b9	07		 DB	 7
  004ba	07		 DB	 7
  004bb	07		 DB	 7
  004bc	07		 DB	 7
  004bd	07		 DB	 7
  004be	07		 DB	 7
  004bf	07		 DB	 7
  004c0	07		 DB	 7
  004c1	07		 DB	 7
  004c2	07		 DB	 7
  004c3	07		 DB	 7
  004c4	07		 DB	 7
  004c5	07		 DB	 7
  004c6	07		 DB	 7
  004c7	07		 DB	 7
  004c8	07		 DB	 7
  004c9	07		 DB	 7
  004ca	07		 DB	 7
  004cb	07		 DB	 7
  004cc	07		 DB	 7
  004cd	07		 DB	 7
  004ce	07		 DB	 7
  004cf	07		 DB	 7
  004d0	07		 DB	 7
  004d1	07		 DB	 7
  004d2	07		 DB	 7
  004d3	07		 DB	 7
  004d4	07		 DB	 7
  004d5	07		 DB	 7
  004d6	07		 DB	 7
  004d7	07		 DB	 7
  004d8	07		 DB	 7
  004d9	07		 DB	 7
  004da	07		 DB	 7
  004db	07		 DB	 7
  004dc	07		 DB	 7
  004dd	07		 DB	 7
  004de	07		 DB	 7
  004df	07		 DB	 7
  004e0	07		 DB	 7
  004e1	07		 DB	 7
  004e2	07		 DB	 7
  004e3	07		 DB	 7
  004e4	07		 DB	 7
  004e5	07		 DB	 7
  004e6	07		 DB	 7
  004e7	07		 DB	 7
  004e8	07		 DB	 7
  004e9	07		 DB	 7
  004ea	07		 DB	 7
  004eb	07		 DB	 7
  004ec	07		 DB	 7
  004ed	07		 DB	 7
  004ee	07		 DB	 7
  004ef	07		 DB	 7
  004f0	07		 DB	 7
  004f1	07		 DB	 7
  004f2	07		 DB	 7
  004f3	07		 DB	 7
  004f4	07		 DB	 7
  004f5	07		 DB	 7
  004f6	07		 DB	 7
  004f7	07		 DB	 7
  004f8	07		 DB	 7
  004f9	07		 DB	 7
  004fa	07		 DB	 7
  004fb	07		 DB	 7
  004fc	07		 DB	 7
  004fd	07		 DB	 7
  004fe	07		 DB	 7
  004ff	07		 DB	 7
  00500	07		 DB	 7
  00501	07		 DB	 7
  00502	07		 DB	 7
  00503	07		 DB	 7
  00504	07		 DB	 7
  00505	07		 DB	 7
  00506	07		 DB	 7
  00507	07		 DB	 7
  00508	07		 DB	 7
  00509	07		 DB	 7
  0050a	07		 DB	 7
  0050b	07		 DB	 7
  0050c	07		 DB	 7
  0050d	07		 DB	 7
  0050e	07		 DB	 7
  0050f	07		 DB	 7
  00510	07		 DB	 7
  00511	07		 DB	 7
  00512	07		 DB	 7
  00513	07		 DB	 7
  00514	07		 DB	 7
  00515	07		 DB	 7
  00516	07		 DB	 7
  00517	07		 DB	 7
  00518	07		 DB	 7
  00519	07		 DB	 7
  0051a	07		 DB	 7
  0051b	07		 DB	 7
  0051c	07		 DB	 7
  0051d	07		 DB	 7
  0051e	07		 DB	 7
  0051f	07		 DB	 7
  00520	07		 DB	 7
  00521	07		 DB	 7
  00522	07		 DB	 7
  00523	07		 DB	 7
  00524	07		 DB	 7
  00525	07		 DB	 7
  00526	07		 DB	 7
  00527	07		 DB	 7
  00528	07		 DB	 7
  00529	07		 DB	 7
  0052a	07		 DB	 7
  0052b	07		 DB	 7
  0052c	07		 DB	 7
  0052d	07		 DB	 7
  0052e	07		 DB	 7
  0052f	07		 DB	 7
  00530	07		 DB	 7
  00531	07		 DB	 7
  00532	07		 DB	 7
  00533	07		 DB	 7
  00534	07		 DB	 7
  00535	07		 DB	 7
  00536	07		 DB	 7
  00537	07		 DB	 7
  00538	01		 DB	 1
  00539	07		 DB	 7
  0053a	07		 DB	 7
  0053b	07		 DB	 7
  0053c	07		 DB	 7
  0053d	07		 DB	 7
  0053e	07		 DB	 7
  0053f	07		 DB	 7
  00540	07		 DB	 7
  00541	07		 DB	 7
  00542	07		 DB	 7
  00543	07		 DB	 7
  00544	07		 DB	 7
  00545	02		 DB	 2
  00546	03		 DB	 3
  00547	04		 DB	 4
  00548	05		 DB	 5
  00549	06		 DB	 6
_P_HitMessages ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_DeathMessages
_TEXT	SEGMENT
tv260 = -104						; size = 4
tv155 = -100						; size = 4
tv258 = -100						; size = 4
tv301 = -100						; size = 4
tv153 = -96						; size = 4
tv299 = -96						; size = 4
tv245 = -96						; size = 4
tv286 = -92						; size = 4
tv237 = -92						; size = 4
tv140 = -92						; size = 4
tv235 = -88						; size = 4
tv135 = -88						; size = 4
tv183 = -88						; size = 4
tv442 = -88						; size = 4
tv281 = -88						; size = 4
tv421 = -88						; size = 4
tv181 = -84						; size = 4
tv279 = -84						; size = 4
tv222 = -84						; size = 4
tv133 = -84						; size = 4
tv419 = -84						; size = 4
tv440 = -84						; size = 4
tv189 = -80						; size = 4
tv266 = -80						; size = 4
tv168 = -80						; size = 4
tv88 = -80						; size = 4
tv305 = -80						; size = 4
tv406 = -80						; size = 4
tv217 = -80						; size = 4
tv427 = -80						; size = 4
_reflected$ = -12					; size = 4
_useverb$ = -8						; size = 4
_str$ = -4						; size = 4
_target$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_P_DeathMessages PROC					; COMDAT

; 1513 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1514 : 	const char *str;
; 1515 : 	boolean useverb = false;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0

; 1516 : 	boolean reflected = false;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _reflected$[ebp], 0

; 1517 : 
; 1518 : 	if (gametype == GT_COOP || gametype == GT_RACE)

  00017	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0001e	85 c0		 test	 eax, eax
  00020	74 0c		 je	 SHORT $LN7@P_DeathMes
  00022	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00029	83 f8 02	 cmp	 eax, 2
  0002c	75 05		 jne	 SHORT $LN6@P_DeathMes
$LN7@P_DeathMes:

; 1519 : 		return;

  0002e	e9 5d 0b 00 00	 jmp	 $LN69@P_DeathMes
$LN6@P_DeathMes:

; 1520 : 
; 1521 : 	if (!target || !target->player)

  00033	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00037	74 0c		 je	 SHORT $LN9@P_DeathMes
  00039	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0003c	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00043	75 05		 jne	 SHORT $LN8@P_DeathMes
$LN9@P_DeathMes:

; 1522 : 		return;

  00045	e9 46 0b 00 00	 jmp	 $LN69@P_DeathMes
$LN8@P_DeathMes:

; 1523 : 
; 1524 : 	if (!multiplayer && !netgame)

  0004a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  00051	75 0e		 jne	 SHORT $LN10@P_DeathMes
  00053	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0005a	75 05		 jne	 SHORT $LN10@P_DeathMes

; 1525 : 		return;

  0005c	e9 2f 0b 00 00	 jmp	 $LN69@P_DeathMes
$LN10@P_DeathMes:

; 1526 : 
; 1527 : 	str = text[PDEAD_DIED];

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	69 c8 0c 01 00
	00		 imul	 ecx, eax, 268
  0006c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00072	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1528 : 
; 1529 : 	if (inflictor && (inflictor->flags2 & MF2_REFLECTED))

  00075	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00079	74 18		 je	 SHORT $LN11@P_DeathMes
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0007e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00084	81 e1 00 00 00
	20		 and	 ecx, 536870912		; 20000000H
  0008a	74 07		 je	 SHORT $LN11@P_DeathMes

; 1530 : 		reflected = true;

  0008c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _reflected$[ebp], 1
$LN11@P_DeathMes:

; 1531 : 
; 1532 : 	// death message decision structure redone by Orospakr
; 1533 : 	if (source)

  00093	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  00097	0f 84 a8 07 00
	00		 je	 $LN12@P_DeathMes

; 1534 : 	{
; 1535 : 		useverb = true;

  0009d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 1

; 1536 : 
; 1537 : 		// inflictor shouldn't be NULL if source isn't
; 1538 : 		I_Assert(inflictor != NULL);
; 1539 : 		if ((inflictor->flags & MF_PUSHABLE) && source->player)

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  000a7	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000aa	83 e1 40	 and	 ecx, 64			; 00000040H
  000ad	0f 84 4e 01 00
	00		 je	 $LN14@P_DeathMes
  000b3	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  000b6	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000bd	0f 84 3e 01 00
	00		 je	 $LN14@P_DeathMes

; 1540 : 		{
; 1541 : 			CONS_Printf(text[PDEAD_MATCHCRUSHED],

  000c3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000c6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000cc	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  000d3	74 09		 je	 SHORT $LN71@P_DeathMes
  000d5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  000dc	eb 07		 jmp	 SHORT $LN72@P_DeathMes
$LN71@P_DeathMes:
  000de	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN72@P_DeathMes:
  000e5	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  000e8	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  000ee	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  000f5	74 2a		 je	 SHORT $LN75@P_DeathMes
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000fa	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00100	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  00107	75 09		 jne	 SHORT $LN73@P_DeathMes
  00109	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  00110	eb 07		 jmp	 SHORT $LN74@P_DeathMes
$LN73@P_DeathMes:
  00112	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN74@P_DeathMes:
  00119	8b 45 ac	 mov	 eax, DWORD PTR tv133[ebp]
  0011c	89 45 a8	 mov	 DWORD PTR tv135[ebp], eax
  0011f	eb 07		 jmp	 SHORT $LN76@P_DeathMes
$LN75@P_DeathMes:
  00121	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN76@P_DeathMes:
  00128	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0012b	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00131	83 ba 60 01 00
	00 00		 cmp	 DWORD PTR [edx+352], 0
  00138	74 09		 je	 SHORT $LN77@P_DeathMes
  0013a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  00141	eb 07		 jmp	 SHORT $LN78@P_DeathMes
$LN77@P_DeathMes:
  00143	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN78@P_DeathMes:
  0014a	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0014d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00153	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  0015a	74 2a		 je	 SHORT $LN81@P_DeathMes
  0015c	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  0015f	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00165	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  0016c	75 09		 jne	 SHORT $LN79@P_DeathMes
  0016e	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  00175	eb 07		 jmp	 SHORT $LN80@P_DeathMes
$LN79@P_DeathMes:
  00177	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN80@P_DeathMes:
  0017e	8b 4d a0	 mov	 ecx, DWORD PTR tv153[ebp]
  00181	89 4d 9c	 mov	 DWORD PTR tv155[ebp], ecx
  00184	eb 07		 jmp	 SHORT $LN82@P_DeathMes
$LN81@P_DeathMes:
  00186	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv155[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN82@P_DeathMes:
  0018d	8b 55 b0	 mov	 edx, DWORD PTR tv88[ebp]
  00190	52		 push	 edx
  00191	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00194	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  0019a	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0019f	99		 cdq
  001a0	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001a5	f7 f9		 idiv	 ecx
  001a7	6b d0 16	 imul	 edx, eax, 22
  001aa	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  001b0	52		 push	 edx
  001b1	8b 45 a8	 mov	 eax, DWORD PTR tv135[ebp]
  001b4	50		 push	 eax
  001b5	8b 4d a4	 mov	 ecx, DWORD PTR tv140[ebp]
  001b8	51		 push	 ecx
  001b9	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  001bc	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  001c2	2d 00 00 00 00	 sub	 eax, OFFSET _players
  001c7	99		 cdq
  001c8	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  001cd	f7 f9		 idiv	 ecx
  001cf	6b d0 16	 imul	 edx, eax, 22
  001d2	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  001d8	52		 push	 edx
  001d9	8b 45 9c	 mov	 eax, DWORD PTR tv155[ebp]
  001dc	50		 push	 eax
  001dd	b9 04 00 00 00	 mov	 ecx, 4
  001e2	69 d1 0a 01 00
	00		 imul	 edx, ecx, 266
  001e8	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 _CONS_Printf
  001f4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1542 : 				CTFTEAMCODE(source->player),
; 1543 : 				player_names[source->player - players],
; 1544 : 				CTFTEAMENDCODE(source->player),
; 1545 : 				CTFTEAMCODE(target->player),
; 1546 : 				player_names[target->player - players],
; 1547 : 				CTFTEAMENDCODE(target->player));
; 1548 : 			return;

  001f7	e9 94 09 00 00	 jmp	 $LN69@P_DeathMes

; 1549 : 		}

  001fc	e9 3f 06 00 00	 jmp	 $LN4@P_DeathMes
$LN14@P_DeathMes:

; 1550 : 		else if (source->player)

  00201	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00204	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0020b	0f 84 7c 04 00
	00		 je	 $LN16@P_DeathMes

; 1551 : 		{
; 1552 : 			if (source->player == target->player)

  00211	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00214	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00217	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  0021d	3b 91 a4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+164]
  00223	0f 85 b1 00 00
	00		 jne	 $LN18@P_DeathMes

; 1553 : 			{
; 1554 : 				CONS_Printf(text[PDEAD_SUICIDE],

  00229	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0022c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00232	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  00239	74 09		 je	 SHORT $LN83@P_DeathMes
  0023b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  00242	eb 07		 jmp	 SHORT $LN84@P_DeathMes
$LN83@P_DeathMes:
  00244	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN84@P_DeathMes:
  0024b	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0024e	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00254	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  0025b	74 2a		 je	 SHORT $LN87@P_DeathMes
  0025d	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00260	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00266	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  0026d	75 09		 jne	 SHORT $LN85@P_DeathMes
  0026f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv181[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  00276	eb 07		 jmp	 SHORT $LN86@P_DeathMes
$LN85@P_DeathMes:
  00278	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv181[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN86@P_DeathMes:
  0027f	8b 45 ac	 mov	 eax, DWORD PTR tv181[ebp]
  00282	89 45 a8	 mov	 DWORD PTR tv183[ebp], eax
  00285	eb 07		 jmp	 SHORT $LN88@P_DeathMes
$LN87@P_DeathMes:
  00287	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv183[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN88@P_DeathMes:
  0028e	8b 4d b0	 mov	 ecx, DWORD PTR tv168[ebp]
  00291	51		 push	 ecx
  00292	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00295	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0029b	2d 00 00 00 00	 sub	 eax, OFFSET _players
  002a0	99		 cdq
  002a1	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  002a6	f7 f9		 idiv	 ecx
  002a8	6b d0 16	 imul	 edx, eax, 22
  002ab	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  002b1	52		 push	 edx
  002b2	8b 45 a8	 mov	 eax, DWORD PTR tv183[ebp]
  002b5	50		 push	 eax
  002b6	b9 04 00 00 00	 mov	 ecx, 4
  002bb	69 d1 0b 01 00
	00		 imul	 edx, ecx, 267
  002c1	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 _CONS_Printf
  002cd	83 c4 10	 add	 esp, 16			; 00000010H

; 1555 : 					CTFTEAMCODE(target->player),
; 1556 : 					player_names[target->player - players],
; 1557 : 					CTFTEAMENDCODE(target->player));
; 1558 : 				return;

  002d0	e9 bb 08 00 00	 jmp	 $LN69@P_DeathMes

; 1559 : 			}

  002d5	e9 ae 03 00 00	 jmp	 $LN19@P_DeathMes
$LN18@P_DeathMes:

; 1560 : 			else
; 1561 : 			{
; 1562 : 				switch (inflictor->type)

  002da	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  002dd	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  002e0	89 4d b0	 mov	 DWORD PTR tv189[ebp], ecx
  002e3	8b 55 b0	 mov	 edx, DWORD PTR tv189[ebp]
  002e6	83 ea 47	 sub	 edx, 71			; 00000047H
  002e9	89 55 b0	 mov	 DWORD PTR tv189[ebp], edx
  002ec	81 7d b0 99 00
	00 00		 cmp	 DWORD PTR tv189[ebp], 153 ; 00000099H
  002f3	0f 87 e2 00 00
	00		 ja	 $LN29@P_DeathMes
  002f9	8b 45 b0	 mov	 eax, DWORD PTR tv189[ebp]
  002fc	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN128@P_DeathMes[eax]
  00303	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN129@P_DeathMes[ecx*4]
$LN20@P_DeathMes:

; 1563 : 				{
; 1564 : 					case MT_SPINFIRE:
; 1565 : 						str = text[PHURT_FIRETRAIL];

  0030a	b8 04 00 00 00	 mov	 eax, 4
  0030f	69 c8 12 01 00
	00		 imul	 ecx, eax, 274
  00315	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0031b	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1566 : 						useverb = false;

  0031e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0

; 1567 : 						break;

  00325	e9 c5 00 00 00	 jmp	 $LN2@P_DeathMes
$LN21@P_DeathMes:

; 1568 : 					case MT_THROWNBOUNCE:
; 1569 : 						str = text[PHURT_B];

  0032a	b8 04 00 00 00	 mov	 eax, 4
  0032f	69 c8 13 01 00
	00		 imul	 ecx, eax, 275
  00335	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0033b	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1570 : 						break;

  0033e	e9 ac 00 00 00	 jmp	 $LN2@P_DeathMes
$LN22@P_DeathMes:

; 1571 : 					case MT_THROWNAUTOMATIC:
; 1572 : 						str = text[PHURT_A];

  00343	b8 04 00 00 00	 mov	 eax, 4
  00348	69 c8 14 01 00
	00		 imul	 ecx, eax, 276
  0034e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00354	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1573 : 						break;

  00357	e9 93 00 00 00	 jmp	 $LN2@P_DeathMes
$LN23@P_DeathMes:

; 1574 : 					case MT_THROWNSCATTER:
; 1575 : 						str = text[PHURT_S];

  0035c	b8 04 00 00 00	 mov	 eax, 4
  00361	69 c8 17 01 00
	00		 imul	 ecx, eax, 279
  00367	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0036d	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1576 : 						break;

  00370	eb 7d		 jmp	 SHORT $LN2@P_DeathMes
$LN24@P_DeathMes:

; 1577 : 					case MT_THROWNEXPLOSION:
; 1578 : 						str = text[PHURT_E];

  00372	b8 04 00 00 00	 mov	 eax, 4
  00377	69 c8 15 01 00
	00		 imul	 ecx, eax, 277
  0037d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00383	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1579 : 						break;

  00386	eb 67		 jmp	 SHORT $LN2@P_DeathMes
$LN25@P_DeathMes:

; 1580 : 					case MT_THROWNGRENADE:
; 1581 : 						str = text[PHURT_G];

  00388	b8 04 00 00 00	 mov	 eax, 4
  0038d	69 c8 18 01 00
	00		 imul	 ecx, eax, 280
  00393	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00399	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1582 : 						break;

  0039c	eb 51		 jmp	 SHORT $LN2@P_DeathMes
$LN26@P_DeathMes:

; 1583 : 					case MT_REDRING:
; 1584 : 						if (inflictor->flags2 & MF2_RAILRING)

  0039e	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  003a1	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  003a7	81 e1 00 00 02
	00		 and	 ecx, 131072		; 00020000H
  003ad	74 16		 je	 SHORT $LN27@P_DeathMes

; 1585 : 							str = text[PHURT_R];

  003af	b8 04 00 00 00	 mov	 eax, 4
  003b4	69 c8 16 01 00
	00		 imul	 ecx, eax, 278
  003ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003c0	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  003c3	eb 14		 jmp	 SHORT $LN28@P_DeathMes
$LN27@P_DeathMes:

; 1586 : 						//else if (inflictor->flags2 & MF2_SCATTER)
; 1587 : 						//	str = text[PHURT_S];
; 1588 : 						else
; 1589 : 							str = text[PHURT_RING];

  003c5	b8 04 00 00 00	 mov	 eax, 4
  003ca	69 c8 19 01 00
	00		 imul	 ecx, eax, 281
  003d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003d6	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN28@P_DeathMes:

; 1590 : 						break;

  003d9	eb 14		 jmp	 SHORT $LN2@P_DeathMes
$LN29@P_DeathMes:

; 1591 : 
; 1592 : 					default:
; 1593 : 						str = text[PHURT_MATCHDEFAULT];

  003db	b8 04 00 00 00	 mov	 eax, 4
  003e0	69 c8 1a 01 00
	00		 imul	 ecx, eax, 282
  003e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  003ec	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN2@P_DeathMes:

; 1594 : 						break;
; 1595 : 				}
; 1596 : 
; 1597 : 				if (useverb)

  003ef	83 7d f8 00	 cmp	 DWORD PTR _useverb$[ebp], 0
  003f3	0f 84 64 01 00
	00		 je	 $LN30@P_DeathMes

; 1598 : 					CONS_Printf(str,

  003f9	83 7d f4 00	 cmp	 DWORD PTR _reflected$[ebp], 0
  003fd	74 16		 je	 SHORT $LN89@P_DeathMes
  003ff	b8 04 00 00 00	 mov	 eax, 4
  00404	69 c8 0f 01 00
	00		 imul	 ecx, eax, 271
  0040a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00410	89 55 b0	 mov	 DWORD PTR tv217[ebp], edx
  00413	eb 07		 jmp	 SHORT $LN90@P_DeathMes
$LN89@P_DeathMes:
  00415	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN90@P_DeathMes:
  0041c	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0041f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00425	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  0042c	74 09		 je	 SHORT $LN91@P_DeathMes
  0042e	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  00435	eb 07		 jmp	 SHORT $LN92@P_DeathMes
$LN91@P_DeathMes:
  00437	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN92@P_DeathMes:
  0043e	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  00441	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00447	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  0044e	74 2a		 je	 SHORT $LN95@P_DeathMes
  00450	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00453	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00459	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  00460	75 09		 jne	 SHORT $LN93@P_DeathMes
  00462	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv235[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  00469	eb 07		 jmp	 SHORT $LN94@P_DeathMes
$LN93@P_DeathMes:
  0046b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv235[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN94@P_DeathMes:
  00472	8b 45 a8	 mov	 eax, DWORD PTR tv235[ebp]
  00475	89 45 a4	 mov	 DWORD PTR tv237[ebp], eax
  00478	eb 07		 jmp	 SHORT $LN96@P_DeathMes
$LN95@P_DeathMes:
  0047a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv237[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN96@P_DeathMes:
  00481	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00484	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0048a	83 ba 60 01 00
	00 00		 cmp	 DWORD PTR [edx+352], 0
  00491	74 09		 je	 SHORT $LN97@P_DeathMes
  00493	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  0049a	eb 07		 jmp	 SHORT $LN98@P_DeathMes
$LN97@P_DeathMes:
  0049c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN98@P_DeathMes:
  004a3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004a6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004ac	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  004b3	74 2a		 je	 SHORT $LN101@P_DeathMes
  004b5	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  004b8	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  004be	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  004c5	75 09		 jne	 SHORT $LN99@P_DeathMes
  004c7	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv258[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  004ce	eb 07		 jmp	 SHORT $LN100@P_DeathMes
$LN99@P_DeathMes:
  004d0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv258[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN100@P_DeathMes:
  004d7	8b 4d 9c	 mov	 ecx, DWORD PTR tv258[ebp]
  004da	89 4d 98	 mov	 DWORD PTR tv260[ebp], ecx
  004dd	eb 07		 jmp	 SHORT $LN102@P_DeathMes
$LN101@P_DeathMes:
  004df	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv260[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN102@P_DeathMes:
  004e6	8b 55 b0	 mov	 edx, DWORD PTR tv217[ebp]
  004e9	52		 push	 edx
  004ea	8b 45 ac	 mov	 eax, DWORD PTR tv222[ebp]
  004ed	50		 push	 eax
  004ee	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  004f1	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  004f7	2d 00 00 00 00	 sub	 eax, OFFSET _players
  004fc	99		 cdq
  004fd	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00502	f7 f9		 idiv	 ecx
  00504	6b d0 16	 imul	 edx, eax, 22
  00507	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0050d	52		 push	 edx
  0050e	8b 45 a4	 mov	 eax, DWORD PTR tv237[ebp]
  00511	50		 push	 eax
  00512	b9 04 00 00 00	 mov	 ecx, 4
  00517	69 d1 0e 01 00
	00		 imul	 edx, ecx, 270
  0051d	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00523	50		 push	 eax
  00524	8b 4d a0	 mov	 ecx, DWORD PTR tv245[ebp]
  00527	51		 push	 ecx
  00528	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0052b	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00531	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00536	99		 cdq
  00537	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0053c	f7 f9		 idiv	 ecx
  0053e	6b d0 16	 imul	 edx, eax, 22
  00541	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00547	52		 push	 edx
  00548	8b 45 98	 mov	 eax, DWORD PTR tv260[ebp]
  0054b	50		 push	 eax
  0054c	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  0054f	51		 push	 ecx
  00550	e8 00 00 00 00	 call	 _CONS_Printf
  00555	83 c4 24	 add	 esp, 36			; 00000024H
  00558	e9 26 01 00 00	 jmp	 $LN31@P_DeathMes
$LN30@P_DeathMes:

; 1599 : 						CTFTEAMCODE(target->player),
; 1600 : 						player_names[target->player - players],
; 1601 : 						CTFTEAMENDCODE(target->player),
; 1602 : 						text[P_KILLEDVERB],
; 1603 : 						CTFTEAMCODE(source->player),
; 1604 : 						player_names[source->player - players],
; 1605 : 						CTFTEAMENDCODE(source->player),
; 1606 : 						reflected ? text[P_REFLECT] : "");
; 1607 : 				else
; 1608 : 					CONS_Printf(str,

  0055d	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00560	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00566	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  0056d	74 09		 je	 SHORT $LN103@P_DeathMes
  0056f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv266[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  00576	eb 07		 jmp	 SHORT $LN104@P_DeathMes
$LN103@P_DeathMes:
  00578	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv266[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN104@P_DeathMes:
  0057f	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  00582	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00588	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  0058f	74 2a		 je	 SHORT $LN107@P_DeathMes
  00591	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00594	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0059a	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  005a1	75 09		 jne	 SHORT $LN105@P_DeathMes
  005a3	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv279[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  005aa	eb 07		 jmp	 SHORT $LN106@P_DeathMes
$LN105@P_DeathMes:
  005ac	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv279[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN106@P_DeathMes:
  005b3	8b 45 ac	 mov	 eax, DWORD PTR tv279[ebp]
  005b6	89 45 a8	 mov	 DWORD PTR tv281[ebp], eax
  005b9	eb 07		 jmp	 SHORT $LN108@P_DeathMes
$LN107@P_DeathMes:
  005bb	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv281[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN108@P_DeathMes:
  005c2	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  005c5	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  005cb	83 ba 60 01 00
	00 00		 cmp	 DWORD PTR [edx+352], 0
  005d2	74 09		 je	 SHORT $LN109@P_DeathMes
  005d4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv286[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  005db	eb 07		 jmp	 SHORT $LN110@P_DeathMes
$LN109@P_DeathMes:
  005dd	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv286[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN110@P_DeathMes:
  005e4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  005e7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  005ed	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  005f4	74 2a		 je	 SHORT $LN113@P_DeathMes
  005f6	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  005f9	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  005ff	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  00606	75 09		 jne	 SHORT $LN111@P_DeathMes
  00608	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv299[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  0060f	eb 07		 jmp	 SHORT $LN112@P_DeathMes
$LN111@P_DeathMes:
  00611	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv299[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN112@P_DeathMes:
  00618	8b 4d a0	 mov	 ecx, DWORD PTR tv299[ebp]
  0061b	89 4d 9c	 mov	 DWORD PTR tv301[ebp], ecx
  0061e	eb 07		 jmp	 SHORT $LN114@P_DeathMes
$LN113@P_DeathMes:
  00620	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv301[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN114@P_DeathMes:
  00627	8b 55 b0	 mov	 edx, DWORD PTR tv266[ebp]
  0062a	52		 push	 edx
  0062b	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0062e	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00634	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00639	99		 cdq
  0063a	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0063f	f7 f9		 idiv	 ecx
  00641	6b d0 16	 imul	 edx, eax, 22
  00644	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0064a	52		 push	 edx
  0064b	8b 45 a8	 mov	 eax, DWORD PTR tv281[ebp]
  0064e	50		 push	 eax
  0064f	8b 4d a4	 mov	 ecx, DWORD PTR tv286[ebp]
  00652	51		 push	 ecx
  00653	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00656	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0065c	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00661	99		 cdq
  00662	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00667	f7 f9		 idiv	 ecx
  00669	6b d0 16	 imul	 edx, eax, 22
  0066c	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00672	52		 push	 edx
  00673	8b 45 9c	 mov	 eax, DWORD PTR tv301[ebp]
  00676	50		 push	 eax
  00677	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  0067a	51		 push	 ecx
  0067b	e8 00 00 00 00	 call	 _CONS_Printf
  00680	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN31@P_DeathMes:

; 1609 : 						CTFTEAMCODE(target->player),
; 1610 : 						player_names[target->player - players],
; 1611 : 						CTFTEAMENDCODE(target->player),
; 1612 : 						CTFTEAMCODE(source->player),
; 1613 : 						player_names[source->player - players],
; 1614 : 						CTFTEAMENDCODE(source->player));
; 1615 : 				return;

  00683	e9 08 05 00 00	 jmp	 $LN69@P_DeathMes
$LN19@P_DeathMes:

; 1616 : 			}
; 1617 : 		}

  00688	e9 b3 01 00 00	 jmp	 $LN4@P_DeathMes
$LN16@P_DeathMes:

; 1618 : 		else
; 1619 : 		{
; 1620 : 			switch (source->type)

  0068d	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00690	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00693	89 4d b0	 mov	 DWORD PTR tv305[ebp], ecx
  00696	83 7d b0 1d	 cmp	 DWORD PTR tv305[ebp], 29 ; 0000001dH
  0069a	7f 27		 jg	 SHORT $LN115@P_DeathMes
  0069c	83 7d b0 1d	 cmp	 DWORD PTR tv305[ebp], 29 ; 0000001dH
  006a0	0f 84 55 01 00
	00		 je	 $LN47@P_DeathMes
  006a6	8b 55 b0	 mov	 edx, DWORD PTR tv305[ebp]
  006a9	83 ea 01	 sub	 edx, 1
  006ac	89 55 b0	 mov	 DWORD PTR tv305[ebp], edx
  006af	83 7d b0 07	 cmp	 DWORD PTR tv305[ebp], 7
  006b3	0f 87 80 01 00
	00		 ja	 $LN51@P_DeathMes
  006b9	8b 45 b0	 mov	 eax, DWORD PTR tv305[ebp]
  006bc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN130@P_DeathMes[eax*4]
$LN115@P_DeathMes:
  006c3	83 7d b0 1f	 cmp	 DWORD PTR tv305[ebp], 31 ; 0000001fH
  006c7	0f 84 4d 01 00
	00		 je	 $LN49@P_DeathMes
  006cd	81 7d b0 05 01
	00 00		 cmp	 DWORD PTR tv305[ebp], 261 ; 00000105H
  006d4	74 05		 je	 SHORT $LN32@P_DeathMes
  006d6	e9 5e 01 00 00	 jmp	 $LN51@P_DeathMes
$LN32@P_DeathMes:

; 1621 : 			{
; 1622 : 				case MT_DISS:
; 1623 : 					if (source->threshold == 42)

  006db	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  006de	83 b8 a0 00 00
	00 2a		 cmp	 DWORD PTR [eax+160], 42	; 0000002aH
  006e5	75 1b		 jne	 SHORT $LN33@P_DeathMes

; 1624 : 					{
; 1625 : 						str = text[PDEAD_DROWNED];

  006e7	b8 04 00 00 00	 mov	 eax, 4
  006ec	69 c8 1b 01 00
	00		 imul	 ecx, eax, 283
  006f2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  006f8	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1626 : 						useverb = false;

  006fb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0
$LN33@P_DeathMes:

; 1627 : 					}
; 1628 : 					if (source->threshold == 43)

  00702	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00705	83 b8 a0 00 00
	00 2b		 cmp	 DWORD PTR [eax+160], 43	; 0000002bH
  0070c	75 1d		 jne	 SHORT $LN34@P_DeathMes

; 1629 : 					{
; 1630 : 						str = text[PDEAD_SPIK];

  0070e	b8 04 00 00 00	 mov	 eax, 4
  00713	69 c8 28 01 00
	00		 imul	 ecx, eax, 296
  00719	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  0071f	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1631 : 						useverb = false;

  00722	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0

; 1632 : 					}

  00729	eb 27		 jmp	 SHORT $LN36@P_DeathMes
$LN34@P_DeathMes:

; 1633 : 					else if (source->threshold == 44)

  0072b	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0072e	83 b8 a0 00 00
	00 2c		 cmp	 DWORD PTR [eax+160], 44	; 0000002cH
  00735	75 1b		 jne	 SHORT $LN36@P_DeathMes

; 1634 : 					{
; 1635 : 						str = text[PDEAD_CRUSHED];

  00737	b8 04 00 00 00	 mov	 eax, 4
  0073c	69 c8 1c 01 00
	00		 imul	 ecx, eax, 284
  00742	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00748	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx

; 1636 : 						useverb = false;

  0074b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0
$LN36@P_DeathMes:

; 1637 : 					}
; 1638 : 					break;

  00752	e9 e9 00 00 00	 jmp	 $LN4@P_DeathMes
$LN37@P_DeathMes:

; 1639 : 				case MT_BLUECRAWLA:
; 1640 : 					if (netgame)

  00757	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0075e	74 14		 je	 SHORT $LN38@P_DeathMes

; 1641 : 						str = text[PHURT_BCRAWLA];

  00760	b8 04 00 00 00	 mov	 eax, 4
  00765	69 c8 1d 01 00
	00		 imul	 ecx, eax, 285
  0076b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00771	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN38@P_DeathMes:

; 1642 : 					break;

  00774	e9 c7 00 00 00	 jmp	 $LN4@P_DeathMes
$LN39@P_DeathMes:

; 1643 : 				case MT_REDCRAWLA:
; 1644 : 					if (netgame)

  00779	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00780	74 14		 je	 SHORT $LN40@P_DeathMes

; 1645 : 						str = text[PHURT_RCRAWLA];

  00782	b8 04 00 00 00	 mov	 eax, 4
  00787	69 c8 1e 01 00
	00		 imul	 ecx, eax, 286
  0078d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00793	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN40@P_DeathMes:

; 1646 : 					break;

  00796	e9 a5 00 00 00	 jmp	 $LN4@P_DeathMes
$LN41@P_DeathMes:

; 1647 : 				case MT_JETTGUNNER:
; 1648 : 					if (netgame)

  0079b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  007a2	74 14		 je	 SHORT $LN42@P_DeathMes

; 1649 : 						str = text[PHURT_JETG];

  007a4	b8 04 00 00 00	 mov	 eax, 4
  007a9	69 c8 1f 01 00
	00		 imul	 ecx, eax, 287
  007af	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  007b5	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN42@P_DeathMes:

; 1650 : 					break;

  007b8	e9 83 00 00 00	 jmp	 $LN4@P_DeathMes
$LN43@P_DeathMes:

; 1651 : 				case MT_JETTBOMBER:
; 1652 : 					if (netgame)

  007bd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  007c4	74 14		 je	 SHORT $LN44@P_DeathMes

; 1653 : 						str = text[PHURT_JETB];

  007c6	b8 04 00 00 00	 mov	 eax, 4
  007cb	69 c8 20 01 00
	00		 imul	 ecx, eax, 288
  007d1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  007d7	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN44@P_DeathMes:

; 1654 : 					break;

  007da	eb 64		 jmp	 SHORT $LN4@P_DeathMes
$LN45@P_DeathMes:

; 1655 : 				case MT_CRAWLACOMMANDER:
; 1656 : 					if (netgame)

  007dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  007e3	74 14		 je	 SHORT $LN46@P_DeathMes

; 1657 : 						str = text[PHURT_CCRAWLA];

  007e5	b8 04 00 00 00	 mov	 eax, 4
  007ea	69 c8 21 01 00
	00		 imul	 ecx, eax, 289
  007f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  007f6	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN46@P_DeathMes:

; 1658 : 					break;

  007f9	eb 45		 jmp	 SHORT $LN4@P_DeathMes
$LN47@P_DeathMes:

; 1659 : 				case MT_EGGMOBILE:
; 1660 : 					if (netgame)

  007fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00802	74 14		 je	 SHORT $LN48@P_DeathMes

; 1661 : 						str = text[PHURT_BOSS1];

  00804	b8 04 00 00 00	 mov	 eax, 4
  00809	69 c8 22 01 00
	00		 imul	 ecx, eax, 290
  0080f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00815	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN48@P_DeathMes:

; 1662 : 					break;

  00818	eb 26		 jmp	 SHORT $LN4@P_DeathMes
$LN49@P_DeathMes:

; 1663 : 				case MT_EGGMOBILE2:
; 1664 : 					if (netgame)

  0081a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00821	74 14		 je	 SHORT $LN50@P_DeathMes

; 1665 : 						str = text[PHURT_BOSS2];

  00823	b8 04 00 00 00	 mov	 eax, 4
  00828	69 c8 23 01 00
	00		 imul	 ecx, eax, 291
  0082e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00834	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN50@P_DeathMes:

; 1666 : 					break;

  00837	eb 07		 jmp	 SHORT $LN4@P_DeathMes
$LN51@P_DeathMes:

; 1667 : 				default:
; 1668 : 					useverb = false;

  00839	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _useverb$[ebp], 0
$LN4@P_DeathMes:

; 1669 : 					break;
; 1670 : 			}
; 1671 : 		}
; 1672 : 	}

  00840	e9 41 01 00 00	 jmp	 $LN63@P_DeathMes
$LN12@P_DeathMes:

; 1673 : 	else
; 1674 : 	{ // source is NULL
; 1675 : 		// environment kills
; 1676 : 		if (P_PlayerTouchingSectorSpecial(target->player, 1, 1))

  00845	6a 01		 push	 1
  00847	6a 01		 push	 1
  00849	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0084c	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00852	51		 push	 ecx
  00853	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  00858	83 c4 0c	 add	 esp, 12			; 0000000cH
  0085b	85 c0		 test	 eax, eax
  0085d	74 19		 je	 SHORT $LN52@P_DeathMes

; 1677 : 			str = text[PDEAD_DIED];

  0085f	b8 04 00 00 00	 mov	 eax, 4
  00864	69 c8 0c 01 00
	00		 imul	 ecx, eax, 268
  0086a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00870	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  00873	e9 0e 01 00 00	 jmp	 $LN63@P_DeathMes
$LN52@P_DeathMes:

; 1678 : 		else if (P_PlayerTouchingSectorSpecial(target->player, 1, 2))

  00878	6a 02		 push	 2
  0087a	6a 01		 push	 1
  0087c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0087f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00885	51		 push	 ecx
  00886	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  0088b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0088e	85 c0		 test	 eax, eax
  00890	74 19		 je	 SHORT $LN54@P_DeathMes

; 1679 : 			str = text[PDEAD_GOOP];

  00892	b8 04 00 00 00	 mov	 eax, 4
  00897	69 c8 25 01 00
	00		 imul	 ecx, eax, 293
  0089d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  008a3	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  008a6	e9 db 00 00 00	 jmp	 $LN63@P_DeathMes
$LN54@P_DeathMes:

; 1680 : 		else if (P_PlayerTouchingSectorSpecial(target->player, 1, 3))

  008ab	6a 03		 push	 3
  008ad	6a 01		 push	 1
  008af	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  008b2	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  008b8	51		 push	 ecx
  008b9	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  008be	83 c4 0c	 add	 esp, 12			; 0000000cH
  008c1	85 c0		 test	 eax, eax
  008c3	74 19		 je	 SHORT $LN56@P_DeathMes

; 1681 : 			str = text[PDEAD_FIRE];

  008c5	b8 04 00 00 00	 mov	 eax, 4
  008ca	69 c8 26 01 00
	00		 imul	 ecx, eax, 294
  008d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  008d6	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  008d9	e9 a8 00 00 00	 jmp	 $LN63@P_DeathMes
$LN56@P_DeathMes:

; 1682 : 		else if (P_PlayerTouchingSectorSpecial(target->player, 1, 4))

  008de	6a 04		 push	 4
  008e0	6a 01		 push	 1
  008e2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  008e5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  008eb	51		 push	 ecx
  008ec	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  008f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  008f4	85 c0		 test	 eax, eax
  008f6	74 16		 je	 SHORT $LN58@P_DeathMes

; 1683 : 			str = text[PDEAD_ELEC];

  008f8	b8 04 00 00 00	 mov	 eax, 4
  008fd	69 c8 27 01 00
	00		 imul	 ecx, eax, 295
  00903	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00909	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  0090c	eb 78		 jmp	 SHORT $LN63@P_DeathMes
$LN58@P_DeathMes:

; 1684 : 		else if (P_PlayerTouchingSectorSpecial(target->player, 1, 6)
; 1685 : 			|| P_PlayerTouchingSectorSpecial(target->player, 1, 7))

  0090e	6a 06		 push	 6
  00910	6a 01		 push	 1
  00912	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00915	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0091b	51		 push	 ecx
  0091c	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  00921	83 c4 0c	 add	 esp, 12			; 0000000cH
  00924	85 c0		 test	 eax, eax
  00926	75 1a		 jne	 SHORT $LN62@P_DeathMes
  00928	6a 07		 push	 7
  0092a	6a 01		 push	 1
  0092c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0092f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00935	51		 push	 ecx
  00936	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  0093b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0093e	85 c0		 test	 eax, eax
  00940	74 16		 je	 SHORT $LN60@P_DeathMes
$LN62@P_DeathMes:

; 1686 : 			str = text[PDEAD_PIT];

  00942	b8 04 00 00 00	 mov	 eax, 4
  00947	69 c8 24 01 00
	00		 imul	 ecx, eax, 292
  0094d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00953	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
  00956	eb 2e		 jmp	 SHORT $LN63@P_DeathMes
$LN60@P_DeathMes:

; 1687 : 		else if (P_PlayerTouchingSectorSpecial(target->player, 1, 12))

  00958	6a 0c		 push	 12			; 0000000cH
  0095a	6a 01		 push	 1
  0095c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0095f	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00965	51		 push	 ecx
  00966	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  0096b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0096e	85 c0		 test	 eax, eax
  00970	74 14		 je	 SHORT $LN63@P_DeathMes

; 1688 : 			str = text[PDEAD_SPAC];

  00972	b8 04 00 00 00	 mov	 eax, 4
  00977	69 c8 29 01 00
	00		 imul	 ecx, eax, 297
  0097d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00983	89 55 fc	 mov	 DWORD PTR _str$[ebp], edx
$LN63@P_DeathMes:

; 1689 : 	}
; 1690 : 
; 1691 : 	if (useverb)

  00986	83 7d f8 00	 cmp	 DWORD PTR _useverb$[ebp], 0
  0098a	0f 84 b0 00 00
	00		 je	 $LN64@P_DeathMes

; 1692 : 		CONS_Printf(str,

  00990	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00993	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00999	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  009a0	74 09		 je	 SHORT $LN116@P_DeathMes
  009a2	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv406[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  009a9	eb 07		 jmp	 SHORT $LN117@P_DeathMes
$LN116@P_DeathMes:
  009ab	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv406[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN117@P_DeathMes:
  009b2	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  009b5	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  009bb	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  009c2	74 2a		 je	 SHORT $LN120@P_DeathMes
  009c4	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  009c7	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  009cd	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  009d4	75 09		 jne	 SHORT $LN118@P_DeathMes
  009d6	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv419[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  009dd	eb 07		 jmp	 SHORT $LN119@P_DeathMes
$LN118@P_DeathMes:
  009df	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv419[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN119@P_DeathMes:
  009e6	8b 45 ac	 mov	 eax, DWORD PTR tv419[ebp]
  009e9	89 45 a8	 mov	 DWORD PTR tv421[ebp], eax
  009ec	eb 07		 jmp	 SHORT $LN121@P_DeathMes
$LN120@P_DeathMes:
  009ee	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv421[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN121@P_DeathMes:
  009f5	b9 04 00 00 00	 mov	 ecx, 4
  009fa	69 d1 0e 01 00
	00		 imul	 edx, ecx, 270
  00a00	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _text[edx]
  00a06	50		 push	 eax
  00a07	8b 4d b0	 mov	 ecx, DWORD PTR tv406[ebp]
  00a0a	51		 push	 ecx
  00a0b	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00a0e	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00a14	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00a19	99		 cdq
  00a1a	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00a1f	f7 f9		 idiv	 ecx
  00a21	6b d0 16	 imul	 edx, eax, 22
  00a24	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00a2a	52		 push	 edx
  00a2b	8b 45 a8	 mov	 eax, DWORD PTR tv421[ebp]
  00a2e	50		 push	 eax
  00a2f	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00a32	51		 push	 ecx
  00a33	e8 00 00 00 00	 call	 _CONS_Printf
  00a38	83 c4 14	 add	 esp, 20			; 00000014H
  00a3b	e9 99 00 00 00	 jmp	 $LN65@P_DeathMes
$LN64@P_DeathMes:

; 1693 : 			CTFTEAMCODE(target->player),
; 1694 : 			player_names[target->player - players],
; 1695 : 			CTFTEAMENDCODE(target->player), text[P_KILLEDVERB]);
; 1696 : 	else
; 1697 : 		CONS_Printf(str,

  00a40	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00a43	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a49	83 b9 60 01 00
	00 00		 cmp	 DWORD PTR [ecx+352], 0
  00a50	74 09		 je	 SHORT $LN122@P_DeathMes
  00a52	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv427[ebp], OFFSET ??_C@_01IFKFHFEL@?$IA@
  00a59	eb 07		 jmp	 SHORT $LN123@P_DeathMes
$LN122@P_DeathMes:
  00a5b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv427[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN123@P_DeathMes:
  00a62	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00a65	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00a6b	83 b8 60 01 00
	00 00		 cmp	 DWORD PTR [eax+352], 0
  00a72	74 2a		 je	 SHORT $LN126@P_DeathMes
  00a74	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00a77	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00a7d	83 ba 60 01 00
	00 01		 cmp	 DWORD PTR [edx+352], 1
  00a84	75 09		 jne	 SHORT $LN124@P_DeathMes
  00a86	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv440[ebp], OFFSET ??_C@_01PINCIBAO@?$IF@
  00a8d	eb 07		 jmp	 SHORT $LN125@P_DeathMes
$LN124@P_DeathMes:
  00a8f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv440[ebp], OFFSET ??_C@_01OBMJLAEP@?$IE@
$LN125@P_DeathMes:
  00a96	8b 45 ac	 mov	 eax, DWORD PTR tv440[ebp]
  00a99	89 45 a8	 mov	 DWORD PTR tv442[ebp], eax
  00a9c	eb 07		 jmp	 SHORT $LN127@P_DeathMes
$LN126@P_DeathMes:
  00a9e	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv442[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN127@P_DeathMes:
  00aa5	8b 4d b0	 mov	 ecx, DWORD PTR tv427[ebp]
  00aa8	51		 push	 ecx
  00aa9	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00aac	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00ab2	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00ab7	99		 cdq
  00ab8	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00abd	f7 f9		 idiv	 ecx
  00abf	6b d0 16	 imul	 edx, eax, 22
  00ac2	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00ac8	52		 push	 edx
  00ac9	8b 45 a8	 mov	 eax, DWORD PTR tv442[ebp]
  00acc	50		 push	 eax
  00acd	8b 4d fc	 mov	 ecx, DWORD PTR _str$[ebp]
  00ad0	51		 push	 ecx
  00ad1	e8 00 00 00 00	 call	 _CONS_Printf
  00ad6	83 c4 10	 add	 esp, 16			; 00000010H
$LN65@P_DeathMes:

; 1698 : 			CTFTEAMCODE(target->player),
; 1699 : 			player_names[target->player - players],
; 1700 : 			CTFTEAMENDCODE(target->player));
; 1701 : 
; 1702 : 	if ((gametype == GT_COOP || gametype == GT_RACE))

  00ad9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00ae0	85 c0		 test	 eax, eax
  00ae2	74 10		 je	 SHORT $LN67@P_DeathMes
  00ae4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00aeb	83 f8 02	 cmp	 eax, 2
  00aee	0f 85 9c 00 00
	00		 jne	 $LN69@P_DeathMes
$LN67@P_DeathMes:

; 1703 : 	{
; 1704 : 		if (target->player->lives - 1 <= 0)

  00af4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00af7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00afd	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  00b03	83 ea 01	 sub	 edx, 1
  00b06	85 d2		 test	 edx, edx
  00b08	7f 3c		 jg	 SHORT $LN68@P_DeathMes

; 1705 : 			CONS_Printf(text[PLAYERGAMEOVER],player_names[target->player-players]);

  00b0a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00b0d	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00b13	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00b18	99		 cdq
  00b19	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00b1e	f7 f9		 idiv	 ecx
  00b20	6b d0 16	 imul	 edx, eax, 22
  00b23	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00b29	52		 push	 edx
  00b2a	b8 04 00 00 00	 mov	 eax, 4
  00b2f	69 c8 2c 01 00
	00		 imul	 ecx, eax, 300
  00b35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00b3b	52		 push	 edx
  00b3c	e8 00 00 00 00	 call	 _CONS_Printf
  00b41	83 c4 08	 add	 esp, 8
  00b44	eb 4a		 jmp	 SHORT $LN69@P_DeathMes
$LN68@P_DeathMes:

; 1706 : 		else
; 1707 : 			CONS_Printf(text[PLAYERLIVESREMAINING], player_names[target->player-players], target->player->lives);

  00b46	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00b49	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00b4f	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  00b55	52		 push	 edx
  00b56	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00b59	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00b5f	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00b64	99		 cdq
  00b65	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00b6a	f7 f9		 idiv	 ecx
  00b6c	6b d0 16	 imul	 edx, eax, 22
  00b6f	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00b75	52		 push	 edx
  00b76	b8 04 00 00 00	 mov	 eax, 4
  00b7b	69 c8 2d 01 00
	00		 imul	 ecx, eax, 301
  00b81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00b87	52		 push	 edx
  00b88	e8 00 00 00 00	 call	 _CONS_Printf
  00b8d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN69@P_DeathMes:

; 1708 : 	}
; 1709 : }

  00b90	5f		 pop	 edi
  00b91	5e		 pop	 esi
  00b92	5b		 pop	 ebx
  00b93	8b e5		 mov	 esp, ebp
  00b95	5d		 pop	 ebp
  00b96	c3		 ret	 0
  00b97	90		 npad	 1
$LN129@P_DeathMes:
  00b98	00 00 00 00	 DD	 $LN20@P_DeathMes
  00b9c	00 00 00 00	 DD	 $LN26@P_DeathMes
  00ba0	00 00 00 00	 DD	 $LN21@P_DeathMes
  00ba4	00 00 00 00	 DD	 $LN22@P_DeathMes
  00ba8	00 00 00 00	 DD	 $LN23@P_DeathMes
  00bac	00 00 00 00	 DD	 $LN24@P_DeathMes
  00bb0	00 00 00 00	 DD	 $LN25@P_DeathMes
  00bb4	00 00 00 00	 DD	 $LN29@P_DeathMes
$LN128@P_DeathMes:
  00bb8	00		 DB	 0
  00bb9	07		 DB	 7
  00bba	07		 DB	 7
  00bbb	07		 DB	 7
  00bbc	07		 DB	 7
  00bbd	07		 DB	 7
  00bbe	07		 DB	 7
  00bbf	07		 DB	 7
  00bc0	07		 DB	 7
  00bc1	07		 DB	 7
  00bc2	07		 DB	 7
  00bc3	07		 DB	 7
  00bc4	07		 DB	 7
  00bc5	07		 DB	 7
  00bc6	07		 DB	 7
  00bc7	07		 DB	 7
  00bc8	07		 DB	 7
  00bc9	07		 DB	 7
  00bca	07		 DB	 7
  00bcb	07		 DB	 7
  00bcc	07		 DB	 7
  00bcd	07		 DB	 7
  00bce	07		 DB	 7
  00bcf	07		 DB	 7
  00bd0	07		 DB	 7
  00bd1	07		 DB	 7
  00bd2	07		 DB	 7
  00bd3	07		 DB	 7
  00bd4	07		 DB	 7
  00bd5	07		 DB	 7
  00bd6	07		 DB	 7
  00bd7	07		 DB	 7
  00bd8	07		 DB	 7
  00bd9	07		 DB	 7
  00bda	07		 DB	 7
  00bdb	07		 DB	 7
  00bdc	07		 DB	 7
  00bdd	07		 DB	 7
  00bde	07		 DB	 7
  00bdf	07		 DB	 7
  00be0	07		 DB	 7
  00be1	07		 DB	 7
  00be2	07		 DB	 7
  00be3	07		 DB	 7
  00be4	07		 DB	 7
  00be5	07		 DB	 7
  00be6	07		 DB	 7
  00be7	07		 DB	 7
  00be8	07		 DB	 7
  00be9	07		 DB	 7
  00bea	07		 DB	 7
  00beb	07		 DB	 7
  00bec	07		 DB	 7
  00bed	07		 DB	 7
  00bee	07		 DB	 7
  00bef	07		 DB	 7
  00bf0	07		 DB	 7
  00bf1	07		 DB	 7
  00bf2	07		 DB	 7
  00bf3	07		 DB	 7
  00bf4	07		 DB	 7
  00bf5	07		 DB	 7
  00bf6	07		 DB	 7
  00bf7	07		 DB	 7
  00bf8	07		 DB	 7
  00bf9	07		 DB	 7
  00bfa	07		 DB	 7
  00bfb	07		 DB	 7
  00bfc	07		 DB	 7
  00bfd	07		 DB	 7
  00bfe	07		 DB	 7
  00bff	07		 DB	 7
  00c00	07		 DB	 7
  00c01	07		 DB	 7
  00c02	07		 DB	 7
  00c03	07		 DB	 7
  00c04	07		 DB	 7
  00c05	07		 DB	 7
  00c06	07		 DB	 7
  00c07	07		 DB	 7
  00c08	07		 DB	 7
  00c09	07		 DB	 7
  00c0a	07		 DB	 7
  00c0b	07		 DB	 7
  00c0c	07		 DB	 7
  00c0d	07		 DB	 7
  00c0e	07		 DB	 7
  00c0f	07		 DB	 7
  00c10	07		 DB	 7
  00c11	07		 DB	 7
  00c12	07		 DB	 7
  00c13	07		 DB	 7
  00c14	07		 DB	 7
  00c15	07		 DB	 7
  00c16	07		 DB	 7
  00c17	07		 DB	 7
  00c18	07		 DB	 7
  00c19	07		 DB	 7
  00c1a	07		 DB	 7
  00c1b	07		 DB	 7
  00c1c	07		 DB	 7
  00c1d	07		 DB	 7
  00c1e	07		 DB	 7
  00c1f	07		 DB	 7
  00c20	07		 DB	 7
  00c21	07		 DB	 7
  00c22	07		 DB	 7
  00c23	07		 DB	 7
  00c24	07		 DB	 7
  00c25	07		 DB	 7
  00c26	07		 DB	 7
  00c27	07		 DB	 7
  00c28	07		 DB	 7
  00c29	07		 DB	 7
  00c2a	07		 DB	 7
  00c2b	07		 DB	 7
  00c2c	07		 DB	 7
  00c2d	07		 DB	 7
  00c2e	07		 DB	 7
  00c2f	07		 DB	 7
  00c30	07		 DB	 7
  00c31	07		 DB	 7
  00c32	07		 DB	 7
  00c33	07		 DB	 7
  00c34	07		 DB	 7
  00c35	07		 DB	 7
  00c36	07		 DB	 7
  00c37	07		 DB	 7
  00c38	07		 DB	 7
  00c39	07		 DB	 7
  00c3a	07		 DB	 7
  00c3b	07		 DB	 7
  00c3c	07		 DB	 7
  00c3d	07		 DB	 7
  00c3e	07		 DB	 7
  00c3f	07		 DB	 7
  00c40	01		 DB	 1
  00c41	07		 DB	 7
  00c42	07		 DB	 7
  00c43	07		 DB	 7
  00c44	07		 DB	 7
  00c45	07		 DB	 7
  00c46	07		 DB	 7
  00c47	07		 DB	 7
  00c48	07		 DB	 7
  00c49	07		 DB	 7
  00c4a	07		 DB	 7
  00c4b	07		 DB	 7
  00c4c	07		 DB	 7
  00c4d	02		 DB	 2
  00c4e	03		 DB	 3
  00c4f	04		 DB	 4
  00c50	05		 DB	 5
  00c51	06		 DB	 6
  00c52	66 90		 npad	 2
$LN130@P_DeathMes:
  00c54	00 00 00 00	 DD	 $LN37@P_DeathMes
  00c58	00 00 00 00	 DD	 $LN39@P_DeathMes
  00c5c	00 00 00 00	 DD	 $LN51@P_DeathMes
  00c60	00 00 00 00	 DD	 $LN51@P_DeathMes
  00c64	00 00 00 00	 DD	 $LN51@P_DeathMes
  00c68	00 00 00 00	 DD	 $LN43@P_DeathMes
  00c6c	00 00 00 00	 DD	 $LN41@P_DeathMes
  00c70	00 00 00 00	 DD	 $LN45@P_DeathMes
_P_DeathMessages ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_DoNightsScore
_TEXT	SEGMENT
_dummymo$ = -4						; size = 4
_player$ = 8						; size = 4
_P_DoNightsScore PROC					; COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 137  : 	mobj_t *dummymo;
; 138  : 
; 139  : 	player->linkcount++;

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	8b 88 b8 01 00
	00		 mov	 ecx, DWORD PTR [eax+440]
  00012	83 c1 01	 add	 ecx, 1
  00015	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00018	89 8a b8 01 00
	00		 mov	 DWORD PTR [edx+440], ecx

; 140  : 	player->linktimer = 2*TICRATE;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00021	c7 80 bc 01 00
	00 46 00 00 00	 mov	 DWORD PTR [eax+444], 70	; 00000046H

; 141  : 
; 142  : 	dummymo = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z+player->mo->height/2, MT_NIGHTSCORE);

  0002b	68 fb 00 00 00	 push	 251			; 000000fbH
  00030	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00038	8b 02		 mov	 eax, DWORD PTR [edx]
  0003a	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0003d	99		 cdq
  0003e	2b c2		 sub	 eax, edx
  00040	d1 f8		 sar	 eax, 1
  00042	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0004e	50		 push	 eax
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _P_SpawnMobj
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	89 45 fc	 mov	 DWORD PTR _dummymo$[ebp], eax

; 143  : 
; 144  : 	if (player->linkcount < 10)

  00063	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00066	83 b8 b8 01 00
	00 0a		 cmp	 DWORD PTR [eax+440], 10	; 0000000aH
  0006d	0f 8d 8c 00 00
	00		 jge	 $LN2@P_DoNights

; 145  : 	{
; 146  : 		if (player->bonustime)

  00073	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00076	0f b6 88 cd 01
	00 00		 movzx	 ecx, BYTE PTR [eax+461]
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 3f		 je	 SHORT $LN4@P_DoNights

; 147  : 		{
; 148  : 			P_AddPlayerScore(player, player->linkcount*20);

  00081	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00084	6b 88 b8 01 00
	00 14		 imul	 ecx, DWORD PTR [eax+440], 20
  0008b	51		 push	 ecx
  0008c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _P_AddPlayerScore
  00095	83 c4 08	 add	 esp, 8

; 149  : 			P_SetMobjState(dummymo, dummymo->info->xdeathstate+player->linkcount-1);

  00098	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  0009b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000a1	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000a4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a7	8b 88 b8 01 00
	00		 mov	 ecx, DWORD PTR [eax+440]
  000ad	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  000b1	52		 push	 edx
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _P_SetMobjState
  000bb	83 c4 08	 add	 esp, 8

; 150  : 		}

  000be	eb 3d		 jmp	 SHORT $LN5@P_DoNights
$LN4@P_DoNights:

; 151  : 		else
; 152  : 		{
; 153  : 			P_AddPlayerScore(player, player->linkcount*10);

  000c0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000c3	6b 88 b8 01 00
	00 0a		 imul	 ecx, DWORD PTR [eax+440], 10
  000ca	51		 push	 ecx
  000cb	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _P_AddPlayerScore
  000d4	83 c4 08	 add	 esp, 8

; 154  : 			P_SetMobjState(dummymo, dummymo->info->spawnstate+player->linkcount-1);

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  000da	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000e0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e6	8b 88 b8 01 00
	00		 mov	 ecx, DWORD PTR [eax+440]
  000ec	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  000f0	52		 push	 edx
  000f1	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _P_SetMobjState
  000fa	83 c4 08	 add	 esp, 8
$LN5@P_DoNights:

; 155  : 		}
; 156  : 	}

  000fd	eb 67		 jmp	 SHORT $LN7@P_DoNights
$LN2@P_DoNights:

; 157  : 	else
; 158  : 	{
; 159  : 		if (player->bonustime)

  000ff	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00102	0f b6 88 cd 01
	00 00		 movzx	 ecx, BYTE PTR [eax+461]
  00109	85 c9		 test	 ecx, ecx
  0010b	74 2f		 je	 SHORT $LN6@P_DoNights

; 160  : 		{
; 161  : 			P_AddPlayerScore(player, 200);

  0010d	68 c8 00 00 00	 push	 200			; 000000c8H
  00112	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _P_AddPlayerScore
  0011b	83 c4 08	 add	 esp, 8

; 162  : 			P_SetMobjState(dummymo, dummymo->info->xdeathstate+9);

  0011e	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  00121	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00127	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0012a	83 c2 09	 add	 edx, 9
  0012d	52		 push	 edx
  0012e	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _P_SetMobjState
  00137	83 c4 08	 add	 esp, 8

; 163  : 		}

  0013a	eb 2a		 jmp	 SHORT $LN7@P_DoNights
$LN6@P_DoNights:

; 164  : 		else
; 165  : 		{
; 166  : 			P_AddPlayerScore(player, 100);

  0013c	6a 64		 push	 100			; 00000064H
  0013e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _P_AddPlayerScore
  00147	83 c4 08	 add	 esp, 8

; 167  : 			P_SetMobjState(dummymo, dummymo->info->spawnstate+9);

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  0014d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00153	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00156	83 c2 09	 add	 edx, 9
  00159	52		 push	 edx
  0015a	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 _P_SetMobjState
  00163	83 c4 08	 add	 esp, 8
$LN7@P_DoNights:

; 168  : 		}
; 169  : 	}
; 170  : 	player->drillmeter += TICRATE;

  00166	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00169	8b 88 c8 01 00
	00		 mov	 ecx, DWORD PTR [eax+456]
  0016f	83 c1 23	 add	 ecx, 35			; 00000023H
  00172	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00175	89 8a c8 01 00
	00		 mov	 DWORD PTR [edx+456], ecx

; 171  : 	dummymo->momz = FRACUNIT;

  0017b	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  0017e	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 172  : 	dummymo->fuse = 3*TICRATE;

  00185	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  00188	c7 80 bc 00 00
	00 69 00 00 00	 mov	 DWORD PTR [eax+188], 105 ; 00000069H

; 173  : 
; 174  : 	P_InstaThrust(dummymo, R_PointToAngle2(dummymo->x, dummymo->y, camera.x, camera.y), 3*FRACUNIT);

  00192	68 00 00 03 00	 push	 196608			; 00030000H
  00197	a1 14 00 00 00	 mov	 eax, DWORD PTR _camera+20
  0019c	50		 push	 eax
  0019d	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _camera+16
  001a3	51		 push	 ecx
  001a4	8b 55 fc	 mov	 edx, DWORD PTR _dummymo$[ebp]
  001a7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001aa	50		 push	 eax
  001ab	8b 4d fc	 mov	 ecx, DWORD PTR _dummymo$[ebp]
  001ae	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001b1	52		 push	 edx
  001b2	e8 00 00 00 00	 call	 _R_PointToAngle2
  001b7	83 c4 10	 add	 esp, 16			; 00000010H
  001ba	50		 push	 eax
  001bb	8b 45 fc	 mov	 eax, DWORD PTR _dummymo$[ebp]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 _P_InstaThrust
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : }

  001c7	5f		 pop	 edi
  001c8	5e		 pop	 esi
  001c9	5b		 pop	 ebx
  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c3		 ret	 0
_P_DoNightsScore ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_CanPickupItem
_TEXT	SEGMENT
_player$ = 8						; size = 4
_weapon$ = 12						; size = 4
_P_CanPickupItem PROC					; COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 121  : 	(void)weapon; //unused
; 122  : 
; 123  : 	if (player->powers[pw_flashing] > (flashingtics/4)*3 && player->powers[pw_flashing] <= flashingtics)

  00009	b9 04 00 00 00	 mov	 ecx, 4
  0000e	d1 e1		 shl	 ecx, 1
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _flashingtics
  00015	99		 cdq
  00016	83 e2 03	 and	 edx, 3
  00019	03 c2		 add	 eax, edx
  0001b	c1 f8 02	 sar	 eax, 2
  0001e	6b d0 03	 imul	 edx, eax, 3
  00021	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00024	39 54 08 38	 cmp	 DWORD PTR [eax+ecx+56], edx
  00028	7e 1a		 jle	 SHORT $LN2@P_CanPicku
  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	d1 e0		 shl	 eax, 1
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00034	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00038	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _flashingtics
  0003e	7f 04		 jg	 SHORT $LN2@P_CanPicku

; 124  : 		return false;

  00040	33 c0		 xor	 eax, eax
  00042	eb 05		 jmp	 SHORT $LN1@P_CanPicku
$LN2@P_CanPicku:

; 125  : 
; 126  : 	return true;

  00044	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_CanPicku:

; 127  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_P_CanPickupItem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_ClearStarPost
_TEXT	SEGMENT
_mo2$ = -8						; size = 4
_th$ = -4						; size = 4
_player$ = 8						; size = 4
_postnum$ = 12						; size = 4
_P_ClearStarPost PROC					; COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 94   : 	thinker_t *th;
; 95   : 	mobj_t *mo2;
; 96   : 
; 97   : 	// scan the thinkers
; 98   : 	for (th = thinkercap.next; th != &thinkercap; th = th->next)

  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  0000e	89 45 fc	 mov	 DWORD PTR _th$[ebp], eax
  00011	eb 09		 jmp	 SHORT $LN4@P_ClearSta
$LN2@P_ClearSta:
  00013	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	89 4d fc	 mov	 DWORD PTR _th$[ebp], ecx
$LN4@P_ClearSta:
  0001c	81 7d fc 00 00
	00 00		 cmp	 DWORD PTR _th$[ebp], OFFSET _thinkercap
  00023	74 6b		 je	 SHORT $LN3@P_ClearSta

; 99   : 	{
; 100  : 		if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  00025	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00028	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  0002f	74 02		 je	 SHORT $LN5@P_ClearSta

; 101  : 			continue;

  00031	eb e0		 jmp	 SHORT $LN2@P_ClearSta
$LN5@P_ClearSta:

; 102  : 
; 103  : 		mo2 = (mobj_t *)th;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _th$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _mo2$[ebp], eax

; 104  : 
; 105  : 		if (mo2->type == MT_STARPOST && mo2->health <= postnum)

  00039	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0003c	83 78 7c 4a	 cmp	 DWORD PTR [eax+124], 74	; 0000004aH
  00040	75 4c		 jne	 SHORT $LN6@P_ClearSta
  00042	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00045	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0004b	3b 4d 0c	 cmp	 ecx, DWORD PTR _postnum$[ebp]
  0004e	7f 3e		 jg	 SHORT $LN6@P_ClearSta

; 106  : 		{
; 107  : 			P_SetMobjState(mo2, mo2->info->seestate);

  00050	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00053	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00059	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005c	52		 push	 edx
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _P_SetMobjState
  00066	83 c4 08	 add	 esp, 8

; 108  : 			player->starpostbit |= (1 << (mo2->health - 1));

  00069	8b 45 f8	 mov	 eax, DWORD PTR _mo2$[ebp]
  0006c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00072	83 e9 01	 sub	 ecx, 1
  00075	ba 01 00 00 00	 mov	 edx, 1
  0007a	d3 e2		 shl	 edx, cl
  0007c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0007f	0b 90 98 01 00
	00		 or	 edx, DWORD PTR [eax+408]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00088	89 91 98 01 00
	00		 mov	 DWORD PTR [ecx+408], edx
$LN6@P_ClearSta:

; 109  : 		}
; 110  : 	}

  0008e	eb 83		 jmp	 SHORT $LN2@P_ClearSta
$LN3@P_ClearSta:

; 111  : 	return;
; 112  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_P_ClearStarPost ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayTauntSound
_TEXT	SEGMENT
_prandom$ = -4						; size = 4
_source$ = 8						; size = 4
_P_PlayTauntSound PROC					; COMDAT

; 2326 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2327 : 	INT32 prandom;
; 2328 : 
; 2329 : 	prandom = P_Random();

  00009	e8 00 00 00 00	 call	 _P_Random
  0000e	0f b6 c0	 movzx	 eax, al
  00011	89 45 fc	 mov	 DWORD PTR _prandom$[ebp], eax

; 2330 : 
; 2331 : 	if (prandom <= 63)

  00014	83 7d fc 3f	 cmp	 DWORD PTR _prandom$[ebp], 63 ; 0000003fH
  00018	7f 13		 jg	 SHORT $LN2@P_PlayTaun

; 2332 : 		S_StartSound(source, sfx_taunt1);

  0001a	68 df 00 00 00	 push	 223			; 000000dfH
  0001f	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _S_StartSound
  00028	83 c4 08	 add	 esp, 8
  0002b	eb 46		 jmp	 SHORT $LN7@P_PlayTaun
$LN2@P_PlayTaun:

; 2333 : 	else if (prandom <= 127)

  0002d	83 7d fc 7f	 cmp	 DWORD PTR _prandom$[ebp], 127 ; 0000007fH
  00031	7f 13		 jg	 SHORT $LN4@P_PlayTaun

; 2334 : 		S_StartSound(source, sfx_taunt2);

  00033	68 e0 00 00 00	 push	 224			; 000000e0H
  00038	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _S_StartSound
  00041	83 c4 08	 add	 esp, 8
  00044	eb 2d		 jmp	 SHORT $LN7@P_PlayTaun
$LN4@P_PlayTaun:

; 2335 : 	else if (prandom <= 191)

  00046	81 7d fc bf 00
	00 00		 cmp	 DWORD PTR _prandom$[ebp], 191 ; 000000bfH
  0004d	7f 13		 jg	 SHORT $LN6@P_PlayTaun

; 2336 : 		S_StartSound(source, sfx_taunt3);

  0004f	68 e1 00 00 00	 push	 225			; 000000e1H
  00054	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _S_StartSound
  0005d	83 c4 08	 add	 esp, 8
  00060	eb 11		 jmp	 SHORT $LN7@P_PlayTaun
$LN6@P_PlayTaun:

; 2337 : 	else
; 2338 : 		S_StartSound(source, sfx_taunt4);

  00062	68 e2 00 00 00	 push	 226			; 000000e2H
  00067	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _S_StartSound
  00070	83 c4 08	 add	 esp, 8
$LN7@P_PlayTaun:

; 2339 : 
; 2340 : 	// In the future... taunt animation?
; 2341 : }

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_P_PlayTauntSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayVictorySound
_TEXT	SEGMENT
_prandom$ = -4						; size = 4
_source$ = 8						; size = 4
_P_PlayVictorySound PROC				; COMDAT

; 2301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2302 : 	INT32 prandom;
; 2303 : 
; 2304 : 	prandom = P_Random();

  00009	e8 00 00 00 00	 call	 _P_Random
  0000e	0f b6 c0	 movzx	 eax, al
  00011	89 45 fc	 mov	 DWORD PTR _prandom$[ebp], eax

; 2305 : 
; 2306 : 	if (prandom <= 63)

  00014	83 7d fc 3f	 cmp	 DWORD PTR _prandom$[ebp], 63 ; 0000003fH
  00018	7f 13		 jg	 SHORT $LN2@P_PlayVict

; 2307 : 		S_StartSound(source, sfx_victr1);

  0001a	68 ea 00 00 00	 push	 234			; 000000eaH
  0001f	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _S_StartSound
  00028	83 c4 08	 add	 esp, 8
  0002b	eb 46		 jmp	 SHORT $LN7@P_PlayVict
$LN2@P_PlayVict:

; 2308 : 	else if (prandom <= 127)

  0002d	83 7d fc 7f	 cmp	 DWORD PTR _prandom$[ebp], 127 ; 0000007fH
  00031	7f 13		 jg	 SHORT $LN4@P_PlayVict

; 2309 : 		S_StartSound(source, sfx_victr2);

  00033	68 eb 00 00 00	 push	 235			; 000000ebH
  00038	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _S_StartSound
  00041	83 c4 08	 add	 esp, 8
  00044	eb 2d		 jmp	 SHORT $LN7@P_PlayVict
$LN4@P_PlayVict:

; 2310 : 	else if (prandom <= 191)

  00046	81 7d fc bf 00
	00 00		 cmp	 DWORD PTR _prandom$[ebp], 191 ; 000000bfH
  0004d	7f 13		 jg	 SHORT $LN6@P_PlayVict

; 2311 : 		S_StartSound(source, sfx_victr3);

  0004f	68 ec 00 00 00	 push	 236			; 000000ecH
  00054	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _S_StartSound
  0005d	83 c4 08	 add	 esp, 8
  00060	eb 11		 jmp	 SHORT $LN7@P_PlayVict
$LN6@P_PlayVict:

; 2312 : 	else
; 2313 : 		S_StartSound(source, sfx_victr4);

  00062	68 ed 00 00 00	 push	 237			; 000000edH
  00067	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _S_StartSound
  00070	83 c4 08	 add	 esp, 8
$LN7@P_PlayVict:

; 2314 : }

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_P_PlayVictorySound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayDeathSound
_TEXT	SEGMENT
_prandom$ = -4						; size = 4
_source$ = 8						; size = 4
_P_PlayDeathSound PROC					; COMDAT

; 2276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2277 : 	INT32 prandom;
; 2278 : 
; 2279 : 	prandom = P_Random();

  00009	e8 00 00 00 00	 call	 _P_Random
  0000e	0f b6 c0	 movzx	 eax, al
  00011	89 45 fc	 mov	 DWORD PTR _prandom$[ebp], eax

; 2280 : 
; 2281 : 	if (prandom <= 63)

  00014	83 7d fc 3f	 cmp	 DWORD PTR _prandom$[ebp], 63 ; 0000003fH
  00018	7f 10		 jg	 SHORT $LN2@P_PlayDeat

; 2282 : 		S_StartSound(source, sfx_altdi1);

  0001a	6a 02		 push	 2
  0001c	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _S_StartSound
  00025	83 c4 08	 add	 esp, 8
  00028	eb 3d		 jmp	 SHORT $LN7@P_PlayDeat
$LN2@P_PlayDeat:

; 2283 : 	else if (prandom <= 127)

  0002a	83 7d fc 7f	 cmp	 DWORD PTR _prandom$[ebp], 127 ; 0000007fH
  0002e	7f 10		 jg	 SHORT $LN4@P_PlayDeat

; 2284 : 		S_StartSound(source, sfx_altdi2);

  00030	6a 03		 push	 3
  00032	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _S_StartSound
  0003b	83 c4 08	 add	 esp, 8
  0003e	eb 27		 jmp	 SHORT $LN7@P_PlayDeat
$LN4@P_PlayDeat:

; 2285 : 	else if (prandom <= 191)

  00040	81 7d fc bf 00
	00 00		 cmp	 DWORD PTR _prandom$[ebp], 191 ; 000000bfH
  00047	7f 10		 jg	 SHORT $LN6@P_PlayDeat

; 2286 : 		S_StartSound(source, sfx_altdi3);

  00049	6a 04		 push	 4
  0004b	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _S_StartSound
  00054	83 c4 08	 add	 esp, 8
  00057	eb 0e		 jmp	 SHORT $LN7@P_PlayDeat
$LN6@P_PlayDeat:

; 2287 : 	else
; 2288 : 		S_StartSound(source, sfx_altdi4);

  00059	6a 05		 push	 5
  0005b	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _S_StartSound
  00064	83 c4 08	 add	 esp, 8
$LN7@P_PlayDeat:

; 2289 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_P_PlayDeathSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayRinglossSound
_TEXT	SEGMENT
_prandom$ = -4						; size = 4
_source$ = 8						; size = 4
_P_PlayRinglossSound PROC				; COMDAT

; 2251 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2252 : 	INT32 prandom;
; 2253 : 
; 2254 : 	prandom = P_Random();

  00009	e8 00 00 00 00	 call	 _P_Random
  0000e	0f b6 c0	 movzx	 eax, al
  00011	89 45 fc	 mov	 DWORD PTR _prandom$[ebp], eax

; 2255 : 
; 2256 : 	if (prandom <= 63)

  00014	83 7d fc 3f	 cmp	 DWORD PTR _prandom$[ebp], 63 ; 0000003fH
  00018	7f 10		 jg	 SHORT $LN2@P_PlayRing

; 2257 : 		S_StartSound(source, sfx_altow1);

  0001a	6a 06		 push	 6
  0001c	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _S_StartSound
  00025	83 c4 08	 add	 esp, 8
  00028	eb 3d		 jmp	 SHORT $LN7@P_PlayRing
$LN2@P_PlayRing:

; 2258 : 	else if (prandom <= 127)

  0002a	83 7d fc 7f	 cmp	 DWORD PTR _prandom$[ebp], 127 ; 0000007fH
  0002e	7f 10		 jg	 SHORT $LN4@P_PlayRing

; 2259 : 		S_StartSound(source, sfx_altow2);

  00030	6a 07		 push	 7
  00032	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _S_StartSound
  0003b	83 c4 08	 add	 esp, 8
  0003e	eb 27		 jmp	 SHORT $LN7@P_PlayRing
$LN4@P_PlayRing:

; 2260 : 	else if (prandom <= 191)

  00040	81 7d fc bf 00
	00 00		 cmp	 DWORD PTR _prandom$[ebp], 191 ; 000000bfH
  00047	7f 10		 jg	 SHORT $LN6@P_PlayRing

; 2261 : 		S_StartSound(source, sfx_altow3);

  00049	6a 08		 push	 8
  0004b	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _S_StartSound
  00054	83 c4 08	 add	 esp, 8
  00057	eb 0e		 jmp	 SHORT $LN7@P_PlayRing
$LN6@P_PlayRing:

; 2262 : 	else
; 2263 : 		S_StartSound(source, sfx_altow4);

  00059	6a 09		 push	 9
  0005b	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _S_StartSound
  00064	83 c4 08	 add	 esp, 8
$LN7@P_PlayRing:

; 2264 : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_P_PlayRinglossSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_CheckRacers
_TEXT	SEGMENT
_i$ = -4						; size = 4
_P_CheckRacers PROC					; COMDAT

; 1920 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1921 : 	INT32 i;
; 1922 : 
; 1923 : 	// Check if all the players in the race have finished. If so, end the level.
; 1924 : 	for (i = 0; i < MAXPLAYERS; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@P_CheckRac
$LN2@P_CheckRac:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_CheckRac:
  0001b	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0001f	7d 31		 jge	 SHORT $LN3@P_CheckRac

; 1925 : 	{
; 1926 : 		if (playeringame[i] && !players[i].exiting && players[i].lives > 0)

  00021	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00024	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0002c	74 22		 je	 SHORT $LN5@P_CheckRac
  0002e	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00035	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR _players[eax+304], 0
  0003c	75 12		 jne	 SHORT $LN5@P_CheckRac
  0003e	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00045	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR _players[eax+256], 0
  0004c	7e 02		 jle	 SHORT $LN5@P_CheckRac

; 1927 : 			break;

  0004e	eb 02		 jmp	 SHORT $LN3@P_CheckRac
$LN5@P_CheckRac:

; 1928 : 	}

  00050	eb c0		 jmp	 SHORT $LN2@P_CheckRac
$LN3@P_CheckRac:

; 1929 : 
; 1930 : 	if (i == MAXPLAYERS) // finished

  00052	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00056	75 1b		 jne	 SHORT $LN6@P_CheckRac

; 1931 : 	{
; 1932 : 		countdown = 0;

  00058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _countdown, 0

; 1933 : 		countdown2 = 0;

  00062	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _countdown2, 0

; 1934 : 		return true;

  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	eb 02		 jmp	 SHORT $LN1@P_CheckRac
$LN6@P_CheckRac:

; 1935 : 	}
; 1936 : 
; 1937 : 	return false;

  00073	33 c0		 xor	 eax, eax
$LN1@P_CheckRac:

; 1938 : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_P_CheckRacers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_CheckSurvivors
_TEXT	SEGMENT
_newtagger$1 = -152					; size = 4
_survivorarray$ = -148					; size = 128
_spectators$ = -20					; size = 4
_taggers$ = -16						; size = 4
_survivors$ = -12					; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_P_CheckSurvivors PROC					; COMDAT

; 1837 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1838 : 	INT32 i;
; 1839 : 	INT32 survivors = 0;

  00016	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _survivors$[ebp], 0

; 1840 : 	INT32 taggers = 0;

  0001d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _taggers$[ebp], 0

; 1841 : 	INT32 spectators = 0;

  00024	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _spectators$[ebp], 0

; 1842 : 	INT32 survivorarray[MAXPLAYERS];
; 1843 : 
; 1844 : 	if (!D_NumPlayers()) //no players in the game, no check performed.

  0002b	e8 00 00 00 00	 call	 _D_NumPlayers
  00030	85 c0		 test	 eax, eax
  00032	75 05		 jne	 SHORT $LN5@P_CheckSur

; 1845 : 		return;

  00034	e9 e8 01 00 00	 jmp	 $LN21@P_CheckSur
$LN5@P_CheckSur:

; 1846 : 
; 1847 : 	for (i=0; i < MAXPLAYERS; i++) //figure out counts of taggers, survivors and spectators.

  00039	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00040	eb 09		 jmp	 SHORT $LN4@P_CheckSur
$LN2@P_CheckSur:
  00042	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00045	83 c0 01	 add	 eax, 1
  00048	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_CheckSur:
  0004b	83 7d f8 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  0004f	7d 7a		 jge	 SHORT $LN3@P_CheckSur

; 1848 : 	{
; 1849 : 		if (playeringame[i])

  00051	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00054	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  0005c	74 68		 je	 SHORT $LN11@P_CheckSur

; 1850 : 		{
; 1851 : 			if (players[i].spectator)

  0005e	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00065	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR _players[eax+496]
  0006c	85 c9		 test	 ecx, ecx
  0006e	74 0b		 je	 SHORT $LN7@P_CheckSur

; 1852 : 				spectators++;

  00070	8b 45 ec	 mov	 eax, DWORD PTR _spectators$[ebp]
  00073	83 c0 01	 add	 eax, 1
  00076	89 45 ec	 mov	 DWORD PTR _spectators$[ebp], eax
  00079	eb 4b		 jmp	 SHORT $LN11@P_CheckSur
$LN7@P_CheckSur:

; 1853 : 			else if (players[i].pflags & PF_TAGIT)

  0007b	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00082	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00088	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  0008e	74 0b		 je	 SHORT $LN9@P_CheckSur

; 1854 : 				taggers++;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _taggers$[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	89 45 f0	 mov	 DWORD PTR _taggers$[ebp], eax
  00099	eb 2b		 jmp	 SHORT $LN11@P_CheckSur
$LN9@P_CheckSur:

; 1855 : 			else if (!(players[i].pflags & PF_TAGGED))

  0009b	69 45 f8 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000a2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  000a8	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  000ae	75 16		 jne	 SHORT $LN11@P_CheckSur

; 1856 : 			{
; 1857 : 				survivorarray[survivors] = i;

  000b0	8b 45 f4	 mov	 eax, DWORD PTR _survivors$[ebp]
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000b6	89 8c 85 6c ff
	ff ff		 mov	 DWORD PTR _survivorarray$[ebp+eax*4], ecx

; 1858 : 				survivors++;

  000bd	8b 45 f4	 mov	 eax, DWORD PTR _survivors$[ebp]
  000c0	83 c0 01	 add	 eax, 1
  000c3	89 45 f4	 mov	 DWORD PTR _survivors$[ebp], eax
$LN11@P_CheckSur:

; 1859 : 			}
; 1860 : 		}
; 1861 : 	}

  000c6	e9 77 ff ff ff	 jmp	 $LN2@P_CheckSur
$LN3@P_CheckSur:

; 1862 : 
; 1863 : 	if (!taggers) //If there are no taggers, pick a survivor at random to be it.

  000cb	83 7d f0 00	 cmp	 DWORD PTR _taggers$[ebp], 0
  000cf	0f 85 15 01 00
	00		 jne	 $LN12@P_CheckSur

; 1864 : 	{
; 1865 : 		// Exception for hide and seek. If a round has started and the IT player leaves, end the round.
; 1866 : 		if (cv_tagtype.value && (leveltime >= (hidetime * TICRATE)))

  000d5	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  000dc	74 38		 je	 SHORT $LN13@P_CheckSur
  000de	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  000e5	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  000eb	72 29		 jb	 SHORT $LN13@P_CheckSur

; 1867 : 		{
; 1868 : 			CONS_Printf("The IT player has left the game.\n");

  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FOHBJDHA@The?5IT?5player?5has?5left?5the?5game@
  000f2	e8 00 00 00 00	 call	 _CONS_Printf
  000f7	83 c4 04	 add	 esp, 4

; 1869 : 			if (server)

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00101	74 0e		 je	 SHORT $LN14@P_CheckSur

; 1870 : 				SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  00103	6a 00		 push	 0
  00105	6a 00		 push	 0
  00107	6a 07		 push	 7
  00109	e8 00 00 00 00	 call	 _SendNetXCmd
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@P_CheckSur:

; 1871 : 
; 1872 : 			return;

  00111	e9 0b 01 00 00	 jmp	 $LN21@P_CheckSur
$LN13@P_CheckSur:

; 1873 : 		}
; 1874 : 
; 1875 : 		if (survivors)

  00116	83 7d f4 00	 cmp	 DWORD PTR _survivors$[ebp], 0
  0011a	0f 84 97 00 00
	00		 je	 $LN15@P_CheckSur

; 1876 : 		{
; 1877 : 			INT32 newtagger = survivorarray[P_Random() % survivors];

  00120	e8 00 00 00 00	 call	 _P_Random
  00125	0f b6 c0	 movzx	 eax, al
  00128	99		 cdq
  00129	f7 7d f4	 idiv	 DWORD PTR _survivors$[ebp]
  0012c	8b 84 95 6c ff
	ff ff		 mov	 eax, DWORD PTR _survivorarray$[ebp+edx*4]
  00133	89 85 68 ff ff
	ff		 mov	 DWORD PTR _newtagger$1[ebp], eax

; 1878 : 
; 1879 : 			CONS_Printf("%s is it!\n", player_names[newtagger]); // Tell everyone who is it!

  00139	6b 85 68 ff ff
	ff 16		 imul	 eax, DWORD PTR _newtagger$1[ebp], 22
  00140	05 00 00 00 00	 add	 eax, OFFSET _player_names
  00145	50		 push	 eax
  00146	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@
  0014b	e8 00 00 00 00	 call	 _CONS_Printf
  00150	83 c4 08	 add	 esp, 8

; 1880 : 			players[newtagger].pflags |= PF_TAGIT;

  00153	69 85 68 ff ff
	ff fc 01 00 00	 imul	 eax, DWORD PTR _newtagger$1[ebp], 508
  0015d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  00163	81 c9 00 00 00
	10		 or	 ecx, 268435456		; 10000000H
  00169	69 95 68 ff ff
	ff fc 01 00 00	 imul	 edx, DWORD PTR _newtagger$1[ebp], 508
  00173	89 8a ac 00 00
	00		 mov	 DWORD PTR _players[edx+172], ecx

; 1881 : 
; 1882 : 			survivors--; //Get rid of the guy we just made IT.

  00179	8b 45 f4	 mov	 eax, DWORD PTR _survivors$[ebp]
  0017c	83 e8 01	 sub	 eax, 1
  0017f	89 45 f4	 mov	 DWORD PTR _survivors$[ebp], eax

; 1883 : 
; 1884 : 			//Yeah, we have an eligible tagger, but we may not have anybody for him to tag!
; 1885 : 			//If there is only one guy waiting on the game to fill or spectators to enter game, don't bother.
; 1886 : 			if (!survivors && (D_NumPlayers() - spectators) > 1)

  00182	75 31		 jne	 SHORT $LN17@P_CheckSur
  00184	e8 00 00 00 00	 call	 _D_NumPlayers
  00189	2b 45 ec	 sub	 eax, DWORD PTR _spectators$[ebp]
  0018c	83 f8 01	 cmp	 eax, 1
  0018f	7e 24		 jle	 SHORT $LN17@P_CheckSur

; 1887 : 			{
; 1888 : 				CONS_Printf("All players have been tagged!\n");

  00191	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NLDNGKCA@All?5players?5have?5been?5tagged?$CB?6@
  00196	e8 00 00 00 00	 call	 _CONS_Printf
  0019b	83 c4 04	 add	 esp, 4

; 1889 : 				if (server)

  0019e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  001a5	74 0e		 je	 SHORT $LN17@P_CheckSur

; 1890 : 					SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	6a 07		 push	 7
  001ad	e8 00 00 00 00	 call	 _SendNetXCmd
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@P_CheckSur:

; 1891 : 			}
; 1892 : 
; 1893 : 			return;

  001b5	eb 6a		 jmp	 SHORT $LN21@P_CheckSur
$LN15@P_CheckSur:

; 1894 : 		}
; 1895 : 
; 1896 : 		//If we reach this point, no player can replace the one that was IT.
; 1897 : 		//Unless it is one player waiting on a game, end the round.
; 1898 : 		if ((D_NumPlayers() - spectators) > 1)

  001b7	e8 00 00 00 00	 call	 _D_NumPlayers
  001bc	2b 45 ec	 sub	 eax, DWORD PTR _spectators$[ebp]
  001bf	83 f8 01	 cmp	 eax, 1
  001c2	7e 24		 jle	 SHORT $LN19@P_CheckSur

; 1899 : 		{
; 1900 : 			CONS_Printf("There are no players able to become IT.\n");

  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BGBGIPOA@There?5are?5no?5players?5able?5to?5be@
  001c9	e8 00 00 00 00	 call	 _CONS_Printf
  001ce	83 c4 04	 add	 esp, 4

; 1901 : 			if (server)

  001d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  001d8	74 0e		 je	 SHORT $LN19@P_CheckSur

; 1902 : 				SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  001da	6a 00		 push	 0
  001dc	6a 00		 push	 0
  001de	6a 07		 push	 7
  001e0	e8 00 00 00 00	 call	 _SendNetXCmd
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@P_CheckSur:

; 1903 : 		}
; 1904 : 
; 1905 : 		return;

  001e8	eb 37		 jmp	 SHORT $LN21@P_CheckSur
$LN12@P_CheckSur:

; 1906 : 	}
; 1907 : 
; 1908 : 	//If there are taggers, but no survivors, end the round.
; 1909 : 	//Except when the tagger is by himself and the rest of the game are spectators.
; 1910 : 	if (!survivors && (D_NumPlayers() - spectators) > 1)

  001ea	83 7d f4 00	 cmp	 DWORD PTR _survivors$[ebp], 0
  001ee	75 31		 jne	 SHORT $LN21@P_CheckSur
  001f0	e8 00 00 00 00	 call	 _D_NumPlayers
  001f5	2b 45 ec	 sub	 eax, DWORD PTR _spectators$[ebp]
  001f8	83 f8 01	 cmp	 eax, 1
  001fb	7e 24		 jle	 SHORT $LN21@P_CheckSur

; 1911 : 	{
; 1912 : 		CONS_Printf("All players have been tagged!\n");

  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NLDNGKCA@All?5players?5have?5been?5tagged?$CB?6@
  00202	e8 00 00 00 00	 call	 _CONS_Printf
  00207	83 c4 04	 add	 esp, 4

; 1913 : 		if (server)

  0020a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00211	74 0e		 je	 SHORT $LN21@P_CheckSur

; 1914 : 			SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  00213	6a 00		 push	 0
  00215	6a 00		 push	 0
  00217	6a 07		 push	 7
  00219	e8 00 00 00 00	 call	 _SendNetXCmd
  0021e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@P_CheckSur:

; 1915 : 	}
; 1916 : }

  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00227	33 cd		 xor	 ecx, ebp
  00229	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c3		 ret	 0
_P_CheckSurvivors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_CheckPointLimit
_TEXT	SEGMENT
_i$ = -4						; size = 4
_P_CheckPointLimit PROC					; COMDAT

; 1797 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1798 : 	INT32 i;
; 1799 : 
; 1800 : 	if (!cv_pointlimit.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_pointlimit+20, 0
  00010	75 05		 jne	 SHORT $LN5@P_CheckPoi

; 1801 : 		return;

  00012	e9 c2 00 00 00	 jmp	 $LN3@P_CheckPoi
$LN5@P_CheckPoi:

; 1802 : 
; 1803 : 	if (!(multiplayer || netgame))

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0001e	75 0e		 jne	 SHORT $LN6@P_CheckPoi
  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  00027	75 05		 jne	 SHORT $LN6@P_CheckPoi

; 1804 : 		return;

  00029	e9 ab 00 00 00	 jmp	 $LN3@P_CheckPoi
$LN6@P_CheckPoi:

; 1805 : 
; 1806 : 	// pointlimit is nonzero, check if it's been reached by this player
; 1807 : 	if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  0002e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00035	83 f8 04	 cmp	 eax, 4
  00038	74 15		 je	 SHORT $LN9@P_CheckPoi
  0003a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00041	83 f8 01	 cmp	 eax, 1
  00044	75 3c		 jne	 SHORT $LN7@P_CheckPoi
  00046	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  0004d	74 33		 je	 SHORT $LN7@P_CheckPoi
$LN9@P_CheckPoi:

; 1808 : 	{
; 1809 : 		// Just check both teams
; 1810 : 		if ((UINT32)cv_pointlimit.value <= redscore || (UINT32)cv_pointlimit.value <= bluescore)

  0004f	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_pointlimit+20
  00054	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _redscore
  0005a	76 0d		 jbe	 SHORT $LN11@P_CheckPoi
  0005c	a1 14 00 00 00	 mov	 eax, DWORD PTR _cv_pointlimit+20
  00061	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _bluescore
  00067	77 17		 ja	 SHORT $LN12@P_CheckPoi
$LN11@P_CheckPoi:

; 1811 : 		{
; 1812 : 			if (server)

  00069	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  00070	74 0e		 je	 SHORT $LN12@P_CheckPoi

; 1813 : 				SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  00072	6a 00		 push	 0
  00074	6a 00		 push	 0
  00076	6a 07		 push	 7
  00078	e8 00 00 00 00	 call	 _SendNetXCmd
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@P_CheckPoi:

; 1814 : 		}
; 1815 : 	}

  00080	eb 57		 jmp	 SHORT $LN3@P_CheckPoi
$LN7@P_CheckPoi:

; 1816 : 	else
; 1817 : 	{
; 1818 : 		for (i = 0; i < MAXPLAYERS; i++)

  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN4@P_CheckPoi
$LN2@P_CheckPoi:
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_CheckPoi:
  00094	83 7d fc 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00098	7d 3f		 jge	 SHORT $LN3@P_CheckPoi

; 1819 : 		{
; 1820 : 			if (!playeringame[i])

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  000a5	75 02		 jne	 SHORT $LN13@P_CheckPoi

; 1821 : 				continue;

  000a7	eb e2		 jmp	 SHORT $LN2@P_CheckPoi
$LN13@P_CheckPoi:

; 1822 : 
; 1823 : 			if ((UINT32)cv_pointlimit.value <= players[i].score)

  000a9	69 45 fc fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  000b0	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _cv_pointlimit+20
  000b6	3b 88 bc 00 00
	00		 cmp	 ecx, DWORD PTR _players[eax+188]
  000bc	77 19		 ja	 SHORT $LN14@P_CheckPoi

; 1824 : 			{
; 1825 : 				if (server)

  000be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _server, 0
  000c5	74 0e		 je	 SHORT $LN15@P_CheckPoi

; 1826 : 					SendNetXCmd(XD_EXITLEVEL, NULL, 0);

  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	6a 07		 push	 7
  000cd	e8 00 00 00 00	 call	 _SendNetXCmd
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@P_CheckPoi:

; 1827 : 				return;

  000d5	eb 02		 jmp	 SHORT $LN3@P_CheckPoi
$LN14@P_CheckPoi:

; 1828 : 			}
; 1829 : 		}

  000d7	eb b2		 jmp	 SHORT $LN2@P_CheckPoi
$LN3@P_CheckPoi:

; 1830 : 	}
; 1831 : }

  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_P_CheckPointLimit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayerFlagBurst
_TEXT	SEGMENT
tv183 = -80						; size = 4
tv194 = -80						; size = 4
_type$ = -12						; size = 4
_fa$ = -8						; size = 4
_flag$ = -4						; size = 4
_player$ = 8						; size = 4
_toss$ = 12						; size = 4
_P_PlayerFlagBurst PROC					; COMDAT

; 3719 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3720 : 	mobj_t *flag;
; 3721 : 	angle_t fa;
; 3722 : 	mobjtype_t type;
; 3723 : 
; 3724 : 	if (!(player->gotflag & MF_REDFLAG || player->gotflag & MF_BLUEFLAG))

  00009	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0000c	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  00013	83 e1 01	 and	 ecx, 1
  00016	75 14		 jne	 SHORT $LN2@P_PlayerFl
  00018	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0001b	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  00022	83 e1 02	 and	 ecx, 2
  00025	75 05		 jne	 SHORT $LN2@P_PlayerFl

; 3725 : 		return;

  00027	e9 84 02 00 00	 jmp	 $LN1@P_PlayerFl
$LN2@P_PlayerFl:

; 3726 : 
; 3727 : 	if (player->gotflag & MF_REDFLAG)

  0002c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0002f	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  00036	83 e1 01	 and	 ecx, 1
  00039	74 09		 je	 SHORT $LN3@P_PlayerFl

; 3728 : 		type = MT_REDFLAG;

  0003b	c7 45 f4 34 00
	00 00		 mov	 DWORD PTR _type$[ebp], 52 ; 00000034H
  00042	eb 07		 jmp	 SHORT $LN4@P_PlayerFl
$LN3@P_PlayerFl:

; 3729 : 	else
; 3730 : 		type = MT_BLUEFLAG;

  00044	c7 45 f4 35 00
	00 00		 mov	 DWORD PTR _type$[ebp], 53 ; 00000035H
$LN4@P_PlayerFl:

; 3731 : 
; 3732 : 	flag = P_SpawnMobj(player->mo->x, player->mo->y, player->mo->z, type);

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _type$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	89 45 fc	 mov	 DWORD PTR _flag$[ebp], eax

; 3733 : 
; 3734 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  00075	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00080	83 e2 20	 and	 edx, 32			; 00000020H
  00083	74 1b		 je	 SHORT $LN5@P_PlayerFl

; 3735 : 		flag->z -= player->mo->height / 2;

  00085	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  0008d	99		 cdq
  0008e	2b c2		 sub	 eax, edx
  00090	d1 f8		 sar	 eax, 1
  00092	8b 55 fc	 mov	 edx, DWORD PTR _flag$[ebp]
  00095	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00098	2b c8		 sub	 ecx, eax
  0009a	8b 55 fc	 mov	 edx, DWORD PTR _flag$[ebp]
  0009d	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN5@P_PlayerFl:

; 3736 : 
; 3737 : 	if (toss)

  000a0	83 7d 0c 00	 cmp	 DWORD PTR _toss$[ebp], 0
  000a4	74 10		 je	 SHORT $LN6@P_PlayerFl

; 3738 : 		fa = player->mo->angle>>ANGLETOFINESHIFT;

  000a6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ae	c1 ea 13	 shr	 edx, 19			; 00000013H
  000b1	89 55 f8	 mov	 DWORD PTR _fa$[ebp], edx
  000b4	eb 1a		 jmp	 SHORT $LN7@P_PlayerFl
$LN6@P_PlayerFl:

; 3739 : 	else
; 3740 : 		fa = P_Random()*FINEANGLES/256;

  000b6	e8 00 00 00 00	 call	 _P_Random
  000bb	0f b6 c0	 movzx	 eax, al
  000be	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  000c1	99		 cdq
  000c2	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000c8	03 c2		 add	 eax, edx
  000ca	c1 f8 08	 sar	 eax, 8
  000cd	89 45 f8	 mov	 DWORD PTR _fa$[ebp], eax
$LN7@P_PlayerFl:

; 3741 : 
; 3742 : 	flag->momx = FixedMul(FINECOSINE(fa), (6 * FRACUNIT));

  000d0	68 00 00 06 00	 push	 393216			; 00060000H
  000d5	8b 45 f8	 mov	 eax, DWORD PTR _fa$[ebp]
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _finecosine
  000de	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 _FixedMul
  000e7	83 c4 08	 add	 esp, 8
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _flag$[ebp]
  000ed	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3743 : 
; 3744 : 	if (toss)

  000f0	83 7d 0c 00	 cmp	 DWORD PTR _toss$[ebp], 0
  000f4	74 10		 je	 SHORT $LN8@P_PlayerFl

; 3745 : 		fa = player->mo->angle>>ANGLETOFINESHIFT;

  000f6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fb	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000fe	c1 ea 13	 shr	 edx, 19			; 00000013H
  00101	89 55 f8	 mov	 DWORD PTR _fa$[ebp], edx
  00104	eb 1a		 jmp	 SHORT $LN9@P_PlayerFl
$LN8@P_PlayerFl:

; 3746 : 	else
; 3747 : 		fa = P_Random()*FINEANGLES/256;

  00106	e8 00 00 00 00	 call	 _P_Random
  0010b	0f b6 c0	 movzx	 eax, al
  0010e	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00111	99		 cdq
  00112	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00118	03 c2		 add	 eax, edx
  0011a	c1 f8 08	 sar	 eax, 8
  0011d	89 45 f8	 mov	 DWORD PTR _fa$[ebp], eax
$LN9@P_PlayerFl:

; 3748 : 
; 3749 : 	if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  00120	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00127	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0012c	75 31		 jne	 SHORT $LN10@P_PlayerFl
  0012e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00131	8b 08		 mov	 ecx, DWORD PTR [eax]
  00133	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00139	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  0013f	75 1e		 jne	 SHORT $LN10@P_PlayerFl

; 3750 : 		flag->momy = FixedMul(FINESINE(fa), (6 * FRACUNIT));

  00141	68 00 00 06 00	 push	 393216			; 00060000H
  00146	8b 45 f8	 mov	 eax, DWORD PTR _fa$[ebp]
  00149	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _finesine[eax*4]
  00150	51		 push	 ecx
  00151	e8 00 00 00 00	 call	 _FixedMul
  00156	83 c4 08	 add	 esp, 8
  00159	8b 55 fc	 mov	 edx, DWORD PTR _flag$[ebp]
  0015c	89 42 4c	 mov	 DWORD PTR [edx+76], eax
$LN10@P_PlayerFl:

; 3751 : 
; 3752 : 	flag->momz = 8*FRACUNIT;

  0015f	8b 45 fc	 mov	 eax, DWORD PTR _flag$[ebp]
  00162	c7 40 50 00 00
	08 00		 mov	 DWORD PTR [eax+80], 524288 ; 00080000H

; 3753 : 
; 3754 : 	if (player->mo->eflags & MFE_VERTICALFLIP)

  00169	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0016c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00174	83 e2 20	 and	 edx, 32			; 00000020H
  00177	74 0e		 je	 SHORT $LN11@P_PlayerFl

; 3755 : 		flag->momz = -flag->momz;

  00179	8b 45 fc	 mov	 eax, DWORD PTR _flag$[ebp]
  0017c	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0017f	f7 d9		 neg	 ecx
  00181	8b 55 fc	 mov	 edx, DWORD PTR _flag$[ebp]
  00184	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN11@P_PlayerFl:

; 3756 : 
; 3757 : 	if (type == MT_REDFLAG)

  00187	83 7d f4 34	 cmp	 DWORD PTR _type$[ebp], 52 ; 00000034H
  0018b	75 11		 jne	 SHORT $LN12@P_PlayerFl

; 3758 : 		flag->spawnpoint = rflagpoint;

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _flag$[ebp]
  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rflagpoint
  00196	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx
  0019c	eb 0f		 jmp	 SHORT $LN13@P_PlayerFl
$LN12@P_PlayerFl:

; 3759 : 	else
; 3760 : 		flag->spawnpoint = bflagpoint;

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _flag$[ebp]
  001a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bflagpoint
  001a7	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx
$LN13@P_PlayerFl:

; 3761 : 
; 3762 : 	flag->fuse = cv_flagtime.value * TICRATE;

  001ad	6b 05 14 00 00
	00 23		 imul	 eax, DWORD PTR _cv_flagtime+20, 35
  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _flag$[ebp]
  001b7	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 3763 : 	P_SetTarget(&flag->target, player->mo);

  001bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c2	51		 push	 ecx
  001c3	8b 55 fc	 mov	 edx, DWORD PTR _flag$[ebp]
  001c6	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  001cc	52		 push	 edx
  001cd	e8 00 00 00 00	 call	 _P_SetTarget
  001d2	83 c4 08	 add	 esp, 8

; 3764 : 
; 3765 : 	if (toss)

  001d5	83 7d 0c 00	 cmp	 DWORD PTR _toss$[ebp], 0
  001d9	74 50		 je	 SHORT $LN14@P_PlayerFl

; 3766 : 		CONS_Printf(text[PLAYERTOSSFLAG], player_names[player-players], (type == MT_REDFLAG ? "red" : "blue"));

  001db	83 7d f4 34	 cmp	 DWORD PTR _type$[ebp], 52 ; 00000034H
  001df	75 09		 jne	 SHORT $LN20@P_PlayerFl
  001e1	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv183[ebp], OFFSET ??_C@_03FAAAOPJM@red@
  001e8	eb 07		 jmp	 SHORT $LN21@P_PlayerFl
$LN20@P_PlayerFl:
  001ea	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv183[ebp], OFFSET ??_C@_04OBGPFBCN@blue@
$LN21@P_PlayerFl:
  001f1	8b 45 b0	 mov	 eax, DWORD PTR tv183[ebp]
  001f4	50		 push	 eax
  001f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f8	2d 00 00 00 00	 sub	 eax, OFFSET _players
  001fd	99		 cdq
  001fe	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00203	f7 f9		 idiv	 ecx
  00205	6b d0 16	 imul	 edx, eax, 22
  00208	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0020e	52		 push	 edx
  0020f	b8 04 00 00 00	 mov	 eax, 4
  00214	69 c8 08 01 00
	00		 imul	 ecx, eax, 264
  0021a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00220	52		 push	 edx
  00221	e8 00 00 00 00	 call	 _CONS_Printf
  00226	83 c4 0c	 add	 esp, 12			; 0000000cH
  00229	eb 4e		 jmp	 SHORT $LN15@P_PlayerFl
$LN14@P_PlayerFl:

; 3767 : 	else
; 3768 : 		CONS_Printf(text[PLAYERDROPFLAG], player_names[player-players], (type == MT_REDFLAG ? "red" : "blue"));

  0022b	83 7d f4 34	 cmp	 DWORD PTR _type$[ebp], 52 ; 00000034H
  0022f	75 09		 jne	 SHORT $LN22@P_PlayerFl
  00231	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv194[ebp], OFFSET ??_C@_03FAAAOPJM@red@
  00238	eb 07		 jmp	 SHORT $LN23@P_PlayerFl
$LN22@P_PlayerFl:
  0023a	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv194[ebp], OFFSET ??_C@_04OBGPFBCN@blue@
$LN23@P_PlayerFl:
  00241	8b 45 b0	 mov	 eax, DWORD PTR tv194[ebp]
  00244	50		 push	 eax
  00245	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00248	2d 00 00 00 00	 sub	 eax, OFFSET _players
  0024d	99		 cdq
  0024e	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00253	f7 f9		 idiv	 ecx
  00255	6b d0 16	 imul	 edx, eax, 22
  00258	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  0025e	52		 push	 edx
  0025f	b8 04 00 00 00	 mov	 eax, 4
  00264	69 c8 09 01 00
	00		 imul	 ecx, eax, 265
  0026a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  00270	52		 push	 edx
  00271	e8 00 00 00 00	 call	 _CONS_Printf
  00276	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@P_PlayerFl:

; 3769 : 
; 3770 : 	player->gotflag = 0;

  00279	33 c0		 xor	 eax, eax
  0027b	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0027e	66 89 81 64 01
	00 00		 mov	 WORD PTR [ecx+356], ax

; 3771 : 
; 3772 : 	// Pointers set for displaying time value and for consistency restoration.
; 3773 : 	if (type == MT_REDFLAG)

  00285	83 7d f4 34	 cmp	 DWORD PTR _type$[ebp], 52 ; 00000034H
  00289	75 0a		 jne	 SHORT $LN16@P_PlayerFl

; 3774 : 		redflag = flag;

  0028b	8b 45 fc	 mov	 eax, DWORD PTR _flag$[ebp]
  0028e	a3 00 00 00 00	 mov	 DWORD PTR _redflag, eax
  00293	eb 08		 jmp	 SHORT $LN17@P_PlayerFl
$LN16@P_PlayerFl:

; 3775 : 	else
; 3776 : 		blueflag = flag;

  00295	8b 45 fc	 mov	 eax, DWORD PTR _flag$[ebp]
  00298	a3 00 00 00 00	 mov	 DWORD PTR _blueflag, eax
$LN17@P_PlayerFl:

; 3777 : 
; 3778 : 	if (toss)

  0029d	83 7d 0c 00	 cmp	 DWORD PTR _toss$[ebp], 0
  002a1	74 0d		 je	 SHORT $LN18@P_PlayerFl

; 3779 : 		player->tossdelay = 2*TICRATE;

  002a3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002a6	c7 80 74 01 00
	00 46 00 00 00	 mov	 DWORD PTR [eax+372], 70	; 00000046H
$LN18@P_PlayerFl:
$LN1@P_PlayerFl:

; 3780 : 
; 3781 : 	return;
; 3782 : }

  002b0	5f		 pop	 edi
  002b1	5e		 pop	 esi
  002b2	5b		 pop	 ebx
  002b3	8b e5		 mov	 esp, ebp
  002b5	5d		 pop	 ebp
  002b6	c3		 ret	 0
_P_PlayerFlagBurst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_TouchSpecialThing
_TEXT	SEGMENT
tv1491 = -260						; size = 4
tv1456 = -260						; size = 4
tv416 = -260						; size = 4
_spawnheight$1 = -192					; size = 2
_spawnheight$2 = -188					; size = 2
_mo2$3 = -184						; size = 4
_th$4 = -180						; size = 4
_junk$5 = -176						; size = 76
_mo2$6 = -100						; size = 4
_th$7 = -96						; size = 4
_d$8 = -92						; size = 4
_gatherradius$9 = -88					; size = 4
_z$10 = -84						; size = 4
_y$11 = -80						; size = 4
_x$12 = -76						; size = 4
_count$13 = -72						; size = 4
_mo2$14 = -68						; size = 4
_th$15 = -64						; size = 4
_speed$16 = -60						; size = 4
_yspeed$17 = -56					; size = 4
_xspeed$18 = -52					; size = 4
_fa$19 = -48						; size = 4
_emblemcount$20 = -44					; size = 4
_angle$21 = -40						; size = 4
_touchspeed$22 = -36					; size = 4
_touchy$23 = -32					; size = 4
_touchx$24 = -28					; size = 4
_temp$ = -24						; size = 4
_sound$ = -20						; size = 4
_pemercount$ = -16					; size = 4
_i$ = -12						; size = 4
_player$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_special$ = 8						; size = 4
_toucher$ = 12						; size = 4
_heightcheck$ = 16					; size = 4
_P_TouchSpecialThing PROC				; COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 191  : 	player_t *player;
; 192  : 	INT32 i, pemercount = 0;

  00016	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pemercount$[ebp], 0

; 193  : 	sfxenum_t sound = sfx_None;

  0001d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _sound$[ebp], 0

; 194  : 	mobj_t *temp;
; 195  : 
; 196  : 	if (cv_objectplace.value)

  00024	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  0002b	74 05		 je	 SHORT $LN40@P_TouchSpe

; 197  : 		return;

  0002d	e9 b7 38 00 00	 jmp	 $LN374@P_TouchSpe
$LN40@P_TouchSpe:

; 198  : 
; 199  : 	// Dead thing touching.
; 200  : 	// Can happen with a sliding player corpse.
; 201  : 	if (toucher->health <= 0)

  00032	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00035	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0003c	7f 05		 jg	 SHORT $LN41@P_TouchSpe

; 202  : 		return;

  0003e	e9 a6 38 00 00	 jmp	 $LN374@P_TouchSpe
$LN41@P_TouchSpe:

; 203  : 
; 204  : 	if (heightcheck)

  00043	83 7d 10 00	 cmp	 DWORD PTR _heightcheck$[ebp], 0
  00047	74 77		 je	 SHORT $LN48@P_TouchSpe

; 205  : 	{
; 206  : 		if (special->type == MT_FLINGEMERALD) // little hack here...

  00049	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0004c	83 78 7c 40	 cmp	 DWORD PTR [eax+124], 64	; 00000040H
  00050	75 3c		 jne	 SHORT $LN43@P_TouchSpe

; 207  : 		{ // flingemerald sprites are low to the ground, so extend collision radius down some.
; 208  : 			if (toucher->z > (special->z + special->height))

  00052	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00055	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00058	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0005b	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00061	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  00064	7e 05		 jle	 SHORT $LN45@P_TouchSpe

; 209  : 				return;

  00066	e9 7e 38 00 00	 jmp	 $LN374@P_TouchSpe
$LN45@P_TouchSpe:

; 210  : 			if (special->z - special->height > (toucher->z + toucher->height))

  0006b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00071	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00074	2b 51 44	 sub	 edx, DWORD PTR [ecx+68]
  00077	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0007a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00080	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  00083	3b d1		 cmp	 edx, ecx
  00085	7e 05		 jle	 SHORT $LN46@P_TouchSpe

; 211  : 				return;

  00087	e9 5d 38 00 00	 jmp	 $LN374@P_TouchSpe
$LN46@P_TouchSpe:

; 212  : 		}

  0008c	eb 32		 jmp	 SHORT $LN48@P_TouchSpe
$LN43@P_TouchSpe:

; 213  : 		else
; 214  : 		{
; 215  : 			if (toucher->z > (special->z + special->height))

  0008e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00091	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00094	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00097	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  0009a	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0009d	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  000a0	7e 05		 jle	 SHORT $LN47@P_TouchSpe

; 216  : 				return;

  000a2	e9 42 38 00 00	 jmp	 $LN374@P_TouchSpe
$LN47@P_TouchSpe:

; 217  : 			if (special->z > (toucher->z + toucher->height))

  000a7	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  000aa	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ad	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  000b0	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  000b3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  000b6	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  000b9	7e 05		 jle	 SHORT $LN48@P_TouchSpe

; 218  : 				return;

  000bb	e9 29 38 00 00	 jmp	 $LN374@P_TouchSpe
$LN48@P_TouchSpe:

; 219  : 		}
; 220  : 	}
; 221  : 
; 222  : 	if (special->health <= 0)

  000c0	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  000c3	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  000ca	7f 05		 jg	 SHORT $LN49@P_TouchSpe

; 223  : 		return;

  000cc	e9 18 38 00 00	 jmp	 $LN374@P_TouchSpe
$LN49@P_TouchSpe:

; 224  : 
; 225  : 	sound = sfx_itemup;

  000d1	c7 45 ec 53 00
	00 00		 mov	 DWORD PTR _sound$[ebp], 83 ; 00000053H

; 226  : 	player = toucher->player;

  000d8	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  000db	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000e1	89 4d f8	 mov	 DWORD PTR _player$[ebp], ecx

; 227  : 
; 228  : 	if (!player) // Only players can touch stuff!

  000e4	83 7d f8 00	 cmp	 DWORD PTR _player$[ebp], 0
  000e8	75 05		 jne	 SHORT $LN50@P_TouchSpe

; 229  : 		return;

  000ea	e9 fa 37 00 00	 jmp	 $LN374@P_TouchSpe
$LN50@P_TouchSpe:

; 230  : 
; 231  : 	if ((netgame || multiplayer) && player->spectator)

  000ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000f6	75 09		 jne	 SHORT $LN52@P_TouchSpe
  000f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  000ff	74 13		 je	 SHORT $LN51@P_TouchSpe
$LN52@P_TouchSpe:
  00101	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00104	0f b6 88 f0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+496]
  0010b	85 c9		 test	 ecx, ecx
  0010d	74 05		 je	 SHORT $LN51@P_TouchSpe

; 232  : 		return;

  0010f	e9 d5 37 00 00	 jmp	 $LN374@P_TouchSpe
$LN51@P_TouchSpe:

; 233  : 
; 234  : 	if (special->state == &states[S_DISS]) // Don't collect if in "disappearing" mode

  00114	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00119	69 c8 4f 06 00
	00		 imul	 ecx, eax, 1615
  0011f	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00125	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00128	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0012b	75 05		 jne	 SHORT $LN53@P_TouchSpe

; 235  : 		return;

  0012d	e9 b7 37 00 00	 jmp	 $LN374@P_TouchSpe
$LN53@P_TouchSpe:

; 236  : 
; 237  : 	// Ignore eggman in "ouchie" mode
; 238  : 	if ((special->flags & MF_BOSS) && (special->flags2 & MF2_FRET))

  00132	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00135	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00138	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0013e	74 13		 je	 SHORT $LN54@P_TouchSpe
  00140	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00143	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00149	83 e1 10	 and	 ecx, 16			; 00000010H
  0014c	74 05		 je	 SHORT $LN54@P_TouchSpe

; 239  : 		return;

  0014e	e9 96 37 00 00	 jmp	 $LN374@P_TouchSpe
$LN54@P_TouchSpe:

; 240  : 
; 241  : 	if (special->type == MT_EGGMOBILE2 && special->movecount)

  00153	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00156	83 78 7c 1f	 cmp	 DWORD PTR [eax+124], 31	; 0000001fH
  0015a	75 11		 jne	 SHORT $LN55@P_TouchSpe
  0015c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0015f	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00166	74 05		 je	 SHORT $LN55@P_TouchSpe

; 242  : 		return;

  00168	e9 7c 37 00 00	 jmp	 $LN374@P_TouchSpe
$LN55@P_TouchSpe:

; 243  : 
; 244  : 	if (special->flags & MF_BOSS)

  0016d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00170	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00173	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00179	0f 84 4e 02 00
	00		 je	 $LN56@P_TouchSpe

; 245  : 	{
; 246  : 		if (special->type == MT_BLACKEGGMAN)

  0017f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00182	83 78 7c 27	 cmp	 DWORD PTR [eax+124], 39	; 00000027H
  00186	75 1b		 jne	 SHORT $LN58@P_TouchSpe

; 247  : 		{
; 248  : 			P_DamageMobj(toucher, special, special, 1); // ouch

  00188	6a 01		 push	 1
  0018a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0018d	50		 push	 eax
  0018e	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00191	51		 push	 ecx
  00192	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 _P_DamageMobj
  0019b	83 c4 10	 add	 esp, 16			; 00000010H

; 249  : 			return;

  0019e	e9 46 37 00 00	 jmp	 $LN374@P_TouchSpe
$LN58@P_TouchSpe:

; 250  : 		}
; 251  : 
; 252  : 		if ((toucher->z <= special->z + special->height && toucher->z + toucher->height
; 253  : 		     >= special->z) // Are you touching the side of it?
; 254  : 		    && (((toucher->player->pflags & PF_NIGHTSMODE) && (toucher->player->pflags & PF_DRILLING))

  001a3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  001a6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001a9	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  001ac	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  001af	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  001b2	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  001b5	0f 8f 17 01 00
	00		 jg	 $LN59@P_TouchSpe
  001bb	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  001be	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001c1	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  001c4	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  001c7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  001ca	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  001cd	0f 8c ff 00 00
	00		 jl	 $LN59@P_TouchSpe
  001d3	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  001d6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001dc	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  001e2	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  001e8	74 17		 je	 SHORT $LN62@P_TouchSpe
  001ea	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  001ed	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001f3	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  001f9	81 e2 00 00 00
	01		 and	 edx, 16777216		; 01000000H
  001ff	75 5e		 jne	 SHORT $LN61@P_TouchSpe
$LN62@P_TouchSpe:
  00201	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00204	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0020a	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00210	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  00216	75 47		 jne	 SHORT $LN61@P_TouchSpe
  00218	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0021b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00221	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00227	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  0022d	75 30		 jne	 SHORT $LN61@P_TouchSpe
  0022f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00232	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00238	ba 04 00 00 00	 mov	 edx, 4
  0023d	6b c2 00	 imul	 eax, edx, 0
  00240	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00245	75 18		 jne	 SHORT $LN61@P_TouchSpe
  00247	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0024a	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00250	ba 04 00 00 00	 mov	 edx, 4
  00255	6b c2 0f	 imul	 eax, edx, 15
  00258	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0025d	74 73		 je	 SHORT $LN59@P_TouchSpe
$LN61@P_TouchSpe:

; 255  : 		        || (toucher->player->pflags & PF_JUMPED) || (toucher->player->pflags & PF_SPINNING)
; 256  : 		        || toucher->player->powers[pw_invulnerability] || toucher->player->powers[pw_super]
; 257  : 		       )
; 258  : 		   ) // Do you possess the ability to subdue the object?
; 259  : 		{
; 260  : 			if ((toucher->momz < 0 && !(toucher->eflags & MFE_VERTICALFLIP)) || (toucher->momz > 0 && (toucher->eflags & MFE_VERTICALFLIP)))

  0025f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00262	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00266	7d 0e		 jge	 SHORT $LN65@P_TouchSpe
  00268	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0026b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00271	83 e1 20	 and	 ecx, 32			; 00000020H
  00274	74 17		 je	 SHORT $LN64@P_TouchSpe
$LN65@P_TouchSpe:
  00276	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00279	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0027d	7e 1c		 jle	 SHORT $LN63@P_TouchSpe
  0027f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00282	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00288	83 e1 20	 and	 ecx, 32			; 00000020H
  0028b	74 0e		 je	 SHORT $LN63@P_TouchSpe
$LN64@P_TouchSpe:

; 261  : 				toucher->momz = -toucher->momz;

  0028d	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00290	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00293	f7 d9		 neg	 ecx
  00295	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00298	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN63@P_TouchSpe:

; 262  : 			toucher->momx = -toucher->momx;

  0029b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0029e	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  002a1	f7 d9		 neg	 ecx
  002a3	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  002a6	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 263  : 			toucher->momy = -toucher->momy;

  002a9	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  002ac	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002af	f7 d9		 neg	 ecx
  002b1	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  002b4	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 264  : 			P_DamageMobj(special, toucher, toucher, 1);

  002b7	6a 01		 push	 1
  002b9	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  002bc	50		 push	 eax
  002bd	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  002c0	51		 push	 ecx
  002c1	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  002c4	52		 push	 edx
  002c5	e8 00 00 00 00	 call	 _P_DamageMobj
  002ca	83 c4 10	 add	 esp, 16			; 00000010H

; 265  : 		}

  002cd	e9 f1 00 00 00	 jmp	 $LN67@P_TouchSpe
$LN59@P_TouchSpe:

; 266  : 		else if (toucher->z + toucher->height >= special->z
; 267  : 		         && toucher->z < special->z
; 268  : 		         && toucher->player->charability == CA_FLY
; 269  : 		         && (toucher->player->powers[pw_tailsfly]

  002d2	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  002d5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002d8	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  002db	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  002de	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  002e1	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  002e4	0f 8c c3 00 00
	00		 jl	 $LN66@P_TouchSpe
  002ea	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  002f0	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  002f3	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  002f6	0f 8d b1 00 00
	00		 jge	 $LN66@P_TouchSpe
  002fc	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  002ff	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00305	83 b9 d8 00 00
	00 01		 cmp	 DWORD PTR [ecx+216], 1
  0030c	0f 85 9b 00 00
	00		 jne	 $LN66@P_TouchSpe
  00312	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00315	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0031b	ba 04 00 00 00	 mov	 edx, 4
  00320	6b c2 05	 imul	 eax, edx, 5
  00323	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00328	75 58		 jne	 SHORT $LN68@P_TouchSpe
  0032a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0032f	6b c8 17	 imul	 ecx, eax, 23
  00332	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00338	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0033b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0033e	74 42		 je	 SHORT $LN68@P_TouchSpe
  00340	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00345	6b c8 18	 imul	 ecx, eax, 24
  00348	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0034e	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00351	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00354	74 2c		 je	 SHORT $LN68@P_TouchSpe
  00356	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0035b	6b c8 19	 imul	 ecx, eax, 25
  0035e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00364	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00367	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0036a	74 16		 je	 SHORT $LN68@P_TouchSpe
  0036c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00371	6b c8 1a	 imul	 ecx, eax, 26
  00374	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0037a	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0037d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00380	75 2b		 jne	 SHORT $LN66@P_TouchSpe
$LN68@P_TouchSpe:

; 270  : 		             || toucher->state == &states[S_PLAY_SPC1]
; 271  : 		             || toucher->state == &states[S_PLAY_SPC2]
; 272  : 		             || toucher->state == &states[S_PLAY_SPC3]
; 273  : 		             || toucher->state == &states[S_PLAY_SPC4])) // Tails can shred stuff with his propeller.
; 274  : 		{
; 275  : 			toucher->momz = -toucher->momz/2;

  00382	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00385	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00388	f7 d8		 neg	 eax
  0038a	99		 cdq
  0038b	2b c2		 sub	 eax, edx
  0038d	d1 f8		 sar	 eax, 1
  0038f	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00392	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 276  : 
; 277  : 			P_DamageMobj(special, toucher, toucher, 1);

  00395	6a 01		 push	 1
  00397	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0039a	50		 push	 eax
  0039b	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  0039e	51		 push	 ecx
  0039f	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  003a2	52		 push	 edx
  003a3	e8 00 00 00 00	 call	 _P_DamageMobj
  003a8	83 c4 10	 add	 esp, 16			; 00000010H

; 278  : 		}

  003ab	eb 16		 jmp	 SHORT $LN67@P_TouchSpe
$LN66@P_TouchSpe:

; 279  : 		else
; 280  : 			P_DamageMobj(toucher, special, special, 1);

  003ad	6a 01		 push	 1
  003af	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  003b2	50		 push	 eax
  003b3	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  003b6	51		 push	 ecx
  003b7	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  003ba	52		 push	 edx
  003bb	e8 00 00 00 00	 call	 _P_DamageMobj
  003c0	83 c4 10	 add	 esp, 16			; 00000010H
$LN67@P_TouchSpe:

; 281  : 
; 282  : 		return;

  003c3	e9 21 35 00 00	 jmp	 $LN374@P_TouchSpe

; 283  : 	}

  003c8	e9 cc 34 00 00	 jmp	 $LN2@P_TouchSpe
$LN56@P_TouchSpe:

; 284  : 	else if ((special->flags & MF_ENEMY) && !(special->flags & MF_MISSILE))

  003cd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  003d0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  003d3	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  003d9	0f 84 f7 02 00
	00		 je	 $LN69@P_TouchSpe
  003df	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  003e2	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  003e5	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  003eb	0f 85 e5 02 00
	00		 jne	 $LN69@P_TouchSpe

; 285  : 	{
; 286  : 		////////////////////////////////////////////////////////
; 287  : 		/////ENEMIES!!//////////////////////////////////////////
; 288  : 		////////////////////////////////////////////////////////
; 289  : 		if (special->type == MT_GSNAPPER
; 290  : 			&& !(toucher->z - toucher->momz > special->z + special->height || (toucher->z + toucher->height) - toucher->momz < special->z))

  003f1	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  003f4	83 78 7c 17	 cmp	 DWORD PTR [eax+124], 23	; 00000017H
  003f8	75 4c		 jne	 SHORT $LN71@P_TouchSpe
  003fa	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  003fd	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00400	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00403	2b 51 50	 sub	 edx, DWORD PTR [ecx+80]
  00406	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00409	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0040c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0040f	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  00412	3b d1		 cmp	 edx, ecx
  00414	7f 30		 jg	 SHORT $LN71@P_TouchSpe
  00416	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00419	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0041c	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0041f	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00422	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00425	2b 48 50	 sub	 ecx, DWORD PTR [eax+80]
  00428	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0042b	3b 4a 18	 cmp	 ecx, DWORD PTR [edx+24]
  0042e	7c 16		 jl	 SHORT $LN71@P_TouchSpe

; 291  : 		{
; 292  : 			// Can only hit snapper from above
; 293  : 			P_DamageMobj(toucher, special, special, 1);

  00430	6a 01		 push	 1
  00432	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00435	50		 push	 eax
  00436	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00439	51		 push	 ecx
  0043a	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0043d	52		 push	 edx
  0043e	e8 00 00 00 00	 call	 _P_DamageMobj
  00443	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@P_TouchSpe:

; 294  : 		}
; 295  : 		if (special->type == MT_SHARP
; 296  : 			&& ((special->state >= &states[special->info->xdeathstate] && special->state <= &states[special->info->raisestate])

  00446	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00449	83 78 7c 0d	 cmp	 DWORD PTR [eax+124], 13	; 0000000dH
  0044d	75 70		 jne	 SHORT $LN72@P_TouchSpe
  0044f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00452	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00458	6b 51 34 1c	 imul	 edx, DWORD PTR [ecx+52], 28
  0045c	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00462	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00465	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00468	72 1b		 jb	 SHORT $LN75@P_TouchSpe
  0046a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0046d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00473	6b 51 5c 1c	 imul	 edx, DWORD PTR [ecx+92], 28
  00477	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0047d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00480	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00483	76 1f		 jbe	 SHORT $LN74@P_TouchSpe
$LN75@P_TouchSpe:
  00485	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00488	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0048b	99		 cdq
  0048c	83 e2 07	 and	 edx, 7
  0048f	03 c2		 add	 eax, edx
  00491	c1 f8 03	 sar	 eax, 3
  00494	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00497	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0049a	2b d0		 sub	 edx, eax
  0049c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0049f	39 50 18	 cmp	 DWORD PTR [eax+24], edx
  004a2	7d 1b		 jge	 SHORT $LN72@P_TouchSpe
$LN74@P_TouchSpe:

; 297  : 			|| (special->z < toucher->z - toucher->height/8)))
; 298  : 		{
; 299  : 			P_DamageMobj(toucher, special, special, 1);

  004a4	6a 01		 push	 1
  004a6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  004a9	50		 push	 eax
  004aa	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  004ad	51		 push	 ecx
  004ae	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  004b1	52		 push	 edx
  004b2	e8 00 00 00 00	 call	 _P_DamageMobj
  004b7	83 c4 10	 add	 esp, 16			; 00000010H

; 300  : 		}

  004ba	e9 0d 02 00 00	 jmp	 $LN84@P_TouchSpe
$LN72@P_TouchSpe:

; 301  : 		else if ((toucher->z <= special->z + special->height && toucher->z + toucher->height >= special->z) // Are you touching the side of it?
; 302  : 		         && (((toucher->player->pflags & PF_NIGHTSMODE) && (toucher->player->pflags & PF_DRILLING)) || (toucher->player->pflags & PF_JUMPED) || (toucher->player->pflags & PF_SPINNING)

  004bf	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  004c2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004c5	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  004c8	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  004cb	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  004ce	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  004d1	0f 8f fb 00 00
	00		 jg	 $LN76@P_TouchSpe
  004d7	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  004da	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004dd	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  004e0	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  004e3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  004e6	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  004e9	0f 8c e3 00 00
	00		 jl	 $LN76@P_TouchSpe
  004ef	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  004f2	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  004f8	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  004fe	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00504	74 17		 je	 SHORT $LN79@P_TouchSpe
  00506	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00509	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0050f	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00515	81 e2 00 00 00
	01		 and	 edx, 16777216		; 01000000H
  0051b	75 5e		 jne	 SHORT $LN78@P_TouchSpe
$LN79@P_TouchSpe:
  0051d	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00520	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00526	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0052c	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  00532	75 47		 jne	 SHORT $LN78@P_TouchSpe
  00534	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00537	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0053d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00543	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00549	75 30		 jne	 SHORT $LN78@P_TouchSpe
  0054b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0054e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00554	ba 04 00 00 00	 mov	 edx, 4
  00559	6b c2 00	 imul	 eax, edx, 0
  0055c	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00561	75 18		 jne	 SHORT $LN78@P_TouchSpe
  00563	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00566	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0056c	ba 04 00 00 00	 mov	 edx, 4
  00571	6b c2 0f	 imul	 eax, edx, 15
  00574	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00579	74 57		 je	 SHORT $LN76@P_TouchSpe
$LN78@P_TouchSpe:

; 303  : 		             || toucher->player->powers[pw_invulnerability] || toucher->player->powers[pw_super])) // Do you possess the ability to subdue the object?
; 304  : 		{
; 305  : 			if ((toucher->momz < 0 && !(toucher->eflags & MFE_VERTICALFLIP)) || (toucher->momz > 0 && (toucher->eflags & MFE_VERTICALFLIP)))

  0057b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0057e	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00582	7d 0e		 jge	 SHORT $LN82@P_TouchSpe
  00584	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00587	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0058d	83 e1 20	 and	 ecx, 32			; 00000020H
  00590	74 17		 je	 SHORT $LN81@P_TouchSpe
$LN82@P_TouchSpe:
  00592	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00595	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00599	7e 1c		 jle	 SHORT $LN80@P_TouchSpe
  0059b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0059e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  005a4	83 e1 20	 and	 ecx, 32			; 00000020H
  005a7	74 0e		 je	 SHORT $LN80@P_TouchSpe
$LN81@P_TouchSpe:

; 306  : 				toucher->momz = -toucher->momz;

  005a9	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  005ac	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  005af	f7 d9		 neg	 ecx
  005b1	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  005b4	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN80@P_TouchSpe:

; 307  : 
; 308  : 			P_DamageMobj(special, toucher, toucher, 1);

  005b7	6a 01		 push	 1
  005b9	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  005bc	50		 push	 eax
  005bd	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  005c0	51		 push	 ecx
  005c1	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  005c4	52		 push	 edx
  005c5	e8 00 00 00 00	 call	 _P_DamageMobj
  005ca	83 c4 10	 add	 esp, 16			; 00000010H

; 309  : 		}

  005cd	e9 fa 00 00 00	 jmp	 $LN84@P_TouchSpe
$LN76@P_TouchSpe:

; 310  : 		else if (toucher->z + toucher->height >= special->z
; 311  : 		         && toucher->z < special->z
; 312  : 		         && toucher->player->charability == CA_FLY
; 313  : 		         && (toucher->player->powers[pw_tailsfly]

  005d2	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  005d5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  005d8	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  005db	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  005de	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  005e1	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  005e4	0f 8c cc 00 00
	00		 jl	 $LN83@P_TouchSpe
  005ea	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  005ed	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  005f0	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  005f3	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  005f6	0f 8d ba 00 00
	00		 jge	 $LN83@P_TouchSpe
  005fc	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  005ff	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00605	83 b9 d8 00 00
	00 01		 cmp	 DWORD PTR [ecx+216], 1
  0060c	0f 85 a4 00 00
	00		 jne	 $LN83@P_TouchSpe
  00612	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00615	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0061b	ba 04 00 00 00	 mov	 edx, 4
  00620	6b c2 05	 imul	 eax, edx, 5
  00623	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00628	75 58		 jne	 SHORT $LN85@P_TouchSpe
  0062a	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0062f	6b c8 17	 imul	 ecx, eax, 23
  00632	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00638	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0063b	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0063e	74 42		 je	 SHORT $LN85@P_TouchSpe
  00640	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00645	6b c8 18	 imul	 ecx, eax, 24
  00648	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0064e	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00651	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00654	74 2c		 je	 SHORT $LN85@P_TouchSpe
  00656	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  0065b	6b c8 19	 imul	 ecx, eax, 25
  0065e	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  00664	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00667	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  0066a	74 16		 je	 SHORT $LN85@P_TouchSpe
  0066c	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00671	6b c8 1a	 imul	 ecx, eax, 26
  00674	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  0067a	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0067d	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  00680	75 34		 jne	 SHORT $LN83@P_TouchSpe
$LN85@P_TouchSpe:

; 314  : 		             || toucher->state == &states[S_PLAY_SPC1]
; 315  : 		             || toucher->state == &states[S_PLAY_SPC2]
; 316  : 		             || toucher->state == &states[S_PLAY_SPC3]
; 317  : 		             || toucher->state == &states[S_PLAY_SPC4])) // Tails can shred stuff with his propeller.
; 318  : 		{
; 319  : 			if (toucher->momz < 0)

  00682	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00685	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00689	7d 13		 jge	 SHORT $LN86@P_TouchSpe

; 320  : 				toucher->momz = -toucher->momz/2;

  0068b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0068e	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00691	f7 d8		 neg	 eax
  00693	99		 cdq
  00694	2b c2		 sub	 eax, edx
  00696	d1 f8		 sar	 eax, 1
  00698	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  0069b	89 41 50	 mov	 DWORD PTR [ecx+80], eax
$LN86@P_TouchSpe:

; 321  : 
; 322  : 			P_DamageMobj(special, toucher, toucher, 1);

  0069e	6a 01		 push	 1
  006a0	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  006a3	50		 push	 eax
  006a4	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  006a7	51		 push	 ecx
  006a8	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  006ab	52		 push	 edx
  006ac	e8 00 00 00 00	 call	 _P_DamageMobj
  006b1	83 c4 10	 add	 esp, 16			; 00000010H

; 323  : 		}

  006b4	eb 16		 jmp	 SHORT $LN84@P_TouchSpe
$LN83@P_TouchSpe:

; 324  : 		else
; 325  : 			P_DamageMobj(toucher, special, special, 1);

  006b6	6a 01		 push	 1
  006b8	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  006bb	50		 push	 eax
  006bc	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  006bf	51		 push	 ecx
  006c0	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  006c3	52		 push	 edx
  006c4	e8 00 00 00 00	 call	 _P_DamageMobj
  006c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN84@P_TouchSpe:

; 326  : 		return;

  006cc	e9 18 32 00 00	 jmp	 $LN374@P_TouchSpe

; 327  : 	}

  006d1	e9 c3 31 00 00	 jmp	 $LN2@P_TouchSpe
$LN69@P_TouchSpe:

; 328  : 	else if (special->flags & MF_FIRE)

  006d6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  006d9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  006dc	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  006e2	74 20		 je	 SHORT $LN87@P_TouchSpe

; 329  : 	{
; 330  : 		P_DamageMobj(toucher, special, special, 1);

  006e4	6a 01		 push	 1
  006e6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  006e9	50		 push	 eax
  006ea	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  006ed	51		 push	 ecx
  006ee	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  006f1	52		 push	 edx
  006f2	e8 00 00 00 00	 call	 _P_DamageMobj
  006f7	83 c4 10	 add	 esp, 16			; 00000010H

; 331  : 		return;

  006fa	e9 ea 31 00 00	 jmp	 $LN374@P_TouchSpe

; 332  : 	}

  006ff	e9 95 31 00 00	 jmp	 $LN2@P_TouchSpe
$LN87@P_TouchSpe:

; 333  : 	else
; 334  : 	{
; 335  : 	// We now identify by object type, not sprite! Tails 04-11-2001
; 336  : 	switch (special->type)

  00704	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00707	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0070a	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv416[ebp], ecx
  00710	81 bd fc fe ff
	ff d0 00 00 00	 cmp	 DWORD PTR tv416[ebp], 208 ; 000000d0H
  0071a	7f 43		 jg	 SHORT $LN380@P_TouchSpe
  0071c	81 bd fc fe ff
	ff d0 00 00 00	 cmp	 DWORD PTR tv416[ebp], 208 ; 000000d0H
  00726	0f 84 66 24 00
	00		 je	 $LN281@P_TouchSpe
  0072c	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR tv416[ebp]
  00732	83 ea 12	 sub	 edx, 18			; 00000012H
  00735	89 95 fc fe ff
	ff		 mov	 DWORD PTR tv416[ebp], edx
  0073b	81 bd fc fe ff
	ff a7 00 00 00	 cmp	 DWORD PTR tv416[ebp], 167 ; 000000a7H
  00745	0f 87 4e 31 00
	00		 ja	 $LN373@P_TouchSpe
  0074b	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR tv416[ebp]
  00751	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN381@P_TouchSpe[eax]
  00758	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN382@P_TouchSpe[ecx*4]
$LN380@P_TouchSpe:
  0075f	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR tv416[ebp]
  00765	81 ea d1 00 00
	00		 sub	 edx, 209		; 000000d1H
  0076b	89 95 fc fe ff
	ff		 mov	 DWORD PTR tv416[ebp], edx
  00771	83 bd fc fe ff
	ff 4a		 cmp	 DWORD PTR tv416[ebp], 74 ; 0000004aH
  00778	0f 87 1b 31 00
	00		 ja	 $LN373@P_TouchSpe
  0077e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR tv416[ebp]
  00784	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN383@P_TouchSpe[eax]
  0078b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN384@P_TouchSpe[ecx*4]
$LN89@P_TouchSpe:

; 337  : 	{
; 338  : 		case MT_BLACKEGGMAN_GOOPFIRE:
; 339  : 			if (toucher->state != &states[S_PLAY_PAIN] && !player->powers[pw_flashing])

  00792	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00797	6b c8 21	 imul	 ecx, eax, 33
  0079a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  007a0	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  007a3	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  007a6	0f 84 37 01 00
	00		 je	 $LN90@P_TouchSpe
  007ac	b8 04 00 00 00	 mov	 eax, 4
  007b1	d1 e0		 shl	 eax, 1
  007b3	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  007b6	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  007bb	0f 85 22 01 00
	00		 jne	 $LN90@P_TouchSpe

; 340  : 			{
; 341  : 				toucher->momx = 0;

  007c1	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  007c4	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 342  : 				toucher->momy = 0;

  007cb	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  007ce	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 343  : 
; 344  : 				if (toucher->momz != 0)

  007d5	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  007d8	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  007dc	74 0c		 je	 SHORT $LN92@P_TouchSpe

; 345  : 					special->momz = toucher->momz;

  007de	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  007e1	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  007e4	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  007e7	89 50 50	 mov	 DWORD PTR [eax+80], edx
$LN92@P_TouchSpe:

; 346  : 
; 347  : 				player->powers[pw_ingoop] = 2;

  007ea	b8 04 00 00 00	 mov	 eax, 4
  007ef	6b c8 1c	 imul	 ecx, eax, 28
  007f2	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  007f5	c7 44 0a 38 02
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 2

; 348  : 
; 349  : 				if (player->pflags & PF_ITEMHANG)

  007fd	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00800	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00806	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  0080c	74 2e		 je	 SHORT $LN93@P_TouchSpe

; 350  : 				{
; 351  : 					P_SetTarget(&player->mo->tracer, NULL);

  0080e	6a 00		 push	 0
  00810	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00813	8b 08		 mov	 ecx, DWORD PTR [eax]
  00815	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  0081b	51		 push	 ecx
  0081c	e8 00 00 00 00	 call	 _P_SetTarget
  00821	83 c4 08	 add	 esp, 8

; 352  : 					player->pflags &= ~PF_ITEMHANG;

  00824	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00827	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0082d	81 e1 ff ff f7
	ff		 and	 ecx, -524289		; fff7ffffH
  00833	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  00836	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN93@P_TouchSpe:

; 353  : 				}
; 354  : 
; 355  : 				P_ResetPlayer(player);

  0083c	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0083f	50		 push	 eax
  00840	e8 00 00 00 00	 call	 _P_ResetPlayer
  00845	83 c4 04	 add	 esp, 4

; 356  : 
; 357  : 				if (special->target && special->target->state == &states[S_BLACKEGG_SHOOT1])

  00848	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0084b	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00852	0f 84 89 00 00
	00		 je	 $LN96@P_TouchSpe
  00858	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0085b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00861	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  00866	69 c2 90 01 00
	00		 imul	 eax, edx, 400
  0086c	05 00 00 00 00	 add	 eax, OFFSET _states
  00871	39 41 5c	 cmp	 DWORD PTR [ecx+92], eax
  00874	75 6b		 jne	 SHORT $LN96@P_TouchSpe

; 358  : 				{
; 359  : 					if (special->target->health <= 2 && (P_Random() & 1))

  00876	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00879	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0087f	83 b9 8c 00 00
	00 02		 cmp	 DWORD PTR [ecx+140], 2
  00886	7f 34		 jg	 SHORT $LN95@P_TouchSpe
  00888	e8 00 00 00 00	 call	 _P_Random
  0088d	0f b6 c0	 movzx	 eax, al
  00890	83 e0 01	 and	 eax, 1
  00893	74 27		 je	 SHORT $LN95@P_TouchSpe

; 360  : 						P_SetMobjState(special->target, special->target->info->missilestate);

  00895	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00898	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0089e	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  008a4	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  008a7	50		 push	 eax
  008a8	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  008ab	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  008b1	52		 push	 edx
  008b2	e8 00 00 00 00	 call	 _P_SetMobjState
  008b7	83 c4 08	 add	 esp, 8
  008ba	eb 25		 jmp	 SHORT $LN96@P_TouchSpe
$LN95@P_TouchSpe:

; 361  : 					else
; 362  : 						P_SetMobjState(special->target, special->target->info->raisestate);

  008bc	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  008bf	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  008c5	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  008cb	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  008ce	50		 push	 eax
  008cf	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  008d2	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  008d8	52		 push	 edx
  008d9	e8 00 00 00 00	 call	 _P_SetMobjState
  008de	83 c4 08	 add	 esp, 8
$LN96@P_TouchSpe:

; 363  : 				}
; 364  : 			}

  008e1	eb 13		 jmp	 SHORT $LN91@P_TouchSpe
$LN90@P_TouchSpe:

; 365  : 			else
; 366  : 				player->powers[pw_ingoop] = 0;

  008e3	b8 04 00 00 00	 mov	 eax, 4
  008e8	6b c8 1c	 imul	 ecx, eax, 28
  008eb	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  008ee	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0
$LN91@P_TouchSpe:

; 367  : 			return;

  008f6	e9 ee 2f 00 00	 jmp	 $LN374@P_TouchSpe
$LN97@P_TouchSpe:

; 368  : 		case MT_EGGSHIELD:
; 369  : 			{
; 370  : 				fixed_t touchx, touchy, touchspeed;
; 371  : 				angle_t angle;
; 372  : 
; 373  : 				if (P_AproxDistance(toucher->x-special->x, toucher->y-special->y) >

  008fb	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  008fe	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00901	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00904	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  00907	52		 push	 edx
  00908	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0090b	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0090e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00911	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  00914	52		 push	 edx
  00915	e8 00 00 00 00	 call	 _P_AproxDistance
  0091a	83 c4 08	 add	 esp, 8
  0091d	8b f0		 mov	 esi, eax
  0091f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00922	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00925	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00928	2b 51 4c	 sub	 edx, DWORD PTR [ecx+76]
  0092b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0092e	2b 50 14	 sub	 edx, DWORD PTR [eax+20]
  00931	52		 push	 edx
  00932	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00935	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00938	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0093b	2b 42 48	 sub	 eax, DWORD PTR [edx+72]
  0093e	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00941	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00944	50		 push	 eax
  00945	e8 00 00 00 00	 call	 _P_AproxDistance
  0094a	83 c4 08	 add	 esp, 8
  0094d	3b f0		 cmp	 esi, eax
  0094f	7e 20		 jle	 SHORT $LN98@P_TouchSpe

; 374  : 					P_AproxDistance((toucher->x-toucher->momx)-special->x, (toucher->y-toucher->momy)-special->y))
; 375  : 				{
; 376  : 					touchx = toucher->x + toucher->momx;

  00951	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00954	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00957	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0095a	03 4a 48	 add	 ecx, DWORD PTR [edx+72]
  0095d	89 4d e4	 mov	 DWORD PTR _touchx$24[ebp], ecx

; 377  : 					touchy = toucher->y + toucher->momy;

  00960	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00963	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00966	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00969	03 4a 4c	 add	 ecx, DWORD PTR [edx+76]
  0096c	89 4d e0	 mov	 DWORD PTR _touchy$23[ebp], ecx

; 378  : 				}

  0096f	eb 12		 jmp	 SHORT $LN99@P_TouchSpe
$LN98@P_TouchSpe:

; 379  : 				else
; 380  : 				{
; 381  : 					touchx = toucher->x;

  00971	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00974	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00977	89 4d e4	 mov	 DWORD PTR _touchx$24[ebp], ecx

; 382  : 					touchy = toucher->y;

  0097a	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0097d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00980	89 4d e0	 mov	 DWORD PTR _touchy$23[ebp], ecx
$LN99@P_TouchSpe:

; 383  : 				}
; 384  : 
; 385  : 				angle = R_PointToAngle2(special->x, special->y, touchx, touchy) - special->angle;

  00983	8b 45 e0	 mov	 eax, DWORD PTR _touchy$23[ebp]
  00986	50		 push	 eax
  00987	8b 4d e4	 mov	 ecx, DWORD PTR _touchx$24[ebp]
  0098a	51		 push	 ecx
  0098b	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0098e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00991	50		 push	 eax
  00992	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00995	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00998	52		 push	 edx
  00999	e8 00 00 00 00	 call	 _R_PointToAngle2
  0099e	83 c4 10	 add	 esp, 16			; 00000010H
  009a1	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  009a4	2b 41 24	 sub	 eax, DWORD PTR [ecx+36]
  009a7	89 45 d8	 mov	 DWORD PTR _angle$21[ebp], eax

; 386  : 				touchspeed = P_AproxDistance(toucher->momx, toucher->momy);

  009aa	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  009ad	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  009b0	51		 push	 ecx
  009b1	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  009b4	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  009b7	50		 push	 eax
  009b8	e8 00 00 00 00	 call	 _P_AproxDistance
  009bd	83 c4 08	 add	 esp, 8
  009c0	89 45 dc	 mov	 DWORD PTR _touchspeed$22[ebp], eax

; 387  : 
; 388  : 				// Blocked by the shield?
; 389  : 				if (!(angle > ANGLE_90 && angle < ANGLE_270))

  009c3	81 7d d8 00 00
	00 40		 cmp	 DWORD PTR _angle$21[ebp], 1073741824 ; 40000000H
  009ca	76 09		 jbe	 SHORT $LN102@P_TouchSpe
  009cc	81 7d d8 00 00
	00 c0		 cmp	 DWORD PTR _angle$21[ebp], -1073741824 ; c0000000H
  009d3	72 63		 jb	 SHORT $LN100@P_TouchSpe
$LN102@P_TouchSpe:

; 390  : 				{
; 391  : 					toucher->momx = P_ReturnThrustX(special, special->angle, touchspeed);

  009d5	8b 45 dc	 mov	 eax, DWORD PTR _touchspeed$22[ebp]
  009d8	50		 push	 eax
  009d9	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  009dc	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  009df	52		 push	 edx
  009e0	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  009e3	50		 push	 eax
  009e4	e8 00 00 00 00	 call	 _P_ReturnThrustX
  009e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  009ec	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  009ef	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 392  : 					toucher->momy = P_ReturnThrustY(special, special->angle, touchspeed);

  009f2	8b 45 dc	 mov	 eax, DWORD PTR _touchspeed$22[ebp]
  009f5	50		 push	 eax
  009f6	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  009f9	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  009fc	52		 push	 edx
  009fd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00a00	50		 push	 eax
  00a01	e8 00 00 00 00	 call	 _P_ReturnThrustY
  00a06	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a09	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00a0c	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 393  : 					toucher->momz = -toucher->momz;

  00a0f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00a12	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00a15	f7 d9		 neg	 ecx
  00a17	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00a1a	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 394  : 
; 395  : 					// Play a bounce sound?
; 396  : 					S_StartSound(toucher, sfx_s3k_71);

  00a1d	68 b9 00 00 00	 push	 185			; 000000b9H
  00a22	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00a25	50		 push	 eax
  00a26	e8 00 00 00 00	 call	 _S_StartSound
  00a2b	83 c4 08	 add	 esp, 8

; 397  : 					return;

  00a2e	e9 b6 2e 00 00	 jmp	 $LN374@P_TouchSpe

; 398  : 				}

  00a33	e9 59 01 00 00	 jmp	 $LN103@P_TouchSpe
$LN100@P_TouchSpe:

; 399  : 				else if ((toucher->z <= special->z + special->height && toucher->z + toucher->height >= special->z) // Are you touching the side of it?
; 400  : 						&& (((toucher->player->pflags & PF_NIGHTSMODE) && (toucher->player->pflags & PF_DRILLING)) || (toucher->player->pflags & PF_JUMPED) || (toucher->player->pflags & PF_SPINNING)

  00a38	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00a3b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00a3e	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00a41	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00a44	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00a47	39 48 18	 cmp	 DWORD PTR [eax+24], ecx
  00a4a	0f 8f 41 01 00
	00		 jg	 $LN103@P_TouchSpe
  00a50	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00a53	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00a56	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00a59	03 4a 44	 add	 ecx, DWORD PTR [edx+68]
  00a5c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00a5f	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00a62	0f 8c 29 01 00
	00		 jl	 $LN103@P_TouchSpe
  00a68	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00a6b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a71	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00a77	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00a7d	74 17		 je	 SHORT $LN105@P_TouchSpe
  00a7f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00a82	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a88	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00a8e	81 e2 00 00 00
	01		 and	 edx, 16777216		; 01000000H
  00a94	75 62		 jne	 SHORT $LN104@P_TouchSpe
$LN105@P_TouchSpe:
  00a96	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00a99	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a9f	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00aa5	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  00aab	75 4b		 jne	 SHORT $LN104@P_TouchSpe
  00aad	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00ab0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00ab6	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00abc	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00ac2	75 34		 jne	 SHORT $LN104@P_TouchSpe
  00ac4	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00ac7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00acd	ba 04 00 00 00	 mov	 edx, 4
  00ad2	6b c2 00	 imul	 eax, edx, 0
  00ad5	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00ada	75 1c		 jne	 SHORT $LN104@P_TouchSpe
  00adc	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00adf	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00ae5	ba 04 00 00 00	 mov	 edx, 4
  00aea	6b c2 0f	 imul	 eax, edx, 15
  00aed	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00af2	0f 84 99 00 00
	00		 je	 $LN103@P_TouchSpe
$LN104@P_TouchSpe:

; 401  : 						|| toucher->player->powers[pw_invulnerability] || toucher->player->powers[pw_super])) // Do you possess the ability to subdue the object?
; 402  : 				{
; 403  : 					// Shatter the shield!
; 404  : 					toucher->momx = -toucher->momx/2;

  00af8	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00afb	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  00afe	f7 d8		 neg	 eax
  00b00	99		 cdq
  00b01	2b c2		 sub	 eax, edx
  00b03	d1 f8		 sar	 eax, 1
  00b05	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00b08	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 405  : 					toucher->momy = -toucher->momy/2;

  00b0b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00b0e	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00b11	f7 d8		 neg	 eax
  00b13	99		 cdq
  00b14	2b c2		 sub	 eax, edx
  00b16	d1 f8		 sar	 eax, 1
  00b18	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00b1b	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 406  : 					toucher->momz = -toucher->momz;

  00b1e	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00b21	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00b24	f7 d9		 neg	 ecx
  00b26	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  00b29	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 407  : 
; 408  : 					P_SetTarget(&special->tracer->tracer, NULL);

  00b2c	6a 00		 push	 0
  00b2e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00b31	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00b37	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00b3d	51		 push	 ecx
  00b3e	e8 00 00 00 00	 call	 _P_SetTarget
  00b43	83 c4 08	 add	 esp, 8

; 409  : 					P_SetTarget(&special->tracer, NULL);

  00b46	6a 00		 push	 0
  00b48	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00b4b	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  00b50	50		 push	 eax
  00b51	e8 00 00 00 00	 call	 _P_SetTarget
  00b56	83 c4 08	 add	 esp, 8

; 410  : 					P_SetMobjState(special, S_DISS);

  00b59	68 4f 06 00 00	 push	 1615			; 0000064fH
  00b5e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 _P_SetMobjState
  00b67	83 c4 08	 add	 esp, 8

; 411  : 					P_UnsetThingPosition(special);

  00b6a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00b6d	50		 push	 eax
  00b6e	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00b73	83 c4 04	 add	 esp, 4

; 412  : 					special->flags &= ~MF_NOBLOCKMAP;

  00b76	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00b79	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00b7c	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00b7f	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00b82	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 413  : 					P_SetThingPosition(special);

  00b85	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00b88	50		 push	 eax
  00b89	e8 00 00 00 00	 call	 _P_SetThingPosition
  00b8e	83 c4 04	 add	 esp, 4
$LN103@P_TouchSpe:

; 414  : 
; 415  : 					// Play shatter sound here
; 416  : 				}
; 417  : 			}
; 418  : 			return;

  00b91	e9 53 2d 00 00	 jmp	 $LN374@P_TouchSpe
$LN106@P_TouchSpe:

; 419  : 		case MT_EMBLEM: // Secret emblem thingy
; 420  : 			{
; 421  : 				INT32 emblemcount = 0;

  00b96	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _emblemcount$20[ebp], 0

; 422  : 
; 423  : 				if (timeattacking || demoplayback)

  00b9d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _timeattacking, 0
  00ba4	75 09		 jne	 SHORT $LN108@P_TouchSpe
  00ba6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _demoplayback, 0
  00bad	74 05		 je	 SHORT $LN107@P_TouchSpe
$LN108@P_TouchSpe:

; 424  : 					return;

  00baf	e9 35 2d 00 00	 jmp	 $LN374@P_TouchSpe
$LN107@P_TouchSpe:

; 425  : 				P_SetMobjState(special, S_DISS);

  00bb4	68 4f 06 00 00	 push	 1615			; 0000064fH
  00bb9	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00bbc	50		 push	 eax
  00bbd	e8 00 00 00 00	 call	 _P_SetMobjState
  00bc2	83 c4 08	 add	 esp, 8

; 426  : 				P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  00bc5	68 0d 01 00 00	 push	 269			; 0000010dH
  00bca	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00bcd	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00bd0	51		 push	 ecx
  00bd1	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00bd4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00bd7	50		 push	 eax
  00bd8	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00bdb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00bde	52		 push	 edx
  00bdf	e8 00 00 00 00	 call	 _P_SpawnMobj
  00be4	83 c4 10	 add	 esp, 16			; 00000010H

; 427  : 				S_StartSound(toucher, sfx_ncitem);

  00be7	6a 6b		 push	 107			; 0000006bH
  00be9	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00bec	50		 push	 eax
  00bed	e8 00 00 00 00	 call	 _S_StartSound
  00bf2	83 c4 08	 add	 esp, 8

; 428  : 				emblemlocations[special->health-1].collected = true;

  00bf5	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00bf8	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00bfe	83 e9 01	 sub	 ecx, 1
  00c01	6b d1 0c	 imul	 edx, ecx, 12
  00c04	c6 82 0a 00 00
	00 01		 mov	 BYTE PTR _emblemlocations[edx+10], 1

; 429  : 
; 430  : 				if (!modifiedgame || savemoddata)

  00c0b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00c12	74 0d		 je	 SHORT $LN110@P_TouchSpe
  00c14	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _savemoddata, 0
  00c1b	0f 84 55 01 00
	00		 je	 $LN109@P_TouchSpe
$LN110@P_TouchSpe:

; 431  : 				{
; 432  : 					for (i = 0; i < MAXEMBLEMS; i++)

  00c21	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00c28	eb 09		 jmp	 SHORT $LN6@P_TouchSpe
$LN4@P_TouchSpe:
  00c2a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00c2d	83 c0 01	 add	 eax, 1
  00c30	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN6@P_TouchSpe:
  00c33	81 7d f4 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  00c3a	7d 1a		 jge	 SHORT $LN5@P_TouchSpe

; 433  : 					{
; 434  : 						if (emblemlocations[i].collected)

  00c3c	6b 45 f4 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00c40	0f b6 88 0a 00
	00 00		 movzx	 ecx, BYTE PTR _emblemlocations[eax+10]
  00c47	85 c9		 test	 ecx, ecx
  00c49	74 09		 je	 SHORT $LN111@P_TouchSpe

; 435  : 							emblemcount++;

  00c4b	8b 45 d4	 mov	 eax, DWORD PTR _emblemcount$20[ebp]
  00c4e	83 c0 01	 add	 eax, 1
  00c51	89 45 d4	 mov	 DWORD PTR _emblemcount$20[ebp], eax
$LN111@P_TouchSpe:

; 436  : 					}

  00c54	eb d4		 jmp	 SHORT $LN4@P_TouchSpe
$LN5@P_TouchSpe:

; 437  : 
; 438  : 					if (emblemcount >= numemblems/2 && !(grade & 4)) // Got half of emblems

  00c56	a1 00 00 00 00	 mov	 eax, DWORD PTR _numemblems
  00c5b	99		 cdq
  00c5c	2b c2		 sub	 eax, edx
  00c5e	d1 f8		 sar	 eax, 1
  00c60	39 45 d4	 cmp	 DWORD PTR _emblemcount$20[ebp], eax
  00c63	7c 4f		 jl	 SHORT $LN112@P_TouchSpe
  00c65	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00c6a	83 e0 04	 and	 eax, 4
  00c6d	75 45		 jne	 SHORT $LN112@P_TouchSpe

; 439  : 					{
; 440  : 						HU_SetCEchoFlags(1048576);

  00c6f	68 00 00 10 00	 push	 1048576			; 00100000H
  00c74	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00c79	83 c4 04	 add	 esp, 4

; 441  : 						HU_SetCEchoDuration(5);

  00c7c	6a 05		 push	 5
  00c7e	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00c83	83 c4 04	 add	 esp, 4

; 442  : 						HU_DoCEcho("Mario Koopa Blast Unlocked!");

  00c86	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MIIHFIPM@Mario?5Koopa?5Blast?5Unlocked?$CB@
  00c8b	e8 00 00 00 00	 call	 _HU_DoCEcho
  00c90	83 c4 04	 add	 esp, 4

; 443  : 						HU_SetCEchoDuration(5);

  00c93	6a 05		 push	 5
  00c95	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00c9a	83 c4 04	 add	 esp, 4

; 444  : 						HU_SetCEchoFlags(0);

  00c9d	6a 00		 push	 0
  00c9f	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00ca4	83 c4 04	 add	 esp, 4

; 445  : 						grade |= 4;

  00ca7	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00cac	83 c8 04	 or	 eax, 4
  00caf	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN112@P_TouchSpe:

; 446  : 					}
; 447  : 
; 448  : 					if (emblemcount >= numemblems/4 && !(grade & 16)) // NiGHTS

  00cb4	a1 00 00 00 00	 mov	 eax, DWORD PTR _numemblems
  00cb9	99		 cdq
  00cba	83 e2 03	 and	 edx, 3
  00cbd	03 c2		 add	 eax, edx
  00cbf	c1 f8 02	 sar	 eax, 2
  00cc2	39 45 d4	 cmp	 DWORD PTR _emblemcount$20[ebp], eax
  00cc5	7c 4f		 jl	 SHORT $LN113@P_TouchSpe
  00cc7	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00ccc	83 e0 10	 and	 eax, 16			; 00000010H
  00ccf	75 45		 jne	 SHORT $LN113@P_TouchSpe

; 449  : 					{
; 450  : 						HU_SetCEchoFlags(1048576);

  00cd1	68 00 00 10 00	 push	 1048576			; 00100000H
  00cd6	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00cdb	83 c4 04	 add	 esp, 4

; 451  : 						HU_SetCEchoDuration(5);

  00cde	6a 05		 push	 5
  00ce0	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00ce5	83 c4 04	 add	 esp, 4

; 452  : 						HU_DoCEcho("Sonic Into Dreams Unlocked!");

  00ce8	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BADGNGJC@Sonic?5Into?5Dreams?5Unlocked?$CB@
  00ced	e8 00 00 00 00	 call	 _HU_DoCEcho
  00cf2	83 c4 04	 add	 esp, 4

; 453  : 						HU_SetCEchoDuration(5);

  00cf5	6a 05		 push	 5
  00cf7	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00cfc	83 c4 04	 add	 esp, 4

; 454  : 						HU_SetCEchoFlags(0);

  00cff	6a 00		 push	 0
  00d01	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00d06	83 c4 04	 add	 esp, 4

; 455  : 						grade |= 16;

  00d09	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00d0e	83 c8 10	 or	 eax, 16			; 00000010H
  00d11	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN113@P_TouchSpe:

; 456  : 					}
; 457  : 
; 458  : 					if (emblemcount == numemblems && !(grade & 8)) // Got ALL emblems!

  00d16	8b 45 d4	 mov	 eax, DWORD PTR _emblemcount$20[ebp]
  00d19	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _numemblems
  00d1f	75 4f		 jne	 SHORT $LN114@P_TouchSpe
  00d21	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00d26	83 e0 08	 and	 eax, 8
  00d29	75 45		 jne	 SHORT $LN114@P_TouchSpe

; 459  : 					{
; 460  : 						HU_SetCEchoFlags(1048576);

  00d2b	68 00 00 10 00	 push	 1048576			; 00100000H
  00d30	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00d35	83 c4 04	 add	 esp, 4

; 461  : 						HU_SetCEchoDuration(5);

  00d38	6a 05		 push	 5
  00d3a	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00d3f	83 c4 04	 add	 esp, 4

; 462  : 						HU_DoCEcho("Pandora's Box Unlocked!");

  00d42	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PFNHFABN@Pandora?8s?5Box?5Unlocked?$CB@
  00d47	e8 00 00 00 00	 call	 _HU_DoCEcho
  00d4c	83 c4 04	 add	 esp, 4

; 463  : 						HU_SetCEchoDuration(5);

  00d4f	6a 05		 push	 5
  00d51	e8 00 00 00 00	 call	 _HU_SetCEchoDuration
  00d56	83 c4 04	 add	 esp, 4

; 464  : 						HU_SetCEchoFlags(0);

  00d59	6a 00		 push	 0
  00d5b	e8 00 00 00 00	 call	 _HU_SetCEchoFlags
  00d60	83 c4 04	 add	 esp, 4

; 465  : 						grade |= 8;

  00d63	a1 00 00 00 00	 mov	 eax, DWORD PTR _grade
  00d68	83 c8 08	 or	 eax, 8
  00d6b	a3 00 00 00 00	 mov	 DWORD PTR _grade, eax
$LN114@P_TouchSpe:

; 466  : 					}
; 467  : 					G_SaveGameData();

  00d70	e8 00 00 00 00	 call	 _G_SaveGameData
  00d75	90		 npad	 1
$LN109@P_TouchSpe:

; 468  : 				}
; 469  : 
; 470  : 				G_SaveGameData();

  00d76	e8 00 00 00 00	 call	 _G_SaveGameData
  00d7b	90		 npad	 1

; 471  : 				return;

  00d7c	e9 68 2b 00 00	 jmp	 $LN374@P_TouchSpe
$LN115@P_TouchSpe:

; 472  : 			}
; 473  : 		case MT_EGGCAPSULE:
; 474  : 			if (!(toucher->player->health > 1))

  00d81	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00d84	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00d8a	83 79 28 01	 cmp	 DWORD PTR [ecx+40], 1
  00d8e	7f 05		 jg	 SHORT $LN116@P_TouchSpe

; 475  : 				return;

  00d90	e9 54 2b 00 00	 jmp	 $LN374@P_TouchSpe
$LN116@P_TouchSpe:

; 476  : 
; 477  : 			if ((toucher->player->pflags & PF_NIGHTSMODE) && !(toucher->target))

  00d95	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00d98	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00d9e	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00da4	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  00daa	74 11		 je	 SHORT $LN117@P_TouchSpe
  00dac	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00daf	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00db6	75 05		 jne	 SHORT $LN117@P_TouchSpe

; 478  : 				return;

  00db8	e9 2c 2b 00 00	 jmp	 $LN374@P_TouchSpe
$LN117@P_TouchSpe:

; 479  : 
; 480  : 			if (toucher->player->mare != special->threshold)

  00dbd	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  00dc0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00dc6	0f b6 91 d4 01
	00 00		 movzx	 edx, BYTE PTR [ecx+468]
  00dcd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00dd0	3b 90 a0 00 00
	00		 cmp	 edx, DWORD PTR [eax+160]
  00dd6	74 05		 je	 SHORT $LN118@P_TouchSpe

; 481  : 				return;

  00dd8	e9 0c 2b 00 00	 jmp	 $LN374@P_TouchSpe
$LN118@P_TouchSpe:

; 482  : 
; 483  : 			// Mark the player as 'pull into the capsule'
; 484  : 			P_SetTarget(&toucher->player->capsule, special);

  00ddd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00de0	50		 push	 eax
  00de1	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00de4	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00dea	81 c2 d0 01 00
	00		 add	 edx, 464		; 000001d0H
  00df0	52		 push	 edx
  00df1	e8 00 00 00 00	 call	 _P_SetTarget
  00df6	83 c4 08	 add	 esp, 8

; 485  : 
; 486  : 			for (i = 0; i < MAXPLAYERS; i++)

  00df9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00e00	eb 09		 jmp	 SHORT $LN9@P_TouchSpe
$LN7@P_TouchSpe:
  00e02	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00e05	83 c0 01	 add	 eax, 1
  00e08	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN9@P_TouchSpe:
  00e0b	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00e0f	7d 34		 jge	 SHORT $LN8@P_TouchSpe

; 487  : 			{
; 488  : 				if (&players[i] == toucher->player)

  00e11	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  00e18	05 00 00 00 00	 add	 eax, OFFSET _players
  00e1d	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00e20	3b 81 a4 00 00
	00		 cmp	 eax, DWORD PTR [ecx+164]
  00e26	75 1b		 jne	 SHORT $LN119@P_TouchSpe

; 489  : 					toucher->player->capsule->reactiontime = i+1;

  00e28	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00e2b	83 c0 01	 add	 eax, 1
  00e2e	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  00e31	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00e37	8b 8a d0 01 00
	00		 mov	 ecx, DWORD PTR [edx+464]
  00e3d	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
$LN119@P_TouchSpe:

; 490  : 			}

  00e43	eb bd		 jmp	 SHORT $LN7@P_TouchSpe
$LN8@P_TouchSpe:

; 491  : 			return;

  00e45	e9 9f 2a 00 00	 jmp	 $LN374@P_TouchSpe
$LN120@P_TouchSpe:

; 492  : 		case MT_NIGHTSBUMPER:
; 493  : 			if (player->bumpertime < TICRATE/4)

  00e4a	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00e4d	83 b8 ac 01 00
	00 08		 cmp	 DWORD PTR [eax+428], 8
  00e54	0f 83 80 02 00
	00		 jae	 $LN123@P_TouchSpe

; 494  : 			{
; 495  : 				S_StartSound(player->mo, special->info->seesound);

  00e5a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00e5d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00e63	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00e66	52		 push	 edx
  00e67	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00e6a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e6c	51		 push	 ecx
  00e6d	e8 00 00 00 00	 call	 _S_StartSound
  00e72	83 c4 08	 add	 esp, 8

; 496  : 				if (player->pflags & PF_NIGHTSMODE)

  00e75	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00e78	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00e7e	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00e84	0f 84 b2 00 00
	00		 je	 $LN122@P_TouchSpe

; 497  : 				{
; 498  : 					player->bumpertime = TICRATE/2;

  00e8a	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00e8d	c7 80 ac 01 00
	00 11 00 00 00	 mov	 DWORD PTR [eax+428], 17	; 00000011H

; 499  : 					if (special->threshold > 0)

  00e97	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00e9a	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00ea1	7e 18		 jle	 SHORT $LN124@P_TouchSpe

; 500  : 						player->flyangle = (special->threshold*30)-1;

  00ea3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00ea6	6b 88 a0 00 00
	00 1e		 imul	 ecx, DWORD PTR [eax+160], 30
  00ead	83 e9 01	 sub	 ecx, 1
  00eb0	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  00eb3	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
  00eb9	eb 12		 jmp	 SHORT $LN125@P_TouchSpe
$LN124@P_TouchSpe:

; 501  : 					else
; 502  : 						player->flyangle = special->threshold;

  00ebb	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00ebe	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00ec1	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00ec7	89 90 b0 01 00
	00		 mov	 DWORD PTR [eax+432], edx
$LN125@P_TouchSpe:

; 503  : 
; 504  : 					player->speed = special->info->speed;

  00ecd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00ed0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00ed6	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  00ed9	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00edc	89 82 0c 01 00
	00		 mov	 DWORD PTR [edx+268], eax

; 505  : 					P_UnsetThingPosition(player->mo);

  00ee2	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00ee5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ee7	51		 push	 ecx
  00ee8	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00eed	83 c4 04	 add	 esp, 4

; 506  : 					player->mo->x = special->x;

  00ef0	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00ef3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ef5	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00ef8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00efb	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 507  : 					player->mo->y = special->y;

  00efe	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00f01	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f03	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00f06	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00f09	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 508  : 					P_SetThingPosition(player->mo);

  00f0c	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00f0f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f11	51		 push	 ecx
  00f12	e8 00 00 00 00	 call	 _P_SetThingPosition
  00f17	83 c4 04	 add	 esp, 4

; 509  : 					player->mo->z = special->z+(special->height/4);

  00f1a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00f1d	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00f20	99		 cdq
  00f21	83 e2 03	 and	 edx, 3
  00f24	03 c2		 add	 eax, edx
  00f26	c1 f8 02	 sar	 eax, 2
  00f29	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00f2c	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00f2f	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  00f32	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00f34	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 510  : 				}

  00f37	e9 9e 01 00 00	 jmp	 $LN123@P_TouchSpe
$LN122@P_TouchSpe:

; 511  : 				else // More like a spring
; 512  : 				{
; 513  : 					angle_t fa;
; 514  : 					fixed_t xspeed, yspeed;
; 515  : 					const fixed_t speed = FixedDiv(special->info->speed*FRACUNIT,75*FRACUNIT);

  00f3c	68 00 00 4b 00	 push	 4915200			; 004b0000H
  00f41	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00f44	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00f4a	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00f4d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00f50	52		 push	 edx
  00f51	e8 00 00 00 00	 call	 _FixedDiv
  00f56	83 c4 08	 add	 esp, 8
  00f59	89 45 c4	 mov	 DWORD PTR _speed$16[ebp], eax

; 516  : 
; 517  : 					player->bumpertime = TICRATE/2;

  00f5c	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00f5f	c7 80 ac 01 00
	00 11 00 00 00	 mov	 DWORD PTR [eax+428], 17	; 00000011H

; 518  : 
; 519  : 					P_UnsetThingPosition(player->mo);

  00f69	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00f6c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f6e	51		 push	 ecx
  00f6f	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  00f74	83 c4 04	 add	 esp, 4

; 520  : 					player->mo->x = special->x;

  00f77	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00f7a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f7c	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00f7f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00f82	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 521  : 					player->mo->y = special->y;

  00f85	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00f88	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f8a	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  00f8d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00f90	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 522  : 					P_SetThingPosition(player->mo);

  00f93	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  00f96	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f98	51		 push	 ecx
  00f99	e8 00 00 00 00	 call	 _P_SetThingPosition
  00f9e	83 c4 04	 add	 esp, 4

; 523  : 					player->mo->z = special->z+(special->height/4);

  00fa1	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00fa4	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00fa7	99		 cdq
  00fa8	83 e2 03	 and	 edx, 3
  00fab	03 c2		 add	 eax, edx
  00fad	c1 f8 02	 sar	 eax, 2
  00fb0	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  00fb3	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00fb6	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  00fb9	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00fbb	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 524  : 
; 525  : 					if (special->threshold > 0)

  00fbe	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00fc1	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  00fc8	7e 26		 jle	 SHORT $LN126@P_TouchSpe

; 526  : 						fa = (FixedAngle(((special->threshold*30)-1)*FRACUNIT)>>ANGLETOFINESHIFT) & FINEMASK;

  00fca	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  00fcd	6b 88 a0 00 00
	00 1e		 imul	 ecx, DWORD PTR [eax+160], 30
  00fd4	83 e9 01	 sub	 ecx, 1
  00fd7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00fda	51		 push	 ecx
  00fdb	e8 00 00 00 00	 call	 _FixedAngle
  00fe0	83 c4 04	 add	 esp, 4
  00fe3	c1 e8 13	 shr	 eax, 19			; 00000013H
  00fe6	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  00feb	89 45 d0	 mov	 DWORD PTR _fa$19[ebp], eax
  00fee	eb 07		 jmp	 SHORT $LN127@P_TouchSpe
$LN126@P_TouchSpe:

; 527  : 					else
; 528  : 						fa = 0;

  00ff0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _fa$19[ebp], 0
$LN127@P_TouchSpe:

; 529  : 
; 530  : 					xspeed = FixedMul(FINECOSINE(fa),speed);

  00ff7	8b 45 c4	 mov	 eax, DWORD PTR _speed$16[ebp]
  00ffa	50		 push	 eax
  00ffb	8b 4d d0	 mov	 ecx, DWORD PTR _fa$19[ebp]
  00ffe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  01004	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  01007	50		 push	 eax
  01008	e8 00 00 00 00	 call	 _FixedMul
  0100d	83 c4 08	 add	 esp, 8
  01010	89 45 cc	 mov	 DWORD PTR _xspeed$18[ebp], eax

; 531  : 					yspeed = FixedMul(FINESINE(fa),speed);

  01013	8b 45 c4	 mov	 eax, DWORD PTR _speed$16[ebp]
  01016	50		 push	 eax
  01017	8b 4d d0	 mov	 ecx, DWORD PTR _fa$19[ebp]
  0101a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  01021	52		 push	 edx
  01022	e8 00 00 00 00	 call	 _FixedMul
  01027	83 c4 08	 add	 esp, 8
  0102a	89 45 c8	 mov	 DWORD PTR _yspeed$17[ebp], eax

; 532  : 
; 533  : 					P_InstaThrust(player->mo, special->angle, xspeed/10);

  0102d	8b 45 cc	 mov	 eax, DWORD PTR _xspeed$18[ebp]
  01030	99		 cdq
  01031	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  01036	f7 f9		 idiv	 ecx
  01038	50		 push	 eax
  01039	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0103c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0103f	50		 push	 eax
  01040	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  01043	8b 11		 mov	 edx, DWORD PTR [ecx]
  01045	52		 push	 edx
  01046	e8 00 00 00 00	 call	 _P_InstaThrust
  0104b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 534  : 					player->mo->momz = yspeed/11;

  0104e	8b 45 c8	 mov	 eax, DWORD PTR _yspeed$17[ebp]
  01051	99		 cdq
  01052	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  01057	f7 f9		 idiv	 ecx
  01059	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0105c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0105e	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 535  : 
; 536  : 					player->mo->angle = special->angle;

  01061	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01064	8b 08		 mov	 ecx, DWORD PTR [eax]
  01066	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01069	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0106c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 537  : 
; 538  : 					if (player == &players[consoleplayer])

  0106f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  01079	05 00 00 00 00	 add	 eax, OFFSET _players
  0107e	39 45 f8	 cmp	 DWORD PTR _player$[ebp], eax
  01081	75 10		 jne	 SHORT $LN128@P_TouchSpe

; 539  : 						localangle = player->mo->angle;

  01083	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01086	8b 08		 mov	 ecx, DWORD PTR [eax]
  01088	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0108b	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle, edx
  01091	eb 2b		 jmp	 SHORT $LN130@P_TouchSpe
$LN128@P_TouchSpe:

; 540  : 					else if (splitscreen && player == &players[secondarydisplayplayer])

  01093	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0109a	74 22		 je	 SHORT $LN130@P_TouchSpe
  0109c	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  010a6	05 00 00 00 00	 add	 eax, OFFSET _players
  010ab	39 45 f8	 cmp	 DWORD PTR _player$[ebp], eax
  010ae	75 0e		 jne	 SHORT $LN130@P_TouchSpe

; 541  : 						localangle2 = player->mo->angle;

  010b0	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  010b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  010b5	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  010b8	89 15 00 00 00
	00		 mov	 DWORD PTR _localangle2, edx
$LN130@P_TouchSpe:

; 542  : 
; 543  : 					P_ResetPlayer(player);

  010be	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  010c1	50		 push	 eax
  010c2	e8 00 00 00 00	 call	 _P_ResetPlayer
  010c7	83 c4 04	 add	 esp, 4

; 544  : 
; 545  : 					P_SetPlayerMobjState(player->mo, S_PLAY_FALL1);

  010ca	6a 27		 push	 39			; 00000027H
  010cc	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  010cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  010d1	51		 push	 ecx
  010d2	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  010d7	83 c4 08	 add	 esp, 8
$LN123@P_TouchSpe:

; 546  : 				}
; 547  : 			}
; 548  : 			return;

  010da	e9 0a 28 00 00	 jmp	 $LN374@P_TouchSpe
$LN131@P_TouchSpe:

; 549  : 		case MT_NIGHTSSUPERLOOP:
; 550  : 			player->powers[pw_superparaloop] = paralooptics;

  010df	b8 04 00 00 00	 mov	 eax, 4
  010e4	6b c8 19	 imul	 ecx, eax, 25
  010e7	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  010ea	a1 00 00 00 00	 mov	 eax, DWORD PTR _paralooptics
  010ef	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 551  : 			S_StartSound(toucher, sfx_ncspec);

  010f3	6a 6c		 push	 108			; 0000006cH
  010f5	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  010f8	50		 push	 eax
  010f9	e8 00 00 00 00	 call	 _S_StartSound
  010fe	83 c4 08	 add	 esp, 8

; 552  : 			P_SetMobjState(special, S_DISS);

  01101	68 4f 06 00 00	 push	 1615			; 0000064fH
  01106	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01109	50		 push	 eax
  0110a	e8 00 00 00 00	 call	 _P_SetMobjState
  0110f	83 c4 08	 add	 esp, 8

; 553  : 			return;

  01112	e9 d2 27 00 00	 jmp	 $LN374@P_TouchSpe
$LN132@P_TouchSpe:

; 554  : 		case MT_NIGHTSDRILLREFILL:
; 555  : 			player->drillmeter = 96*20;

  01117	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0111a	c7 80 c8 01 00
	00 80 07 00 00	 mov	 DWORD PTR [eax+456], 1920 ; 00000780H

; 556  : 			S_StartSound(toucher, sfx_ncspec);

  01124	6a 6c		 push	 108			; 0000006cH
  01126	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01129	50		 push	 eax
  0112a	e8 00 00 00 00	 call	 _S_StartSound
  0112f	83 c4 08	 add	 esp, 8

; 557  : 			P_SetMobjState(special, S_DISS);

  01132	68 4f 06 00 00	 push	 1615			; 0000064fH
  01137	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0113a	50		 push	 eax
  0113b	e8 00 00 00 00	 call	 _P_SetMobjState
  01140	83 c4 08	 add	 esp, 8

; 558  : 			return;

  01143	e9 a1 27 00 00	 jmp	 $LN374@P_TouchSpe
$LN133@P_TouchSpe:

; 559  : 		case MT_NIGHTSHELPER:
; 560  : 			player->powers[pw_nightshelper] = helpertics;

  01148	b8 04 00 00 00	 mov	 eax, 4
  0114d	6b c8 1a	 imul	 ecx, eax, 26
  01150	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  01153	a1 00 00 00 00	 mov	 eax, DWORD PTR _helpertics
  01158	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 561  : 			S_StartSound(toucher, sfx_ncspec);

  0115c	6a 6c		 push	 108			; 0000006cH
  0115e	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01161	50		 push	 eax
  01162	e8 00 00 00 00	 call	 _S_StartSound
  01167	83 c4 08	 add	 esp, 8

; 562  : 			P_SetMobjState(special, S_DISS);

  0116a	68 4f 06 00 00	 push	 1615			; 0000064fH
  0116f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01172	50		 push	 eax
  01173	e8 00 00 00 00	 call	 _P_SetMobjState
  01178	83 c4 08	 add	 esp, 8

; 563  : 			return;

  0117b	e9 69 27 00 00	 jmp	 $LN374@P_TouchSpe
$LN134@P_TouchSpe:

; 564  : 		case MT_NIGHTSWING:
; 565  : 			P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  01180	68 0d 01 00 00	 push	 269			; 0000010dH
  01185	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01188	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0118b	51		 push	 ecx
  0118c	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0118f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01192	50		 push	 eax
  01193	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01196	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01199	52		 push	 edx
  0119a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0119f	83 c4 10	 add	 esp, 16			; 00000010H

; 566  : 
; 567  : 			S_StartSound(toucher, sfx_ncitem);

  011a2	6a 6b		 push	 107			; 0000006bH
  011a4	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  011a7	50		 push	 eax
  011a8	e8 00 00 00 00	 call	 _S_StartSound
  011ad	83 c4 08	 add	 esp, 8

; 568  : 
; 569  : 			P_DoNightsScore(toucher->player);

  011b0	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  011b3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  011b9	51		 push	 ecx
  011ba	e8 00 00 00 00	 call	 _P_DoNightsScore
  011bf	83 c4 04	 add	 esp, 4

; 570  : 
; 571  : 			P_SetMobjState(special, S_DISS);

  011c2	68 4f 06 00 00	 push	 1615			; 0000064fH
  011c7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  011ca	50		 push	 eax
  011cb	e8 00 00 00 00	 call	 _P_SetMobjState
  011d0	83 c4 08	 add	 esp, 8

; 572  : 			special->flags &= ~MF_SPECIAL;

  011d3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  011d6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  011d9	83 e1 fe	 and	 ecx, -2			; fffffffeH
  011dc	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  011df	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 573  : 			return;

  011e2	e9 02 27 00 00	 jmp	 $LN374@P_TouchSpe
$LN135@P_TouchSpe:

; 574  : 		case MT_HOOPCOLLIDE:
; 575  : 			// This produces a kind of 'domino effect' with the hoop's pieces.
; 576  : 			for (; special->hprev != NULL; special = special->hprev); // Move to the first sprite in the hoop

  011e7	eb 09		 jmp	 SHORT $LN12@P_TouchSpe
$LN10@P_TouchSpe:
  011e9	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  011ec	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  011ef	89 4d 08	 mov	 DWORD PTR _special$[ebp], ecx
$LN12@P_TouchSpe:
  011f2	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  011f5	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  011f9	74 02		 je	 SHORT $LN11@P_TouchSpe
  011fb	eb ec		 jmp	 SHORT $LN10@P_TouchSpe
$LN11@P_TouchSpe:

; 577  : 			i = 0;

  011fd	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 578  : 			for (; special->type == MT_HOOP; special = special->hnext)

  01204	eb 09		 jmp	 SHORT $LN15@P_TouchSpe
$LN13@P_TouchSpe:
  01206	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01209	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0120c	89 4d 08	 mov	 DWORD PTR _special$[ebp], ecx
$LN15@P_TouchSpe:
  0120f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01212	81 78 7c f8 00
	00 00		 cmp	 DWORD PTR [eax+124], 248 ; 000000f8H
  01219	75 37		 jne	 SHORT $LN14@P_TouchSpe

; 579  : 			{
; 580  : 				special->fuse = 11;

  0121b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0121e	c7 80 bc 00 00
	00 0b 00 00 00	 mov	 DWORD PTR [eax+188], 11	; 0000000bH

; 581  : 				special->movedir = i;

  01228	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0122b	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0122e	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 582  : 				special->target->threshold = 4242;

  01234	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01237	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0123d	c7 81 a0 00 00
	00 92 10 00 00	 mov	 DWORD PTR [ecx+160], 4242 ; 00001092H

; 583  : 				i++;

  01247	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0124a	83 c0 01	 add	 eax, 1
  0124d	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax

; 584  : 			}

  01250	eb b4		 jmp	 SHORT $LN13@P_TouchSpe
$LN14@P_TouchSpe:

; 585  : 			// Make the collision detectors disappear.
; 586  : 			for (; special != NULL; special = special->hnext)

  01252	eb 09		 jmp	 SHORT $LN18@P_TouchSpe
$LN16@P_TouchSpe:
  01254	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01257	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0125a	89 4d 08	 mov	 DWORD PTR _special$[ebp], ecx
$LN18@P_TouchSpe:
  0125d	83 7d 08 00	 cmp	 DWORD PTR _special$[ebp], 0
  01261	74 0e		 je	 SHORT $LN17@P_TouchSpe

; 587  : 				P_RemoveMobj(special);

  01263	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01266	50		 push	 eax
  01267	e8 00 00 00 00	 call	 _P_RemoveMobj
  0126c	83 c4 04	 add	 esp, 4
  0126f	eb e3		 jmp	 SHORT $LN16@P_TouchSpe
$LN17@P_TouchSpe:

; 588  : 
; 589  : 			// Play hoop sound -- pick one depending on the current link.
; 590  : 			P_DoNightsScore(player);

  01271	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01274	50		 push	 eax
  01275	e8 00 00 00 00	 call	 _P_DoNightsScore
  0127a	83 c4 04	 add	 esp, 4

; 591  : 
; 592  : 			if (player->linkcount < 5)

  0127d	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01280	83 b8 b8 01 00
	00 05		 cmp	 DWORD PTR [eax+440], 5
  01287	7d 10		 jge	 SHORT $LN136@P_TouchSpe

; 593  : 				S_StartSound(toucher, sfx_hoop1);

  01289	6a 4f		 push	 79			; 0000004fH
  0128b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0128e	50		 push	 eax
  0128f	e8 00 00 00 00	 call	 _S_StartSound
  01294	83 c4 08	 add	 esp, 8
  01297	eb 2a		 jmp	 SHORT $LN139@P_TouchSpe
$LN136@P_TouchSpe:

; 594  : 			else if (player->linkcount < 10)

  01299	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0129c	83 b8 b8 01 00
	00 0a		 cmp	 DWORD PTR [eax+440], 10	; 0000000aH
  012a3	7d 10		 jge	 SHORT $LN138@P_TouchSpe

; 595  : 				S_StartSound(toucher, sfx_hoop2);

  012a5	6a 50		 push	 80			; 00000050H
  012a7	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  012aa	50		 push	 eax
  012ab	e8 00 00 00 00	 call	 _S_StartSound
  012b0	83 c4 08	 add	 esp, 8
  012b3	eb 0e		 jmp	 SHORT $LN139@P_TouchSpe
$LN138@P_TouchSpe:

; 596  : 			else
; 597  : 				S_StartSound(toucher, sfx_hoop3);

  012b5	6a 51		 push	 81			; 00000051H
  012b7	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  012ba	50		 push	 eax
  012bb	e8 00 00 00 00	 call	 _S_StartSound
  012c0	83 c4 08	 add	 esp, 8
$LN139@P_TouchSpe:

; 598  : 
; 599  : 			return;

  012c3	e9 21 26 00 00	 jmp	 $LN374@P_TouchSpe
$LN140@P_TouchSpe:

; 600  : 		case MT_NIGHTSDRONE:
; 601  : 			if (player->bonustime && !player->exiting) //After-mare bonus time/emerald reward in special stages.

  012c8	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  012cb	0f b6 88 cd 01
	00 00		 movzx	 ecx, BYTE PTR [eax+461]
  012d2	85 c9		 test	 ecx, ecx
  012d4	0f 84 d8 00 00
	00		 je	 $LN141@P_TouchSpe
  012da	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  012dd	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  012e4	0f 85 c8 00 00
	00		 jne	 $LN141@P_TouchSpe

; 602  : 			{
; 603  : 				if (!(player->pflags & PF_NIGHTSMODE))

  012ea	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  012ed	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  012f3	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  012f9	75 74		 jne	 SHORT $LN142@P_TouchSpe

; 604  : 				{
; 605  : 					if (!(netgame || multiplayer))

  012fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  01302	75 37		 jne	 SHORT $LN143@P_TouchSpe
  01304	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  0130b	75 2e		 jne	 SHORT $LN143@P_TouchSpe

; 606  : 					{
; 607  : 						special->flags2 |= MF2_DONTDRAW;

  0130d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01310	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01316	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  0131c	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0131f	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 608  : 						P_SetTarget(&special->tracer, toucher);

  01325	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01328	50		 push	 eax
  01329	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0132c	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  01332	51		 push	 ecx
  01333	e8 00 00 00 00	 call	 _P_SetTarget
  01338	83 c4 08	 add	 esp, 8
$LN143@P_TouchSpe:

; 609  : 					}
; 610  : 					P_SetTarget(&toucher->tracer, P_SpawnMobj(toucher->x, toucher->y, toucher->z, MT_NIGHTSCHAR));

  0133b	68 f5 00 00 00	 push	 245			; 000000f5H
  01340	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01343	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01346	51		 push	 ecx
  01347	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0134a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0134d	50		 push	 eax
  0134e	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01351	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01354	52		 push	 edx
  01355	e8 00 00 00 00	 call	 _P_SpawnMobj
  0135a	83 c4 10	 add	 esp, 16			; 00000010H
  0135d	50		 push	 eax
  0135e	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01361	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  01366	50		 push	 eax
  01367	e8 00 00 00 00	 call	 _P_SetTarget
  0136c	83 c4 08	 add	 esp, 8
$LN142@P_TouchSpe:

; 611  : 				}
; 612  : 
; 613  : 				P_NightserizePlayer(player, special->health);

  0136f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01372	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01378	51		 push	 ecx
  01379	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0137c	52		 push	 edx
  0137d	e8 00 00 00 00	 call	 _P_NightserizePlayer
  01382	83 c4 08	 add	 esp, 8

; 614  : 				S_StartSound(toucher, sfx_ideya);

  01385	6a 52		 push	 82			; 00000052H
  01387	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0138a	50		 push	 eax
  0138b	e8 00 00 00 00	 call	 _S_StartSound
  01390	83 c4 08	 add	 esp, 8

; 615  : 
; 616  : 				if (G_IsSpecialStage(gamemap))

  01393	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  0139a	50		 push	 eax
  0139b	e8 00 00 00 00	 call	 _G_IsSpecialStage
  013a0	83 c4 04	 add	 esp, 4
  013a3	85 c0		 test	 eax, eax
  013a5	74 06		 je	 SHORT $LN144@P_TouchSpe

; 617  : 					P_GiveEmerald();

  013a7	e8 00 00 00 00	 call	 _P_GiveEmerald
  013ac	90		 npad	 1
$LN144@P_TouchSpe:

; 618  : 				return;

  013ad	e9 37 25 00 00	 jmp	 $LN374@P_TouchSpe
$LN141@P_TouchSpe:

; 619  : 			}
; 620  : 			if (!(G_IsSpecialStage(gamemap) && player->exiting)) //Initial transformation. Don't allow second chances in special stages!

  013b2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  013b9	50		 push	 eax
  013ba	e8 00 00 00 00	 call	 _G_IsSpecialStage
  013bf	83 c4 04	 add	 esp, 4
  013c2	85 c0		 test	 eax, eax
  013c4	74 10		 je	 SHORT $LN146@P_TouchSpe
  013c6	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  013c9	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  013d0	0f 85 b0 00 00
	00		 jne	 $LN147@P_TouchSpe
$LN146@P_TouchSpe:

; 621  : 			{
; 622  : 				if (!(player->pflags & PF_NIGHTSMODE))

  013d6	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  013d9	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  013df	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  013e5	0f 85 9b 00 00
	00		 jne	 $LN147@P_TouchSpe

; 623  : 				{
; 624  : 					if (!(netgame || multiplayer))

  013eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  013f2	75 37		 jne	 SHORT $LN148@P_TouchSpe
  013f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  013fb	75 2e		 jne	 SHORT $LN148@P_TouchSpe

; 625  : 					{
; 626  : 						special->flags2 |= MF2_DONTDRAW;

  013fd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01400	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01406	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  0140c	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0140f	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 627  : 						P_SetTarget(&special->tracer, toucher);

  01415	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01418	50		 push	 eax
  01419	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0141c	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  01422	51		 push	 ecx
  01423	e8 00 00 00 00	 call	 _P_SetTarget
  01428	83 c4 08	 add	 esp, 8
$LN148@P_TouchSpe:

; 628  : 					}
; 629  : 
; 630  : 					S_StartSound(toucher, sfx_supert);

  0142b	68 de 00 00 00	 push	 222			; 000000deH
  01430	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01433	50		 push	 eax
  01434	e8 00 00 00 00	 call	 _S_StartSound
  01439	83 c4 08	 add	 esp, 8

; 631  : 					P_SetTarget(&toucher->tracer, P_SpawnMobj(toucher->x, toucher->y, toucher->z, MT_NIGHTSCHAR));

  0143c	68 f5 00 00 00	 push	 245			; 000000f5H
  01441	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01444	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01447	51		 push	 ecx
  01448	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0144b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0144e	50		 push	 eax
  0144f	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01452	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01455	52		 push	 edx
  01456	e8 00 00 00 00	 call	 _P_SpawnMobj
  0145b	83 c4 10	 add	 esp, 16			; 00000010H
  0145e	50		 push	 eax
  0145f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01462	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  01467	50		 push	 eax
  01468	e8 00 00 00 00	 call	 _P_SetTarget
  0146d	83 c4 08	 add	 esp, 8

; 632  : 					P_NightserizePlayer(player, special->health);

  01470	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01473	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01479	51		 push	 ecx
  0147a	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0147d	52		 push	 edx
  0147e	e8 00 00 00 00	 call	 _P_NightserizePlayer
  01483	83 c4 08	 add	 esp, 8
$LN147@P_TouchSpe:

; 633  : 				}
; 634  : 			}
; 635  : 			return;

  01486	e9 5e 24 00 00	 jmp	 $LN374@P_TouchSpe
$LN149@P_TouchSpe:

; 636  : 		case MT_NIGHTSPARKLE:
; 637  : 			if (special->fuse < player->mo->fuse - TICRATE)

  0148b	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0148e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01490	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  01496	83 ea 23	 sub	 edx, 35			; 00000023H
  01499	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0149c	39 90 bc 00 00
	00		 cmp	 DWORD PTR [eax+188], edx
  014a2	0f 8d 92 03 00
	00		 jge	 $LN26@P_TouchSpe

; 638  : 			{
; 639  : 				thinker_t *th;
; 640  : 				mobj_t *mo2;
; 641  : 				INT32 count;
; 642  : 				fixed_t x,y,z, gatherradius;
; 643  : 				angle_t d;
; 644  : 
; 645  : 				if (special->target != toucher) // These ain't your sparkles, pal!

  014a8	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  014ab	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  014b1	3b 4d 0c	 cmp	 ecx, DWORD PTR _toucher$[ebp]
  014b4	74 05		 je	 SHORT $LN151@P_TouchSpe

; 646  : 					return;

  014b6	e9 2e 24 00 00	 jmp	 $LN374@P_TouchSpe
$LN151@P_TouchSpe:

; 647  : 
; 648  : 				x = special->x>>FRACBITS;

  014bb	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  014be	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  014c1	c1 f9 10	 sar	 ecx, 16			; 00000010H
  014c4	89 4d b4	 mov	 DWORD PTR _x$12[ebp], ecx

; 649  : 				y = special->y>>FRACBITS;

  014c7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  014ca	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  014cd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  014d0	89 4d b0	 mov	 DWORD PTR _y$11[ebp], ecx

; 650  : 				z = special->z>>FRACBITS;

  014d3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  014d6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  014d9	c1 f9 10	 sar	 ecx, 16			; 00000010H
  014dc	89 4d ac	 mov	 DWORD PTR _z$10[ebp], ecx

; 651  : 				count = 1;

  014df	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _count$13[ebp], 1

; 652  : 
; 653  : 				// scan the remaining thinkers
; 654  : 				for (th = thinkercap.next; th != &thinkercap; th = th->next)

  014e6	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  014eb	89 45 c0	 mov	 DWORD PTR _th$15[ebp], eax
  014ee	eb 09		 jmp	 SHORT $LN21@P_TouchSpe
$LN19@P_TouchSpe:
  014f0	8b 45 c0	 mov	 eax, DWORD PTR _th$15[ebp]
  014f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  014f6	89 4d c0	 mov	 DWORD PTR _th$15[ebp], ecx
$LN21@P_TouchSpe:
  014f9	81 7d c0 00 00
	00 00		 cmp	 DWORD PTR _th$15[ebp], OFFSET _thinkercap
  01500	0f 84 eb 00 00
	00		 je	 $LN20@P_TouchSpe

; 655  : 				{
; 656  : 					if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  01506	8b 45 c0	 mov	 eax, DWORD PTR _th$15[ebp]
  01509	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  01510	74 02		 je	 SHORT $LN152@P_TouchSpe

; 657  : 						continue;

  01512	eb dc		 jmp	 SHORT $LN19@P_TouchSpe
$LN152@P_TouchSpe:

; 658  : 
; 659  : 					mo2 = (mobj_t *)th;

  01514	8b 45 c0	 mov	 eax, DWORD PTR _th$15[ebp]
  01517	89 45 bc	 mov	 DWORD PTR _mo2$14[ebp], eax

; 660  : 
; 661  : 					if (mo2 == special)

  0151a	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  0151d	3b 45 08	 cmp	 eax, DWORD PTR _special$[ebp]
  01520	75 02		 jne	 SHORT $LN153@P_TouchSpe

; 662  : 						continue;

  01522	eb cc		 jmp	 SHORT $LN19@P_TouchSpe
$LN153@P_TouchSpe:

; 663  : 
; 664  : 					if (mo2->type == MT_NIGHTSPARKLE && mo2->fuse >= special->fuse
; 665  : 						&& mo2->target == toucher
; 666  : 						&& (mo2->flags & MF_SPECIAL))

  01524	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01527	81 78 7c f6 00
	00 00		 cmp	 DWORD PTR [eax+124], 246 ; 000000f6H
  0152e	75 7e		 jne	 SHORT $LN154@P_TouchSpe
  01530	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01533	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01536	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  0153c	3b 91 bc 00 00
	00		 cmp	 edx, DWORD PTR [ecx+188]
  01542	7c 6a		 jl	 SHORT $LN154@P_TouchSpe
  01544	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01547	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0154d	3b 4d 0c	 cmp	 ecx, DWORD PTR _toucher$[ebp]
  01550	75 5c		 jne	 SHORT $LN154@P_TouchSpe
  01552	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01555	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01558	83 e1 01	 and	 ecx, 1
  0155b	74 51		 je	 SHORT $LN154@P_TouchSpe

; 667  : 					{
; 668  : 						mo2->tics = 1;

  0155d	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01560	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1

; 669  : 						mo2->flags &= ~MF_SPECIAL;

  01567	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  0156a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0156d	83 e1 fe	 and	 ecx, -2			; fffffffeH
  01570	8b 55 bc	 mov	 edx, DWORD PTR _mo2$14[ebp]
  01573	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 670  : 						count++;

  01576	8b 45 b8	 mov	 eax, DWORD PTR _count$13[ebp]
  01579	83 c0 01	 add	 eax, 1
  0157c	89 45 b8	 mov	 DWORD PTR _count$13[ebp], eax

; 671  : 						x += mo2->x>>FRACBITS;

  0157f	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01582	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  01585	c1 f9 10	 sar	 ecx, 16			; 00000010H
  01588	03 4d b4	 add	 ecx, DWORD PTR _x$12[ebp]
  0158b	89 4d b4	 mov	 DWORD PTR _x$12[ebp], ecx

; 672  : 						y += mo2->y>>FRACBITS;

  0158e	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01591	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  01594	c1 f9 10	 sar	 ecx, 16			; 00000010H
  01597	03 4d b0	 add	 ecx, DWORD PTR _y$11[ebp]
  0159a	89 4d b0	 mov	 DWORD PTR _y$11[ebp], ecx

; 673  : 						z += mo2->z>>FRACBITS;

  0159d	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  015a0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  015a3	c1 f9 10	 sar	 ecx, 16			; 00000010H
  015a6	03 4d ac	 add	 ecx, DWORD PTR _z$10[ebp]
  015a9	89 4d ac	 mov	 DWORD PTR _z$10[ebp], ecx

; 674  : 					}

  015ac	eb 3e		 jmp	 SHORT $LN156@P_TouchSpe
$LN154@P_TouchSpe:

; 675  : 					else if (mo2->type == MT_NIGHTSPARKLE && mo2->target == toucher
; 676  : 						&& (mo2->flags & MF_SPECIAL))

  015ae	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  015b1	81 78 7c f6 00
	00 00		 cmp	 DWORD PTR [eax+124], 246 ; 000000f6H
  015b8	75 32		 jne	 SHORT $LN156@P_TouchSpe
  015ba	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  015bd	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  015c3	3b 4d 0c	 cmp	 ecx, DWORD PTR _toucher$[ebp]
  015c6	75 24		 jne	 SHORT $LN156@P_TouchSpe
  015c8	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  015cb	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  015ce	83 e1 01	 and	 ecx, 1
  015d1	74 19		 je	 SHORT $LN156@P_TouchSpe

; 677  : 					{
; 678  : 						mo2->tics = 1;

  015d3	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  015d6	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1

; 679  : 						mo2->flags &= ~MF_SPECIAL;

  015dd	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  015e0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  015e3	83 e1 fe	 and	 ecx, -2			; fffffffeH
  015e6	8b 55 bc	 mov	 edx, DWORD PTR _mo2$14[ebp]
  015e9	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN156@P_TouchSpe:

; 680  : 					}
; 681  : 				}

  015ec	e9 ff fe ff ff	 jmp	 $LN19@P_TouchSpe
$LN20@P_TouchSpe:

; 682  : 				x = (x/count)<<FRACBITS;

  015f1	8b 45 b4	 mov	 eax, DWORD PTR _x$12[ebp]
  015f4	99		 cdq
  015f5	f7 7d b8	 idiv	 DWORD PTR _count$13[ebp]
  015f8	c1 e0 10	 shl	 eax, 16			; 00000010H
  015fb	89 45 b4	 mov	 DWORD PTR _x$12[ebp], eax

; 683  : 				y = (y/count)<<FRACBITS;

  015fe	8b 45 b0	 mov	 eax, DWORD PTR _y$11[ebp]
  01601	99		 cdq
  01602	f7 7d b8	 idiv	 DWORD PTR _count$13[ebp]
  01605	c1 e0 10	 shl	 eax, 16			; 00000010H
  01608	89 45 b0	 mov	 DWORD PTR _y$11[ebp], eax

; 684  : 				z = (z/count)<<FRACBITS;

  0160b	8b 45 ac	 mov	 eax, DWORD PTR _z$10[ebp]
  0160e	99		 cdq
  0160f	f7 7d b8	 idiv	 DWORD PTR _count$13[ebp]
  01612	c1 e0 10	 shl	 eax, 16			; 00000010H
  01615	89 45 ac	 mov	 DWORD PTR _z$10[ebp], eax

; 685  : 				P_SetMobjState(special, S_DISS);

  01618	68 4f 06 00 00	 push	 1615			; 0000064fH
  0161d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01620	50		 push	 eax
  01621	e8 00 00 00 00	 call	 _P_SetMobjState
  01626	83 c4 08	 add	 esp, 8

; 686  : 				gatherradius = P_AproxDistance(P_AproxDistance(special->x - x, special->y - y), special->z - z);

  01629	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0162c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0162f	2b 4d ac	 sub	 ecx, DWORD PTR _z$10[ebp]
  01632	51		 push	 ecx
  01633	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01636	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01639	2b 45 b0	 sub	 eax, DWORD PTR _y$11[ebp]
  0163c	50		 push	 eax
  0163d	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01640	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01643	2b 55 b4	 sub	 edx, DWORD PTR _x$12[ebp]
  01646	52		 push	 edx
  01647	e8 00 00 00 00	 call	 _P_AproxDistance
  0164c	83 c4 08	 add	 esp, 8
  0164f	50		 push	 eax
  01650	e8 00 00 00 00	 call	 _P_AproxDistance
  01655	83 c4 08	 add	 esp, 8
  01658	89 45 a8	 mov	 DWORD PTR _gatherradius$9[ebp], eax

; 687  : 
; 688  : 				if (player->powers[pw_superparaloop])

  0165b	b8 04 00 00 00	 mov	 eax, 4
  01660	6b c8 19	 imul	 ecx, eax, 25
  01663	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  01666	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0166b	74 08		 je	 SHORT $LN157@P_TouchSpe

; 689  : 					gatherradius *= 2;

  0166d	8b 45 a8	 mov	 eax, DWORD PTR _gatherradius$9[ebp]
  01670	d1 e0		 shl	 eax, 1
  01672	89 45 a8	 mov	 DWORD PTR _gatherradius$9[ebp], eax
$LN157@P_TouchSpe:

; 690  : 
; 691  : 				if (gatherradius < 30*FRACUNIT) // Player is probably just sitting there.

  01675	81 7d a8 00 00
	1e 00		 cmp	 DWORD PTR _gatherradius$9[ebp], 1966080 ; 001e0000H
  0167c	7d 05		 jge	 SHORT $LN158@P_TouchSpe

; 692  : 					return;

  0167e	e9 66 22 00 00	 jmp	 $LN374@P_TouchSpe
$LN158@P_TouchSpe:

; 693  : 
; 694  : 				for (d = 0; d < 16; d++)

  01683	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _d$8[ebp], 0
  0168a	eb 09		 jmp	 SHORT $LN24@P_TouchSpe
$LN22@P_TouchSpe:
  0168c	8b 45 a4	 mov	 eax, DWORD PTR _d$8[ebp]
  0168f	83 c0 01	 add	 eax, 1
  01692	89 45 a4	 mov	 DWORD PTR _d$8[ebp], eax
$LN24@P_TouchSpe:
  01695	83 7d a4 10	 cmp	 DWORD PTR _d$8[ebp], 16	; 00000010H
  01699	73 2c		 jae	 SHORT $LN23@P_TouchSpe

; 695  : 					P_SpawnParaloop(x, y, z, gatherradius, 16, MT_NIGHTSPARKLE, d*ANGLE_22h, false, false);

  0169b	6a 00		 push	 0
  0169d	6a 00		 push	 0
  0169f	8b 45 a4	 mov	 eax, DWORD PTR _d$8[ebp]
  016a2	c1 e0 1c	 shl	 eax, 28			; 0000001cH
  016a5	50		 push	 eax
  016a6	68 f6 00 00 00	 push	 246			; 000000f6H
  016ab	6a 10		 push	 16			; 00000010H
  016ad	8b 4d a8	 mov	 ecx, DWORD PTR _gatherradius$9[ebp]
  016b0	51		 push	 ecx
  016b1	8b 55 ac	 mov	 edx, DWORD PTR _z$10[ebp]
  016b4	52		 push	 edx
  016b5	8b 45 b0	 mov	 eax, DWORD PTR _y$11[ebp]
  016b8	50		 push	 eax
  016b9	8b 4d b4	 mov	 ecx, DWORD PTR _x$12[ebp]
  016bc	51		 push	 ecx
  016bd	e8 00 00 00 00	 call	 _P_SpawnParaloop
  016c2	83 c4 24	 add	 esp, 36			; 00000024H
  016c5	eb c5		 jmp	 SHORT $LN22@P_TouchSpe
$LN23@P_TouchSpe:

; 696  : 
; 697  : 				S_StartSound(toucher, sfx_prloop);

  016c7	6a 78		 push	 120			; 00000078H
  016c9	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  016cc	50		 push	 eax
  016cd	e8 00 00 00 00	 call	 _S_StartSound
  016d2	83 c4 08	 add	 esp, 8

; 698  : 
; 699  : 				// Now we RE-scan all the thinkers to find close objects to pull
; 700  : 				// in from the paraloop. Isn't this just so efficient?
; 701  : 				for (th = thinkercap.next; th != &thinkercap; th = th->next)

  016d5	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  016da	89 45 c0	 mov	 DWORD PTR _th$15[ebp], eax
  016dd	eb 09		 jmp	 SHORT $LN27@P_TouchSpe
$LN25@P_TouchSpe:
  016df	8b 45 c0	 mov	 eax, DWORD PTR _th$15[ebp]
  016e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  016e5	89 4d c0	 mov	 DWORD PTR _th$15[ebp], ecx
$LN27@P_TouchSpe:
  016e8	81 7d c0 00 00
	00 00		 cmp	 DWORD PTR _th$15[ebp], OFFSET _thinkercap
  016ef	0f 84 45 01 00
	00		 je	 $LN26@P_TouchSpe

; 702  : 				{
; 703  : 					if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  016f5	8b 45 c0	 mov	 eax, DWORD PTR _th$15[ebp]
  016f8	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  016ff	74 02		 je	 SHORT $LN159@P_TouchSpe

; 704  : 						continue;

  01701	eb dc		 jmp	 SHORT $LN25@P_TouchSpe
$LN159@P_TouchSpe:

; 705  : 
; 706  : 					mo2 = (mobj_t *)th;

  01703	8b 45 c0	 mov	 eax, DWORD PTR _th$15[ebp]
  01706	89 45 bc	 mov	 DWORD PTR _mo2$14[ebp], eax

; 707  : 
; 708  : 					if (P_AproxDistance(P_AproxDistance(mo2->x - x, mo2->y - y), mo2->z - z) > gatherradius)

  01709	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  0170c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0170f	2b 4d ac	 sub	 ecx, DWORD PTR _z$10[ebp]
  01712	51		 push	 ecx
  01713	8b 55 bc	 mov	 edx, DWORD PTR _mo2$14[ebp]
  01716	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01719	2b 45 b0	 sub	 eax, DWORD PTR _y$11[ebp]
  0171c	50		 push	 eax
  0171d	8b 4d bc	 mov	 ecx, DWORD PTR _mo2$14[ebp]
  01720	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01723	2b 55 b4	 sub	 edx, DWORD PTR _x$12[ebp]
  01726	52		 push	 edx
  01727	e8 00 00 00 00	 call	 _P_AproxDistance
  0172c	83 c4 08	 add	 esp, 8
  0172f	50		 push	 eax
  01730	e8 00 00 00 00	 call	 _P_AproxDistance
  01735	83 c4 08	 add	 esp, 8
  01738	3b 45 a8	 cmp	 eax, DWORD PTR _gatherradius$9[ebp]
  0173b	7e 02		 jle	 SHORT $LN160@P_TouchSpe

; 709  : 						continue;

  0173d	eb a0		 jmp	 SHORT $LN25@P_TouchSpe
$LN160@P_TouchSpe:

; 710  : 
; 711  : 					if (mo2->flags & MF_SHOOTABLE)

  0173f	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01742	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01745	83 e1 04	 and	 ecx, 4
  01748	74 1b		 je	 SHORT $LN161@P_TouchSpe

; 712  : 					{
; 713  : 						P_DamageMobj(mo2, toucher, toucher, 1);

  0174a	6a 01		 push	 1
  0174c	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0174f	50		 push	 eax
  01750	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01753	51		 push	 ecx
  01754	8b 55 bc	 mov	 edx, DWORD PTR _mo2$14[ebp]
  01757	52		 push	 edx
  01758	e8 00 00 00 00	 call	 _P_DamageMobj
  0175d	83 c4 10	 add	 esp, 16			; 00000010H

; 714  : 						continue;

  01760	e9 7a ff ff ff	 jmp	 $LN25@P_TouchSpe
$LN161@P_TouchSpe:

; 715  : 					}
; 716  : 
; 717  : 					// Make these APPEAR!
; 718  : 					// Tails 12-15-2003
; 719  : 					if (mo2->type == MT_NIGHTSSUPERLOOP
; 720  : 						|| mo2->type == MT_NIGHTSDRILLREFILL
; 721  : 						|| mo2->type == MT_NIGHTSHELPER)

  01765	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01768	81 78 7c fd 00
	00 00		 cmp	 DWORD PTR [eax+124], 253 ; 000000fdH
  0176f	74 18		 je	 SHORT $LN163@P_TouchSpe
  01771	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01774	81 78 7c fe 00
	00 00		 cmp	 DWORD PTR [eax+124], 254 ; 000000feH
  0177b	74 0c		 je	 SHORT $LN163@P_TouchSpe
  0177d	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01780	81 78 7c ff 00
	00 00		 cmp	 DWORD PTR [eax+124], 255 ; 000000ffH
  01787	75 46		 jne	 SHORT $LN164@P_TouchSpe
$LN163@P_TouchSpe:

; 722  : 					{
; 723  : 						if (!(mo2->flags & MF_SPECIAL))

  01789	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  0178c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0178f	83 e1 01	 and	 ecx, 1
  01792	75 3b		 jne	 SHORT $LN164@P_TouchSpe

; 724  : 						{
; 725  : 							P_SetMobjState(mo2, mo2->info->seestate);

  01794	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  01797	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0179d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  017a0	52		 push	 edx
  017a1	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  017a4	50		 push	 eax
  017a5	e8 00 00 00 00	 call	 _P_SetMobjState
  017aa	83 c4 08	 add	 esp, 8

; 726  : 							mo2->flags |= MF_SPECIAL;

  017ad	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  017b0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  017b3	83 c9 01	 or	 ecx, 1
  017b6	8b 55 bc	 mov	 edx, DWORD PTR _mo2$14[ebp]
  017b9	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 727  : 							S_StartSound(toucher, sfx_hidden);

  017bc	6a 4e		 push	 78			; 0000004eH
  017be	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  017c1	50		 push	 eax
  017c2	e8 00 00 00 00	 call	 _S_StartSound
  017c7	83 c4 08	 add	 esp, 8

; 728  : 							continue;

  017ca	e9 10 ff ff ff	 jmp	 $LN25@P_TouchSpe
$LN164@P_TouchSpe:

; 729  : 						}
; 730  : 					}
; 731  : 
; 732  : 					if (!(mo2->type == MT_NIGHTSWING || mo2->type == MT_RING || mo2->type == MT_COIN

  017cf	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  017d2	81 78 7c fc 00
	00 00		 cmp	 DWORD PTR [eax+124], 252 ; 000000fcH
  017d9	74 1a		 je	 SHORT $LN165@P_TouchSpe
  017db	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  017de	83 78 7c 2b	 cmp	 DWORD PTR [eax+124], 43	; 0000002bH
  017e2	74 11		 je	 SHORT $LN165@P_TouchSpe
  017e4	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  017e7	81 78 7c e1 00
	00 00		 cmp	 DWORD PTR [eax+124], 225 ; 000000e1H
  017ee	74 05		 je	 SHORT $LN165@P_TouchSpe

; 733  : #ifdef BLUE_SPHERES
; 734  : 					      || mo2->type == MT_BLUEBALL
; 735  : #endif
; 736  : 					     ))
; 737  : 						continue;

  017f0	e9 ea fe ff ff	 jmp	 $LN25@P_TouchSpe
$LN165@P_TouchSpe:

; 738  : 
; 739  : 					// Yay! The thing's in reach! Pull it in!
; 740  : 					mo2->flags |= MF_NOCLIP;

  017f5	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  017f8	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  017fb	81 c9 00 10 00
	00		 or	 ecx, 4096		; 00001000H
  01801	8b 55 bc	 mov	 edx, DWORD PTR _mo2$14[ebp]
  01804	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 741  : 					mo2->flags2 |= MF2_NIGHTSPULL;

  01807	8b 45 bc	 mov	 eax, DWORD PTR _mo2$14[ebp]
  0180a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  01810	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  01816	8b 55 bc	 mov	 edx, DWORD PTR _mo2$14[ebp]
  01819	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 742  : 					P_SetTarget(&mo2->tracer, toucher);

  0181f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01822	50		 push	 eax
  01823	8b 4d bc	 mov	 ecx, DWORD PTR _mo2$14[ebp]
  01826	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  0182c	51		 push	 ecx
  0182d	e8 00 00 00 00	 call	 _P_SetTarget
  01832	83 c4 08	 add	 esp, 8

; 743  : 				}

  01835	e9 a5 fe ff ff	 jmp	 $LN25@P_TouchSpe
$LN26@P_TouchSpe:

; 744  : 			}
; 745  : 			return;

  0183a	e9 aa 20 00 00	 jmp	 $LN374@P_TouchSpe
$LN166@P_TouchSpe:

; 746  : 		case MT_STARPOST:
; 747  : 			// In circuit, player must have touched all previous starposts
; 748  : 			if (circuitmap
; 749  : 				&& special->health - player->starpostnum > 1)

  0183f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  01846	74 3f		 je	 SHORT $LN167@P_TouchSpe
  01848	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0184b	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  0184e	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  01854	2b 91 8c 01 00
	00		 sub	 edx, DWORD PTR [ecx+396]
  0185a	83 fa 01	 cmp	 edx, 1
  0185d	7e 28		 jle	 SHORT $LN167@P_TouchSpe

; 750  : 			{
; 751  : 				if (!S_SoundPlaying(special, NUMSFX))

  0185f	68 63 07 00 00	 push	 1891			; 00000763H
  01864	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01867	50		 push	 eax
  01868	e8 00 00 00 00	 call	 _S_SoundPlaying
  0186d	83 c4 08	 add	 esp, 8
  01870	85 c0		 test	 eax, eax
  01872	75 0e		 jne	 SHORT $LN168@P_TouchSpe

; 752  : 					S_StartSound(special, sfx_lose);

  01874	6a 5b		 push	 91			; 0000005bH
  01876	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01879	50		 push	 eax
  0187a	e8 00 00 00 00	 call	 _S_StartSound
  0187f	83 c4 08	 add	 esp, 8
$LN168@P_TouchSpe:

; 753  : 				return;

  01882	e9 62 20 00 00	 jmp	 $LN374@P_TouchSpe
$LN167@P_TouchSpe:

; 754  : 			}
; 755  : 
; 756  : 			// We could technically have 91.1 Star Posts. 90 is cleaner.
; 757  : 			if (special->health > 90)

  01887	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0188a	83 b8 8c 00 00
	00 5a		 cmp	 DWORD PTR [eax+140], 90	; 0000005aH
  01891	7e 12		 jle	 SHORT $LN169@P_TouchSpe

; 758  : 			{
; 759  : 				CONS_Printf("Bad Starpost Number!\n");

  01893	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MHBGBANL@Bad?5Starpost?5Number?$CB?6@
  01898	e8 00 00 00 00	 call	 _CONS_Printf
  0189d	83 c4 04	 add	 esp, 4

; 760  : 				return;

  018a0	e9 44 20 00 00	 jmp	 $LN374@P_TouchSpe
$LN169@P_TouchSpe:

; 761  : 			}
; 762  : 
; 763  : 			if (player->starpostbit & (1<<(special->health-1)))

  018a5	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  018a8	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  018ae	83 e9 01	 sub	 ecx, 1
  018b1	ba 01 00 00 00	 mov	 edx, 1
  018b6	d3 e2		 shl	 edx, cl
  018b8	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  018bb	23 90 98 01 00
	00		 and	 edx, DWORD PTR [eax+408]
  018c1	74 05		 je	 SHORT $LN170@P_TouchSpe

; 764  : 				return; // Already hit this post

  018c3	e9 21 20 00 00	 jmp	 $LN374@P_TouchSpe
$LN170@P_TouchSpe:

; 765  : 
; 766  : 			player->starpostbit |= (1<<(special->health-1));

  018c8	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  018cb	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  018d1	83 e9 01	 sub	 ecx, 1
  018d4	ba 01 00 00 00	 mov	 edx, 1
  018d9	d3 e2		 shl	 edx, cl
  018db	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  018de	0b 90 98 01 00
	00		 or	 edx, DWORD PTR [eax+408]
  018e4	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  018e7	89 91 98 01 00
	00		 mov	 DWORD PTR [ecx+408], edx

; 767  : 
; 768  : 			// Save the player's time and position.
; 769  : 			player->starposttime = leveltime;

  018ed	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  018f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _leveltime
  018f6	89 88 90 01 00
	00		 mov	 DWORD PTR [eax+400], ecx

; 770  : 			player->starpostx = player->mo->x>>FRACBITS;

  018fc	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  018ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  01901	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01904	c1 fa 10	 sar	 edx, 16			; 00000010H
  01907	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0190a	89 90 80 01 00
	00		 mov	 DWORD PTR [eax+384], edx

; 771  : 			player->starposty = player->mo->y>>FRACBITS;

  01910	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01913	8b 08		 mov	 ecx, DWORD PTR [eax]
  01915	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01918	c1 fa 10	 sar	 edx, 16			; 00000010H
  0191b	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0191e	89 90 84 01 00
	00		 mov	 DWORD PTR [eax+388], edx

; 772  : 			player->starpostz = special->z>>FRACBITS;

  01924	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01927	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0192a	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0192d	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  01930	89 8a 88 01 00
	00		 mov	 DWORD PTR [edx+392], ecx

; 773  : 			player->starpostangle = special->angle;

  01936	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01939	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0193c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0193f	89 90 94 01 00
	00		 mov	 DWORD PTR [eax+404], edx

; 774  : 			player->starpostnum = special->health;

  01945	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01948	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0194b	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  01951	89 90 8c 01 00
	00		 mov	 DWORD PTR [eax+396], edx

; 775  : 			P_ClearStarPost(player, special->health);

  01957	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0195a	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01960	51		 push	 ecx
  01961	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  01964	52		 push	 edx
  01965	e8 00 00 00 00	 call	 _P_ClearStarPost
  0196a	83 c4 08	 add	 esp, 8

; 776  : 
; 777  : 			// Find all starposts in the level with this value.
; 778  : 			{
; 779  : 				thinker_t *th;
; 780  : 				mobj_t *mo2;
; 781  : 
; 782  : 				for (th = thinkercap.next; th != &thinkercap; th = th->next)

  0196d	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  01972	89 45 a0	 mov	 DWORD PTR _th$7[ebp], eax
  01975	eb 09		 jmp	 SHORT $LN30@P_TouchSpe
$LN28@P_TouchSpe:
  01977	8b 45 a0	 mov	 eax, DWORD PTR _th$7[ebp]
  0197a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0197d	89 4d a0	 mov	 DWORD PTR _th$7[ebp], ecx
$LN30@P_TouchSpe:
  01980	81 7d a0 00 00
	00 00		 cmp	 DWORD PTR _th$7[ebp], OFFSET _thinkercap
  01987	74 7f		 je	 SHORT $LN29@P_TouchSpe

; 783  : 				{
; 784  : 					if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  01989	8b 45 a0	 mov	 eax, DWORD PTR _th$7[ebp]
  0198c	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  01993	74 02		 je	 SHORT $LN171@P_TouchSpe

; 785  : 					continue;

  01995	eb e0		 jmp	 SHORT $LN28@P_TouchSpe
$LN171@P_TouchSpe:

; 786  : 
; 787  : 					mo2 = (mobj_t *)th;

  01997	8b 45 a0	 mov	 eax, DWORD PTR _th$7[ebp]
  0199a	89 45 9c	 mov	 DWORD PTR _mo2$6[ebp], eax

; 788  : 
; 789  : 					if (mo2 == special)

  0199d	8b 45 9c	 mov	 eax, DWORD PTR _mo2$6[ebp]
  019a0	3b 45 08	 cmp	 eax, DWORD PTR _special$[ebp]
  019a3	75 02		 jne	 SHORT $LN172@P_TouchSpe

; 790  : 						continue;

  019a5	eb d0		 jmp	 SHORT $LN28@P_TouchSpe
$LN172@P_TouchSpe:

; 791  : 
; 792  : 					if (mo2->type == MT_STARPOST && mo2->health == special->health)

  019a7	8b 45 9c	 mov	 eax, DWORD PTR _mo2$6[ebp]
  019aa	83 78 7c 4a	 cmp	 DWORD PTR [eax+124], 74	; 0000004aH
  019ae	75 53		 jne	 SHORT $LN174@P_TouchSpe
  019b0	8b 45 9c	 mov	 eax, DWORD PTR _mo2$6[ebp]
  019b3	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  019b6	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  019bc	3b 91 8c 00 00
	00		 cmp	 edx, DWORD PTR [ecx+140]
  019c2	75 3f		 jne	 SHORT $LN174@P_TouchSpe

; 793  : 					{
; 794  : 						if (!(netgame && circuitmap && player != &players[consoleplayer]))

  019c4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  019cb	74 1d		 je	 SHORT $LN175@P_TouchSpe
  019cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  019d4	74 14		 je	 SHORT $LN175@P_TouchSpe
  019d6	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  019e0	05 00 00 00 00	 add	 eax, OFFSET _players
  019e5	39 45 f8	 cmp	 DWORD PTR _player$[ebp], eax
  019e8	75 19		 jne	 SHORT $LN174@P_TouchSpe
$LN175@P_TouchSpe:

; 795  : 							P_SetMobjState(mo2, mo2->info->painstate);

  019ea	8b 45 9c	 mov	 eax, DWORD PTR _mo2$6[ebp]
  019ed	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  019f3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  019f6	52		 push	 edx
  019f7	8b 45 9c	 mov	 eax, DWORD PTR _mo2$6[ebp]
  019fa	50		 push	 eax
  019fb	e8 00 00 00 00	 call	 _P_SetMobjState
  01a00	83 c4 08	 add	 esp, 8
$LN174@P_TouchSpe:

; 796  : 					}
; 797  : 				}

  01a03	e9 6f ff ff ff	 jmp	 $LN28@P_TouchSpe
$LN29@P_TouchSpe:

; 798  : 			}
; 799  : 
; 800  : 			S_StartSound(player->mo, special->info->painsound);

  01a08	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01a0b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01a11	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  01a14	52		 push	 edx
  01a15	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01a18	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a1a	51		 push	 ecx
  01a1b	e8 00 00 00 00	 call	 _S_StartSound
  01a20	83 c4 08	 add	 esp, 8

; 801  : 
; 802  : 			if (!(netgame && circuitmap && player != &players[consoleplayer]))

  01a23	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  01a2a	74 1d		 je	 SHORT $LN177@P_TouchSpe
  01a2c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _circuitmap, 0
  01a33	74 14		 je	 SHORT $LN177@P_TouchSpe
  01a35	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  01a3f	05 00 00 00 00	 add	 eax, OFFSET _players
  01a44	39 45 f8	 cmp	 DWORD PTR _player$[ebp], eax
  01a47	75 19		 jne	 SHORT $LN176@P_TouchSpe
$LN177@P_TouchSpe:

; 803  : 				P_SetMobjState(special, special->info->painstate);

  01a49	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01a4c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01a52	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  01a55	52		 push	 edx
  01a56	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01a59	50		 push	 eax
  01a5a	e8 00 00 00 00	 call	 _P_SetMobjState
  01a5f	83 c4 08	 add	 esp, 8
$LN176@P_TouchSpe:

; 804  : 			return;

  01a62	e9 82 1e 00 00	 jmp	 $LN374@P_TouchSpe
$LN178@P_TouchSpe:

; 805  : 		case MT_BIGTUMBLEWEED:
; 806  : 		case MT_LITTLETUMBLEWEED:
; 807  : 			if (toucher->momx || toucher->momy)

  01a67	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01a6a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  01a6e	75 09		 jne	 SHORT $LN181@P_TouchSpe
  01a70	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01a73	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  01a77	74 7a		 je	 SHORT $LN180@P_TouchSpe
$LN181@P_TouchSpe:

; 808  : 			{
; 809  : 				special->momx = toucher->momx;

  01a79	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01a7c	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01a7f	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  01a82	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 810  : 				special->momy = toucher->momy;

  01a85	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01a88	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01a8b	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  01a8e	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 811  : 				special->momz = P_AproxDistance(toucher->momx, toucher->momy)/4;

  01a91	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01a94	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  01a97	51		 push	 ecx
  01a98	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  01a9b	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  01a9e	50		 push	 eax
  01a9f	e8 00 00 00 00	 call	 _P_AproxDistance
  01aa4	83 c4 08	 add	 esp, 8
  01aa7	99		 cdq
  01aa8	83 e2 03	 and	 edx, 3
  01aab	03 c2		 add	 eax, edx
  01aad	c1 f8 02	 sar	 eax, 2
  01ab0	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01ab3	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 812  : 
; 813  : 				if (toucher->momz > 0)

  01ab6	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01ab9	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  01abd	7e 1b		 jle	 SHORT $LN182@P_TouchSpe

; 814  : 					special->momz += toucher->momz/8;

  01abf	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01ac2	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  01ac5	99		 cdq
  01ac6	83 e2 07	 and	 edx, 7
  01ac9	03 c2		 add	 eax, edx
  01acb	c1 f8 03	 sar	 eax, 3
  01ace	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01ad1	03 41 50	 add	 eax, DWORD PTR [ecx+80]
  01ad4	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01ad7	89 42 50	 mov	 DWORD PTR [edx+80], eax
$LN182@P_TouchSpe:

; 815  : 
; 816  : 				P_SetMobjState(special, special->info->seestate);

  01ada	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01add	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01ae3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01ae6	52		 push	 edx
  01ae7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01aea	50		 push	 eax
  01aeb	e8 00 00 00 00	 call	 _P_SetMobjState
  01af0	83 c4 08	 add	 esp, 8
$LN180@P_TouchSpe:

; 817  : 			}
; 818  : 			return;

  01af3	e9 f1 1d 00 00	 jmp	 $LN374@P_TouchSpe
$LN183@P_TouchSpe:

; 819  : 		case MT_SMALLMACECHAIN:
; 820  : 		case MT_BIGMACECHAIN:
; 821  : 			// Is this the last link in the chain?
; 822  : 			if (toucher->momz > 0 || !(special->flags & MF_AMBUSH)
; 823  : 				|| (player->pflags & PF_ITEMHANG) || (player->pflags & PF_MACESPIN))

  01af8	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01afb	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  01aff	7f 2d		 jg	 SHORT $LN186@P_TouchSpe
  01b01	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01b04	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  01b07	83 e1 20	 and	 ecx, 32			; 00000020H
  01b0a	74 22		 je	 SHORT $LN186@P_TouchSpe
  01b0c	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01b0f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01b15	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  01b1b	75 11		 jne	 SHORT $LN186@P_TouchSpe
  01b1d	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01b20	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01b26	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  01b2c	74 05		 je	 SHORT $LN185@P_TouchSpe
$LN186@P_TouchSpe:

; 824  : 				return;

  01b2e	e9 b6 1d 00 00	 jmp	 $LN374@P_TouchSpe
$LN185@P_TouchSpe:

; 825  : 
; 826  : 			if (toucher->z > special->z + special->height/2)

  01b33	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01b36	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  01b39	99		 cdq
  01b3a	2b c2		 sub	 eax, edx
  01b3c	d1 f8		 sar	 eax, 1
  01b3e	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01b41	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  01b44	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  01b47	39 42 18	 cmp	 DWORD PTR [edx+24], eax
  01b4a	7e 05		 jle	 SHORT $LN187@P_TouchSpe

; 827  : 				return;

  01b4c	e9 98 1d 00 00	 jmp	 $LN374@P_TouchSpe
$LN187@P_TouchSpe:

; 828  : 
; 829  : 			if (toucher->z + toucher->height/2 < special->z)

  01b51	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01b54	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  01b57	99		 cdq
  01b58	2b c2		 sub	 eax, edx
  01b5a	d1 f8		 sar	 eax, 1
  01b5c	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01b5f	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  01b62	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01b65	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  01b68	7d 05		 jge	 SHORT $LN188@P_TouchSpe

; 830  : 				return;

  01b6a	e9 7a 1d 00 00	 jmp	 $LN374@P_TouchSpe
$LN188@P_TouchSpe:

; 831  : 
; 832  : 			if (player->powers[pw_flashing])

  01b6f	b8 04 00 00 00	 mov	 eax, 4
  01b74	d1 e0		 shl	 eax, 1
  01b76	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  01b79	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  01b7e	74 05		 je	 SHORT $LN189@P_TouchSpe

; 833  : 				return;

  01b80	e9 64 1d 00 00	 jmp	 $LN374@P_TouchSpe
$LN189@P_TouchSpe:

; 834  : 
; 835  : 			P_ResetPlayer(player);

  01b85	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01b88	50		 push	 eax
  01b89	e8 00 00 00 00	 call	 _P_ResetPlayer
  01b8e	83 c4 04	 add	 esp, 4

; 836  : 			P_ResetScore(player);

  01b91	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01b94	50		 push	 eax
  01b95	e8 00 00 00 00	 call	 _P_ResetScore
  01b9a	83 c4 04	 add	 esp, 4

; 837  : 			P_SetTarget(&toucher->tracer, special);

  01b9d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01ba0	50		 push	 eax
  01ba1	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01ba4	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  01baa	51		 push	 ecx
  01bab	e8 00 00 00 00	 call	 _P_SetTarget
  01bb0	83 c4 08	 add	 esp, 8

; 838  : 
; 839  : 			if (special->target && special->target->type == MT_SPINMACEPOINT)

  01bb3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01bb6	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  01bbd	74 3d		 je	 SHORT $LN190@P_TouchSpe
  01bbf	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01bc2	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  01bc8	81 79 7c 89 00
	00 00		 cmp	 DWORD PTR [ecx+124], 137 ; 00000089H
  01bcf	75 2b		 jne	 SHORT $LN190@P_TouchSpe

; 840  : 			{
; 841  : 				player->pflags |= PF_MACESPIN;

  01bd1	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01bd4	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01bda	81 c9 00 00 10
	00		 or	 ecx, 1048576		; 00100000H
  01be0	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  01be3	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 842  : 				S_StartSound (toucher, sfx_spin);

  01be9	68 d3 00 00 00	 push	 211			; 000000d3H
  01bee	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01bf1	50		 push	 eax
  01bf2	e8 00 00 00 00	 call	 _S_StartSound
  01bf7	83 c4 08	 add	 esp, 8

; 843  : 			}

  01bfa	eb 18		 jmp	 SHORT $LN191@P_TouchSpe
$LN190@P_TouchSpe:

; 844  : 			else
; 845  : 				player->pflags |= PF_ITEMHANG;

  01bfc	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01bff	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  01c05	81 c9 00 00 08
	00		 or	 ecx, 524288		; 00080000H
  01c0b	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  01c0e	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN191@P_TouchSpe:

; 846  : 			return;

  01c14	e9 d0 1c 00 00	 jmp	 $LN374@P_TouchSpe
$LN192@P_TouchSpe:

; 847  : 		case MT_SPIKEBALL:
; 848  : 		case MT_POINTYBALL:
; 849  : 		case MT_BIGMACE:
; 850  : 		case MT_SMALLMACE:
; 851  : 		case MT_GOOP:
; 852  : 		case MT_FALLINGROCK:
; 853  : 			P_DamageMobj(toucher, special, special, 1);

  01c19	6a 01		 push	 1
  01c1b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c1e	50		 push	 eax
  01c1f	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01c22	51		 push	 ecx
  01c23	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  01c26	52		 push	 edx
  01c27	e8 00 00 00 00	 call	 _P_DamageMobj
  01c2c	83 c4 10	 add	 esp, 16			; 00000010H

; 854  : 			return;

  01c2f	e9 b5 1c 00 00	 jmp	 $LN374@P_TouchSpe
$LN198@P_TouchSpe:

; 855  : 		case MT_BIGMINE:
; 856  : 		case MT_BIGAIRMINE:
; 857  : 			// Spawn explosion!
; 858  : 			P_SpawnMobj(special->x, special->y, special->z, special->info->mass);

  01c34	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c37	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01c3d	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  01c40	52		 push	 edx
  01c41	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c44	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01c47	51		 push	 ecx
  01c48	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01c4b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01c4e	50		 push	 eax
  01c4f	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01c52	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01c55	52		 push	 edx
  01c56	e8 00 00 00 00	 call	 _P_SpawnMobj
  01c5b	83 c4 10	 add	 esp, 16			; 00000010H

; 859  : 			P_RadiusAttack(special, special, special->info->damage);

  01c5e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c61	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01c67	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  01c6a	52		 push	 edx
  01c6b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c6e	50		 push	 eax
  01c6f	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01c72	51		 push	 ecx
  01c73	e8 00 00 00 00	 call	 _P_RadiusAttack
  01c78	83 c4 0c	 add	 esp, 12			; 0000000cH

; 860  : 			P_SetMobjState(special, special->info->deathstate);

  01c7b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c7e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01c84	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01c87	52		 push	 edx
  01c88	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c8b	50		 push	 eax
  01c8c	e8 00 00 00 00	 call	 _P_SetMobjState
  01c91	83 c4 08	 add	 esp, 8

; 861  : 			S_StartSound(special, special->info->deathsound);

  01c94	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01c97	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01c9d	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  01ca0	52		 push	 edx
  01ca1	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01ca4	50		 push	 eax
  01ca5	e8 00 00 00 00	 call	 _S_StartSound
  01caa	83 c4 08	 add	 esp, 8

; 862  : 			return;

  01cad	e9 37 1c 00 00	 jmp	 $LN374@P_TouchSpe
$LN200@P_TouchSpe:

; 863  : 		case MT_SPECIALSPIKEBALL:
; 864  : 			if (!(!useNightsSS && gamemap >= sstage_start && gamemap <= sstage_end)) // Only for old special stages

  01cb2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _useNightsSS, 0
  01cb9	75 24		 jne	 SHORT $LN202@P_TouchSpe
  01cbb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  01cc2	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_start
  01cc9	3b c1		 cmp	 eax, ecx
  01ccb	7c 12		 jl	 SHORT $LN202@P_TouchSpe
  01ccd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  01cd4	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_end
  01cdb	3b c1		 cmp	 eax, ecx
  01cdd	7e 1b		 jle	 SHORT $LN201@P_TouchSpe
$LN202@P_TouchSpe:

; 865  : 			{
; 866  : 				P_DamageMobj(toucher, special, special, 1);

  01cdf	6a 01		 push	 1
  01ce1	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01ce4	50		 push	 eax
  01ce5	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01ce8	51		 push	 ecx
  01ce9	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  01cec	52		 push	 edx
  01ced	e8 00 00 00 00	 call	 _P_DamageMobj
  01cf2	83 c4 10	 add	 esp, 16			; 00000010H

; 867  : 				return;

  01cf5	e9 ef 1b 00 00	 jmp	 $LN374@P_TouchSpe
$LN201@P_TouchSpe:

; 868  : 			}
; 869  : 
; 870  : 			if (player->powers[pw_flashing])

  01cfa	b8 04 00 00 00	 mov	 eax, 4
  01cff	d1 e0		 shl	 eax, 1
  01d01	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  01d04	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  01d09	74 05		 je	 SHORT $LN203@P_TouchSpe

; 871  : 				return;

  01d0b	e9 d9 1b 00 00	 jmp	 $LN374@P_TouchSpe
$LN203@P_TouchSpe:

; 872  : 
; 873  : 			P_PlayRinglossSound(toucher);

  01d10	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01d13	50		 push	 eax
  01d14	e8 00 00 00 00	 call	 _P_PlayRinglossSound
  01d19	83 c4 04	 add	 esp, 4

; 874  : 			if (toucher->health > 10)

  01d1c	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01d1f	83 b8 8c 00 00
	00 0a		 cmp	 DWORD PTR [eax+140], 10	; 0000000aH
  01d26	7e 17		 jle	 SHORT $LN204@P_TouchSpe

; 875  : 				toucher->health -= 10;

  01d28	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01d2b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01d31	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  01d34	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  01d37	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
  01d3d	eb 0d		 jmp	 SHORT $LN205@P_TouchSpe
$LN204@P_TouchSpe:

; 876  : 			else
; 877  : 				toucher->health = 1;

  01d3f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01d42	c7 80 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+140], 1
$LN205@P_TouchSpe:

; 878  : 			player->health = toucher->health;

  01d4c	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01d4f	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01d52	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  01d58	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 879  : 
; 880  : 			P_DoPlayerPain(player, special, NULL);

  01d5b	6a 00		 push	 0
  01d5d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01d60	50		 push	 eax
  01d61	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  01d64	51		 push	 ecx
  01d65	e8 00 00 00 00	 call	 _P_DoPlayerPain
  01d6a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 881  : 			return;

  01d6d	e9 77 1b 00 00	 jmp	 $LN374@P_TouchSpe
$LN206@P_TouchSpe:

; 882  : 
; 883  : 		// Emerald Hunt
; 884  : 		case MT_EMERHUNT:
; 885  : 			player->emeraldhunt++;

  01d72	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  01d75	8b 88 6c 01 00
	00		 mov	 ecx, DWORD PTR [eax+364]
  01d7b	83 c1 01	 add	 ecx, 1
  01d7e	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  01d81	89 8a 6c 01 00
	00		 mov	 DWORD PTR [edx+364], ecx

; 886  : 			P_SetMobjState(special, S_DISS);

  01d87	68 4f 06 00 00	 push	 1615			; 0000064fH
  01d8c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01d8f	50		 push	 eax
  01d90	e8 00 00 00 00	 call	 _P_SetMobjState
  01d95	83 c4 08	 add	 esp, 8

; 887  : 			P_SpawnMobj(special->x, special->y, special->z,

  01d98	68 0d 01 00 00	 push	 269			; 0000010dH
  01d9d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01da0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  01da3	51		 push	 ecx
  01da4	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01da7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  01daa	50		 push	 eax
  01dab	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01dae	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01db1	52		 push	 edx
  01db2	e8 00 00 00 00	 call	 _P_SpawnMobj
  01db7	83 c4 10	 add	 esp, 16			; 00000010H

; 888  : 				MT_SPARK);
; 889  : 			special->health = 0;

  01dba	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01dbd	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 890  : 			S_StartSound(toucher, special->info->deathsound);

  01dc7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01dca	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01dd0	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  01dd3	52		 push	 edx
  01dd4	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01dd7	50		 push	 eax
  01dd8	e8 00 00 00 00	 call	 _S_StartSound
  01ddd	83 c4 08	 add	 esp, 8

; 891  : 
; 892  : 			if (hunt1 == special)

  01de0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt1
  01de5	3b 45 08	 cmp	 eax, DWORD PTR _special$[ebp]
  01de8	75 0c		 jne	 SHORT $LN207@P_TouchSpe

; 893  : 				hunt1 = NULL;

  01dea	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _hunt1, 0
  01df4	eb 2a		 jmp	 SHORT $LN211@P_TouchSpe
$LN207@P_TouchSpe:

; 894  : 			else if (hunt2 == special)

  01df6	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt2
  01dfb	3b 45 08	 cmp	 eax, DWORD PTR _special$[ebp]
  01dfe	75 0c		 jne	 SHORT $LN209@P_TouchSpe

; 895  : 				hunt2 = NULL;

  01e00	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _hunt2, 0
  01e0a	eb 14		 jmp	 SHORT $LN211@P_TouchSpe
$LN209@P_TouchSpe:

; 896  : 			else if (hunt3 == special)

  01e0c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hunt3
  01e11	3b 45 08	 cmp	 eax, DWORD PTR _special$[ebp]
  01e14	75 0a		 jne	 SHORT $LN211@P_TouchSpe

; 897  : 				hunt3 = NULL;

  01e16	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _hunt3, 0
$LN211@P_TouchSpe:

; 898  : 
; 899  : 			for (i = 0; i < MAXPLAYERS; i++)

  01e20	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01e27	eb 09		 jmp	 SHORT $LN33@P_TouchSpe
$LN31@P_TouchSpe:
  01e29	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01e2c	83 c0 01	 add	 eax, 1
  01e2f	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN33@P_TouchSpe:
  01e32	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  01e36	7d 34		 jge	 SHORT $LN32@P_TouchSpe

; 900  : 			{
; 901  : 				if (!playeringame[i])

  01e38	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01e3b	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  01e43	75 02		 jne	 SHORT $LN212@P_TouchSpe

; 902  : 					continue;

  01e45	eb e2		 jmp	 SHORT $LN31@P_TouchSpe
$LN212@P_TouchSpe:

; 903  : 
; 904  : 				if (players[i].emeraldhunt > 0)

  01e47	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01e4e	83 b8 6c 01 00
	00 00		 cmp	 DWORD PTR _players[eax+364], 0
  01e55	7e 13		 jle	 SHORT $LN213@P_TouchSpe

; 905  : 					pemercount += players[i].emeraldhunt;

  01e57	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01e5e	8b 4d f0	 mov	 ecx, DWORD PTR _pemercount$[ebp]
  01e61	03 88 6c 01 00
	00		 add	 ecx, DWORD PTR _players[eax+364]
  01e67	89 4d f0	 mov	 DWORD PTR _pemercount$[ebp], ecx
$LN213@P_TouchSpe:

; 906  : 			}

  01e6a	eb bd		 jmp	 SHORT $LN31@P_TouchSpe
$LN32@P_TouchSpe:

; 907  : 			if (pemercount >= 3)

  01e6c	83 7d f0 03	 cmp	 DWORD PTR _pemercount$[ebp], 3
  01e70	7c 46		 jl	 SHORT $LN214@P_TouchSpe

; 908  : 			{
; 909  : 				for (i = 0; i < MAXPLAYERS; i++)

  01e72	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01e79	eb 09		 jmp	 SHORT $LN36@P_TouchSpe
$LN34@P_TouchSpe:
  01e7b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01e7e	83 c0 01	 add	 eax, 1
  01e81	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN36@P_TouchSpe:
  01e84	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  01e88	7d 22		 jge	 SHORT $LN35@P_TouchSpe

; 910  : 				{
; 911  : 					if (!playeringame[i])

  01e8a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01e8d	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _playeringame[eax*4], 0
  01e95	75 02		 jne	 SHORT $LN215@P_TouchSpe

; 912  : 						continue;

  01e97	eb e2		 jmp	 SHORT $LN34@P_TouchSpe
$LN215@P_TouchSpe:

; 913  : 
; 914  : 					players[i].exiting = (14*TICRATE)/5 + 1;

  01e99	69 45 f4 fc 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 508
  01ea0	c7 80 30 01 00
	00 63 00 00 00	 mov	 DWORD PTR _players[eax+304], 99 ; 00000063H

; 915  : 				}

  01eaa	eb cf		 jmp	 SHORT $LN34@P_TouchSpe
$LN35@P_TouchSpe:

; 916  : 				S_StartSound(NULL, sfx_lvpass);

  01eac	6a 5c		 push	 92			; 0000005cH
  01eae	6a 00		 push	 0
  01eb0	e8 00 00 00 00	 call	 _S_StartSound
  01eb5	83 c4 08	 add	 esp, 8
$LN214@P_TouchSpe:

; 917  : 			}
; 918  : 			return;

  01eb8	e9 2c 1a 00 00	 jmp	 $LN374@P_TouchSpe
$LN216@P_TouchSpe:

; 919  : 
; 920  : 		case MT_PUMA:
; 921  : 		case MT_HAMMER:
; 922  : 		case MT_KOOPA:
; 923  : 		case MT_KOOPAFLAME:
; 924  : 			P_DamageMobj(toucher, special, special, 1);

  01ebd	6a 01		 push	 1
  01ebf	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01ec2	50		 push	 eax
  01ec3	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01ec6	51		 push	 ecx
  01ec7	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  01eca	52		 push	 edx
  01ecb	e8 00 00 00 00	 call	 _P_DamageMobj
  01ed0	83 c4 10	 add	 esp, 16			; 00000010H

; 925  : 			return;

  01ed3	e9 11 1a 00 00	 jmp	 $LN374@P_TouchSpe
$LN220@P_TouchSpe:

; 926  : 		case MT_SHELL:
; 927  : 			if (special->state == &states[S_SHELL]) // Resting anim

  01ed8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  01edd	69 c8 ad 05 00
	00		 imul	 ecx, eax, 1453
  01ee3	81 c1 00 00 00
	00		 add	 ecx, OFFSET _states
  01ee9	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01eec	39 4a 5c	 cmp	 DWORD PTR [edx+92], ecx
  01eef	75 6e		 jne	 SHORT $LN221@P_TouchSpe

; 928  : 			{
; 929  : 				// Kick that sucker around!
; 930  : 				special->angle = toucher->angle;

  01ef1	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01ef4	8b 4d 0c	 mov	 ecx, DWORD PTR _toucher$[ebp]
  01ef7	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  01efa	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 931  : 				P_InstaThrust(special, special->angle, special->info->speed);

  01efd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01f00	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01f06	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  01f09	52		 push	 edx
  01f0a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01f0d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  01f10	51		 push	 ecx
  01f11	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  01f14	52		 push	 edx
  01f15	e8 00 00 00 00	 call	 _P_InstaThrust
  01f1a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 932  : 				S_StartSound(toucher, sfx_lose);

  01f1d	6a 5b		 push	 91			; 0000005bH
  01f1f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01f22	50		 push	 eax
  01f23	e8 00 00 00 00	 call	 _S_StartSound
  01f28	83 c4 08	 add	 esp, 8

; 933  : 				P_SetMobjState(special, S_SHELL1);

  01f2b	68 ae 05 00 00	 push	 1454			; 000005aeH
  01f30	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01f33	50		 push	 eax
  01f34	e8 00 00 00 00	 call	 _P_SetMobjState
  01f39	83 c4 08	 add	 esp, 8

; 934  : 				P_SetTarget(&special->target, toucher);

  01f3c	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  01f3f	50		 push	 eax
  01f40	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  01f43	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  01f49	51		 push	 ecx
  01f4a	e8 00 00 00 00	 call	 _P_SetTarget
  01f4f	83 c4 08	 add	 esp, 8

; 935  : 				special->threshold = (3*TICRATE)/2;

  01f52	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01f55	c7 80 a0 00 00
	00 34 00 00 00	 mov	 DWORD PTR [eax+160], 52	; 00000034H
$LN221@P_TouchSpe:

; 936  : 			}
; 937  : 			return;

  01f5f	e9 85 19 00 00	 jmp	 $LN374@P_TouchSpe
$LN222@P_TouchSpe:

; 938  : 		case MT_AXE:
; 939  : 			{
; 940  : 				line_t junk;
; 941  : 				thinker_t  *th;
; 942  : 				mobj_t *mo2;
; 943  : 
; 944  : 				junk.tag = 649;

  01f64	b8 89 02 00 00	 mov	 eax, 649		; 00000289H
  01f69	66 89 85 64 ff
	ff ff		 mov	 WORD PTR _junk$5[ebp+20], ax

; 945  : 				EV_DoElevator(&junk, bridgeFall, false);

  01f70	6a 00		 push	 0
  01f72	6a 06		 push	 6
  01f74	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _junk$5[ebp]
  01f7a	50		 push	 eax
  01f7b	e8 00 00 00 00	 call	 _EV_DoElevator
  01f80	83 c4 0c	 add	 esp, 12			; 0000000cH

; 946  : 
; 947  : 				// scan the remaining thinkers to find koopa
; 948  : 				for (th = thinkercap.next; th != &thinkercap; th = th->next)

  01f83	a1 04 00 00 00	 mov	 eax, DWORD PTR _thinkercap+4
  01f88	89 85 4c ff ff
	ff		 mov	 DWORD PTR _th$4[ebp], eax
  01f8e	eb 0f		 jmp	 SHORT $LN39@P_TouchSpe
$LN37@P_TouchSpe:
  01f90	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _th$4[ebp]
  01f96	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01f99	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _th$4[ebp], ecx
$LN39@P_TouchSpe:
  01f9f	81 bd 4c ff ff
	ff 00 00 00 00	 cmp	 DWORD PTR _th$4[ebp], OFFSET _thinkercap
  01fa9	74 3d		 je	 SHORT $LN38@P_TouchSpe

; 949  : 				{
; 950  : 					if (th->function.acp1 != (actionf_p1)P_MobjThinker)

  01fab	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _th$4[ebp]
  01fb1	81 78 08 00 00
	00 00		 cmp	 DWORD PTR [eax+8], OFFSET _P_MobjThinker
  01fb8	74 02		 je	 SHORT $LN223@P_TouchSpe

; 951  : 						continue;

  01fba	eb d4		 jmp	 SHORT $LN37@P_TouchSpe
$LN223@P_TouchSpe:

; 952  : 
; 953  : 					mo2 = (mobj_t *)th;

  01fbc	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _th$4[ebp]
  01fc2	89 85 48 ff ff
	ff		 mov	 DWORD PTR _mo2$3[ebp], eax

; 954  : 					if (mo2->type == MT_KOOPA)

  01fc8	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$3[ebp]
  01fce	81 78 7c eb 00
	00 00		 cmp	 DWORD PTR [eax+124], 235 ; 000000ebH
  01fd5	75 0f		 jne	 SHORT $LN224@P_TouchSpe

; 955  : 					{
; 956  : 						mo2->momz = 5*FRACUNIT;

  01fd7	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _mo2$3[ebp]
  01fdd	c7 40 50 00 00
	05 00		 mov	 DWORD PTR [eax+80], 327680 ; 00050000H

; 957  : 						break;

  01fe4	eb 02		 jmp	 SHORT $LN38@P_TouchSpe
$LN224@P_TouchSpe:

; 958  : 					}
; 959  : 				}

  01fe6	eb a8		 jmp	 SHORT $LN37@P_TouchSpe
$LN38@P_TouchSpe:

; 960  : 				P_SetMobjState(special, S_DISS);

  01fe8	68 4f 06 00 00	 push	 1615			; 0000064fH
  01fed	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  01ff0	50		 push	 eax
  01ff1	e8 00 00 00 00	 call	 _P_SetMobjState
  01ff6	83 c4 08	 add	 esp, 8

; 961  : 				return;

  01ff9	e9 eb 18 00 00	 jmp	 $LN374@P_TouchSpe
$LN225@P_TouchSpe:

; 962  : 			}
; 963  : 		case MT_FIREFLOWER:
; 964  : 			if (!mariomode)

  01ffe	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  02005	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0200a	75 05		 jne	 SHORT $LN226@P_TouchSpe

; 965  : 				return;

  0200c	e9 d8 18 00 00	 jmp	 $LN374@P_TouchSpe
$LN226@P_TouchSpe:

; 966  : 			toucher->player->powers[pw_fireflower] = true;

  02011	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02014	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0201a	ba 04 00 00 00	 mov	 edx, 4
  0201f	6b c2 11	 imul	 eax, edx, 17
  02022	c7 44 01 38 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+56], 1

; 967  : 			toucher->flags |= MF_TRANSLATION;

  0202a	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0202d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  02030	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  02036	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  02039	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 968  : 			toucher->color =  13;

  0203c	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  0203f	c6 40 68 0d	 mov	 BYTE PTR [eax+104], 13	; 0000000dH

; 969  : 			sound = sfx_shield;

  02043	c7 45 ec d0 00
	00 00		 mov	 DWORD PTR _sound$[ebp], 208 ; 000000d0H

; 970  : 			break;

  0204a	e9 4a 18 00 00	 jmp	 $LN2@P_TouchSpe
$LN227@P_TouchSpe:

; 971  : 			// coins
; 972  : 		case MT_COIN:
; 973  : 		case MT_FLINGCOIN:
; 974  : 			if (!(P_CanPickupItem(toucher->player, false)))

  0204f	6a 00		 push	 0
  02051	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02054	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0205a	51		 push	 ecx
  0205b	e8 00 00 00 00	 call	 _P_CanPickupItem
  02060	83 c4 08	 add	 esp, 8
  02063	85 c0		 test	 eax, eax
  02065	75 05		 jne	 SHORT $LN229@P_TouchSpe

; 975  : 				return;

  02067	e9 7d 18 00 00	 jmp	 $LN374@P_TouchSpe
$LN229@P_TouchSpe:

; 976  : 			if (mariomode)

  0206c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  02073	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02078	74 2d		 je	 SHORT $LN230@P_TouchSpe

; 977  : 				P_SpawnMobj(special->x,special->y,special->z, MT_COINSPARKLE)->momz = special->momz;

  0207a	68 e3 00 00 00	 push	 227			; 000000e3H
  0207f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02082	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02085	51		 push	 ecx
  02086	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02089	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0208c	50		 push	 eax
  0208d	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02090	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02093	52		 push	 edx
  02094	e8 00 00 00 00	 call	 _P_SpawnMobj
  02099	83 c4 10	 add	 esp, 16			; 00000010H
  0209c	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0209f	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  020a2	89 50 50	 mov	 DWORD PTR [eax+80], edx
  020a5	eb 22		 jmp	 SHORT $LN231@P_TouchSpe
$LN230@P_TouchSpe:

; 978  : 			else
; 979  : 				P_SpawnMobj(special->x,special->y,special->z, MT_COINSPARKLE);

  020a7	68 e3 00 00 00	 push	 227			; 000000e3H
  020ac	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  020af	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  020b2	51		 push	 ecx
  020b3	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  020b6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  020b9	50		 push	 eax
  020ba	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  020bd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  020c0	52		 push	 edx
  020c1	e8 00 00 00 00	 call	 _P_SpawnMobj
  020c6	83 c4 10	 add	 esp, 16			; 00000010H
$LN231@P_TouchSpe:

; 980  : 			P_GivePlayerRings(player, 1, (special->type == MT_FLINGCOIN));

  020c9	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  020cc	81 78 7c e2 00
	00 00		 cmp	 DWORD PTR [eax+124], 226 ; 000000e2H
  020d3	75 0c		 jne	 SHORT $LN376@P_TouchSpe
  020d5	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1456[ebp], 1
  020df	eb 0a		 jmp	 SHORT $LN377@P_TouchSpe
$LN376@P_TouchSpe:
  020e1	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1456[ebp], 0
$LN377@P_TouchSpe:
  020eb	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR tv1456[ebp]
  020f1	51		 push	 ecx
  020f2	6a 01		 push	 1
  020f4	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  020f7	52		 push	 edx
  020f8	e8 00 00 00 00	 call	 _P_GivePlayerRings
  020fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 981  : 
; 982  : 			if (maptol & TOL_NIGHTS)

  02100	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  02107	83 e0 40	 and	 eax, 64			; 00000040H
  0210a	74 0c		 je	 SHORT $LN232@P_TouchSpe

; 983  : 				P_DoNightsScore(player);

  0210c	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0210f	50		 push	 eax
  02110	e8 00 00 00 00	 call	 _P_DoNightsScore
  02115	83 c4 04	 add	 esp, 4
$LN232@P_TouchSpe:

; 984  : 			break;

  02118	e9 7c 17 00 00	 jmp	 $LN2@P_TouchSpe
$LN233@P_TouchSpe:

; 985  : 			// rings
; 986  : 		case MT_RING:
; 987  : 		case MT_FLINGRING:
; 988  : 			if (!(P_CanPickupItem(toucher->player, false)))

  0211d	6a 00		 push	 0
  0211f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02122	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02128	51		 push	 ecx
  02129	e8 00 00 00 00	 call	 _P_CanPickupItem
  0212e	83 c4 08	 add	 esp, 8
  02131	85 c0		 test	 eax, eax
  02133	75 05		 jne	 SHORT $LN235@P_TouchSpe

; 989  : 				return;

  02135	e9 af 17 00 00	 jmp	 $LN374@P_TouchSpe
$LN235@P_TouchSpe:

; 990  : 			if (mariomode)

  0213a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  02141	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02146	74 2d		 je	 SHORT $LN236@P_TouchSpe

; 991  : 				P_SpawnMobj(special->x,special->y,special->z, MT_SPARK)->momz = special->momz;

  02148	68 0d 01 00 00	 push	 269			; 0000010dH
  0214d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02150	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02153	51		 push	 ecx
  02154	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02157	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0215a	50		 push	 eax
  0215b	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0215e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02161	52		 push	 edx
  02162	e8 00 00 00 00	 call	 _P_SpawnMobj
  02167	83 c4 10	 add	 esp, 16			; 00000010H
  0216a	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0216d	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  02170	89 50 50	 mov	 DWORD PTR [eax+80], edx
  02173	eb 22		 jmp	 SHORT $LN237@P_TouchSpe
$LN236@P_TouchSpe:

; 992  : 			else
; 993  : 				P_SpawnMobj(special->x,special->y,special->z, MT_SPARK);

  02175	68 0d 01 00 00	 push	 269			; 0000010dH
  0217a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0217d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02180	51		 push	 ecx
  02181	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02184	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02187	50		 push	 eax
  02188	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0218b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0218e	52		 push	 edx
  0218f	e8 00 00 00 00	 call	 _P_SpawnMobj
  02194	83 c4 10	 add	 esp, 16			; 00000010H
$LN237@P_TouchSpe:

; 994  : 
; 995  : 			P_GivePlayerRings(player, 1, (special->type == MT_FLINGRING));

  02197	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0219a	83 78 7c 2c	 cmp	 DWORD PTR [eax+124], 44	; 0000002cH
  0219e	75 0c		 jne	 SHORT $LN378@P_TouchSpe
  021a0	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1491[ebp], 1
  021aa	eb 0a		 jmp	 SHORT $LN379@P_TouchSpe
$LN378@P_TouchSpe:
  021ac	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1491[ebp], 0
$LN379@P_TouchSpe:
  021b6	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR tv1491[ebp]
  021bc	51		 push	 ecx
  021bd	6a 01		 push	 1
  021bf	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  021c2	52		 push	 edx
  021c3	e8 00 00 00 00	 call	 _P_GivePlayerRings
  021c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 
; 997  : 			if (maptol & TOL_NIGHTS)

  021cb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  021d2	83 e0 40	 and	 eax, 64			; 00000040H
  021d5	74 0c		 je	 SHORT $LN238@P_TouchSpe

; 998  : 				P_DoNightsScore(player);

  021d7	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  021da	50		 push	 eax
  021db	e8 00 00 00 00	 call	 _P_DoNightsScore
  021e0	83 c4 04	 add	 esp, 4
$LN238@P_TouchSpe:

; 999  : 			break;

  021e3	e9 b1 16 00 00	 jmp	 $LN2@P_TouchSpe
$LN239@P_TouchSpe:

; 1000 : #ifdef BLUE_SPHERES
; 1001 : 		case MT_BLUEBALL:
; 1002 : 		case MT_FLINGBALL:
; 1003 : 			if (!(P_CanPickupItem(toucher->player, false)))
; 1004 : 				return;
; 1005 : 
; 1006 : 			P_GivePlayerRings(player, 1, (special->type == MT_FLINGBALL));
; 1007 : 			S_StartSound(player->mo, sfx_s3k_51);
; 1008 : 
; 1009 : 			//Toned-down paraloop effect for the sake of not bringing the player's CPU to its knees.
; 1010 : 			for (i = 0; i < 8; i++)
; 1011 : 				P_SpawnParaloop(special->x, special->y, special->z + special->height, 192*FRACUNIT, 8, MT_BLUEBALLSPARK, i*(ANGLE_22h), true, true);
; 1012 : 
; 1013 : 			P_SetMobjState(special, S_DISS);
; 1014 : 
; 1015 : 			if (maptol & TOL_NIGHTS)
; 1016 : 				P_DoNightsScore(player);
; 1017 : 			return;
; 1018 : 			break;
; 1019 : #endif
; 1020 : 		case MT_REDTEAMRING:
; 1021 : 			if (!(P_CanPickupItem(toucher->player, false)))

  021e8	6a 00		 push	 0
  021ea	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  021ed	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  021f3	51		 push	 ecx
  021f4	e8 00 00 00 00	 call	 _P_CanPickupItem
  021f9	83 c4 08	 add	 esp, 8
  021fc	85 c0		 test	 eax, eax
  021fe	75 05		 jne	 SHORT $LN240@P_TouchSpe

; 1022 : 				return;

  02200	e9 e4 16 00 00	 jmp	 $LN374@P_TouchSpe
$LN240@P_TouchSpe:

; 1023 : 			if (toucher->player->ctfteam != 1)

  02205	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02208	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0220e	83 b9 60 01 00
	00 01		 cmp	 DWORD PTR [ecx+352], 1
  02215	74 05		 je	 SHORT $LN241@P_TouchSpe

; 1024 : 				return;

  02217	e9 cd 16 00 00	 jmp	 $LN374@P_TouchSpe
$LN241@P_TouchSpe:

; 1025 : 			if (mariomode)

  0221c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  02223	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02228	74 2d		 je	 SHORT $LN242@P_TouchSpe

; 1026 : 				P_SpawnMobj(special->x,special->y,special->z, MT_SPARK)->momz = special->momz;

  0222a	68 0d 01 00 00	 push	 269			; 0000010dH
  0222f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02232	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02235	51		 push	 ecx
  02236	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02239	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0223c	50		 push	 eax
  0223d	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02240	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02243	52		 push	 edx
  02244	e8 00 00 00 00	 call	 _P_SpawnMobj
  02249	83 c4 10	 add	 esp, 16			; 00000010H
  0224c	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0224f	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  02252	89 50 50	 mov	 DWORD PTR [eax+80], edx
  02255	eb 22		 jmp	 SHORT $LN243@P_TouchSpe
$LN242@P_TouchSpe:

; 1027 : 			else
; 1028 : 				P_SpawnMobj(special->x,special->y,special->z, MT_SPARK);

  02257	68 0d 01 00 00	 push	 269			; 0000010dH
  0225c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0225f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02262	51		 push	 ecx
  02263	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02266	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02269	50		 push	 eax
  0226a	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0226d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02270	52		 push	 edx
  02271	e8 00 00 00 00	 call	 _P_SpawnMobj
  02276	83 c4 10	 add	 esp, 16			; 00000010H
$LN243@P_TouchSpe:

; 1029 : 			P_GivePlayerRings(player, 1, 0);

  02279	6a 00		 push	 0
  0227b	6a 01		 push	 1
  0227d	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02280	50		 push	 eax
  02281	e8 00 00 00 00	 call	 _P_GivePlayerRings
  02286	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1030 : 
; 1031 : 			if (maptol & TOL_NIGHTS)

  02289	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  02290	83 e0 40	 and	 eax, 64			; 00000040H
  02293	74 0c		 je	 SHORT $LN244@P_TouchSpe

; 1032 : 				P_DoNightsScore(player);

  02295	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02298	50		 push	 eax
  02299	e8 00 00 00 00	 call	 _P_DoNightsScore
  0229e	83 c4 04	 add	 esp, 4
$LN244@P_TouchSpe:

; 1033 : 			break;

  022a1	e9 f3 15 00 00	 jmp	 $LN2@P_TouchSpe
$LN245@P_TouchSpe:

; 1034 : 
; 1035 : 		case MT_BLUETEAMRING:
; 1036 : 			if (!(P_CanPickupItem(toucher->player, false)))

  022a6	6a 00		 push	 0
  022a8	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  022ab	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  022b1	51		 push	 ecx
  022b2	e8 00 00 00 00	 call	 _P_CanPickupItem
  022b7	83 c4 08	 add	 esp, 8
  022ba	85 c0		 test	 eax, eax
  022bc	75 05		 jne	 SHORT $LN246@P_TouchSpe

; 1037 : 				return;

  022be	e9 26 16 00 00	 jmp	 $LN374@P_TouchSpe
$LN246@P_TouchSpe:

; 1038 : 			if (toucher->player->ctfteam != 2)

  022c3	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  022c6	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  022cc	83 b9 60 01 00
	00 02		 cmp	 DWORD PTR [ecx+352], 2
  022d3	74 05		 je	 SHORT $LN247@P_TouchSpe

; 1039 : 				return;

  022d5	e9 0f 16 00 00	 jmp	 $LN374@P_TouchSpe
$LN247@P_TouchSpe:

; 1040 : 			if (mariomode)

  022da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  022e1	25 00 01 00 00	 and	 eax, 256		; 00000100H
  022e6	74 2d		 je	 SHORT $LN248@P_TouchSpe

; 1041 : 				P_SpawnMobj(special->x,special->y,special->z, MT_SPARK)->momz = special->momz;

  022e8	68 0d 01 00 00	 push	 269			; 0000010dH
  022ed	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  022f0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  022f3	51		 push	 ecx
  022f4	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  022f7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  022fa	50		 push	 eax
  022fb	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  022fe	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02301	52		 push	 edx
  02302	e8 00 00 00 00	 call	 _P_SpawnMobj
  02307	83 c4 10	 add	 esp, 16			; 00000010H
  0230a	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0230d	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  02310	89 50 50	 mov	 DWORD PTR [eax+80], edx
  02313	eb 22		 jmp	 SHORT $LN249@P_TouchSpe
$LN248@P_TouchSpe:

; 1042 : 			else
; 1043 : 				P_SpawnMobj(special->x,special->y,special->z, MT_SPARK);

  02315	68 0d 01 00 00	 push	 269			; 0000010dH
  0231a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0231d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02320	51		 push	 ecx
  02321	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02324	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02327	50		 push	 eax
  02328	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0232b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0232e	52		 push	 edx
  0232f	e8 00 00 00 00	 call	 _P_SpawnMobj
  02334	83 c4 10	 add	 esp, 16			; 00000010H
$LN249@P_TouchSpe:

; 1044 : 			P_GivePlayerRings(player, 1, 0);

  02337	6a 00		 push	 0
  02339	6a 01		 push	 1
  0233b	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0233e	50		 push	 eax
  0233f	e8 00 00 00 00	 call	 _P_GivePlayerRings
  02344	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1045 : 
; 1046 : 			if (maptol & TOL_NIGHTS)

  02347	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0234e	83 e0 40	 and	 eax, 64			; 00000040H
  02351	74 0c		 je	 SHORT $LN250@P_TouchSpe

; 1047 : 				P_DoNightsScore(player);

  02353	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02356	50		 push	 eax
  02357	e8 00 00 00 00	 call	 _P_DoNightsScore
  0235c	83 c4 04	 add	 esp, 4
$LN250@P_TouchSpe:

; 1048 : 			break;

  0235f	e9 35 15 00 00	 jmp	 $LN2@P_TouchSpe
$LN251@P_TouchSpe:

; 1049 : 
; 1050 : 		case MT_BOUNCEPICKUP:
; 1051 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02364	6a 01		 push	 1
  02366	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02369	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0236f	51		 push	 ecx
  02370	e8 00 00 00 00	 call	 _P_CanPickupItem
  02375	83 c4 08	 add	 esp, 8
  02378	85 c0		 test	 eax, eax
  0237a	75 05		 jne	 SHORT $LN252@P_TouchSpe

; 1052 : 				return;

  0237c	e9 68 15 00 00	 jmp	 $LN374@P_TouchSpe
$LN252@P_TouchSpe:

; 1053 : 			if ((player->ringweapons & RW_BOUNCE) && player->powers[pw_bouncering] > MAX_BOUNCE)

  02381	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02384	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  02387	83 e1 01	 and	 ecx, 1
  0238a	74 17		 je	 SHORT $LN253@P_TouchSpe
  0238c	b8 04 00 00 00	 mov	 eax, 4
  02391	6b c8 12	 imul	 ecx, eax, 18
  02394	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02397	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  0239c	7e 05		 jle	 SHORT $LN253@P_TouchSpe

; 1054 : 				return;

  0239e	e9 46 15 00 00	 jmp	 $LN374@P_TouchSpe
$LN253@P_TouchSpe:

; 1055 : 
; 1056 : 			player->powers[pw_bouncering] += special->reactiontime;

  023a3	b8 04 00 00 00	 mov	 eax, 4
  023a8	6b c8 12	 imul	 ecx, eax, 18
  023ab	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  023ae	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  023b2	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  023b5	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  023bb	ba 04 00 00 00	 mov	 edx, 4
  023c0	6b ca 12	 imul	 ecx, edx, 18
  023c3	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  023c6	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1057 : 
; 1058 : 			player->ringweapons |= RW_BOUNCE;

  023ca	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  023cd	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  023d0	83 c9 01	 or	 ecx, 1
  023d3	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  023d6	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 1059 : 
; 1060 : 			if (player->powers[pw_bouncering] > MAX_BOUNCE)

  023d9	b8 04 00 00 00	 mov	 eax, 4
  023de	6b c8 12	 imul	 ecx, eax, 18
  023e1	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  023e4	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  023e9	7e 13		 jle	 SHORT $LN254@P_TouchSpe

; 1061 : 				player->powers[pw_bouncering] = MAX_BOUNCE;

  023eb	b8 04 00 00 00	 mov	 eax, 4
  023f0	6b c8 12	 imul	 ecx, eax, 18
  023f3	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  023f6	c7 44 0a 38 64
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
$LN254@P_TouchSpe:

; 1062 : 
; 1063 : 			temp = P_SpawnMobj(special->x, special->y, special->z, special->type);

  023fe	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02401	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  02404	51		 push	 ecx
  02405	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02408	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0240b	50		 push	 eax
  0240c	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0240f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02412	52		 push	 edx
  02413	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02416	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02419	51		 push	 ecx
  0241a	e8 00 00 00 00	 call	 _P_SpawnMobj
  0241f	83 c4 10	 add	 esp, 16			; 00000010H
  02422	89 45 e8	 mov	 DWORD PTR _temp$[ebp], eax

; 1064 : 			temp->flags &= ~MF_SPECIAL;

  02425	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02428	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0242b	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0242e	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02431	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1065 : 			temp->health = 0;

  02434	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02437	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 1066 : 			temp->momz = FRACUNIT;

  02441	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02444	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1067 : 			temp->fuse = special->info->damage;

  0244b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0244e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02454	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02457	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  0245a	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 1068 : 
; 1069 : 			if (special->eflags & MFE_VERTICALFLIP)

  02460	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02463	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02469	83 e1 20	 and	 ecx, 32			; 00000020H
  0246c	74 0e		 je	 SHORT $LN255@P_TouchSpe

; 1070 : 				temp->momz = -temp->momz;

  0246e	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02471	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  02474	f7 d9		 neg	 ecx
  02476	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02479	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN255@P_TouchSpe:

; 1071 : 
; 1072 : 			P_SetMobjState(temp, special->info->raisestate);

  0247c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0247f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02485	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  02488	52		 push	 edx
  02489	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  0248c	50		 push	 eax
  0248d	e8 00 00 00 00	 call	 _P_SetMobjState
  02492	83 c4 08	 add	 esp, 8

; 1073 : 			S_StartSound(player->mo, sfx_ncitem);

  02495	6a 6b		 push	 107			; 0000006bH
  02497	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0249a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0249c	51		 push	 ecx
  0249d	e8 00 00 00 00	 call	 _S_StartSound
  024a2	83 c4 08	 add	 esp, 8

; 1074 : 			P_SetMobjState(special, S_DISS);

  024a5	68 4f 06 00 00	 push	 1615			; 0000064fH
  024aa	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  024ad	50		 push	 eax
  024ae	e8 00 00 00 00	 call	 _P_SetMobjState
  024b3	83 c4 08	 add	 esp, 8

; 1075 : 			return;

  024b6	e9 2e 14 00 00	 jmp	 $LN374@P_TouchSpe

; 1076 : 			break;

  024bb	e9 d9 13 00 00	 jmp	 $LN2@P_TouchSpe
$LN256@P_TouchSpe:

; 1077 : 		case MT_RAILPICKUP:
; 1078 : 			if (!(P_CanPickupItem(toucher->player, true)))

  024c0	6a 01		 push	 1
  024c2	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  024c5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  024cb	51		 push	 ecx
  024cc	e8 00 00 00 00	 call	 _P_CanPickupItem
  024d1	83 c4 08	 add	 esp, 8
  024d4	85 c0		 test	 eax, eax
  024d6	75 05		 jne	 SHORT $LN257@P_TouchSpe

; 1079 : 				return;

  024d8	e9 0c 14 00 00	 jmp	 $LN374@P_TouchSpe
$LN257@P_TouchSpe:

; 1080 : 			if ((player->ringweapons & RW_RAIL) && player->powers[pw_railring] > MAX_RAIL)

  024dd	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  024e0	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  024e3	83 e1 02	 and	 ecx, 2
  024e6	74 17		 je	 SHORT $LN258@P_TouchSpe
  024e8	b8 04 00 00 00	 mov	 eax, 4
  024ed	6b c8 13	 imul	 ecx, eax, 19
  024f0	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  024f3	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  024f8	7e 05		 jle	 SHORT $LN258@P_TouchSpe

; 1081 : 				return;

  024fa	e9 ea 13 00 00	 jmp	 $LN374@P_TouchSpe
$LN258@P_TouchSpe:

; 1082 : 
; 1083 : 			player->powers[pw_railring] += special->reactiontime;

  024ff	b8 04 00 00 00	 mov	 eax, 4
  02504	6b c8 13	 imul	 ecx, eax, 19
  02507	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0250a	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0250e	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02511	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  02517	ba 04 00 00 00	 mov	 edx, 4
  0251c	6b ca 13	 imul	 ecx, edx, 19
  0251f	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02522	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1084 : 
; 1085 : 			player->ringweapons |= RW_RAIL;

  02526	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02529	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0252c	83 c9 02	 or	 ecx, 2
  0252f	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02532	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 1086 : 
; 1087 : 			if (player->powers[pw_railring] > MAX_RAIL)

  02535	b8 04 00 00 00	 mov	 eax, 4
  0253a	6b c8 13	 imul	 ecx, eax, 19
  0253d	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02540	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02545	7e 13		 jle	 SHORT $LN259@P_TouchSpe

; 1088 : 				player->powers[pw_railring] = MAX_RAIL;

  02547	b8 04 00 00 00	 mov	 eax, 4
  0254c	6b c8 13	 imul	 ecx, eax, 19
  0254f	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02552	c7 44 0a 38 32
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
$LN259@P_TouchSpe:

; 1089 : 
; 1090 : 			temp = P_SpawnMobj(special->x, special->y, special->z, special->type);

  0255a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0255d	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  02560	51		 push	 ecx
  02561	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02564	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  02567	50		 push	 eax
  02568	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0256b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0256e	52		 push	 edx
  0256f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02572	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02575	51		 push	 ecx
  02576	e8 00 00 00 00	 call	 _P_SpawnMobj
  0257b	83 c4 10	 add	 esp, 16			; 00000010H
  0257e	89 45 e8	 mov	 DWORD PTR _temp$[ebp], eax

; 1091 : 			temp->flags &= ~MF_SPECIAL;

  02581	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02584	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  02587	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0258a	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  0258d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1092 : 			temp->health = 0;

  02590	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02593	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 1093 : 			temp->momz = FRACUNIT;

  0259d	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  025a0	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1094 : 			temp->fuse = special->info->damage;

  025a7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  025aa	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  025b0	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  025b3	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  025b6	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 1095 : 
; 1096 : 			if (special->eflags & MFE_VERTICALFLIP)

  025bc	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  025bf	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  025c5	83 e1 20	 and	 ecx, 32			; 00000020H
  025c8	74 0e		 je	 SHORT $LN260@P_TouchSpe

; 1097 : 				temp->momz = -temp->momz;

  025ca	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  025cd	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  025d0	f7 d9		 neg	 ecx
  025d2	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  025d5	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN260@P_TouchSpe:

; 1098 : 
; 1099 : 			P_SetMobjState(temp, special->info->raisestate);

  025d8	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  025db	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  025e1	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  025e4	52		 push	 edx
  025e5	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  025e8	50		 push	 eax
  025e9	e8 00 00 00 00	 call	 _P_SetMobjState
  025ee	83 c4 08	 add	 esp, 8

; 1100 : 			S_StartSound(player->mo, sfx_ncitem);

  025f1	6a 6b		 push	 107			; 0000006bH
  025f3	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  025f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  025f8	51		 push	 ecx
  025f9	e8 00 00 00 00	 call	 _S_StartSound
  025fe	83 c4 08	 add	 esp, 8

; 1101 : 			P_SetMobjState(special, S_DISS);

  02601	68 4f 06 00 00	 push	 1615			; 0000064fH
  02606	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02609	50		 push	 eax
  0260a	e8 00 00 00 00	 call	 _P_SetMobjState
  0260f	83 c4 08	 add	 esp, 8

; 1102 : 			return;

  02612	e9 d2 12 00 00	 jmp	 $LN374@P_TouchSpe

; 1103 : 			break;

  02617	e9 7d 12 00 00	 jmp	 $LN2@P_TouchSpe
$LN261@P_TouchSpe:

; 1104 : 		case MT_AUTOPICKUP:
; 1105 : 			if (!(P_CanPickupItem(toucher->player, true)))

  0261c	6a 01		 push	 1
  0261e	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02621	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02627	51		 push	 ecx
  02628	e8 00 00 00 00	 call	 _P_CanPickupItem
  0262d	83 c4 08	 add	 esp, 8
  02630	85 c0		 test	 eax, eax
  02632	75 05		 jne	 SHORT $LN262@P_TouchSpe

; 1106 : 				return;

  02634	e9 b0 12 00 00	 jmp	 $LN374@P_TouchSpe
$LN262@P_TouchSpe:

; 1107 : 			if ((player->ringweapons & RW_AUTO) && player->powers[pw_automaticring] > MAX_AUTOMATIC)

  02639	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0263c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0263f	83 e1 04	 and	 ecx, 4
  02642	74 1a		 je	 SHORT $LN263@P_TouchSpe
  02644	b8 04 00 00 00	 mov	 eax, 4
  02649	6b c8 14	 imul	 ecx, eax, 20
  0264c	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0264f	81 7c 0a 38 2c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 300 ; 0000012cH
  02657	7e 05		 jle	 SHORT $LN263@P_TouchSpe

; 1108 : 				return;

  02659	e9 8b 12 00 00	 jmp	 $LN374@P_TouchSpe
$LN263@P_TouchSpe:

; 1109 : 
; 1110 : 			player->powers[pw_automaticring] += special->reactiontime;

  0265e	b8 04 00 00 00	 mov	 eax, 4
  02663	6b c8 14	 imul	 ecx, eax, 20
  02666	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02669	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0266d	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02670	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  02676	ba 04 00 00 00	 mov	 edx, 4
  0267b	6b ca 14	 imul	 ecx, edx, 20
  0267e	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02681	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1111 : 
; 1112 : 			player->ringweapons |= RW_AUTO;

  02685	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02688	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0268b	83 c9 04	 or	 ecx, 4
  0268e	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02691	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 1113 : 
; 1114 : 			if (player->powers[pw_automaticring] > MAX_AUTOMATIC)

  02694	b8 04 00 00 00	 mov	 eax, 4
  02699	6b c8 14	 imul	 ecx, eax, 20
  0269c	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0269f	81 7c 0a 38 2c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 300 ; 0000012cH
  026a7	7e 13		 jle	 SHORT $LN264@P_TouchSpe

; 1115 : 				player->powers[pw_automaticring] = MAX_AUTOMATIC;

  026a9	b8 04 00 00 00	 mov	 eax, 4
  026ae	6b c8 14	 imul	 ecx, eax, 20
  026b1	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  026b4	c7 44 0a 38 2c
	01 00 00	 mov	 DWORD PTR [edx+ecx+56], 300 ; 0000012cH
$LN264@P_TouchSpe:

; 1116 : 
; 1117 : 			temp = P_SpawnMobj(special->x, special->y, special->z, special->type);

  026bc	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  026bf	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  026c2	51		 push	 ecx
  026c3	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  026c6	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  026c9	50		 push	 eax
  026ca	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  026cd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  026d0	52		 push	 edx
  026d1	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  026d4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  026d7	51		 push	 ecx
  026d8	e8 00 00 00 00	 call	 _P_SpawnMobj
  026dd	83 c4 10	 add	 esp, 16			; 00000010H
  026e0	89 45 e8	 mov	 DWORD PTR _temp$[ebp], eax

; 1118 : 			temp->flags &= ~MF_SPECIAL;

  026e3	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  026e6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  026e9	83 e1 fe	 and	 ecx, -2			; fffffffeH
  026ec	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  026ef	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1119 : 			temp->health = 0;

  026f2	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  026f5	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 1120 : 			temp->momz = FRACUNIT;

  026ff	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02702	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1121 : 			temp->fuse = special->info->damage;

  02709	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0270c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02712	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02715	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  02718	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 1122 : 
; 1123 : 			if (special->eflags & MFE_VERTICALFLIP)

  0271e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02721	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02727	83 e1 20	 and	 ecx, 32			; 00000020H
  0272a	74 0e		 je	 SHORT $LN265@P_TouchSpe

; 1124 : 				temp->momz = -temp->momz;

  0272c	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  0272f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  02732	f7 d9		 neg	 ecx
  02734	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02737	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN265@P_TouchSpe:

; 1125 : 
; 1126 : 			P_SetMobjState(temp, special->info->raisestate);

  0273a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0273d	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02743	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  02746	52		 push	 edx
  02747	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  0274a	50		 push	 eax
  0274b	e8 00 00 00 00	 call	 _P_SetMobjState
  02750	83 c4 08	 add	 esp, 8

; 1127 : 			S_StartSound(player->mo, sfx_ncitem);

  02753	6a 6b		 push	 107			; 0000006bH
  02755	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02758	8b 08		 mov	 ecx, DWORD PTR [eax]
  0275a	51		 push	 ecx
  0275b	e8 00 00 00 00	 call	 _S_StartSound
  02760	83 c4 08	 add	 esp, 8

; 1128 : 			P_SetMobjState(special, S_DISS);

  02763	68 4f 06 00 00	 push	 1615			; 0000064fH
  02768	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0276b	50		 push	 eax
  0276c	e8 00 00 00 00	 call	 _P_SetMobjState
  02771	83 c4 08	 add	 esp, 8

; 1129 : 			return;

  02774	e9 70 11 00 00	 jmp	 $LN374@P_TouchSpe

; 1130 : 			break;

  02779	e9 1b 11 00 00	 jmp	 $LN2@P_TouchSpe
$LN266@P_TouchSpe:

; 1131 : 		case MT_EXPLODEPICKUP:
; 1132 : 			if (!(P_CanPickupItem(toucher->player, true)))

  0277e	6a 01		 push	 1
  02780	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02783	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02789	51		 push	 ecx
  0278a	e8 00 00 00 00	 call	 _P_CanPickupItem
  0278f	83 c4 08	 add	 esp, 8
  02792	85 c0		 test	 eax, eax
  02794	75 05		 jne	 SHORT $LN267@P_TouchSpe

; 1133 : 				return;

  02796	e9 4e 11 00 00	 jmp	 $LN374@P_TouchSpe
$LN267@P_TouchSpe:

; 1134 : 			if ((player->ringweapons & RW_EXPLODE) && player->powers[pw_explosionring] > MAX_EXPLOSION)

  0279b	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0279e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  027a1	83 e1 08	 and	 ecx, 8
  027a4	74 17		 je	 SHORT $LN268@P_TouchSpe
  027a6	b8 04 00 00 00	 mov	 eax, 4
  027ab	6b c8 15	 imul	 ecx, eax, 21
  027ae	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  027b1	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  027b6	7e 05		 jle	 SHORT $LN268@P_TouchSpe

; 1135 : 				return;

  027b8	e9 2c 11 00 00	 jmp	 $LN374@P_TouchSpe
$LN268@P_TouchSpe:

; 1136 : 
; 1137 : 			player->powers[pw_explosionring] += special->reactiontime;

  027bd	b8 04 00 00 00	 mov	 eax, 4
  027c2	6b c8 15	 imul	 ecx, eax, 21
  027c5	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  027c8	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  027cc	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  027cf	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  027d5	ba 04 00 00 00	 mov	 edx, 4
  027da	6b ca 15	 imul	 ecx, edx, 21
  027dd	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  027e0	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1138 : 
; 1139 : 			player->ringweapons |= RW_EXPLODE;

  027e4	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  027e7	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  027ea	83 c9 08	 or	 ecx, 8
  027ed	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  027f0	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 1140 : 
; 1141 : 			if (player->powers[pw_explosionring] > MAX_EXPLOSION)

  027f3	b8 04 00 00 00	 mov	 eax, 4
  027f8	6b c8 15	 imul	 ecx, eax, 21
  027fb	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  027fe	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02803	7e 13		 jle	 SHORT $LN269@P_TouchSpe

; 1142 : 				player->powers[pw_explosionring] = MAX_EXPLOSION;

  02805	b8 04 00 00 00	 mov	 eax, 4
  0280a	6b c8 15	 imul	 ecx, eax, 21
  0280d	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02810	c7 44 0a 38 32
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
$LN269@P_TouchSpe:

; 1143 : 
; 1144 : 			temp = P_SpawnMobj(special->x, special->y, special->z, special->type);

  02818	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0281b	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0281e	51		 push	 ecx
  0281f	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02822	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  02825	50		 push	 eax
  02826	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02829	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0282c	52		 push	 edx
  0282d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02830	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02833	51		 push	 ecx
  02834	e8 00 00 00 00	 call	 _P_SpawnMobj
  02839	83 c4 10	 add	 esp, 16			; 00000010H
  0283c	89 45 e8	 mov	 DWORD PTR _temp$[ebp], eax

; 1145 : 			temp->flags &= ~MF_SPECIAL;

  0283f	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02842	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  02845	83 e1 fe	 and	 ecx, -2			; fffffffeH
  02848	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  0284b	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1146 : 			temp->health = 0;

  0284e	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02851	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 1147 : 			temp->momz = FRACUNIT;

  0285b	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  0285e	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1148 : 			temp->fuse = special->info->damage;

  02865	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02868	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0286e	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02871	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  02874	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 1149 : 
; 1150 : 			if (special->eflags & MFE_VERTICALFLIP)

  0287a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0287d	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02883	83 e1 20	 and	 ecx, 32			; 00000020H
  02886	74 0e		 je	 SHORT $LN270@P_TouchSpe

; 1151 : 				temp->momz = -temp->momz;

  02888	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  0288b	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0288e	f7 d9		 neg	 ecx
  02890	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02893	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN270@P_TouchSpe:

; 1152 : 
; 1153 : 			P_SetMobjState(temp, special->info->raisestate);

  02896	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02899	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0289f	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  028a2	52		 push	 edx
  028a3	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  028a6	50		 push	 eax
  028a7	e8 00 00 00 00	 call	 _P_SetMobjState
  028ac	83 c4 08	 add	 esp, 8

; 1154 : 			S_StartSound(player->mo, sfx_ncitem);

  028af	6a 6b		 push	 107			; 0000006bH
  028b1	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  028b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  028b6	51		 push	 ecx
  028b7	e8 00 00 00 00	 call	 _S_StartSound
  028bc	83 c4 08	 add	 esp, 8

; 1155 : 			P_SetMobjState(special, S_DISS);

  028bf	68 4f 06 00 00	 push	 1615			; 0000064fH
  028c4	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  028c7	50		 push	 eax
  028c8	e8 00 00 00 00	 call	 _P_SetMobjState
  028cd	83 c4 08	 add	 esp, 8

; 1156 : 			return;

  028d0	e9 14 10 00 00	 jmp	 $LN374@P_TouchSpe

; 1157 : 			break;

  028d5	e9 bf 0f 00 00	 jmp	 $LN2@P_TouchSpe
$LN271@P_TouchSpe:

; 1158 : 		case MT_SCATTERPICKUP:
; 1159 : 			if (!(P_CanPickupItem(toucher->player, true)))

  028da	6a 01		 push	 1
  028dc	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  028df	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  028e5	51		 push	 ecx
  028e6	e8 00 00 00 00	 call	 _P_CanPickupItem
  028eb	83 c4 08	 add	 esp, 8
  028ee	85 c0		 test	 eax, eax
  028f0	75 05		 jne	 SHORT $LN272@P_TouchSpe

; 1160 : 				return;

  028f2	e9 f2 0f 00 00	 jmp	 $LN374@P_TouchSpe
$LN272@P_TouchSpe:

; 1161 : 			if ((player->ringweapons & RW_SCATTER) && player->powers[pw_scatterring] > MAX_SCATTER)

  028f7	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  028fa	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  028fd	83 e1 10	 and	 ecx, 16			; 00000010H
  02900	74 17		 je	 SHORT $LN273@P_TouchSpe
  02902	b8 04 00 00 00	 mov	 eax, 4
  02907	6b c8 16	 imul	 ecx, eax, 22
  0290a	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0290d	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  02912	7e 05		 jle	 SHORT $LN273@P_TouchSpe

; 1162 : 				return;

  02914	e9 d0 0f 00 00	 jmp	 $LN374@P_TouchSpe
$LN273@P_TouchSpe:

; 1163 : 
; 1164 : 			player->powers[pw_scatterring] += special->reactiontime;

  02919	b8 04 00 00 00	 mov	 eax, 4
  0291e	6b c8 16	 imul	 ecx, eax, 22
  02921	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02924	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02928	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0292b	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  02931	ba 04 00 00 00	 mov	 edx, 4
  02936	6b ca 16	 imul	 ecx, edx, 22
  02939	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0293c	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1165 : 
; 1166 : 			player->ringweapons |= RW_SCATTER;

  02940	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02943	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  02946	83 c9 10	 or	 ecx, 16			; 00000010H
  02949	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0294c	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 1167 : 
; 1168 : 			if (player->powers[pw_scatterring] > MAX_SCATTER)

  0294f	b8 04 00 00 00	 mov	 eax, 4
  02954	6b c8 16	 imul	 ecx, eax, 22
  02957	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0295a	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  0295f	7e 13		 jle	 SHORT $LN274@P_TouchSpe

; 1169 : 				player->powers[pw_scatterring] = MAX_SCATTER;

  02961	b8 04 00 00 00	 mov	 eax, 4
  02966	6b c8 16	 imul	 ecx, eax, 22
  02969	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0296c	c7 44 0a 38 64
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
$LN274@P_TouchSpe:

; 1170 : 
; 1171 : 			temp = P_SpawnMobj(special->x, special->y, special->z, special->type);

  02974	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02977	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0297a	51		 push	 ecx
  0297b	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0297e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  02981	50		 push	 eax
  02982	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02985	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02988	52		 push	 edx
  02989	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0298c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0298f	51		 push	 ecx
  02990	e8 00 00 00 00	 call	 _P_SpawnMobj
  02995	83 c4 10	 add	 esp, 16			; 00000010H
  02998	89 45 e8	 mov	 DWORD PTR _temp$[ebp], eax

; 1172 : 			temp->flags &= ~MF_SPECIAL;

  0299b	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  0299e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  029a1	83 e1 fe	 and	 ecx, -2			; fffffffeH
  029a4	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  029a7	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1173 : 			temp->health = 0;

  029aa	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  029ad	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 1174 : 			temp->momz = FRACUNIT;

  029b7	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  029ba	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1175 : 			temp->fuse = special->info->damage;

  029c1	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  029c4	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  029ca	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  029cd	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  029d0	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 1176 : 
; 1177 : 			if (special->eflags & MFE_VERTICALFLIP)

  029d6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  029d9	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  029df	83 e1 20	 and	 ecx, 32			; 00000020H
  029e2	74 0e		 je	 SHORT $LN275@P_TouchSpe

; 1178 : 				temp->momz = -temp->momz;

  029e4	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  029e7	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  029ea	f7 d9		 neg	 ecx
  029ec	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  029ef	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN275@P_TouchSpe:

; 1179 : 
; 1180 : 			P_SetMobjState(temp, special->info->raisestate);

  029f2	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  029f5	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  029fb	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  029fe	52		 push	 edx
  029ff	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02a02	50		 push	 eax
  02a03	e8 00 00 00 00	 call	 _P_SetMobjState
  02a08	83 c4 08	 add	 esp, 8

; 1181 : 			S_StartSound(player->mo, sfx_ncitem);

  02a0b	6a 6b		 push	 107			; 0000006bH
  02a0d	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02a10	8b 08		 mov	 ecx, DWORD PTR [eax]
  02a12	51		 push	 ecx
  02a13	e8 00 00 00 00	 call	 _S_StartSound
  02a18	83 c4 08	 add	 esp, 8

; 1182 : 			P_SetMobjState(special, S_DISS);

  02a1b	68 4f 06 00 00	 push	 1615			; 0000064fH
  02a20	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02a23	50		 push	 eax
  02a24	e8 00 00 00 00	 call	 _P_SetMobjState
  02a29	83 c4 08	 add	 esp, 8

; 1183 : 			return;

  02a2c	e9 b8 0e 00 00	 jmp	 $LN374@P_TouchSpe

; 1184 : 			break;

  02a31	e9 63 0e 00 00	 jmp	 $LN2@P_TouchSpe
$LN276@P_TouchSpe:

; 1185 : 		case MT_GRENADEPICKUP:
; 1186 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02a36	6a 01		 push	 1
  02a38	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02a3b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02a41	51		 push	 ecx
  02a42	e8 00 00 00 00	 call	 _P_CanPickupItem
  02a47	83 c4 08	 add	 esp, 8
  02a4a	85 c0		 test	 eax, eax
  02a4c	75 05		 jne	 SHORT $LN277@P_TouchSpe

; 1187 : 				return;

  02a4e	e9 96 0e 00 00	 jmp	 $LN374@P_TouchSpe
$LN277@P_TouchSpe:

; 1188 : 			if ((player->ringweapons & RW_GRENADE) && player->powers[pw_grenadering] > MAX_GRENADE)

  02a53	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02a56	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  02a59	83 e1 20	 and	 ecx, 32			; 00000020H
  02a5c	74 17		 je	 SHORT $LN278@P_TouchSpe
  02a5e	b8 04 00 00 00	 mov	 eax, 4
  02a63	6b c8 17	 imul	 ecx, eax, 23
  02a66	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02a69	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02a6e	7e 05		 jle	 SHORT $LN278@P_TouchSpe

; 1189 : 				return;

  02a70	e9 74 0e 00 00	 jmp	 $LN374@P_TouchSpe
$LN278@P_TouchSpe:

; 1190 : 
; 1191 : 			player->powers[pw_grenadering] += special->reactiontime;

  02a75	b8 04 00 00 00	 mov	 eax, 4
  02a7a	6b c8 17	 imul	 ecx, eax, 23
  02a7d	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02a80	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02a84	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02a87	03 81 9c 00 00
	00		 add	 eax, DWORD PTR [ecx+156]
  02a8d	ba 04 00 00 00	 mov	 edx, 4
  02a92	6b ca 17	 imul	 ecx, edx, 23
  02a95	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02a98	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1192 : 
; 1193 : 			player->ringweapons |= RW_GRENADE;

  02a9c	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02a9f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  02aa2	83 c9 20	 or	 ecx, 32			; 00000020H
  02aa5	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02aa8	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 1194 : 
; 1195 : 			if (player->powers[pw_grenadering] > MAX_GRENADE)

  02aab	b8 04 00 00 00	 mov	 eax, 4
  02ab0	6b c8 17	 imul	 ecx, eax, 23
  02ab3	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02ab6	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02abb	7e 13		 jle	 SHORT $LN279@P_TouchSpe

; 1196 : 				player->powers[pw_grenadering] = MAX_GRENADE;

  02abd	b8 04 00 00 00	 mov	 eax, 4
  02ac2	6b c8 17	 imul	 ecx, eax, 23
  02ac5	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02ac8	c7 44 0a 38 32
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
$LN279@P_TouchSpe:

; 1197 : 
; 1198 : 			temp = P_SpawnMobj(special->x, special->y, special->z, special->type);

  02ad0	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02ad3	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  02ad6	51		 push	 ecx
  02ad7	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02ada	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  02add	50		 push	 eax
  02ade	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02ae1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  02ae4	52		 push	 edx
  02ae5	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02ae8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  02aeb	51		 push	 ecx
  02aec	e8 00 00 00 00	 call	 _P_SpawnMobj
  02af1	83 c4 10	 add	 esp, 16			; 00000010H
  02af4	89 45 e8	 mov	 DWORD PTR _temp$[ebp], eax

; 1199 : 			temp->flags &= ~MF_SPECIAL;

  02af7	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02afa	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  02afd	83 e1 fe	 and	 ecx, -2			; fffffffeH
  02b00	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02b03	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1200 : 			temp->health = 0;

  02b06	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02b09	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 1201 : 			temp->momz = FRACUNIT;

  02b13	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02b16	c7 40 50 00 00
	01 00		 mov	 DWORD PTR [eax+80], 65536 ; 00010000H

; 1202 : 			temp->fuse = special->info->damage;

  02b1d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02b20	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02b26	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02b29	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  02b2c	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax

; 1203 : 
; 1204 : 			if (special->eflags & MFE_VERTICALFLIP)

  02b32	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02b35	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  02b3b	83 e1 20	 and	 ecx, 32			; 00000020H
  02b3e	74 0e		 je	 SHORT $LN280@P_TouchSpe

; 1205 : 				temp->momz = -temp->momz;

  02b40	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02b43	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  02b46	f7 d9		 neg	 ecx
  02b48	8b 55 e8	 mov	 edx, DWORD PTR _temp$[ebp]
  02b4b	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN280@P_TouchSpe:

; 1206 : 
; 1207 : 			P_SetMobjState(temp, special->info->raisestate);

  02b4e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02b51	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  02b57	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  02b5a	52		 push	 edx
  02b5b	8b 45 e8	 mov	 eax, DWORD PTR _temp$[ebp]
  02b5e	50		 push	 eax
  02b5f	e8 00 00 00 00	 call	 _P_SetMobjState
  02b64	83 c4 08	 add	 esp, 8

; 1208 : 			S_StartSound(player->mo, sfx_ncitem);

  02b67	6a 6b		 push	 107			; 0000006bH
  02b69	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02b6c	8b 08		 mov	 ecx, DWORD PTR [eax]
  02b6e	51		 push	 ecx
  02b6f	e8 00 00 00 00	 call	 _S_StartSound
  02b74	83 c4 08	 add	 esp, 8

; 1209 : 			P_SetMobjState(special, S_DISS);

  02b77	68 4f 06 00 00	 push	 1615			; 0000064fH
  02b7c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02b7f	50		 push	 eax
  02b80	e8 00 00 00 00	 call	 _P_SetMobjState
  02b85	83 c4 08	 add	 esp, 8

; 1210 : 			return;

  02b88	e9 5c 0d 00 00	 jmp	 $LN374@P_TouchSpe

; 1211 : 			break;

  02b8d	e9 07 0d 00 00	 jmp	 $LN2@P_TouchSpe
$LN281@P_TouchSpe:

; 1212 : 
; 1213 : 		case MT_BOUNCERING:
; 1214 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02b92	6a 01		 push	 1
  02b94	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02b97	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02b9d	51		 push	 ecx
  02b9e	e8 00 00 00 00	 call	 _P_CanPickupItem
  02ba3	83 c4 08	 add	 esp, 8
  02ba6	85 c0		 test	 eax, eax
  02ba8	75 05		 jne	 SHORT $LN282@P_TouchSpe

; 1215 : 				return;

  02baa	e9 3a 0d 00 00	 jmp	 $LN374@P_TouchSpe
$LN282@P_TouchSpe:

; 1216 : 			if (player->powers[pw_bouncering] > MAX_BOUNCE)

  02baf	b8 04 00 00 00	 mov	 eax, 4
  02bb4	6b c8 12	 imul	 ecx, eax, 18
  02bb7	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02bba	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  02bbf	7e 05		 jle	 SHORT $LN283@P_TouchSpe

; 1217 : 				return;

  02bc1	e9 23 0d 00 00	 jmp	 $LN374@P_TouchSpe
$LN283@P_TouchSpe:

; 1218 : 
; 1219 : 			P_SpawnMobj(special->x,special->y,special->z, MT_SPARK);

  02bc6	68 0d 01 00 00	 push	 269			; 0000010dH
  02bcb	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02bce	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02bd1	51		 push	 ecx
  02bd2	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02bd5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02bd8	50		 push	 eax
  02bd9	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02bdc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02bdf	52		 push	 edx
  02be0	e8 00 00 00 00	 call	 _P_SpawnMobj
  02be5	83 c4 10	 add	 esp, 16			; 00000010H

; 1220 : 			player->powers[pw_bouncering] += special->health;

  02be8	b8 04 00 00 00	 mov	 eax, 4
  02bed	6b c8 12	 imul	 ecx, eax, 18
  02bf0	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02bf3	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02bf7	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02bfa	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  02c00	ba 04 00 00 00	 mov	 edx, 4
  02c05	6b ca 12	 imul	 ecx, edx, 18
  02c08	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02c0b	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1221 : 			if (player->powers[pw_bouncering] > MAX_BOUNCE)

  02c0f	b8 04 00 00 00	 mov	 eax, 4
  02c14	6b c8 12	 imul	 ecx, eax, 18
  02c17	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02c1a	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  02c1f	7e 13		 jle	 SHORT $LN284@P_TouchSpe

; 1222 : 				player->powers[pw_bouncering] = MAX_BOUNCE;

  02c21	b8 04 00 00 00	 mov	 eax, 4
  02c26	6b c8 12	 imul	 ecx, eax, 18
  02c29	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02c2c	c7 44 0a 38 64
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
$LN284@P_TouchSpe:

; 1223 : 			break;

  02c34	e9 60 0c 00 00	 jmp	 $LN2@P_TouchSpe
$LN285@P_TouchSpe:

; 1224 : 		case MT_RAILRING:
; 1225 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02c39	6a 01		 push	 1
  02c3b	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02c3e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02c44	51		 push	 ecx
  02c45	e8 00 00 00 00	 call	 _P_CanPickupItem
  02c4a	83 c4 08	 add	 esp, 8
  02c4d	85 c0		 test	 eax, eax
  02c4f	75 05		 jne	 SHORT $LN286@P_TouchSpe

; 1226 : 				return;

  02c51	e9 93 0c 00 00	 jmp	 $LN374@P_TouchSpe
$LN286@P_TouchSpe:

; 1227 : 			if (player->powers[pw_railring] > MAX_RAIL)

  02c56	b8 04 00 00 00	 mov	 eax, 4
  02c5b	6b c8 13	 imul	 ecx, eax, 19
  02c5e	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02c61	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02c66	7e 05		 jle	 SHORT $LN287@P_TouchSpe

; 1228 : 				return;

  02c68	e9 7c 0c 00 00	 jmp	 $LN374@P_TouchSpe
$LN287@P_TouchSpe:

; 1229 : 
; 1230 : 			P_SpawnMobj(special->x,special->y,special->z, MT_SPARK);

  02c6d	68 0d 01 00 00	 push	 269			; 0000010dH
  02c72	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02c75	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02c78	51		 push	 ecx
  02c79	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02c7c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02c7f	50		 push	 eax
  02c80	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02c83	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02c86	52		 push	 edx
  02c87	e8 00 00 00 00	 call	 _P_SpawnMobj
  02c8c	83 c4 10	 add	 esp, 16			; 00000010H

; 1231 : 			player->powers[pw_railring] += special->health;

  02c8f	b8 04 00 00 00	 mov	 eax, 4
  02c94	6b c8 13	 imul	 ecx, eax, 19
  02c97	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02c9a	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02c9e	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02ca1	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  02ca7	ba 04 00 00 00	 mov	 edx, 4
  02cac	6b ca 13	 imul	 ecx, edx, 19
  02caf	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02cb2	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1232 : 			if (player->powers[pw_railring] > MAX_RAIL)

  02cb6	b8 04 00 00 00	 mov	 eax, 4
  02cbb	6b c8 13	 imul	 ecx, eax, 19
  02cbe	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02cc1	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02cc6	7e 13		 jle	 SHORT $LN288@P_TouchSpe

; 1233 : 				player->powers[pw_railring] = MAX_RAIL;

  02cc8	b8 04 00 00 00	 mov	 eax, 4
  02ccd	6b c8 13	 imul	 ecx, eax, 19
  02cd0	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02cd3	c7 44 0a 38 32
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
$LN288@P_TouchSpe:

; 1234 : 			break;

  02cdb	e9 b9 0b 00 00	 jmp	 $LN2@P_TouchSpe
$LN289@P_TouchSpe:

; 1235 : 		case MT_AUTOMATICRING:
; 1236 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02ce0	6a 01		 push	 1
  02ce2	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02ce5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02ceb	51		 push	 ecx
  02cec	e8 00 00 00 00	 call	 _P_CanPickupItem
  02cf1	83 c4 08	 add	 esp, 8
  02cf4	85 c0		 test	 eax, eax
  02cf6	75 05		 jne	 SHORT $LN290@P_TouchSpe

; 1237 : 				return;

  02cf8	e9 ec 0b 00 00	 jmp	 $LN374@P_TouchSpe
$LN290@P_TouchSpe:

; 1238 : 			if (player->powers[pw_automaticring] > MAX_AUTOMATIC)

  02cfd	b8 04 00 00 00	 mov	 eax, 4
  02d02	6b c8 14	 imul	 ecx, eax, 20
  02d05	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02d08	81 7c 0a 38 2c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 300 ; 0000012cH
  02d10	7e 05		 jle	 SHORT $LN291@P_TouchSpe

; 1239 : 				return;

  02d12	e9 d2 0b 00 00	 jmp	 $LN374@P_TouchSpe
$LN291@P_TouchSpe:

; 1240 : 
; 1241 : 			P_SpawnMobj(special->x,special->y,special->z, MT_SPARK);

  02d17	68 0d 01 00 00	 push	 269			; 0000010dH
  02d1c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02d1f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02d22	51		 push	 ecx
  02d23	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02d26	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02d29	50		 push	 eax
  02d2a	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02d2d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02d30	52		 push	 edx
  02d31	e8 00 00 00 00	 call	 _P_SpawnMobj
  02d36	83 c4 10	 add	 esp, 16			; 00000010H

; 1242 : 			player->powers[pw_automaticring] += special->health;

  02d39	b8 04 00 00 00	 mov	 eax, 4
  02d3e	6b c8 14	 imul	 ecx, eax, 20
  02d41	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02d44	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02d48	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02d4b	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  02d51	ba 04 00 00 00	 mov	 edx, 4
  02d56	6b ca 14	 imul	 ecx, edx, 20
  02d59	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02d5c	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1243 : 			if (player->powers[pw_automaticring] > MAX_AUTOMATIC)

  02d60	b8 04 00 00 00	 mov	 eax, 4
  02d65	6b c8 14	 imul	 ecx, eax, 20
  02d68	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02d6b	81 7c 0a 38 2c
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 300 ; 0000012cH
  02d73	7e 13		 jle	 SHORT $LN292@P_TouchSpe

; 1244 : 				player->powers[pw_automaticring] = MAX_AUTOMATIC;

  02d75	b8 04 00 00 00	 mov	 eax, 4
  02d7a	6b c8 14	 imul	 ecx, eax, 20
  02d7d	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02d80	c7 44 0a 38 2c
	01 00 00	 mov	 DWORD PTR [edx+ecx+56], 300 ; 0000012cH
$LN292@P_TouchSpe:

; 1245 : 			break;

  02d88	e9 0c 0b 00 00	 jmp	 $LN2@P_TouchSpe
$LN293@P_TouchSpe:

; 1246 : 		case MT_EXPLOSIONRING:
; 1247 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02d8d	6a 01		 push	 1
  02d8f	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02d92	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02d98	51		 push	 ecx
  02d99	e8 00 00 00 00	 call	 _P_CanPickupItem
  02d9e	83 c4 08	 add	 esp, 8
  02da1	85 c0		 test	 eax, eax
  02da3	75 05		 jne	 SHORT $LN294@P_TouchSpe

; 1248 : 				return;

  02da5	e9 3f 0b 00 00	 jmp	 $LN374@P_TouchSpe
$LN294@P_TouchSpe:

; 1249 : 			if (player->powers[pw_explosionring] > MAX_EXPLOSION)

  02daa	b8 04 00 00 00	 mov	 eax, 4
  02daf	6b c8 15	 imul	 ecx, eax, 21
  02db2	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02db5	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02dba	7e 05		 jle	 SHORT $LN295@P_TouchSpe

; 1250 : 				return;

  02dbc	e9 28 0b 00 00	 jmp	 $LN374@P_TouchSpe
$LN295@P_TouchSpe:

; 1251 : 
; 1252 : 			P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  02dc1	68 0d 01 00 00	 push	 269			; 0000010dH
  02dc6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02dc9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02dcc	51		 push	 ecx
  02dcd	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02dd0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02dd3	50		 push	 eax
  02dd4	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02dd7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02dda	52		 push	 edx
  02ddb	e8 00 00 00 00	 call	 _P_SpawnMobj
  02de0	83 c4 10	 add	 esp, 16			; 00000010H

; 1253 : 			player->powers[pw_explosionring] += special->health;

  02de3	b8 04 00 00 00	 mov	 eax, 4
  02de8	6b c8 15	 imul	 ecx, eax, 21
  02deb	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02dee	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02df2	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02df5	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  02dfb	ba 04 00 00 00	 mov	 edx, 4
  02e00	6b ca 15	 imul	 ecx, edx, 21
  02e03	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02e06	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1254 : 			if (player->powers[pw_explosionring] > MAX_EXPLOSION)

  02e0a	b8 04 00 00 00	 mov	 eax, 4
  02e0f	6b c8 15	 imul	 ecx, eax, 21
  02e12	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02e15	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02e1a	7e 13		 jle	 SHORT $LN296@P_TouchSpe

; 1255 : 				player->powers[pw_explosionring] = MAX_EXPLOSION;

  02e1c	b8 04 00 00 00	 mov	 eax, 4
  02e21	6b c8 15	 imul	 ecx, eax, 21
  02e24	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02e27	c7 44 0a 38 32
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
$LN296@P_TouchSpe:

; 1256 : 			break;

  02e2f	e9 65 0a 00 00	 jmp	 $LN2@P_TouchSpe
$LN297@P_TouchSpe:

; 1257 : 		case MT_SCATTERRING:
; 1258 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02e34	6a 01		 push	 1
  02e36	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02e39	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02e3f	51		 push	 ecx
  02e40	e8 00 00 00 00	 call	 _P_CanPickupItem
  02e45	83 c4 08	 add	 esp, 8
  02e48	85 c0		 test	 eax, eax
  02e4a	75 05		 jne	 SHORT $LN298@P_TouchSpe

; 1259 : 				return;

  02e4c	e9 98 0a 00 00	 jmp	 $LN374@P_TouchSpe
$LN298@P_TouchSpe:

; 1260 : 			if (player->powers[pw_scatterring] > MAX_SCATTER)

  02e51	b8 04 00 00 00	 mov	 eax, 4
  02e56	6b c8 16	 imul	 ecx, eax, 22
  02e59	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02e5c	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  02e61	7e 05		 jle	 SHORT $LN299@P_TouchSpe

; 1261 : 				return;

  02e63	e9 81 0a 00 00	 jmp	 $LN374@P_TouchSpe
$LN299@P_TouchSpe:

; 1262 : 
; 1263 : 			P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  02e68	68 0d 01 00 00	 push	 269			; 0000010dH
  02e6d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02e70	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02e73	51		 push	 ecx
  02e74	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02e77	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02e7a	50		 push	 eax
  02e7b	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02e7e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02e81	52		 push	 edx
  02e82	e8 00 00 00 00	 call	 _P_SpawnMobj
  02e87	83 c4 10	 add	 esp, 16			; 00000010H

; 1264 : 			player->powers[pw_scatterring] += special->health;

  02e8a	b8 04 00 00 00	 mov	 eax, 4
  02e8f	6b c8 16	 imul	 ecx, eax, 22
  02e92	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02e95	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02e99	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02e9c	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  02ea2	ba 04 00 00 00	 mov	 edx, 4
  02ea7	6b ca 16	 imul	 ecx, edx, 22
  02eaa	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02ead	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1265 : 			if (player->powers[pw_scatterring] > MAX_SCATTER)

  02eb1	b8 04 00 00 00	 mov	 eax, 4
  02eb6	6b c8 16	 imul	 ecx, eax, 22
  02eb9	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02ebc	83 7c 0a 38 64	 cmp	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
  02ec1	7e 13		 jle	 SHORT $LN300@P_TouchSpe

; 1266 : 				player->powers[pw_scatterring] = MAX_SCATTER;

  02ec3	b8 04 00 00 00	 mov	 eax, 4
  02ec8	6b c8 16	 imul	 ecx, eax, 22
  02ecb	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02ece	c7 44 0a 38 64
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 100 ; 00000064H
$LN300@P_TouchSpe:

; 1267 : 			break;

  02ed6	e9 be 09 00 00	 jmp	 $LN2@P_TouchSpe
$LN301@P_TouchSpe:

; 1268 : 		case MT_GRENADERING:
; 1269 : 			if (!(P_CanPickupItem(toucher->player, true)))

  02edb	6a 01		 push	 1
  02edd	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02ee0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02ee6	51		 push	 ecx
  02ee7	e8 00 00 00 00	 call	 _P_CanPickupItem
  02eec	83 c4 08	 add	 esp, 8
  02eef	85 c0		 test	 eax, eax
  02ef1	75 05		 jne	 SHORT $LN302@P_TouchSpe

; 1270 : 				return;

  02ef3	e9 f1 09 00 00	 jmp	 $LN374@P_TouchSpe
$LN302@P_TouchSpe:

; 1271 : 			if (player->powers[pw_grenadering] > MAX_GRENADE)

  02ef8	b8 04 00 00 00	 mov	 eax, 4
  02efd	6b c8 17	 imul	 ecx, eax, 23
  02f00	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02f03	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02f08	7e 05		 jle	 SHORT $LN303@P_TouchSpe

; 1272 : 				return;

  02f0a	e9 da 09 00 00	 jmp	 $LN374@P_TouchSpe
$LN303@P_TouchSpe:

; 1273 : 
; 1274 : 			P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  02f0f	68 0d 01 00 00	 push	 269			; 0000010dH
  02f14	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02f17	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02f1a	51		 push	 ecx
  02f1b	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  02f1e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  02f21	50		 push	 eax
  02f22	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02f25	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  02f28	52		 push	 edx
  02f29	e8 00 00 00 00	 call	 _P_SpawnMobj
  02f2e	83 c4 10	 add	 esp, 16			; 00000010H

; 1275 : 			player->powers[pw_grenadering] += special->health;

  02f31	b8 04 00 00 00	 mov	 eax, 4
  02f36	6b c8 17	 imul	 ecx, eax, 23
  02f39	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02f3c	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  02f40	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  02f43	03 81 8c 00 00
	00		 add	 eax, DWORD PTR [ecx+140]
  02f49	ba 04 00 00 00	 mov	 edx, 4
  02f4e	6b ca 17	 imul	 ecx, edx, 23
  02f51	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02f54	89 44 0a 38	 mov	 DWORD PTR [edx+ecx+56], eax

; 1276 : 			if (player->powers[pw_grenadering] > MAX_GRENADE)

  02f58	b8 04 00 00 00	 mov	 eax, 4
  02f5d	6b c8 17	 imul	 ecx, eax, 23
  02f60	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02f63	83 7c 0a 38 32	 cmp	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
  02f68	7e 13		 jle	 SHORT $LN304@P_TouchSpe

; 1277 : 				player->powers[pw_grenadering] = MAX_GRENADE;

  02f6a	b8 04 00 00 00	 mov	 eax, 4
  02f6f	6b c8 17	 imul	 ecx, eax, 23
  02f72	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02f75	c7 44 0a 38 32
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 50 ; 00000032H
$LN304@P_TouchSpe:

; 1278 : 			break;

  02f7d	e9 17 09 00 00	 jmp	 $LN2@P_TouchSpe
$LN305@P_TouchSpe:

; 1279 : 
; 1280 : 		// Power stone
; 1281 : 		case MT_FLINGEMERALD:
; 1282 : 			if (!(P_CanPickupItem(toucher->player, true)) || player->tossdelay)

  02f82	6a 01		 push	 1
  02f84	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  02f87	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  02f8d	51		 push	 ecx
  02f8e	e8 00 00 00 00	 call	 _P_CanPickupItem
  02f93	83 c4 08	 add	 esp, 8
  02f96	85 c0		 test	 eax, eax
  02f98	74 0c		 je	 SHORT $LN307@P_TouchSpe
  02f9a	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  02f9d	83 b8 74 01 00
	00 00		 cmp	 DWORD PTR [eax+372], 0
  02fa4	74 05		 je	 SHORT $LN306@P_TouchSpe
$LN307@P_TouchSpe:

; 1283 : 				return;

  02fa6	e9 3e 09 00 00	 jmp	 $LN374@P_TouchSpe
$LN306@P_TouchSpe:

; 1284 : 
; 1285 : 			if (special->momz > 0 && (special->flags2 & MF2_SLIDEPUSH))

  02fab	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02fae	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  02fb2	7e 16		 jle	 SHORT $LN308@P_TouchSpe
  02fb4	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02fb7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  02fbd	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  02fc3	74 05		 je	 SHORT $LN308@P_TouchSpe

; 1286 : 				return;

  02fc5	e9 1f 09 00 00	 jmp	 $LN374@P_TouchSpe
$LN308@P_TouchSpe:

; 1287 : 
; 1288 : 			player->powers[pw_emeralds] |= special->threshold;

  02fca	b8 04 00 00 00	 mov	 eax, 4
  02fcf	6b c8 18	 imul	 ecx, eax, 24
  02fd2	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02fd5	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02fd8	8b 4c 0a 38	 mov	 ecx, DWORD PTR [edx+ecx+56]
  02fdc	0b 88 a0 00 00
	00		 or	 ecx, DWORD PTR [eax+160]
  02fe2	ba 04 00 00 00	 mov	 edx, 4
  02fe7	6b c2 18	 imul	 eax, edx, 24
  02fea	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  02fed	89 4c 02 38	 mov	 DWORD PTR [edx+eax+56], ecx

; 1289 : 			P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  02ff1	68 0d 01 00 00	 push	 269			; 0000010dH
  02ff6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  02ff9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  02ffc	51		 push	 ecx
  02ffd	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  03000	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  03003	50		 push	 eax
  03004	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  03007	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0300a	52		 push	 edx
  0300b	e8 00 00 00 00	 call	 _P_SpawnMobj
  03010	83 c4 10	 add	 esp, 16			; 00000010H

; 1290 : 
; 1291 : 			if (special->info->deathsound != sfx_None)

  03013	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03016	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0301c	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  03020	74 0f		 je	 SHORT $LN309@P_TouchSpe

; 1292 : 				sound = special->info->deathsound;

  03022	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03025	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0302b	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0302e	89 55 ec	 mov	 DWORD PTR _sound$[ebp], edx
$LN309@P_TouchSpe:

; 1293 : 			break;

  03031	e9 63 08 00 00	 jmp	 $LN2@P_TouchSpe
$LN310@P_TouchSpe:

; 1294 : 
; 1295 : 			// Special Stage Token
; 1296 : 		case MT_EMMY:
; 1297 : 			P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  03036	68 0d 01 00 00	 push	 269			; 0000010dH
  0303b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0303e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  03041	51		 push	 ecx
  03042	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  03045	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  03048	50		 push	 eax
  03049	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0304c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0304f	52		 push	 edx
  03050	e8 00 00 00 00	 call	 _P_SpawnMobj
  03055	83 c4 10	 add	 esp, 16			; 00000010H

; 1298 : 			tokenlist += special->health;

  03058	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0305b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tokenlist
  03061	03 88 8c 00 00
	00		 add	 ecx, DWORD PTR [eax+140]
  03067	89 0d 00 00 00
	00		 mov	 DWORD PTR _tokenlist, ecx

; 1299 : 			token++;

  0306d	a1 00 00 00 00	 mov	 eax, DWORD PTR _token
  03072	83 c0 01	 add	 eax, 1
  03075	a3 00 00 00 00	 mov	 DWORD PTR _token, eax

; 1300 : 
; 1301 : 			if (ALL7EMERALDS(emeralds)) // Got all 7

  0307a	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR _emeralds
  03081	83 e0 7f	 and	 eax, 127		; 0000007fH
  03084	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  03087	75 1d		 jne	 SHORT $LN311@P_TouchSpe

; 1302 : 			{
; 1303 : 				P_GivePlayerRings(player, 50, false);

  03089	6a 00		 push	 0
  0308b	6a 32		 push	 50			; 00000032H
  0308d	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03090	50		 push	 eax
  03091	e8 00 00 00 00	 call	 _P_GivePlayerRings
  03096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1304 : 				nummaprings += 50; // no cheating towards Perfect!

  03099	a1 00 00 00 00	 mov	 eax, DWORD PTR _nummaprings
  0309e	83 c0 32	 add	 eax, 50			; 00000032H
  030a1	a3 00 00 00 00	 mov	 DWORD PTR _nummaprings, eax
$LN311@P_TouchSpe:

; 1305 : 			}
; 1306 : 			break;

  030a6	e9 ee 07 00 00	 jmp	 $LN2@P_TouchSpe
$LN312@P_TouchSpe:

; 1307 : 
; 1308 : 		case MT_EMERALD1:
; 1309 : 		case MT_EMERALD2:
; 1310 : 		case MT_EMERALD3:
; 1311 : 		case MT_EMERALD4:
; 1312 : 		case MT_EMERALD5:
; 1313 : 		case MT_EMERALD6:
; 1314 : 		case MT_EMERALD7:
; 1315 : 			P_SpawnMobj(special->x, special->y, special->z, MT_SPARK);

  030ab	68 0d 01 00 00	 push	 269			; 0000010dH
  030b0	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  030b3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  030b6	51		 push	 ecx
  030b7	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  030ba	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  030bd	50		 push	 eax
  030be	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  030c1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  030c4	52		 push	 edx
  030c5	e8 00 00 00 00	 call	 _P_SpawnMobj
  030ca	83 c4 10	 add	 esp, 16			; 00000010H

; 1316 : 
; 1317 : 			if (special->threshold)

  030cd	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  030d0	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [eax+160], 0
  030d7	74 2c		 je	 SHORT $LN319@P_TouchSpe

; 1318 : 				player->powers[pw_emeralds] |= special->info->speed;

  030d9	b8 04 00 00 00	 mov	 eax, 4
  030de	6b c8 18	 imul	 ecx, eax, 24
  030e1	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  030e4	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  030ea	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  030ed	8b 4c 0a 38	 mov	 ecx, DWORD PTR [edx+ecx+56]
  030f1	0b 48 3c	 or	 ecx, DWORD PTR [eax+60]
  030f4	ba 04 00 00 00	 mov	 edx, 4
  030f9	6b c2 18	 imul	 eax, edx, 24
  030fc	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  030ff	89 4c 02 38	 mov	 DWORD PTR [edx+eax+56], ecx
  03103	eb 1a		 jmp	 SHORT $LN320@P_TouchSpe
$LN319@P_TouchSpe:

; 1319 : 			else
; 1320 : 				emeralds |= special->info->speed;

  03105	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03108	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0310e	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR _emeralds
  03115	0b 51 3c	 or	 edx, DWORD PTR [ecx+60]
  03118	66 89 15 00 00
	00 00		 mov	 WORD PTR _emeralds, dx
$LN320@P_TouchSpe:

; 1321 : 
; 1322 : 			if (special->target && special->target->type == MT_EMERALDSPAWN)

  0311f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03122	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  03129	74 61		 je	 SHORT $LN321@P_TouchSpe
  0312b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0312e	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  03134	83 79 7c 3f	 cmp	 DWORD PTR [ecx+124], 63	; 0000003fH
  03138	75 52		 jne	 SHORT $LN321@P_TouchSpe

; 1323 : 			{
; 1324 : 				if (special->target->target)

  0313a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0313d	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  03143	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  0314a	74 1a		 je	 SHORT $LN322@P_TouchSpe

; 1325 : 					P_SetTarget(&special->target->target, NULL);

  0314c	6a 00		 push	 0
  0314e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03151	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  03157	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0315d	51		 push	 ecx
  0315e	e8 00 00 00 00	 call	 _P_SetTarget
  03163	83 c4 08	 add	 esp, 8
$LN322@P_TouchSpe:

; 1326 : 
; 1327 : 				special->target->threshold = 0;

  03166	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03169	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0316f	c7 81 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+160], 0

; 1328 : 
; 1329 : 				P_SetTarget(&special->target, NULL);

  03179	6a 00		 push	 0
  0317b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0317e	05 98 00 00 00	 add	 eax, 152		; 00000098H
  03183	50		 push	 eax
  03184	e8 00 00 00 00	 call	 _P_SetTarget
  03189	83 c4 08	 add	 esp, 8
$LN321@P_TouchSpe:

; 1330 : 			}
; 1331 : 
; 1332 : 			if (special->info->deathsound != sfx_None)

  0318c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0318f	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  03195	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  03199	74 0f		 je	 SHORT $LN323@P_TouchSpe

; 1333 : 				sound = special->info->deathsound;

  0319b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0319e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  031a4	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  031a7	89 55 ec	 mov	 DWORD PTR _sound$[ebp], edx
$LN323@P_TouchSpe:

; 1334 : 			break;

  031aa	e9 ea 06 00 00	 jmp	 $LN2@P_TouchSpe
$LN324@P_TouchSpe:

; 1335 : 
; 1336 : 		case MT_EXTRALARGEBUBBLE:
; 1337 : 			if (player->powers[pw_watershield])

  031af	b8 04 00 00 00	 mov	 eax, 4
  031b4	6b c8 0b	 imul	 ecx, eax, 11
  031b7	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  031ba	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  031bf	74 05		 je	 SHORT $LN325@P_TouchSpe

; 1338 : 				return;

  031c1	e9 23 07 00 00	 jmp	 $LN374@P_TouchSpe
$LN325@P_TouchSpe:

; 1339 : 			if (maptol & TOL_NIGHTS)

  031c6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  031cd	83 e0 40	 and	 eax, 64			; 00000040H
  031d0	74 05		 je	 SHORT $LN326@P_TouchSpe

; 1340 : 				return;

  031d2	e9 12 07 00 00	 jmp	 $LN374@P_TouchSpe
$LN326@P_TouchSpe:

; 1341 : 			if (mariomode)

  031d7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  031de	25 00 01 00 00	 and	 eax, 256		; 00000100H
  031e3	74 0a		 je	 SHORT $LN327@P_TouchSpe

; 1342 : 				return;

  031e5	e9 ff 06 00 00	 jmp	 $LN374@P_TouchSpe
  031ea	e9 25 01 00 00	 jmp	 $LN330@P_TouchSpe
$LN327@P_TouchSpe:

; 1343 : 			else if (special->z < player->mo->z + player->mo->height / 3
; 1344 : 				|| special->z > player->mo->z + (player->mo->height*2/3))

  031ef	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  031f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  031f4	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  031f7	8b 02		 mov	 eax, DWORD PTR [edx]
  031f9	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  031fc	99		 cdq
  031fd	be 03 00 00 00	 mov	 esi, 3
  03202	f7 fe		 idiv	 esi
  03204	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  03207	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0320a	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0320d	7c 22		 jl	 SHORT $LN331@P_TouchSpe
  0320f	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03212	8b 08		 mov	 ecx, DWORD PTR [eax]
  03214	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  03217	8b 02		 mov	 eax, DWORD PTR [edx]
  03219	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0321c	d1 e0		 shl	 eax, 1
  0321e	99		 cdq
  0321f	be 03 00 00 00	 mov	 esi, 3
  03224	f7 fe		 idiv	 esi
  03226	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  03229	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  0322c	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0322f	7e 0a		 jle	 SHORT $LN329@P_TouchSpe
$LN331@P_TouchSpe:

; 1345 : 				return; // Only go in the mouth

  03231	e9 b3 06 00 00	 jmp	 $LN374@P_TouchSpe
  03236	e9 d9 00 00 00	 jmp	 $LN330@P_TouchSpe
$LN329@P_TouchSpe:

; 1346 : 			else
; 1347 : 			{
; 1348 : 				if (player->powers[pw_underwater] && player->powers[pw_underwater] <= 12*TICRATE + 1)

  0323b	b8 04 00 00 00	 mov	 eax, 4
  03240	6b c8 06	 imul	 ecx, eax, 6
  03243	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  03246	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0324b	74 21		 je	 SHORT $LN332@P_TouchSpe
  0324d	b8 04 00 00 00	 mov	 eax, 4
  03252	6b c8 06	 imul	 ecx, eax, 6
  03255	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  03258	81 7c 0a 38 a5
	01 00 00	 cmp	 DWORD PTR [edx+ecx+56], 421 ; 000001a5H
  03260	7f 0c		 jg	 SHORT $LN332@P_TouchSpe

; 1349 : 					P_RestoreMusic(player);

  03262	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03265	50		 push	 eax
  03266	e8 00 00 00 00	 call	 _P_RestoreMusic
  0326b	83 c4 04	 add	 esp, 4
$LN332@P_TouchSpe:

; 1350 : 
; 1351 : 				if (player->powers[pw_underwater] < underwatertics + 1)

  0326e	b8 04 00 00 00	 mov	 eax, 4
  03273	6b c8 06	 imul	 ecx, eax, 6
  03276	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _underwatertics
  0327c	83 c2 01	 add	 edx, 1
  0327f	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03282	39 54 08 38	 cmp	 DWORD PTR [eax+ecx+56], edx
  03286	7d 17		 jge	 SHORT $LN333@P_TouchSpe

; 1352 : 					player->powers[pw_underwater] = underwatertics + 1;

  03288	a1 00 00 00 00	 mov	 eax, DWORD PTR _underwatertics
  0328d	83 c0 01	 add	 eax, 1
  03290	b9 04 00 00 00	 mov	 ecx, 4
  03295	6b d1 06	 imul	 edx, ecx, 6
  03298	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  0329b	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN333@P_TouchSpe:

; 1353 : 
; 1354 : 				P_SpawnMobj(special->x,special->y,special->z, MT_POP);

  0329f	68 ba 00 00 00	 push	 186			; 000000baH
  032a4	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  032a7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  032aa	51		 push	 ecx
  032ab	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  032ae	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  032b1	50		 push	 eax
  032b2	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  032b5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  032b8	52		 push	 edx
  032b9	e8 00 00 00 00	 call	 _P_SpawnMobj
  032be	83 c4 10	 add	 esp, 16			; 00000010H

; 1355 : 				sound = sfx_gasp;

  032c1	c7 45 ec 47 00
	00 00		 mov	 DWORD PTR _sound$[ebp], 71 ; 00000047H

; 1356 : 
; 1357 : 				if (!player->climbing)

  032c8	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  032cb	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  032d2	75 1c		 jne	 SHORT $LN334@P_TouchSpe

; 1358 : 				{
; 1359 : 					P_SetPlayerMobjState(player->mo, S_PLAY_GASP);

  032d4	6a 20		 push	 32			; 00000020H
  032d6	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  032d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  032db	51		 push	 ecx
  032dc	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  032e1	83 c4 08	 add	 esp, 8

; 1360 : 					P_ResetPlayer(player);

  032e4	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  032e7	50		 push	 eax
  032e8	e8 00 00 00 00	 call	 _P_ResetPlayer
  032ed	83 c4 04	 add	 esp, 4
$LN334@P_TouchSpe:

; 1361 : 				}
; 1362 : 
; 1363 : 				player->mo->momx = player->mo->momy = player->mo->momz = 0;

  032f0	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  032f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  032f5	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  032fc	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  032ff	8b 02		 mov	 eax, DWORD PTR [edx]
  03301	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  03308	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  0330b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0330d	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
$LN330@P_TouchSpe:

; 1364 : 			}
; 1365 : 			break;

  03314	e9 80 05 00 00	 jmp	 $LN2@P_TouchSpe
$LN335@P_TouchSpe:

; 1366 : 
; 1367 : 		case MT_WATERDROP:
; 1368 : 			if (special->state == &states[special->info->spawnstate])

  03319	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0331c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  03322	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  03326	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  0332c	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0332f	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  03332	75 7c		 jne	 SHORT $LN336@P_TouchSpe

; 1369 : 			{
; 1370 : 				special->z = toucher->z+toucher->height-8*FRACUNIT;

  03334	8b 45 0c	 mov	 eax, DWORD PTR _toucher$[ebp]
  03337	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0333a	8b 55 0c	 mov	 edx, DWORD PTR _toucher$[ebp]
  0333d	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  03340	8d 8c 01 00 00
	f8 ff		 lea	 ecx, DWORD PTR [ecx+eax-524288]
  03347	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0334a	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 1371 : 				special->momz = 0;

  0334d	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03350	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 1372 : 				special->flags |= MF_NOGRAVITY;

  03357	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0335a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0335d	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  03363	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  03366	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1373 : 				P_SetMobjState (special, special->info->deathstate);

  03369	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0336c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  03372	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  03375	52		 push	 edx
  03376	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03379	50		 push	 eax
  0337a	e8 00 00 00 00	 call	 _P_SetMobjState
  0337f	83 c4 08	 add	 esp, 8

; 1374 : 				S_StartSound (special, special->info->deathsound+(P_Random() % special->info->mass));

  03382	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03385	8b b0 80 00 00
	00		 mov	 esi, DWORD PTR [eax+128]
  0338b	e8 00 00 00 00	 call	 _P_Random
  03390	0f b6 c0	 movzx	 eax, al
  03393	8b 4d 08	 mov	 ecx, DWORD PTR _special$[ebp]
  03396	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [ecx+128]
  0339c	99		 cdq
  0339d	f7 79 4c	 idiv	 DWORD PTR [ecx+76]
  033a0	03 56 38	 add	 edx, DWORD PTR [esi+56]
  033a3	52		 push	 edx
  033a4	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  033a7	52		 push	 edx
  033a8	e8 00 00 00 00	 call	 _S_StartSound
  033ad	83 c4 08	 add	 esp, 8
$LN336@P_TouchSpe:

; 1375 : 			}
; 1376 : 			return;

  033b0	e9 34 05 00 00	 jmp	 $LN374@P_TouchSpe
$LN337@P_TouchSpe:

; 1377 : 
; 1378 : 		case MT_REDFLAG:
; 1379 : 			if (player->powers[pw_flashing] || player->tossdelay)

  033b5	b8 04 00 00 00	 mov	 eax, 4
  033ba	d1 e0		 shl	 eax, 1
  033bc	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  033bf	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  033c4	75 0c		 jne	 SHORT $LN339@P_TouchSpe
  033c6	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  033c9	83 b8 74 01 00
	00 00		 cmp	 DWORD PTR [eax+372], 0
  033d0	74 05		 je	 SHORT $LN338@P_TouchSpe
$LN339@P_TouchSpe:

; 1380 : 				return;

  033d2	e9 12 05 00 00	 jmp	 $LN374@P_TouchSpe
$LN338@P_TouchSpe:

; 1381 : 			if (!special->spawnpoint)

  033d7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  033da	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  033e1	75 05		 jne	 SHORT $LN340@P_TouchSpe

; 1382 : 				return;

  033e3	e9 01 05 00 00	 jmp	 $LN374@P_TouchSpe
$LN340@P_TouchSpe:

; 1383 : 			if (special->fuse == 1)

  033e8	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  033eb	83 b8 bc 00 00
	00 01		 cmp	 DWORD PTR [eax+188], 1
  033f2	75 05		 jne	 SHORT $LN341@P_TouchSpe

; 1384 : 				return;

  033f4	e9 f0 04 00 00	 jmp	 $LN374@P_TouchSpe
$LN341@P_TouchSpe:

; 1385 : 			if (special->momz > 0)

  033f9	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  033fc	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  03400	7e 05		 jle	 SHORT $LN342@P_TouchSpe

; 1386 : 				return;

  03402	e9 e2 04 00 00	 jmp	 $LN374@P_TouchSpe
$LN342@P_TouchSpe:

; 1387 : 			if (player->ctfteam == 1) // Player is on the Red Team

  03407	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0340a	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  03411	0f 85 1b 01 00
	00		 jne	 $LN343@P_TouchSpe

; 1388 : 			{
; 1389 : 				INT16 spawnheight;
; 1390 : 
; 1391 : 				if (!special->spawnpoint->z)

  03417	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0341a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03420	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  03424	85 d2		 test	 edx, edx
  03426	75 12		 jne	 SHORT $LN345@P_TouchSpe

; 1392 : 					spawnheight = (INT16)(special->floorz>>FRACBITS);

  03428	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0342b	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0342e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  03431	66 89 8d 44 ff
	ff ff		 mov	 WORD PTR _spawnheight$2[ebp], cx
  03438	eb 14		 jmp	 SHORT $LN346@P_TouchSpe
$LN345@P_TouchSpe:

; 1393 : 				else
; 1394 : 					spawnheight = special->spawnpoint->z;

  0343a	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0343d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03443	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  03447	66 89 95 44 ff
	ff ff		 mov	 WORD PTR _spawnheight$2[ebp], dx
$LN346@P_TouchSpe:

; 1395 : 
; 1396 : 				if (special->x>>FRACBITS != special->spawnpoint->x
; 1397 : 				    || special->y>>FRACBITS != special->spawnpoint->y
; 1398 : 				    || special->z>>FRACBITS != spawnheight)

  0344e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03451	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  03454	c1 f9 10	 sar	 ecx, 16			; 00000010H
  03457	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  0345a	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  03460	0f bf 10	 movsx	 edx, WORD PTR [eax]
  03463	3b ca		 cmp	 ecx, edx
  03465	75 32		 jne	 SHORT $LN348@P_TouchSpe
  03467	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0346a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0346d	c1 f9 10	 sar	 ecx, 16			; 00000010H
  03470	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  03473	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  03479	0f bf 50 02	 movsx	 edx, WORD PTR [eax+2]
  0347d	3b ca		 cmp	 ecx, edx
  0347f	75 18		 jne	 SHORT $LN348@P_TouchSpe
  03481	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03484	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  03487	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0348a	0f bf 95 44 ff
	ff ff		 movsx	 edx, WORD PTR _spawnheight$2[ebp]
  03491	3b ca		 cmp	 ecx, edx
  03493	0f 84 94 00 00
	00		 je	 $LN350@P_TouchSpe
$LN348@P_TouchSpe:

; 1399 : 				{
; 1400 : 					special->fuse = 1;

  03499	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0349c	c7 80 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+188], 1

; 1401 : 					special->flags2 |= MF2_JUSTATTACKED;

  034a6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  034a9	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  034af	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  034b5	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  034b8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 1402 : 
; 1403 : 					if (!P_PlayerTouchingSectorSpecial(player, 4, 3))

  034be	6a 03		 push	 3
  034c0	6a 04		 push	 4
  034c2	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  034c5	50		 push	 eax
  034c6	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  034cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  034ce	85 c0		 test	 eax, eax
  034d0	75 5b		 jne	 SHORT $LN350@P_TouchSpe

; 1404 : 					{
; 1405 : 						CONS_Printf(text[REDFLAG_RETURNED], player_names[player-players]);

  034d2	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  034d5	2d 00 00 00 00	 sub	 eax, OFFSET _players
  034da	99		 cdq
  034db	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  034e0	f7 f9		 idiv	 ecx
  034e2	6b d0 16	 imul	 edx, eax, 22
  034e5	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  034eb	52		 push	 edx
  034ec	b8 04 00 00 00	 mov	 eax, 4
  034f1	69 c8 04 01 00
	00		 imul	 ecx, eax, 260
  034f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  034fd	52		 push	 edx
  034fe	e8 00 00 00 00	 call	 _CONS_Printf
  03503	83 c4 08	 add	 esp, 8

; 1406 : 
; 1407 : 						if (players[consoleplayer].ctfteam == player->ctfteam)

  03506	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  03510	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  03513	8b 90 60 01 00
	00		 mov	 edx, DWORD PTR _players[eax+352]
  03519	3b 91 60 01 00
	00		 cmp	 edx, DWORD PTR [ecx+352]
  0351f	75 0c		 jne	 SHORT $LN350@P_TouchSpe

; 1408 : 							S_StartSound(NULL, sfx_hoop1);

  03521	6a 4f		 push	 79			; 0000004fH
  03523	6a 00		 push	 0
  03525	e8 00 00 00 00	 call	 _S_StartSound
  0352a	83 c4 08	 add	 esp, 8
$LN350@P_TouchSpe:

; 1409 : 					}
; 1410 : 				}
; 1411 : 			}

  0352d	e9 e7 00 00 00	 jmp	 $LN353@P_TouchSpe
$LN343@P_TouchSpe:

; 1412 : 			else if (player->ctfteam == 2) // Player is on the Blue Team

  03532	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03535	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  0353c	0f 85 d7 00 00
	00		 jne	 $LN353@P_TouchSpe

; 1413 : 			{
; 1414 : 				if (player->powers[pw_super])

  03542	b8 04 00 00 00	 mov	 eax, 4
  03547	6b c8 0f	 imul	 ecx, eax, 15
  0354a	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0354d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03552	74 05		 je	 SHORT $LN352@P_TouchSpe

; 1415 : 					return;

  03554	e9 90 03 00 00	 jmp	 $LN374@P_TouchSpe
$LN352@P_TouchSpe:

; 1416 : 
; 1417 : 				player->gotflag |= MF_REDFLAG;

  03559	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0355c	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  03563	83 c9 01	 or	 ecx, 1
  03566	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  03569	66 89 8a 64 01
	00 00		 mov	 WORD PTR [edx+356], cx

; 1418 : 				S_StartSound (player->mo, sfx_lvpass);

  03570	6a 5c		 push	 92			; 0000005cH
  03572	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03575	8b 08		 mov	 ecx, DWORD PTR [eax]
  03577	51		 push	 ecx
  03578	e8 00 00 00 00	 call	 _S_StartSound
  0357d	83 c4 08	 add	 esp, 8

; 1419 : 				P_SetMobjState(special, S_DISS);

  03580	68 4f 06 00 00	 push	 1615			; 0000064fH
  03585	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03588	50		 push	 eax
  03589	e8 00 00 00 00	 call	 _P_SetMobjState
  0358e	83 c4 08	 add	 esp, 8

; 1420 : 				CONS_Printf(text[REDFLAG_PICKUP], player_names[player-players]);

  03591	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03594	2d 00 00 00 00	 sub	 eax, OFFSET _players
  03599	99		 cdq
  0359a	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0359f	f7 f9		 idiv	 ecx
  035a1	6b d0 16	 imul	 edx, eax, 22
  035a4	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  035aa	52		 push	 edx
  035ab	b8 04 00 00 00	 mov	 eax, 4
  035b0	69 c8 05 01 00
	00		 imul	 ecx, eax, 261
  035b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  035bc	52		 push	 edx
  035bd	e8 00 00 00 00	 call	 _CONS_Printf
  035c2	83 c4 08	 add	 esp, 8

; 1421 : 				redflag = NULL;

  035c5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _redflag, 0

; 1422 : 				player->pflags &= ~PF_GLIDING;

  035cf	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  035d2	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  035d8	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  035de	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  035e1	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1423 : 				player->climbing = 0;

  035e7	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  035ea	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 1424 : 				if (player->powers[pw_tailsfly])

  035f4	b8 04 00 00 00	 mov	 eax, 4
  035f9	6b c8 05	 imul	 ecx, eax, 5
  035fc	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  035ff	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  03604	74 13		 je	 SHORT $LN353@P_TouchSpe

; 1425 : 					player->powers[pw_tailsfly] = 1;

  03606	b8 04 00 00 00	 mov	 eax, 4
  0360b	6b c8 05	 imul	 ecx, eax, 5
  0360e	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  03611	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1
$LN353@P_TouchSpe:

; 1426 : 			}
; 1427 : 			return;

  03619	e9 cb 02 00 00	 jmp	 $LN374@P_TouchSpe
$LN354@P_TouchSpe:

; 1428 : 
; 1429 : 		case MT_BLUEFLAG:
; 1430 : 			if (player->powers[pw_flashing] || player->tossdelay)

  0361e	b8 04 00 00 00	 mov	 eax, 4
  03623	d1 e0		 shl	 eax, 1
  03625	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  03628	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0362d	75 0c		 jne	 SHORT $LN356@P_TouchSpe
  0362f	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03632	83 b8 74 01 00
	00 00		 cmp	 DWORD PTR [eax+372], 0
  03639	74 05		 je	 SHORT $LN355@P_TouchSpe
$LN356@P_TouchSpe:

; 1431 : 				return;

  0363b	e9 a9 02 00 00	 jmp	 $LN374@P_TouchSpe
$LN355@P_TouchSpe:

; 1432 : 			if (!special->spawnpoint)

  03640	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03643	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  0364a	75 05		 jne	 SHORT $LN357@P_TouchSpe

; 1433 : 				return;

  0364c	e9 98 02 00 00	 jmp	 $LN374@P_TouchSpe
$LN357@P_TouchSpe:

; 1434 : 			if (special->fuse == 1)

  03651	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03654	83 b8 bc 00 00
	00 01		 cmp	 DWORD PTR [eax+188], 1
  0365b	75 05		 jne	 SHORT $LN358@P_TouchSpe

; 1435 : 				return;

  0365d	e9 87 02 00 00	 jmp	 $LN374@P_TouchSpe
$LN358@P_TouchSpe:

; 1436 : 			if (special->momz > 0)

  03662	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03665	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  03669	7e 05		 jle	 SHORT $LN359@P_TouchSpe

; 1437 : 				return;

  0366b	e9 79 02 00 00	 jmp	 $LN374@P_TouchSpe
$LN359@P_TouchSpe:

; 1438 : 			if (player->ctfteam == 2) // Player is on the Blue Team

  03670	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03673	83 b8 60 01 00
	00 02		 cmp	 DWORD PTR [eax+352], 2
  0367a	0f 85 1b 01 00
	00		 jne	 $LN360@P_TouchSpe

; 1439 : 			{
; 1440 : 				INT16 spawnheight;
; 1441 : 
; 1442 : 				if (!special->spawnpoint->z)

  03680	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03683	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03689	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  0368d	85 d2		 test	 edx, edx
  0368f	75 12		 jne	 SHORT $LN362@P_TouchSpe

; 1443 : 					spawnheight = (INT16)(special->floorz>>FRACBITS);

  03691	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03694	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  03697	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0369a	66 89 8d 40 ff
	ff ff		 mov	 WORD PTR _spawnheight$1[ebp], cx
  036a1	eb 14		 jmp	 SHORT $LN363@P_TouchSpe
$LN362@P_TouchSpe:

; 1444 : 				else
; 1445 : 					spawnheight = special->spawnpoint->z;

  036a3	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  036a6	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  036ac	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  036b0	66 89 95 40 ff
	ff ff		 mov	 WORD PTR _spawnheight$1[ebp], dx
$LN363@P_TouchSpe:

; 1446 : 
; 1447 : 				if (special->x>>FRACBITS != special->spawnpoint->x
; 1448 : 				    || special->y>>FRACBITS != special->spawnpoint->y
; 1449 : 				    || special->z>>FRACBITS != spawnheight)

  036b7	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  036ba	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  036bd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  036c0	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  036c3	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  036c9	0f bf 10	 movsx	 edx, WORD PTR [eax]
  036cc	3b ca		 cmp	 ecx, edx
  036ce	75 32		 jne	 SHORT $LN365@P_TouchSpe
  036d0	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  036d3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  036d6	c1 f9 10	 sar	 ecx, 16			; 00000010H
  036d9	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  036dc	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  036e2	0f bf 50 02	 movsx	 edx, WORD PTR [eax+2]
  036e6	3b ca		 cmp	 ecx, edx
  036e8	75 18		 jne	 SHORT $LN365@P_TouchSpe
  036ea	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  036ed	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  036f0	c1 f9 10	 sar	 ecx, 16			; 00000010H
  036f3	0f bf 95 40 ff
	ff ff		 movsx	 edx, WORD PTR _spawnheight$1[ebp]
  036fa	3b ca		 cmp	 ecx, edx
  036fc	0f 84 94 00 00
	00		 je	 $LN367@P_TouchSpe
$LN365@P_TouchSpe:

; 1450 : 					{
; 1451 : 						special->fuse = 1;

  03702	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03705	c7 80 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+188], 1

; 1452 : 						special->flags2 |= MF2_JUSTATTACKED;

  0370f	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  03712	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  03718	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  0371e	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  03721	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 1453 : 
; 1454 : 						if (!P_PlayerTouchingSectorSpecial(player, 4, 4))

  03727	6a 04		 push	 4
  03729	6a 04		 push	 4
  0372b	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0372e	50		 push	 eax
  0372f	e8 00 00 00 00	 call	 _P_PlayerTouchingSectorSpecial
  03734	83 c4 0c	 add	 esp, 12			; 0000000cH
  03737	85 c0		 test	 eax, eax
  03739	75 5b		 jne	 SHORT $LN367@P_TouchSpe

; 1455 : 						{
; 1456 : 							CONS_Printf(text[BLUEFLAG_RETURNED], player_names[player-players]);

  0373b	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0373e	2d 00 00 00 00	 sub	 eax, OFFSET _players
  03743	99		 cdq
  03744	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  03749	f7 f9		 idiv	 ecx
  0374b	6b d0 16	 imul	 edx, eax, 22
  0374e	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  03754	52		 push	 edx
  03755	b8 04 00 00 00	 mov	 eax, 4
  0375a	69 c8 06 01 00
	00		 imul	 ecx, eax, 262
  03760	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  03766	52		 push	 edx
  03767	e8 00 00 00 00	 call	 _CONS_Printf
  0376c	83 c4 08	 add	 esp, 8

; 1457 : 
; 1458 : 							if (players[consoleplayer].ctfteam == player->ctfteam)

  0376f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  03779	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  0377c	8b 90 60 01 00
	00		 mov	 edx, DWORD PTR _players[eax+352]
  03782	3b 91 60 01 00
	00		 cmp	 edx, DWORD PTR [ecx+352]
  03788	75 0c		 jne	 SHORT $LN367@P_TouchSpe

; 1459 : 								S_StartSound(NULL, sfx_hoop1);

  0378a	6a 4f		 push	 79			; 0000004fH
  0378c	6a 00		 push	 0
  0378e	e8 00 00 00 00	 call	 _S_StartSound
  03793	83 c4 08	 add	 esp, 8
$LN367@P_TouchSpe:

; 1460 : 						}
; 1461 : 					}
; 1462 : 			}

  03796	e9 e7 00 00 00	 jmp	 $LN370@P_TouchSpe
$LN360@P_TouchSpe:

; 1463 : 			else if (player->ctfteam == 1) // Player is on the Red Team

  0379b	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0379e	83 b8 60 01 00
	00 01		 cmp	 DWORD PTR [eax+352], 1
  037a5	0f 85 d7 00 00
	00		 jne	 $LN370@P_TouchSpe

; 1464 : 			{
; 1465 : 				if (player->powers[pw_super])

  037ab	b8 04 00 00 00	 mov	 eax, 4
  037b0	6b c8 0f	 imul	 ecx, eax, 15
  037b3	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  037b6	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  037bb	74 05		 je	 SHORT $LN369@P_TouchSpe

; 1466 : 					return;

  037bd	e9 27 01 00 00	 jmp	 $LN374@P_TouchSpe
$LN369@P_TouchSpe:

; 1467 : 
; 1468 : 				player->gotflag |= MF_BLUEFLAG;

  037c2	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  037c5	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  037cc	83 c9 02	 or	 ecx, 2
  037cf	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  037d2	66 89 8a 64 01
	00 00		 mov	 WORD PTR [edx+356], cx

; 1469 : 				S_StartSound (player->mo, sfx_lvpass);

  037d9	6a 5c		 push	 92			; 0000005cH
  037db	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  037de	8b 08		 mov	 ecx, DWORD PTR [eax]
  037e0	51		 push	 ecx
  037e1	e8 00 00 00 00	 call	 _S_StartSound
  037e6	83 c4 08	 add	 esp, 8

; 1470 : 				P_SetMobjState(special, S_DISS);

  037e9	68 4f 06 00 00	 push	 1615			; 0000064fH
  037ee	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  037f1	50		 push	 eax
  037f2	e8 00 00 00 00	 call	 _P_SetMobjState
  037f7	83 c4 08	 add	 esp, 8

; 1471 : 				CONS_Printf(text[BLUEFLAG_PICKUP], player_names[player-players]);

  037fa	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  037fd	2d 00 00 00 00	 sub	 eax, OFFSET _players
  03802	99		 cdq
  03803	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  03808	f7 f9		 idiv	 ecx
  0380a	6b d0 16	 imul	 edx, eax, 22
  0380d	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  03813	52		 push	 edx
  03814	b8 04 00 00 00	 mov	 eax, 4
  03819	69 c8 07 01 00
	00		 imul	 ecx, eax, 263
  0381f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _text[ecx]
  03825	52		 push	 edx
  03826	e8 00 00 00 00	 call	 _CONS_Printf
  0382b	83 c4 08	 add	 esp, 8

; 1472 : 				blueflag = NULL;

  0382e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _blueflag, 0

; 1473 : 				player->pflags &= ~PF_GLIDING;

  03838	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  0383b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  03841	81 e1 ff ff fe
	ff		 and	 ecx, -65537		; fffeffffH
  03847	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0384a	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 1474 : 				player->climbing = 0;

  03850	8b 45 f8	 mov	 eax, DWORD PTR _player$[ebp]
  03853	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 1475 : 				if (player->powers[pw_tailsfly])

  0385d	b8 04 00 00 00	 mov	 eax, 4
  03862	6b c8 05	 imul	 ecx, eax, 5
  03865	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  03868	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0386d	74 13		 je	 SHORT $LN370@P_TouchSpe

; 1476 : 					player->powers[pw_tailsfly] = 1;

  0386f	b8 04 00 00 00	 mov	 eax, 4
  03874	6b c8 05	 imul	 ecx, eax, 5
  03877	8b 55 f8	 mov	 edx, DWORD PTR _player$[ebp]
  0387a	c7 44 0a 38 01
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 1
$LN370@P_TouchSpe:

; 1477 : 			}
; 1478 : 			return;

  03882	eb 65		 jmp	 SHORT $LN374@P_TouchSpe

; 1479 : 
; 1480 : 		case MT_DISS:
; 1481 : 			break;

  03884	eb 13		 jmp	 SHORT $LN2@P_TouchSpe
$LN372@P_TouchSpe:

; 1482 : 
; 1483 : 		case MT_TOKEN: // Tails 08-18-2001
; 1484 : 			P_SetMobjState(special, S_DISS);

  03886	68 4f 06 00 00	 push	 1615			; 0000064fH
  0388b	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  0388e	50		 push	 eax
  0388f	e8 00 00 00 00	 call	 _P_SetMobjState
  03894	83 c4 08	 add	 esp, 8

; 1485 : 			return; // Tails 08-18-2001

  03897	eb 50		 jmp	 SHORT $LN374@P_TouchSpe
$LN373@P_TouchSpe:
$LN2@P_TouchSpe:

; 1486 : 
; 1487 : 		default:
; 1488 : 			break;
; 1489 : 		}
; 1490 : 	}
; 1491 : 
; 1492 : 	P_SetMobjState(special, S_DISS);

  03899	68 4f 06 00 00	 push	 1615			; 0000064fH
  0389e	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  038a1	50		 push	 eax
  038a2	e8 00 00 00 00	 call	 _P_SetMobjState
  038a7	83 c4 08	 add	 esp, 8

; 1493 : 	P_UnsetThingPosition(special);

  038aa	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  038ad	50		 push	 eax
  038ae	e8 00 00 00 00	 call	 _P_UnsetThingPosition
  038b3	83 c4 04	 add	 esp, 4

; 1494 : 	special->flags &= ~MF_NOBLOCKMAP;

  038b6	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  038b9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  038bc	83 e1 ef	 and	 ecx, -17		; ffffffefH
  038bf	8b 55 08	 mov	 edx, DWORD PTR _special$[ebp]
  038c2	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1495 : 	P_SetThingPosition(special);

  038c5	8b 45 08	 mov	 eax, DWORD PTR _special$[ebp]
  038c8	50		 push	 eax
  038c9	e8 00 00 00 00	 call	 _P_SetThingPosition
  038ce	83 c4 04	 add	 esp, 4

; 1496 : 
; 1497 : 	if (sound != sfx_None)

  038d1	83 7d ec 00	 cmp	 DWORD PTR _sound$[ebp], 0
  038d5	74 12		 je	 SHORT $LN374@P_TouchSpe

; 1498 : 		S_StartSound(player->mo, sound); // was NULL, but changed to player so you could hear others pick up rings

  038d7	8b 45 ec	 mov	 eax, DWORD PTR _sound$[ebp]
  038da	50		 push	 eax
  038db	8b 4d f8	 mov	 ecx, DWORD PTR _player$[ebp]
  038de	8b 11		 mov	 edx, DWORD PTR [ecx]
  038e0	52		 push	 edx
  038e1	e8 00 00 00 00	 call	 _S_StartSound
  038e6	83 c4 08	 add	 esp, 8
$LN374@P_TouchSpe:

; 1499 : }

  038e9	5f		 pop	 edi
  038ea	5e		 pop	 esi
  038eb	5b		 pop	 ebx
  038ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  038ef	33 cd		 xor	 ecx, ebp
  038f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  038f6	8b e5		 mov	 esp, ebp
  038f8	5d		 pop	 ebp
  038f9	c3		 ret	 0
  038fa	66 90		 npad	 2
$LN382@P_TouchSpe:
  038fc	00 00 00 00	 DD	 $LN192@P_TouchSpe
  03900	00 00 00 00	 DD	 $LN97@P_TouchSpe
  03904	00 00 00 00	 DD	 $LN89@P_TouchSpe
  03908	00 00 00 00	 DD	 $LN233@P_TouchSpe
  0390c	00 00 00 00	 DD	 $LN239@P_TouchSpe
  03910	00 00 00 00	 DD	 $LN245@P_TouchSpe
  03914	00 00 00 00	 DD	 $LN310@P_TouchSpe
  03918	00 00 00 00	 DD	 $LN372@P_TouchSpe
  0391c	00 00 00 00	 DD	 $LN337@P_TouchSpe
  03920	00 00 00 00	 DD	 $LN354@P_TouchSpe
  03924	00 00 00 00	 DD	 $LN106@P_TouchSpe
  03928	00 00 00 00	 DD	 $LN312@P_TouchSpe
  0392c	00 00 00 00	 DD	 $LN206@P_TouchSpe
  03930	00 00 00 00	 DD	 $LN305@P_TouchSpe
  03934	00 00 00 00	 DD	 $LN200@P_TouchSpe
  03938	00 00 00 00	 DD	 $LN166@P_TouchSpe
  0393c	00 00 00 00	 DD	 $LN198@P_TouchSpe
  03940	00 00 00 00	 DD	 $LN335@P_TouchSpe
  03944	00 00 00 00	 DD	 $LN183@P_TouchSpe
  03948	00 00 00 00	 DD	 $LN178@P_TouchSpe
  0394c	00 00 00 00	 DD	 $LN324@P_TouchSpe
  03950	00 00 00 00	 DD	 $LN373@P_TouchSpe
$LN381@P_TouchSpe:
  03954	00		 DB	 0
  03955	15		 DB	 21			; 00000015H
  03956	15		 DB	 21			; 00000015H
  03957	15		 DB	 21			; 00000015H
  03958	01		 DB	 1
  03959	15		 DB	 21			; 00000015H
  0395a	15		 DB	 21			; 00000015H
  0395b	15		 DB	 21			; 00000015H
  0395c	15		 DB	 21			; 00000015H
  0395d	15		 DB	 21			; 00000015H
  0395e	15		 DB	 21			; 00000015H
  0395f	15		 DB	 21			; 00000015H
  03960	15		 DB	 21			; 00000015H
  03961	15		 DB	 21			; 00000015H
  03962	15		 DB	 21			; 00000015H
  03963	15		 DB	 21			; 00000015H
  03964	15		 DB	 21			; 00000015H
  03965	00		 DB	 0
  03966	15		 DB	 21			; 00000015H
  03967	15		 DB	 21			; 00000015H
  03968	15		 DB	 21			; 00000015H
  03969	15		 DB	 21			; 00000015H
  0396a	15		 DB	 21			; 00000015H
  0396b	02		 DB	 2
  0396c	15		 DB	 21			; 00000015H
  0396d	03		 DB	 3
  0396e	03		 DB	 3
  0396f	15		 DB	 21			; 00000015H
  03970	15		 DB	 21			; 00000015H
  03971	15		 DB	 21			; 00000015H
  03972	04		 DB	 4
  03973	05		 DB	 5
  03974	06		 DB	 6
  03975	07		 DB	 7
  03976	08		 DB	 8
  03977	09		 DB	 9
  03978	0a		 DB	 10			; 0000000aH
  03979	0b		 DB	 11			; 0000000bH
  0397a	0b		 DB	 11			; 0000000bH
  0397b	0b		 DB	 11			; 0000000bH
  0397c	0b		 DB	 11			; 0000000bH
  0397d	0b		 DB	 11			; 0000000bH
  0397e	0b		 DB	 11			; 0000000bH
  0397f	0b		 DB	 11			; 0000000bH
  03980	0c		 DB	 12			; 0000000cH
  03981	15		 DB	 21			; 00000015H
  03982	0d		 DB	 13			; 0000000dH
  03983	15		 DB	 21			; 00000015H
  03984	15		 DB	 21			; 00000015H
  03985	15		 DB	 21			; 00000015H
  03986	15		 DB	 21			; 00000015H
  03987	00		 DB	 0
  03988	0e		 DB	 14			; 0000000eH
  03989	15		 DB	 21			; 00000015H
  0398a	15		 DB	 21			; 00000015H
  0398b	15		 DB	 21			; 00000015H
  0398c	0f		 DB	 15			; 0000000fH
  0398d	10		 DB	 16			; 00000010H
  0398e	10		 DB	 16			; 00000010H
  0398f	15		 DB	 21			; 00000015H
  03990	15		 DB	 21			; 00000015H
  03991	15		 DB	 21			; 00000015H
  03992	15		 DB	 21			; 00000015H
  03993	15		 DB	 21			; 00000015H
  03994	15		 DB	 21			; 00000015H
  03995	15		 DB	 21			; 00000015H
  03996	15		 DB	 21			; 00000015H
  03997	15		 DB	 21			; 00000015H
  03998	15		 DB	 21			; 00000015H
  03999	15		 DB	 21			; 00000015H
  0399a	15		 DB	 21			; 00000015H
  0399b	15		 DB	 21			; 00000015H
  0399c	15		 DB	 21			; 00000015H
  0399d	15		 DB	 21			; 00000015H
  0399e	15		 DB	 21			; 00000015H
  0399f	15		 DB	 21			; 00000015H
  039a0	15		 DB	 21			; 00000015H
  039a1	15		 DB	 21			; 00000015H
  039a2	15		 DB	 21			; 00000015H
  039a3	15		 DB	 21			; 00000015H
  039a4	15		 DB	 21			; 00000015H
  039a5	15		 DB	 21			; 00000015H
  039a6	15		 DB	 21			; 00000015H
  039a7	15		 DB	 21			; 00000015H
  039a8	15		 DB	 21			; 00000015H
  039a9	15		 DB	 21			; 00000015H
  039aa	15		 DB	 21			; 00000015H
  039ab	15		 DB	 21			; 00000015H
  039ac	15		 DB	 21			; 00000015H
  039ad	15		 DB	 21			; 00000015H
  039ae	15		 DB	 21			; 00000015H
  039af	15		 DB	 21			; 00000015H
  039b0	15		 DB	 21			; 00000015H
  039b1	15		 DB	 21			; 00000015H
  039b2	15		 DB	 21			; 00000015H
  039b3	15		 DB	 21			; 00000015H
  039b4	15		 DB	 21			; 00000015H
  039b5	15		 DB	 21			; 00000015H
  039b6	15		 DB	 21			; 00000015H
  039b7	15		 DB	 21			; 00000015H
  039b8	15		 DB	 21			; 00000015H
  039b9	15		 DB	 21			; 00000015H
  039ba	15		 DB	 21			; 00000015H
  039bb	15		 DB	 21			; 00000015H
  039bc	15		 DB	 21			; 00000015H
  039bd	15		 DB	 21			; 00000015H
  039be	15		 DB	 21			; 00000015H
  039bf	15		 DB	 21			; 00000015H
  039c0	11		 DB	 17			; 00000011H
  039c1	15		 DB	 21			; 00000015H
  039c2	15		 DB	 21			; 00000015H
  039c3	15		 DB	 21			; 00000015H
  039c4	15		 DB	 21			; 00000015H
  039c5	15		 DB	 21			; 00000015H
  039c6	15		 DB	 21			; 00000015H
  039c7	15		 DB	 21			; 00000015H
  039c8	15		 DB	 21			; 00000015H
  039c9	15		 DB	 21			; 00000015H
  039ca	15		 DB	 21			; 00000015H
  039cb	15		 DB	 21			; 00000015H
  039cc	12		 DB	 18			; 00000012H
  039cd	12		 DB	 18			; 00000012H
  039ce	00		 DB	 0
  039cf	00		 DB	 0
  039d0	15		 DB	 21			; 00000015H
  039d1	13		 DB	 19			; 00000013H
  039d2	13		 DB	 19			; 00000013H
  039d3	15		 DB	 21			; 00000015H
  039d4	15		 DB	 21			; 00000015H
  039d5	15		 DB	 21			; 00000015H
  039d6	15		 DB	 21			; 00000015H
  039d7	15		 DB	 21			; 00000015H
  039d8	15		 DB	 21			; 00000015H
  039d9	15		 DB	 21			; 00000015H
  039da	15		 DB	 21			; 00000015H
  039db	15		 DB	 21			; 00000015H
  039dc	15		 DB	 21			; 00000015H
  039dd	15		 DB	 21			; 00000015H
  039de	15		 DB	 21			; 00000015H
  039df	15		 DB	 21			; 00000015H
  039e0	15		 DB	 21			; 00000015H
  039e1	15		 DB	 21			; 00000015H
  039e2	15		 DB	 21			; 00000015H
  039e3	15		 DB	 21			; 00000015H
  039e4	15		 DB	 21			; 00000015H
  039e5	15		 DB	 21			; 00000015H
  039e6	15		 DB	 21			; 00000015H
  039e7	15		 DB	 21			; 00000015H
  039e8	15		 DB	 21			; 00000015H
  039e9	15		 DB	 21			; 00000015H
  039ea	15		 DB	 21			; 00000015H
  039eb	15		 DB	 21			; 00000015H
  039ec	15		 DB	 21			; 00000015H
  039ed	15		 DB	 21			; 00000015H
  039ee	15		 DB	 21			; 00000015H
  039ef	15		 DB	 21			; 00000015H
  039f0	15		 DB	 21			; 00000015H
  039f1	15		 DB	 21			; 00000015H
  039f2	15		 DB	 21			; 00000015H
  039f3	15		 DB	 21			; 00000015H
  039f4	15		 DB	 21			; 00000015H
  039f5	15		 DB	 21			; 00000015H
  039f6	15		 DB	 21			; 00000015H
  039f7	15		 DB	 21			; 00000015H
  039f8	15		 DB	 21			; 00000015H
  039f9	15		 DB	 21			; 00000015H
  039fa	15		 DB	 21			; 00000015H
  039fb	14		 DB	 20			; 00000014H
$LN384@P_TouchSpe:
  039fc	00 00 00 00	 DD	 $LN285@P_TouchSpe
  03a00	00 00 00 00	 DD	 $LN289@P_TouchSpe
  03a04	00 00 00 00	 DD	 $LN293@P_TouchSpe
  03a08	00 00 00 00	 DD	 $LN297@P_TouchSpe
  03a0c	00 00 00 00	 DD	 $LN301@P_TouchSpe
  03a10	00 00 00 00	 DD	 $LN251@P_TouchSpe
  03a14	00 00 00 00	 DD	 $LN256@P_TouchSpe
  03a18	00 00 00 00	 DD	 $LN261@P_TouchSpe
  03a1c	00 00 00 00	 DD	 $LN266@P_TouchSpe
  03a20	00 00 00 00	 DD	 $LN271@P_TouchSpe
  03a24	00 00 00 00	 DD	 $LN276@P_TouchSpe
  03a28	00 00 00 00	 DD	 $LN227@P_TouchSpe
  03a2c	00 00 00 00	 DD	 $LN225@P_TouchSpe
  03a30	00 00 00 00	 DD	 $LN220@P_TouchSpe
  03a34	00 00 00 00	 DD	 $LN216@P_TouchSpe
  03a38	00 00 00 00	 DD	 $LN222@P_TouchSpe
  03a3c	00 00 00 00	 DD	 $LN140@P_TouchSpe
  03a40	00 00 00 00	 DD	 $LN149@P_TouchSpe
  03a44	00 00 00 00	 DD	 $LN120@P_TouchSpe
  03a48	00 00 00 00	 DD	 $LN135@P_TouchSpe
  03a4c	00 00 00 00	 DD	 $LN134@P_TouchSpe
  03a50	00 00 00 00	 DD	 $LN131@P_TouchSpe
  03a54	00 00 00 00	 DD	 $LN132@P_TouchSpe
  03a58	00 00 00 00	 DD	 $LN133@P_TouchSpe
  03a5c	00 00 00 00	 DD	 $LN115@P_TouchSpe
  03a60	00 00 00 00	 DD	 $LN192@P_TouchSpe
  03a64	00 00 00 00	 DD	 $LN373@P_TouchSpe
$LN383@P_TouchSpe:
  03a68	00		 DB	 0
  03a69	01		 DB	 1
  03a6a	02		 DB	 2
  03a6b	03		 DB	 3
  03a6c	04		 DB	 4
  03a6d	05		 DB	 5
  03a6e	06		 DB	 6
  03a6f	07		 DB	 7
  03a70	08		 DB	 8
  03a71	09		 DB	 9
  03a72	0a		 DB	 10			; 0000000aH
  03a73	1a		 DB	 26			; 0000001aH
  03a74	1a		 DB	 26			; 0000001aH
  03a75	1a		 DB	 26			; 0000001aH
  03a76	1a		 DB	 26			; 0000001aH
  03a77	1a		 DB	 26			; 0000001aH
  03a78	0b		 DB	 11			; 0000000bH
  03a79	0b		 DB	 11			; 0000000bH
  03a7a	1a		 DB	 26			; 0000001aH
  03a7b	1a		 DB	 26			; 0000001aH
  03a7c	1a		 DB	 26			; 0000001aH
  03a7d	0c		 DB	 12			; 0000000cH
  03a7e	1a		 DB	 26			; 0000001aH
  03a7f	0d		 DB	 13			; 0000000dH
  03a80	0e		 DB	 14			; 0000000eH
  03a81	0e		 DB	 14			; 0000000eH
  03a82	0e		 DB	 14			; 0000000eH
  03a83	0e		 DB	 14			; 0000000eH
  03a84	0f		 DB	 15			; 0000000fH
  03a85	1a		 DB	 26			; 0000001aH
  03a86	1a		 DB	 26			; 0000001aH
  03a87	1a		 DB	 26			; 0000001aH
  03a88	1a		 DB	 26			; 0000001aH
  03a89	1a		 DB	 26			; 0000001aH
  03a8a	1a		 DB	 26			; 0000001aH
  03a8b	10		 DB	 16			; 00000010H
  03a8c	1a		 DB	 26			; 0000001aH
  03a8d	11		 DB	 17			; 00000011H
  03a8e	12		 DB	 18			; 00000012H
  03a8f	1a		 DB	 26			; 0000001aH
  03a90	13		 DB	 19			; 00000013H
  03a91	1a		 DB	 26			; 0000001aH
  03a92	1a		 DB	 26			; 0000001aH
  03a93	14		 DB	 20			; 00000014H
  03a94	15		 DB	 21			; 00000015H
  03a95	16		 DB	 22			; 00000016H
  03a96	17		 DB	 23			; 00000017H
  03a97	18		 DB	 24			; 00000018H
  03a98	1a		 DB	 26			; 0000001aH
  03a99	1a		 DB	 26			; 0000001aH
  03a9a	1a		 DB	 26			; 0000001aH
  03a9b	1a		 DB	 26			; 0000001aH
  03a9c	1a		 DB	 26			; 0000001aH
  03a9d	1a		 DB	 26			; 0000001aH
  03a9e	1a		 DB	 26			; 0000001aH
  03a9f	1a		 DB	 26			; 0000001aH
  03aa0	1a		 DB	 26			; 0000001aH
  03aa1	1a		 DB	 26			; 0000001aH
  03aa2	1a		 DB	 26			; 0000001aH
  03aa3	1a		 DB	 26			; 0000001aH
  03aa4	1a		 DB	 26			; 0000001aH
  03aa5	1a		 DB	 26			; 0000001aH
  03aa6	1a		 DB	 26			; 0000001aH
  03aa7	1a		 DB	 26			; 0000001aH
  03aa8	1a		 DB	 26			; 0000001aH
  03aa9	1a		 DB	 26			; 0000001aH
  03aaa	1a		 DB	 26			; 0000001aH
  03aab	1a		 DB	 26			; 0000001aH
  03aac	1a		 DB	 26			; 0000001aH
  03aad	1a		 DB	 26			; 0000001aH
  03aae	1a		 DB	 26			; 0000001aH
  03aaf	1a		 DB	 26			; 0000001aH
  03ab0	1a		 DB	 26			; 0000001aH
  03ab1	1a		 DB	 26			; 0000001aH
  03ab2	19		 DB	 25			; 00000019H
_P_TouchSpecialThing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayerEmeraldBurst
_TEXT	SEGMENT
_mo$1 = -44						; size = 4
_statenum$2 = -40					; size = 4
_stoneflag$3 = -36					; size = 4
_num_stones$4 = -32					; size = 4
_momy$ = -28						; size = 4
_momx$ = -24						; size = 4
_z$ = -20						; size = 4
_amt$ = -16						; size = 4
_ns$ = -12						; size = 4
_fa$ = -8						; size = 4
_i$ = -4						; size = 4
_player$ = 8						; size = 4
_toss$ = 12						; size = 4
_P_PlayerEmeraldBurst PROC				; COMDAT

; 3570 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3571 : 	INT32 i;
; 3572 : 	angle_t fa;
; 3573 : 	fixed_t ns;
; 3574 : 	INT32 amt;
; 3575 : 	fixed_t z = 0, momx = 0, momy = 0;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00010	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _momx$[ebp], 0
  00017	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _momy$[ebp], 0

; 3576 : 
; 3577 : 	// Better safe than sorry.
; 3578 : 	if (!player)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _player$[ebp], 0
  00022	75 05		 jne	 SHORT $LN5@P_PlayerEm

; 3579 : 		return;

  00024	e9 73 05 00 00	 jmp	 $LN3@P_PlayerEm
$LN5@P_PlayerEm:

; 3580 : 
; 3581 : 	// Spill power stones
; 3582 : 	if (player->powers[pw_emeralds])

  00029	b8 04 00 00 00	 mov	 eax, 4
  0002e	6b c8 18	 imul	 ecx, eax, 24
  00031	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00034	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00039	0f 84 5d 05 00
	00		 je	 $LN3@P_PlayerEm

; 3583 : 	{
; 3584 : 		INT32 num_stones = 0;

  0003f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _num_stones$4[ebp], 0

; 3585 : 
; 3586 : 		if (player->powers[pw_emeralds] & EMERALD1)

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c8 18	 imul	 ecx, eax, 24
  0004e	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00051	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00055	83 e0 01	 and	 eax, 1
  00058	74 09		 je	 SHORT $LN7@P_PlayerEm

; 3587 : 			num_stones++;

  0005a	8b 45 e0	 mov	 eax, DWORD PTR _num_stones$4[ebp]
  0005d	83 c0 01	 add	 eax, 1
  00060	89 45 e0	 mov	 DWORD PTR _num_stones$4[ebp], eax
$LN7@P_PlayerEm:

; 3588 : 		if (player->powers[pw_emeralds] & EMERALD2)

  00063	b8 04 00 00 00	 mov	 eax, 4
  00068	6b c8 18	 imul	 ecx, eax, 24
  0006b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0006e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00072	83 e0 02	 and	 eax, 2
  00075	74 09		 je	 SHORT $LN8@P_PlayerEm

; 3589 : 			num_stones++;

  00077	8b 45 e0	 mov	 eax, DWORD PTR _num_stones$4[ebp]
  0007a	83 c0 01	 add	 eax, 1
  0007d	89 45 e0	 mov	 DWORD PTR _num_stones$4[ebp], eax
$LN8@P_PlayerEm:

; 3590 : 		if (player->powers[pw_emeralds] & EMERALD3)

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	6b c8 18	 imul	 ecx, eax, 24
  00088	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0008b	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0008f	83 e0 04	 and	 eax, 4
  00092	74 09		 je	 SHORT $LN9@P_PlayerEm

; 3591 : 			num_stones++;

  00094	8b 45 e0	 mov	 eax, DWORD PTR _num_stones$4[ebp]
  00097	83 c0 01	 add	 eax, 1
  0009a	89 45 e0	 mov	 DWORD PTR _num_stones$4[ebp], eax
$LN9@P_PlayerEm:

; 3592 : 		if (player->powers[pw_emeralds] & EMERALD4)

  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	6b c8 18	 imul	 ecx, eax, 24
  000a5	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000a8	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  000ac	83 e0 08	 and	 eax, 8
  000af	74 09		 je	 SHORT $LN10@P_PlayerEm

; 3593 : 			num_stones++;

  000b1	8b 45 e0	 mov	 eax, DWORD PTR _num_stones$4[ebp]
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 45 e0	 mov	 DWORD PTR _num_stones$4[ebp], eax
$LN10@P_PlayerEm:

; 3594 : 		if (player->powers[pw_emeralds] & EMERALD5)

  000ba	b8 04 00 00 00	 mov	 eax, 4
  000bf	6b c8 18	 imul	 ecx, eax, 24
  000c2	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000c5	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  000c9	83 e0 10	 and	 eax, 16			; 00000010H
  000cc	74 09		 je	 SHORT $LN11@P_PlayerEm

; 3595 : 			num_stones++;

  000ce	8b 45 e0	 mov	 eax, DWORD PTR _num_stones$4[ebp]
  000d1	83 c0 01	 add	 eax, 1
  000d4	89 45 e0	 mov	 DWORD PTR _num_stones$4[ebp], eax
$LN11@P_PlayerEm:

; 3596 : 		if (player->powers[pw_emeralds] & EMERALD6)

  000d7	b8 04 00 00 00	 mov	 eax, 4
  000dc	6b c8 18	 imul	 ecx, eax, 24
  000df	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000e2	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  000e6	83 e0 20	 and	 eax, 32			; 00000020H
  000e9	74 09		 je	 SHORT $LN12@P_PlayerEm

; 3597 : 			num_stones++;

  000eb	8b 45 e0	 mov	 eax, DWORD PTR _num_stones$4[ebp]
  000ee	83 c0 01	 add	 eax, 1
  000f1	89 45 e0	 mov	 DWORD PTR _num_stones$4[ebp], eax
$LN12@P_PlayerEm:

; 3598 : 		if (player->powers[pw_emeralds] & EMERALD7)

  000f4	b8 04 00 00 00	 mov	 eax, 4
  000f9	6b c8 18	 imul	 ecx, eax, 24
  000fc	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  000ff	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00103	83 e0 40	 and	 eax, 64			; 00000040H
  00106	74 09		 je	 SHORT $LN13@P_PlayerEm

; 3599 : 			num_stones++;

  00108	8b 45 e0	 mov	 eax, DWORD PTR _num_stones$4[ebp]
  0010b	83 c0 01	 add	 eax, 1
  0010e	89 45 e0	 mov	 DWORD PTR _num_stones$4[ebp], eax
$LN13@P_PlayerEm:

; 3600 : 
; 3601 : 		if (num_stones > 0)

  00111	83 7d e0 00	 cmp	 DWORD PTR _num_stones$4[ebp], 0
  00115	7e 0e		 jle	 SHORT $LN14@P_PlayerEm

; 3602 : 			amt = 32/num_stones;

  00117	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0011c	99		 cdq
  0011d	f7 7d e0	 idiv	 DWORD PTR _num_stones$4[ebp]
  00120	89 45 f0	 mov	 DWORD PTR _amt$[ebp], eax
  00123	eb 07		 jmp	 SHORT $LN15@P_PlayerEm
$LN14@P_PlayerEm:

; 3603 : 		else
; 3604 : 			amt = 0;

  00125	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _amt$[ebp], 0
$LN15@P_PlayerEm:

; 3605 : 
; 3606 : 		for (i = 0; i < num_stones; i++)

  0012c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00133	eb 09		 jmp	 SHORT $LN4@P_PlayerEm
$LN2@P_PlayerEm:
  00135	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00138	83 c0 01	 add	 eax, 1
  0013b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_PlayerEm:
  0013e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00141	3b 45 e0	 cmp	 eax, DWORD PTR _num_stones$4[ebp]
  00144	0f 8d 52 04 00
	00		 jge	 $LN3@P_PlayerEm

; 3607 : 		{
; 3608 : 			INT32 stoneflag = 0;

  0014a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 0

; 3609 : 			statenum_t statenum = S_CEMG1;

  00151	c7 45 d8 13 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 531 ; 00000213H

; 3610 : 			mobj_t *mo;
; 3611 : 
; 3612 : 			if (player->powers[pw_emeralds] & EMERALD1)

  00158	b8 04 00 00 00	 mov	 eax, 4
  0015d	6b c8 18	 imul	 ecx, eax, 24
  00160	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00163	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00167	83 e0 01	 and	 eax, 1
  0016a	74 34		 je	 SHORT $LN16@P_PlayerEm

; 3613 : 			{
; 3614 : 				stoneflag = EMERALD1;

  0016c	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 1

; 3615 : 				player->powers[pw_emeralds] &= ~EMERALD1;

  00173	b8 04 00 00 00	 mov	 eax, 4
  00178	6b c8 18	 imul	 ecx, eax, 24
  0017b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0017e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00182	83 e0 fe	 and	 eax, -2			; fffffffeH
  00185	b9 04 00 00 00	 mov	 ecx, 4
  0018a	6b d1 18	 imul	 edx, ecx, 24
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00190	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3616 : 				statenum = S_CEMG1;

  00194	c7 45 d8 13 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 531 ; 00000213H

; 3617 : 			}

  0019b	e9 a8 01 00 00	 jmp	 $LN28@P_PlayerEm
$LN16@P_PlayerEm:

; 3618 : 			else if (player->powers[pw_emeralds] & EMERALD2)

  001a0	b8 04 00 00 00	 mov	 eax, 4
  001a5	6b c8 18	 imul	 ecx, eax, 24
  001a8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001ab	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  001af	83 e0 02	 and	 eax, 2
  001b2	74 34		 je	 SHORT $LN18@P_PlayerEm

; 3619 : 			{
; 3620 : 				stoneflag = EMERALD2;

  001b4	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 2

; 3621 : 				player->powers[pw_emeralds] &= ~EMERALD2;

  001bb	b8 04 00 00 00	 mov	 eax, 4
  001c0	6b c8 18	 imul	 ecx, eax, 24
  001c3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001c6	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  001ca	83 e0 fd	 and	 eax, -3			; fffffffdH
  001cd	b9 04 00 00 00	 mov	 ecx, 4
  001d2	6b d1 18	 imul	 edx, ecx, 24
  001d5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001d8	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3622 : 				statenum = S_CEMG2;

  001dc	c7 45 d8 14 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 532 ; 00000214H

; 3623 : 			}

  001e3	e9 60 01 00 00	 jmp	 $LN28@P_PlayerEm
$LN18@P_PlayerEm:

; 3624 : 			else if (player->powers[pw_emeralds] & EMERALD3)

  001e8	b8 04 00 00 00	 mov	 eax, 4
  001ed	6b c8 18	 imul	 ecx, eax, 24
  001f0	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001f3	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  001f7	83 e0 04	 and	 eax, 4
  001fa	74 34		 je	 SHORT $LN20@P_PlayerEm

; 3625 : 			{
; 3626 : 				stoneflag = EMERALD3;

  001fc	c7 45 dc 04 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 4

; 3627 : 				player->powers[pw_emeralds] &= ~EMERALD3;

  00203	b8 04 00 00 00	 mov	 eax, 4
  00208	6b c8 18	 imul	 ecx, eax, 24
  0020b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0020e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00212	83 e0 fb	 and	 eax, -5			; fffffffbH
  00215	b9 04 00 00 00	 mov	 ecx, 4
  0021a	6b d1 18	 imul	 edx, ecx, 24
  0021d	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00220	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3628 : 				statenum = S_CEMG3;

  00224	c7 45 d8 15 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 533 ; 00000215H

; 3629 : 			}

  0022b	e9 18 01 00 00	 jmp	 $LN28@P_PlayerEm
$LN20@P_PlayerEm:

; 3630 : 			else if (player->powers[pw_emeralds] & EMERALD4)

  00230	b8 04 00 00 00	 mov	 eax, 4
  00235	6b c8 18	 imul	 ecx, eax, 24
  00238	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0023b	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0023f	83 e0 08	 and	 eax, 8
  00242	74 34		 je	 SHORT $LN22@P_PlayerEm

; 3631 : 			{
; 3632 : 				stoneflag = EMERALD4;

  00244	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 8

; 3633 : 				player->powers[pw_emeralds] &= ~EMERALD4;

  0024b	b8 04 00 00 00	 mov	 eax, 4
  00250	6b c8 18	 imul	 ecx, eax, 24
  00253	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00256	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0025a	83 e0 f7	 and	 eax, -9			; fffffff7H
  0025d	b9 04 00 00 00	 mov	 ecx, 4
  00262	6b d1 18	 imul	 edx, ecx, 24
  00265	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00268	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3634 : 				statenum = S_CEMG4;

  0026c	c7 45 d8 16 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 534 ; 00000216H

; 3635 : 			}

  00273	e9 d0 00 00 00	 jmp	 $LN28@P_PlayerEm
$LN22@P_PlayerEm:

; 3636 : 			else if (player->powers[pw_emeralds] & EMERALD5)

  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 18	 imul	 ecx, eax, 24
  00280	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00283	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00287	83 e0 10	 and	 eax, 16			; 00000010H
  0028a	74 34		 je	 SHORT $LN24@P_PlayerEm

; 3637 : 			{
; 3638 : 				stoneflag = EMERALD5;

  0028c	c7 45 dc 10 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 16 ; 00000010H

; 3639 : 				player->powers[pw_emeralds] &= ~EMERALD5;

  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	6b c8 18	 imul	 ecx, eax, 24
  0029b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0029e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  002a2	83 e0 ef	 and	 eax, -17		; ffffffefH
  002a5	b9 04 00 00 00	 mov	 ecx, 4
  002aa	6b d1 18	 imul	 edx, ecx, 24
  002ad	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002b0	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3640 : 				statenum = S_CEMG5;

  002b4	c7 45 d8 17 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 535 ; 00000217H

; 3641 : 			}

  002bb	e9 88 00 00 00	 jmp	 $LN28@P_PlayerEm
$LN24@P_PlayerEm:

; 3642 : 			else if (player->powers[pw_emeralds] & EMERALD6)

  002c0	b8 04 00 00 00	 mov	 eax, 4
  002c5	6b c8 18	 imul	 ecx, eax, 24
  002c8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002cb	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  002cf	83 e0 20	 and	 eax, 32			; 00000020H
  002d2	74 31		 je	 SHORT $LN26@P_PlayerEm

; 3643 : 			{
; 3644 : 				stoneflag = EMERALD6;

  002d4	c7 45 dc 20 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 32 ; 00000020H

; 3645 : 				player->powers[pw_emeralds] &= ~EMERALD6;

  002db	b8 04 00 00 00	 mov	 eax, 4
  002e0	6b c8 18	 imul	 ecx, eax, 24
  002e3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002e6	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  002ea	83 e0 df	 and	 eax, -33		; ffffffdfH
  002ed	b9 04 00 00 00	 mov	 ecx, 4
  002f2	6b d1 18	 imul	 edx, ecx, 24
  002f5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002f8	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3646 : 				statenum = S_CEMG6;

  002fc	c7 45 d8 18 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 536 ; 00000218H

; 3647 : 			}

  00303	eb 43		 jmp	 SHORT $LN28@P_PlayerEm
$LN26@P_PlayerEm:

; 3648 : 			else if (player->powers[pw_emeralds] & EMERALD7)

  00305	b8 04 00 00 00	 mov	 eax, 4
  0030a	6b c8 18	 imul	 ecx, eax, 24
  0030d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00310	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00314	83 e0 40	 and	 eax, 64			; 00000040H
  00317	74 2f		 je	 SHORT $LN28@P_PlayerEm

; 3649 : 			{
; 3650 : 				stoneflag = EMERALD7;

  00319	c7 45 dc 40 00
	00 00		 mov	 DWORD PTR _stoneflag$3[ebp], 64 ; 00000040H

; 3651 : 				player->powers[pw_emeralds] &= ~EMERALD7;

  00320	b8 04 00 00 00	 mov	 eax, 4
  00325	6b c8 18	 imul	 ecx, eax, 24
  00328	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0032b	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0032f	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00332	b9 04 00 00 00	 mov	 ecx, 4
  00337	6b d1 18	 imul	 edx, ecx, 24
  0033a	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0033d	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3652 : 				statenum = S_CEMG7;

  00341	c7 45 d8 19 02
	00 00		 mov	 DWORD PTR _statenum$2[ebp], 537 ; 00000219H
$LN28@P_PlayerEm:

; 3653 : 			}
; 3654 : 
; 3655 : 			if (!stoneflag) // ???

  00348	83 7d dc 00	 cmp	 DWORD PTR _stoneflag$3[ebp], 0
  0034c	75 05		 jne	 SHORT $LN29@P_PlayerEm

; 3656 : 				continue;

  0034e	e9 e2 fd ff ff	 jmp	 $LN2@P_PlayerEm
$LN29@P_PlayerEm:

; 3657 : 
; 3658 : 			if (toss)

  00353	83 7d 0c 00	 cmp	 DWORD PTR _toss$[ebp], 0
  00357	74 56		 je	 SHORT $LN30@P_PlayerEm

; 3659 : 			{
; 3660 : 				fa = player->mo->angle>>ANGLETOFINESHIFT;

  00359	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0035c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00361	c1 ea 13	 shr	 edx, 19			; 00000013H
  00364	89 55 f8	 mov	 DWORD PTR _fa$[ebp], edx

; 3661 : 
; 3662 : 				if (!(player->mo->eflags & MFE_VERTICALFLIP))

  00367	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00372	83 e2 20	 and	 edx, 32			; 00000020H
  00375	75 15		 jne	 SHORT $LN32@P_PlayerEm

; 3663 : 					z = player->mo->z + player->mo->height;

  00377	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0037a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0037c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0037f	8b 02		 mov	 eax, DWORD PTR [edx]
  00381	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00384	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  00387	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
  0038a	eb 1a		 jmp	 SHORT $LN33@P_PlayerEm
$LN32@P_PlayerEm:

; 3664 : 				else
; 3665 : 					z = player->mo->z - (player->mo->height / 2);

  0038c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0038f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00391	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00394	8b 02		 mov	 eax, DWORD PTR [edx]
  00396	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00399	99		 cdq
  0039a	2b c2		 sub	 eax, edx
  0039c	d1 f8		 sar	 eax, 1
  0039e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  003a1	2b c8		 sub	 ecx, eax
  003a3	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
$LN33@P_PlayerEm:

; 3666 : 
; 3667 : 				ns = 8 * FRACUNIT;

  003a6	c7 45 f4 00 00
	08 00		 mov	 DWORD PTR _ns$[ebp], 524288 ; 00080000H

; 3668 : 			}

  003ad	eb 6e		 jmp	 SHORT $LN31@P_PlayerEm
$LN30@P_PlayerEm:

; 3669 : 			else
; 3670 : 			{
; 3671 : 				fa = ((255 / num_stones) * i) * FINEANGLES/256;

  003af	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  003b4	99		 cdq
  003b5	f7 7d e0	 idiv	 DWORD PTR _num_stones$4[ebp]
  003b8	0f af 45 fc	 imul	 eax, DWORD PTR _i$[ebp]
  003bc	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  003bf	99		 cdq
  003c0	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  003c6	03 c2		 add	 eax, edx
  003c8	c1 f8 08	 sar	 eax, 8
  003cb	89 45 f8	 mov	 DWORD PTR _fa$[ebp], eax

; 3672 : 
; 3673 : 				if (!(player->mo->eflags & MFE_VERTICALFLIP))

  003ce	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d3	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  003d9	83 e2 20	 and	 edx, 32			; 00000020H
  003dc	75 1a		 jne	 SHORT $LN34@P_PlayerEm

; 3674 : 					z = player->mo->z + (player->mo->height / 2);

  003de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003e6	8b 02		 mov	 eax, DWORD PTR [edx]
  003e8	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  003eb	99		 cdq
  003ec	2b c2		 sub	 eax, edx
  003ee	d1 f8		 sar	 eax, 1
  003f0	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  003f3	89 45 ec	 mov	 DWORD PTR _z$[ebp], eax
  003f6	eb 1e		 jmp	 SHORT $LN35@P_PlayerEm
$LN34@P_PlayerEm:

; 3675 : 				else
; 3676 : 					z = player->mo->z - (player->mo->height / 4);

  003f8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003fd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00400	8b 02		 mov	 eax, DWORD PTR [edx]
  00402	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00405	99		 cdq
  00406	83 e2 03	 and	 edx, 3
  00409	03 c2		 add	 eax, edx
  0040b	c1 f8 02	 sar	 eax, 2
  0040e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00411	2b c8		 sub	 ecx, eax
  00413	89 4d ec	 mov	 DWORD PTR _z$[ebp], ecx
$LN35@P_PlayerEm:

; 3677 : 
; 3678 : 				ns = 4 * FRACUNIT;

  00416	c7 45 f4 00 00
	04 00		 mov	 DWORD PTR _ns$[ebp], 262144 ; 00040000H
$LN31@P_PlayerEm:

; 3679 : 			}
; 3680 : 
; 3681 : 			momx = FixedMul(FINECOSINE(fa), ns);

  0041d	8b 45 f4	 mov	 eax, DWORD PTR _ns$[ebp]
  00420	50		 push	 eax
  00421	8b 4d f8	 mov	 ecx, DWORD PTR _fa$[ebp]
  00424	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0042a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 _FixedMul
  00433	83 c4 08	 add	 esp, 8
  00436	89 45 e8	 mov	 DWORD PTR _momx$[ebp], eax

; 3682 : 
; 3683 : 			if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  00439	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00440	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00445	75 2f		 jne	 SHORT $LN36@P_PlayerEm
  00447	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0044a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044c	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00452	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00458	75 1c		 jne	 SHORT $LN36@P_PlayerEm

; 3684 : 				momy = FixedMul(FINESINE(fa),ns);

  0045a	8b 45 f4	 mov	 eax, DWORD PTR _ns$[ebp]
  0045d	50		 push	 eax
  0045e	8b 4d f8	 mov	 ecx, DWORD PTR _fa$[ebp]
  00461	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00468	52		 push	 edx
  00469	e8 00 00 00 00	 call	 _FixedMul
  0046e	83 c4 08	 add	 esp, 8
  00471	89 45 e4	 mov	 DWORD PTR _momy$[ebp], eax
  00474	eb 07		 jmp	 SHORT $LN37@P_PlayerEm
$LN36@P_PlayerEm:

; 3685 : 			else
; 3686 : 				momy = 0;

  00476	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _momy$[ebp], 0
$LN37@P_PlayerEm:

; 3687 : 
; 3688 : 			mo = P_SpawnMobj(player->mo->x, player->mo->y, z, MT_FLINGEMERALD);

  0047d	6a 40		 push	 64			; 00000040H
  0047f	8b 45 ec	 mov	 eax, DWORD PTR _z$[ebp]
  00482	50		 push	 eax
  00483	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00486	8b 11		 mov	 edx, DWORD PTR [ecx]
  00488	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0048b	50		 push	 eax
  0048c	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0048f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00491	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00494	50		 push	 eax
  00495	e8 00 00 00 00	 call	 _P_SpawnMobj
  0049a	83 c4 10	 add	 esp, 16			; 00000010H
  0049d	89 45 d4	 mov	 DWORD PTR _mo$1[ebp], eax

; 3689 : 			mo->health = 1;

  004a0	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  004a3	c7 80 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+140], 1

; 3690 : 			mo->threshold = stoneflag;

  004ad	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  004b0	8b 4d dc	 mov	 ecx, DWORD PTR _stoneflag$3[ebp]
  004b3	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx

; 3691 : 			mo->flags2 |= MF2_DONTRESPAWN;

  004b9	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  004bc	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  004c2	83 c9 04	 or	 ecx, 4
  004c5	8b 55 d4	 mov	 edx, DWORD PTR _mo$1[ebp]
  004c8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3692 : 			mo->flags2 |= MF2_SLIDEPUSH;

  004ce	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  004d1	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  004d7	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  004dd	8b 55 d4	 mov	 edx, DWORD PTR _mo$1[ebp]
  004e0	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3693 : 			mo->flags &= ~MF_NOGRAVITY;

  004e6	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  004e9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  004ec	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  004f2	8b 55 d4	 mov	 edx, DWORD PTR _mo$1[ebp]
  004f5	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3694 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  004f8	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  004fb	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  004fe	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00504	8b 55 d4	 mov	 edx, DWORD PTR _mo$1[ebp]
  00507	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3695 : 			P_SetTarget(&mo->target, player->mo);

  0050a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0050d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050f	51		 push	 ecx
  00510	8b 55 d4	 mov	 edx, DWORD PTR _mo$1[ebp]
  00513	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00519	52		 push	 edx
  0051a	e8 00 00 00 00	 call	 _P_SetTarget
  0051f	83 c4 08	 add	 esp, 8

; 3696 : 			mo->fuse = 12*TICRATE;

  00522	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  00525	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3697 : 			P_SetMobjState(mo, statenum);

  0052f	8b 45 d8	 mov	 eax, DWORD PTR _statenum$2[ebp]
  00532	50		 push	 eax
  00533	8b 4d d4	 mov	 ecx, DWORD PTR _mo$1[ebp]
  00536	51		 push	 ecx
  00537	e8 00 00 00 00	 call	 _P_SetMobjState
  0053c	83 c4 08	 add	 esp, 8

; 3698 : 
; 3699 : 			mo->momx = momx;

  0053f	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  00542	8b 4d e8	 mov	 ecx, DWORD PTR _momx$[ebp]
  00545	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 3700 : 			mo->momy = momy;

  00548	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  0054b	8b 4d e4	 mov	 ecx, DWORD PTR _momy$[ebp]
  0054e	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 3701 : 
; 3702 : 			P_SetObjectMomZ(mo, 3*FRACUNIT, false);

  00551	6a 00		 push	 0
  00553	68 00 00 03 00	 push	 196608			; 00030000H
  00558	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  0055b	50		 push	 eax
  0055c	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00561	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3703 : 
; 3704 : 			if (player->mo->eflags * MFE_VERTICALFLIP)

  00564	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00567	8b 08		 mov	 ecx, DWORD PTR [eax]
  00569	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0056f	c1 e2 05	 shl	 edx, 5
  00572	85 d2		 test	 edx, edx
  00574	74 0e		 je	 SHORT $LN38@P_PlayerEm

; 3705 : 				mo->momz = -mo->momz;

  00576	8b 45 d4	 mov	 eax, DWORD PTR _mo$1[ebp]
  00579	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0057c	f7 d9		 neg	 ecx
  0057e	8b 55 d4	 mov	 edx, DWORD PTR _mo$1[ebp]
  00581	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
$LN38@P_PlayerEm:

; 3706 : 
; 3707 : 			if (toss)

  00584	83 7d 0c 00	 cmp	 DWORD PTR _toss$[ebp], 0
  00588	74 0d		 je	 SHORT $LN39@P_PlayerEm

; 3708 : 				player->tossdelay = 2*TICRATE;

  0058a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0058d	c7 80 74 01 00
	00 46 00 00 00	 mov	 DWORD PTR [eax+372], 70	; 00000046H
$LN39@P_PlayerEm:

; 3709 : 		}

  00597	e9 99 fb ff ff	 jmp	 $LN2@P_PlayerEm
$LN3@P_PlayerEm:

; 3710 : 	}
; 3711 : }

  0059c	5f		 pop	 edi
  0059d	5e		 pop	 esi
  0059e	5b		 pop	 ebx
  0059f	8b e5		 mov	 esp, ebp
  005a1	5d		 pop	 ebp
  005a2	c3		 ret	 0
_P_PlayerEmeraldBurst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_PlayerRingBurst
_TEXT	SEGMENT
tv962 = -104						; size = 4
tv971 = -104						; size = 4
tv1010 = -104						; size = 4
tv1019 = -104						; size = 4
_weptype$1 = -36					; size = 4
_ammoamt$2 = -32					; size = 4
_num_weapons$3 = -28					; size = 4
_amt$ = -24						; size = 4
_ns$ = -20						; size = 4
_fa$ = -16						; size = 4
_randomangle$ = -9					; size = 1
_mo$ = -8						; size = 4
_i$ = -4						; size = 4
_player$ = 8						; size = 4
_num_rings$ = 12					; size = 4
_P_PlayerRingBurst PROC					; COMDAT

; 3106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3107 : 	INT32 i;
; 3108 : 	mobj_t *mo;
; 3109 : 	UINT8 randomangle;
; 3110 : 	angle_t fa;
; 3111 : 	fixed_t ns;
; 3112 : 	INT32 amt;
; 3113 : 
; 3114 : 	// Better safe than sorry.
; 3115 : 	if (!player)

  00009	83 7d 08 00	 cmp	 DWORD PTR _player$[ebp], 0
  0000d	75 05		 jne	 SHORT $LN10@P_PlayerRi

; 3116 : 		return;

  0000f	e9 9c 14 00 00	 jmp	 $LN1@P_PlayerRi
$LN10@P_PlayerRi:

; 3117 : 
; 3118 : 	// If no health, don't spawn ring!
; 3119 : 	if (player->mo->health <= 1)

  00014	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  00020	7f 07		 jg	 SHORT $LN11@P_PlayerRi

; 3120 : 		num_rings = 0;

  00022	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _num_rings$[ebp], 0
$LN11@P_PlayerRi:

; 3121 : 
; 3122 : 	// If in ultimate mode, don't spill rings.
; 3123 : 	if (ultimatemode && !(maptol & TOL_NIGHTS))

  00029	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _ultimatemode
  00030	85 c0		 test	 eax, eax
  00032	74 29		 je	 SHORT $LN12@P_PlayerRi
  00034	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0003b	83 e0 40	 and	 eax, 64			; 00000040H
  0003e	75 1d		 jne	 SHORT $LN12@P_PlayerRi

; 3124 : 	{
; 3125 : 		player->pflags &= ~PF_NIGHTSFALL;

  00040	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00043	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00049	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  0004f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00052	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 3126 : 		return;

  00058	e9 53 14 00 00	 jmp	 $LN1@P_PlayerRi
$LN12@P_PlayerRi:

; 3127 : 	}
; 3128 : 
; 3129 : 	if (num_rings > 32 && !(player->pflags & PF_NIGHTSFALL))

  0005d	83 7d 0c 20	 cmp	 DWORD PTR _num_rings$[ebp], 32 ; 00000020H
  00061	7e 18		 jle	 SHORT $LN13@P_PlayerRi
  00063	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00066	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0006c	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  00072	75 07		 jne	 SHORT $LN13@P_PlayerRi

; 3130 : 		num_rings = 32;

  00074	c7 45 0c 20 00
	00 00		 mov	 DWORD PTR _num_rings$[ebp], 32 ; 00000020H
$LN13@P_PlayerRi:

; 3131 : 
; 3132 : 	if (player->powers[pw_emeralds])

  0007b	b8 04 00 00 00	 mov	 eax, 4
  00080	6b c8 18	 imul	 ecx, eax, 24
  00083	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00086	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0008b	74 0e		 je	 SHORT $LN14@P_PlayerRi

; 3133 : 		P_PlayerEmeraldBurst(player, false);

  0008d	6a 00		 push	 0
  0008f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _P_PlayerEmeraldBurst
  00098	83 c4 08	 add	 esp, 8
$LN14@P_PlayerRi:

; 3134 : 
; 3135 : 	// Spill weapons first
; 3136 : 	if (player->ringweapons)

  0009b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0009e	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  000a2	0f 84 1d 07 00
	00		 je	 $LN3@P_PlayerRi

; 3137 : 	{
; 3138 : 		INT32 num_weapons = 0;

  000a8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _num_weapons$3[ebp], 0

; 3139 : 		INT32 ammoamt = 0;

  000af	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _ammoamt$2[ebp], 0

; 3140 : 
; 3141 : 		if (player->ringweapons & 1)

  000b6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000b9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000bc	83 e1 01	 and	 ecx, 1
  000bf	74 09		 je	 SHORT $LN16@P_PlayerRi

; 3142 : 			num_weapons++;

  000c1	8b 45 e4	 mov	 eax, DWORD PTR _num_weapons$3[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 e4	 mov	 DWORD PTR _num_weapons$3[ebp], eax
$LN16@P_PlayerRi:

; 3143 : 		if (player->ringweapons & 2)

  000ca	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000cd	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000d0	83 e1 02	 and	 ecx, 2
  000d3	74 09		 je	 SHORT $LN17@P_PlayerRi

; 3144 : 			num_weapons++;

  000d5	8b 45 e4	 mov	 eax, DWORD PTR _num_weapons$3[ebp]
  000d8	83 c0 01	 add	 eax, 1
  000db	89 45 e4	 mov	 DWORD PTR _num_weapons$3[ebp], eax
$LN17@P_PlayerRi:

; 3145 : 		if (player->ringweapons & 4)

  000de	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000e1	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000e4	83 e1 04	 and	 ecx, 4
  000e7	74 09		 je	 SHORT $LN18@P_PlayerRi

; 3146 : 			num_weapons++;

  000e9	8b 45 e4	 mov	 eax, DWORD PTR _num_weapons$3[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 e4	 mov	 DWORD PTR _num_weapons$3[ebp], eax
$LN18@P_PlayerRi:

; 3147 : 		if (player->ringweapons & 8)

  000f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  000f5	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000f8	83 e1 08	 and	 ecx, 8
  000fb	74 09		 je	 SHORT $LN19@P_PlayerRi

; 3148 : 			num_weapons++;

  000fd	8b 45 e4	 mov	 eax, DWORD PTR _num_weapons$3[ebp]
  00100	83 c0 01	 add	 eax, 1
  00103	89 45 e4	 mov	 DWORD PTR _num_weapons$3[ebp], eax
$LN19@P_PlayerRi:

; 3149 : 		if (player->ringweapons & 16)

  00106	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00109	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0010c	83 e1 10	 and	 ecx, 16			; 00000010H
  0010f	74 09		 je	 SHORT $LN20@P_PlayerRi

; 3150 : 			num_weapons++;

  00111	8b 45 e4	 mov	 eax, DWORD PTR _num_weapons$3[ebp]
  00114	83 c0 01	 add	 eax, 1
  00117	89 45 e4	 mov	 DWORD PTR _num_weapons$3[ebp], eax
$LN20@P_PlayerRi:

; 3151 : 		if (player->ringweapons & 32)

  0011a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0011d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00120	83 e1 20	 and	 ecx, 32			; 00000020H
  00123	74 09		 je	 SHORT $LN21@P_PlayerRi

; 3152 : 			num_weapons++;

  00125	8b 45 e4	 mov	 eax, DWORD PTR _num_weapons$3[ebp]
  00128	83 c0 01	 add	 eax, 1
  0012b	89 45 e4	 mov	 DWORD PTR _num_weapons$3[ebp], eax
$LN21@P_PlayerRi:

; 3153 : 
; 3154 : 		if (num_weapons > 0)

  0012e	83 7d e4 00	 cmp	 DWORD PTR _num_weapons$3[ebp], 0
  00132	7e 0e		 jle	 SHORT $LN22@P_PlayerRi

; 3155 : 			amt = 32/num_weapons;

  00134	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00139	99		 cdq
  0013a	f7 7d e4	 idiv	 DWORD PTR _num_weapons$3[ebp]
  0013d	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
  00140	eb 07		 jmp	 SHORT $LN23@P_PlayerRi
$LN22@P_PlayerRi:

; 3156 : 		else
; 3157 : 			amt = 0;

  00142	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _amt$[ebp], 0
$LN23@P_PlayerRi:

; 3158 : 
; 3159 : 		for (i = 0; i < num_weapons; i++)

  00149	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00150	eb 09		 jmp	 SHORT $LN4@P_PlayerRi
$LN2@P_PlayerRi:
  00152	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00155	83 c0 01	 add	 eax, 1
  00158	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@P_PlayerRi:
  0015b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0015e	3b 45 e4	 cmp	 eax, DWORD PTR _num_weapons$3[ebp]
  00161	0f 8d 5e 06 00
	00		 jge	 $LN3@P_PlayerRi

; 3160 : 		{
; 3161 : 			mobjtype_t weptype = 0;

  00167	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _weptype$1[ebp], 0

; 3162 : 
; 3163 : 			if (player->ringweapons & RW_BOUNCE) // Bounce

  0016e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00171	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00174	83 e1 01	 and	 ecx, 1
  00177	74 78		 je	 SHORT $LN24@P_PlayerRi

; 3164 : 			{
; 3165 : 				weptype = MT_BOUNCEPICKUP;

  00179	c7 45 dc d6 00
	00 00		 mov	 DWORD PTR _weptype$1[ebp], 214 ; 000000d6H

; 3166 : 				player->ringweapons &= ~RW_BOUNCE;

  00180	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00183	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00186	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00189	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0018c	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 3167 : 
; 3168 : 				if (player->powers[pw_bouncering] >= mobjinfo[weptype].reactiontime)

  0018f	b8 04 00 00 00	 mov	 eax, 4
  00194	6b c8 12	 imul	 ecx, eax, 18
  00197	6b 55 dc 60	 imul	 edx, DWORD PTR _weptype$1[ebp], 96
  0019b	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0019e	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  001a2	3b 8a 14 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx+20]
  001a8	7c 0f		 jl	 SHORT $LN26@P_PlayerRi

; 3169 : 					ammoamt = mobjinfo[weptype].reactiontime;

  001aa	6b 45 dc 60	 imul	 eax, DWORD PTR _weptype$1[ebp], 96
  001ae	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+20]
  001b4	89 4d e0	 mov	 DWORD PTR _ammoamt$2[ebp], ecx
  001b7	eb 12		 jmp	 SHORT $LN27@P_PlayerRi
$LN26@P_PlayerRi:

; 3170 : 				else
; 3171 : 					ammoamt = player->powers[pw_bouncering];

  001b9	b8 04 00 00 00	 mov	 eax, 4
  001be	6b c8 12	 imul	 ecx, eax, 18
  001c1	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001c4	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  001c8	89 45 e0	 mov	 DWORD PTR _ammoamt$2[ebp], eax
$LN27@P_PlayerRi:

; 3172 : 
; 3173 : 				player->powers[pw_bouncering] -= ammoamt;

  001cb	b8 04 00 00 00	 mov	 eax, 4
  001d0	6b c8 12	 imul	 ecx, eax, 18
  001d3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  001d6	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  001da	2b 45 e0	 sub	 eax, DWORD PTR _ammoamt$2[ebp]
  001dd	b9 04 00 00 00	 mov	 ecx, 4
  001e2	6b d1 12	 imul	 edx, ecx, 18
  001e5	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  001e8	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3174 : 			}

  001ec	e9 87 02 00 00	 jmp	 $LN44@P_PlayerRi
$LN24@P_PlayerRi:

; 3175 : 			else if (player->ringweapons & RW_RAIL) // Rail

  001f1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  001f4	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001f7	83 e1 02	 and	 ecx, 2
  001fa	74 78		 je	 SHORT $LN28@P_PlayerRi

; 3176 : 			{
; 3177 : 				weptype = MT_RAILPICKUP;

  001fc	c7 45 dc d7 00
	00 00		 mov	 DWORD PTR _weptype$1[ebp], 215 ; 000000d7H

; 3178 : 				player->ringweapons &= ~RW_RAIL;

  00203	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00206	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00209	83 e1 fd	 and	 ecx, -3			; fffffffdH
  0020c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0020f	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 3179 : 
; 3180 : 				if (player->powers[pw_railring] >= mobjinfo[weptype].reactiontime)

  00212	b8 04 00 00 00	 mov	 eax, 4
  00217	6b c8 13	 imul	 ecx, eax, 19
  0021a	6b 55 dc 60	 imul	 edx, DWORD PTR _weptype$1[ebp], 96
  0021e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00221	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00225	3b 8a 14 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx+20]
  0022b	7c 0f		 jl	 SHORT $LN30@P_PlayerRi

; 3181 : 					ammoamt = mobjinfo[weptype].reactiontime;

  0022d	6b 45 dc 60	 imul	 eax, DWORD PTR _weptype$1[ebp], 96
  00231	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+20]
  00237	89 4d e0	 mov	 DWORD PTR _ammoamt$2[ebp], ecx
  0023a	eb 12		 jmp	 SHORT $LN31@P_PlayerRi
$LN30@P_PlayerRi:

; 3182 : 				else
; 3183 : 					ammoamt = player->powers[pw_railring];

  0023c	b8 04 00 00 00	 mov	 eax, 4
  00241	6b c8 13	 imul	 ecx, eax, 19
  00244	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00247	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0024b	89 45 e0	 mov	 DWORD PTR _ammoamt$2[ebp], eax
$LN31@P_PlayerRi:

; 3184 : 
; 3185 : 				player->powers[pw_railring] -= ammoamt;

  0024e	b8 04 00 00 00	 mov	 eax, 4
  00253	6b c8 13	 imul	 ecx, eax, 19
  00256	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00259	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0025d	2b 45 e0	 sub	 eax, DWORD PTR _ammoamt$2[ebp]
  00260	b9 04 00 00 00	 mov	 ecx, 4
  00265	6b d1 13	 imul	 edx, ecx, 19
  00268	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0026b	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3186 : 			}

  0026f	e9 04 02 00 00	 jmp	 $LN44@P_PlayerRi
$LN28@P_PlayerRi:

; 3187 : 			else if (player->ringweapons & RW_AUTO) // Auto

  00274	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00277	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0027a	83 e1 04	 and	 ecx, 4
  0027d	74 78		 je	 SHORT $LN32@P_PlayerRi

; 3188 : 			{
; 3189 : 				weptype = MT_AUTOPICKUP;

  0027f	c7 45 dc d8 00
	00 00		 mov	 DWORD PTR _weptype$1[ebp], 216 ; 000000d8H

; 3190 : 				player->ringweapons &= ~RW_AUTO;

  00286	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00289	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0028c	83 e1 fb	 and	 ecx, -5			; fffffffbH
  0028f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00292	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 3191 : 
; 3192 : 				if (player->powers[pw_automaticring] >= mobjinfo[weptype].reactiontime)

  00295	b8 04 00 00 00	 mov	 eax, 4
  0029a	6b c8 14	 imul	 ecx, eax, 20
  0029d	6b 55 dc 60	 imul	 edx, DWORD PTR _weptype$1[ebp], 96
  002a1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002a4	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  002a8	3b 8a 14 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx+20]
  002ae	7c 0f		 jl	 SHORT $LN34@P_PlayerRi

; 3193 : 					ammoamt = mobjinfo[weptype].reactiontime;

  002b0	6b 45 dc 60	 imul	 eax, DWORD PTR _weptype$1[ebp], 96
  002b4	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+20]
  002ba	89 4d e0	 mov	 DWORD PTR _ammoamt$2[ebp], ecx
  002bd	eb 12		 jmp	 SHORT $LN35@P_PlayerRi
$LN34@P_PlayerRi:

; 3194 : 				else
; 3195 : 					ammoamt = player->powers[pw_automaticring];

  002bf	b8 04 00 00 00	 mov	 eax, 4
  002c4	6b c8 14	 imul	 ecx, eax, 20
  002c7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002ca	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  002ce	89 45 e0	 mov	 DWORD PTR _ammoamt$2[ebp], eax
$LN35@P_PlayerRi:

; 3196 : 
; 3197 : 				player->powers[pw_automaticring] -= ammoamt;

  002d1	b8 04 00 00 00	 mov	 eax, 4
  002d6	6b c8 14	 imul	 ecx, eax, 20
  002d9	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  002dc	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  002e0	2b 45 e0	 sub	 eax, DWORD PTR _ammoamt$2[ebp]
  002e3	b9 04 00 00 00	 mov	 ecx, 4
  002e8	6b d1 14	 imul	 edx, ecx, 20
  002eb	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  002ee	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3198 : 			}

  002f2	e9 81 01 00 00	 jmp	 $LN44@P_PlayerRi
$LN32@P_PlayerRi:

; 3199 : 			else if (player->ringweapons & RW_EXPLODE) // Explode

  002f7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  002fa	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  002fd	83 e1 08	 and	 ecx, 8
  00300	74 78		 je	 SHORT $LN36@P_PlayerRi

; 3200 : 			{
; 3201 : 				weptype = MT_EXPLODEPICKUP;

  00302	c7 45 dc d9 00
	00 00		 mov	 DWORD PTR _weptype$1[ebp], 217 ; 000000d9H

; 3202 : 				player->ringweapons &= ~RW_EXPLODE;

  00309	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0030c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0030f	83 e1 f7	 and	 ecx, -9			; fffffff7H
  00312	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00315	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 3203 : 
; 3204 : 				if (player->powers[pw_explosionring] >= mobjinfo[weptype].reactiontime)

  00318	b8 04 00 00 00	 mov	 eax, 4
  0031d	6b c8 15	 imul	 ecx, eax, 21
  00320	6b 55 dc 60	 imul	 edx, DWORD PTR _weptype$1[ebp], 96
  00324	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00327	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0032b	3b 8a 14 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx+20]
  00331	7c 0f		 jl	 SHORT $LN38@P_PlayerRi

; 3205 : 					ammoamt = mobjinfo[weptype].reactiontime;

  00333	6b 45 dc 60	 imul	 eax, DWORD PTR _weptype$1[ebp], 96
  00337	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+20]
  0033d	89 4d e0	 mov	 DWORD PTR _ammoamt$2[ebp], ecx
  00340	eb 12		 jmp	 SHORT $LN39@P_PlayerRi
$LN38@P_PlayerRi:

; 3206 : 				else
; 3207 : 					ammoamt = player->powers[pw_explosionring];

  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 15	 imul	 ecx, eax, 21
  0034a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0034d	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00351	89 45 e0	 mov	 DWORD PTR _ammoamt$2[ebp], eax
$LN39@P_PlayerRi:

; 3208 : 
; 3209 : 				player->powers[pw_explosionring] -= ammoamt;

  00354	b8 04 00 00 00	 mov	 eax, 4
  00359	6b c8 15	 imul	 ecx, eax, 21
  0035c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0035f	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00363	2b 45 e0	 sub	 eax, DWORD PTR _ammoamt$2[ebp]
  00366	b9 04 00 00 00	 mov	 ecx, 4
  0036b	6b d1 15	 imul	 edx, ecx, 21
  0036e	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00371	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3210 : 			}

  00375	e9 fe 00 00 00	 jmp	 $LN44@P_PlayerRi
$LN36@P_PlayerRi:

; 3211 : 			else if (player->ringweapons & RW_SCATTER) // Scatter

  0037a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0037d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00380	83 e1 10	 and	 ecx, 16			; 00000010H
  00383	74 75		 je	 SHORT $LN40@P_PlayerRi

; 3212 : 			{
; 3213 : 				weptype = MT_SCATTERPICKUP;

  00385	c7 45 dc da 00
	00 00		 mov	 DWORD PTR _weptype$1[ebp], 218 ; 000000daH

; 3214 : 				player->ringweapons &= ~RW_SCATTER;

  0038c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0038f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00392	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00395	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00398	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 3215 : 
; 3216 : 				if (player->powers[pw_scatterring] >= mobjinfo[weptype].reactiontime)

  0039b	b8 04 00 00 00	 mov	 eax, 4
  003a0	6b c8 16	 imul	 ecx, eax, 22
  003a3	6b 55 dc 60	 imul	 edx, DWORD PTR _weptype$1[ebp], 96
  003a7	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003aa	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  003ae	3b 8a 14 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx+20]
  003b4	7c 0f		 jl	 SHORT $LN42@P_PlayerRi

; 3217 : 					ammoamt = mobjinfo[weptype].reactiontime;

  003b6	6b 45 dc 60	 imul	 eax, DWORD PTR _weptype$1[ebp], 96
  003ba	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+20]
  003c0	89 4d e0	 mov	 DWORD PTR _ammoamt$2[ebp], ecx
  003c3	eb 12		 jmp	 SHORT $LN43@P_PlayerRi
$LN42@P_PlayerRi:

; 3218 : 				else
; 3219 : 					ammoamt = player->powers[pw_scatterring];

  003c5	b8 04 00 00 00	 mov	 eax, 4
  003ca	6b c8 16	 imul	 ecx, eax, 22
  003cd	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003d0	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  003d4	89 45 e0	 mov	 DWORD PTR _ammoamt$2[ebp], eax
$LN43@P_PlayerRi:

; 3220 : 
; 3221 : 				player->powers[pw_scatterring] -= ammoamt;

  003d7	b8 04 00 00 00	 mov	 eax, 4
  003dc	6b c8 16	 imul	 ecx, eax, 22
  003df	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  003e2	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  003e6	2b 45 e0	 sub	 eax, DWORD PTR _ammoamt$2[ebp]
  003e9	b9 04 00 00 00	 mov	 ecx, 4
  003ee	6b d1 16	 imul	 edx, ecx, 22
  003f1	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  003f4	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3222 : 			}

  003f8	eb 7e		 jmp	 SHORT $LN44@P_PlayerRi
$LN40@P_PlayerRi:

; 3223 : 			else if (player->ringweapons & RW_GRENADE) // Grenade

  003fa	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  003fd	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00400	83 e1 20	 and	 ecx, 32			; 00000020H
  00403	74 73		 je	 SHORT $LN44@P_PlayerRi

; 3224 : 			{
; 3225 : 				weptype = MT_GRENADEPICKUP;

  00405	c7 45 dc db 00
	00 00		 mov	 DWORD PTR _weptype$1[ebp], 219 ; 000000dbH

; 3226 : 				player->ringweapons &= ~RW_GRENADE;

  0040c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0040f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00412	83 e1 df	 and	 ecx, -33		; ffffffdfH
  00415	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00418	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 3227 : 
; 3228 : 				if (player->powers[pw_grenadering] >= mobjinfo[weptype].reactiontime)

  0041b	b8 04 00 00 00	 mov	 eax, 4
  00420	6b c8 17	 imul	 ecx, eax, 23
  00423	6b 55 dc 60	 imul	 edx, DWORD PTR _weptype$1[ebp], 96
  00427	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0042a	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0042e	3b 8a 14 00 00
	00		 cmp	 ecx, DWORD PTR _mobjinfo[edx+20]
  00434	7c 0f		 jl	 SHORT $LN45@P_PlayerRi

; 3229 : 					ammoamt = mobjinfo[weptype].reactiontime;

  00436	6b 45 dc 60	 imul	 eax, DWORD PTR _weptype$1[ebp], 96
  0043a	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _mobjinfo[eax+20]
  00440	89 4d e0	 mov	 DWORD PTR _ammoamt$2[ebp], ecx
  00443	eb 12		 jmp	 SHORT $LN46@P_PlayerRi
$LN45@P_PlayerRi:

; 3230 : 				else
; 3231 : 					ammoamt = player->powers[pw_grenadering];

  00445	b8 04 00 00 00	 mov	 eax, 4
  0044a	6b c8 17	 imul	 ecx, eax, 23
  0044d	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00450	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00454	89 45 e0	 mov	 DWORD PTR _ammoamt$2[ebp], eax
$LN46@P_PlayerRi:

; 3232 : 
; 3233 : 				player->powers[pw_grenadering] -= ammoamt;

  00457	b8 04 00 00 00	 mov	 eax, 4
  0045c	6b c8 17	 imul	 ecx, eax, 23
  0045f	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00462	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00466	2b 45 e0	 sub	 eax, DWORD PTR _ammoamt$2[ebp]
  00469	b9 04 00 00 00	 mov	 ecx, 4
  0046e	6b d1 17	 imul	 edx, ecx, 23
  00471	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00474	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax
$LN44@P_PlayerRi:

; 3234 : 			}
; 3235 : 
; 3236 : 			if (!weptype) // ???

  00478	83 7d dc 00	 cmp	 DWORD PTR _weptype$1[ebp], 0
  0047c	75 05		 jne	 SHORT $LN47@P_PlayerRi

; 3237 : 				continue;

  0047e	e9 cf fc ff ff	 jmp	 $LN2@P_PlayerRi
$LN47@P_PlayerRi:

; 3238 : 
; 3239 : 			mo = P_SpawnMobj(player->mo->x,

  00483	8b 45 dc	 mov	 eax, DWORD PTR _weptype$1[ebp]
  00486	50		 push	 eax
  00487	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0048a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0048c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0048f	50		 push	 eax
  00490	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  00493	8b 11		 mov	 edx, DWORD PTR [ecx]
  00495	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00498	50		 push	 eax
  00499	8b 4d 08	 mov	 ecx, DWORD PTR _player$[ebp]
  0049c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0049e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004a1	50		 push	 eax
  004a2	e8 00 00 00 00	 call	 _P_SpawnMobj
  004a7	83 c4 10	 add	 esp, 16			; 00000010H
  004aa	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3240 : 							player->mo->y,
; 3241 : 							player->mo->z,
; 3242 : 							weptype);
; 3243 : 			mo->reactiontime = ammoamt;

  004ad	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  004b0	8b 4d e0	 mov	 ecx, DWORD PTR _ammoamt$2[ebp]
  004b3	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx

; 3244 : 			mo->flags2 |= MF2_DONTRESPAWN;

  004b9	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  004bc	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  004c2	83 c9 04	 or	 ecx, 4
  004c5	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  004c8	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3245 : 			mo->flags &= ~MF_NOGRAVITY;

  004ce	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  004d1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  004d4	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  004da	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  004dd	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3246 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  004e0	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  004e3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  004e6	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  004ec	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  004ef	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3247 : 			P_SetTarget(&mo->target, player->mo);

  004f2	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  004f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  004f7	51		 push	 ecx
  004f8	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  004fb	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00501	52		 push	 edx
  00502	e8 00 00 00 00	 call	 _P_SetTarget
  00507	83 c4 08	 add	 esp, 8

; 3248 : 			mo->fuse = 12*TICRATE;

  0050a	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0050d	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3249 : 			mo->destscale = player->mo->scale;

  00517	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0051a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0051c	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  0051f	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  00526	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 3250 : 			P_SetScale(mo, player->mo->scale);

  0052d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00530	8b 08		 mov	 ecx, DWORD PTR [eax]
  00532	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00539	52		 push	 edx
  0053a	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0053d	50		 push	 eax
  0053e	e8 00 00 00 00	 call	 _P_SetScale
  00543	83 c4 08	 add	 esp, 8

; 3251 : 
; 3252 : 			randomangle = P_Random();

  00546	e8 00 00 00 00	 call	 _P_Random
  0054b	88 45 f7	 mov	 BYTE PTR _randomangle$[ebp], al

; 3253 : 			fa = (randomangle+(i*amt)*FINEANGLES/16) & FINEMASK;

  0054e	0f b6 4d f7	 movzx	 ecx, BYTE PTR _randomangle$[ebp]
  00552	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00555	0f af 45 e8	 imul	 eax, DWORD PTR _amt$[ebp]
  00559	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  0055c	99		 cdq
  0055d	83 e2 0f	 and	 edx, 15			; 0000000fH
  00560	03 c2		 add	 eax, edx
  00562	c1 f8 04	 sar	 eax, 4
  00565	03 c8		 add	 ecx, eax
  00567	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  0056d	89 4d f0	 mov	 DWORD PTR _fa$[ebp], ecx

; 3254 : 
; 3255 : 			// Make rings spill out around the player in 16 directions like SA, but spill like Sonic 2.
; 3256 : 			// Technically a non-SA way of spilling rings. They just so happen to be a little similar.
; 3257 : 			if (player->pflags & PF_NIGHTSFALL)

  00570	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00573	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00579	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  0057f	0f 84 be 00 00
	00		 je	 $LN48@P_PlayerRi

; 3258 : 			{
; 3259 : 				ns = FIXEDSCALE(((i*FRACUNIT)/16)+2*FRACUNIT, mo->scale);

  00585	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00588	c1 e0 10	 shl	 eax, 16			; 00000010H
  0058b	99		 cdq
  0058c	83 e2 0f	 and	 edx, 15			; 0000000fH
  0058f	03 c2		 add	 eax, edx
  00591	c1 f8 04	 sar	 eax, 4
  00594	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  00599	50		 push	 eax
  0059a	68 00 00 64 00	 push	 6553600			; 00640000H
  0059f	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  005a2	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  005a9	c1 e1 10	 shl	 ecx, 16			; 00000010H
  005ac	51		 push	 ecx
  005ad	e8 00 00 00 00	 call	 _FixedDiv
  005b2	83 c4 08	 add	 esp, 8
  005b5	50		 push	 eax
  005b6	e8 00 00 00 00	 call	 _FixedMul
  005bb	83 c4 08	 add	 esp, 8
  005be	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3260 : 				mo->momx = FixedMul(FINESINE(fa),ns);

  005c1	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  005c4	50		 push	 eax
  005c5	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  005c8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  005cf	52		 push	 edx
  005d0	e8 00 00 00 00	 call	 _FixedMul
  005d5	83 c4 08	 add	 esp, 8
  005d8	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  005db	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3261 : 
; 3262 : 				if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  005de	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  005e5	25 00 02 00 00	 and	 eax, 512		; 00000200H
  005ea	75 32		 jne	 SHORT $LN50@P_PlayerRi
  005ec	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  005ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  005f1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  005f7	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  005fd	75 1f		 jne	 SHORT $LN50@P_PlayerRi

; 3263 : 					mo->momy = FixedMul(FINECOSINE(fa),ns);

  005ff	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00602	50		 push	 eax
  00603	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00606	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  0060c	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0060f	50		 push	 eax
  00610	e8 00 00 00 00	 call	 _FixedMul
  00615	83 c4 08	 add	 esp, 8
  00618	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  0061b	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN50@P_PlayerRi:

; 3264 : 
; 3265 : 				P_SetObjectMomZ(mo, 8*FRACUNIT, false);

  0061e	6a 00		 push	 0
  00620	68 00 00 08 00	 push	 524288			; 00080000H
  00625	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0062e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3266 : 				mo->fuse = 20*TICRATE; // Adjust fuse for NiGHTS

  00631	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00634	c7 80 bc 00 00
	00 bc 02 00 00	 mov	 DWORD PTR [eax+188], 700 ; 000002bcH

; 3267 : 			}

  0063e	e9 7d 01 00 00	 jmp	 $LN56@P_PlayerRi
$LN48@P_PlayerRi:

; 3268 : 			else
; 3269 : 			{
; 3270 : 				if (i > 15)

  00643	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  00647	0f 8e bc 00 00
	00		 jle	 $LN51@P_PlayerRi

; 3271 : 				{
; 3272 : 					ns = FIXEDSCALE(3 * FRACUNIT, mo->scale);

  0064d	68 00 00 03 00	 push	 196608			; 00030000H
  00652	68 00 00 64 00	 push	 6553600			; 00640000H
  00657	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0065a	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00661	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00664	51		 push	 ecx
  00665	e8 00 00 00 00	 call	 _FixedDiv
  0066a	83 c4 08	 add	 esp, 8
  0066d	50		 push	 eax
  0066e	e8 00 00 00 00	 call	 _FixedMul
  00673	83 c4 08	 add	 esp, 8
  00676	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3273 : 					mo->momx = FixedMul(FINESINE(fa),ns);

  00679	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  0067c	50		 push	 eax
  0067d	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00680	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00687	52		 push	 edx
  00688	e8 00 00 00 00	 call	 _FixedMul
  0068d	83 c4 08	 add	 esp, 8
  00690	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00693	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3274 : 
; 3275 : 					if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  00696	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0069d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  006a2	75 32		 jne	 SHORT $LN53@P_PlayerRi
  006a4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  006a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  006a9	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  006af	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  006b5	75 1f		 jne	 SHORT $LN53@P_PlayerRi

; 3276 : 						mo->momy = FixedMul(FINECOSINE(fa),ns);

  006b7	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  006ba	50		 push	 eax
  006bb	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  006be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  006c4	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  006c7	50		 push	 eax
  006c8	e8 00 00 00 00	 call	 _FixedMul
  006cd	83 c4 08	 add	 esp, 8
  006d0	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  006d3	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN53@P_PlayerRi:

; 3277 : 
; 3278 : 					P_SetObjectMomZ(mo, 4*FRACUNIT, false);

  006d6	6a 00		 push	 0
  006d8	68 00 00 04 00	 push	 262144			; 00040000H
  006dd	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  006e0	50		 push	 eax
  006e1	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  006e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3279 : 
; 3280 : 					if (i & 1)

  006e9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  006ec	83 e0 01	 and	 eax, 1
  006ef	74 13		 je	 SHORT $LN54@P_PlayerRi

; 3281 : 						P_SetObjectMomZ(mo, 4*FRACUNIT, true);

  006f1	6a 01		 push	 1
  006f3	68 00 00 04 00	 push	 262144			; 00040000H
  006f8	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  006fb	50		 push	 eax
  006fc	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00701	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN54@P_PlayerRi:

; 3282 : 				}

  00704	e9 b7 00 00 00	 jmp	 $LN56@P_PlayerRi
$LN51@P_PlayerRi:

; 3283 : 				else
; 3284 : 				{
; 3285 : 					ns = FIXEDSCALE(2 * FRACUNIT, mo->scale);

  00709	68 00 00 02 00	 push	 131072			; 00020000H
  0070e	68 00 00 64 00	 push	 6553600			; 00640000H
  00713	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00716	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0071d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00720	51		 push	 ecx
  00721	e8 00 00 00 00	 call	 _FixedDiv
  00726	83 c4 08	 add	 esp, 8
  00729	50		 push	 eax
  0072a	e8 00 00 00 00	 call	 _FixedMul
  0072f	83 c4 08	 add	 esp, 8
  00732	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3286 : 					mo->momx = FixedMul(FINESINE(fa), ns);

  00735	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00738	50		 push	 eax
  00739	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0073c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00743	52		 push	 edx
  00744	e8 00 00 00 00	 call	 _FixedMul
  00749	83 c4 08	 add	 esp, 8
  0074c	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  0074f	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3287 : 
; 3288 : 					if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  00752	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00759	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0075e	75 32		 jne	 SHORT $LN55@P_PlayerRi
  00760	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00763	8b 08		 mov	 ecx, DWORD PTR [eax]
  00765	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0076b	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00771	75 1f		 jne	 SHORT $LN55@P_PlayerRi

; 3289 : 						mo->momy = FixedMul(FINECOSINE(fa),ns);

  00773	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00776	50		 push	 eax
  00777	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  0077a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00780	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00783	50		 push	 eax
  00784	e8 00 00 00 00	 call	 _FixedMul
  00789	83 c4 08	 add	 esp, 8
  0078c	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  0078f	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN55@P_PlayerRi:

; 3290 : 
; 3291 : 					P_SetObjectMomZ(mo, 3*FRACUNIT, false);

  00792	6a 00		 push	 0
  00794	68 00 00 03 00	 push	 196608			; 00030000H
  00799	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0079c	50		 push	 eax
  0079d	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  007a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3292 : 
; 3293 : 					if (i & 1)

  007a5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  007a8	83 e0 01	 and	 eax, 1
  007ab	74 13		 je	 SHORT $LN56@P_PlayerRi

; 3294 : 						P_SetObjectMomZ(mo, 3*FRACUNIT, true);

  007ad	6a 01		 push	 1
  007af	68 00 00 03 00	 push	 196608			; 00030000H
  007b4	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  007b7	50		 push	 eax
  007b8	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  007bd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN56@P_PlayerRi:

; 3295 : 				}
; 3296 : 			}
; 3297 : 		}

  007c0	e9 8d f9 ff ff	 jmp	 $LN2@P_PlayerRi
$LN3@P_PlayerRi:

; 3298 : 	}
; 3299 : 
; 3300 : 	// Spill the ammo
; 3301 : 	amt = 0;

  007c5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _amt$[ebp], 0

; 3302 : 	if (player->powers[pw_bouncering])

  007cc	b8 04 00 00 00	 mov	 eax, 4
  007d1	6b c8 12	 imul	 ecx, eax, 18
  007d4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007d7	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  007dc	74 09		 je	 SHORT $LN57@P_PlayerRi

; 3303 : 		amt++;

  007de	8b 45 e8	 mov	 eax, DWORD PTR _amt$[ebp]
  007e1	83 c0 01	 add	 eax, 1
  007e4	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
$LN57@P_PlayerRi:

; 3304 : 	if (player->powers[pw_railring])

  007e7	b8 04 00 00 00	 mov	 eax, 4
  007ec	6b c8 13	 imul	 ecx, eax, 19
  007ef	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  007f2	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  007f7	74 09		 je	 SHORT $LN58@P_PlayerRi

; 3305 : 		amt++;

  007f9	8b 45 e8	 mov	 eax, DWORD PTR _amt$[ebp]
  007fc	83 c0 01	 add	 eax, 1
  007ff	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
$LN58@P_PlayerRi:

; 3306 : 	if (player->powers[pw_automaticring])

  00802	b8 04 00 00 00	 mov	 eax, 4
  00807	6b c8 14	 imul	 ecx, eax, 20
  0080a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0080d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00812	74 09		 je	 SHORT $LN59@P_PlayerRi

; 3307 : 		amt++;

  00814	8b 45 e8	 mov	 eax, DWORD PTR _amt$[ebp]
  00817	83 c0 01	 add	 eax, 1
  0081a	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
$LN59@P_PlayerRi:

; 3308 : 	if (player->powers[pw_explosionring])

  0081d	b8 04 00 00 00	 mov	 eax, 4
  00822	6b c8 15	 imul	 ecx, eax, 21
  00825	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00828	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0082d	74 09		 je	 SHORT $LN60@P_PlayerRi

; 3309 : 		amt++;

  0082f	8b 45 e8	 mov	 eax, DWORD PTR _amt$[ebp]
  00832	83 c0 01	 add	 eax, 1
  00835	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
$LN60@P_PlayerRi:

; 3310 : 	if (player->powers[pw_scatterring])

  00838	b8 04 00 00 00	 mov	 eax, 4
  0083d	6b c8 16	 imul	 ecx, eax, 22
  00840	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00843	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00848	74 09		 je	 SHORT $LN61@P_PlayerRi

; 3311 : 		amt++;

  0084a	8b 45 e8	 mov	 eax, DWORD PTR _amt$[ebp]
  0084d	83 c0 01	 add	 eax, 1
  00850	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
$LN61@P_PlayerRi:

; 3312 : 	if (player->powers[pw_grenadering])

  00853	b8 04 00 00 00	 mov	 eax, 4
  00858	6b c8 17	 imul	 ecx, eax, 23
  0085b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0085e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00863	74 09		 je	 SHORT $LN62@P_PlayerRi

; 3313 : 		amt++;

  00865	8b 45 e8	 mov	 eax, DWORD PTR _amt$[ebp]
  00868	83 c0 01	 add	 eax, 1
  0086b	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
$LN62@P_PlayerRi:

; 3314 : 
; 3315 : 	if (amt > 0)

  0086e	83 7d e8 00	 cmp	 DWORD PTR _amt$[ebp], 0
  00872	7e 0c		 jle	 SHORT $LN63@P_PlayerRi

; 3316 : 		amt = 32/amt;

  00874	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00879	99		 cdq
  0087a	f7 7d e8	 idiv	 DWORD PTR _amt$[ebp]
  0087d	89 45 e8	 mov	 DWORD PTR _amt$[ebp], eax
$LN63@P_PlayerRi:

; 3317 : 
; 3318 : 	i = 0;

  00880	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN5@P_PlayerRi:

; 3319 : 	while (true)

  00887	b8 01 00 00 00	 mov	 eax, 1
  0088c	85 c0		 test	 eax, eax
  0088e	0f 84 93 07 00
	00		 je	 $LN6@P_PlayerRi

; 3320 : 	{
; 3321 : 		if (player->powers[pw_bouncering])

  00894	b8 04 00 00 00	 mov	 eax, 4
  00899	6b c8 12	 imul	 ecx, eax, 18
  0089c	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0089f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  008a4	0f 84 b9 00 00
	00		 je	 $LN64@P_PlayerRi

; 3322 : 		{
; 3323 : 			mo = P_SpawnMobj(player->mo->x,

  008aa	68 d0 00 00 00	 push	 208			; 000000d0H
  008af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  008b4	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  008b7	52		 push	 edx
  008b8	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  008bd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  008c0	52		 push	 edx
  008c1	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  008c6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  008c9	52		 push	 edx
  008ca	e8 00 00 00 00	 call	 _P_SpawnMobj
  008cf	83 c4 10	 add	 esp, 16			; 00000010H
  008d2	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3324 : 							player->mo->y,
; 3325 : 							player->mo->z,
; 3326 : 							MT_BOUNCERING);
; 3327 : 			mo->health = player->powers[pw_bouncering];

  008d5	b8 04 00 00 00	 mov	 eax, 4
  008da	6b c8 12	 imul	 ecx, eax, 18
  008dd	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  008e0	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  008e3	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  008e7	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 3328 : 			mo->flags2 |= MF2_DONTRESPAWN;

  008ed	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  008f0	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  008f6	83 c9 04	 or	 ecx, 4
  008f9	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  008fc	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3329 : 			mo->flags &= ~MF_NOGRAVITY;

  00902	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00905	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00908	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  0090e	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00911	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3330 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  00914	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00917	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0091a	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00920	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00923	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3331 : 			P_SetTarget(&mo->target, player->mo);

  00926	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00929	8b 08		 mov	 ecx, DWORD PTR [eax]
  0092b	51		 push	 ecx
  0092c	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  0092f	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00935	52		 push	 edx
  00936	e8 00 00 00 00	 call	 _P_SetTarget
  0093b	83 c4 08	 add	 esp, 8

; 3332 : 			player->powers[pw_bouncering] = 0;

  0093e	b8 04 00 00 00	 mov	 eax, 4
  00943	6b c8 12	 imul	 ecx, eax, 18
  00946	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00949	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3333 : 			mo->fuse = 12*TICRATE;

  00951	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00954	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3334 : 		}

  0095e	e9 0d 04 00 00	 jmp	 $LN75@P_PlayerRi
$LN64@P_PlayerRi:

; 3335 : 		else if (player->powers[pw_railring])

  00963	b8 04 00 00 00	 mov	 eax, 4
  00968	6b c8 13	 imul	 ecx, eax, 19
  0096b	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  0096e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00973	0f 84 b9 00 00
	00		 je	 $LN66@P_PlayerRi

; 3336 : 		{
; 3337 : 			mo = P_SpawnMobj(player->mo->x,

  00979	68 d1 00 00 00	 push	 209			; 000000d1H
  0097e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00981	8b 08		 mov	 ecx, DWORD PTR [eax]
  00983	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00986	52		 push	 edx
  00987	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0098a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0098c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0098f	52		 push	 edx
  00990	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00993	8b 08		 mov	 ecx, DWORD PTR [eax]
  00995	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00998	52		 push	 edx
  00999	e8 00 00 00 00	 call	 _P_SpawnMobj
  0099e	83 c4 10	 add	 esp, 16			; 00000010H
  009a1	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3338 : 							player->mo->y,
; 3339 : 							player->mo->z,
; 3340 : 							MT_RAILRING);
; 3341 : 			mo->health = player->powers[pw_railring];

  009a4	b8 04 00 00 00	 mov	 eax, 4
  009a9	6b c8 13	 imul	 ecx, eax, 19
  009ac	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  009af	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009b2	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  009b6	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 3342 : 			mo->flags2 |= MF2_DONTRESPAWN;

  009bc	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  009bf	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  009c5	83 c9 04	 or	 ecx, 4
  009c8	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  009cb	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3343 : 			mo->flags &= ~MF_NOGRAVITY;

  009d1	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  009d4	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  009d7	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  009dd	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  009e0	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3344 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  009e3	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  009e6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  009e9	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  009ef	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  009f2	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3345 : 			P_SetTarget(&mo->target, player->mo);

  009f5	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  009f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  009fa	51		 push	 ecx
  009fb	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  009fe	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00a04	52		 push	 edx
  00a05	e8 00 00 00 00	 call	 _P_SetTarget
  00a0a	83 c4 08	 add	 esp, 8

; 3346 : 			player->powers[pw_railring] = 0;

  00a0d	b8 04 00 00 00	 mov	 eax, 4
  00a12	6b c8 13	 imul	 ecx, eax, 19
  00a15	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a18	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3347 : 			mo->fuse = 12*TICRATE;

  00a20	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00a23	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3348 : 		}

  00a2d	e9 3e 03 00 00	 jmp	 $LN75@P_PlayerRi
$LN66@P_PlayerRi:

; 3349 : 		else if (player->powers[pw_automaticring])

  00a32	b8 04 00 00 00	 mov	 eax, 4
  00a37	6b c8 14	 imul	 ecx, eax, 20
  00a3a	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00a3d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00a42	0f 84 b9 00 00
	00		 je	 $LN68@P_PlayerRi

; 3350 : 		{
; 3351 : 			mo = P_SpawnMobj(player->mo->x,

  00a48	68 d2 00 00 00	 push	 210			; 000000d2H
  00a4d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a50	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a52	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00a55	52		 push	 edx
  00a56	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a59	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a5b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00a5e	52		 push	 edx
  00a5f	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a62	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a64	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00a67	52		 push	 edx
  00a68	e8 00 00 00 00	 call	 _P_SpawnMobj
  00a6d	83 c4 10	 add	 esp, 16			; 00000010H
  00a70	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3352 : 							player->mo->y,
; 3353 : 							player->mo->z,
; 3354 : 							MT_AUTOMATICRING);
; 3355 : 			mo->health = player->powers[pw_automaticring];

  00a73	b8 04 00 00 00	 mov	 eax, 4
  00a78	6b c8 14	 imul	 ecx, eax, 20
  00a7b	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00a7e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00a81	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00a85	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 3356 : 			mo->flags2 |= MF2_DONTRESPAWN;

  00a8b	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00a8e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00a94	83 c9 04	 or	 ecx, 4
  00a97	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00a9a	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3357 : 			mo->flags &= ~MF_NOGRAVITY;

  00aa0	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00aa3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00aa6	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00aac	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00aaf	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3358 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  00ab2	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00ab5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00ab8	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00abe	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00ac1	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3359 : 			P_SetTarget(&mo->target, player->mo);

  00ac4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ac7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ac9	51		 push	 ecx
  00aca	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00acd	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00ad3	52		 push	 edx
  00ad4	e8 00 00 00 00	 call	 _P_SetTarget
  00ad9	83 c4 08	 add	 esp, 8

; 3360 : 			player->powers[pw_automaticring] = 0;

  00adc	b8 04 00 00 00	 mov	 eax, 4
  00ae1	6b c8 14	 imul	 ecx, eax, 20
  00ae4	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00ae7	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3361 : 			mo->fuse = 12*TICRATE;

  00aef	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00af2	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3362 : 		}

  00afc	e9 6f 02 00 00	 jmp	 $LN75@P_PlayerRi
$LN68@P_PlayerRi:

; 3363 : 		else if (player->powers[pw_explosionring])

  00b01	b8 04 00 00 00	 mov	 eax, 4
  00b06	6b c8 15	 imul	 ecx, eax, 21
  00b09	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00b0c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00b11	0f 84 b9 00 00
	00		 je	 $LN70@P_PlayerRi

; 3364 : 		{
; 3365 : 			mo = P_SpawnMobj(player->mo->x,

  00b17	68 d3 00 00 00	 push	 211			; 000000d3H
  00b1c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b1f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b21	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00b24	52		 push	 edx
  00b25	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b28	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b2a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00b2d	52		 push	 edx
  00b2e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b31	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b33	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00b36	52		 push	 edx
  00b37	e8 00 00 00 00	 call	 _P_SpawnMobj
  00b3c	83 c4 10	 add	 esp, 16			; 00000010H
  00b3f	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3366 : 							player->mo->y,
; 3367 : 							player->mo->z,
; 3368 : 							MT_EXPLOSIONRING);
; 3369 : 			mo->health = player->powers[pw_explosionring];

  00b42	b8 04 00 00 00	 mov	 eax, 4
  00b47	6b c8 15	 imul	 ecx, eax, 21
  00b4a	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00b4d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b50	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00b54	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 3370 : 			mo->flags2 |= MF2_DONTRESPAWN;

  00b5a	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00b5d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00b63	83 c9 04	 or	 ecx, 4
  00b66	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00b69	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3371 : 			mo->flags &= ~MF_NOGRAVITY;

  00b6f	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00b72	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00b75	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00b7b	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00b7e	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3372 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  00b81	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00b84	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00b87	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00b8d	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00b90	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3373 : 			P_SetTarget(&mo->target, player->mo);

  00b93	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00b96	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b98	51		 push	 ecx
  00b99	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00b9c	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00ba2	52		 push	 edx
  00ba3	e8 00 00 00 00	 call	 _P_SetTarget
  00ba8	83 c4 08	 add	 esp, 8

; 3374 : 			player->powers[pw_explosionring] = 0;

  00bab	b8 04 00 00 00	 mov	 eax, 4
  00bb0	6b c8 15	 imul	 ecx, eax, 21
  00bb3	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bb6	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3375 : 			mo->fuse = 12*TICRATE;

  00bbe	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00bc1	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3376 : 		}

  00bcb	e9 a0 01 00 00	 jmp	 $LN75@P_PlayerRi
$LN70@P_PlayerRi:

; 3377 : 		else if (player->powers[pw_scatterring])

  00bd0	b8 04 00 00 00	 mov	 eax, 4
  00bd5	6b c8 16	 imul	 ecx, eax, 22
  00bd8	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00bdb	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00be0	0f 84 b9 00 00
	00		 je	 $LN72@P_PlayerRi

; 3378 : 		{
; 3379 : 			mo = P_SpawnMobj(player->mo->x,

  00be6	68 d4 00 00 00	 push	 212			; 000000d4H
  00beb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bee	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bf0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00bf3	52		 push	 edx
  00bf4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00bf7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bf9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00bfc	52		 push	 edx
  00bfd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c00	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c02	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00c05	52		 push	 edx
  00c06	e8 00 00 00 00	 call	 _P_SpawnMobj
  00c0b	83 c4 10	 add	 esp, 16			; 00000010H
  00c0e	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3380 : 							player->mo->y,
; 3381 : 							player->mo->z,
; 3382 : 							MT_SCATTERRING);
; 3383 : 			mo->health = player->powers[pw_scatterring];

  00c11	b8 04 00 00 00	 mov	 eax, 4
  00c16	6b c8 16	 imul	 ecx, eax, 22
  00c19	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00c1c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c1f	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00c23	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 3384 : 			mo->flags2 |= MF2_DONTRESPAWN;

  00c29	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00c2c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00c32	83 c9 04	 or	 ecx, 4
  00c35	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00c38	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3385 : 			mo->flags &= ~MF_NOGRAVITY;

  00c3e	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00c41	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00c44	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00c4a	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00c4d	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3386 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  00c50	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00c53	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00c56	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00c5c	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00c5f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3387 : 			P_SetTarget(&mo->target, player->mo);

  00c62	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00c65	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c67	51		 push	 ecx
  00c68	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00c6b	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00c71	52		 push	 edx
  00c72	e8 00 00 00 00	 call	 _P_SetTarget
  00c77	83 c4 08	 add	 esp, 8

; 3388 : 			player->powers[pw_scatterring] = 0;

  00c7a	b8 04 00 00 00	 mov	 eax, 4
  00c7f	6b c8 16	 imul	 ecx, eax, 22
  00c82	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00c85	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3389 : 			mo->fuse = 12*TICRATE;

  00c8d	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00c90	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3390 : 		}

  00c9a	e9 d1 00 00 00	 jmp	 $LN75@P_PlayerRi
$LN72@P_PlayerRi:

; 3391 : 		else if (player->powers[pw_grenadering])

  00c9f	b8 04 00 00 00	 mov	 eax, 4
  00ca4	6b c8 17	 imul	 ecx, eax, 23
  00ca7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00caa	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00caf	0f 84 b6 00 00
	00		 je	 $LN74@P_PlayerRi

; 3392 : 		{
; 3393 : 			mo = P_SpawnMobj(player->mo->x,

  00cb5	68 d5 00 00 00	 push	 213			; 000000d5H
  00cba	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cbd	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cbf	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00cc2	52		 push	 edx
  00cc3	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cc6	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00ccb	52		 push	 edx
  00ccc	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00ccf	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cd1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00cd4	52		 push	 edx
  00cd5	e8 00 00 00 00	 call	 _P_SpawnMobj
  00cda	83 c4 10	 add	 esp, 16			; 00000010H
  00cdd	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3394 : 							player->mo->y,
; 3395 : 							player->mo->z,
; 3396 : 							MT_GRENADERING);
; 3397 : 			mo->health = player->powers[pw_grenadering];

  00ce0	b8 04 00 00 00	 mov	 eax, 4
  00ce5	6b c8 17	 imul	 ecx, eax, 23
  00ce8	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00ceb	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00cee	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00cf2	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 3398 : 			mo->flags2 |= MF2_DONTRESPAWN;

  00cf8	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00cfb	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00d01	83 c9 04	 or	 ecx, 4
  00d04	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00d07	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 3399 : 			mo->flags &= ~MF_NOGRAVITY;

  00d0d	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00d10	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00d13	81 e1 ff fd ff
	ff		 and	 ecx, -513		; fffffdffH
  00d19	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00d1c	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3400 : 			mo->flags &= ~MF_NOCLIPHEIGHT;

  00d1f	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00d22	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00d25	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00d2b	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00d2e	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 3401 : 			P_SetTarget(&mo->target, player->mo);

  00d31	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d34	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d36	51		 push	 ecx
  00d37	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00d3a	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00d40	52		 push	 edx
  00d41	e8 00 00 00 00	 call	 _P_SetTarget
  00d46	83 c4 08	 add	 esp, 8

; 3402 : 			player->powers[pw_grenadering] = 0;

  00d49	b8 04 00 00 00	 mov	 eax, 4
  00d4e	6b c8 17	 imul	 ecx, eax, 23
  00d51	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  00d54	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3403 : 			mo->fuse = 12*TICRATE;

  00d5c	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00d5f	c7 80 bc 00 00
	00 a4 01 00 00	 mov	 DWORD PTR [eax+188], 420 ; 000001a4H

; 3404 : 		}

  00d69	eb 05		 jmp	 SHORT $LN75@P_PlayerRi
$LN74@P_PlayerRi:

; 3405 : 		else
; 3406 : 			break; // All done!

  00d6b	e9 b7 02 00 00	 jmp	 $LN6@P_PlayerRi
$LN75@P_PlayerRi:

; 3407 : 
; 3408 : 		mo->destscale = player->mo->scale;

  00d70	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d73	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d75	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00d78	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  00d7f	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 3409 : 		P_SetScale(mo, player->mo->scale);

  00d86	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00d89	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d8b	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  00d92	52		 push	 edx
  00d93	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00d96	50		 push	 eax
  00d97	e8 00 00 00 00	 call	 _P_SetScale
  00d9c	83 c4 08	 add	 esp, 8

; 3410 : 
; 3411 : 		randomangle = P_Random();

  00d9f	e8 00 00 00 00	 call	 _P_Random
  00da4	88 45 f7	 mov	 BYTE PTR _randomangle$[ebp], al

; 3412 : 		fa = (randomangle+(i*amt)*FINEANGLES/16) & FINEMASK;

  00da7	0f b6 4d f7	 movzx	 ecx, BYTE PTR _randomangle$[ebp]
  00dab	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00dae	0f af 45 e8	 imul	 eax, DWORD PTR _amt$[ebp]
  00db2	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  00db5	99		 cdq
  00db6	83 e2 0f	 and	 edx, 15			; 0000000fH
  00db9	03 c2		 add	 eax, edx
  00dbb	c1 f8 04	 sar	 eax, 4
  00dbe	03 c8		 add	 ecx, eax
  00dc0	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  00dc6	89 4d f0	 mov	 DWORD PTR _fa$[ebp], ecx

; 3413 : 
; 3414 : 		// Make rings spill out around the player in 16 directions like SA, but spill like Sonic 2.
; 3415 : 		// Technically a non-SA way of spilling rings. They just so happen to be a little similar.
; 3416 : 		if (player->pflags & PF_NIGHTSFALL)

  00dc9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00dcc	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00dd2	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  00dd8	0f 84 be 00 00
	00		 je	 $LN76@P_PlayerRi

; 3417 : 		{
; 3418 : 			ns = FIXEDSCALE(((i*FRACUNIT)/16)+2*FRACUNIT, mo->scale);

  00dde	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00de1	c1 e0 10	 shl	 eax, 16			; 00000010H
  00de4	99		 cdq
  00de5	83 e2 0f	 and	 edx, 15			; 0000000fH
  00de8	03 c2		 add	 eax, edx
  00dea	c1 f8 04	 sar	 eax, 4
  00ded	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  00df2	50		 push	 eax
  00df3	68 00 00 64 00	 push	 6553600			; 00640000H
  00df8	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00dfb	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00e02	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e05	51		 push	 ecx
  00e06	e8 00 00 00 00	 call	 _FixedDiv
  00e0b	83 c4 08	 add	 esp, 8
  00e0e	50		 push	 eax
  00e0f	e8 00 00 00 00	 call	 _FixedMul
  00e14	83 c4 08	 add	 esp, 8
  00e17	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3419 : 			mo->momx = FixedMul(FINESINE(fa),ns);

  00e1a	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00e1d	50		 push	 eax
  00e1e	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00e21	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00e28	52		 push	 edx
  00e29	e8 00 00 00 00	 call	 _FixedMul
  00e2e	83 c4 08	 add	 esp, 8
  00e31	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00e34	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3420 : 
; 3421 : 			if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  00e37	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00e3e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00e43	75 32		 jne	 SHORT $LN78@P_PlayerRi
  00e45	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00e48	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e4a	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00e50	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00e56	75 1f		 jne	 SHORT $LN78@P_PlayerRi

; 3422 : 				mo->momy = FixedMul(FINECOSINE(fa),ns);

  00e58	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00e5b	50		 push	 eax
  00e5c	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00e5f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00e65	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00e68	50		 push	 eax
  00e69	e8 00 00 00 00	 call	 _FixedMul
  00e6e	83 c4 08	 add	 esp, 8
  00e71	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00e74	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN78@P_PlayerRi:

; 3423 : 
; 3424 : 			P_SetObjectMomZ(mo, 8*FRACUNIT, false);

  00e77	6a 00		 push	 0
  00e79	68 00 00 08 00	 push	 524288			; 00080000H
  00e7e	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00e81	50		 push	 eax
  00e82	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00e87	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3425 : 			mo->fuse = 20*TICRATE; // Adjust fuse for NiGHTS

  00e8a	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00e8d	c7 80 bc 00 00
	00 bc 02 00 00	 mov	 DWORD PTR [eax+188], 700 ; 000002bcH

; 3426 : 		}

  00e97	e9 7d 01 00 00	 jmp	 $LN84@P_PlayerRi
$LN76@P_PlayerRi:

; 3427 : 		else
; 3428 : 		{
; 3429 : 			if (i > 15)

  00e9c	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  00ea0	0f 8e bc 00 00
	00		 jle	 $LN79@P_PlayerRi

; 3430 : 			{
; 3431 : 				ns = FIXEDSCALE(3 * FRACUNIT, mo->scale);

  00ea6	68 00 00 03 00	 push	 196608			; 00030000H
  00eab	68 00 00 64 00	 push	 6553600			; 00640000H
  00eb0	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00eb3	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00eba	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00ebd	51		 push	 ecx
  00ebe	e8 00 00 00 00	 call	 _FixedDiv
  00ec3	83 c4 08	 add	 esp, 8
  00ec6	50		 push	 eax
  00ec7	e8 00 00 00 00	 call	 _FixedMul
  00ecc	83 c4 08	 add	 esp, 8
  00ecf	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3432 : 				mo->momx = FixedMul(FINESINE(fa),ns);

  00ed2	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00ed5	50		 push	 eax
  00ed6	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00ed9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00ee0	52		 push	 edx
  00ee1	e8 00 00 00 00	 call	 _FixedMul
  00ee6	83 c4 08	 add	 esp, 8
  00ee9	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00eec	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3433 : 
; 3434 : 				if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  00eef	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00ef6	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00efb	75 32		 jne	 SHORT $LN81@P_PlayerRi
  00efd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00f00	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f02	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00f08	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00f0e	75 1f		 jne	 SHORT $LN81@P_PlayerRi

; 3435 : 					mo->momy = FixedMul(FINECOSINE(fa),ns);

  00f10	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00f13	50		 push	 eax
  00f14	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00f17	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00f1d	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00f20	50		 push	 eax
  00f21	e8 00 00 00 00	 call	 _FixedMul
  00f26	83 c4 08	 add	 esp, 8
  00f29	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00f2c	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN81@P_PlayerRi:

; 3436 : 
; 3437 : 				P_SetObjectMomZ(mo, 4*FRACUNIT, false);

  00f2f	6a 00		 push	 0
  00f31	68 00 00 04 00	 push	 262144			; 00040000H
  00f36	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00f39	50		 push	 eax
  00f3a	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00f3f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3438 : 
; 3439 : 				if (i & 1)

  00f42	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00f45	83 e0 01	 and	 eax, 1
  00f48	74 13		 je	 SHORT $LN82@P_PlayerRi

; 3440 : 					P_SetObjectMomZ(mo, 4*FRACUNIT, true);

  00f4a	6a 01		 push	 1
  00f4c	68 00 00 04 00	 push	 262144			; 00040000H
  00f51	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00f54	50		 push	 eax
  00f55	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00f5a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN82@P_PlayerRi:

; 3441 : 			}

  00f5d	e9 b7 00 00 00	 jmp	 $LN84@P_PlayerRi
$LN79@P_PlayerRi:

; 3442 : 			else
; 3443 : 			{
; 3444 : 				ns = FIXEDSCALE(2 * FRACUNIT, mo->scale);

  00f62	68 00 00 02 00	 push	 131072			; 00020000H
  00f67	68 00 00 64 00	 push	 6553600			; 00640000H
  00f6c	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00f6f	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  00f76	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00f79	51		 push	 ecx
  00f7a	e8 00 00 00 00	 call	 _FixedDiv
  00f7f	83 c4 08	 add	 esp, 8
  00f82	50		 push	 eax
  00f83	e8 00 00 00 00	 call	 _FixedMul
  00f88	83 c4 08	 add	 esp, 8
  00f8b	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3445 : 				mo->momx = FixedMul(FINESINE(fa), ns);

  00f8e	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00f91	50		 push	 eax
  00f92	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00f95	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  00f9c	52		 push	 edx
  00f9d	e8 00 00 00 00	 call	 _FixedMul
  00fa2	83 c4 08	 add	 esp, 8
  00fa5	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00fa8	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3446 : 
; 3447 : 				if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  00fab	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00fb2	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00fb7	75 32		 jne	 SHORT $LN83@P_PlayerRi
  00fb9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00fbc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fbe	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00fc4	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  00fca	75 1f		 jne	 SHORT $LN83@P_PlayerRi

; 3448 : 					mo->momy = FixedMul(FINECOSINE(fa),ns);

  00fcc	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  00fcf	50		 push	 eax
  00fd0	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  00fd3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  00fd9	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00fdc	50		 push	 eax
  00fdd	e8 00 00 00 00	 call	 _FixedMul
  00fe2	83 c4 08	 add	 esp, 8
  00fe5	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  00fe8	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN83@P_PlayerRi:

; 3449 : 
; 3450 : 				P_SetObjectMomZ(mo, 3*FRACUNIT, false);

  00feb	6a 00		 push	 0
  00fed	68 00 00 03 00	 push	 196608			; 00030000H
  00ff2	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  00ff5	50		 push	 eax
  00ff6	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  00ffb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3451 : 
; 3452 : 				if (i & 1)

  00ffe	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01001	83 e0 01	 and	 eax, 1
  01004	74 13		 je	 SHORT $LN84@P_PlayerRi

; 3453 : 					P_SetObjectMomZ(mo, 3*FRACUNIT, true);

  01006	6a 01		 push	 1
  01008	68 00 00 03 00	 push	 196608			; 00030000H
  0100d	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  01010	50		 push	 eax
  01011	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  01016	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN84@P_PlayerRi:

; 3454 : 			}
; 3455 : 		}
; 3456 : 		i++;

  01019	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0101c	83 c0 01	 add	 eax, 1
  0101f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 3457 : 	}

  01022	e9 60 f8 ff ff	 jmp	 $LN5@P_PlayerRi
$LN6@P_PlayerRi:

; 3458 : 
; 3459 : 	for (i = 0; i < num_rings; i++)

  01027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0102e	eb 09		 jmp	 SHORT $LN9@P_PlayerRi
$LN7@P_PlayerRi:
  01030	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01033	83 c0 01	 add	 eax, 1
  01036	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN9@P_PlayerRi:
  01039	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0103c	3b 45 0c	 cmp	 eax, DWORD PTR _num_rings$[ebp]
  0103f	0f 8d 13 04 00
	00		 jge	 $LN8@P_PlayerRi

; 3460 : 	{
; 3461 : #ifdef BLUE_SPHERES
; 3462 : 		if (G_IsSpecialStage(gamemap))
; 3463 : 		{
; 3464 : 			mo = P_SpawnMobj(player->mo->x,
; 3465 : 			                 player->mo->y,
; 3466 : 			                 player->mo->z,
; 3467 : 			                 MT_FLINGBALL);
; 3468 : 
; 3469 : 			mo->fuse = (8-player->losscount)*TICRATE;
; 3470 : 			P_SetTarget(&mo->target, player->mo);
; 3471 : 		}
; 3472 : 		else //else if
; 3473 : #endif
; 3474 : 		if (mariomode)

  01045	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0104c	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01051	74 5f		 je	 SHORT $LN85@P_PlayerRi

; 3475 : 		{
; 3476 : 			mo = P_SpawnMobj(player->mo->x,

  01053	68 e2 00 00 00	 push	 226			; 000000e2H
  01058	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0105b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0105d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  01060	52		 push	 edx
  01061	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01064	8b 08		 mov	 ecx, DWORD PTR [eax]
  01066	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01069	52		 push	 edx
  0106a	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0106d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0106f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  01072	52		 push	 edx
  01073	e8 00 00 00 00	 call	 _P_SpawnMobj
  01078	83 c4 10	 add	 esp, 16			; 00000010H
  0107b	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3477 : 			                 player->mo->y,
; 3478 : 			                 player->mo->z,
; 3479 : 			                 MT_FLINGCOIN);
; 3480 : 
; 3481 : 			mo->fuse = (8-player->losscount)*TICRATE;

  0107e	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01081	b9 08 00 00 00	 mov	 ecx, 8
  01086	2b 88 dc 01 00
	00		 sub	 ecx, DWORD PTR [eax+476]
  0108c	6b d1 23	 imul	 edx, ecx, 35
  0108f	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  01092	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 3482 : 			P_SetTarget(&mo->target, player->mo);

  01098	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0109b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0109d	51		 push	 ecx
  0109e	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  010a1	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  010a7	52		 push	 edx
  010a8	e8 00 00 00 00	 call	 _P_SetTarget
  010ad	83 c4 08	 add	 esp, 8

; 3483 : 		}

  010b0	eb 5a		 jmp	 SHORT $LN86@P_PlayerRi
$LN85@P_PlayerRi:

; 3484 : 		else
; 3485 : 		{
; 3486 : 			mo = P_SpawnMobj(player->mo->x,

  010b2	6a 2c		 push	 44			; 0000002cH
  010b4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  010b9	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  010bc	52		 push	 edx
  010bd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  010c2	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  010c5	52		 push	 edx
  010c6	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  010cb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  010ce	52		 push	 edx
  010cf	e8 00 00 00 00	 call	 _P_SpawnMobj
  010d4	83 c4 10	 add	 esp, 16			; 00000010H
  010d7	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 3487 : 			                 player->mo->y,
; 3488 : 			                 player->mo->z,
; 3489 : 			                 MT_FLINGRING);
; 3490 : 
; 3491 : 			mo->fuse = (8-player->losscount)*TICRATE;

  010da	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010dd	b9 08 00 00 00	 mov	 ecx, 8
  010e2	2b 88 dc 01 00
	00		 sub	 ecx, DWORD PTR [eax+476]
  010e8	6b d1 23	 imul	 edx, ecx, 35
  010eb	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  010ee	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 3492 : 			P_SetTarget(&mo->target, player->mo);

  010f4	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  010f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f9	51		 push	 ecx
  010fa	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  010fd	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  01103	52		 push	 edx
  01104	e8 00 00 00 00	 call	 _P_SetTarget
  01109	83 c4 08	 add	 esp, 8
$LN86@P_PlayerRi:

; 3493 : 		}
; 3494 : 
; 3495 : 		mo->destscale = player->mo->scale;

  0110c	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0110f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01111	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  01114	66 8b 81 cc 00
	00 00		 mov	 ax, WORD PTR [ecx+204]
  0111b	66 89 82 ce 00
	00 00		 mov	 WORD PTR [edx+206], ax

; 3496 : 		P_SetScale(mo,player->mo->scale);

  01122	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01125	8b 08		 mov	 ecx, DWORD PTR [eax]
  01127	0f b7 91 cc 00
	00 00		 movzx	 edx, WORD PTR [ecx+204]
  0112e	52		 push	 edx
  0112f	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  01132	50		 push	 eax
  01133	e8 00 00 00 00	 call	 _P_SetScale
  01138	83 c4 08	 add	 esp, 8

; 3497 : 
; 3498 : 		randomangle = P_Random();

  0113b	e8 00 00 00 00	 call	 _P_Random
  01140	88 45 f7	 mov	 BYTE PTR _randomangle$[ebp], al

; 3499 : 		fa = (randomangle+i*FINEANGLES/16) & FINEMASK;

  01143	0f b6 4d f7	 movzx	 ecx, BYTE PTR _randomangle$[ebp]
  01147	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0114a	c1 e0 0d	 shl	 eax, 13			; 0000000dH
  0114d	99		 cdq
  0114e	83 e2 0f	 and	 edx, 15			; 0000000fH
  01151	03 c2		 add	 eax, edx
  01153	c1 f8 04	 sar	 eax, 4
  01156	03 c8		 add	 ecx, eax
  01158	81 e1 ff 1f 00
	00		 and	 ecx, 8191		; 00001fffH
  0115e	89 4d f0	 mov	 DWORD PTR _fa$[ebp], ecx

; 3500 : 
; 3501 : 		// Make rings spill out around the player in 16 directions like SA, but spill like Sonic 2.
; 3502 : 		// Technically a non-SA way of spilling rings. They just so happen to be a little similar.
; 3503 : 		if (player->pflags & PF_NIGHTSFALL)

  01161	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01164	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  0116a	81 e1 00 00 80
	00		 and	 ecx, 8388608		; 00800000H
  01170	0f 84 be 00 00
	00		 je	 $LN87@P_PlayerRi

; 3504 : 		{
; 3505 : 			ns = FIXEDSCALE(((i*FRACUNIT)/16)+2*FRACUNIT, mo->scale);

  01176	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01179	c1 e0 10	 shl	 eax, 16			; 00000010H
  0117c	99		 cdq
  0117d	83 e2 0f	 and	 edx, 15			; 0000000fH
  01180	03 c2		 add	 eax, edx
  01182	c1 f8 04	 sar	 eax, 4
  01185	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  0118a	50		 push	 eax
  0118b	68 00 00 64 00	 push	 6553600			; 00640000H
  01190	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  01193	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0119a	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0119d	51		 push	 ecx
  0119e	e8 00 00 00 00	 call	 _FixedDiv
  011a3	83 c4 08	 add	 esp, 8
  011a6	50		 push	 eax
  011a7	e8 00 00 00 00	 call	 _FixedMul
  011ac	83 c4 08	 add	 esp, 8
  011af	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3506 : 			mo->momx = FixedMul(FINESINE(fa),ns);

  011b2	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  011b5	50		 push	 eax
  011b6	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  011b9	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  011c0	52		 push	 edx
  011c1	e8 00 00 00 00	 call	 _FixedMul
  011c6	83 c4 08	 add	 esp, 8
  011c9	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  011cc	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3507 : 
; 3508 : 			if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  011cf	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  011d6	25 00 02 00 00	 and	 eax, 512		; 00000200H
  011db	75 32		 jne	 SHORT $LN89@P_PlayerRi
  011dd	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  011e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  011e2	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  011e8	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  011ee	75 1f		 jne	 SHORT $LN89@P_PlayerRi

; 3509 : 				mo->momy = FixedMul(FINECOSINE(fa),ns);

  011f0	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  011f3	50		 push	 eax
  011f4	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  011f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  011fd	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  01200	50		 push	 eax
  01201	e8 00 00 00 00	 call	 _FixedMul
  01206	83 c4 08	 add	 esp, 8
  01209	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  0120c	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN89@P_PlayerRi:

; 3510 : 
; 3511 : 			P_SetObjectMomZ(mo, 8*FRACUNIT, false);

  0120f	6a 00		 push	 0
  01211	68 00 00 08 00	 push	 524288			; 00080000H
  01216	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  01219	50		 push	 eax
  0121a	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0121f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3512 : 			mo->fuse = 20*TICRATE; // Adjust fuse for NiGHTS

  01222	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  01225	c7 80 bc 00 00
	00 bc 02 00 00	 mov	 DWORD PTR [eax+188], 700 ; 000002bcH

; 3513 : 		}

  0122f	e9 1f 02 00 00	 jmp	 $LN97@P_PlayerRi
$LN87@P_PlayerRi:

; 3514 : 		else
; 3515 : 		{
; 3516 : 			if (i > 15)

  01234	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  01238	0f 8e 0d 01 00
	00		 jle	 $LN90@P_PlayerRi

; 3517 : 			{
; 3518 : 				ns = FIXEDSCALE(3 * FRACUNIT, mo->scale);

  0123e	68 00 00 03 00	 push	 196608			; 00030000H
  01243	68 00 00 64 00	 push	 6553600			; 00640000H
  01248	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  0124b	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  01252	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01255	51		 push	 ecx
  01256	e8 00 00 00 00	 call	 _FixedDiv
  0125b	83 c4 08	 add	 esp, 8
  0125e	50		 push	 eax
  0125f	e8 00 00 00 00	 call	 _FixedMul
  01264	83 c4 08	 add	 esp, 8
  01267	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3519 : 
; 3520 : 				if (maptol & TOL_ERZ3)

  0126a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  01271	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01276	74 09		 je	 SHORT $LN92@P_PlayerRi

; 3521 : 					ns >>= 2;

  01278	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  0127b	c1 f8 02	 sar	 eax, 2
  0127e	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax
$LN92@P_PlayerRi:

; 3522 : 
; 3523 : 				mo->momx = FixedMul(FINESINE(fa),ns);

  01281	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  01284	50		 push	 eax
  01285	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  01288	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0128f	52		 push	 edx
  01290	e8 00 00 00 00	 call	 _FixedMul
  01295	83 c4 08	 add	 esp, 8
  01298	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  0129b	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3524 : 
; 3525 : 				if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  0129e	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  012a5	25 00 02 00 00	 and	 eax, 512		; 00000200H
  012aa	75 32		 jne	 SHORT $LN93@P_PlayerRi
  012ac	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  012af	8b 08		 mov	 ecx, DWORD PTR [eax]
  012b1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  012b7	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  012bd	75 1f		 jne	 SHORT $LN93@P_PlayerRi

; 3526 : 					mo->momy = FixedMul(FINECOSINE(fa),ns);

  012bf	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  012c2	50		 push	 eax
  012c3	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  012c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  012cc	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  012cf	50		 push	 eax
  012d0	e8 00 00 00 00	 call	 _FixedMul
  012d5	83 c4 08	 add	 esp, 8
  012d8	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  012db	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN93@P_PlayerRi:

; 3527 : 
; 3528 : 				P_SetObjectMomZ(mo, (maptol & TOL_ERZ3) ? (4*FRACUNIT) >> 2 : 4*FRACUNIT, false);

  012de	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  012e5	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  012ea	74 09		 je	 SHORT $LN101@P_PlayerRi
  012ec	c7 45 98 00 00
	01 00		 mov	 DWORD PTR tv962[ebp], 65536 ; 00010000H
  012f3	eb 07		 jmp	 SHORT $LN102@P_PlayerRi
$LN101@P_PlayerRi:
  012f5	c7 45 98 00 00
	04 00		 mov	 DWORD PTR tv962[ebp], 262144 ; 00040000H
$LN102@P_PlayerRi:
  012fc	6a 00		 push	 0
  012fe	8b 4d 98	 mov	 ecx, DWORD PTR tv962[ebp]
  01301	51		 push	 ecx
  01302	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  01305	52		 push	 edx
  01306	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  0130b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3529 : 
; 3530 : 				if (i & 1)

  0130e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  01311	83 e0 01	 and	 eax, 1
  01314	74 30		 je	 SHORT $LN94@P_PlayerRi

; 3531 : 					P_SetObjectMomZ(mo, (maptol & TOL_ERZ3) ? (4*FRACUNIT) >> 2 : 4*FRACUNIT, true);

  01316	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0131d	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01322	74 09		 je	 SHORT $LN103@P_PlayerRi
  01324	c7 45 98 00 00
	01 00		 mov	 DWORD PTR tv971[ebp], 65536 ; 00010000H
  0132b	eb 07		 jmp	 SHORT $LN104@P_PlayerRi
$LN103@P_PlayerRi:
  0132d	c7 45 98 00 00
	04 00		 mov	 DWORD PTR tv971[ebp], 262144 ; 00040000H
$LN104@P_PlayerRi:
  01334	6a 01		 push	 1
  01336	8b 4d 98	 mov	 ecx, DWORD PTR tv971[ebp]
  01339	51		 push	 ecx
  0133a	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  0133d	52		 push	 edx
  0133e	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  01343	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN94@P_PlayerRi:

; 3532 : 			}

  01346	e9 08 01 00 00	 jmp	 $LN97@P_PlayerRi
$LN90@P_PlayerRi:

; 3533 : 			else
; 3534 : 			{
; 3535 : 				ns = FIXEDSCALE(2 * FRACUNIT, mo->scale);

  0134b	68 00 00 02 00	 push	 131072			; 00020000H
  01350	68 00 00 64 00	 push	 6553600			; 00640000H
  01355	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  01358	0f b7 88 cc 00
	00 00		 movzx	 ecx, WORD PTR [eax+204]
  0135f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  01362	51		 push	 ecx
  01363	e8 00 00 00 00	 call	 _FixedDiv
  01368	83 c4 08	 add	 esp, 8
  0136b	50		 push	 eax
  0136c	e8 00 00 00 00	 call	 _FixedMul
  01371	83 c4 08	 add	 esp, 8
  01374	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax

; 3536 : 
; 3537 : 				if (maptol & TOL_ERZ3)

  01377	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0137e	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01383	74 09		 je	 SHORT $LN95@P_PlayerRi

; 3538 : 					ns >>= 2;

  01385	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  01388	c1 f8 02	 sar	 eax, 2
  0138b	89 45 ec	 mov	 DWORD PTR _ns$[ebp], eax
$LN95@P_PlayerRi:

; 3539 : 
; 3540 : 				mo->momx = FixedMul(FINESINE(fa), ns);

  0138e	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  01391	50		 push	 eax
  01392	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  01395	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _finesine[ecx*4]
  0139c	52		 push	 edx
  0139d	e8 00 00 00 00	 call	 _FixedMul
  013a2	83 c4 08	 add	 esp, 8
  013a5	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  013a8	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 3541 : 
; 3542 : 				if (!(twodlevel || (player->mo->flags2 & MF2_TWOD)))

  013ab	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  013b2	25 00 02 00 00	 and	 eax, 512		; 00000200H
  013b7	75 32		 jne	 SHORT $LN96@P_PlayerRi
  013b9	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  013bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  013be	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  013c4	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  013ca	75 1f		 jne	 SHORT $LN96@P_PlayerRi

; 3543 : 					mo->momy = FixedMul(FINECOSINE(fa),ns);

  013cc	8b 45 ec	 mov	 eax, DWORD PTR _ns$[ebp]
  013cf	50		 push	 eax
  013d0	8b 4d f0	 mov	 ecx, DWORD PTR _fa$[ebp]
  013d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _finecosine
  013d9	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  013dc	50		 push	 eax
  013dd	e8 00 00 00 00	 call	 _FixedMul
  013e2	83 c4 08	 add	 esp, 8
  013e5	8b 4d f8	 mov	 ecx, DWORD PTR _mo$[ebp]
  013e8	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
$LN96@P_PlayerRi:

; 3544 : 
; 3545 : 				P_SetObjectMomZ(mo, (maptol & TOL_ERZ3) ? (3*FRACUNIT) >> 2 : 3*FRACUNIT, false);

  013eb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  013f2	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  013f7	74 09		 je	 SHORT $LN105@P_PlayerRi
  013f9	c7 45 98 00 c0
	00 00		 mov	 DWORD PTR tv1010[ebp], 49152 ; 0000c000H
  01400	eb 07		 jmp	 SHORT $LN106@P_PlayerRi
$LN105@P_PlayerRi:
  01402	c7 45 98 00 00
	03 00		 mov	 DWORD PTR tv1010[ebp], 196608 ; 00030000H
$LN106@P_PlayerRi:
  01409	6a 00		 push	 0
  0140b	8b 4d 98	 mov	 ecx, DWORD PTR tv1010[ebp]
  0140e	51		 push	 ecx
  0140f	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  01412	52		 push	 edx
  01413	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  01418	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3546 : 
; 3547 : 				if (i & 1)

  0141b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0141e	83 e0 01	 and	 eax, 1
  01421	74 30		 je	 SHORT $LN97@P_PlayerRi

; 3548 : 					P_SetObjectMomZ(mo, (maptol & TOL_ERZ3) ? (3*FRACUNIT) >> 2 : 3*FRACUNIT, true);

  01423	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0142a	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0142f	74 09		 je	 SHORT $LN107@P_PlayerRi
  01431	c7 45 98 00 c0
	00 00		 mov	 DWORD PTR tv1019[ebp], 49152 ; 0000c000H
  01438	eb 07		 jmp	 SHORT $LN108@P_PlayerRi
$LN107@P_PlayerRi:
  0143a	c7 45 98 00 00
	03 00		 mov	 DWORD PTR tv1019[ebp], 196608 ; 00030000H
$LN108@P_PlayerRi:
  01441	6a 01		 push	 1
  01443	8b 4d 98	 mov	 ecx, DWORD PTR tv1019[ebp]
  01446	51		 push	 ecx
  01447	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  0144a	52		 push	 edx
  0144b	e8 00 00 00 00	 call	 _P_SetObjectMomZ
  01450	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN97@P_PlayerRi:

; 3549 : 			}
; 3550 : 		}
; 3551 : 	}

  01453	e9 d8 fb ff ff	 jmp	 $LN7@P_PlayerRi
$LN8@P_PlayerRi:

; 3552 : 
; 3553 : 	player->losscount += 2;

  01458	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0145b	8b 88 dc 01 00
	00		 mov	 ecx, DWORD PTR [eax+476]
  01461	83 c1 02	 add	 ecx, 2
  01464	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  01467	89 8a dc 01 00
	00		 mov	 DWORD PTR [edx+476], ecx

; 3554 : 
; 3555 : 	if (player->losscount > 6) // Don't go over 6.

  0146d	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01470	83 b8 dc 01 00
	00 06		 cmp	 DWORD PTR [eax+476], 6
  01477	7e 0d		 jle	 SHORT $LN98@P_PlayerRi

; 3556 : 		player->losscount = 6;

  01479	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0147c	c7 80 dc 01 00
	00 06 00 00 00	 mov	 DWORD PTR [eax+476], 6
$LN98@P_PlayerRi:

; 3557 : 
; 3558 : 	if (P_IsObjectOnGround(player->mo))

  01486	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  01489	8b 08		 mov	 ecx, DWORD PTR [eax]
  0148b	51		 push	 ecx
  0148c	e8 00 00 00 00	 call	 _P_IsObjectOnGround
  01491	83 c4 04	 add	 esp, 4
  01494	85 c0		 test	 eax, eax
  01496	74 18		 je	 SHORT $LN99@P_PlayerRi

; 3559 : 		player->pflags &= ~PF_NIGHTSFALL;

  01498	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  0149b	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  014a1	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  014a7	8b 55 08	 mov	 edx, DWORD PTR _player$[ebp]
  014aa	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN99@P_PlayerRi:
$LN1@P_PlayerRi:

; 3560 : 
; 3561 : 	return;
; 3562 : }

  014b0	5f		 pop	 edi
  014b1	5e		 pop	 esi
  014b2	5b		 pop	 ebx
  014b3	8b e5		 mov	 esp, ebp
  014b5	5d		 pop	 ebp
  014b6	c3		 ret	 0
_P_PlayerRingBurst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_KillMobj
_TEXT	SEGMENT
tv448 = -92						; size = 4
_prandom$1 = -24					; size = 4
_w$2 = -20						; size = 4
_scoremobj$3 = -16					; size = 4
_score$4 = -12						; size = 4
_mo$ = -8						; size = 4
_item$ = -4						; size = 4
_target$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_P_KillMobj PROC					; COMDAT

; 1949 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1950 : 	mobjtype_t item;
; 1951 : 	mobj_t *mo;
; 1952 : 
; 1953 : 	if (mariomode && inflictor && (inflictor->type == MT_SHELL || inflictor->type == MT_FIREBALL))

  00009	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  00010	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00015	74 34		 je	 SHORT $LN7@P_KillMobj
  00017	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  0001b	74 2e		 je	 SHORT $LN7@P_KillMobj
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00020	81 78 7c e8 00
	00 00		 cmp	 DWORD PTR [eax+124], 232 ; 000000e8H
  00027	74 0c		 je	 SHORT $LN8@P_KillMobj
  00029	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0002c	81 78 7c e7 00
	00 00		 cmp	 DWORD PTR [eax+124], 231 ; 000000e7H
  00033	75 16		 jne	 SHORT $LN7@P_KillMobj
$LN8@P_KillMobj:

; 1954 : 		P_SetTarget(&target->tracer, inflictor);

  00035	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  0003c	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _P_SetTarget
  00048	83 c4 08	 add	 esp, 8
$LN7@P_KillMobj:

; 1955 : 
; 1956 : 	// dead target is no more shootable
; 1957 : 	target->flags &= ~MF_SHOOTABLE;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00051	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00054	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00057	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1958 : 	target->flags2 &= ~MF2_SKULLFLY;

  0005a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0005d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00063	81 e1 ff ef ff
	ff		 and	 ecx, -4097		; ffffefffH
  00069	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0006c	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 1959 : 	target->flags &= ~MF_FLOAT;

  00072	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00075	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00078	81 e1 ff bf ff
	ff		 and	 ecx, -16385		; ffffbfffH
  0007e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00081	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 1960 : 	target->health = 0; // This makes it easy to check if something's dead elsewhere.

  00084	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00087	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 1961 : 
; 1962 : 	if (target->player && sstimer > 6 && gamemap >= sstage_start && gamemap <= sstage_end)

  00091	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00094	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0009b	74 37		 je	 SHORT $LN9@P_KillMobj
  0009d	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _sstimer, 6
  000a4	7e 2e		 jle	 SHORT $LN9@P_KillMobj
  000a6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000ad	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_start
  000b4	3b c1		 cmp	 eax, ecx
  000b6	7c 1c		 jl	 SHORT $LN9@P_KillMobj
  000b8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  000bf	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _sstage_end
  000c6	3b c1		 cmp	 eax, ecx
  000c8	7f 0a		 jg	 SHORT $LN9@P_KillMobj

; 1963 : 		sstimer = 6; // Just let P_Ticker take care of the rest.

  000ca	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _sstimer, 6
$LN9@P_KillMobj:

; 1964 : 
; 1965 : 	if (target->flags & MF_BOSS)

  000d4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000d7	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000da	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  000e0	74 20		 je	 SHORT $LN10@P_KillMobj

; 1966 : 		target->momx = target->momy = target->momz = 0;

  000e2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000e5	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ef	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  000f6	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  000f9	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
  00100	eb 18		 jmp	 SHORT $LN12@P_KillMobj
$LN10@P_KillMobj:

; 1967 : 	else if (target->flags & MF_ENEMY)

  00102	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00105	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00108	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0010e	74 0a		 je	 SHORT $LN12@P_KillMobj

; 1968 : 		target->momz = 0;

  00110	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00113	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
$LN12@P_KillMobj:

; 1969 : 
; 1970 : 	if (target->type != MT_PLAYER && !(target->flags & MF_MONITOR))

  0011a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0011d	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  00121	74 20		 je	 SHORT $LN13@P_KillMobj
  00123	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00126	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00129	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  0012f	75 12		 jne	 SHORT $LN13@P_KillMobj

; 1971 : 		target->flags |= MF_NOGRAVITY; // Don't drop Tails 03-08-2000

  00131	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00134	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00137	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  0013d	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00140	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN13@P_KillMobj:

; 1972 : 
; 1973 : 	// Let EVERYONE know what happened to a player! 01-29-2002 Tails
; 1974 : 	if (target->player && !target->player->spectator)

  00143	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00146	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0014d	0f 84 d3 00 00
	00		 je	 $LN14@P_KillMobj
  00153	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00156	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0015c	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  00163	85 d2		 test	 edx, edx
  00165	0f 85 bb 00 00
	00		 jne	 $LN14@P_KillMobj

; 1975 : 	{
; 1976 : #ifdef CHAOSISNOTDEADYET
; 1977 : 		if (gametype == GT_CHAOS)
; 1978 : 			target->player->score /= 2; // Halve the player's score in Chaos Mode
; 1979 : 		else
; 1980 : #endif
; 1981 : 		if ((gametype == GT_MATCH || gametype == GT_TAG)
; 1982 : 			&& ((target == source) || (source == NULL && inflictor == NULL) || (source && !source->player))
; 1983 : 			&& cv_match_scoring.value == 0) // Suicide penalty

  0016b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00172	83 f8 01	 cmp	 eax, 1
  00175	74 0c		 je	 SHORT $LN16@P_KillMobj
  00177	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0017e	83 f8 03	 cmp	 eax, 3
  00181	75 77		 jne	 SHORT $LN20@P_KillMobj
$LN16@P_KillMobj:
  00183	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00186	3b 45 10	 cmp	 eax, DWORD PTR _source$[ebp]
  00189	74 1e		 je	 SHORT $LN17@P_KillMobj
  0018b	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0018f	75 06		 jne	 SHORT $LN18@P_KillMobj
  00191	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00195	74 12		 je	 SHORT $LN17@P_KillMobj
$LN18@P_KillMobj:
  00197	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0019b	74 5d		 je	 SHORT $LN20@P_KillMobj
  0019d	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  001a0	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  001a7	75 51		 jne	 SHORT $LN20@P_KillMobj
$LN17@P_KillMobj:
  001a9	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_match_scoring+20, 0
  001b0	75 48		 jne	 SHORT $LN20@P_KillMobj

; 1984 : 		{
; 1985 : 			if (target->player->score >= 50)

  001b2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001b5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001bb	83 b9 bc 00 00
	00 32		 cmp	 DWORD PTR [ecx+188], 50	; 00000032H
  001c2	72 23		 jb	 SHORT $LN19@P_KillMobj

; 1986 : 				target->player->score -= 50;

  001c4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c7	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001cd	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  001d3	83 ea 32	 sub	 edx, 50			; 00000032H
  001d6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001d9	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001df	89 91 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], edx
  001e5	eb 13		 jmp	 SHORT $LN20@P_KillMobj
$LN19@P_KillMobj:

; 1987 : 			else
; 1988 : 				target->player->score = 0;

  001e7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001ea	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001f0	c7 81 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+188], 0
$LN20@P_KillMobj:

; 1989 : 		}
; 1990 : 
; 1991 : 		P_DeathMessages(target, inflictor, source);

  001fa	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  001fd	50		 push	 eax
  001fe	8b 4d 0c	 mov	 ecx, DWORD PTR _inflictor$[ebp]
  00201	51		 push	 ecx
  00202	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 _P_DeathMessages
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1992 : 
; 1993 : 		target->flags2 &= ~MF2_DONTDRAW;

  0020e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00211	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00217	81 e1 ff ff bf
	ff		 and	 ecx, -4194305		; ffbfffffH
  0021d	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00220	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx
$LN14@P_KillMobj:

; 1994 : 	}
; 1995 : 
; 1996 : 	// if killed by a player
; 1997 : 	if (source && source->player)

  00226	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0022a	0f 84 99 02 00
	00		 je	 $LN21@P_KillMobj
  00230	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00233	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0023a	0f 84 89 02 00
	00		 je	 $LN21@P_KillMobj

; 1998 : 	{
; 1999 : 		if (target->flags & MF_MONITOR)

  00240	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00243	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00246	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  0024c	74 6e		 je	 SHORT $LN23@P_KillMobj

; 2000 : 		{
; 2001 : 			P_SetTarget(&target->target, source);

  0024e	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00251	50		 push	 eax
  00252	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00255	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  0025b	51		 push	 ecx
  0025c	e8 00 00 00 00	 call	 _P_SetTarget
  00261	83 c4 08	 add	 esp, 8

; 2002 : 			source->player->numboxes++;

  00264	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00267	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0026d	8b 91 4c 01 00
	00		 mov	 edx, DWORD PTR [ecx+332]
  00273	83 c2 01	 add	 edx, 1
  00276	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00279	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0027f	89 91 4c 01 00
	00		 mov	 DWORD PTR [ecx+332], edx

; 2003 : 			if ((cv_itemrespawn.value && (modifiedgame || netgame || multiplayer)))

  00285	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_itemrespawn+20, 0
  0028c	74 2e		 je	 SHORT $LN23@P_KillMobj
  0028e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _modifiedgame, 0
  00295	75 12		 jne	 SHORT $LN24@P_KillMobj
  00297	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  0029e	75 09		 jne	 SHORT $LN24@P_KillMobj
  002a0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _multiplayer, 0
  002a7	74 13		 je	 SHORT $LN23@P_KillMobj
$LN24@P_KillMobj:

; 2004 : 				target->fuse = cv_itemrespawntime.value*TICRATE + 2; // Random box generation

  002a9	6b 05 14 00 00
	00 23		 imul	 eax, DWORD PTR _cv_itemrespawntime+20, 35
  002b0	83 c0 02	 add	 eax, 2
  002b3	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  002b6	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax
$LN23@P_KillMobj:

; 2005 : 		}
; 2006 : 
; 2007 : 		// Award Score Tails
; 2008 : 		{
; 2009 : 			INT32 score = 0;

  002bc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _score$4[ebp], 0

; 2010 : 
; 2011 : #ifdef CHAOSISNOTDEADYET
; 2012 : 			if (gametype == GT_CHAOS)
; 2013 : 			{
; 2014 : 				if ((target->flags & MF_ENEMY)
; 2015 : 					&& !(target->flags & MF_MISSILE))
; 2016 : 					source->player->scoreadd++;
; 2017 : 
; 2018 : 				switch (target->type)
; 2019 : 				{
; 2020 : 					case MT_BLUECRAWLA:
; 2021 : 					case MT_GOOMBA:
; 2022 : 						score = 100*source->player->scoreadd;
; 2023 : 						break;
; 2024 : 					case MT_REDCRAWLA:
; 2025 : 					case MT_BLUEGOOMBA:
; 2026 : 						score = 150*source->player->scoreadd;
; 2027 : 						break;
; 2028 : 					case MT_JETTBOMBER:
; 2029 : 						score = 400*source->player->scoreadd;
; 2030 : 						break;
; 2031 : 					case MT_JETTGUNNER:
; 2032 : 						score = 500*source->player->scoreadd;
; 2033 : 						break;
; 2034 : 					case MT_CRAWLACOMMANDER:
; 2035 : 						score = 300*source->player->scoreadd;
; 2036 : 						break;
; 2037 : 					default:
; 2038 : 						score = 100*source->player->scoreadd;
; 2039 : 						break;
; 2040 : 				}
; 2041 : 			}
; 2042 : 			else
; 2043 : #endif
; 2044 : 			{
; 2045 : 				if (target->flags & MF_BOSS)

  002c3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002c6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002c9	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  002cf	74 0c		 je	 SHORT $LN25@P_KillMobj

; 2046 : 					score = 1000;

  002d1	c7 45 f4 e8 03
	00 00		 mov	 DWORD PTR _score$4[ebp], 1000 ; 000003e8H
  002d8	e9 d6 01 00 00	 jmp	 $LN31@P_KillMobj
$LN25@P_KillMobj:

; 2047 : 				else if ((target->flags & MF_ENEMY)
; 2048 : 					&& !(target->flags & MF_MISSILE))

  002dd	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002e0	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002e3	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  002e9	0f 84 c4 01 00
	00		 je	 $LN31@P_KillMobj
  002ef	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f2	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002f5	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  002fb	0f 85 b2 01 00
	00		 jne	 $LN31@P_KillMobj

; 2049 : 				{
; 2050 : 					mobj_t *scoremobj;
; 2051 : 
; 2052 : 					source->player->scoreadd++; // Tails 11-03-2000

  00301	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00304	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0030a	8b 91 1c 01 00
	00		 mov	 edx, DWORD PTR [ecx+284]
  00310	83 c2 01	 add	 edx, 1
  00313	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00316	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0031c	89 91 1c 01 00
	00		 mov	 DWORD PTR [ecx+284], edx

; 2053 : 					if (source->player->scoreadd == 1)

  00322	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00325	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0032b	83 b9 1c 01 00
	00 01		 cmp	 DWORD PTR [ecx+284], 1
  00332	75 50		 jne	 SHORT $LN28@P_KillMobj

; 2054 : 					{
; 2055 : 						score = 100; // Score! Tails 03-01-2000

  00334	c7 45 f4 64 00
	00 00		 mov	 DWORD PTR _score$4[ebp], 100 ; 00000064H

; 2056 : 						scoremobj = P_SpawnMobj(target->x, target->y, target->z + (target->height / 2), MT_SCORE);

  0033b	68 bf 00 00 00	 push	 191			; 000000bfH
  00340	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00343	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00346	99		 cdq
  00347	2b c2		 sub	 eax, edx
  00349	d1 f8		 sar	 eax, 1
  0034b	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  0034e	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00351	50		 push	 eax
  00352	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00355	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00358	50		 push	 eax
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  0035c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0035f	52		 push	 edx
  00360	e8 00 00 00 00	 call	 _P_SpawnMobj
  00365	83 c4 10	 add	 esp, 16			; 00000010H
  00368	89 45 f0	 mov	 DWORD PTR _scoremobj$3[ebp], eax

; 2057 : 
; 2058 : 						P_SetMobjState(scoremobj, scoremobj->info->spawnstate);

  0036b	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  0036e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00374	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00377	52		 push	 edx
  00378	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  0037b	50		 push	 eax
  0037c	e8 00 00 00 00	 call	 _P_SetMobjState
  00381	83 c4 08	 add	 esp, 8
$LN28@P_KillMobj:

; 2059 : 					}
; 2060 : 					if (source->player->scoreadd == 2)

  00384	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00387	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0038d	83 b9 1c 01 00
	00 02		 cmp	 DWORD PTR [ecx+284], 2
  00394	75 53		 jne	 SHORT $LN29@P_KillMobj

; 2061 : 					{
; 2062 : 						score = 200; // Score! Tails 03-01-2000

  00396	c7 45 f4 c8 00
	00 00		 mov	 DWORD PTR _score$4[ebp], 200 ; 000000c8H

; 2063 : 						scoremobj = P_SpawnMobj(target->x, target->y, target->z + (target->height / 2), MT_SCORE);

  0039d	68 bf 00 00 00	 push	 191			; 000000bfH
  003a2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003a5	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  003a8	99		 cdq
  003a9	2b c2		 sub	 eax, edx
  003ab	d1 f8		 sar	 eax, 1
  003ad	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  003b0	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  003b3	50		 push	 eax
  003b4	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  003b7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003ba	50		 push	 eax
  003bb	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  003be	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003c1	52		 push	 edx
  003c2	e8 00 00 00 00	 call	 _P_SpawnMobj
  003c7	83 c4 10	 add	 esp, 16			; 00000010H
  003ca	89 45 f0	 mov	 DWORD PTR _scoremobj$3[ebp], eax

; 2064 : 
; 2065 : 						P_SetMobjState(scoremobj, scoremobj->info->spawnstate+1);

  003cd	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  003d0	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  003d6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003d9	83 c2 01	 add	 edx, 1
  003dc	52		 push	 edx
  003dd	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  003e0	50		 push	 eax
  003e1	e8 00 00 00 00	 call	 _P_SetMobjState
  003e6	83 c4 08	 add	 esp, 8
$LN29@P_KillMobj:

; 2066 : 					}
; 2067 : 					if (source->player->scoreadd == 3)

  003e9	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  003ec	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003f2	83 b9 1c 01 00
	00 03		 cmp	 DWORD PTR [ecx+284], 3
  003f9	75 53		 jne	 SHORT $LN30@P_KillMobj

; 2068 : 					{
; 2069 : 						score = 500; // Score! Tails 03-01-2000

  003fb	c7 45 f4 f4 01
	00 00		 mov	 DWORD PTR _score$4[ebp], 500 ; 000001f4H

; 2070 : 						scoremobj = P_SpawnMobj(target->x, target->y, target->z + (target->height / 2), MT_SCORE);

  00402	68 bf 00 00 00	 push	 191			; 000000bfH
  00407	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0040a	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0040d	99		 cdq
  0040e	2b c2		 sub	 eax, edx
  00410	d1 f8		 sar	 eax, 1
  00412	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00415	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00418	50		 push	 eax
  00419	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0041c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0041f	50		 push	 eax
  00420	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00423	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00426	52		 push	 edx
  00427	e8 00 00 00 00	 call	 _P_SpawnMobj
  0042c	83 c4 10	 add	 esp, 16			; 00000010H
  0042f	89 45 f0	 mov	 DWORD PTR _scoremobj$3[ebp], eax

; 2071 : 
; 2072 : 						P_SetMobjState(scoremobj, scoremobj->info->spawnstate+2);

  00432	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  00435	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0043b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0043e	83 c2 02	 add	 edx, 2
  00441	52		 push	 edx
  00442	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  00445	50		 push	 eax
  00446	e8 00 00 00 00	 call	 _P_SetMobjState
  0044b	83 c4 08	 add	 esp, 8
$LN30@P_KillMobj:

; 2073 : 					}
; 2074 : 					if (source->player->scoreadd >= 4)

  0044e	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00451	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00457	83 b9 1c 01 00
	00 04		 cmp	 DWORD PTR [ecx+284], 4
  0045e	72 53		 jb	 SHORT $LN31@P_KillMobj

; 2075 : 					{
; 2076 : 						score = 1000; // Score! Tails 03-01-2000

  00460	c7 45 f4 e8 03
	00 00		 mov	 DWORD PTR _score$4[ebp], 1000 ; 000003e8H

; 2077 : 						scoremobj = P_SpawnMobj(target->x, target->y, target->z + (target->height / 2), MT_SCORE);

  00467	68 bf 00 00 00	 push	 191			; 000000bfH
  0046c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0046f	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00472	99		 cdq
  00473	2b c2		 sub	 eax, edx
  00475	d1 f8		 sar	 eax, 1
  00477	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  0047a	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  0047d	50		 push	 eax
  0047e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00481	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00484	50		 push	 eax
  00485	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00488	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0048b	52		 push	 edx
  0048c	e8 00 00 00 00	 call	 _P_SpawnMobj
  00491	83 c4 10	 add	 esp, 16			; 00000010H
  00494	89 45 f0	 mov	 DWORD PTR _scoremobj$3[ebp], eax

; 2078 : 
; 2079 : 						P_SetMobjState(scoremobj, scoremobj->info->spawnstate+3);

  00497	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  0049a	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  004a0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  004a3	83 c2 03	 add	 edx, 3
  004a6	52		 push	 edx
  004a7	8b 45 f0	 mov	 eax, DWORD PTR _scoremobj$3[ebp]
  004aa	50		 push	 eax
  004ab	e8 00 00 00 00	 call	 _P_SetMobjState
  004b0	83 c4 08	 add	 esp, 8
$LN31@P_KillMobj:

; 2080 : 					}
; 2081 : 				}
; 2082 : 			}
; 2083 : 
; 2084 : 			P_AddPlayerScore(source->player, score);

  004b3	8b 45 f4	 mov	 eax, DWORD PTR _score$4[ebp]
  004b6	50		 push	 eax
  004b7	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  004ba	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 _P_AddPlayerScore
  004c6	83 c4 08	 add	 esp, 8
$LN21@P_KillMobj:

; 2085 : 		}
; 2086 : 	}
; 2087 : 
; 2088 : 	// if a player avatar dies...
; 2089 : 	if (target->player)

  004c9	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004cc	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  004d3	0f 84 91 02 00
	00		 je	 $LN46@P_KillMobj

; 2090 : 	{
; 2091 : 		target->flags &= ~MF_SOLID; // does not block

  004d9	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004dc	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  004df	83 e1 fd	 and	 ecx, -3			; fffffffdH
  004e2	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  004e5	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2092 : 
; 2093 : 		if ((gametype == GT_COOP && !G_IsSpecialStage(gamemap)) || gametype == GT_RACE) // Coop and race only Graue 12-13-2003 -- but not in Special Stages!

  004e8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004ef	85 c0		 test	 eax, eax
  004f1	75 14		 jne	 SHORT $LN35@P_KillMobj
  004f3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gamemap
  004fa	50		 push	 eax
  004fb	e8 00 00 00 00	 call	 _G_IsSpecialStage
  00500	83 c4 04	 add	 esp, 4
  00503	85 c0		 test	 eax, eax
  00505	74 0c		 je	 SHORT $LN34@P_KillMobj
$LN35@P_KillMobj:
  00507	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0050e	83 f8 02	 cmp	 eax, 2
  00511	75 5e		 jne	 SHORT $LN37@P_KillMobj
$LN34@P_KillMobj:

; 2094 : 		{
; 2095 : 			target->player->lives -= 1; // Lose a life Tails 03-11-2000

  00513	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00516	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0051c	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  00522	83 ea 01	 sub	 edx, 1
  00525	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00528	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0052e	89 91 00 01 00
	00		 mov	 DWORD PTR [ecx+256], edx

; 2096 : 
; 2097 : 			if (target->player->lives <= 0) // Tails 03-14-2000

  00534	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00537	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0053d	83 b9 00 01 00
	00 00		 cmp	 DWORD PTR [ecx+256], 0
  00544	7f 2b		 jg	 SHORT $LN37@P_KillMobj

; 2098 : 			{
; 2099 : 				if (P_IsLocalPlayer(target->player))

  00546	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00549	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0054f	51		 push	 ecx
  00550	e8 00 00 00 00	 call	 _P_IsLocalPlayer
  00555	83 c4 04	 add	 esp, 4
  00558	85 c0		 test	 eax, eax
  0055a	74 15		 je	 SHORT $LN37@P_KillMobj

; 2100 : 				{
; 2101 : 					S_StopMusic(); // Stop the Music! Tails 03-14-2000

  0055c	e8 00 00 00 00	 call	 _S_StopMusic
  00561	90		 npad	 1

; 2102 : 					S_ChangeMusic(mus_gmover, false); // Yousa dead now, Okieday? Tails 03-14-2000

  00562	6a 00		 push	 0
  00564	68 13 04 00 00	 push	 1043			; 00000413H
  00569	e8 00 00 00 00	 call	 _S_ChangeMusic
  0056e	83 c4 08	 add	 esp, 8
$LN37@P_KillMobj:

; 2103 : 				}
; 2104 : 			}
; 2105 : 		}
; 2106 : 		target->player->playerstate = PST_DEAD;

  00571	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00574	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0057a	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 2107 : 
; 2108 : 		if (target->player == &players[consoleplayer])

  00581	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0058b	05 00 00 00 00	 add	 eax, OFFSET _players
  00590	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00593	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  00599	75 19		 jne	 SHORT $LN38@P_KillMobj

; 2109 : 		{
; 2110 : 			// don't die in auto map,
; 2111 : 			// switch view prior to dying
; 2112 : 			if (automapactive)

  0059b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _automapactive, 0
  005a2	74 06		 je	 SHORT $LN39@P_KillMobj

; 2113 : 				AM_Stop();

  005a4	e8 00 00 00 00	 call	 _AM_Stop
  005a9	90		 npad	 1
$LN39@P_KillMobj:

; 2114 : 
; 2115 : 			//added : 22-02-98: recenter view for next life...
; 2116 : 			localaiming = 0;

  005aa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming, 0
$LN38@P_KillMobj:

; 2117 : 		}
; 2118 : 		if (splitscreen && target->player == &players[secondarydisplayplayer])

  005b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  005bb	74 24		 je	 SHORT $LN40@P_KillMobj
  005bd	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  005c7	05 00 00 00 00	 add	 eax, OFFSET _players
  005cc	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  005cf	39 81 a4 00 00
	00		 cmp	 DWORD PTR [ecx+164], eax
  005d5	75 0a		 jne	 SHORT $LN40@P_KillMobj

; 2119 : 		{
; 2120 : 			// added : 22-02-98: recenter view for next life...
; 2121 : 			localaiming2 = 0;

  005d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _localaiming2, 0
$LN40@P_KillMobj:

; 2122 : 		}
; 2123 : 
; 2124 : 		//tag deaths handled differently in suicide cases. Don't count spectators!
; 2125 : 		if (gametype == GT_TAG && !(target->player->pflags & PF_TAGIT) && (!source || !source->player) && !(target->player->spectator))

  005e1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  005e8	83 f8 03	 cmp	 eax, 3
  005eb	0f 85 79 01 00
	00		 jne	 $LN46@P_KillMobj
  005f1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  005f4	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  005fa	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00600	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  00606	0f 85 5e 01 00
	00		 jne	 $LN46@P_KillMobj
  0060c	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  00610	74 10		 je	 SHORT $LN42@P_KillMobj
  00612	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00615	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0061c	0f 85 48 01 00
	00		 jne	 $LN46@P_KillMobj
$LN42@P_KillMobj:
  00622	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00625	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0062b	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  00632	85 d2		 test	 edx, edx
  00634	0f 85 30 01 00
	00		 jne	 $LN46@P_KillMobj

; 2126 : 		{
; 2127 : 			// if you accidentally die before you run out of time to hide, ignore it.
; 2128 : 			// allow them to try again, rather than sitting the whole thing out.
; 2129 : 			if (leveltime >= (hidetime * TICRATE))

  0063a	6b 05 00 00 00
	00 23		 imul	 eax, DWORD PTR _hidetime, 35
  00641	39 05 00 00 00
	00		 cmp	 DWORD PTR _leveltime, eax
  00647	0f 82 1d 01 00
	00		 jb	 $LN46@P_KillMobj

; 2130 : 			{
; 2131 : 				if (cv_tagtype.value == 0)//suiciding in survivor makes you IT.

  0064d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_tagtype+20, 0
  00654	75 5c		 jne	 SHORT $LN44@P_KillMobj

; 2132 : 				{
; 2133 : 					target->player->pflags |= PF_TAGIT;

  00656	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00659	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0065f	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00665	81 ca 00 00 00
	10		 or	 edx, 268435456		; 10000000H
  0066b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0066e	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00674	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2134 : 					CONS_Printf("%s is it!\n", player_names[target->player-players]); // Tell everyone who is it!

  0067a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0067d	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00683	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00688	99		 cdq
  00689	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0068e	f7 f9		 idiv	 ecx
  00690	6b d0 16	 imul	 edx, eax, 22
  00693	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00699	52		 push	 edx
  0069a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FKKLEDAE@?$CFs?5is?5it?$CB?6@
  0069f	e8 00 00 00 00	 call	 _CONS_Printf
  006a4	83 c4 08	 add	 esp, 8

; 2135 : 					P_CheckSurvivors();

  006a7	e8 00 00 00 00	 call	 _P_CheckSurvivors
  006ac	90		 npad	 1

; 2136 : 				}

  006ad	e9 b8 00 00 00	 jmp	 $LN46@P_KillMobj
$LN44@P_KillMobj:

; 2137 : 				else
; 2138 : 				{
; 2139 : 					if (!(target->player->pflags & PF_TAGGED))

  006b2	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  006b5	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  006bb	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  006c1	81 e2 00 00 00
	04		 and	 edx, 67108864		; 04000000H
  006c7	0f 85 9d 00 00
	00		 jne	 $LN46@P_KillMobj

; 2140 : 					{
; 2141 : 						//otherwise, increment the tagger's score.
; 2142 : 						//in hide and seek, suiciding players are counted as found.
; 2143 : 						INT32 w;
; 2144 : 
; 2145 : 						for (w=0; w < MAXPLAYERS; w++)

  006cd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _w$2[ebp], 0
  006d4	eb 09		 jmp	 SHORT $LN4@P_KillMobj
$LN2@P_KillMobj:
  006d6	8b 45 ec	 mov	 eax, DWORD PTR _w$2[ebp]
  006d9	83 c0 01	 add	 eax, 1
  006dc	89 45 ec	 mov	 DWORD PTR _w$2[ebp], eax
$LN4@P_KillMobj:
  006df	83 7d ec 20	 cmp	 DWORD PTR _w$2[ebp], 32	; 00000020H
  006e3	7d 2e		 jge	 SHORT $LN3@P_KillMobj

; 2146 : 						{
; 2147 : 							if (players[w].pflags & PF_TAGIT)

  006e5	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _w$2[ebp], 508
  006ec	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR _players[eax+172]
  006f2	81 e1 00 00 00
	10		 and	 ecx, 268435456		; 10000000H
  006f8	74 17		 je	 SHORT $LN47@P_KillMobj

; 2148 : 								P_AddPlayerScore(&players[w], 100);

  006fa	6a 64		 push	 100			; 00000064H
  006fc	69 45 ec fc 01
	00 00		 imul	 eax, DWORD PTR _w$2[ebp], 508
  00703	05 00 00 00 00	 add	 eax, OFFSET _players
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 _P_AddPlayerScore
  0070e	83 c4 08	 add	 esp, 8
$LN47@P_KillMobj:

; 2149 : 						}

  00711	eb c3		 jmp	 SHORT $LN2@P_KillMobj
$LN3@P_KillMobj:

; 2150 : 
; 2151 : 						target->player->pflags |= PF_TAGGED;

  00713	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00716	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0071c	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00722	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  00728	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0072b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00731	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2152 : 						CONS_Printf("%s was found!\n", player_names[target->player-players]);

  00737	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0073a	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  00740	2d 00 00 00 00	 sub	 eax, OFFSET _players
  00745	99		 cdq
  00746	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  0074b	f7 f9		 idiv	 ecx
  0074d	6b d0 16	 imul	 edx, eax, 22
  00750	81 c2 00 00 00
	00		 add	 edx, OFFSET _player_names
  00756	52		 push	 edx
  00757	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IJKKFILK@?$CFs?5was?5found?$CB?6@
  0075c	e8 00 00 00 00	 call	 _CONS_Printf
  00761	83 c4 08	 add	 esp, 8

; 2153 : 						P_CheckSurvivors();

  00764	e8 00 00 00 00	 call	 _P_CheckSurvivors
  00769	90		 npad	 1
$LN46@P_KillMobj:

; 2154 : 					}
; 2155 : 				}
; 2156 : 			}
; 2157 : 		}
; 2158 : 	}
; 2159 : 
; 2160 : 	if (target->player)

  0076a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0076d	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00774	74 1b		 je	 SHORT $LN48@P_KillMobj

; 2161 : 		P_SetPlayerMobjState(target, target->info->deathstate);

  00776	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00779	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0077f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00782	52		 push	 edx
  00783	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00786	50		 push	 eax
  00787	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  0078c	83 c4 08	 add	 esp, 8
  0078f	eb 19		 jmp	 SHORT $LN49@P_KillMobj
$LN48@P_KillMobj:

; 2162 : 	else
; 2163 : 		P_SetMobjState(target, target->info->deathstate);

  00791	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00794	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0079a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0079d	52		 push	 edx
  0079e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  007a1	50		 push	 eax
  007a2	e8 00 00 00 00	 call	 _P_SetMobjState
  007a7	83 c4 08	 add	 esp, 8
$LN49@P_KillMobj:

; 2164 : 
; 2165 : 	/** \note For player, the above is redundant because of P_SetMobjState (target, S_PLAY_DIE1)
; 2166 : 	   in P_DamageMobj()
; 2167 : 	   Graue 12-22-2003 */
; 2168 : 
; 2169 : 	if (source && target && target->player && source->player)

  007aa	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  007ae	74 2a		 je	 SHORT $LN50@P_KillMobj
  007b0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  007b4	74 24		 je	 SHORT $LN50@P_KillMobj
  007b6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  007b9	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  007c0	74 18		 je	 SHORT $LN50@P_KillMobj
  007c2	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  007c5	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  007cc	74 0c		 je	 SHORT $LN50@P_KillMobj

; 2170 : 		P_PlayVictorySound(source); // Killer laughs at you. LAUGHS! BWAHAHAHA!

  007ce	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  007d1	50		 push	 eax
  007d2	e8 00 00 00 00	 call	 _P_PlayVictorySound
  007d7	83 c4 04	 add	 esp, 4
$LN50@P_KillMobj:

; 2171 : 
; 2172 : 	if (target->tics < 1)

  007da	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  007dd	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  007e1	7d 0a		 jge	 SHORT $LN51@P_KillMobj

; 2173 : 		target->tics = 1;

  007e3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  007e6	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1
$LN51@P_KillMobj:

; 2174 : 
; 2175 : 	if (mariomode // Don't show birds, etc. in Mario Mode Tails 12-23-2001

  007ed	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  007f4	25 00 01 00 00	 and	 eax, 256		; 00000100H
  007f9	74 05		 je	 SHORT $LN52@P_KillMobj

; 2176 : #ifdef CHAOSISNOTDEADYET
; 2177 : 		|| gametype == GT_CHAOS // Or Chaos Mode!
; 2178 : #endif
; 2179 : 		)
; 2180 : 		return;

  007fb	e9 0a 01 00 00	 jmp	 $LN53@P_KillMobj
$LN52@P_KillMobj:

; 2181 : 
; 2182 : 	// Drop stuff.
; 2183 : 	// This determines the kind of object spawned
; 2184 : 	// during the death frame of a thing.
; 2185 : 	if (target->flags & MF_ENEMY)

  00800	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00803	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00806	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0080c	0f 84 f8 00 00
	00		 je	 $LN53@P_KillMobj

; 2186 : 	{
; 2187 : 		if (cv_soniccd.value)

  00812	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_soniccd+20, 0
  00819	74 0c		 je	 SHORT $LN54@P_KillMobj

; 2188 : 			item = MT_SEED;

  0081b	c7 45 fc bc 00
	00 00		 mov	 DWORD PTR _item$[ebp], 188 ; 000000bcH
  00822	e9 89 00 00 00	 jmp	 $LN5@P_KillMobj
$LN54@P_KillMobj:

; 2189 : 		else
; 2190 : 		{
; 2191 : 			INT32 prandom;
; 2192 : 
; 2193 : 			switch (target->type)

  00827	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0082a	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0082d	89 4d a4	 mov	 DWORD PTR tv448[ebp], ecx
  00830	8b 55 a4	 mov	 edx, DWORD PTR tv448[ebp]
  00833	83 ea 01	 sub	 edx, 1
  00836	89 55 a4	 mov	 DWORD PTR tv448[ebp], edx
  00839	83 7d a4 17	 cmp	 DWORD PTR tv448[ebp], 23 ; 00000017H
  0083d	77 3e		 ja	 SHORT $LN68@P_KillMobj
  0083f	8b 45 a4	 mov	 eax, DWORD PTR tv448[ebp]
  00842	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN74@P_KillMobj[eax]
  00849	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN75@P_KillMobj[ecx*4]
$LN56@P_KillMobj:

; 2194 : 			{
; 2195 : 				case MT_REDCRAWLA:
; 2196 : 				case MT_GOLDBUZZ:
; 2197 : 				case MT_SKIM:
; 2198 : 					item = MT_BUNNY;

  00850	c7 45 fc a6 00
	00 00		 mov	 DWORD PTR _item$[ebp], 166 ; 000000a6H

; 2199 : 					break;

  00857	eb 57		 jmp	 SHORT $LN5@P_KillMobj
$LN59@P_KillMobj:

; 2200 : 
; 2201 : 				case MT_BLUECRAWLA:
; 2202 : 				case MT_JETTBOMBER:
; 2203 : 				case MT_GFZFISH:
; 2204 : 					item = MT_BIRD;

  00859	c7 45 fc a5 00
	00 00		 mov	 DWORD PTR _item$[ebp], 165 ; 000000a5H

; 2205 : 					break;

  00860	eb 4e		 jmp	 SHORT $LN5@P_KillMobj
$LN62@P_KillMobj:

; 2206 : 
; 2207 : 				case MT_JETTGUNNER:
; 2208 : 				case MT_CRAWLACOMMANDER:
; 2209 : 				case MT_REDBUZZ:
; 2210 : 					item = MT_MOUSE;

  00862	c7 45 fc a7 00
	00 00		 mov	 DWORD PTR _item$[ebp], 167 ; 000000a7H

; 2211 : 					break;

  00869	eb 45		 jmp	 SHORT $LN5@P_KillMobj
$LN65@P_KillMobj:

; 2212 : 
; 2213 : 				case MT_GSNAPPER:
; 2214 : 					item = MT_COW;

  0086b	c7 45 fc a9 00
	00 00		 mov	 DWORD PTR _item$[ebp], 169 ; 000000a9H

; 2215 : 					break;

  00872	eb 3c		 jmp	 SHORT $LN5@P_KillMobj
$LN66@P_KillMobj:

; 2216 : 
; 2217 : 				case MT_MINUS:
; 2218 : 				case MT_VULTURE:
; 2219 : 					item = MT_CHICKEN;

  00874	c7 45 fc a8 00
	00 00		 mov	 DWORD PTR _item$[ebp], 168 ; 000000a8H

; 2220 : 					break;

  0087b	eb 33		 jmp	 SHORT $LN5@P_KillMobj
$LN68@P_KillMobj:

; 2221 : 
; 2222 : 				default:
; 2223 : 					prandom = P_Random();

  0087d	e8 00 00 00 00	 call	 _P_Random
  00882	0f b6 c0	 movzx	 eax, al
  00885	89 45 e8	 mov	 DWORD PTR _prandom$1[ebp], eax

; 2224 : 
; 2225 : 					if (prandom < 86)

  00888	83 7d e8 56	 cmp	 DWORD PTR _prandom$1[ebp], 86 ; 00000056H
  0088c	7d 09		 jge	 SHORT $LN69@P_KillMobj

; 2226 : 						item = MT_BUNNY;

  0088e	c7 45 fc a6 00
	00 00		 mov	 DWORD PTR _item$[ebp], 166 ; 000000a6H
  00895	eb 19		 jmp	 SHORT $LN72@P_KillMobj
$LN69@P_KillMobj:

; 2227 : 					else if (prandom < 172)

  00897	81 7d e8 ac 00
	00 00		 cmp	 DWORD PTR _prandom$1[ebp], 172 ; 000000acH
  0089e	7d 09		 jge	 SHORT $LN71@P_KillMobj

; 2228 : 						item = MT_BIRD;

  008a0	c7 45 fc a5 00
	00 00		 mov	 DWORD PTR _item$[ebp], 165 ; 000000a5H
  008a7	eb 07		 jmp	 SHORT $LN72@P_KillMobj
$LN71@P_KillMobj:

; 2229 : 					else
; 2230 : 						item = MT_MOUSE;

  008a9	c7 45 fc a7 00
	00 00		 mov	 DWORD PTR _item$[ebp], 167 ; 000000a7H
$LN72@P_KillMobj:
$LN5@P_KillMobj:

; 2231 : 
; 2232 : 					break;
; 2233 : 			}
; 2234 : 		}
; 2235 : 
; 2236 : 		mo = P_SpawnMobj(target->x, target->y, target->z + (target->height / 2), item);

  008b0	8b 45 fc	 mov	 eax, DWORD PTR _item$[ebp]
  008b3	50		 push	 eax
  008b4	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  008b7	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  008ba	99		 cdq
  008bb	2b c2		 sub	 eax, edx
  008bd	d1 f8		 sar	 eax, 1
  008bf	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  008c2	03 42 18	 add	 eax, DWORD PTR [edx+24]
  008c5	50		 push	 eax
  008c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  008c9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  008cc	51		 push	 ecx
  008cd	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  008d0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  008d3	50		 push	 eax
  008d4	e8 00 00 00 00	 call	 _P_SpawnMobj
  008d9	83 c4 10	 add	 esp, 16			; 00000010H
  008dc	89 45 f8	 mov	 DWORD PTR _mo$[ebp], eax

; 2237 : 		mo->destscale = target->scale;

  008df	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  008e2	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  008e5	66 8b 91 cc 00
	00 00		 mov	 dx, WORD PTR [ecx+204]
  008ec	66 89 90 ce 00
	00 00		 mov	 WORD PTR [eax+206], dx

; 2238 : 		P_SetScale(mo, mo->destscale);

  008f3	8b 45 f8	 mov	 eax, DWORD PTR _mo$[ebp]
  008f6	0f b7 88 ce 00
	00 00		 movzx	 ecx, WORD PTR [eax+206]
  008fd	51		 push	 ecx
  008fe	8b 55 f8	 mov	 edx, DWORD PTR _mo$[ebp]
  00901	52		 push	 edx
  00902	e8 00 00 00 00	 call	 _P_SetScale
  00907	83 c4 08	 add	 esp, 8
$LN53@P_KillMobj:

; 2239 : 	}
; 2240 : }

  0090a	5f		 pop	 edi
  0090b	5e		 pop	 esi
  0090c	5b		 pop	 ebx
  0090d	8b e5		 mov	 esp, ebp
  0090f	5d		 pop	 ebp
  00910	c3		 ret	 0
  00911	0f 1f 00	 npad	 3
$LN75@P_KillMobj:
  00914	00 00 00 00	 DD	 $LN59@P_KillMobj
  00918	00 00 00 00	 DD	 $LN56@P_KillMobj
  0091c	00 00 00 00	 DD	 $LN62@P_KillMobj
  00920	00 00 00 00	 DD	 $LN66@P_KillMobj
  00924	00 00 00 00	 DD	 $LN65@P_KillMobj
  00928	00 00 00 00	 DD	 $LN68@P_KillMobj
$LN74@P_KillMobj:
  0092c	00		 DB	 0
  0092d	01		 DB	 1
  0092e	00		 DB	 0
  0092f	01		 DB	 1
  00930	02		 DB	 2
  00931	00		 DB	 0
  00932	02		 DB	 2
  00933	02		 DB	 2
  00934	05		 DB	 5
  00935	01		 DB	 1
  00936	05		 DB	 5
  00937	05		 DB	 5
  00938	05		 DB	 5
  00939	05		 DB	 5
  0093a	05		 DB	 5
  0093b	03		 DB	 3
  0093c	05		 DB	 5
  0093d	05		 DB	 5
  0093e	05		 DB	 5
  0093f	05		 DB	 5
  00940	05		 DB	 5
  00941	05		 DB	 5
  00942	04		 DB	 4
  00943	03		 DB	 3
_P_KillMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_DamageMobj
_TEXT	SEGMENT
tv521 = -72						; size = 4
_player$ = -4						; size = 4
_target$ = 8						; size = 4
_inflictor$ = 12					; size = 4
_source$ = 16						; size = 4
_damage$ = 20						; size = 4
_P_DamageMobj PROC					; COMDAT

; 2779 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2780 : 	player_t *player;
; 2781 : 
; 2782 : 	if (cv_objectplace.value)

  00009	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_objectplace+20, 0
  00010	74 07		 je	 SHORT $LN2@P_DamageMo

; 2783 : 		return false;

  00012	33 c0		 xor	 eax, eax
  00014	e9 69 0d 00 00	 jmp	 $LN1@P_DamageMo
$LN2@P_DamageMo:

; 2784 : 
; 2785 : 	if (!(target->flags & MF_SHOOTABLE))

  00019	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0001c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001f	83 e1 04	 and	 ecx, 4
  00022	75 07		 jne	 SHORT $LN3@P_DamageMo

; 2786 : 		return false; // shouldn't happen...

  00024	33 c0		 xor	 eax, eax
  00026	e9 57 0d 00 00	 jmp	 $LN1@P_DamageMo
$LN3@P_DamageMo:

; 2787 : 
; 2788 : 	if (target->type == MT_BLACKEGGMAN)

  0002b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0002e	83 78 7c 27	 cmp	 DWORD PTR [eax+124], 39	; 00000027H
  00032	75 07		 jne	 SHORT $LN4@P_DamageMo

; 2789 : 		return false;

  00034	33 c0		 xor	 eax, eax
  00036	e9 47 0d 00 00	 jmp	 $LN1@P_DamageMo
$LN4@P_DamageMo:

; 2790 : 
; 2791 : 	// Make sure that boxes cannot be popped by enemies, red rings, etc.
; 2792 : 	if (target->flags & MF_MONITOR && ((!source || !source->player) || (inflictor && !inflictor->player)))

  0003b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0003e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00041	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H
  00047	74 2b		 je	 SHORT $LN5@P_DamageMo
  00049	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0004d	74 1e		 je	 SHORT $LN6@P_DamageMo
  0004f	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00052	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00059	74 12		 je	 SHORT $LN6@P_DamageMo
  0005b	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  0005f	74 13		 je	 SHORT $LN5@P_DamageMo
  00061	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00064	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0006b	75 07		 jne	 SHORT $LN5@P_DamageMo
$LN6@P_DamageMo:

; 2793 : 		return false;

  0006d	33 c0		 xor	 eax, eax
  0006f	e9 0e 0d 00 00	 jmp	 $LN1@P_DamageMo
$LN5@P_DamageMo:

; 2794 : 
; 2795 : 	if (target->health <= 0)

  00074	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00077	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0007e	7f 07		 jg	 SHORT $LN7@P_DamageMo

; 2796 : 		return false;

  00080	33 c0		 xor	 eax, eax
  00082	e9 fb 0c 00 00	 jmp	 $LN1@P_DamageMo
$LN7@P_DamageMo:

; 2797 : 
; 2798 : 	if (target->flags2 & MF2_SKULLFLY)

  00087	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0008a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00090	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00096	74 1e		 je	 SHORT $LN8@P_DamageMo

; 2799 : 		target->momx = target->momy = target->momz = 0;

  00098	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0009b	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000a5	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  000ac	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  000af	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
$LN8@P_DamageMo:

; 2800 : 
; 2801 : 	// Spectator handling
; 2802 : 	if (netgame)

  000b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _netgame, 0
  000bd	0f 84 86 00 00
	00		 je	 $LN13@P_DamageMo

; 2803 : 	{
; 2804 : 		if (damage == 42000 && target->player && target->player->spectator)

  000c3	81 7d 14 10 a4
	00 00		 cmp	 DWORD PTR _damage$[ebp], 42000 ; 0000a410H
  000ca	75 29		 jne	 SHORT $LN10@P_DamageMo
  000cc	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000cf	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000d6	74 1d		 je	 SHORT $LN10@P_DamageMo
  000d8	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000db	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000e1	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  000e8	85 d2		 test	 edx, edx
  000ea	74 09		 je	 SHORT $LN10@P_DamageMo

; 2805 : 			damage = 10000;

  000ec	c7 45 14 10 27
	00 00		 mov	 DWORD PTR _damage$[ebp], 10000 ; 00002710H
  000f3	eb 27		 jmp	 SHORT $LN12@P_DamageMo
$LN10@P_DamageMo:

; 2806 : 		else if (target->player && target->player->spectator)

  000f5	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  000f8	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  000ff	74 1b		 je	 SHORT $LN12@P_DamageMo
  00101	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00104	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0010a	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  00111	85 d2		 test	 edx, edx
  00113	74 07		 je	 SHORT $LN12@P_DamageMo

; 2807 : 			return false;

  00115	33 c0		 xor	 eax, eax
  00117	e9 66 0c 00 00	 jmp	 $LN1@P_DamageMo
$LN12@P_DamageMo:

; 2808 : 
; 2809 : 		if (source && source->player && source->player->spectator)

  0011c	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  00120	74 27		 je	 SHORT $LN13@P_DamageMo
  00122	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00125	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0012c	74 1b		 je	 SHORT $LN13@P_DamageMo
  0012e	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00131	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00137	0f b6 91 f0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+496]
  0013e	85 d2		 test	 edx, edx
  00140	74 07		 je	 SHORT $LN13@P_DamageMo

; 2810 : 			return false;

  00142	33 c0		 xor	 eax, eax
  00144	e9 39 0c 00 00	 jmp	 $LN1@P_DamageMo
$LN13@P_DamageMo:

; 2811 : 	}
; 2812 : 
; 2813 : 	// Special case for team ring boxes
; 2814 : 	if (target->type == MT_REDRINGBOX && !(source->player->ctfteam == 1))

  00149	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0014c	83 78 7c 4f	 cmp	 DWORD PTR [eax+124], 79	; 0000004fH
  00150	75 19		 jne	 SHORT $LN14@P_DamageMo
  00152	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00155	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0015b	83 b9 60 01 00
	00 01		 cmp	 DWORD PTR [ecx+352], 1
  00162	74 07		 je	 SHORT $LN14@P_DamageMo

; 2815 : 		return false;

  00164	33 c0		 xor	 eax, eax
  00166	e9 17 0c 00 00	 jmp	 $LN1@P_DamageMo
$LN14@P_DamageMo:

; 2816 : 
; 2817 : 	if (target->type == MT_BLUERINGBOX && !(source->player->ctfteam == 2))

  0016b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0016e	83 78 7c 50	 cmp	 DWORD PTR [eax+124], 80	; 00000050H
  00172	75 19		 jne	 SHORT $LN15@P_DamageMo
  00174	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00177	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0017d	83 b9 60 01 00
	00 02		 cmp	 DWORD PTR [ecx+352], 2
  00184	74 07		 je	 SHORT $LN15@P_DamageMo

; 2818 : 		return false;

  00186	33 c0		 xor	 eax, eax
  00188	e9 f5 0b 00 00	 jmp	 $LN1@P_DamageMo
$LN15@P_DamageMo:

; 2819 : 
; 2820 : 	// Special case for grenade rings
; 2821 : 	if (target->type == MT_THROWNGRENADE)

  0018d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00190	81 78 7c e0 00
	00 00		 cmp	 DWORD PTR [eax+124], 224 ; 000000e0H
  00197	0f 85 ef 00 00
	00		 jne	 $LN23@P_DamageMo

; 2822 : 	{
; 2823 : 		// Do not destroy your own or your teammate's grenades unless it is triggered by another grenade detonating.
; 2824 : 		if (inflictor && !(inflictor->type == MT_THROWNGRENADE))

  0019d	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  001a1	0f 84 c0 00 00
	00		 je	 $LN22@P_DamageMo
  001a7	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  001aa	81 78 7c e0 00
	00 00		 cmp	 DWORD PTR [eax+124], 224 ; 000000e0H
  001b1	0f 84 b0 00 00
	00		 je	 $LN22@P_DamageMo

; 2825 : 		{
; 2826 : 			if (source && (source->player == target->target->player))

  001b7	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  001bb	74 26		 je	 SHORT $LN18@P_DamageMo
  001bd	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c0	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  001c6	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  001c9	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  001cf	3b 81 a4 00 00
	00		 cmp	 eax, DWORD PTR [ecx+164]
  001d5	75 0c		 jne	 SHORT $LN18@P_DamageMo

; 2827 : 				return false;

  001d7	33 c0		 xor	 eax, eax
  001d9	e9 a4 0b 00 00	 jmp	 $LN1@P_DamageMo
  001de	e9 84 00 00 00	 jmp	 $LN22@P_DamageMo
$LN18@P_DamageMo:

; 2828 : 			else if (gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  001e3	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001ea	83 f8 04	 cmp	 eax, 4
  001ed	74 15		 je	 SHORT $LN21@P_DamageMo
  001ef	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  001f6	83 f8 01	 cmp	 eax, 1
  001f9	75 6c		 jne	 SHORT $LN22@P_DamageMo
  001fb	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00202	74 63		 je	 SHORT $LN22@P_DamageMo
$LN21@P_DamageMo:

; 2829 : 			{
; 2830 : 				if (target && source && target->target && source->player && target->target->player && (source->player->ctfteam == target->target->player->ctfteam))

  00204	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00208	74 5d		 je	 SHORT $LN22@P_DamageMo
  0020a	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0020e	74 57		 je	 SHORT $LN22@P_DamageMo
  00210	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00213	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0021a	74 4b		 je	 SHORT $LN22@P_DamageMo
  0021c	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0021f	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00226	74 3f		 je	 SHORT $LN22@P_DamageMo
  00228	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0022b	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00231	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00238	74 2d		 je	 SHORT $LN22@P_DamageMo
  0023a	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0023d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00243	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00246	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0024c	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  00252	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  00258	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  0025e	75 07		 jne	 SHORT $LN22@P_DamageMo

; 2831 : 					return false;

  00260	33 c0		 xor	 eax, eax
  00262	e9 1b 0b 00 00	 jmp	 $LN1@P_DamageMo
$LN22@P_DamageMo:

; 2832 : 			}
; 2833 : 		}
; 2834 : 
; 2835 : 		if (!(target->flags2 & MF2_DEBRIS)) // So already exploded grenades don't tigger again.

  00267	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0026a	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00270	83 e1 40	 and	 ecx, 64			; 00000040H
  00273	75 17		 jne	 SHORT $LN23@P_DamageMo

; 2836 : 		{
; 2837 : 			// Add a slight delay so the exposions are a chain reaction, rather than simultaneous.
; 2838 : 			target->fuse = TICRATE / 7;

  00275	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00278	c7 80 bc 00 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+188], 5

; 2839 : 			return true;

  00282	b8 01 00 00 00	 mov	 eax, 1
  00287	e9 f6 0a 00 00	 jmp	 $LN1@P_DamageMo
$LN23@P_DamageMo:

; 2840 : 		}
; 2841 : 	}
; 2842 : 
; 2843 : 	// Special case for Crawla Commander
; 2844 : 	if (target->type == MT_CRAWLACOMMANDER)

  0028c	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0028f	83 78 7c 08	 cmp	 DWORD PTR [eax+124], 8
  00293	0f 85 c8 00 00
	00		 jne	 $LN24@P_DamageMo

; 2845 : 	{
; 2846 : 		if (target->fuse) // Invincible

  00299	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0029c	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  002a3	74 07		 je	 SHORT $LN26@P_DamageMo

; 2847 : 			return false;

  002a5	33 c0		 xor	 eax, eax
  002a7	e9 d6 0a 00 00	 jmp	 $LN1@P_DamageMo
$LN26@P_DamageMo:

; 2848 : 
; 2849 : 		if (target->health > 1)

  002ac	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002af	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  002b6	7e 4c		 jle	 SHORT $LN27@P_DamageMo

; 2850 : 		{
; 2851 : 
; 2852 : #ifdef CHAOSISNOTDEADYET
; 2853 : 			if (gametype == GT_CHAOS && source && source->player)
; 2854 : 			{
; 2855 : 				player = source->player;
; 2856 : 				if (!((player->pflags & PF_USEDOWN) && player->dashspeed &&
; 2857 : 				      (player->pflags & PF_STARTDASH) && (player->pflags & PF_SPINNING)
; 2858 : 				     )
; 2859 : 				   )
; 2860 : 					player->scoreadd++;
; 2861 : 				P_AddPlayerScore(player, 300*player->scoreadd);
; 2862 : 			}
; 2863 : #endif
; 2864 : 			if (target->info->painsound)

  002b8	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002bb	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002c1	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  002c5	74 19		 je	 SHORT $LN29@P_DamageMo

; 2865 : 				S_StartSound(target, target->info->painsound);

  002c7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002ca	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  002d0	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  002d3	52		 push	 edx
  002d4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 _S_StartSound
  002dd	83 c4 08	 add	 esp, 8
$LN29@P_DamageMo:

; 2866 : 
; 2867 : 			target->fuse = TICRATE/2;

  002e0	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002e3	c7 80 bc 00 00
	00 11 00 00 00	 mov	 DWORD PTR [eax+188], 17	; 00000011H

; 2868 : 			target->flags2 |= MF2_FRET;

  002ed	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f0	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  002f6	83 c9 10	 or	 ecx, 16			; 00000010H
  002f9	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  002fc	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2869 : 		}

  00302	eb 1f		 jmp	 SHORT $LN28@P_DamageMo
$LN27@P_DamageMo:

; 2870 : 		else
; 2871 : 		{
; 2872 : 			target->flags |= MF_NOGRAVITY;

  00304	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00307	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0030a	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00310	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00313	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 2873 : 			target->fuse = 0;

  00316	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00319	c7 80 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+188], 0
$LN28@P_DamageMo:

; 2874 : 		}
; 2875 : 
; 2876 : 		target->momx = target->momy = target->momz = 0;

  00323	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00326	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0032d	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00330	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00337	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0033a	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 2877 : 
; 2878 : 		P_InstaThrust(target, target->angle-ANGLE_180, 5*FRACUNIT);

  00341	68 00 00 05 00	 push	 327680			; 00050000H
  00346	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00349	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0034c	81 e9 00 00 00
	80		 sub	 ecx, -2147483648	; 80000000H
  00352	51		 push	 ecx
  00353	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00356	52		 push	 edx
  00357	e8 00 00 00 00	 call	 _P_InstaThrust
  0035c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2879 : 	}

  0035f	eb 56		 jmp	 SHORT $LN32@P_DamageMo
$LN24@P_DamageMo:

; 2880 : 	else if (target->flags & MF_BOSS)

  00361	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00364	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00367	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0036d	74 48		 je	 SHORT $LN32@P_DamageMo

; 2881 : 	{
; 2882 : 		if (target->flags2 & MF2_FRET) // Currently flashing from being hit

  0036f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00372	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00378	83 e1 10	 and	 ecx, 16			; 00000010H
  0037b	74 07		 je	 SHORT $LN31@P_DamageMo

; 2883 : 			return false;

  0037d	33 c0		 xor	 eax, eax
  0037f	e9 fe 09 00 00	 jmp	 $LN1@P_DamageMo
$LN31@P_DamageMo:

; 2884 : 
; 2885 : 		if (target->health > 1)

  00384	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00387	83 b8 8c 00 00
	00 01		 cmp	 DWORD PTR [eax+140], 1
  0038e	7e 27		 jle	 SHORT $LN32@P_DamageMo

; 2886 : 		{
; 2887 : 			target->flags2 |= MF2_FRET;

  00390	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00393	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00399	83 c9 10	 or	 ecx, 16			; 00000010H
  0039c	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0039f	89 8a 88 00 00
	00		 mov	 DWORD PTR [edx+136], ecx

; 2888 : 			target->flags |= MF_TRANSLATION;

  003a5	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003a8	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  003ab	81 c9 00 00 00
	04		 or	 ecx, 67108864		; 04000000H
  003b1	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  003b4	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN32@P_DamageMo:

; 2889 : 		}
; 2890 : 
; 2891 : #ifdef CHAOSISNOTDEADYET
; 2892 : 		if (gametype == GT_CHAOS && source && source->player)
; 2893 : 		{
; 2894 : 			source->player->scoreadd++;
; 2895 : 			P_AddPlayerScore(source->player, 300*source->player->scoreadd);
; 2896 : 		}
; 2897 : #endif
; 2898 : 	}
; 2899 : 
; 2900 : 	player = target->player;

  003b7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003ba	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003c0	89 4d fc	 mov	 DWORD PTR _player$[ebp], ecx

; 2901 : 
; 2902 : 	if (player) // Player is the target

  003c3	83 7d fc 00	 cmp	 DWORD PTR _player$[ebp], 0
  003c7	0f 84 ea 06 00
	00		 je	 $LN33@P_DamageMo

; 2903 : 	{
; 2904 : 		if (player->exiting)

  003cd	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  003d0	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  003d7	74 07		 je	 SHORT $LN34@P_DamageMo

; 2905 : 			return false;

  003d9	33 c0		 xor	 eax, eax
  003db	e9 a2 09 00 00	 jmp	 $LN1@P_DamageMo
$LN34@P_DamageMo:

; 2906 : 
; 2907 : 		if ((target->player->pflags & PF_NIGHTSMODE) && source == target)

  003e0	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003e3	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  003e9	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  003ef	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  003f5	74 0f		 je	 SHORT $LN35@P_DamageMo
  003f7	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  003fa	3b 45 08	 cmp	 eax, DWORD PTR _target$[ebp]
  003fd	75 07		 jne	 SHORT $LN35@P_DamageMo

; 2908 : 			return false;

  003ff	33 c0		 xor	 eax, eax
  00401	e9 7c 09 00 00	 jmp	 $LN1@P_DamageMo
$LN35@P_DamageMo:

; 2909 : 
; 2910 : 		if (!(target->player->pflags & PF_NIGHTSMODE) && !(target->player->pflags & PF_NIGHTSFALL) && (maptol & TOL_NIGHTS))

  00406	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00409	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0040f	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00415	81 e2 00 00 20
	00		 and	 edx, 2097152		; 00200000H
  0041b	75 2a		 jne	 SHORT $LN36@P_DamageMo
  0041d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00420	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00426	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0042c	81 e2 00 00 80
	00		 and	 edx, 8388608		; 00800000H
  00432	75 13		 jne	 SHORT $LN36@P_DamageMo
  00434	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _maptol
  0043b	83 e0 40	 and	 eax, 64			; 00000040H
  0043e	74 07		 je	 SHORT $LN36@P_DamageMo

; 2911 : 			return false;

  00440	33 c0		 xor	 eax, eax
  00442	e9 3b 09 00 00	 jmp	 $LN1@P_DamageMo
$LN36@P_DamageMo:

; 2912 : 
; 2913 : 		if (player->pflags & PF_NIGHTSMODE) // NiGHTS damage handling

  00447	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0044a	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00450	81 e1 00 00 20
	00		 and	 ecx, 2097152		; 00200000H
  00456	74 1a		 je	 SHORT $LN37@P_DamageMo

; 2914 : 		{
; 2915 : 			P_NiGHTSDamage(target, source);

  00458	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0045b	50		 push	 eax
  0045c	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  0045f	51		 push	 ecx
  00460	e8 00 00 00 00	 call	 _P_NiGHTSDamage
  00465	83 c4 08	 add	 esp, 8

; 2916 : 			return true;

  00468	b8 01 00 00 00	 mov	 eax, 1
  0046d	e9 10 09 00 00	 jmp	 $LN1@P_DamageMo
$LN37@P_DamageMo:

; 2917 : 		}
; 2918 : 
; 2919 : 		if (inflictor && (inflictor->flags & MF_FIRE))

  00472	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00476	74 57		 je	 SHORT $LN40@P_DamageMo
  00478	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  0047b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0047e	81 e1 00 00 40
	00		 and	 ecx, 4194304		; 00400000H
  00484	74 49		 je	 SHORT $LN40@P_DamageMo

; 2920 : 		{
; 2921 : 			if (player->powers[pw_watershield])

  00486	b8 04 00 00 00	 mov	 eax, 4
  0048b	6b c8 0b	 imul	 ecx, eax, 11
  0048e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00491	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00496	74 07		 je	 SHORT $LN39@P_DamageMo

; 2922 : 				return false; // Invincible to fire objects

  00498	33 c0		 xor	 eax, eax
  0049a	e9 e3 08 00 00	 jmp	 $LN1@P_DamageMo
$LN39@P_DamageMo:

; 2923 : 
; 2924 : 			if ((gametype == GT_COOP || gametype == GT_RACE) && source && source->player)

  0049f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004a6	85 c0		 test	 eax, eax
  004a8	74 0c		 je	 SHORT $LN41@P_DamageMo
  004aa	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004b1	83 f8 02	 cmp	 eax, 2
  004b4	75 19		 jne	 SHORT $LN40@P_DamageMo
$LN41@P_DamageMo:
  004b6	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  004ba	74 13		 je	 SHORT $LN40@P_DamageMo
  004bc	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  004bf	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  004c6	74 07		 je	 SHORT $LN40@P_DamageMo

; 2925 : 				return false; // Don't get hurt by fire generated from friends.

  004c8	33 c0		 xor	 eax, eax
  004ca	e9 b3 08 00 00	 jmp	 $LN1@P_DamageMo
$LN40@P_DamageMo:

; 2926 : 		}
; 2927 : 
; 2928 : 		// Sudden-Death mode
; 2929 : 		if (source && source->type == MT_PLAYER)

  004cf	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  004d3	74 60		 je	 SHORT $LN43@P_DamageMo
  004d5	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  004d8	83 78 7c 00	 cmp	 DWORD PTR [eax+124], 0
  004dc	75 57		 jne	 SHORT $LN43@P_DamageMo

; 2930 : 		{
; 2931 : 			if ((gametype == GT_MATCH || gametype == GT_TAG || gametype == GT_CTF) && cv_suddendeath.value
; 2932 : 				&& !player->powers[pw_flashing] && !player->powers[pw_invulnerability])

  004de	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004e5	83 f8 01	 cmp	 eax, 1
  004e8	74 18		 je	 SHORT $LN44@P_DamageMo
  004ea	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004f1	83 f8 03	 cmp	 eax, 3
  004f4	74 0c		 je	 SHORT $LN44@P_DamageMo
  004f6	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  004fd	83 f8 04	 cmp	 eax, 4
  00500	75 33		 jne	 SHORT $LN43@P_DamageMo
$LN44@P_DamageMo:
  00502	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_suddendeath+20, 0
  00509	74 2a		 je	 SHORT $LN43@P_DamageMo
  0050b	b8 04 00 00 00	 mov	 eax, 4
  00510	d1 e0		 shl	 eax, 1
  00512	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00515	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  0051a	75 19		 jne	 SHORT $LN43@P_DamageMo
  0051c	b8 04 00 00 00	 mov	 eax, 4
  00521	6b c8 00	 imul	 ecx, eax, 0
  00524	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00527	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0052c	75 07		 jne	 SHORT $LN43@P_DamageMo

; 2933 : 				damage = 10000;

  0052e	c7 45 14 10 27
	00 00		 mov	 DWORD PTR _damage$[ebp], 10000 ; 00002710H
$LN43@P_DamageMo:

; 2934 : 		}
; 2935 : 
; 2936 : 		// Player hits another player
; 2937 : 		if (source && source->player)

  00535	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  00539	74 2f		 je	 SHORT $LN46@P_DamageMo
  0053b	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0053e	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00545	74 23		 je	 SHORT $LN46@P_DamageMo

; 2938 : 		{
; 2939 : 			if (!P_PlayerHitsPlayer(target, inflictor, source, damage))

  00547	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  0054a	50		 push	 eax
  0054b	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0054e	51		 push	 ecx
  0054f	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  00552	52		 push	 edx
  00553	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 _P_PlayerHitsPlayer
  0055c	83 c4 10	 add	 esp, 16			; 00000010H
  0055f	85 c0		 test	 eax, eax
  00561	75 07		 jne	 SHORT $LN46@P_DamageMo

; 2940 : 				return false;

  00563	33 c0		 xor	 eax, eax
  00565	e9 18 08 00 00	 jmp	 $LN1@P_DamageMo
$LN46@P_DamageMo:

; 2941 : 		}
; 2942 : 
; 2943 : 		if (player->pflags & PF_GODMODE)

  0056a	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0056d	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00573	83 e1 20	 and	 ecx, 32			; 00000020H
  00576	74 07		 je	 SHORT $LN47@P_DamageMo

; 2944 : 			return false;

  00578	33 c0		 xor	 eax, eax
  0057a	e9 03 08 00 00	 jmp	 $LN1@P_DamageMo
$LN47@P_DamageMo:

; 2945 : 
; 2946 : 		// Instant-Death
; 2947 : 		if (damage == 10000)

  0057f	81 7d 14 10 27
	00 00		 cmp	 DWORD PTR _damage$[ebp], 10000 ; 00002710H
  00586	75 19		 jne	 SHORT $LN48@P_DamageMo

; 2948 : 		{
; 2949 : 			P_KillPlayer(player, source, damage);

  00588	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  0058b	50		 push	 eax
  0058c	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0058f	51		 push	 ecx
  00590	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00593	52		 push	 edx
  00594	e8 00 00 00 00	 call	 _P_KillPlayer
  00599	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2950 : 		}

  0059c	e9 56 02 00 00	 jmp	 $LN62@P_DamageMo
$LN48@P_DamageMo:

; 2951 : 		else if (damage < 10000 // ignore bouncing & such in invulnerability
; 2952 : 			&& (player->powers[pw_invulnerability] || player->powers[pw_flashing]

  005a1	81 7d 14 10 27
	00 00		 cmp	 DWORD PTR _damage$[ebp], 10000 ; 00002710H
  005a8	0f 8d d7 00 00
	00		 jge	 $LN50@P_DamageMo
  005ae	b8 04 00 00 00	 mov	 eax, 4
  005b3	6b c8 00	 imul	 ecx, eax, 0
  005b6	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  005b9	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005be	75 5e		 jne	 SHORT $LN53@P_DamageMo
  005c0	b8 04 00 00 00	 mov	 eax, 4
  005c5	d1 e0		 shl	 eax, 1
  005c7	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  005ca	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  005cf	75 4d		 jne	 SHORT $LN53@P_DamageMo
  005d1	b8 04 00 00 00	 mov	 eax, 4
  005d6	6b c8 0f	 imul	 ecx, eax, 15
  005d9	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  005dc	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  005e1	0f 84 9e 00 00
	00		 je	 $LN50@P_DamageMo
  005e7	b8 04 00 00 00	 mov	 eax, 4
  005ec	6b c8 18	 imul	 ecx, eax, 24
  005ef	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  005f2	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  005f6	83 e0 7f	 and	 eax, 127		; 0000007fH
  005f9	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  005fc	75 20		 jne	 SHORT $LN53@P_DamageMo
  005fe	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00602	74 1a		 je	 SHORT $LN53@P_DamageMo
  00604	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00607	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0060a	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00610	75 73		 jne	 SHORT $LN50@P_DamageMo
  00612	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00615	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0061c	75 67		 jne	 SHORT $LN50@P_DamageMo
$LN53@P_DamageMo:

; 2953 : 			|| (player->powers[pw_super] && !(ALL7EMERALDS(player->powers[pw_emeralds]) && inflictor && ((inflictor->flags & MF_MISSILE) || inflictor->player)))))
; 2954 : 		{
; 2955 : 			if (inflictor && (inflictor->flags & MF_MISSILE)
; 2956 : 				&& (inflictor->flags2 & MF2_SUPERFIRE)
; 2957 : 				&& player->powers[pw_super])

  0061e	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00622	74 55		 je	 SHORT $LN54@P_DamageMo
  00624	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00627	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0062a	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00630	74 47		 je	 SHORT $LN54@P_DamageMo
  00632	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00635	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0063b	81 e1 00 00 00
	04		 and	 ecx, 67108864		; 04000000H
  00641	74 36		 je	 SHORT $LN54@P_DamageMo
  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	6b c8 0f	 imul	 ecx, eax, 15
  0064b	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0064e	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00653	74 24		 je	 SHORT $LN54@P_DamageMo

; 2958 : 			{
; 2959 : 				P_SuperDamage(player, inflictor, source, damage);

  00655	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  00658	50		 push	 eax
  00659	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0065c	51		 push	 ecx
  0065d	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  00660	52		 push	 edx
  00661	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00664	50		 push	 eax
  00665	e8 00 00 00 00	 call	 _P_SuperDamage
  0066a	83 c4 10	 add	 esp, 16			; 00000010H

; 2960 : 				return true;

  0066d	b8 01 00 00 00	 mov	 eax, 1
  00672	e9 0b 07 00 00	 jmp	 $LN1@P_DamageMo

; 2961 : 			}

  00677	eb 07		 jmp	 SHORT $LN55@P_DamageMo
$LN54@P_DamageMo:

; 2962 : 			else
; 2963 : 				return false;

  00679	33 c0		 xor	 eax, eax
  0067b	e9 02 07 00 00	 jmp	 $LN1@P_DamageMo
$LN55@P_DamageMo:

; 2964 : 		}

  00680	e9 72 01 00 00	 jmp	 $LN62@P_DamageMo
$LN50@P_DamageMo:

; 2965 : 		else if (damage < 10000 && !player->powers[pw_super] && (player->powers[pw_forceshield] || player->powers[pw_jumpshield] || player->powers[pw_ringshield] || player->powers[pw_bombshield] || player->powers[pw_watershield]))  //If One-Hit Shield

  00685	81 7d 14 10 27
	00 00		 cmp	 DWORD PTR _damage$[ebp], 10000 ; 00002710H
  0068c	0f 8d 97 00 00
	00		 jge	 $LN56@P_DamageMo
  00692	b8 04 00 00 00	 mov	 eax, 4
  00697	6b c8 0f	 imul	 ecx, eax, 15
  0069a	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0069d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  006a2	0f 85 81 00 00
	00		 jne	 $LN56@P_DamageMo
  006a8	b8 04 00 00 00	 mov	 eax, 4
  006ad	c1 e0 02	 shl	 eax, 2
  006b0	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  006b3	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  006b8	75 48		 jne	 SHORT $LN58@P_DamageMo
  006ba	b8 04 00 00 00	 mov	 eax, 4
  006bf	6b c8 03	 imul	 ecx, eax, 3
  006c2	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  006c5	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  006ca	75 36		 jne	 SHORT $LN58@P_DamageMo
  006cc	b8 04 00 00 00	 mov	 eax, 4
  006d1	6b c8 09	 imul	 ecx, eax, 9
  006d4	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  006d7	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  006dc	75 24		 jne	 SHORT $LN58@P_DamageMo
  006de	b8 04 00 00 00	 mov	 eax, 4
  006e3	6b c8 0a	 imul	 ecx, eax, 10
  006e6	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  006e9	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  006ee	75 12		 jne	 SHORT $LN58@P_DamageMo
  006f0	b8 04 00 00 00	 mov	 eax, 4
  006f5	6b c8 0b	 imul	 ecx, eax, 11
  006f8	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  006fb	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00700	74 27		 je	 SHORT $LN56@P_DamageMo
$LN58@P_DamageMo:

; 2966 : 		{
; 2967 : 			P_ShieldDamage(player, inflictor, source, damage);

  00702	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  00705	50		 push	 eax
  00706	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  00709	51		 push	 ecx
  0070a	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  0070d	52		 push	 edx
  0070e	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 _P_ShieldDamage
  00717	83 c4 10	 add	 esp, 16			; 00000010H

; 2968 : 			return true;

  0071a	b8 01 00 00 00	 mov	 eax, 1
  0071f	e9 5e 06 00 00	 jmp	 $LN1@P_DamageMo

; 2969 : 		}

  00724	e9 ce 00 00 00	 jmp	 $LN62@P_DamageMo
$LN56@P_DamageMo:

; 2970 : 		else if (player->mo->health > 1) // No shield but have rings.

  00729	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0072c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0072e	83 b9 8c 00 00
	00 01		 cmp	 DWORD PTR [ecx+140], 1
  00735	7e 2e		 jle	 SHORT $LN59@P_DamageMo

; 2971 : 		{
; 2972 : 			damage = player->mo->health - 1;

  00737	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0073a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0073c	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00742	83 ea 01	 sub	 edx, 1
  00745	89 55 14	 mov	 DWORD PTR _damage$[ebp], edx

; 2973 : 			P_RingDamage(player, inflictor, source, damage);

  00748	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  0074b	50		 push	 eax
  0074c	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0074f	51		 push	 ecx
  00750	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  00753	52		 push	 edx
  00754	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00757	50		 push	 eax
  00758	e8 00 00 00 00	 call	 _P_RingDamage
  0075d	83 c4 10	 add	 esp, 16			; 00000010H

; 2974 : 		}

  00760	e9 92 00 00 00	 jmp	 $LN62@P_DamageMo
$LN59@P_DamageMo:

; 2975 : 		else // No shield, no rings, no invincibility.
; 2976 : 		{
; 2977 : 			// To reduce griefing potential, don't allow players to be killed
; 2978 : 			// by friendly fire. Spilling their rings and other items is enough.
; 2979 : 			if (!((gametype == GT_CTF || (gametype == GT_MATCH && cv_matchtype.value))

  00765	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  0076c	83 f8 04	 cmp	 eax, 4
  0076f	74 15		 je	 SHORT $LN64@P_DamageMo
  00771	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  00778	83 f8 01	 cmp	 eax, 1
  0077b	75 3e		 jne	 SHORT $LN63@P_DamageMo
  0077d	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_matchtype+20, 0
  00784	74 35		 je	 SHORT $LN63@P_DamageMo
$LN64@P_DamageMo:
  00786	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  0078a	74 2f		 je	 SHORT $LN63@P_DamageMo
  0078c	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0078f	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00796	74 23		 je	 SHORT $LN63@P_DamageMo
  00798	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  0079b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  007a1	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  007a4	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  007aa	3b 82 60 01 00
	00		 cmp	 eax, DWORD PTR [edx+352]
  007b0	75 09		 jne	 SHORT $LN63@P_DamageMo
  007b2	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_friendlyfire+20, 0
  007b9	75 1d		 jne	 SHORT $LN61@P_DamageMo
$LN63@P_DamageMo:

; 2980 : 				&& source && source->player && (source->player->ctfteam == player->ctfteam)
; 2981 : 				&& cv_friendlyfire.value))
; 2982 : 			{
; 2983 : 				damage = 1;

  007bb	c7 45 14 01 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 1

; 2984 : 				P_KillPlayer(player, source, damage);

  007c2	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  007c5	50		 push	 eax
  007c6	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  007c9	51		 push	 ecx
  007ca	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  007cd	52		 push	 edx
  007ce	e8 00 00 00 00	 call	 _P_KillPlayer
  007d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2985 : 			}

  007d6	eb 1f		 jmp	 SHORT $LN62@P_DamageMo
$LN61@P_DamageMo:

; 2986 : 			else
; 2987 : 			{
; 2988 : 				damage = 0;

  007d8	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 0

; 2989 : 				P_RingDamage(player, inflictor, source, damage);

  007df	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  007e2	50		 push	 eax
  007e3	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  007e6	51		 push	 ecx
  007e7	8b 55 0c	 mov	 edx, DWORD PTR _inflictor$[ebp]
  007ea	52		 push	 edx
  007eb	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  007ee	50		 push	 eax
  007ef	e8 00 00 00 00	 call	 _P_RingDamage
  007f4	83 c4 10	 add	 esp, 16			; 00000010H
$LN62@P_DamageMo:

; 2990 : 			}
; 2991 : 		}
; 2992 : 
; 2993 : 		if (inflictor && ((inflictor->flags & MF_MISSILE) || inflictor->player) && player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]))

  007f7	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  007fb	0f 84 ea 01 00
	00		 je	 $LN65@P_DamageMo
  00801	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00804	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00807	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  0080d	75 10		 jne	 SHORT $LN67@P_DamageMo
  0080f	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00812	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00819	0f 84 cc 01 00
	00		 je	 $LN65@P_DamageMo
$LN67@P_DamageMo:
  0081f	b8 04 00 00 00	 mov	 eax, 4
  00824	6b c8 0f	 imul	 ecx, eax, 15
  00827	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0082a	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0082f	0f 84 b6 01 00
	00		 je	 $LN65@P_DamageMo
  00835	b8 04 00 00 00	 mov	 eax, 4
  0083a	6b c8 18	 imul	 ecx, eax, 24
  0083d	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00840	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00844	83 e0 7f	 and	 eax, 127		; 0000007fH
  00847	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0084a	0f 85 9b 01 00
	00		 jne	 $LN65@P_DamageMo

; 2994 : 		{
; 2995 : 			if (player->powers[pw_forceshield] || player->powers[pw_jumpshield] || player->powers[pw_ringshield] || player->powers[pw_bombshield] || player->powers[pw_watershield])

  00850	b8 04 00 00 00	 mov	 eax, 4
  00855	c1 e0 02	 shl	 eax, 2
  00858	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  0085b	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  00860	75 4c		 jne	 SHORT $LN70@P_DamageMo
  00862	b8 04 00 00 00	 mov	 eax, 4
  00867	6b c8 03	 imul	 ecx, eax, 3
  0086a	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0086d	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00872	75 3a		 jne	 SHORT $LN70@P_DamageMo
  00874	b8 04 00 00 00	 mov	 eax, 4
  00879	6b c8 09	 imul	 ecx, eax, 9
  0087c	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0087f	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00884	75 28		 jne	 SHORT $LN70@P_DamageMo
  00886	b8 04 00 00 00	 mov	 eax, 4
  0088b	6b c8 0a	 imul	 ecx, eax, 10
  0088e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00891	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00896	75 16		 jne	 SHORT $LN70@P_DamageMo
  00898	b8 04 00 00 00	 mov	 eax, 4
  0089d	6b c8 0b	 imul	 ecx, eax, 11
  008a0	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  008a3	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  008a8	0f 84 bf 00 00
	00		 je	 $LN68@P_DamageMo
$LN70@P_DamageMo:

; 2996 : 			{
; 2997 : 				player->powers[pw_jumpshield] = false; // Get rid of shield

  008ae	b8 04 00 00 00	 mov	 eax, 4
  008b3	6b c8 03	 imul	 ecx, eax, 3
  008b6	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  008b9	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2998 : 				player->powers[pw_ringshield] = false;

  008c1	b8 04 00 00 00	 mov	 eax, 4
  008c6	6b c8 09	 imul	 ecx, eax, 9
  008c9	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  008cc	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 2999 : 				player->powers[pw_watershield] = false;

  008d4	b8 04 00 00 00	 mov	 eax, 4
  008d9	6b c8 0b	 imul	 ecx, eax, 11
  008dc	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  008df	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3000 : 
; 3001 : 				if (player->powers[pw_forceshield] > 0) // Multi-hit

  008e7	b8 04 00 00 00	 mov	 eax, 4
  008ec	c1 e0 02	 shl	 eax, 2
  008ef	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  008f2	83 7c 01 38 00	 cmp	 DWORD PTR [ecx+eax+56], 0
  008f7	7e 21		 jle	 SHORT $LN71@P_DamageMo

; 3002 : 					player->powers[pw_forceshield]--;

  008f9	b8 04 00 00 00	 mov	 eax, 4
  008fe	c1 e0 02	 shl	 eax, 2
  00901	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00904	8b 54 01 38	 mov	 edx, DWORD PTR [ecx+eax+56]
  00908	83 ea 01	 sub	 edx, 1
  0090b	b8 04 00 00 00	 mov	 eax, 4
  00910	c1 e0 02	 shl	 eax, 2
  00913	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00916	89 54 01 38	 mov	 DWORD PTR [ecx+eax+56], edx
$LN71@P_DamageMo:

; 3003 : 
; 3004 : 				if (player->powers[pw_bombshield]) // Give them what's coming to them!

  0091a	b8 04 00 00 00	 mov	 eax, 4
  0091f	6b c8 0a	 imul	 ecx, eax, 10
  00922	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00925	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  0092a	74 35		 je	 SHORT $LN72@P_DamageMo

; 3005 : 				{
; 3006 : 					player->blackow = 1; // BAM!

  0092c	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0092f	c7 80 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+308], 1

; 3007 : 					player->powers[pw_bombshield] = false;

  00939	b8 04 00 00 00	 mov	 eax, 4
  0093e	6b c8 0a	 imul	 ecx, eax, 10
  00941	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00944	c7 44 0a 38 00
	00 00 00	 mov	 DWORD PTR [edx+ecx+56], 0

; 3008 : 					player->pflags |= PF_JUMPDOWN;

  0094c	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0094f	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00955	83 c9 08	 or	 ecx, 8
  00958	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  0095b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN72@P_DamageMo:

; 3009 : 				}
; 3010 : 				return true;

  00961	b8 01 00 00 00	 mov	 eax, 1
  00966	e9 17 04 00 00	 jmp	 $LN1@P_DamageMo

; 3011 : 			}

  0096b	eb 44		 jmp	 SHORT $LN73@P_DamageMo
$LN68@P_DamageMo:

; 3012 : 			else
; 3013 : 			{
; 3014 : 				player->health -= (10 * (1 << (INT32)(player->powers[pw_super] / 10500)));

  0096d	b8 04 00 00 00	 mov	 eax, 4
  00972	6b c8 0f	 imul	 ecx, eax, 15
  00975	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00978	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  0097c	99		 cdq
  0097d	b9 04 29 00 00	 mov	 ecx, 10500		; 00002904H
  00982	f7 f9		 idiv	 ecx
  00984	ba 01 00 00 00	 mov	 edx, 1
  00989	8b c8		 mov	 ecx, eax
  0098b	d3 e2		 shl	 edx, cl
  0098d	6b c2 0a	 imul	 eax, edx, 10
  00990	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00993	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00996	2b d0		 sub	 edx, eax
  00998	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  0099b	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 3015 : 				if (player->health < 2)

  0099e	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  009a1	83 78 28 02	 cmp	 DWORD PTR [eax+40], 2
  009a5	7d 0a		 jge	 SHORT $LN73@P_DamageMo

; 3016 : 					player->health = 2;

  009a7	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  009aa	c7 40 28 02 00
	00 00		 mov	 DWORD PTR [eax+40], 2
$LN73@P_DamageMo:

; 3017 : 			}
; 3018 : 
; 3019 : 			if (gametype == GT_CTF && (player->gotflag & MF_REDFLAG || player->gotflag & MF_BLUEFLAG))

  009b1	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _gametype
  009b8	83 f8 04	 cmp	 eax, 4
  009bb	75 2c		 jne	 SHORT $LN74@P_DamageMo
  009bd	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  009c0	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  009c7	83 e1 01	 and	 ecx, 1
  009ca	75 0f		 jne	 SHORT $LN75@P_DamageMo
  009cc	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  009cf	0f b7 88 64 01
	00 00		 movzx	 ecx, WORD PTR [eax+356]
  009d6	83 e1 02	 and	 ecx, 2
  009d9	74 0e		 je	 SHORT $LN74@P_DamageMo
$LN75@P_DamageMo:

; 3020 : 				P_PlayerFlagBurst(player, false);

  009db	6a 00		 push	 0
  009dd	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  009e0	50		 push	 eax
  009e1	e8 00 00 00 00	 call	 _P_PlayerFlagBurst
  009e6	83 c4 08	 add	 esp, 8
$LN74@P_DamageMo:

; 3021 : 		}

  009e9	eb 0f		 jmp	 SHORT $LN66@P_DamageMo
$LN65@P_DamageMo:

; 3022 : 		else
; 3023 : 			player->health -= damage; // mirror mobj health here

  009eb	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  009ee	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  009f1	2b 4d 14	 sub	 ecx, DWORD PTR _damage$[ebp]
  009f4	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  009f7	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$LN66@P_DamageMo:

; 3024 : 
; 3025 : 		if (player->health < 0)

  009fa	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  009fd	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00a01	7d 0a		 jge	 SHORT $LN76@P_DamageMo

; 3026 : 			player->health = 0;

  00a03	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00a06	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN76@P_DamageMo:

; 3027 : 
; 3028 : 		if (damage < 10000)

  00a0d	81 7d 14 10 27
	00 00		 cmp	 DWORD PTR _damage$[ebp], 10000 ; 00002710H
  00a14	7d 72		 jge	 SHORT $LN78@P_DamageMo

; 3029 : 		{
; 3030 : 			if (!(inflictor && ((inflictor->flags & MF_MISSILE) || inflictor->player) && player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds])))

  00a16	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00a1a	74 43		 je	 SHORT $LN79@P_DamageMo
  00a1c	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00a1f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00a22	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00a28	75 0c		 jne	 SHORT $LN80@P_DamageMo
  00a2a	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00a2d	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00a34	74 29		 je	 SHORT $LN79@P_DamageMo
$LN80@P_DamageMo:
  00a36	b8 04 00 00 00	 mov	 eax, 4
  00a3b	6b c8 0f	 imul	 ecx, eax, 15
  00a3e	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00a41	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00a46	74 17		 je	 SHORT $LN79@P_DamageMo
  00a48	b8 04 00 00 00	 mov	 eax, 4
  00a4d	6b c8 18	 imul	 ecx, eax, 24
  00a50	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00a53	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00a57	83 e0 7f	 and	 eax, 127		; 0000007fH
  00a5a	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00a5d	74 29		 je	 SHORT $LN78@P_DamageMo
$LN79@P_DamageMo:

; 3031 : 			{
; 3032 : 				target->player->powers[pw_flashing] = flashingtics;

  00a5f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00a62	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00a68	ba 04 00 00 00	 mov	 edx, 4
  00a6d	d1 e2		 shl	 edx, 1
  00a6f	a1 00 00 00 00	 mov	 eax, DWORD PTR _flashingtics
  00a74	89 44 11 38	 mov	 DWORD PTR [ecx+edx+56], eax

; 3033 : 				P_PlayerRingBurst(player, damage);

  00a78	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  00a7b	50		 push	 eax
  00a7c	8b 4d fc	 mov	 ecx, DWORD PTR _player$[ebp]
  00a7f	51		 push	 ecx
  00a80	e8 00 00 00 00	 call	 _P_PlayerRingBurst
  00a85	83 c4 08	 add	 esp, 8
$LN78@P_DamageMo:

; 3034 : 			}
; 3035 : 		}
; 3036 : 
; 3037 : 		P_ForceFeed(player, 40, 10, TICRATE, 40 + min(damage, 100)*2);

  00a88	83 7d 14 64	 cmp	 DWORD PTR _damage$[ebp], 100 ; 00000064H
  00a8c	7d 08		 jge	 SHORT $LN100@P_DamageMo
  00a8e	8b 45 14	 mov	 eax, DWORD PTR _damage$[ebp]
  00a91	89 45 b8	 mov	 DWORD PTR tv521[ebp], eax
  00a94	eb 07		 jmp	 SHORT $LN101@P_DamageMo
$LN100@P_DamageMo:
  00a96	c7 45 b8 64 00
	00 00		 mov	 DWORD PTR tv521[ebp], 100 ; 00000064H
$LN101@P_DamageMo:
  00a9d	8b 4d b8	 mov	 ecx, DWORD PTR tv521[ebp]
  00aa0	8d 54 09 28	 lea	 edx, DWORD PTR [ecx+ecx+40]
  00aa4	52		 push	 edx
  00aa5	6a 23		 push	 35			; 00000023H
  00aa7	6a 0a		 push	 10			; 0000000aH
  00aa9	6a 28		 push	 40			; 00000028H
  00aab	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00aae	50		 push	 eax
  00aaf	e8 00 00 00 00	 call	 _P_ForceFeed
  00ab4	83 c4 14	 add	 esp, 20			; 00000014H
$LN33@P_DamageMo:

; 3038 : 	}
; 3039 : 
; 3040 : 	// Killing dead. Just for kicks.
; 3041 : 	if (cv_killingdead.value && source && source->player && P_Random() < 80)

  00ab7	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR _cv_killingdead+20, 0
  00abe	74 35		 je	 SHORT $LN81@P_DamageMo
  00ac0	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  00ac4	74 2f		 je	 SHORT $LN81@P_DamageMo
  00ac6	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00ac9	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00ad0	74 23		 je	 SHORT $LN81@P_DamageMo
  00ad2	e8 00 00 00 00	 call	 _P_Random
  00ad7	0f b6 c0	 movzx	 eax, al
  00ada	83 f8 50	 cmp	 eax, 80			; 00000050H
  00add	7d 16		 jge	 SHORT $LN81@P_DamageMo

; 3042 : 		P_DamageMobj(source, target, target, 1);

  00adf	6a 01		 push	 1
  00ae1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00ae4	50		 push	 eax
  00ae5	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00ae8	51		 push	 ecx
  00ae9	8b 55 10	 mov	 edx, DWORD PTR _source$[ebp]
  00aec	52		 push	 edx
  00aed	e8 00 00 00 00	 call	 _P_DamageMobj
  00af2	83 c4 10	 add	 esp, 16			; 00000010H
$LN81@P_DamageMo:

; 3043 : 
; 3044 : 	// do the damage
; 3045 : 	if (player && player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]) && inflictor && ((inflictor->flags & MF_MISSILE) || inflictor->player))

  00af5	83 7d fc 00	 cmp	 DWORD PTR _player$[ebp], 0
  00af9	0f 84 9f 00 00
	00		 je	 $LN82@P_DamageMo
  00aff	b8 04 00 00 00	 mov	 eax, 4
  00b04	6b c8 0f	 imul	 ecx, eax, 15
  00b07	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00b0a	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00b0f	0f 84 89 00 00
	00		 je	 $LN82@P_DamageMo
  00b15	b8 04 00 00 00	 mov	 eax, 4
  00b1a	6b c8 18	 imul	 ecx, eax, 24
  00b1d	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00b20	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00b24	83 e0 7f	 and	 eax, 127		; 0000007fH
  00b27	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00b2a	75 72		 jne	 SHORT $LN82@P_DamageMo
  00b2c	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00b30	74 6c		 je	 SHORT $LN82@P_DamageMo
  00b32	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00b35	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00b38	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00b3e	75 0c		 jne	 SHORT $LN84@P_DamageMo
  00b40	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00b43	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00b4a	74 52		 je	 SHORT $LN82@P_DamageMo
$LN84@P_DamageMo:

; 3046 : 	{
; 3047 : 		target->health -= (10 * (1 << (INT32)(player->powers[pw_super] / 10500)));

  00b4c	b8 04 00 00 00	 mov	 eax, 4
  00b51	6b c8 0f	 imul	 ecx, eax, 15
  00b54	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00b57	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00b5b	99		 cdq
  00b5c	b9 04 29 00 00	 mov	 ecx, 10500		; 00002904H
  00b61	f7 f9		 idiv	 ecx
  00b63	ba 01 00 00 00	 mov	 edx, 1
  00b68	8b c8		 mov	 ecx, eax
  00b6a	d3 e2		 shl	 edx, cl
  00b6c	6b c2 0a	 imul	 eax, edx, 10
  00b6f	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00b72	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00b78	2b d0		 sub	 edx, eax
  00b7a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00b7d	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 3048 : 		if (target->health < 2)

  00b83	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00b86	83 b8 8c 00 00
	00 02		 cmp	 DWORD PTR [eax+140], 2
  00b8d	7d 0d		 jge	 SHORT $LN85@P_DamageMo

; 3049 : 			target->health = 2;

  00b8f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00b92	c7 80 8c 00 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+140], 2
$LN85@P_DamageMo:

; 3050 : 	}

  00b9c	eb 15		 jmp	 SHORT $LN83@P_DamageMo
$LN82@P_DamageMo:

; 3051 : 	else
; 3052 : 		target->health -= damage;

  00b9e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00ba1	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00ba7	2b 4d 14	 sub	 ecx, DWORD PTR _damage$[ebp]
  00baa	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00bad	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx
$LN83@P_DamageMo:

; 3053 : 
; 3054 : 	if (target->health <= 0)

  00bb3	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00bb6	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  00bbd	7f 1e		 jg	 SHORT $LN86@P_DamageMo

; 3055 : 	{
; 3056 : 		P_KillMobj(target, inflictor, source);

  00bbf	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00bc2	50		 push	 eax
  00bc3	8b 4d 0c	 mov	 ecx, DWORD PTR _inflictor$[ebp]
  00bc6	51		 push	 ecx
  00bc7	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00bca	52		 push	 edx
  00bcb	e8 00 00 00 00	 call	 _P_KillMobj
  00bd0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3057 : 		return true;

  00bd3	b8 01 00 00 00	 mov	 eax, 1
  00bd8	e9 a5 01 00 00	 jmp	 $LN1@P_DamageMo
$LN86@P_DamageMo:

; 3058 : 	}
; 3059 : 
; 3060 : 	if (player)

  00bdd	83 7d fc 00	 cmp	 DWORD PTR _player$[ebp], 0
  00be1	0f 84 b7 00 00
	00		 je	 $LN87@P_DamageMo

; 3061 : 	{
; 3062 : 		if (!(player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds]) && inflictor && ((inflictor->flags & MF_MISSILE) || inflictor->player)))

  00be7	b8 04 00 00 00	 mov	 eax, 4
  00bec	6b c8 0f	 imul	 ecx, eax, 15
  00bef	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00bf2	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00bf7	74 37		 je	 SHORT $LN90@P_DamageMo
  00bf9	b8 04 00 00 00	 mov	 eax, 4
  00bfe	6b c8 18	 imul	 ecx, eax, 24
  00c01	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00c04	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00c08	83 e0 7f	 and	 eax, 127		; 0000007fH
  00c0b	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00c0e	75 20		 jne	 SHORT $LN90@P_DamageMo
  00c10	83 7d 0c 00	 cmp	 DWORD PTR _inflictor$[ebp], 0
  00c14	74 1a		 je	 SHORT $LN90@P_DamageMo
  00c16	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00c19	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00c1c	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00c22	75 3d		 jne	 SHORT $LN89@P_DamageMo
  00c24	8b 45 0c	 mov	 eax, DWORD PTR _inflictor$[ebp]
  00c27	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00c2e	75 31		 jne	 SHORT $LN89@P_DamageMo
$LN90@P_DamageMo:

; 3063 : 		{
; 3064 : 			P_SetPlayerMobjState(target, target->info->painstate);

  00c30	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00c33	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00c39	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00c3c	52		 push	 edx
  00c3d	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00c40	50		 push	 eax
  00c41	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00c46	83 c4 08	 add	 esp, 8

; 3065 : 			player->pflags &= ~PF_ROPEHANG;

  00c49	8b 45 fc	 mov	 eax, DWORD PTR _player$[ebp]
  00c4c	8b 88 ac 00 00
	00		 mov	 ecx, DWORD PTR [eax+172]
  00c52	81 e1 ff ff ff
	df		 and	 ecx, -536870913		; dfffffffH
  00c58	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00c5b	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx
$LN89@P_DamageMo:

; 3066 : 		}
; 3067 : 
; 3068 : 		if (!(player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds])))

  00c61	b8 04 00 00 00	 mov	 eax, 4
  00c66	6b c8 0f	 imul	 ecx, eax, 15
  00c69	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00c6c	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00c71	74 17		 je	 SHORT $LN92@P_DamageMo
  00c73	b8 04 00 00 00	 mov	 eax, 4
  00c78	6b c8 18	 imul	 ecx, eax, 24
  00c7b	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00c7e	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00c82	83 e0 7f	 and	 eax, 127		; 0000007fH
  00c85	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00c88	74 12		 je	 SHORT $LN91@P_DamageMo
$LN92@P_DamageMo:

; 3069 : 			P_ResetPlayer(target->player);

  00c8a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00c8d	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00c93	51		 push	 ecx
  00c94	e8 00 00 00 00	 call	 _P_ResetPlayer
  00c99	83 c4 04	 add	 esp, 4
$LN91@P_DamageMo:

; 3070 : 	}

  00c9c	eb 19		 jmp	 SHORT $LN88@P_DamageMo
$LN87@P_DamageMo:

; 3071 : 	else
; 3072 : 		P_SetMobjState(target, target->info->painstate);

  00c9e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00ca1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00ca7	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00caa	52		 push	 edx
  00cab	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00cae	50		 push	 eax
  00caf	e8 00 00 00 00	 call	 _P_SetMobjState
  00cb4	83 c4 08	 add	 esp, 8
$LN88@P_DamageMo:

; 3073 : 
; 3074 : 	target->reactiontime = 0; // we're awake now...

  00cb7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00cba	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 3075 : 
; 3076 : 	if (source && source != target)

  00cc4	83 7d 10 00	 cmp	 DWORD PTR _source$[ebp], 0
  00cc8	0f 84 af 00 00
	00		 je	 $LN96@P_DamageMo
  00cce	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00cd1	3b 45 08	 cmp	 eax, DWORD PTR _target$[ebp]
  00cd4	0f 84 a3 00 00
	00		 je	 $LN96@P_DamageMo

; 3077 : 	{
; 3078 : 		// if not intent on another player,
; 3079 : 		// chase after this one
; 3080 : 		P_SetTarget(&target->target, source);

  00cda	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00cdd	50		 push	 eax
  00cde	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00ce1	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00ce7	51		 push	 ecx
  00ce8	e8 00 00 00 00	 call	 _P_SetTarget
  00ced	83 c4 08	 add	 esp, 8

; 3081 : 		if (target->state == &states[target->info->spawnstate] && target->info->seestate != S_NULL)

  00cf0	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00cf3	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00cf9	6b 51 04 1c	 imul	 edx, DWORD PTR [ecx+4], 28
  00cfd	81 c2 00 00 00
	00		 add	 edx, OFFSET _states
  00d03	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00d06	39 50 5c	 cmp	 DWORD PTR [eax+92], edx
  00d09	75 72		 jne	 SHORT $LN96@P_DamageMo
  00d0b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00d0e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00d14	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00d18	74 63		 je	 SHORT $LN96@P_DamageMo

; 3082 : 		{
; 3083 : 			if (player)

  00d1a	83 7d fc 00	 cmp	 DWORD PTR _player$[ebp], 0
  00d1e	74 44		 je	 SHORT $LN95@P_DamageMo

; 3084 : 			{
; 3085 : 				if (!(player->powers[pw_super] && ALL7EMERALDS(player->powers[pw_emeralds])))

  00d20	b8 04 00 00 00	 mov	 eax, 4
  00d25	6b c8 0f	 imul	 ecx, eax, 15
  00d28	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00d2b	83 7c 0a 38 00	 cmp	 DWORD PTR [edx+ecx+56], 0
  00d30	74 17		 je	 SHORT $LN98@P_DamageMo
  00d32	b8 04 00 00 00	 mov	 eax, 4
  00d37	6b c8 18	 imul	 ecx, eax, 24
  00d3a	8b 55 fc	 mov	 edx, DWORD PTR _player$[ebp]
  00d3d	8b 44 0a 38	 mov	 eax, DWORD PTR [edx+ecx+56]
  00d41	83 e0 7f	 and	 eax, 127		; 0000007fH
  00d44	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00d47	74 19		 je	 SHORT $LN97@P_DamageMo
$LN98@P_DamageMo:

; 3086 : 					P_SetPlayerMobjState(target, target->info->seestate);

  00d49	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00d4c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00d52	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00d55	52		 push	 edx
  00d56	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00d59	50		 push	 eax
  00d5a	e8 00 00 00 00	 call	 _P_SetPlayerMobjState
  00d5f	83 c4 08	 add	 esp, 8
$LN97@P_DamageMo:

; 3087 : 			}

  00d62	eb 19		 jmp	 SHORT $LN96@P_DamageMo
$LN95@P_DamageMo:

; 3088 : 			else
; 3089 : 				P_SetMobjState(target, target->info->seestate);

  00d64	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00d67	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00d6d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00d70	52		 push	 edx
  00d71	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00d74	50		 push	 eax
  00d75	e8 00 00 00 00	 call	 _P_SetMobjState
  00d7a	83 c4 08	 add	 esp, 8
$LN96@P_DamageMo:

; 3090 : 		}
; 3091 : 	}
; 3092 : 
; 3093 : 	return true;

  00d7d	b8 01 00 00 00	 mov	 eax, 1
$LN1@P_DamageMo:

; 3094 : }

  00d82	5f		 pop	 edi
  00d83	5e		 pop	 esi
  00d84	5b		 pop	 ebx
  00d85	8b e5		 mov	 esp, ebp
  00d87	5d		 pop	 ebp
  00d88	c3		 ret	 0
_P_DamageMobj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_RampConstant
_TEXT	SEGMENT
_RampQuake$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_FFInfo$ = 8						; size = 4
_Start$ = 12						; size = 4
_End$ = 16						; size = 4
_P_RampConstant PROC					; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 63   : 	JoyFF_t RampQuake;
; 64   : 	if (!FFInfo || !FFInfo->player)

  00013	83 7d 08 00	 cmp	 DWORD PTR _FFInfo$[ebp], 0
  00017	74 09		 je	 SHORT $LN3@P_RampCons
  00019	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0001c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00020	75 05		 jne	 SHORT $LN2@P_RampCons
$LN3@P_RampCons:

; 65   : 		return;

  00022	e9 8d 00 00 00	 jmp	 $LN6@P_RampCons
$LN2@P_RampCons:

; 66   : 	RampQuake.ForceX    = FFInfo->ForceX;

  00027	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d d4	 mov	 DWORD PTR _RampQuake$[ebp], ecx

; 67   : 	RampQuake.ForceY    = FFInfo->ForceY;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	89 4d d8	 mov	 DWORD PTR _RampQuake$[ebp+4], ecx

; 68   : 	RampQuake.Duration  = FFInfo->Duration;

  00038	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0003b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003e	89 4d dc	 mov	 DWORD PTR _RampQuake$[ebp+8], ecx

; 69   : 	RampQuake.Gain      = FFInfo->Gain;

  00041	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  00044	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00047	89 4d e0	 mov	 DWORD PTR _RampQuake$[ebp+12], ecx

; 70   : 	RampQuake.Magnitude = FFInfo->Magnitude;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0004d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00050	89 4d e4	 mov	 DWORD PTR _RampQuake$[ebp+16], ecx

; 71   : 	RampQuake.Start     = Start;

  00053	8b 45 0c	 mov	 eax, DWORD PTR _Start$[ebp]
  00056	89 45 e8	 mov	 DWORD PTR _RampQuake$[ebp+20], eax

; 72   : 	RampQuake.End       = End;

  00059	8b 45 10	 mov	 eax, DWORD PTR _End$[ebp]
  0005c	89 45 ec	 mov	 DWORD PTR _RampQuake$[ebp+24], eax

; 73   : 	if (FFInfo->player == &players[consoleplayer])

  0005f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  00069	05 00 00 00 00	 add	 eax, OFFSET _players
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _FFInfo$[ebp]
  00071	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00074	75 10		 jne	 SHORT $LN4@P_RampCons

; 74   : 		I_Tactile(ConstantForce, &RampQuake);

  00076	8d 45 d4	 lea	 eax, DWORD PTR _RampQuake$[ebp]
  00079	50		 push	 eax
  0007a	6a 00		 push	 0
  0007c	e8 00 00 00 00	 call	 _I_Tactile
  00081	83 c4 08	 add	 esp, 8
  00084	eb 2e		 jmp	 SHORT $LN6@P_RampCons
$LN4@P_RampCons:

; 75   : 	else if (splitscreen && FFInfo->player == &players[secondarydisplayplayer])

  00086	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  0008d	74 25		 je	 SHORT $LN6@P_RampCons
  0008f	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  00099	05 00 00 00 00	 add	 eax, OFFSET _players
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _FFInfo$[ebp]
  000a1	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  000a4	75 0e		 jne	 SHORT $LN6@P_RampCons

; 76   : 		I_Tactile2(ConstantForce, &RampQuake);

  000a6	8d 45 d4	 lea	 eax, DWORD PTR _RampQuake$[ebp]
  000a9	50		 push	 eax
  000aa	6a 00		 push	 0
  000ac	e8 00 00 00 00	 call	 _I_Tactile2
  000b1	83 c4 08	 add	 esp, 8
$LN6@P_RampCons:

; 77   : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
_P_RampConstant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_ForceConstant
_TEXT	SEGMENT
_ConstantQuake$ = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_FFInfo$ = 8						; size = 4
_P_ForceConstant PROC					; COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 48   : 	JoyFF_t ConstantQuake;
; 49   : 	if (!FFInfo || !FFInfo->player)

  00013	83 7d 08 00	 cmp	 DWORD PTR _FFInfo$[ebp], 0
  00017	74 09		 je	 SHORT $LN3@P_ForceCon
  00019	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0001c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00020	75 05		 jne	 SHORT $LN2@P_ForceCon
$LN3@P_ForceCon:

; 50   : 		return;

  00022	e9 81 00 00 00	 jmp	 $LN6@P_ForceCon
$LN2@P_ForceCon:

; 51   : 	ConstantQuake.ForceX    = FFInfo->ForceX;

  00027	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d d4	 mov	 DWORD PTR _ConstantQuake$[ebp], ecx

; 52   : 	ConstantQuake.ForceY    = FFInfo->ForceY;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	89 4d d8	 mov	 DWORD PTR _ConstantQuake$[ebp+4], ecx

; 53   : 	ConstantQuake.Duration  = FFInfo->Duration;

  00038	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0003b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003e	89 4d dc	 mov	 DWORD PTR _ConstantQuake$[ebp+8], ecx

; 54   : 	ConstantQuake.Gain      = FFInfo->Gain;

  00041	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  00044	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00047	89 4d e0	 mov	 DWORD PTR _ConstantQuake$[ebp+12], ecx

; 55   : 	ConstantQuake.Magnitude = FFInfo->Magnitude;

  0004a	8b 45 08	 mov	 eax, DWORD PTR _FFInfo$[ebp]
  0004d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00050	89 4d e4	 mov	 DWORD PTR _ConstantQuake$[ebp+16], ecx

; 56   : 	if (FFInfo->player == &players[consoleplayer])

  00053	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _consoleplayer, 508
  0005d	05 00 00 00 00	 add	 eax, OFFSET _players
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _FFInfo$[ebp]
  00065	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00068	75 10		 jne	 SHORT $LN4@P_ForceCon

; 57   : 		I_Tactile(ConstantForce, &ConstantQuake);

  0006a	8d 45 d4	 lea	 eax, DWORD PTR _ConstantQuake$[ebp]
  0006d	50		 push	 eax
  0006e	6a 00		 push	 0
  00070	e8 00 00 00 00	 call	 _I_Tactile
  00075	83 c4 08	 add	 esp, 8
  00078	eb 2e		 jmp	 SHORT $LN6@P_ForceCon
$LN4@P_ForceCon:

; 58   : 	else if (splitscreen && FFInfo->player == &players[secondarydisplayplayer])

  0007a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _splitscreen, 0
  00081	74 25		 je	 SHORT $LN6@P_ForceCon
  00083	69 05 00 00 00
	00 fc 01 00 00	 imul	 eax, DWORD PTR _secondarydisplayplayer, 508
  0008d	05 00 00 00 00	 add	 eax, OFFSET _players
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _FFInfo$[ebp]
  00095	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00098	75 0e		 jne	 SHORT $LN6@P_ForceCon

; 59   : 		I_Tactile2(ConstantForce, &ConstantQuake);

  0009a	8d 45 d4	 lea	 eax, DWORD PTR _ConstantQuake$[ebp]
  0009d	50		 push	 eax
  0009e	6a 00		 push	 0
  000a0	e8 00 00 00 00	 call	 _I_Tactile2
  000a5	83 c4 08	 add	 esp, 8
$LN6@P_ForceCon:

; 60   : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
_P_ForceConstant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\p_inter.c
;	COMDAT _P_ForceFeed
_TEXT	SEGMENT
_Basicfeed$ = -24					; size = 24
_player$ = 8						; size = 4
_attack$ = 12						; size = 4
_fade$ = 16						; size = 4
_duration$ = 20						; size = 4
_period$ = 24						; size = 4
_P_ForceFeed PROC					; COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 34   : 	BasicFF_t Basicfeed;
; 35   : 	if (!player)

  00009	83 7d 08 00	 cmp	 DWORD PTR _player$[ebp], 0
  0000d	75 02		 jne	 SHORT $LN2@P_ForceFee

; 36   : 		return;

  0000f	eb 3d		 jmp	 SHORT $LN1@P_ForceFee
$LN2@P_ForceFee:

; 37   : 	Basicfeed.Duration = (UINT32)(duration * (100L/TICRATE));

  00011	8b 45 14	 mov	 eax, DWORD PTR _duration$[ebp]
  00014	d1 e0		 shl	 eax, 1
  00016	89 45 f4	 mov	 DWORD PTR _Basicfeed$[ebp+12], eax

; 38   : 	Basicfeed.ForceX = Basicfeed.ForceY = 1;

  00019	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _Basicfeed$[ebp+4], 1
  00020	8b 45 ec	 mov	 eax, DWORD PTR _Basicfeed$[ebp+4]
  00023	89 45 e8	 mov	 DWORD PTR _Basicfeed$[ebp], eax

; 39   : 	Basicfeed.Gain = 25000;

  00026	c7 45 f8 a8 61
	00 00		 mov	 DWORD PTR _Basicfeed$[ebp+16], 25000 ; 000061a8H

; 40   : 	Basicfeed.Magnitude = period*10;

  0002d	6b 45 18 0a	 imul	 eax, DWORD PTR _period$[ebp], 10
  00031	89 45 fc	 mov	 DWORD PTR _Basicfeed$[ebp+20], eax

; 41   : 	Basicfeed.player = player;

  00034	8b 45 08	 mov	 eax, DWORD PTR _player$[ebp]
  00037	89 45 f0	 mov	 DWORD PTR _Basicfeed$[ebp+8], eax

; 42   : 	/// \todo test FFB
; 43   : 	P_RampConstant(&Basicfeed, attack, fade);

  0003a	8b 45 10	 mov	 eax, DWORD PTR _fade$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _attack$[ebp]
  00041	51		 push	 ecx
  00042	8d 55 e8	 lea	 edx, DWORD PTR _Basicfeed$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _P_RampConstant
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@P_ForceFee:

; 44   : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_P_ForceFeed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\RafaTheFox\Downloads\SRB2-Public-master\src\m_fixed.h
;	COMDAT _FixedDiv
_TEXT	SEGMENT
tv72 = -68						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FixedDiv PROC						; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 236  : 	if ((abs(a) >> (FRACBITS-2)) >= abs(b))

  00009	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _abs
  00012	83 c4 04	 add	 esp, 4
  00015	8b f0		 mov	 esi, eax
  00017	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _abs
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	7c 1d		 jl	 SHORT $LN2@FixedDiv

; 237  : 		return (a^b) < 0 ? INT32_MIN : INT32_MAX;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002d	33 45 0c	 xor	 eax, DWORD PTR _b$[ebp]
  00030	7d 09		 jge	 SHORT $LN4@FixedDiv
  00032	c7 45 bc 00 00
	00 80		 mov	 DWORD PTR tv72[ebp], -2147483648 ; 80000000H
  00039	eb 07		 jmp	 SHORT $LN5@FixedDiv
$LN4@FixedDiv:
  0003b	c7 45 bc ff ff
	ff 7f		 mov	 DWORD PTR tv72[ebp], 2147483647 ; 7fffffffH
$LN5@FixedDiv:
  00042	8b 45 bc	 mov	 eax, DWORD PTR tv72[ebp]
  00045	eb 10		 jmp	 SHORT $LN1@FixedDiv
$LN2@FixedDiv:

; 238  : 
; 239  : 	return FixedDiv2(a, b);

  00047	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _FixedDiv2
  00054	83 c4 08	 add	 esp, 8
$LN1@FixedDiv:

; 240  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_FixedDiv ENDP
_TEXT	ENDS
END
